
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b740  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800ba10  0800ba10  0000ca10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bd78  0800bd78  0000cd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bd80  0800bd80  0000cd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bd88  0800bd88  0000cd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800bd8c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001498  2400006c  0800bdf8  0000d06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001504  0800bdf8  0000d504  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002338e  00000000  00000000  0000d09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003855  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001398  00000000  00000000  00033c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f1a  00000000  00000000  00035018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a12e  00000000  00000000  00035f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bb58  00000000  00000000  00070060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167cf3  00000000  00000000  0008bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f38ab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005930  00000000  00000000  001f38f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001f9220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b9f8 	.word	0x0800b9f8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800b9f8 	.word	0x0800b9f8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <_ZN7BMS_MODC1Emiiihji>:
/*********************************************************************************************************
** Function name:           BMS_MOD
** Descriptions:            Initialization function of teh class
*********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT, uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3308      	adds	r3, #8
 80006d0:	2230      	movs	r2, #48	@ 0x30
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00a fd0f 	bl	800b0f8 <memset>
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2200      	movs	r2, #0
 80006de:	639a      	str	r2, [r3, #56]	@ 0x38
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	649a      	str	r2, [r3, #72]	@ 0x48
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000704:	651a      	str	r2, [r3, #80]	@ 0x50
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800070c:	655a      	str	r2, [r3, #84]	@ 0x54
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000714:	659a      	str	r2, [r3, #88]	@ 0x58
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2200      	movs	r2, #0
 8000722:	661a      	str	r2, [r3, #96]	@ 0x60
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	665a      	str	r2, [r3, #100]	@ 0x64
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2203      	movs	r2, #3
 8000740:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2203      	movs	r2, #3
 8000748:	66da      	str	r2, [r3, #108]	@ 0x6c
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3370      	adds	r3, #112	@ 0x70
 800074e:	2230      	movs	r2, #48	@ 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f00a fcd0 	bl	800b0f8 <memset>
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2200      	movs	r2, #0
 800075c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2200      	movs	r2, #0
 8000764:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2200      	movs	r2, #0
 800076c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f241 0268 	movw	r2, #4200	@ 0x1068
 8000776:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    CANID = _ID;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	601a      	str	r2, [r3, #0]
    LIMIT_MAX_V = _MAXV;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	641a      	str	r2, [r3, #64]	@ 0x40
    LIMIT_MIN_V = _MINV;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	645a      	str	r2, [r3, #68]	@ 0x44
    LIMIT_MAX_T = _MAXT;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	649a      	str	r2, [r3, #72]	@ 0x48
    NUM_CELLS = _NUMCELLS;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	7f3a      	ldrb	r2, [r7, #28]
 800079e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    time_lim_plotted += _LAG;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80007a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a8:	441a      	add	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    time_lim_sended += _LAG;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80007b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b4:	441a      	add	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	661a      	str	r2, [r3, #96]	@ 0x60
    time_lim_received += _LAG;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80007be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c0:	441a      	add	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	665a      	str	r2, [r3, #100]	@ 0x64
}
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_ZN7BMS_MOD5parseEmPhm>:
/*********************************************************************************************************
** Function name:           parse
** Descriptions:            Function for parsing the received data via CAN protocl
*********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id,uint8_t *buf,uint32_t t)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]

  if (id>CANID && id<CANID+10){
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	f240 8104 	bls.w	80009f2 <_ZN7BMS_MOD5parseEmPhm+0x222>
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	330a      	adds	r3, #10
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	f080 80fd 	bcs.w	80009f2 <_ZN7BMS_MOD5parseEmPhm+0x222>
    int m = id%CANID;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000802:	fb01 f202 	mul.w	r2, r1, r2
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	61bb      	str	r3, [r7, #24]
    int pos = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
    if (m>0 && m<5){
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	2b00      	cmp	r3, #0
 8000812:	f340 80ee 	ble.w	80009f2 <_ZN7BMS_MOD5parseEmPhm+0x222>
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	2b04      	cmp	r3, #4
 800081a:	f300 80ea 	bgt.w	80009f2 <_ZN7BMS_MOD5parseEmPhm+0x222>
      time_lim_received   = t + TIME_LIM_RECV;        // Reset the timer flag for checking if the data is received
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	441a      	add	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	665a      	str	r2, [r3, #100]	@ 0x64
      if (m<4){
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	2b03      	cmp	r3, #3
 800082e:	f300 80a8 	bgt.w	8000982 <_ZN7BMS_MOD5parseEmPhm+0x1b2>
        if(flag_charger == 1)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d10f      	bne.n	800085c <_ZN7BMS_MOD5parseEmPhm+0x8c>
        {
          if(module_send_message_CAN1(id,buf,8)!=HAL_OK) error = BMS_ERROR_COMMUNICATION;
 800083c:	2208      	movs	r2, #8
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f001 f9a9 	bl	8001b98 <module_send_message_CAN1>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	bf14      	ite	ne
 800084c:	2301      	movne	r3, #1
 800084e:	2300      	moveq	r3, #0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <_ZN7BMS_MOD5parseEmPhm+0x8c>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2201      	movs	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
          }
        for (int i = 0; i < 4; i++)          // i = number of cell within message
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000860:	e052      	b.n	8000908 <_ZN7BMS_MOD5parseEmPhm+0x138>
        {
          pos = (m-1)*4 + i;
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	3b01      	subs	r3, #1
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800086a:	4413      	add	r3, r2
 800086c:	617b      	str	r3, [r7, #20]
          cellVoltagemV[pos] = (buf[2*i] << 8) + buf[2*i + 1];
 800086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	3201      	adds	r2, #1
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	440a      	add	r2, r1
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	1899      	adds	r1, r3, r2
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	3202      	adds	r2, #2
 8000890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          if ((cellVoltagemV[pos]>LIMIT_MAX_V ||
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	3202      	adds	r2, #2
 800089a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dc08      	bgt.n	80008b8 <_ZN7BMS_MOD5parseEmPhm+0xe8>
              cellVoltagemV[pos]<LIMIT_MIN_V) &&
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	3202      	adds	r2, #2
 80008ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          if ((cellVoltagemV[pos]>LIMIT_MAX_V ||
 80008b4:	429a      	cmp	r2, r3
 80008b6:	da1e      	bge.n	80008f6 <_ZN7BMS_MOD5parseEmPhm+0x126>
              pos<NUM_CELLS)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80008be:	461a      	mov	r2, r3
              cellVoltagemV[pos]<LIMIT_MIN_V) &&
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	4293      	cmp	r3, r2
 80008c4:	da17      	bge.n	80008f6 <_ZN7BMS_MOD5parseEmPhm+0x126>
          {
            flag_error_volt[pos] = flag_error_volt[pos] + 1;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	321c      	adds	r2, #28
 80008cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d0:	1c59      	adds	r1, r3, #1
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	321c      	adds	r2, #28
 80008d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if (flag_error_volt[pos] >= max_flag) error =   BMS_ERROR_VOLTS;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	321c      	adds	r2, #28
 80008e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80008ea:	429a      	cmp	r2, r3
 80008ec:	db09      	blt.n	8000902 <_ZN7BMS_MOD5parseEmPhm+0x132>
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2202      	movs	r2, #2
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	e005      	b.n	8000902 <_ZN7BMS_MOD5parseEmPhm+0x132>
          }else flag_error_volt[pos] = 0;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	321c      	adds	r2, #28
 80008fc:	2100      	movs	r1, #0
 80008fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 0; i < 4; i++)          // i = number of cell within message
 8000902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000904:	3301      	adds	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
 8000908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090a:	2b03      	cmp	r3, #3
 800090c:	dda9      	ble.n	8000862 <_ZN7BMS_MOD5parseEmPhm+0x92>
        }
        MAX_V = cellVoltagemV[0];
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	64da      	str	r2, [r3, #76]	@ 0x4c
        MIN_V = cellVoltagemV[0];
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        for (int i = 1; i < NUM_CELLS; i++)                                               // i = number of cell within message
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
 8000924:	e025      	b.n	8000972 <_ZN7BMS_MOD5parseEmPhm+0x1a2>
        {
          if(cellVoltagemV[i] > MAX_V) MAX_V = cellVoltagemV[i];
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6a3a      	ldr	r2, [r7, #32]
 800092a:	3202      	adds	r2, #2
 800092c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000934:	429a      	cmp	r2, r3
 8000936:	dd07      	ble.n	8000948 <_ZN7BMS_MOD5parseEmPhm+0x178>
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6a3a      	ldr	r2, [r7, #32]
 800093c:	3202      	adds	r2, #2
 800093e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000946:	e011      	b.n	800096c <_ZN7BMS_MOD5parseEmPhm+0x19c>
          else if (cellVoltagemV[i] < MIN_V) MIN_V = cellVoltagemV[i];
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	3202      	adds	r2, #2
 800094e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000958:	429a      	cmp	r2, r3
 800095a:	da07      	bge.n	800096c <_ZN7BMS_MOD5parseEmPhm+0x19c>
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	6a3a      	ldr	r2, [r7, #32]
 8000960:	3202      	adds	r2, #2
 8000962:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        for (int i = 1; i < NUM_CELLS; i++)                                               // i = number of cell within message
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	3301      	adds	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8000978:	461a      	mov	r2, r3
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	4293      	cmp	r3, r2
 800097e:	dbd2      	blt.n	8000926 <_ZN7BMS_MOD5parseEmPhm+0x156>
 8000980:	e035      	b.n	80009ee <_ZN7BMS_MOD5parseEmPhm+0x21e>
        }
        //message_balancing[1] = BALANCING_V & 0xFF;           // Coment this two lines for disabling the balancing
        //message_balancing[0] = (BALANCING_V >> 8) & 0xFF;    // Coment this two lines for disabling the balancing


      }else if(m==4){
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	2b04      	cmp	r3, #4
 8000986:	d132      	bne.n	80009ee <_ZN7BMS_MOD5parseEmPhm+0x21e>
        for (int i = 0; i < 2; i++)
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	e02c      	b.n	80009e8 <_ZN7BMS_MOD5parseEmPhm+0x218>
        {
          temperature[i] = buf[i] - 40;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4413      	add	r3, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f1a3 0128 	sub.w	r1, r3, #40	@ 0x28
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	320e      	adds	r2, #14
 80009a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          if (temperature[i]>LIMIT_MAX_T)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	320e      	adds	r2, #14
 80009aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009b2:	429a      	cmp	r2, r3
 80009b4:	dd11      	ble.n	80009da <_ZN7BMS_MOD5parseEmPhm+0x20a>
          {
            flag_error_temp++;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            if (flag_error_temp >= max_flag) error = BMS_ERROR_TEMP;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80009ce:	429a      	cmp	r2, r3
 80009d0:	db07      	blt.n	80009e2 <_ZN7BMS_MOD5parseEmPhm+0x212>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2203      	movs	r2, #3
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	e003      	b.n	80009e2 <_ZN7BMS_MOD5parseEmPhm+0x212>
          }else flag_error_temp = 0;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        for (int i = 0; i < 2; i++)
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3301      	adds	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	ddcf      	ble.n	800098e <_ZN7BMS_MOD5parseEmPhm+0x1be>
        }
      }
      return true;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <_ZN7BMS_MOD5parseEmPhm+0x224>
    }
  }
    return false;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3728      	adds	r7, #40	@ 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_ZN7BMS_MOD5queryEmPc>:
/*********************************************************************************************************
** Function name:           query
** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
*********************************************************************************************************/
int BMS_MOD::query(uint32_t time, char *buffer)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  //INT8U message_balancing[2] = {0,0}; // Voltage in mV
// Function for performing a correct behaivour
    if (time>time_lim_sended){ // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d910      	bls.n	8000a34 <_ZN7BMS_MOD5queryEmPc+0x38>
      time_lim_sended += TIME_LIM_SEND;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a1a:	441a      	add	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	661a      	str	r2, [r3, #96]	@ 0x60
      if (module_send_message_CAN2(CANID,message_balancing,2)!=HAL_OK)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3368      	adds	r3, #104	@ 0x68
 8000a28:	2202      	movs	r2, #2
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f001 f8d6 	bl	8001bdc <module_send_message_CAN2>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
      {
        //error = BMS_ERROR_COMMUNICATION; // If the message is not sended then, error
      }
    }
    if (time>time_lim_received)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d902      	bls.n	8000a44 <_ZN7BMS_MOD5queryEmPc+0x48>
    {
      error = BMS_ERROR_COMMUNICATION;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2201      	movs	r2, #1
 8000a42:	605a      	str	r2, [r3, #4]
    }
    if (TIME_LIM_PLOT>0 && time>time_lim_plotted){
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00b      	beq.n	8000a64 <_ZN7BMS_MOD5queryEmPc+0x68>
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d906      	bls.n	8000a64 <_ZN7BMS_MOD5queryEmPc+0x68>
      time_lim_plotted += TIME_LIM_PLOT;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a5e:	441a      	add	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	65da      	str	r2, [r3, #92]	@ 0x5c
      //info(buffer);
    }

    for(int i = 0; i < NUM_CELLS; i++){
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	e00e      	b.n	8000a88 <_ZN7BMS_MOD5queryEmPc+0x8c>
    	voltage_acum+= cellVoltagemV[i];
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6979      	ldr	r1, [r7, #20]
 8000a74:	3102      	adds	r1, #2
 8000a76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a7a:	441a      	add	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    for(int i = 0; i < NUM_CELLS; i++){
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8000a8e:	461a      	mov	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	4293      	cmp	r3, r2
 8000a94:	dbe9      	blt.n	8000a6a <_ZN7BMS_MOD5queryEmPc+0x6e>
    }
  return error;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	685b      	ldr	r3, [r3, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	731a      	strb	r2, [r3, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2202      	movs	r2, #2
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2264      	movs	r2, #100	@ 0x64
 8000adc:	619a      	str	r2, [r3, #24]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4a18      	ldr	r2, [pc, #96]	@ (8000b44 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000ae2:	61da      	str	r2, [r3, #28]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	621a      	str	r2, [r3, #32]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	69da      	ldr	r2, [r3, #28]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6a1a      	ldr	r2, [r3, #32]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	441a      	add	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	441a      	add	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	441a      	add	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	000f4240 	.word	0x000f4240

08000b48 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b5c:	d131      	bne.n	8000bc2 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	69da      	ldr	r2, [r3, #28]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	441a      	add	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000b8a:	dd18      	ble.n	8000bbe <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	330c      	adds	r3, #12
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f000 fffb 	bl	8001b98 <module_send_message_CAN1>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d005      	beq.n	8000bbe <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000bba:	f001 f831 	bl	8001c20 <print>
            }

        }
        return true;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	0800baf8 	.word	0x0800baf8

08000bd0 <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d906      	bls.n	8000bf4 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	441a      	add	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d902      	bls.n	8000c04 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2201      	movs	r2, #1
 8000c02:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00b      	beq.n	8000c24 <_ZN7CPU_MOD5queryEmPc+0x54>
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d906      	bls.n	8000c24 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6a1a      	ldr	r2, [r3, #32]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	441a      	add	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	689b      	ldr	r3, [r3, #8]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	611a      	str	r2, [r3, #16]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	721a      	strb	r2, [r3, #8]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	725a      	strb	r2, [r3, #9]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	22fa      	movs	r2, #250	@ 0xfa
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2232      	movs	r2, #50	@ 0x32
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2232      	movs	r2, #50	@ 0x32
 8000cb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	621a      	str	r2, [r3, #32]
}
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	@ 0x34

    VoltagemV = readAnalogValue();
 8000d06:	f000 ffd1 	bl	8001cac <readAnalogValue>
 8000d0a:	eef0 7a40 	vmov.f32	s15, s0
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltagemV < 400){
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d1a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000d5c <_ZN11Current_MOD5queryEiPc+0x68>
 8000d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	d509      	bpl.n	8000d3c <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	621a      	str	r2, [r3, #32]
    	flag_current = 1;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2201      	movs	r2, #1
 8000d32:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2201      	movs	r2, #1
 8000d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d3a:	e008      	b.n	8000d4e <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
    	flag_current = 0;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	635a      	str	r2, [r3, #52]	@ 0x34
        time_lim_plotted += TIME_LIM_PLOT;

    }
*/
    //info(buffer);
    return error;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	43c80000 	.word	0x43c80000

08000d60 <_ZN16Temperatures_MODC1Emii>:

// ********************************************************************************************************
// **Function name:           Temperatures_MOD
// **Descriptions:            Initialization function of teh class
// **********************************************************************************************************
Temperatures_MOD::Temperatures_MOD(uint32_t ID, int _T_MAX, int _LAG)
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d96:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000da0:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000daa:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2161 	strb.w	r2, [r3, #353]	@ 0x161
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
{
  MODULEID = ID;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	609a      	str	r2, [r3, #8]
  LIMIT_MAX_T = _T_MAX;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]

  time_lim_plotted += _LAG;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	441a      	add	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
  time_lim_sended += _LAG;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	441a      	add	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  time_lim_received += _LAG;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	441a      	add	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
}
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_ZN16Temperatures_MOD4infoEPc>:
// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void Temperatures_MOD::info(char *buffer)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  if(getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000e52:	f000 ff21 	bl	8001c98 <getUARTState>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b20      	cmp	r3, #32
 8000e5a:	bf0c      	ite	eq
 8000e5c:	2301      	moveq	r3, #1
 8000e5e:	2300      	movne	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d060      	beq.n	8000f28 <_ZN16Temperatures_MOD4infoEPc+0xe0>
  {
	print((char*)"\n***********************");
 8000e66:	4832      	ldr	r0, [pc, #200]	@ (8000f30 <_ZN16Temperatures_MOD4infoEPc+0xe8>)
 8000e68:	f000 feda 	bl	8001c20 <print>
	print((char*)"     Temperatures");
 8000e6c:	4831      	ldr	r0, [pc, #196]	@ (8000f34 <_ZN16Temperatures_MOD4infoEPc+0xec>)
 8000e6e:	f000 fed7 	bl	8001c20 <print>
    print((char*)"***********************");
 8000e72:	4831      	ldr	r0, [pc, #196]	@ (8000f38 <_ZN16Temperatures_MOD4infoEPc+0xf0>)
 8000e74:	f000 fed4 	bl	8001c20 <print>
    sprintf(buffer, " - ERROR:     %i", error);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	492f      	ldr	r1, [pc, #188]	@ (8000f3c <_ZN16Temperatures_MOD4infoEPc+0xf4>)
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f00a f919 	bl	800b0b8 <siprintf>
    print(buffer);
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f000 feca 	bl	8001c20 <print>
    sprintf(buffer, " - CAN ID:    0x%lx", MODULEID);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	461a      	mov	r2, r3
 8000e92:	492b      	ldr	r1, [pc, #172]	@ (8000f40 <_ZN16Temperatures_MOD4infoEPc+0xf8>)
 8000e94:	6838      	ldr	r0, [r7, #0]
 8000e96:	f00a f90f 	bl	800b0b8 <siprintf>
    print(buffer);
 8000e9a:	6838      	ldr	r0, [r7, #0]
 8000e9c:	f000 fec0 	bl	8001c20 <print>
    sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4926      	ldr	r1, [pc, #152]	@ (8000f44 <_ZN16Temperatures_MOD4infoEPc+0xfc>)
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f00a f904 	bl	800b0b8 <siprintf>
    print(buffer);
 8000eb0:	6838      	ldr	r0, [r7, #0]
 8000eb2:	f000 feb5 	bl	8001c20 <print>
    sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4922      	ldr	r1, [pc, #136]	@ (8000f48 <_ZN16Temperatures_MOD4infoEPc+0x100>)
 8000ec0:	6838      	ldr	r0, [r7, #0]
 8000ec2:	f00a f8f9 	bl	800b0b8 <siprintf>
    print(buffer);
 8000ec6:	6838      	ldr	r0, [r7, #0]
 8000ec8:	f000 feaa 	bl	8001c20 <print>
    sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	491e      	ldr	r1, [pc, #120]	@ (8000f4c <_ZN16Temperatures_MOD4infoEPc+0x104>)
 8000ed4:	6838      	ldr	r0, [r7, #0]
 8000ed6:	f00a f8ef 	bl	800b0b8 <siprintf>
    print((char*)"-----------------------");
 8000eda:	481d      	ldr	r0, [pc, #116]	@ (8000f50 <_ZN16Temperatures_MOD4infoEPc+0x108>)
 8000edc:	f000 fea0 	bl	8001c20 <print>
    sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	491b      	ldr	r1, [pc, #108]	@ (8000f54 <_ZN16Temperatures_MOD4infoEPc+0x10c>)
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f00a f8e5 	bl	800b0b8 <siprintf>
    printnl(buffer);
 8000eee:	6838      	ldr	r0, [r7, #0]
 8000ef0:	f000 feb4 	bl	8001c5c <printnl>
    for (int i = 1 ; i < 38; i++)
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e010      	b.n	8000f1c <_ZN16Temperatures_MOD4infoEPc+0xd4>
    {
    	sprintf(buffer, ", %i", cellTemperature[i]);
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3304      	adds	r3, #4
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4913      	ldr	r1, [pc, #76]	@ (8000f58 <_ZN16Temperatures_MOD4infoEPc+0x110>)
 8000f0a:	6838      	ldr	r0, [r7, #0]
 8000f0c:	f00a f8d4 	bl	800b0b8 <siprintf>
     	printnl(buffer);
 8000f10:	6838      	ldr	r0, [r7, #0]
 8000f12:	f000 fea3 	bl	8001c5c <printnl>
    for (int i = 1 ; i < 38; i++)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b25      	cmp	r3, #37	@ 0x25
 8000f20:	ddeb      	ble.n	8000efa <_ZN16Temperatures_MOD4infoEPc+0xb2>
    }
    print((char*)"]");
 8000f22:	480e      	ldr	r0, [pc, #56]	@ (8000f5c <_ZN16Temperatures_MOD4infoEPc+0x114>)
 8000f24:	f000 fe7c 	bl	8001c20 <print>


  }
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800bb08 	.word	0x0800bb08
 8000f34:	0800bb24 	.word	0x0800bb24
 8000f38:	0800bb38 	.word	0x0800bb38
 8000f3c:	0800bb50 	.word	0x0800bb50
 8000f40:	0800bb64 	.word	0x0800bb64
 8000f44:	0800bb78 	.word	0x0800bb78
 8000f48:	0800bb90 	.word	0x0800bb90
 8000f4c:	0800bba8 	.word	0x0800bba8
 8000f50:	0800bbc0 	.word	0x0800bbc0
 8000f54:	0800bbd8 	.word	0x0800bbd8
 8000f58:	0800bbf0 	.word	0x0800bbf0
 8000f5c:	0800bbf8 	.word	0x0800bbf8

08000f60 <_ZN16Temperatures_MOD5parseEmPhm>:
// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// **********************************************************************************************************
bool Temperatures_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
  if (id > MODULEID && id < MODULEID + 7)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f240 80cd 	bls.w	8001114 <_ZN16Temperatures_MOD5parseEmPhm+0x1b4>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	3307      	adds	r3, #7
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	f080 80c6 	bcs.w	8001114 <_ZN16Temperatures_MOD5parseEmPhm+0x1b4>
  {
	//module_send_message_CAN1(0x530, buf, 8);
    int m = id % MODULEID;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f92:	fb01 f202 	mul.w	r2, r1, r2
 8000f96:	1a9b      	subs	r3, r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
    int pos = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
    if (m > 0 && m < 7)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f340 80b7 	ble.w	8001114 <_ZN16Temperatures_MOD5parseEmPhm+0x1b4>
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	2b06      	cmp	r3, #6
 8000faa:	f300 80b3 	bgt.w	8001114 <_ZN16Temperatures_MOD5parseEmPhm+0x1b4>
    {
      time_lim_received = t + TIME_LIM_RECV;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	441a      	add	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

      if (m < 6)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	dc24      	bgt.n	800100e <_ZN16Temperatures_MOD5parseEmPhm+0xae>
      {

        if (flag_charger == 1){
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d104      	bne.n	8000fd8 <_ZN16Temperatures_MOD5parseEmPhm+0x78>
        	module_send_message_CAN1(id, buf, 8); //Reenviar temperaturas por CAN1 tanto en cargador como en coche
 8000fce:	2208      	movs	r2, #8
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	68b8      	ldr	r0, [r7, #8]
 8000fd4:	f000 fde0 	bl	8001b98 <module_send_message_CAN1>
    	}
        for (int i = 0; i < 8; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fdc:	e013      	b.n	8001006 <_ZN16Temperatures_MOD5parseEmPhm+0xa6>
        {
          pos = (m - 1) * 8 + i;
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fe6:	4413      	add	r3, r2
 8000fe8:	617b      	str	r3, [r7, #20]
          cellTemperature[pos] = buf[i];
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	6059      	str	r1, [r3, #4]
        for (int i = 0; i < 8; i++)
 8001000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001002:	3301      	adds	r3, #1
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	2b07      	cmp	r3, #7
 800100a:	dde8      	ble.n	8000fde <_ZN16Temperatures_MOD5parseEmPhm+0x7e>
 800100c:	e01b      	b.n	8001046 <_ZN16Temperatures_MOD5parseEmPhm+0xe6>
         // if (cellTemperature[pos] > LIMIT_MAX_T) error = Temperatures_ERROR_MAXIMUM_T;

        }
      }
      else if (m == 6)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2b06      	cmp	r3, #6
 8001012:	d118      	bne.n	8001046 <_ZN16Temperatures_MOD5parseEmPhm+0xe6>
      {
        if (flag_charger == 1){
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800101a:	2b01      	cmp	r3, #1
 800101c:	d104      	bne.n	8001028 <_ZN16Temperatures_MOD5parseEmPhm+0xc8>
        	module_send_message_CAN1(id, buf, 8); //Reenviar temperaturas por CAN1 tanto en cargador como en coche
 800101e:	2208      	movs	r2, #8
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	68b8      	ldr	r0, [r7, #8]
 8001024:	f000 fdb8 	bl	8001b98 <module_send_message_CAN1>
        }

        for (int i = 0; i < 3; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	e008      	b.n	8001040 <_ZN16Temperatures_MOD5parseEmPhm+0xe0>
        {
          pos = (m - 1) * 8 + i;
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	3b01      	subs	r3, #1
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	6a3a      	ldr	r2, [r7, #32]
 8001036:	4413      	add	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < 3; i++)
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	3301      	adds	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]
 8001042:	2b02      	cmp	r3, #2
 8001044:	ddf3      	ble.n	800102e <_ZN16Temperatures_MOD5parseEmPhm+0xce>
         // if (cellTemperature[pos] > LIMIT_MAX_T) error = Temperatures_ERROR_MAXIMUM_T;

        }
      }

      MAX_T = cellTemperature[0];
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
      MIN_T = cellTemperature[0];
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
      for (int i = 0; i < 38; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e054      	b.n	800110a <_ZN16Temperatures_MOD5parseEmPhm+0x1aa>
      {
        if (cellTemperature[i] > MAX_T)
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001072:	429a      	cmp	r2, r3
 8001074:	dd09      	ble.n	800108a <_ZN16Temperatures_MOD5parseEmPhm+0x12a>
          MAX_T = cellTemperature[i];
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	3304      	adds	r3, #4
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8001088:	e01b      	b.n	80010c2 <_ZN16Temperatures_MOD5parseEmPhm+0x162>
        else if (cellTemperature[i] < MIN_T && cellTemperature[i]!=0){
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	3304      	adds	r3, #4
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800109c:	429a      	cmp	r2, r3
 800109e:	da10      	bge.n	80010c2 <_ZN16Temperatures_MOD5parseEmPhm+0x162>
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <_ZN16Temperatures_MOD5parseEmPhm+0x162>
          MIN_T = cellTemperature[i];
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        }

        if (id!= 0x530){
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f5b3 6fa6 	cmp.w	r3, #1328	@ 0x530
 80010c8:	d00c      	beq.n	80010e4 <_ZN16Temperatures_MOD5parseEmPhm+0x184>
        	temp_bckp[i] = cellTemperature[i];
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	3304      	adds	r3, #4
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	332a      	adds	r3, #42	@ 0x2a
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	e00f      	b.n	8001104 <_ZN16Temperatures_MOD5parseEmPhm+0x1a4>
        }

         else if(id == 0x530){
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f5b3 6fa6 	cmp.w	r3, #1328	@ 0x530
 80010ea:	d10b      	bne.n	8001104 <_ZN16Temperatures_MOD5parseEmPhm+0x1a4>
        	cellTemperature[i] = temp_bckp[i];
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	332a      	adds	r3, #42	@ 0x2a
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	605a      	str	r2, [r3, #4]
      for (int i = 0; i < 38; i++)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	3301      	adds	r3, #1
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	2b25      	cmp	r3, #37	@ 0x25
 800110e:	dda7      	ble.n	8001060 <_ZN16Temperatures_MOD5parseEmPhm+0x100>
        }
      }

      return true;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <_ZN16Temperatures_MOD5parseEmPhm+0x1b6>
    }
  }

  return false;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3728      	adds	r7, #40	@ 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_ZN16Temperatures_MOD5queryEmPc>:
*/
// ********************************************************************************************************
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// **********************************************************************************************************
int Temperatures_MOD::query(uint32_t time, char *buffer)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  // Function for performing a correct behaivour
  if (time > time_lim_sended)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	429a      	cmp	r2, r3
 8001134:	d931      	bls.n	800119a <_ZN16Temperatures_MOD5queryEmPc+0x7c>
  { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
    time_lim_sended += TIME_LIM_SEND;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001142:	441a      	add	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154

    if (module_send_message_CAN2(MODULEID, message_temperatures, 2) != HAL_OK)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6898      	ldr	r0, [r3, #8]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001154:	2202      	movs	r2, #2
 8001156:	4619      	mov	r1, r3
 8001158:	f000 fd40 	bl	8001bdc <module_send_message_CAN2>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <_ZN16Temperatures_MOD5queryEmPc+0x54>
    {
      error = Temperatures_ERROR_COMMUNICATION; // If the message is not sended then, error
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
    {
      /*       Serial.print("Ennvado solicitud a: ");
            Serial.println(MODULEID,HEX); */
    }

    for(int i = 0; i<38; i++){
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e00d      	b.n	8001194 <_ZN16Temperatures_MOD5queryEmPc+0x76>
    	if(cellTemperature[i] > 65){
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3304      	adds	r3, #4
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b41      	cmp	r3, #65	@ 0x41
 8001186:	dd02      	ble.n	800118e <_ZN16Temperatures_MOD5queryEmPc+0x70>
    		error = 2;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2202      	movs	r2, #2
 800118c:	601a      	str	r2, [r3, #0]
    for(int i = 0; i<38; i++){
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b25      	cmp	r3, #37	@ 0x25
 8001198:	ddee      	ble.n	8001178 <_ZN16Temperatures_MOD5queryEmPc+0x5a>
  }
  if (time > time_lim_received)
  {
    //error = Temperatures_ERROR_COMMUNICATION;
  }
  if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <_ZN16Temperatures_MOD5queryEmPc+0xae>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d90d      	bls.n	80011cc <_ZN16Temperatures_MOD5queryEmPc+0xae>
  {
    time_lim_plotted += TIME_LIM_PLOT;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80011bc:	441a      	add	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    info(buffer);
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fe3e 	bl	8000e48 <_ZN16Temperatures_MOD4infoEPc>
      message_temperatures[0] = 0;
      message_temperatures[1] = MAX_T & 0xFF;
      module_send_message_CAN1(CANIDTEL, 0, 2, message_temperatures);
    } */

  return error;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b085      	sub	sp, #20
 80011dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f001 fc69 	bl	8002ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f89d 	bl	8001320 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011e6:	f000 f917 	bl	8001418 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ea:	f000 fbc1 	bl	8001970 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 80011ee:	f000 fad5 	bl	800179c <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 80011f2:	f000 fa49 	bl	8001688 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 80011f6:	f000 fb5b 	bl	80018b0 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80011fa:	f000 f941 	bl	8001480 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 80011fe:	f000 f9c9 	bl	8001594 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8001202:	483d      	ldr	r0, [pc, #244]	@ (80012f8 <main+0x120>)
 8001204:	f004 f80c 	bl	8005220 <HAL_FDCAN_Start>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 8001218:	4838      	ldr	r0, [pc, #224]	@ (80012fc <main+0x124>)
 800121a:	f000 fd01 	bl	8001c20 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	4835      	ldr	r0, [pc, #212]	@ (80012f8 <main+0x120>)
 8001224:	f004 f9ee 	bl	8005604 <HAL_FDCAN_ActivateNotification>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 8001238:	4831      	ldr	r0, [pc, #196]	@ (8001300 <main+0x128>)
 800123a:	f000 fcf1 	bl	8001c20 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 800123e:	4831      	ldr	r0, [pc, #196]	@ (8001304 <main+0x12c>)
 8001240:	f003 ffee 	bl	8005220 <HAL_FDCAN_Start>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf0c      	ite	eq
 800124a:	2301      	moveq	r3, #1
 800124c:	2300      	movne	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 8001254:	482c      	ldr	r0, [pc, #176]	@ (8001308 <main+0x130>)
 8001256:	f000 fce3 	bl	8001c20 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 800125a:	482c      	ldr	r0, [pc, #176]	@ (800130c <main+0x134>)
 800125c:	f002 f9b0 	bl	80035c0 <HAL_ADC_Start>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf0c      	ite	eq
 8001266:	2301      	moveq	r3, #1
 8001268:	2300      	movne	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <main+0x9e>
	  print((char*)"ADC iniciado");
 8001270:	4827      	ldr	r0, [pc, #156]	@ (8001310 <main+0x138>)
 8001272:	f000 fcd5 	bl	8001c20 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 8001276:	f000 fd43 	bl	8001d00 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 800127a:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <main+0x13c>)
 800127c:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <main+0x140>)
 800127e:	2140      	movs	r1, #64	@ 0x40
 8001280:	4820      	ldr	r0, [pc, #128]	@ (8001304 <main+0x12c>)
 8001282:	f004 f853 	bl	800532c <HAL_FDCAN_GetRxMessage>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0ef      	beq.n	8001276 <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <main+0x140>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a20      	ldr	r2, [pc, #128]	@ (800131c <main+0x144>)
 800129c:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 800129e:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <main+0x140>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <main+0x144>)
 80012a6:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	e00c      	b.n	80012c8 <main+0xf0>
 80012ae:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <main+0x13c>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	7819      	ldrb	r1, [r3, #0]
 80012b6:	4a19      	ldr	r2, [pc, #100]	@ (800131c <main+0x144>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	3305      	adds	r3, #5
 80012be:	460a      	mov	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3301      	adds	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	ddef      	ble.n	80012ae <main+0xd6>
		  msg_bms.bus = 2;
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <main+0x144>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 80012d4:	f001 fc74 	bl	8002bc0 <HAL_GetTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a10      	ldr	r2, [pc, #64]	@ (800131c <main+0x144>)
 80012dc:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <main+0x144>)
 80012e0:	466c      	mov	r4, sp
 80012e2:	f103 0210 	add.w	r2, r3, #16
 80012e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80012ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f0:	f000 ff30 	bl	8002154 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80012f4:	e7bf      	b.n	8001276 <main+0x9e>
 80012f6:	bf00      	nop
 80012f8:	24000168 	.word	0x24000168
 80012fc:	0800bbfc 	.word	0x0800bbfc
 8001300:	0800bc10 	.word	0x0800bc10
 8001304:	24000208 	.word	0x24000208
 8001308:	0800bc28 	.word	0x0800bc28
 800130c:	240000f8 	.word	0x240000f8
 8001310:	0800bc3c 	.word	0x0800bc3c
 8001314:	240003d4 	.word	0x240003d4
 8001318:	240003ac 	.word	0x240003ac
 800131c:	24000440 	.word	0x24000440

08001320 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b09c      	sub	sp, #112	@ 0x70
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	224c      	movs	r2, #76	@ 0x4c
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f009 fee2 	bl	800b0f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2220      	movs	r2, #32
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f009 fedc 	bl	800b0f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001340:	2002      	movs	r0, #2
 8001342:	f005 f8af 	bl	80064a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b32      	ldr	r3, [pc, #200]	@ (8001414 <_Z18SystemClock_Configv+0xf4>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a31      	ldr	r2, [pc, #196]	@ (8001414 <_Z18SystemClock_Configv+0xf4>)
 8001350:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001354:	6193      	str	r3, [r2, #24]
 8001356:	4b2f      	ldr	r3, [pc, #188]	@ (8001414 <_Z18SystemClock_Configv+0xf4>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001362:	bf00      	nop
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <_Z18SystemClock_Configv+0xf4>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800136c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001370:	bf14      	ite	ne
 8001372:	2301      	movne	r3, #1
 8001374:	2300      	moveq	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f3      	bne.n	8001364 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137c:	2301      	movs	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001380:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	2302      	movs	r3, #2
 800138c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800138e:	2302      	movs	r3, #2
 8001390:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001392:	232c      	movs	r3, #44	@ 0x2c
 8001394:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001396:	2301      	movs	r3, #1
 8001398:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800139a:	2304      	movs	r3, #4
 800139c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800139e:	2302      	movs	r3, #2
 80013a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013a2:	230c      	movs	r3, #12
 80013a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f8b0 	bl	8006518 <HAL_RCC_OscConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 80013c8:	f000 fc92 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	233f      	movs	r3, #63	@ 0x3f
 80013ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2303      	movs	r3, #3
 80013d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013d8:	2308      	movs	r3, #8
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013dc:	2340      	movs	r3, #64	@ 0x40
 80013de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013e0:	2340      	movs	r3, #64	@ 0x40
 80013e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013ea:	2340      	movs	r3, #64	@ 0x40
 80013ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2103      	movs	r1, #3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fc6a 	bl	8006ccc <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf14      	ite	ne
 80013fe:	2301      	movne	r3, #1
 8001400:	2300      	moveq	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8001408:	f000 fc72 	bl	8001cf0 <Error_Handler>
  }
}
 800140c:	bf00      	nop
 800140e:	3770      	adds	r7, #112	@ 0x70
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	58024800 	.word	0x58024800

08001418 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0ae      	sub	sp, #184	@ 0xb8
 800141c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	22b8      	movs	r2, #184	@ 0xb8
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f009 fe67 	bl	800b0f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800142a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001436:	2302      	movs	r3, #2
 8001438:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800143a:	2310      	movs	r3, #16
 800143c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001442:	2302      	movs	r3, #2
 8001444:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800144a:	23c0      	movs	r3, #192	@ 0xc0
 800144c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4618      	mov	r0, r3
 8001460:	f005 ffc0 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001474:	f000 fc3c 	bl	8001cf0 <Error_Handler>
  }
}
 8001478:	bf00      	nop
 800147a:	37b8      	adds	r7, #184	@ 0xb8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	463b      	mov	r3, r7
 8001494:	2224      	movs	r2, #36	@ 0x24
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f009 fe2d 	bl	800b0f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800149e:	4b3a      	ldr	r3, [pc, #232]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014a0:	4a3a      	ldr	r2, [pc, #232]	@ (800158c <_ZL12MX_ADC1_Initv+0x10c>)
 80014a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014a4:	4b38      	ldr	r3, [pc, #224]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014ac:	2208      	movs	r2, #8
 80014ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014b0:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014b8:	2204      	movs	r2, #4
 80014ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014bc:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014be:	2200      	movs	r2, #0
 80014c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014de:	2200      	movs	r2, #0
 80014e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014e2:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e8:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014ee:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 80014fe:	2201      	movs	r2, #1
 8001500:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001502:	4821      	ldr	r0, [pc, #132]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 8001504:	f001 fe54 	bl	80031b0 <HAL_ADC_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001518:	f000 fbea 	bl	8001cf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	4818      	ldr	r0, [pc, #96]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 8001528:	f003 fa34 	bl	8004994 <HAL_ADCEx_MultiModeConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 800153c:	f000 fbd8 	bl	8001cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <_ZL12MX_ADC1_Initv+0x110>)
 8001542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001544:	2306      	movs	r3, #6
 8001546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001550:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001552:	2304      	movs	r3, #4
 8001554:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001560:	463b      	mov	r3, r7
 8001562:	4619      	mov	r1, r3
 8001564:	4808      	ldr	r0, [pc, #32]	@ (8001588 <_ZL12MX_ADC1_Initv+0x108>)
 8001566:	f002 fa2b 	bl	80039c0 <HAL_ADC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 800157a:	f000 fbb9 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3730      	adds	r7, #48	@ 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	24000088 	.word	0x24000088
 800158c:	40022000 	.word	0x40022000
 8001590:	08600004 	.word	0x08600004

08001594 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2224      	movs	r2, #36	@ 0x24
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f009 fda9 	bl	800b0f8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015a6:	4b35      	ldr	r3, [pc, #212]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015a8:	4a35      	ldr	r2, [pc, #212]	@ (8001680 <_ZL12MX_ADC3_Initv+0xec>)
 80015aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015ac:	4b33      	ldr	r3, [pc, #204]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80015b2:	4b32      	ldr	r3, [pc, #200]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015b4:	220c      	movs	r2, #12
 80015b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015be:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015c6:	2204      	movs	r2, #4
 80015c8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015ca:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80015d6:	4b29      	ldr	r3, [pc, #164]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015d8:	2201      	movs	r2, #1
 80015da:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015dc:	4b27      	ldr	r3, [pc, #156]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b25      	ldr	r3, [pc, #148]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80015f8:	4b20      	ldr	r3, [pc, #128]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 8001606:	2200      	movs	r2, #0
 8001608:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 800160c:	2200      	movs	r2, #0
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 800161a:	2200      	movs	r2, #0
 800161c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800161e:	4817      	ldr	r0, [pc, #92]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 8001620:	f001 fdc6 	bl	80031b0 <HAL_ADC_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8001634:	f000 fb5c 	bl	8001cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <_ZL12MX_ADC3_Initv+0xf0>)
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800163c:	2306      	movs	r3, #6
 800163e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001644:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001648:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800164a:	2304      	movs	r3, #4
 800164c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4808      	ldr	r0, [pc, #32]	@ (800167c <_ZL12MX_ADC3_Initv+0xe8>)
 800165c:	f002 f9b0 	bl	80039c0 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	bf14      	ite	ne
 8001666:	2301      	movne	r3, #1
 8001668:	2300      	moveq	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 8001670:	f000 fb3e 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	240000f8 	.word	0x240000f8
 8001680:	58026000 	.word	0x58026000
 8001684:	1d500080 	.word	0x1d500080

08001688 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800168e:	4b41      	ldr	r3, [pc, #260]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001690:	4a41      	ldr	r2, [pc, #260]	@ (8001798 <_ZL14MX_FDCAN1_Initv+0x110>)
 8001692:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001694:	4b3f      	ldr	r3, [pc, #252]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800169a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800169c:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80016a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80016a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80016ae:	4b39      	ldr	r3, [pc, #228]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 80016b4:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016b6:	2206      	movs	r2, #6
 80016b8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80016ba:	4b36      	ldr	r3, [pc, #216]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016bc:	2201      	movs	r2, #1
 80016be:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 80016c0:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016c2:	220a      	movs	r2, #10
 80016c4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80016c6:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016c8:	2205      	movs	r2, #5
 80016ca:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80016cc:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80016d2:	4b30      	ldr	r3, [pc, #192]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80016d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016da:	2201      	movs	r2, #1
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80016de:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016f2:	2205      	movs	r2, #5
 80016f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80016f6:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016f8:	2220      	movs	r2, #32
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016fe:	2204      	movs	r2, #4
 8001700:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001702:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001704:	2220      	movs	r2, #32
 8001706:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001708:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800170a:	2204      	movs	r2, #4
 800170c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001710:	2201      	movs	r2, #1
 8001712:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001716:	2204      	movs	r2, #4
 8001718:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800171c:	2201      	movs	r2, #1
 800171e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001722:	2220      	movs	r2, #32
 8001724:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001728:	2220      	movs	r2, #32
 800172a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800172e:	2200      	movs	r2, #0
 8001730:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001734:	2204      	movs	r2, #4
 8001736:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001738:	4816      	ldr	r0, [pc, #88]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800173a:	f003 fb1d 	bl	8004d78 <HAL_FDCAN_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 800174e:	f000 facf 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001752:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001756:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800175c:	2302      	movs	r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001760:	2301      	movs	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4619      	mov	r1, r3
 8001770:	4808      	ldr	r0, [pc, #32]	@ (8001794 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001772:	f003 fcdf 	bl	8005134 <HAL_FDCAN_ConfigFilter>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 8001786:	f000 fab3 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	24000168 	.word	0x24000168
 8001798:	4000a000 	.word	0x4000a000

0800179c <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80017a2:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017a4:	4a41      	ldr	r2, [pc, #260]	@ (80018ac <_ZL14MX_FDCAN2_Initv+0x110>)
 80017a6:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80017a8:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ae:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80017b0:	4b3d      	ldr	r3, [pc, #244]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80017bc:	4b3a      	ldr	r3, [pc, #232]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80017c2:	4b39      	ldr	r3, [pc, #228]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 80017c8:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017ca:	2206      	movs	r2, #6
 80017cc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80017ce:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 80017d4:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017d6:	220a      	movs	r2, #10
 80017d8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 80017da:	4b33      	ldr	r3, [pc, #204]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017dc:	2205      	movs	r2, #5
 80017de:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80017e0:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80017e6:	4b30      	ldr	r3, [pc, #192]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80017ec:	4b2e      	ldr	r3, [pc, #184]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80017f2:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80017f8:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80017fe:	4b2a      	ldr	r3, [pc, #168]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001800:	2200      	movs	r2, #0
 8001802:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001804:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001806:	2205      	movs	r2, #5
 8001808:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 800180a:	4b27      	ldr	r3, [pc, #156]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800180c:	2220      	movs	r2, #32
 800180e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001810:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001812:	2204      	movs	r2, #4
 8001814:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001816:	4b24      	ldr	r3, [pc, #144]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001818:	2220      	movs	r2, #32
 800181a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800181c:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800181e:	2204      	movs	r2, #4
 8001820:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001822:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001824:	2201      	movs	r2, #1
 8001826:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001828:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800182a:	2204      	movs	r2, #4
 800182c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001830:	2201      	movs	r2, #1
 8001832:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001834:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001836:	2220      	movs	r2, #32
 8001838:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800183c:	2220      	movs	r2, #32
 800183e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001842:	2200      	movs	r2, #0
 8001844:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001848:	2204      	movs	r2, #4
 800184a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800184c:	4816      	ldr	r0, [pc, #88]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800184e:	f003 fa93 	bl	8004d78 <HAL_FDCAN_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001862:	f000 fa45 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001866:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800186a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001870:	2302      	movs	r3, #2
 8001872:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001874:	2301      	movs	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 8001878:	2310      	movs	r3, #16
 800187a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 800187c:	2310      	movs	r3, #16
 800187e:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4808      	ldr	r0, [pc, #32]	@ (80018a8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001886:	f003 fc55 	bl	8005134 <HAL_FDCAN_ConfigFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 800189a:	f000 fa29 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	24000208 	.word	0x24000208
 80018ac:	4000a400 	.word	0x4000a400

080018b0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018b6:	4a2d      	ldr	r2, [pc, #180]	@ (800196c <_ZL19MX_USART2_UART_Initv+0xbc>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b23      	ldr	r3, [pc, #140]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f8:	481b      	ldr	r0, [pc, #108]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80018fa:	f008 f959 	bl	8009bb0 <HAL_UART_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800190e:	f000 f9ef 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001912:	2100      	movs	r1, #0
 8001914:	4814      	ldr	r0, [pc, #80]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001916:	f009 fb04 	bl	800af22 <HAL_UARTEx_SetTxFifoThreshold>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf14      	ite	ne
 8001920:	2301      	movne	r3, #1
 8001922:	2300      	moveq	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800192a:	f000 f9e1 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192e:	2100      	movs	r1, #0
 8001930:	480d      	ldr	r0, [pc, #52]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001932:	f009 fb34 	bl	800af9e <HAL_UARTEx_SetRxFifoThreshold>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf14      	ite	ne
 800193c:	2301      	movne	r3, #1
 800193e:	2300      	moveq	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001946:	f000 f9d3 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800194a:	4807      	ldr	r0, [pc, #28]	@ (8001968 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800194c:	f009 fab0 	bl	800aeb0 <HAL_UARTEx_DisableFifoMode>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001960:	f000 f9c6 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	240002a8 	.word	0x240002a8
 800196c:	40004400 	.word	0x40004400

08001970 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	@ 0x30
 8001974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001986:	4b50      	ldr	r3, [pc, #320]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001996:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a4:	4b48      	ldr	r3, [pc, #288]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019aa:	4a47      	ldr	r2, [pc, #284]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019b4:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e0:	4b39      	ldr	r3, [pc, #228]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e6:	4a38      	ldr	r2, [pc, #224]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f0:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a04:	4a30      	ldr	r2, [pc, #192]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a22:	4a29      	ldr	r2, [pc, #164]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a40:	4a21      	ldr	r2, [pc, #132]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <_ZL12MX_GPIO_Initv+0x158>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2180      	movs	r1, #128	@ 0x80
 8001a5c:	481b      	ldr	r0, [pc, #108]	@ (8001acc <_ZL12MX_GPIO_Initv+0x15c>)
 8001a5e:	f004 fd07 	bl	8006470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2138      	movs	r1, #56	@ 0x38
 8001a66:	481a      	ldr	r0, [pc, #104]	@ (8001ad0 <_ZL12MX_GPIO_Initv+0x160>)
 8001a68:	f004 fd02 	bl	8006470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4814      	ldr	r0, [pc, #80]	@ (8001ad4 <_ZL12MX_GPIO_Initv+0x164>)
 8001a82:	f004 fb35 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480b      	ldr	r0, [pc, #44]	@ (8001acc <_ZL12MX_GPIO_Initv+0x15c>)
 8001a9e:	f004 fb27 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001aa2:	2338      	movs	r3, #56	@ 0x38
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <_ZL12MX_GPIO_Initv+0x160>)
 8001aba:	f004 fb19 	bl	80060f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001abe:	bf00      	nop
 8001ac0:	3730      	adds	r7, #48	@ 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58021800 	.word	0x58021800
 8001ad0:	58020c00 	.word	0x58020c00
 8001ad4:	58021000 	.word	0x58021000

08001ad8 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d04b      	beq.n	8001b84 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001aec:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001aee:	4a28      	ldr	r2, [pc, #160]	@ (8001b90 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001af0:	2140      	movs	r1, #64	@ 0x40
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f003 fc1a 	bl	800532c <HAL_FDCAN_GetRxMessage>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d02e      	beq.n	8001b66 <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a21      	ldr	r2, [pc, #132]	@ (8001b94 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b0e:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b18:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e00c      	b.n	8001b3a <HAL_FDCAN_RxFifo0Callback+0x62>
 8001b20:	4a1a      	ldr	r2, [pc, #104]	@ (8001b8c <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	7819      	ldrb	r1, [r3, #0]
 8001b28:	4a1a      	ldr	r2, [pc, #104]	@ (8001b94 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3305      	adds	r3, #5
 8001b30:	460a      	mov	r2, r1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3301      	adds	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b07      	cmp	r3, #7
 8001b3e:	ddef      	ble.n	8001b20 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001b46:	f001 f83b 	bl	8002bc0 <HAL_GetTick>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a11      	ldr	r2, [pc, #68]	@ (8001b94 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b4e:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b52:	466c      	mov	r4, sp
 8001b54:	f103 0210 	add.w	r2, r3, #16
 8001b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b5c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b62:	f000 faf7 	bl	8002154 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001b66:	2200      	movs	r2, #0
 8001b68:	2101      	movs	r1, #1
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f003 fd4a 	bl	8005604 <HAL_FDCAN_ActivateNotification>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001b80:	f000 f8b6 	bl	8001cf0 <Error_Handler>
    }
  }
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	240003d4 	.word	0x240003d4
 8001b90:	24000384 	.word	0x24000384
 8001b94:	24000458 	.word	0x24000458

08001b98 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <module_send_message_CAN1+0x3c>)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <module_send_message_CAN1+0x3c>)
 8001bae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb2:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <module_send_message_CAN1+0x3c>)
 8001bb8:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	4905      	ldr	r1, [pc, #20]	@ (8001bd4 <module_send_message_CAN1+0x3c>)
 8001bbe:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <module_send_message_CAN1+0x40>)
 8001bc0:	f003 fb59 	bl	8005276 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	75fb      	strb	r3, [r7, #23]

	return status;
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2400033c 	.word	0x2400033c
 8001bd8:	24000168 	.word	0x24000168

08001bdc <module_send_message_CAN2>:
	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);

	return status;
}

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	4613      	mov	r3, r2
 8001be8:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001bea:	4a0b      	ldr	r2, [pc, #44]	@ (8001c18 <module_send_message_CAN2+0x3c>)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_EXTENDED_ID;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <module_send_message_CAN2+0x3c>)
 8001bf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bf6:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <module_send_message_CAN2+0x3c>)
 8001bfc:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4905      	ldr	r1, [pc, #20]	@ (8001c18 <module_send_message_CAN2+0x3c>)
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <module_send_message_CAN2+0x40>)
 8001c04:	f003 fb37 	bl	8005276 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	75fb      	strb	r3, [r7, #23]

	return status;
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000360 	.word	0x24000360
 8001c1c:	24000208 	.word	0x24000208

08001c20 <print>:

void print(char uart_buffer[]){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4909      	ldr	r1, [pc, #36]	@ (8001c50 <print+0x30>)
 8001c2c:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <print+0x34>)
 8001c2e:	f009 fa43 	bl	800b0b8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001c32:	4808      	ldr	r0, [pc, #32]	@ (8001c54 <print+0x34>)
 8001c34:	f7fe fb6c 	bl	8000310 <strlen>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	4904      	ldr	r1, [pc, #16]	@ (8001c54 <print+0x34>)
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <print+0x38>)
 8001c44:	f008 f804 	bl	8009c50 <HAL_UART_Transmit>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	0800bc4c 	.word	0x0800bc4c
 8001c54:	240003dc 	.word	0x240003dc
 8001c58:	240002a8 	.word	0x240002a8

08001c5c <printnl>:

void printnl(char uart_buffer[]){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4909      	ldr	r1, [pc, #36]	@ (8001c8c <printnl+0x30>)
 8001c68:	4809      	ldr	r0, [pc, #36]	@ (8001c90 <printnl+0x34>)
 8001c6a:	f009 fa25 	bl	800b0b8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001c6e:	4808      	ldr	r0, [pc, #32]	@ (8001c90 <printnl+0x34>)
 8001c70:	f7fe fb4e 	bl	8000310 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	4904      	ldr	r1, [pc, #16]	@ (8001c90 <printnl+0x34>)
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <printnl+0x38>)
 8001c80:	f007 ffe6 	bl	8009c50 <HAL_UART_Transmit>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	0800bc54 	.word	0x0800bc54
 8001c90:	240003dc 	.word	0x240003dc
 8001c94:	240002a8 	.word	0x240002a8

08001c98 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <getUARTState+0x10>)
 8001c9e:	f008 f865 	bl	8009d6c <HAL_UART_GetState>
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	240002a8 	.word	0x240002a8

08001cac <readAnalogValue>:

float readAnalogValue(void){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001cb2:	480e      	ldr	r0, [pc, #56]	@ (8001cec <readAnalogValue+0x40>)
 8001cb4:	f001 fc84 	bl	80035c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	480b      	ldr	r0, [pc, #44]	@ (8001cec <readAnalogValue+0x40>)
 8001cbe:	f001 fd7d 	bl	80037bc <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001cc2:	480a      	ldr	r0, [pc, #40]	@ (8001cec <readAnalogValue+0x40>)
 8001cc4:	f001 fe6e 	bl	80039a4 <HAL_ADC_GetValue>
 8001cc8:	ee07 0a90 	vmov	s15, r0
 8001ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd0:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001cd4:	4805      	ldr	r0, [pc, #20]	@ (8001cec <readAnalogValue+0x40>)
 8001cd6:	f001 fd3d 	bl	8003754 <HAL_ADC_Stop>
	return analogValue;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	ee07 3a90 	vmov	s15, r3
}
 8001ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	240000f8 	.word	0x240000f8

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <Error_Handler+0x8>
 8001cfc:	0000      	movs	r0, r0
	...

08001d00 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	@ 0x30
 8001d04:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int state_precharge = 0; // 0 means open, 1 closed
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001d12:	2301      	movs	r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
	int flag_current = Current_ERROR_Comunication;
 8001d16:	2302      	movs	r3, #2
 8001d18:	60fb      	str	r3, [r7, #12]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001d1a:	f000 ff51 	bl	8002bc0 <HAL_GetTick>
 8001d1e:	60b8      	str	r0, [r7, #8]
	int time_s = HAL_GetTick();
 8001d20:	f000 ff4e 	bl	8002bc0 <HAL_GetTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	607b      	str	r3, [r7, #4]

	CPU.voltage_acum = 0; // For precharge
 8001d28:	4ba2      	ldr	r3, [pc, #648]	@ (8001fb4 <_Z12select_statev+0x2b4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001d2e:	4ba2      	ldr	r3, [pc, #648]	@ (8001fb8 <_Z12select_statev+0x2b8>)
 8001d30:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001d34:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	e044      	b.n	8001dc6 <_Z12select_statev+0xc6>
		BMS[i].voltage_acum = 0;                  // For precharge
 8001d3c:	4a9f      	ldr	r2, [pc, #636]	@ (8001fbc <_Z12select_statev+0x2bc>)
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	21b4      	movs	r1, #180	@ 0xb4
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	33a4      	adds	r3, #164	@ 0xa4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
		if (BMS[i].query(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	22b4      	movs	r2, #180	@ 0xb4
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	4a99      	ldr	r2, [pc, #612]	@ (8001fbc <_Z12select_statev+0x2bc>)
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a99      	ldr	r2, [pc, #612]	@ (8001fc0 <_Z12select_statev+0x2c0>)
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fe4c 	bl	80009fc <_ZN7BMS_MOD5queryEmPc>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <_Z12select_statev+0x7a>
		{
			state = error;
 8001d74:	4b93      	ldr	r3, [pc, #588]	@ (8001fc4 <_Z12select_statev+0x2c4>)
 8001d76:	2204      	movs	r2, #4
 8001d78:	701a      	strb	r2, [r3, #0]
		}
		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001d7a:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb4 <_Z12select_statev+0x2b4>)
 8001d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7e:	498f      	ldr	r1, [pc, #572]	@ (8001fbc <_Z12select_statev+0x2bc>)
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	20b4      	movs	r0, #180	@ 0xb4
 8001d84:	fb00 f303 	mul.w	r3, r0, r3
 8001d88:	440b      	add	r3, r1
 8001d8a:	33a4      	adds	r3, #164	@ 0xa4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a88      	ldr	r2, [pc, #544]	@ (8001fb4 <_Z12select_statev+0x2b4>)
 8001d92:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001d94:	4a89      	ldr	r2, [pc, #548]	@ (8001fbc <_Z12select_statev+0x2bc>)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	21b4      	movs	r1, #180	@ 0xb4
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	33a8      	adds	r3, #168	@ 0xa8
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b84      	ldr	r3, [pc, #528]	@ (8001fb8 <_Z12select_statev+0x2b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	da09      	bge.n	8001dc0 <_Z12select_statev+0xc0>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001dac:	4a83      	ldr	r2, [pc, #524]	@ (8001fbc <_Z12select_statev+0x2bc>)
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	21b4      	movs	r1, #180	@ 0xb4
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	33a8      	adds	r3, #168	@ 0xa8
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a7e      	ldr	r2, [pc, #504]	@ (8001fb8 <_Z12select_statev+0x2b8>)
 8001dbe:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	4b80      	ldr	r3, [pc, #512]	@ (8001fc8 <_Z12select_statev+0x2c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a3a      	ldr	r2, [r7, #32]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbb5      	blt.n	8001d3c <_Z12select_statev+0x3c>
	}

	if (time_s > time_sending_minV + 500) {
 8001dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fcc <_Z12select_statev+0x2cc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dd23      	ble.n	8001e26 <_Z12select_statev+0x126>
		message_MINV[1] = MIN_V & 0xFF;
 8001dde:	4b76      	ldr	r3, [pc, #472]	@ (8001fb8 <_Z12select_statev+0x2b8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd0 <_Z12select_statev+0x2d0>)
 8001de6:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001de8:	4b73      	ldr	r3, [pc, #460]	@ (8001fb8 <_Z12select_statev+0x2b8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	121b      	asrs	r3, r3, #8
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b77      	ldr	r3, [pc, #476]	@ (8001fd0 <_Z12select_statev+0x2d0>)
 8001df2:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001df4:	4b71      	ldr	r3, [pc, #452]	@ (8001fbc <_Z12select_statev+0x2bc>)
 8001df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d010      	beq.n	8001e20 <_Z12select_statev+0x120>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4973      	ldr	r1, [pc, #460]	@ (8001fd0 <_Z12select_statev+0x2d0>)
 8001e02:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e06:	f7ff fec7 	bl	8001b98 <module_send_message_CAN1>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <_Z12select_statev+0x120>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001e1a:	486e      	ldr	r0, [pc, #440]	@ (8001fd4 <_Z12select_statev+0x2d4>)
 8001e1c:	f7ff ff00 	bl	8001c20 <print>
		}
		time_sending_minV = time_s;
 8001e20:	4a6a      	ldr	r2, [pc, #424]	@ (8001fcc <_Z12select_statev+0x2cc>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e00c      	b.n	8001e46 <_Z12select_statev+0x146>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001e2c:	4b62      	ldr	r3, [pc, #392]	@ (8001fb8 <_Z12select_statev+0x2b8>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4962      	ldr	r1, [pc, #392]	@ (8001fbc <_Z12select_statev+0x2bc>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	20b4      	movs	r0, #180	@ 0xb4
 8001e36:	fb00 f303 	mul.w	r3, r0, r3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	33ac      	adds	r3, #172	@ 0xac
 8001e3e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3301      	adds	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	4b60      	ldr	r3, [pc, #384]	@ (8001fc8 <_Z12select_statev+0x2c8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbed      	blt.n	8001e2c <_Z12select_statev+0x12c>

	}
	if (time > 1000 && time < 2000)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e56:	d907      	bls.n	8001e68 <_Z12select_statev+0x168>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e5e:	d203      	bcs.n	8001e68 <_Z12select_statev+0x168>
		MIN_V = 4200; //Do not really worry about this, I dunno remember if this was really necesary
 8001e60:	4b55      	ldr	r3, [pc, #340]	@ (8001fb8 <_Z12select_statev+0x2b8>)
 8001e62:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001e66:	601a      	str	r2, [r3, #0]
	int MAX_T = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < Temp_N; i++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e031      	b.n	8001ed6 <_Z12select_statev+0x1d6>
		if (Tempt[i].query(time, buffer) != Temperatures_OK)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	4a56      	ldr	r2, [pc, #344]	@ (8001fd8 <_Z12select_statev+0x2d8>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc0 <_Z12select_statev+0x2c0>)
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f94a 	bl	800111e <_ZN16Temperatures_MOD5queryEmPc>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <_Z12select_statev+0x1a0>
			state = error; //Asking how temperatures are
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc4 <_Z12select_statev+0x2c4>)
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	701a      	strb	r2, [r3, #0]
		if (Tempt[i].MAX_T > MAX_T)
 8001ea0:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd8 <_Z12select_statev+0x2d8>)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	da0a      	bge.n	8001ed0 <_Z12select_statev+0x1d0>
			MAX_T = Tempt[i].MAX_T;
 8001eba:	4a47      	ldr	r2, [pc, #284]	@ (8001fd8 <_Z12select_statev+0x2d8>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < Temp_N; i++) {
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <_Z12select_statev+0x2dc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbc8      	blt.n	8001e72 <_Z12select_statev+0x172>
	}

	if (time_s > time_sending_maxT + 1000) {
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe0 <_Z12select_statev+0x2e0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dd1f      	ble.n	8001f2e <_Z12select_statev+0x22e>
		message_MAXT[1] = MAX_T & 0xFF;
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe4 <_Z12select_statev+0x2e4>)
 8001ef4:	705a      	strb	r2, [r3, #1]
		message_MAXT[0] = 0;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <_Z12select_statev+0x2e4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
		if (Tempt[0].flag_charger != 1) {
 8001efc:	4b36      	ldr	r3, [pc, #216]	@ (8001fd8 <_Z12select_statev+0x2d8>)
 8001efe:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d010      	beq.n	8001f28 <_Z12select_statev+0x228>
			if (module_send_message_CAN1(Temp_ID, message_MAXT, 2) != HAL_OK){
 8001f06:	2202      	movs	r2, #2
 8001f08:	4936      	ldr	r1, [pc, #216]	@ (8001fe4 <_Z12select_statev+0x2e4>)
 8001f0a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f0e:	f7ff fe43 	bl	8001b98 <module_send_message_CAN1>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <_Z12select_statev+0x228>
				print((char*) "Error al enviar temperatura maxima"); //Sending the message through telemetry each 1000 ms
 8001f22:	4831      	ldr	r0, [pc, #196]	@ (8001fe8 <_Z12select_statev+0x2e8>)
 8001f24:	f7ff fe7c 	bl	8001c20 <print>

			}
		}
		time_sending_maxT = time_s;
 8001f28:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe0 <_Z12select_statev+0x2e0>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]

	}

	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8001f2e:	4a24      	ldr	r2, [pc, #144]	@ (8001fc0 <_Z12select_statev+0x2c0>)
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	4820      	ldr	r0, [pc, #128]	@ (8001fb4 <_Z12select_statev+0x2b4>)
 8001f34:	f7fe fe4c 	bl	8000bd0 <_ZN7CPU_MOD5queryEmPc>
 8001f38:	6138      	str	r0, [r7, #16]

	flag_current = current.query(time, buffer); //asking current how is it
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	4a20      	ldr	r2, [pc, #128]	@ (8001fc0 <_Z12select_statev+0x2c0>)
 8001f3e:	4619      	mov	r1, r3
 8001f40:	482a      	ldr	r0, [pc, #168]	@ (8001fec <_Z12select_statev+0x2ec>)
 8001f42:	f7fe fed7 	bl	8000cf4 <_ZN11Current_MOD5queryEiPc>
 8001f46:	60f8      	str	r0, [r7, #12]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8001f48:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <_Z12select_statev+0x2c4>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	f200 80bb 	bhi.w	80020c8 <_Z12select_statev+0x3c8>
 8001f52:	a201      	add	r2, pc, #4	@ (adr r2, 8001f58 <_Z12select_statev+0x258>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f6d 	.word	0x08001f6d
 8001f5c:	08001f91 	.word	0x08001f91
 8001f60:	08001fff 	.word	0x08001fff
 8001f64:	08002053 	.word	0x08002053
 8001f68:	080020a9 	.word	0x080020a9
	case start:
		state_air_n = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_DISCONNECTED);
 8001f78:	2102      	movs	r1, #2
 8001f7a:	480e      	ldr	r0, [pc, #56]	@ (8001fb4 <_Z12select_statev+0x2b4>)
 8001f7c:	f7fe fe5a 	bl	8000c34 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f000 809b 	beq.w	80020be <_Z12select_statev+0x3be>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <_Z12select_statev+0x2c4>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
		break;
 8001f8e:	e096      	b.n	80020be <_Z12select_statev+0x3be>
	case precharge:
		state_air_n = 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <_Z12select_statev+0x2b4>)
 8001fa0:	f7fe fe48 	bl	8000c34 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d122      	bne.n	8001ff0 <_Z12select_statev+0x2f0>
			state = transition;
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <_Z12select_statev+0x2c4>)
 8001fac:	2202      	movs	r2, #2
 8001fae:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8001fb0:	e087      	b.n	80020c2 <_Z12select_statev+0x3c2>
 8001fb2:	bf00      	nop
 8001fb4:	240012e0 	.word	0x240012e0
 8001fb8:	24000004 	.word	0x24000004
 8001fbc:	24000470 	.word	0x24000470
 8001fc0:	24001360 	.word	0x24001360
 8001fc4:	2400135c 	.word	0x2400135c
 8001fc8:	24000000 	.word	0x24000000
 8001fcc:	24000b7c 	.word	0x24000b7c
 8001fd0:	24000b78 	.word	0x24000b78
 8001fd4:	0800bc60 	.word	0x0800bc60
 8001fd8:	24000b88 	.word	0x24000b88
 8001fdc:	24000008 	.word	0x24000008
 8001fe0:	24000b84 	.word	0x24000b84
 8001fe4:	24000b80 	.word	0x24000b80
 8001fe8:	0800bc80 	.word	0x0800bc80
 8001fec:	24001318 	.word	0x24001318
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d165      	bne.n	80020c2 <_Z12select_statev+0x3c2>
			state = error;
 8001ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8002130 <_Z12select_statev+0x430>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	701a      	strb	r2, [r3, #0]
		break;
 8001ffc:	e061      	b.n	80020c2 <_Z12select_statev+0x3c2>
	case transition:
		state_air_n = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 800200a:	2101      	movs	r1, #1
 800200c:	4849      	ldr	r0, [pc, #292]	@ (8002134 <_Z12select_statev+0x434>)
 800200e:	f7fe fe11 	bl	8000c34 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS)){//&&(CPU.voltage_acum != 0)){
 8002012:	4b48      	ldr	r3, [pc, #288]	@ (8002134 <_Z12select_statev+0x434>)
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	4a48      	ldr	r2, [pc, #288]	@ (8002138 <_Z12select_statev+0x438>)
 8002018:	fb82 1203 	smull	r1, r2, r2, r3
 800201c:	1192      	asrs	r2, r2, #6
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800202a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8002128 <_Z12select_statev+0x428>
 800202e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002032:	4b40      	ldr	r3, [pc, #256]	@ (8002134 <_Z12select_statev+0x434>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800203e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	d400      	bmi.n	800204a <_Z12select_statev+0x34a>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		// else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		// else if(flag_current != Current_OK) state = error;
		}
		break;
 8002048:	e03e      	b.n	80020c8 <_Z12select_statev+0x3c8>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 800204a:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <_Z12select_statev+0x430>)
 800204c:	2203      	movs	r2, #3
 800204e:	701a      	strb	r2, [r3, #0]
		break;
 8002050:	e03a      	b.n	80020c8 <_Z12select_statev+0x3c8>
	case run:
		state_air_n = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 800205a:	2301      	movs	r3, #1
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_POWER);
 800205e:	2100      	movs	r1, #0
 8002060:	4834      	ldr	r0, [pc, #208]	@ (8002134 <_Z12select_statev+0x434>)
 8002062:	f7fe fde7 	bl	8000c34 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d109      	bne.n	8002080 <_Z12select_statev+0x380>
 800206c:	4b33      	ldr	r3, [pc, #204]	@ (800213c <_Z12select_statev+0x43c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <_Z12select_statev+0x380>
			state = error; //If I disconnect the charger, error
 8002074:	4b2e      	ldr	r3, [pc, #184]	@ (8002130 <_Z12select_statev+0x430>)
 8002076:	2204      	movs	r2, #4
 8002078:	701a      	strb	r2, [r3, #0]
			print((char*)"CPU");
 800207a:	4831      	ldr	r0, [pc, #196]	@ (8002140 <_Z12select_statev+0x440>)
 800207c:	f7ff fdd0 	bl	8001c20 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8002080:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002084:	482f      	ldr	r0, [pc, #188]	@ (8002144 <_Z12select_statev+0x444>)
 8002086:	f004 f9db 	bl	8006440 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d015      	beq.n	80020c6 <_Z12select_statev+0x3c6>
			state = error;
 800209a:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <_Z12select_statev+0x430>)
 800209c:	2204      	movs	r2, #4
 800209e:	701a      	strb	r2, [r3, #0]
			print((char*)"DIGITAL");
 80020a0:	4829      	ldr	r0, [pc, #164]	@ (8002148 <_Z12select_statev+0x448>)
 80020a2:	f7ff fdbd 	bl	8001c20 <print>
		}
		break;
 80020a6:	e00e      	b.n	80020c6 <_Z12select_statev+0x3c6>
	case error:
		state_air_n = 0; //All relés closed
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_ERROR);
 80020b4:	2103      	movs	r1, #3
 80020b6:	481f      	ldr	r0, [pc, #124]	@ (8002134 <_Z12select_statev+0x434>)
 80020b8:	f7fe fdbc 	bl	8000c34 <_ZN7CPU_MOD11updateStateEi>
		break;
 80020bc:	e004      	b.n	80020c8 <_Z12select_statev+0x3c8>
		break;
 80020be:	bf00      	nop
 80020c0:	e002      	b.n	80020c8 <_Z12select_statev+0x3c8>
		break;
 80020c2:	bf00      	nop
 80020c4:	e000      	b.n	80020c8 <_Z12select_statev+0x3c8>
		break;
 80020c6:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 80020c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <_Z12select_statev+0x3d2>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <_Z12select_statev+0x3d4>
 80020d2:	2300      	movs	r3, #0
 80020d4:	461a      	mov	r2, r3
 80020d6:	2180      	movs	r1, #128	@ 0x80
 80020d8:	481c      	ldr	r0, [pc, #112]	@ (800214c <_Z12select_statev+0x44c>)
 80020da:	f004 f9c9 	bl	8006470 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 80020de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <_Z12select_statev+0x3e8>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <_Z12select_statev+0x3ea>
 80020e8:	2300      	movs	r3, #0
 80020ea:	461a      	mov	r2, r3
 80020ec:	2108      	movs	r1, #8
 80020ee:	4818      	ldr	r0, [pc, #96]	@ (8002150 <_Z12select_statev+0x450>)
 80020f0:	f004 f9be 	bl	8006470 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 80020f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <_Z12select_statev+0x3fe>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <_Z12select_statev+0x400>
 80020fe:	2300      	movs	r3, #0
 8002100:	461a      	mov	r2, r3
 8002102:	2110      	movs	r1, #16
 8002104:	4812      	ldr	r0, [pc, #72]	@ (8002150 <_Z12select_statev+0x450>)
 8002106:	f004 f9b3 	bl	8006470 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <_Z12select_statev+0x414>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <_Z12select_statev+0x416>
 8002114:	2300      	movs	r3, #0
 8002116:	461a      	mov	r2, r3
 8002118:	2120      	movs	r1, #32
 800211a:	480d      	ldr	r0, [pc, #52]	@ (8002150 <_Z12select_statev+0x450>)
 800211c:	f004 f9a8 	bl	8006470 <HAL_GPIO_WritePin>
		printnl((char*)"Relee Prec:");
		printValue(state_precharge);
	}


}
 8002120:	bf00      	nop
 8002122:	3730      	adds	r7, #48	@ 0x30
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	cccccccd 	.word	0xcccccccd
 800212c:	3feccccc 	.word	0x3feccccc
 8002130:	2400135c 	.word	0x2400135c
 8002134:	240012e0 	.word	0x240012e0
 8002138:	10624dd3 	.word	0x10624dd3
 800213c:	24001314 	.word	0x24001314
 8002140:	0800bca4 	.word	0x0800bca4
 8002144:	58021000 	.word	0x58021000
 8002148:	0800bca8 	.word	0x0800bca8
 800214c:	58021800 	.word	0x58021800
 8002150:	58020c00 	.word	0x58020c00

08002154 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8002154:	b084      	sub	sp, #16
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	f107 0c20 	add.w	ip, r7, #32
 8002160:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8002164:	f000 fd2c 	bl	8002bc0 <HAL_GetTick>
 8002168:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]
	bool flag_temperatures = false;
 800216e:	2300      	movs	r3, #0
 8002170:	75bb      	strb	r3, [r7, #22]

	for (int i = 0; i < BMS_N; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	e016      	b.n	80021a6 <_Z11parse_state6CANMsg+0x52>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	22b4      	movs	r2, #180	@ 0xb4
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	4a42      	ldr	r2, [pc, #264]	@ (800228c <_Z11parse_state6CANMsg+0x138>)
 8002182:	1898      	adds	r0, r3, r2
 8002184:	6a39      	ldr	r1, [r7, #32]
 8002186:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f7fe fb20 	bl	80007d0 <_ZN7BMS_MOD5parseEmPhm>
 8002190:	4603      	mov	r3, r0
 8002192:	75fb      	strb	r3, [r7, #23]
		if (flag_bms)
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <_Z11parse_state6CANMsg+0x4c>
			i = BMS_N;
 800219a:	4b3d      	ldr	r3, [pc, #244]	@ (8002290 <_Z11parse_state6CANMsg+0x13c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < BMS_N; i++) {
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	3301      	adds	r3, #1
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <_Z11parse_state6CANMsg+0x13c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dbe3      	blt.n	8002178 <_Z11parse_state6CANMsg+0x24>
	}

	for (int i = 0; i < Temp_N; i++) {
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e017      	b.n	80021e6 <_Z11parse_state6CANMsg+0x92>
		flag_temperatures = Tempt[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for temperatures
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	4a34      	ldr	r2, [pc, #208]	@ (8002294 <_Z11parse_state6CANMsg+0x140>)
 80021c2:	1898      	adds	r0, r3, r2
 80021c4:	6a39      	ldr	r1, [r7, #32]
 80021c6:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f7fe fec8 	bl	8000f60 <_ZN16Temperatures_MOD5parseEmPhm>
 80021d0:	4603      	mov	r3, r0
 80021d2:	75bb      	strb	r3, [r7, #22]

		if (flag_temperatures)
 80021d4:	7dbb      	ldrb	r3, [r7, #22]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <_Z11parse_state6CANMsg+0x8c>
			i = Temp_N;
 80021da:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <_Z11parse_state6CANMsg+0x144>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < Temp_N; i++) {
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <_Z11parse_state6CANMsg+0x144>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	dbe2      	blt.n	80021b6 <_Z11parse_state6CANMsg+0x62>
	}
	if (!flag_bms && !flag_temperatures) {
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	f083 0301 	eor.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d040      	beq.n	800227e <_Z11parse_state6CANMsg+0x12a>
 80021fc:	7dbb      	ldrb	r3, [r7, #22]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d03a      	beq.n	800227e <_Z11parse_state6CANMsg+0x12a>
		if (CPU.parse(data.id, &data.buf[0], time))
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4822      	ldr	r0, [pc, #136]	@ (800229c <_Z11parse_state6CANMsg+0x148>)
 8002212:	f7fe fc99 	bl	8000b48 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <_Z11parse_state6CANMsg+0x14c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12f      	bne.n	800227e <_Z11parse_state6CANMsg+0x12a>
				{
			for (int i = 0; i < BMS_N; i++) {
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	e00b      	b.n	800223c <_Z11parse_state6CANMsg+0xe8>
				BMS[i].flag_charger = 1;
 8002224:	4a19      	ldr	r2, [pc, #100]	@ (800228c <_Z11parse_state6CANMsg+0x138>)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	21b4      	movs	r1, #180	@ 0xb4
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	33b0      	adds	r3, #176	@ 0xb0
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3301      	adds	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <_Z11parse_state6CANMsg+0x13c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	dbee      	blt.n	8002224 <_Z11parse_state6CANMsg+0xd0>
			}
			for (int i = 0; i < Temp_N; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	e00d      	b.n	8002268 <_Z11parse_state6CANMsg+0x114>
				Tempt[i].flag_charger = 1;
 800224c:	4a11      	ldr	r2, [pc, #68]	@ (8002294 <_Z11parse_state6CANMsg+0x140>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < Temp_N; i++) {
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3301      	adds	r3, #1
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <_Z11parse_state6CANMsg+0x144>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	dbec      	blt.n	800224c <_Z11parse_state6CANMsg+0xf8>
			}
			current.flag_charger = 1;
 8002272:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <_Z11parse_state6CANMsg+0x150>)
 8002274:	2201      	movs	r2, #1
 8002276:	63da      	str	r2, [r3, #60]	@ 0x3c
			flag_charger = 1;
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <_Z11parse_state6CANMsg+0x154>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002288:	b004      	add	sp, #16
 800228a:	4770      	bx	lr
 800228c:	24000470 	.word	0x24000470
 8002290:	24000000 	.word	0x24000000
 8002294:	24000b88 	.word	0x24000b88
 8002298:	24000008 	.word	0x24000008
 800229c:	240012e0 	.word	0x240012e0
 80022a0:	18ff50e7 	.word	0x18ff50e7
 80022a4:	24001318 	.word	0x24001318
 80022a8:	24001314 	.word	0x24001314

080022ac <_Z41__static_initialization_and_destruction_0ii>:
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af04      	add	r7, sp, #16
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 8103 	bne.w	80024c4 <_Z41__static_initialization_and_destruction_0ii+0x218>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f040 80fd 	bne.w	80024c4 <_Z41__static_initialization_and_destruction_0ii+0x218>
		};
 80022ca:	4c80      	ldr	r4, [pc, #512]	@ (80024cc <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80022cc:	2300      	movs	r3, #0
 80022ce:	9303      	str	r3, [sp, #12]
 80022d0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	230a      	movs	r3, #10
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	233c      	movs	r3, #60	@ 0x3c
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80022e2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80022e6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7fe f9e0 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 80022f0:	34b4      	adds	r4, #180	@ 0xb4
 80022f2:	2332      	movs	r3, #50	@ 0x32
 80022f4:	9303      	str	r3, [sp, #12]
 80022f6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022fa:	9302      	str	r3, [sp, #8]
 80022fc:	2309      	movs	r3, #9
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	233c      	movs	r3, #60	@ 0x3c
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002308:	f241 0268 	movw	r2, #4200	@ 0x1068
 800230c:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8002310:	4620      	mov	r0, r4
 8002312:	f7fe f9cd 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 8002316:	34b4      	adds	r4, #180	@ 0xb4
 8002318:	2364      	movs	r3, #100	@ 0x64
 800231a:	9303      	str	r3, [sp, #12]
 800231c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002320:	9302      	str	r3, [sp, #8]
 8002322:	230a      	movs	r3, #10
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	233c      	movs	r3, #60	@ 0x3c
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800232e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002332:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002336:	4620      	mov	r0, r4
 8002338:	f7fe f9ba 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 800233c:	34b4      	adds	r4, #180	@ 0xb4
 800233e:	2396      	movs	r3, #150	@ 0x96
 8002340:	9303      	str	r3, [sp, #12]
 8002342:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	2309      	movs	r3, #9
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	233c      	movs	r3, #60	@ 0x3c
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002354:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002358:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800235c:	4620      	mov	r0, r4
 800235e:	f7fe f9a7 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 8002362:	34b4      	adds	r4, #180	@ 0xb4
 8002364:	23c8      	movs	r3, #200	@ 0xc8
 8002366:	9303      	str	r3, [sp, #12]
 8002368:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	230a      	movs	r3, #10
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	233c      	movs	r3, #60	@ 0x3c
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800237a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800237e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8002382:	4620      	mov	r0, r4
 8002384:	f7fe f994 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 8002388:	34b4      	adds	r4, #180	@ 0xb4
 800238a:	23fa      	movs	r3, #250	@ 0xfa
 800238c:	9303      	str	r3, [sp, #12]
 800238e:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	2309      	movs	r3, #9
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	233c      	movs	r3, #60	@ 0x3c
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023a0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023a4:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7fe f981 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 80023ae:	34b4      	adds	r4, #180	@ 0xb4
 80023b0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80023b4:	9303      	str	r3, [sp, #12]
 80023b6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80023ba:	9302      	str	r3, [sp, #8]
 80023bc:	2309      	movs	r3, #9
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	233c      	movs	r3, #60	@ 0x3c
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023c8:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023cc:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7fe f96d 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 80023d6:	34b4      	adds	r4, #180	@ 0xb4
 80023d8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80023dc:	9303      	str	r3, [sp, #12]
 80023de:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	230a      	movs	r3, #10
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	233c      	movs	r3, #60	@ 0x3c
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80023f0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80023f4:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7fe f959 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 80023fe:	34b4      	adds	r4, #180	@ 0xb4
 8002400:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002404:	9303      	str	r3, [sp, #12]
 8002406:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	2309      	movs	r3, #9
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	233c      	movs	r3, #60	@ 0x3c
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002418:	f241 0268 	movw	r2, #4200	@ 0x1068
 800241c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002420:	4620      	mov	r0, r4
 8002422:	f7fe f945 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 8002426:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 800242a:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800242e:	9303      	str	r3, [sp, #12]
 8002430:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	230a      	movs	r3, #10
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	233c      	movs	r3, #60	@ 0x3c
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002442:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002446:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 800244a:	f7fe f931 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
		};
 800244e:	4c20      	ldr	r4, [pc, #128]	@ (80024d0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8002450:	2337      	movs	r3, #55	@ 0x37
 8002452:	223c      	movs	r2, #60	@ 0x3c
 8002454:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 8002458:	4620      	mov	r0, r4
 800245a:	f7fe fc81 	bl	8000d60 <_ZN16Temperatures_MODC1Emii>
 800245e:	f504 74bc 	add.w	r4, r4, #376	@ 0x178
 8002462:	239b      	movs	r3, #155	@ 0x9b
 8002464:	223c      	movs	r2, #60	@ 0x3c
 8002466:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 800246a:	4620      	mov	r0, r4
 800246c:	f7fe fc78 	bl	8000d60 <_ZN16Temperatures_MODC1Emii>
 8002470:	f504 74bc 	add.w	r4, r4, #376	@ 0x178
 8002474:	23ff      	movs	r3, #255	@ 0xff
 8002476:	223c      	movs	r2, #60	@ 0x3c
 8002478:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 800247c:	4620      	mov	r0, r4
 800247e:	f7fe fc6f 	bl	8000d60 <_ZN16Temperatures_MODC1Emii>
 8002482:	f504 74bc 	add.w	r4, r4, #376	@ 0x178
 8002486:	f240 1363 	movw	r3, #355	@ 0x163
 800248a:	223c      	movs	r2, #60	@ 0x3c
 800248c:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8002490:	4620      	mov	r0, r4
 8002492:	f7fe fc65 	bl	8000d60 <_ZN16Temperatures_MODC1Emii>
 8002496:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800249a:	f240 13c7 	movw	r3, #455	@ 0x1c7
 800249e:	223c      	movs	r2, #60	@ 0x3c
 80024a0:	f44f 61aa 	mov.w	r1, #1360	@ 0x550
 80024a4:	f7fe fc5c 	bl	8000d60 <_ZN16Temperatures_MODC1Emii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 80024a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024b0:	2120      	movs	r1, #32
 80024b2:	4808      	ldr	r0, [pc, #32]	@ (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80024b4:	f7fe faf6 	bl	8000aa4 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 80024b8:	22c8      	movs	r2, #200	@ 0xc8
 80024ba:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80024be:	4806      	ldr	r0, [pc, #24]	@ (80024d8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80024c0:	f7fe fbca 	bl	8000c58 <_ZN11Current_MODC1Emi>
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}
 80024cc:	24000470 	.word	0x24000470
 80024d0:	24000b88 	.word	0x24000b88
 80024d4:	240012e0 	.word	0x240012e0
 80024d8:	24001318 	.word	0x24001318

080024dc <_GLOBAL__sub_I_BMS>:
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
 80024e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff fee1 	bl	80022ac <_Z41__static_initialization_and_destruction_0ii>
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <HAL_MspInit+0x30>)
 80024f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024f8:	4a08      	ldr	r2, [pc, #32]	@ (800251c <HAL_MspInit+0x30>)
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_MspInit+0x30>)
 8002504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	58024400 	.word	0x58024400

08002520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a31      	ldr	r2, [pc, #196]	@ (8002604 <HAL_ADC_MspInit+0xe4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12b      	bne.n	800259a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002542:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 8002544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002548:	4a2f      	ldr	r2, [pc, #188]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 800254a:	f043 0320 	orr.w	r3, r3, #32
 800254e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002552:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 8002554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002560:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002566:	4a28      	ldr	r2, [pc, #160]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 8002568:	f043 0320 	orr.w	r3, r3, #32
 800256c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002570:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800257e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002584:	2303      	movs	r3, #3
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	4619      	mov	r1, r3
 8002592:	481e      	ldr	r0, [pc, #120]	@ (800260c <HAL_ADC_MspInit+0xec>)
 8002594:	f003 fdac 	bl	80060f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002598:	e02f      	b.n	80025fa <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <HAL_ADC_MspInit+0xf0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d12a      	bne.n	80025fa <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025a4:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025aa:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 80025ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 80025c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_ADC_MspInit+0xe8>)
 80025d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e6:	2303      	movs	r3, #3
 80025e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	4805      	ldr	r0, [pc, #20]	@ (800260c <HAL_ADC_MspInit+0xec>)
 80025f6:	f003 fd7b 	bl	80060f0 <HAL_GPIO_Init>
}
 80025fa:	bf00      	nop
 80025fc:	3730      	adds	r7, #48	@ 0x30
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40022000 	.word	0x40022000
 8002608:	58024400 	.word	0x58024400
 800260c:	58021400 	.word	0x58021400
 8002610:	58026000 	.word	0x58026000

08002614 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0ba      	sub	sp, #232	@ 0xe8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800262c:	f107 0318 	add.w	r3, r7, #24
 8002630:	22b8      	movs	r2, #184	@ 0xb8
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f008 fd5f 	bl	800b0f8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5a      	ldr	r2, [pc, #360]	@ (80027a8 <HAL_FDCAN_MspInit+0x194>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d157      	bne.n	80026f4 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002644:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002656:	f107 0318 	add.w	r3, r7, #24
 800265a:	4618      	mov	r0, r3
 800265c:	f004 fec2 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002666:	f7ff fb43 	bl	8001cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800266a:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <HAL_FDCAN_MspInit+0x198>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	4a4e      	ldr	r2, [pc, #312]	@ (80027ac <HAL_FDCAN_MspInit+0x198>)
 8002672:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002674:	4b4d      	ldr	r3, [pc, #308]	@ (80027ac <HAL_FDCAN_MspInit+0x198>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10e      	bne.n	800269a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800267c:	4b4c      	ldr	r3, [pc, #304]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 800267e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002682:	4a4b      	ldr	r2, [pc, #300]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002688:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800268c:	4b48      	ldr	r3, [pc, #288]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 800268e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800269a:	4b45      	ldr	r3, [pc, #276]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a0:	4a43      	ldr	r2, [pc, #268]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026aa:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80026d0:	2309      	movs	r3, #9
 80026d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026da:	4619      	mov	r1, r3
 80026dc:	4835      	ldr	r0, [pc, #212]	@ (80027b4 <HAL_FDCAN_MspInit+0x1a0>)
 80026de:	f003 fd07 	bl	80060f0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	2013      	movs	r0, #19
 80026e8:	f002 fb11 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80026ec:	2013      	movs	r0, #19
 80026ee:	f002 fb28 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80026f2:	e054      	b.n	800279e <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2f      	ldr	r2, [pc, #188]	@ (80027b8 <HAL_FDCAN_MspInit+0x1a4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d14f      	bne.n	800279e <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002710:	f107 0318 	add.w	r3, r7, #24
 8002714:	4618      	mov	r0, r3
 8002716:	f004 fe65 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002720:	f7ff fae6 	bl	8001cf0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002724:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <HAL_FDCAN_MspInit+0x198>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	4a20      	ldr	r2, [pc, #128]	@ (80027ac <HAL_FDCAN_MspInit+0x198>)
 800272c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <HAL_FDCAN_MspInit+0x198>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10e      	bne.n	8002754 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002736:	4b1e      	ldr	r3, [pc, #120]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 8002738:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800273c:	4a1c      	ldr	r2, [pc, #112]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002742:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002746:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 8002748:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002754:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 8002756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800275a:	4a15      	ldr	r2, [pc, #84]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002764:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <HAL_FDCAN_MspInit+0x19c>)
 8002766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002772:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800278c:	2309      	movs	r3, #9
 800278e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002796:	4619      	mov	r1, r3
 8002798:	4808      	ldr	r0, [pc, #32]	@ (80027bc <HAL_FDCAN_MspInit+0x1a8>)
 800279a:	f003 fca9 	bl	80060f0 <HAL_GPIO_Init>
}
 800279e:	bf00      	nop
 80027a0:	37e8      	adds	r7, #232	@ 0xe8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	4000a000 	.word	0x4000a000
 80027ac:	240013b0 	.word	0x240013b0
 80027b0:	58024400 	.word	0x58024400
 80027b4:	58020c00 	.word	0x58020c00
 80027b8:	4000a400 	.word	0x4000a400
 80027bc:	58020400 	.word	0x58020400

080027c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0b8      	sub	sp, #224	@ 0xe0
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	22b8      	movs	r2, #184	@ 0xb8
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f008 fc89 	bl	800b0f8 <memset>
  if(huart->Instance==USART2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a26      	ldr	r2, [pc, #152]	@ (8002884 <HAL_UART_MspInit+0xc4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d145      	bne.n	800287c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027f0:	f04f 0202 	mov.w	r2, #2
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002802:	f107 0310 	add.w	r3, r7, #16
 8002806:	4618      	mov	r0, r3
 8002808:	f004 fdec 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002812:	f7ff fa6d 	bl	8001cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002816:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HAL_UART_MspInit+0xc8>)
 8002818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800281c:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <HAL_UART_MspInit+0xc8>)
 800281e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002822:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <HAL_UART_MspInit+0xc8>)
 8002828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_UART_MspInit+0xc8>)
 8002836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <HAL_UART_MspInit+0xc8>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_UART_MspInit+0xc8>)
 8002846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002852:	230c      	movs	r3, #12
 8002854:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800286a:	2307      	movs	r3, #7
 800286c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002874:	4619      	mov	r1, r3
 8002876:	4805      	ldr	r0, [pc, #20]	@ (800288c <HAL_UART_MspInit+0xcc>)
 8002878:	f003 fc3a 	bl	80060f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800287c:	bf00      	nop
 800287e:	37e0      	adds	r7, #224	@ 0xe0
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40004400 	.word	0x40004400
 8002888:	58024400 	.word	0x58024400
 800288c:	58020000 	.word	0x58020000

08002890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <NMI_Handler+0x4>

08002898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <HardFault_Handler+0x4>

080028a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <MemManage_Handler+0x4>

080028a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <BusFault_Handler+0x4>

080028b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <UsageFault_Handler+0x4>

080028b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e6:	f000 f957 	bl	8002b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028f4:	4802      	ldr	r0, [pc, #8]	@ (8002900 <FDCAN1_IT0_IRQHandler+0x10>)
 80028f6:	f002 feff 	bl	80056f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	24000168 	.word	0x24000168

08002904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800290c:	4a14      	ldr	r2, [pc, #80]	@ (8002960 <_sbrk+0x5c>)
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <_sbrk+0x60>)
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002918:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <_sbrk+0x64>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <_sbrk+0x64>)
 8002922:	4a12      	ldr	r2, [pc, #72]	@ (800296c <_sbrk+0x68>)
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002926:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	429a      	cmp	r2, r3
 8002932:	d207      	bcs.n	8002944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002934:	f008 fbe8 	bl	800b108 <__errno>
 8002938:	4603      	mov	r3, r0
 800293a:	220c      	movs	r2, #12
 800293c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	e009      	b.n	8002958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800294a:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	4a05      	ldr	r2, [pc, #20]	@ (8002968 <_sbrk+0x64>)
 8002954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	24050000 	.word	0x24050000
 8002964:	00000400 	.word	0x00000400
 8002968:	240013b4 	.word	0x240013b4
 800296c:	24001508 	.word	0x24001508

08002970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002974:	4b32      	ldr	r3, [pc, #200]	@ (8002a40 <SystemInit+0xd0>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	4a31      	ldr	r2, [pc, #196]	@ (8002a40 <SystemInit+0xd0>)
 800297c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002984:	4b2f      	ldr	r3, [pc, #188]	@ (8002a44 <SystemInit+0xd4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	2b06      	cmp	r3, #6
 800298e:	d807      	bhi.n	80029a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002990:	4b2c      	ldr	r3, [pc, #176]	@ (8002a44 <SystemInit+0xd4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 030f 	bic.w	r3, r3, #15
 8002998:	4a2a      	ldr	r2, [pc, #168]	@ (8002a44 <SystemInit+0xd4>)
 800299a:	f043 0307 	orr.w	r3, r3, #7
 800299e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <SystemInit+0xd8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a28      	ldr	r2, [pc, #160]	@ (8002a48 <SystemInit+0xd8>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029ac:	4b26      	ldr	r3, [pc, #152]	@ (8002a48 <SystemInit+0xd8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029b2:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <SystemInit+0xd8>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4924      	ldr	r1, [pc, #144]	@ (8002a48 <SystemInit+0xd8>)
 80029b8:	4b24      	ldr	r3, [pc, #144]	@ (8002a4c <SystemInit+0xdc>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029be:	4b21      	ldr	r3, [pc, #132]	@ (8002a44 <SystemInit+0xd4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002a44 <SystemInit+0xd4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 030f 	bic.w	r3, r3, #15
 80029d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <SystemInit+0xd4>)
 80029d4:	f043 0307 	orr.w	r3, r3, #7
 80029d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029da:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <SystemInit+0xd8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029e0:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <SystemInit+0xd8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029e6:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <SystemInit+0xd8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029ec:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <SystemInit+0xd8>)
 80029ee:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <SystemInit+0xe0>)
 80029f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <SystemInit+0xd8>)
 80029f4:	4a17      	ldr	r2, [pc, #92]	@ (8002a54 <SystemInit+0xe4>)
 80029f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <SystemInit+0xd8>)
 80029fa:	4a17      	ldr	r2, [pc, #92]	@ (8002a58 <SystemInit+0xe8>)
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <SystemInit+0xd8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a04:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <SystemInit+0xd8>)
 8002a06:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <SystemInit+0xe8>)
 8002a08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <SystemInit+0xd8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a10:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <SystemInit+0xd8>)
 8002a12:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <SystemInit+0xe8>)
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <SystemInit+0xd8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <SystemInit+0xd8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a09      	ldr	r2, [pc, #36]	@ (8002a48 <SystemInit+0xd8>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a28:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <SystemInit+0xd8>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <SystemInit+0xec>)
 8002a30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	52002000 	.word	0x52002000
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a50:	02020200 	.word	0x02020200
 8002a54:	01ff0000 	.word	0x01ff0000
 8002a58:	01010280 	.word	0x01010280
 8002a5c:	52004000 	.word	0x52004000

08002a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a64:	f7ff ff84 	bl	8002970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a68:	480c      	ldr	r0, [pc, #48]	@ (8002a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a6a:	490d      	ldr	r1, [pc, #52]	@ (8002aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a70:	e002      	b.n	8002a78 <LoopCopyDataInit>

08002a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a76:	3304      	adds	r3, #4

08002a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a7c:	d3f9      	bcc.n	8002a72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a80:	4c0a      	ldr	r4, [pc, #40]	@ (8002aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a84:	e001      	b.n	8002a8a <LoopFillZerobss>

08002a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a86:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002a88:	3204      	adds	r2, #4

08002a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a8c:	d3fb      	bcc.n	8002a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f008 fb41 	bl	800b114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a92:	f7fe fba1 	bl	80011d8 <main>
  bx  lr
 8002a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a98:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002aa0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002aa4:	0800bd8c 	.word	0x0800bd8c
  ldr r2, =_sbss
 8002aa8:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002aac:	24001504 	.word	0x24001504

08002ab0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC3_IRQHandler>
	...

08002ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aba:	2003      	movs	r0, #3
 8002abc:	f002 f91c 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ac0:	f004 faba 	bl	8007038 <HAL_RCC_GetSysClockFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_Init+0x68>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	4913      	ldr	r1, [pc, #76]	@ (8002b20 <HAL_Init+0x6c>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ade:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_Init+0x68>)
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8002b20 <HAL_Init+0x6c>)
 8002ae8:	5cd3      	ldrb	r3, [r2, r3]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
 8002af4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b24 <HAL_Init+0x70>)
 8002af6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002af8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b28 <HAL_Init+0x74>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002afe:	200f      	movs	r0, #15
 8002b00:	f000 f814 	bl	8002b2c <HAL_InitTick>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e002      	b.n	8002b14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b0e:	f7ff fced 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	0800bcfc 	.word	0x0800bcfc
 8002b24:	24000010 	.word	0x24000010
 8002b28:	2400000c 	.word	0x2400000c

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b34:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_InitTick+0x60>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e021      	b.n	8002b84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <HAL_InitTick+0x64>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_InitTick+0x60>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 f901 	bl	8004d5e <HAL_SYSTICK_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00e      	b.n	8002b84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d80a      	bhi.n	8002b82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f002 f8cb 	bl	8004d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b78:	4a06      	ldr	r2, [pc, #24]	@ (8002b94 <HAL_InitTick+0x68>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	24000018 	.word	0x24000018
 8002b90:	2400000c 	.word	0x2400000c
 8002b94:	24000014 	.word	0x24000014

08002b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_IncTick+0x20>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_IncTick+0x24>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <HAL_IncTick+0x24>)
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	24000018 	.word	0x24000018
 8002bbc:	240013b8 	.word	0x240013b8

08002bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	@ (8002bd4 <HAL_GetTick+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	240013b8 	.word	0x240013b8

08002bd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3360      	adds	r3, #96	@ 0x60
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ca0 <LL_ADC_SetOffset+0x60>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10b      	bne.n	8002c7c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c7a:	e00b      	b.n	8002c94 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	601a      	str	r2, [r3, #0]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	58026000 	.word	0x58026000

08002ca4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3360      	adds	r3, #96	@ 0x60
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	611a      	str	r2, [r3, #16]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a0c      	ldr	r2, [pc, #48]	@ (8002d44 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00e      	beq.n	8002d36 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3360      	adds	r3, #96	@ 0x60
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	601a      	str	r2, [r3, #0]
  }
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	58026000 	.word	0x58026000

08002d48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a0c      	ldr	r2, [pc, #48]	@ (8002d88 <LL_ADC_SetOffsetSaturation+0x40>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d10e      	bne.n	8002d7a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3360      	adds	r3, #96	@ 0x60
 8002d60:	461a      	mov	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	58026000 	.word	0x58026000

08002d8c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dcc <LL_ADC_SetOffsetSign+0x40>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10e      	bne.n	8002dbe <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3360      	adds	r3, #96	@ 0x60
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	58026000 	.word	0x58026000

08002dd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3360      	adds	r3, #96	@ 0x60
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a0c      	ldr	r2, [pc, #48]	@ (8002e20 <LL_ADC_SetOffsetState+0x50>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d108      	bne.n	8002e04 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002e02:	e007      	b.n	8002e14 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	58026000 	.word	0x58026000

08002e24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b087      	sub	sp, #28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3330      	adds	r3, #48	@ 0x30
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	4413      	add	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	211f      	movs	r1, #31
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	f003 011f 	and.w	r1, r3, #31
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b087      	sub	sp, #28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	0e5b      	lsrs	r3, r3, #25
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	0d1b      	lsrs	r3, r3, #20
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2107      	movs	r1, #7
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	0d1b      	lsrs	r3, r3, #20
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a1a      	ldr	r2, [pc, #104]	@ (8002f70 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d115      	bne.n	8002f38 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0318 	and.w	r3, r3, #24
 8002f22:	4914      	ldr	r1, [pc, #80]	@ (8002f74 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f24:	40d9      	lsrs	r1, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	400b      	ands	r3, r1
 8002f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f36:	e014      	b.n	8002f62 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0318 	and.w	r3, r3, #24
 8002f4e:	4909      	ldr	r1, [pc, #36]	@ (8002f74 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f50:	40d9      	lsrs	r1, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	400b      	ands	r3, r1
 8002f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	58026000 	.word	0x58026000
 8002f74:	000fffff 	.word	0x000fffff

08002f78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 031f 	and.w	r3, r3, #31
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6093      	str	r3, [r2, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	5fffffc0 	.word	0x5fffffc0

08002fd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe8:	d101      	bne.n	8002fee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <LL_ADC_EnableInternalRegulator+0x24>)
 800300a:	4013      	ands	r3, r2
 800300c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	6fffffc0 	.word	0x6fffffc0

08003024 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003038:	d101      	bne.n	800303e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <LL_ADC_Enable+0x24>)
 800305a:	4013      	ands	r3, r2
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	7fffffc0 	.word	0x7fffffc0

08003074 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <LL_ADC_Disable+0x24>)
 8003082:	4013      	ands	r3, r2
 8003084:	f043 0202 	orr.w	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	7fffffc0 	.word	0x7fffffc0

0800309c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <LL_ADC_IsEnabled+0x18>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <LL_ADC_IsEnabled+0x1a>
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d101      	bne.n	80030da <LL_ADC_IsDisableOngoing+0x18>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <LL_ADC_IsDisableOngoing+0x1a>
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <LL_ADC_REG_StartConversion+0x24>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	f043 0204 	orr.w	r2, r3, #4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	7fffffc0 	.word	0x7fffffc0

08003110 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <LL_ADC_REG_StopConversion+0x24>)
 800311e:	4013      	ands	r3, r2
 8003120:	f043 0210 	orr.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	7fffffc0 	.word	0x7fffffc0

08003138 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d101      	bne.n	8003150 <LL_ADC_REG_IsConversionOngoing+0x18>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <LL_ADC_INJ_StopConversion+0x24>)
 800316e:	4013      	ands	r3, r2
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	7fffffc0 	.word	0x7fffffc0

08003188 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d101      	bne.n	80031a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b089      	sub	sp, #36	@ 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1ee      	b.n	80035a8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff f9a1 	bl	8002520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff feef 	bl	8002fd4 <LL_ADC_IsDeepPowerDownEnabled>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fed5 	bl	8002fb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff0a 	bl	8003024 <LL_ADC_IsInternalRegulatorEnabled>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d114      	bne.n	8003240 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff feee 	bl	8002ffc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003220:	4b8e      	ldr	r3, [pc, #568]	@ (800345c <HAL_ADC_Init+0x2ac>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	4a8e      	ldr	r2, [pc, #568]	@ (8003460 <HAL_ADC_Init+0x2b0>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	3301      	adds	r3, #1
 8003230:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003232:	e002      	b.n	800323a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3b01      	subs	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff feed 	bl	8003024 <LL_ADC_IsInternalRegulatorEnabled>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10d      	bne.n	800326c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003254:	f043 0210 	orr.w	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff61 	bl	8003138 <LL_ADC_REG_IsConversionOngoing>
 8003276:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 8188 	bne.w	8003596 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 8184 	bne.w	8003596 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003296:	f043 0202 	orr.w	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fefa 	bl	800309c <LL_ADC_IsEnabled>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d136      	bne.n	800331c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6c      	ldr	r2, [pc, #432]	@ (8003464 <HAL_ADC_Init+0x2b4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_ADC_Init+0x112>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003468 <HAL_ADC_Init+0x2b8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10e      	bne.n	80032e0 <HAL_ADC_Init+0x130>
 80032c2:	4868      	ldr	r0, [pc, #416]	@ (8003464 <HAL_ADC_Init+0x2b4>)
 80032c4:	f7ff feea 	bl	800309c <LL_ADC_IsEnabled>
 80032c8:	4604      	mov	r4, r0
 80032ca:	4867      	ldr	r0, [pc, #412]	@ (8003468 <HAL_ADC_Init+0x2b8>)
 80032cc:	f7ff fee6 	bl	800309c <LL_ADC_IsEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4323      	orrs	r3, r4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e008      	b.n	80032f2 <HAL_ADC_Init+0x142>
 80032e0:	4862      	ldr	r0, [pc, #392]	@ (800346c <HAL_ADC_Init+0x2bc>)
 80032e2:	f7ff fedb 	bl	800309c <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003464 <HAL_ADC_Init+0x2b4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_ADC_Init+0x15a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a58      	ldr	r2, [pc, #352]	@ (8003468 <HAL_ADC_Init+0x2b8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_ADC_Init+0x15e>
 800330a:	4a59      	ldr	r2, [pc, #356]	@ (8003470 <HAL_ADC_Init+0x2c0>)
 800330c:	e000      	b.n	8003310 <HAL_ADC_Init+0x160>
 800330e:	4a59      	ldr	r2, [pc, #356]	@ (8003474 <HAL_ADC_Init+0x2c4>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f7ff fc5e 	bl	8002bd8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a52      	ldr	r2, [pc, #328]	@ (800346c <HAL_ADC_Init+0x2bc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d129      	bne.n	800337a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	7e5b      	ldrb	r3, [r3, #25]
 800332a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003330:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003336:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d013      	beq.n	8003368 <HAL_ADC_Init+0x1b8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	d00d      	beq.n	8003364 <HAL_ADC_Init+0x1b4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b1c      	cmp	r3, #28
 800334e:	d007      	beq.n	8003360 <HAL_ADC_Init+0x1b0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b18      	cmp	r3, #24
 8003356:	d101      	bne.n	800335c <HAL_ADC_Init+0x1ac>
 8003358:	2318      	movs	r3, #24
 800335a:	e006      	b.n	800336a <HAL_ADC_Init+0x1ba>
 800335c:	2300      	movs	r3, #0
 800335e:	e004      	b.n	800336a <HAL_ADC_Init+0x1ba>
 8003360:	2310      	movs	r3, #16
 8003362:	e002      	b.n	800336a <HAL_ADC_Init+0x1ba>
 8003364:	2308      	movs	r3, #8
 8003366:	e000      	b.n	800336a <HAL_ADC_Init+0x1ba>
 8003368:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800336a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003372:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e00e      	b.n	8003398 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7e5b      	ldrb	r3, [r3, #25]
 800337e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003384:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800338a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003392:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d106      	bne.n	80033b0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	3b01      	subs	r3, #1
 80033a8:	045b      	lsls	r3, r3, #17
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d009      	beq.n	80033cc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a26      	ldr	r2, [pc, #152]	@ (800346c <HAL_ADC_Init+0x2bc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d115      	bne.n	8003402 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <HAL_ADC_Init+0x2c8>)
 80033de:	4013      	ands	r3, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	69b9      	ldr	r1, [r7, #24]
 80033e6:	430b      	orrs	r3, r1
 80033e8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	611a      	str	r2, [r3, #16]
 8003400:	e009      	b.n	8003416 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	4b1c      	ldr	r3, [pc, #112]	@ (800347c <HAL_ADC_Init+0x2cc>)
 800340a:	4013      	ands	r3, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	430b      	orrs	r3, r1
 8003414:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fe8c 	bl	8003138 <LL_ADC_REG_IsConversionOngoing>
 8003420:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff feae 	bl	8003188 <LL_ADC_INJ_IsConversionOngoing>
 800342c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 808e 	bne.w	8003552 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 808a 	bne.w	8003552 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <HAL_ADC_Init+0x2bc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d11b      	bne.n	8003480 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7e1b      	ldrb	r3, [r3, #24]
 800344c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003454:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e018      	b.n	800348e <HAL_ADC_Init+0x2de>
 800345c:	2400000c 	.word	0x2400000c
 8003460:	053e2d63 	.word	0x053e2d63
 8003464:	40022000 	.word	0x40022000
 8003468:	40022100 	.word	0x40022100
 800346c:	58026000 	.word	0x58026000
 8003470:	40022300 	.word	0x40022300
 8003474:	58026300 	.word	0x58026300
 8003478:	fff04007 	.word	0xfff04007
 800347c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7e1b      	ldrb	r3, [r3, #24]
 8003484:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4b46      	ldr	r3, [pc, #280]	@ (80035b0 <HAL_ADC_Init+0x400>)
 8003496:	4013      	ands	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	69b9      	ldr	r1, [r7, #24]
 800349e:	430b      	orrs	r3, r1
 80034a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d137      	bne.n	800351c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3f      	ldr	r2, [pc, #252]	@ (80035b4 <HAL_ADC_Init+0x404>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d116      	bne.n	80034ea <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	4b3d      	ldr	r3, [pc, #244]	@ (80035b8 <HAL_ADC_Init+0x408>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034da:	430a      	orrs	r2, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	611a      	str	r2, [r3, #16]
 80034e8:	e020      	b.n	800352c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	4b32      	ldr	r3, [pc, #200]	@ (80035bc <HAL_ADC_Init+0x40c>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034f8:	3a01      	subs	r2, #1
 80034fa:	0411      	lsls	r1, r2, #16
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003506:	4311      	orrs	r1, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800350c:	430a      	orrs	r2, r1
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	611a      	str	r2, [r3, #16]
 800351a:	e007      	b.n	800352c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <HAL_ADC_Init+0x404>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d002      	beq.n	8003552 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f001 f90d 	bl	800476c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10c      	bne.n	8003574 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	f023 010f 	bic.w	r1, r3, #15
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	1e5a      	subs	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
 8003572:	e007      	b.n	8003584 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 020f 	bic.w	r2, r2, #15
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003588:	f023 0303 	bic.w	r3, r3, #3
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	661a      	str	r2, [r3, #96]	@ 0x60
 8003594:	e007      	b.n	80035a6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	f043 0210 	orr.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3724      	adds	r7, #36	@ 0x24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	ffffbffc 	.word	0xffffbffc
 80035b4:	58026000 	.word	0x58026000
 80035b8:	fc00f81f 	.word	0xfc00f81f
 80035bc:	fc00f81e 	.word	0xfc00f81e

080035c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003740 <HAL_ADC_Start+0x180>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_ADC_Start+0x1c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003744 <HAL_ADC_Start+0x184>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_Start+0x20>
 80035dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003748 <HAL_ADC_Start+0x188>)
 80035de:	e000      	b.n	80035e2 <HAL_ADC_Start+0x22>
 80035e0:	4b5a      	ldr	r3, [pc, #360]	@ (800374c <HAL_ADC_Start+0x18c>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fcc8 	bl	8002f78 <LL_ADC_GetMultimode>
 80035e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fda2 	bl	8003138 <LL_ADC_REG_IsConversionOngoing>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 809a 	bne.w	8003730 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_ADC_Start+0x4a>
 8003606:	2302      	movs	r3, #2
 8003608:	e095      	b.n	8003736 <HAL_ADC_Start+0x176>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 ffc0 	bl	8004598 <ADC_Enable>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 8081 	bne.w	8003726 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003628:	4b49      	ldr	r3, [pc, #292]	@ (8003750 <HAL_ADC_Start+0x190>)
 800362a:	4013      	ands	r3, r2
 800362c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a42      	ldr	r2, [pc, #264]	@ (8003744 <HAL_ADC_Start+0x184>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d002      	beq.n	8003644 <HAL_ADC_Start+0x84>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	e000      	b.n	8003646 <HAL_ADC_Start+0x86>
 8003644:	4b3e      	ldr	r3, [pc, #248]	@ (8003740 <HAL_ADC_Start+0x180>)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	4293      	cmp	r3, r2
 800364c:	d002      	beq.n	8003654 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003658:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366c:	d106      	bne.n	800367c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003672:	f023 0206 	bic.w	r2, r3, #6
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	665a      	str	r2, [r3, #100]	@ 0x64
 800367a:	e002      	b.n	8003682 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	221c      	movs	r2, #28
 8003688:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2b      	ldr	r2, [pc, #172]	@ (8003744 <HAL_ADC_Start+0x184>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d002      	beq.n	80036a2 <HAL_ADC_Start+0xe2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	e000      	b.n	80036a4 <HAL_ADC_Start+0xe4>
 80036a2:	4b27      	ldr	r3, [pc, #156]	@ (8003740 <HAL_ADC_Start+0x180>)
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d008      	beq.n	80036be <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d002      	beq.n	80036be <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b09      	cmp	r3, #9
 80036bc:	d114      	bne.n	80036e8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fd01 	bl	80030e8 <LL_ADC_REG_StartConversion>
 80036e6:	e025      	b.n	8003734 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <HAL_ADC_Start+0x184>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d002      	beq.n	8003704 <HAL_ADC_Start+0x144>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	e000      	b.n	8003706 <HAL_ADC_Start+0x146>
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <HAL_ADC_Start+0x180>)
 8003706:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00f      	beq.n	8003734 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003718:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800371c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	661a      	str	r2, [r3, #96]	@ 0x60
 8003724:	e006      	b.n	8003734 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800372e:	e001      	b.n	8003734 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003734:	7dfb      	ldrb	r3, [r7, #23]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40022000 	.word	0x40022000
 8003744:	40022100 	.word	0x40022100
 8003748:	40022300 	.word	0x40022300
 800374c:	58026300 	.word	0x58026300
 8003750:	fffff0fe 	.word	0xfffff0fe

08003754 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_ADC_Stop+0x16>
 8003766:	2302      	movs	r3, #2
 8003768:	e021      	b.n	80037ae <HAL_ADC_Stop+0x5a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003772:	2103      	movs	r1, #3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fe53 	bl	8004420 <ADC_ConversionStop>
 800377a:	4603      	mov	r3, r0
 800377c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10f      	bne.n	80037a4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 ff91 	bl	80046ac <ADC_Disable>
 800378a:	4603      	mov	r3, r0
 800378c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003798:	4b07      	ldr	r3, [pc, #28]	@ (80037b8 <HAL_ADC_Stop+0x64>)
 800379a:	4013      	ands	r3, r2
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	ffffeefe 	.word	0xffffeefe

080037bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a72      	ldr	r2, [pc, #456]	@ (8003994 <HAL_ADC_PollForConversion+0x1d8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_ADC_PollForConversion+0x1e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a70      	ldr	r2, [pc, #448]	@ (8003998 <HAL_ADC_PollForConversion+0x1dc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_ADC_PollForConversion+0x22>
 80037da:	4b70      	ldr	r3, [pc, #448]	@ (800399c <HAL_ADC_PollForConversion+0x1e0>)
 80037dc:	e000      	b.n	80037e0 <HAL_ADC_PollForConversion+0x24>
 80037de:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_ADC_PollForConversion+0x1e4>)
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fbc9 	bl	8002f78 <LL_ADC_GetMultimode>
 80037e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d102      	bne.n	80037f6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80037f0:	2308      	movs	r3, #8
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	e037      	b.n	8003866 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d002      	beq.n	8003808 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b09      	cmp	r3, #9
 8003806:	d111      	bne.n	800382c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0b1      	b.n	800398a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003826:	2304      	movs	r3, #4
 8003828:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800382a:	e01c      	b.n	8003866 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a58      	ldr	r2, [pc, #352]	@ (8003994 <HAL_ADC_PollForConversion+0x1d8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_ADC_PollForConversion+0x84>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a57      	ldr	r2, [pc, #348]	@ (8003998 <HAL_ADC_PollForConversion+0x1dc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_ADC_PollForConversion+0x88>
 8003840:	4b56      	ldr	r3, [pc, #344]	@ (800399c <HAL_ADC_PollForConversion+0x1e0>)
 8003842:	e000      	b.n	8003846 <HAL_ADC_PollForConversion+0x8a>
 8003844:	4b56      	ldr	r3, [pc, #344]	@ (80039a0 <HAL_ADC_PollForConversion+0x1e4>)
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fba4 	bl	8002f94 <LL_ADC_GetMultiDMATransfer>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e093      	b.n	800398a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003862:	2304      	movs	r3, #4
 8003864:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003866:	f7ff f9ab 	bl	8002bc0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800386c:	e021      	b.n	80038b2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d01d      	beq.n	80038b2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003876:	f7ff f9a3 	bl	8002bc0 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <HAL_ADC_PollForConversion+0xd0>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d112      	bne.n	80038b2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389e:	f043 0204 	orr.w	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e06b      	b.n	800398a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0d6      	beq.n	800386e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff faa7 	bl	8002e24 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7e5b      	ldrb	r3, [r3, #25]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d118      	bne.n	8003916 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d111      	bne.n	8003916 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1f      	ldr	r2, [pc, #124]	@ (8003998 <HAL_ADC_PollForConversion+0x1dc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d002      	beq.n	8003926 <HAL_ADC_PollForConversion+0x16a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	e000      	b.n	8003928 <HAL_ADC_PollForConversion+0x16c>
 8003926:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_ADC_PollForConversion+0x1d8>)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	4293      	cmp	r3, r2
 800392e:	d008      	beq.n	8003942 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d002      	beq.n	8003942 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b09      	cmp	r3, #9
 8003940:	d104      	bne.n	800394c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e00c      	b.n	8003966 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a11      	ldr	r2, [pc, #68]	@ (8003998 <HAL_ADC_PollForConversion+0x1dc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d002      	beq.n	800395c <HAL_ADC_PollForConversion+0x1a0>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	e000      	b.n	800395e <HAL_ADC_PollForConversion+0x1a2>
 800395c:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <HAL_ADC_PollForConversion+0x1d8>)
 800395e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d104      	bne.n	8003976 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2208      	movs	r2, #8
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e008      	b.n	8003988 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	220c      	movs	r2, #12
 8003986:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40022100 	.word	0x40022100
 800399c:	40022300 	.word	0x40022300
 80039a0:	58026300 	.word	0x58026300

080039a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b0b9      	sub	sp, #228	@ 0xe4
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039da:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4aab      	ldr	r2, [pc, #684]	@ (8003c90 <HAL_ADC_ConfigChannel+0x2d0>)
 80039e2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d102      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x34>
 80039ee:	2302      	movs	r3, #2
 80039f0:	f000 bcfe 	b.w	80043f0 <HAL_ADC_ConfigChannel+0xa30>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fb99 	bl	8003138 <LL_ADC_REG_IsConversionOngoing>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f040 84e2 	bne.w	80043d2 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	db38      	blt.n	8003a88 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a9e      	ldr	r2, [pc, #632]	@ (8003c94 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d033      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d108      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x7e>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	e01d      	b.n	8003a7a <HAL_ADC_ConfigChannel+0xba>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003a62:	2320      	movs	r3, #32
 8003a64:	e004      	b.n	8003a70 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	2201      	movs	r2, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	69d1      	ldr	r1, [r2, #28]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	f7ff f9d8 	bl	8002e4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fb4a 	bl	8003138 <LL_ADC_REG_IsConversionOngoing>
 8003aa4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fb6b 	bl	8003188 <LL_ADC_INJ_IsConversionOngoing>
 8003ab2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 8270 	bne.w	8003fa0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ac0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 826b 	bne.w	8003fa0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7ff f9e3 	bl	8002ea2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6c      	ldr	r2, [pc, #432]	@ (8003c94 <HAL_ADC_ConfigChannel+0x2d4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10d      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	08db      	lsrs	r3, r3, #3
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b00:	e032      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b02:	4b65      	ldr	r3, [pc, #404]	@ (8003c98 <HAL_ADC_ConfigChannel+0x2d8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b0e:	d10b      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x168>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	e01d      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x1a4>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x18e>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	089b      	lsrs	r3, r3, #2
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	e00a      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x1a4>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d048      	beq.n	8003c02 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6919      	ldr	r1, [r3, #16]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b80:	f7ff f85e 	bl	8002c40 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a42      	ldr	r2, [pc, #264]	@ (8003c94 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d119      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6919      	ldr	r1, [r3, #16]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7ff f8f6 	bl	8002d8c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6919      	ldr	r1, [r3, #16]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x1f8>
 8003bb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bb6:	e000      	b.n	8003bba <HAL_ADC_ConfigChannel+0x1fa>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f7ff f8c4 	bl	8002d48 <LL_ADC_SetOffsetSaturation>
 8003bc0:	e1ee      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6919      	ldr	r1, [r3, #16]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x21a>
 8003bd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003bd8:	e000      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x21c>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f7ff f891 	bl	8002d04 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6919      	ldr	r1, [r3, #16]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	7e1b      	ldrb	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x238>
 8003bf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bf6:	e000      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x23a>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f7ff f868 	bl	8002cd0 <LL_ADC_SetDataRightShift>
 8003c00:	e1ce      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a23      	ldr	r2, [pc, #140]	@ (8003c94 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	f040 8181 	bne.w	8003f10 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff f845 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x27a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff f83a 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	0e9b      	lsrs	r3, r3, #26
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	e01e      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x2b8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff f82f 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e004      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003c6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x2dc>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0e9b      	lsrs	r3, r3, #26
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	e01e      	b.n	8003cce <HAL_ADC_ConfigChannel+0x30e>
 8003c90:	47ff0000 	.word	0x47ff0000
 8003c94:	58026000 	.word	0x58026000
 8003c98:	5c001000 	.word	0x5c001000
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003cb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003cb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	e004      	b.n	8003cce <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d106      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff f878 	bl	8002dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe ffdc 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x34c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe ffd1 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	0e9b      	lsrs	r3, r3, #26
 8003d06:	f003 021f 	and.w	r2, r3, #31
 8003d0a:	e01e      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x38a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe ffc6 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	e004      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d105      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x3a2>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	0e9b      	lsrs	r3, r3, #26
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	e018      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x3d4>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003d86:	2320      	movs	r3, #32
 8003d88:	e004      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d106      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f815 	bl	8002dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2102      	movs	r1, #2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe ff79 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x412>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe ff6e 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	0e9b      	lsrs	r3, r3, #26
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	e01e      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x450>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe ff63 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003df4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003e00:	2320      	movs	r3, #32
 8003e02:	e004      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x468>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0e9b      	lsrs	r3, r3, #26
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	e014      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x492>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003e36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e44:	2320      	movs	r3, #32
 8003e46:	e004      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d106      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe ffb6 	bl	8002dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2103      	movs	r1, #3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe ff1a 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x4d0>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2103      	movs	r1, #3
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe ff0f 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003e86:	4603      	mov	r3, r0
 8003e88:	0e9b      	lsrs	r3, r3, #26
 8003e8a:	f003 021f 	and.w	r2, r3, #31
 8003e8e:	e017      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x500>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2103      	movs	r1, #3
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe ff04 	bl	8002ca4 <LL_ADC_GetOffsetChannel>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eaa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	e003      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x518>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	e011      	b.n	8003efc <HAL_ADC_ConfigChannel+0x53c>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003ee6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	e003      	b.n	8003efc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003ef4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d14f      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2200      	movs	r2, #0
 8003f06:	2103      	movs	r1, #3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe ff61 	bl	8002dd0 <LL_ADC_SetOffsetState>
 8003f0e:	e047      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	069b      	lsls	r3, r3, #26
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d107      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f32:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	069b      	lsls	r3, r3, #26
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d107      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f56:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	069b      	lsls	r3, r3, #26
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d107      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f7a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	069b      	lsls	r3, r3, #26
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f9e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff f879 	bl	800309c <LL_ADC_IsEnabled>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 8219 	bne.w	80043e4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f7fe ff9a 	bl	8002ef8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4aa1      	ldr	r2, [pc, #644]	@ (8004250 <HAL_ADC_ConfigChannel+0x890>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	f040 812e 	bne.w	800422c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x638>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0e9b      	lsrs	r3, r3, #26
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2b09      	cmp	r3, #9
 8003fee:	bf94      	ite	ls
 8003ff0:	2301      	movls	r3, #1
 8003ff2:	2300      	movhi	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e019      	b.n	800402c <HAL_ADC_ConfigChannel+0x66c>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004008:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800400a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004010:	2320      	movs	r3, #32
 8004012:	e003      	b.n	800401c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	3301      	adds	r3, #1
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2b09      	cmp	r3, #9
 8004024:	bf94      	ite	ls
 8004026:	2301      	movls	r3, #1
 8004028:	2300      	movhi	r3, #0
 800402a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800402c:	2b00      	cmp	r3, #0
 800402e:	d079      	beq.n	8004124 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004038:	2b00      	cmp	r3, #0
 800403a:	d107      	bne.n	800404c <HAL_ADC_ConfigChannel+0x68c>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	3301      	adds	r3, #1
 8004044:	069b      	lsls	r3, r3, #26
 8004046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800404a:	e015      	b.n	8004078 <HAL_ADC_ConfigChannel+0x6b8>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004054:	fa93 f3a3 	rbit	r3, r3
 8004058:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800405a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800405c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800405e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e003      	b.n	8004070 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	3301      	adds	r3, #1
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x6d8>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	3301      	adds	r3, #1
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2101      	movs	r1, #1
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	e017      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x708>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80040a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80040aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80040b0:	2320      	movs	r3, #32
 80040b2:	e003      	b.n	80040bc <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80040b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	3301      	adds	r3, #1
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	ea42 0103 	orr.w	r1, r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x72e>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	3301      	adds	r3, #1
 80040e0:	f003 021f 	and.w	r2, r3, #31
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	051b      	lsls	r3, r3, #20
 80040ec:	e018      	b.n	8004120 <HAL_ADC_ConfigChannel+0x760>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004106:	2320      	movs	r3, #32
 8004108:	e003      	b.n	8004112 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	fab3 f383 	clz	r3, r3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f003 021f 	and.w	r2, r3, #31
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004120:	430b      	orrs	r3, r1
 8004122:	e07e      	b.n	8004222 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x780>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	3301      	adds	r3, #1
 8004138:	069b      	lsls	r3, r3, #26
 800413a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800413e:	e015      	b.n	800416c <HAL_ADC_ConfigChannel+0x7ac>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e003      	b.n	8004164 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800415c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	3301      	adds	r3, #1
 8004166:	069b      	lsls	r3, r3, #26
 8004168:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_ADC_ConfigChannel+0x7cc>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0e9b      	lsrs	r3, r3, #26
 800417e:	3301      	adds	r3, #1
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2101      	movs	r1, #1
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	e017      	b.n	80041bc <HAL_ADC_ConfigChannel+0x7fc>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	61bb      	str	r3, [r7, #24]
  return result;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80041a4:	2320      	movs	r3, #32
 80041a6:	e003      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2101      	movs	r1, #1
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	ea42 0103 	orr.w	r1, r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x828>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	0e9b      	lsrs	r3, r3, #26
 80041d2:	3301      	adds	r3, #1
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	3b1e      	subs	r3, #30
 80041e0:	051b      	lsls	r3, r3, #20
 80041e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	e01b      	b.n	8004220 <HAL_ADC_ConfigChannel+0x860>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	60fb      	str	r3, [r7, #12]
  return result;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004200:	2320      	movs	r3, #32
 8004202:	e003      	b.n	800420c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f003 021f 	and.w	r2, r3, #31
 8004212:	4613      	mov	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4413      	add	r3, r2
 8004218:	3b1e      	subs	r3, #30
 800421a:	051b      	lsls	r3, r3, #20
 800421c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004220:	430b      	orrs	r3, r1
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	6892      	ldr	r2, [r2, #8]
 8004226:	4619      	mov	r1, r3
 8004228:	f7fe fe3b 	bl	8002ea2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f280 80d7 	bge.w	80043e4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a06      	ldr	r2, [pc, #24]	@ (8004254 <HAL_ADC_ConfigChannel+0x894>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_ADC_ConfigChannel+0x88a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a04      	ldr	r2, [pc, #16]	@ (8004258 <HAL_ADC_ConfigChannel+0x898>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10a      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x8a0>
 800424a:	4b04      	ldr	r3, [pc, #16]	@ (800425c <HAL_ADC_ConfigChannel+0x89c>)
 800424c:	e009      	b.n	8004262 <HAL_ADC_ConfigChannel+0x8a2>
 800424e:	bf00      	nop
 8004250:	47ff0000 	.word	0x47ff0000
 8004254:	40022000 	.word	0x40022000
 8004258:	40022100 	.word	0x40022100
 800425c:	40022300 	.word	0x40022300
 8004260:	4b65      	ldr	r3, [pc, #404]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa38>)
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fcde 	bl	8002c24 <LL_ADC_GetCommonPathInternalCh>
 8004268:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a62      	ldr	r2, [pc, #392]	@ (80043fc <HAL_ADC_ConfigChannel+0xa3c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_ADC_ConfigChannel+0x8c0>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a61      	ldr	r2, [pc, #388]	@ (8004400 <HAL_ADC_ConfigChannel+0xa40>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10e      	bne.n	800429e <HAL_ADC_ConfigChannel+0x8de>
 8004280:	485e      	ldr	r0, [pc, #376]	@ (80043fc <HAL_ADC_ConfigChannel+0xa3c>)
 8004282:	f7fe ff0b 	bl	800309c <LL_ADC_IsEnabled>
 8004286:	4604      	mov	r4, r0
 8004288:	485d      	ldr	r0, [pc, #372]	@ (8004400 <HAL_ADC_ConfigChannel+0xa40>)
 800428a:	f7fe ff07 	bl	800309c <LL_ADC_IsEnabled>
 800428e:	4603      	mov	r3, r0
 8004290:	4323      	orrs	r3, r4
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	e008      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x8f0>
 800429e:	4859      	ldr	r0, [pc, #356]	@ (8004404 <HAL_ADC_ConfigChannel+0xa44>)
 80042a0:	f7fe fefc 	bl	800309c <LL_ADC_IsEnabled>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8084 	beq.w	80043be <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a53      	ldr	r2, [pc, #332]	@ (8004408 <HAL_ADC_ConfigChannel+0xa48>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d132      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x966>
 80042c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d12c      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004404 <HAL_ADC_ConfigChannel+0xa44>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f040 8086 	bne.w	80043e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a47      	ldr	r2, [pc, #284]	@ (80043fc <HAL_ADC_ConfigChannel+0xa3c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_ADC_ConfigChannel+0x92c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a46      	ldr	r2, [pc, #280]	@ (8004400 <HAL_ADC_ConfigChannel+0xa40>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x930>
 80042ec:	4a47      	ldr	r2, [pc, #284]	@ (800440c <HAL_ADC_ConfigChannel+0xa4c>)
 80042ee:	e000      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x932>
 80042f0:	4a41      	ldr	r2, [pc, #260]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa38>)
 80042f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f7fe fc7e 	bl	8002bfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004302:	4b43      	ldr	r3, [pc, #268]	@ (8004410 <HAL_ADC_ConfigChannel+0xa50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	4a42      	ldr	r2, [pc, #264]	@ (8004414 <HAL_ADC_ConfigChannel+0xa54>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	3301      	adds	r3, #1
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004316:	e002      	b.n	800431e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3b01      	subs	r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f9      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004324:	e05e      	b.n	80043e4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a3b      	ldr	r2, [pc, #236]	@ (8004418 <HAL_ADC_ConfigChannel+0xa58>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d120      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x9b2>
 8004330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d11a      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a30      	ldr	r2, [pc, #192]	@ (8004404 <HAL_ADC_ConfigChannel+0xa44>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d14e      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2c      	ldr	r2, [pc, #176]	@ (80043fc <HAL_ADC_ConfigChannel+0xa3c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_ADC_ConfigChannel+0x99a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2a      	ldr	r2, [pc, #168]	@ (8004400 <HAL_ADC_ConfigChannel+0xa40>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_ADC_ConfigChannel+0x99e>
 800435a:	4a2c      	ldr	r2, [pc, #176]	@ (800440c <HAL_ADC_ConfigChannel+0xa4c>)
 800435c:	e000      	b.n	8004360 <HAL_ADC_ConfigChannel+0x9a0>
 800435e:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa38>)
 8004360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004364:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f7fe fc47 	bl	8002bfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004370:	e038      	b.n	80043e4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a29      	ldr	r2, [pc, #164]	@ (800441c <HAL_ADC_ConfigChannel+0xa5c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d133      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0xa24>
 800437c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004380:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d12d      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1d      	ldr	r2, [pc, #116]	@ (8004404 <HAL_ADC_ConfigChannel+0xa44>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d128      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <HAL_ADC_ConfigChannel+0xa3c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_ADC_ConfigChannel+0x9e6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a17      	ldr	r2, [pc, #92]	@ (8004400 <HAL_ADC_ConfigChannel+0xa40>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x9ea>
 80043a6:	4a19      	ldr	r2, [pc, #100]	@ (800440c <HAL_ADC_ConfigChannel+0xa4c>)
 80043a8:	e000      	b.n	80043ac <HAL_ADC_ConfigChannel+0x9ec>
 80043aa:	4a13      	ldr	r2, [pc, #76]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa38>)
 80043ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f7fe fc21 	bl	8002bfe <LL_ADC_SetCommonPathInternalCh>
 80043bc:	e012      	b.n	80043e4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80043d0:	e008      	b.n	80043e4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d6:	f043 0220 	orr.w	r2, r3, #32
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80043ec:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	37e4      	adds	r7, #228	@ 0xe4
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd90      	pop	{r4, r7, pc}
 80043f8:	58026300 	.word	0x58026300
 80043fc:	40022000 	.word	0x40022000
 8004400:	40022100 	.word	0x40022100
 8004404:	58026000 	.word	0x58026000
 8004408:	c7520000 	.word	0xc7520000
 800440c:	40022300 	.word	0x40022300
 8004410:	2400000c 	.word	0x2400000c
 8004414:	053e2d63 	.word	0x053e2d63
 8004418:	c3210000 	.word	0xc3210000
 800441c:	cb840000 	.word	0xcb840000

08004420 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fe7e 	bl	8003138 <LL_ADC_REG_IsConversionOngoing>
 800443c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fea0 	bl	8003188 <LL_ADC_INJ_IsConversionOngoing>
 8004448:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8098 	beq.w	8004588 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02a      	beq.n	80044bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7e5b      	ldrb	r3, [r3, #25]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d126      	bne.n	80044bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7e1b      	ldrb	r3, [r3, #24]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d122      	bne.n	80044bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004476:	2301      	movs	r3, #1
 8004478:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800447a:	e014      	b.n	80044a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4a45      	ldr	r2, [pc, #276]	@ (8004594 <ADC_ConversionStop+0x174>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d90d      	bls.n	80044a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	f043 0210 	orr.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e074      	b.n	800458a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	d1e3      	bne.n	800447c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d014      	beq.n	80044ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fe36 	bl	8003138 <LL_ADC_REG_IsConversionOngoing>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe fdf3 	bl	80030c2 <LL_ADC_IsDisableOngoing>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fe12 	bl	8003110 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d014      	beq.n	800451c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fe46 	bl	8003188 <LL_ADC_INJ_IsConversionOngoing>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fddb 	bl	80030c2 <LL_ADC_IsDisableOngoing>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d104      	bne.n	800451c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fe22 	bl	8003160 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d005      	beq.n	800452e <ADC_ConversionStop+0x10e>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d105      	bne.n	8004534 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004528:	230c      	movs	r3, #12
 800452a:	617b      	str	r3, [r7, #20]
        break;
 800452c:	e005      	b.n	800453a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800452e:	2308      	movs	r3, #8
 8004530:	617b      	str	r3, [r7, #20]
        break;
 8004532:	e002      	b.n	800453a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004534:	2304      	movs	r3, #4
 8004536:	617b      	str	r3, [r7, #20]
        break;
 8004538:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800453a:	f7fe fb41 	bl	8002bc0 <HAL_GetTick>
 800453e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004540:	e01b      	b.n	800457a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004542:	f7fe fb3d 	bl	8002bc0 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b05      	cmp	r3, #5
 800454e:	d914      	bls.n	800457a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004562:	f043 0210 	orr.w	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e007      	b.n	800458a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1dc      	bne.n	8004542 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	000cdbff 	.word	0x000cdbff

08004598 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe fd79 	bl	800309c <LL_ADC_IsEnabled>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d16e      	bne.n	800468e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	4b38      	ldr	r3, [pc, #224]	@ (8004698 <ADC_Enable+0x100>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c2:	f043 0210 	orr.w	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e05a      	b.n	8004690 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe fd34 	bl	800304c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045e4:	f7fe faec 	bl	8002bc0 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2b      	ldr	r2, [pc, #172]	@ (800469c <ADC_Enable+0x104>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <ADC_Enable+0x66>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a29      	ldr	r2, [pc, #164]	@ (80046a0 <ADC_Enable+0x108>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <ADC_Enable+0x6a>
 80045fe:	4b29      	ldr	r3, [pc, #164]	@ (80046a4 <ADC_Enable+0x10c>)
 8004600:	e000      	b.n	8004604 <ADC_Enable+0x6c>
 8004602:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <ADC_Enable+0x110>)
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe fcb7 	bl	8002f78 <LL_ADC_GetMultimode>
 800460a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a23      	ldr	r2, [pc, #140]	@ (80046a0 <ADC_Enable+0x108>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d002      	beq.n	800461c <ADC_Enable+0x84>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	e000      	b.n	800461e <ADC_Enable+0x86>
 800461c:	4b1f      	ldr	r3, [pc, #124]	@ (800469c <ADC_Enable+0x104>)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	4293      	cmp	r3, r2
 8004624:	d02c      	beq.n	8004680 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d130      	bne.n	800468e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800462c:	e028      	b.n	8004680 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fd32 	bl	800309c <LL_ADC_IsEnabled>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fd02 	bl	800304c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004648:	f7fe faba 	bl	8002bc0 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d914      	bls.n	8004680 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d00d      	beq.n	8004680 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004668:	f043 0210 	orr.w	r2, r3, #16
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004674:	f043 0201 	orr.w	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e007      	b.n	8004690 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d1cf      	bne.n	800462e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	8000003f 	.word	0x8000003f
 800469c:	40022000 	.word	0x40022000
 80046a0:	40022100 	.word	0x40022100
 80046a4:	40022300 	.word	0x40022300
 80046a8:	58026300 	.word	0x58026300

080046ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe fd02 	bl	80030c2 <LL_ADC_IsDisableOngoing>
 80046be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fce9 	bl	800309c <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d047      	beq.n	8004760 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d144      	bne.n	8004760 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030d 	and.w	r3, r3, #13
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10c      	bne.n	80046fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fcc3 	bl	8003074 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2203      	movs	r2, #3
 80046f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046f6:	f7fe fa63 	bl	8002bc0 <HAL_GetTick>
 80046fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046fc:	e029      	b.n	8004752 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004702:	f043 0210 	orr.w	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800470e:	f043 0201 	orr.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e023      	b.n	8004762 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800471a:	f7fe fa51 	bl	8002bc0 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d914      	bls.n	8004752 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473a:	f043 0210 	orr.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004746:	f043 0201 	orr.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e007      	b.n	8004762 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1dc      	bne.n	800471a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6c      	ldr	r2, [pc, #432]	@ (800492c <ADC_ConfigureBoostMode+0x1c0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <ADC_ConfigureBoostMode+0x1c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6b      	ldr	r2, [pc, #428]	@ (8004930 <ADC_ConfigureBoostMode+0x1c4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d109      	bne.n	800479c <ADC_ConfigureBoostMode+0x30>
 8004788:	4b6a      	ldr	r3, [pc, #424]	@ (8004934 <ADC_ConfigureBoostMode+0x1c8>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e008      	b.n	80047ae <ADC_ConfigureBoostMode+0x42>
 800479c:	4b66      	ldr	r3, [pc, #408]	@ (8004938 <ADC_ConfigureBoostMode+0x1cc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01c      	beq.n	80047ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80047b2:	f002 fdbb 	bl	800732c <HAL_RCC_GetHCLKFreq>
 80047b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047c0:	d010      	beq.n	80047e4 <ADC_ConfigureBoostMode+0x78>
 80047c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047c6:	d873      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x144>
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047cc:	d002      	beq.n	80047d4 <ADC_ConfigureBoostMode+0x68>
 80047ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047d2:	d16d      	bne.n	80048b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	60fb      	str	r3, [r7, #12]
        break;
 80047e2:	e068      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	60fb      	str	r3, [r7, #12]
        break;
 80047ea:	e064      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80047ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80047f0:	f04f 0100 	mov.w	r1, #0
 80047f4:	f003 ff96 	bl	8008724 <HAL_RCCEx_GetPeriphCLKFreq>
 80047f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004802:	d051      	beq.n	80048a8 <ADC_ConfigureBoostMode+0x13c>
 8004804:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004808:	d854      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 800480a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800480e:	d047      	beq.n	80048a0 <ADC_ConfigureBoostMode+0x134>
 8004810:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004814:	d84e      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 8004816:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800481a:	d03d      	beq.n	8004898 <ADC_ConfigureBoostMode+0x12c>
 800481c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004820:	d848      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 8004822:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004826:	d033      	beq.n	8004890 <ADC_ConfigureBoostMode+0x124>
 8004828:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800482c:	d842      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 800482e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004832:	d029      	beq.n	8004888 <ADC_ConfigureBoostMode+0x11c>
 8004834:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004838:	d83c      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 800483a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800483e:	d01a      	beq.n	8004876 <ADC_ConfigureBoostMode+0x10a>
 8004840:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004844:	d836      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 8004846:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800484a:	d014      	beq.n	8004876 <ADC_ConfigureBoostMode+0x10a>
 800484c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004850:	d830      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004856:	d00e      	beq.n	8004876 <ADC_ConfigureBoostMode+0x10a>
 8004858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800485c:	d82a      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 800485e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004862:	d008      	beq.n	8004876 <ADC_ConfigureBoostMode+0x10a>
 8004864:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004868:	d824      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x148>
 800486a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800486e:	d002      	beq.n	8004876 <ADC_ConfigureBoostMode+0x10a>
 8004870:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004874:	d11e      	bne.n	80048b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	0c9b      	lsrs	r3, r3, #18
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	60fb      	str	r3, [r7, #12]
        break;
 8004886:	e016      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	60fb      	str	r3, [r7, #12]
        break;
 800488e:	e012      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	60fb      	str	r3, [r7, #12]
        break;
 8004896:	e00e      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	099b      	lsrs	r3, r3, #6
 800489c:	60fb      	str	r3, [r7, #12]
        break;
 800489e:	e00a      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	09db      	lsrs	r3, r3, #7
 80048a4:	60fb      	str	r3, [r7, #12]
        break;
 80048a6:	e006      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	60fb      	str	r3, [r7, #12]
        break;
 80048ae:	e002      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80048b0:	bf00      	nop
 80048b2:	e000      	b.n	80048b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80048b4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a1f      	ldr	r2, [pc, #124]	@ (800493c <ADC_ConfigureBoostMode+0x1d0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d808      	bhi.n	80048d6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80048d4:	e025      	b.n	8004922 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4a19      	ldr	r2, [pc, #100]	@ (8004940 <ADC_ConfigureBoostMode+0x1d4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d80a      	bhi.n	80048f4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048f0:	609a      	str	r2, [r3, #8]
}
 80048f2:	e016      	b.n	8004922 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <ADC_ConfigureBoostMode+0x1d8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d80a      	bhi.n	8004912 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	e007      	b.n	8004922 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004920:	609a      	str	r2, [r3, #8]
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40022000 	.word	0x40022000
 8004930:	40022100 	.word	0x40022100
 8004934:	40022300 	.word	0x40022300
 8004938:	58026300 	.word	0x58026300
 800493c:	005f5e10 	.word	0x005f5e10
 8004940:	00bebc20 	.word	0x00bebc20
 8004944:	017d7840 	.word	0x017d7840

08004948 <LL_ADC_IsEnabled>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <LL_ADC_IsEnabled+0x18>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <LL_ADC_IsEnabled+0x1a>
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_ADC_REG_IsConversionOngoing>:
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d101      	bne.n	8004986 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b0a3      	sub	sp, #140	@ 0x8c
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0c1      	b.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80049be:	2300      	movs	r3, #0
 80049c0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d102      	bne.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e001      	b.n	80049d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0a0      	b.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff ffb9 	bl	800496e <LL_ADC_REG_IsConversionOngoing>
 80049fc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff ffb2 	bl	800496e <LL_ADC_REG_IsConversionOngoing>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 8081 	bne.w	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d17c      	bne.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a48      	ldr	r2, [pc, #288]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a46      	ldr	r2, [pc, #280]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d101      	bne.n	8004a32 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a2e:	4b46      	ldr	r3, [pc, #280]	@ (8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a30:	e000      	b.n	8004a34 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004a32:	4b46      	ldr	r3, [pc, #280]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a34:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d039      	beq.n	8004ab2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a3a      	ldr	r2, [pc, #232]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a39      	ldr	r2, [pc, #228]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10e      	bne.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a64:	4836      	ldr	r0, [pc, #216]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a66:	f7ff ff6f 	bl	8004948 <LL_ADC_IsEnabled>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	4835      	ldr	r0, [pc, #212]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a6e:	f7ff ff6b 	bl	8004948 <LL_ADC_IsEnabled>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4323      	orrs	r3, r4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf0c      	ite	eq
 8004a7a:	2301      	moveq	r3, #1
 8004a7c:	2300      	movne	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	e008      	b.n	8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a82:	4833      	ldr	r0, [pc, #204]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a84:	f7ff ff60 	bl	8004948 <LL_ADC_IsEnabled>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d047      	beq.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	6811      	ldr	r1, [r2, #0]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	6892      	ldr	r2, [r2, #8]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ab0:	e03a      	b.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004aba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004abc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d10e      	bne.n	8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004ad2:	481b      	ldr	r0, [pc, #108]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ad4:	f7ff ff38 	bl	8004948 <LL_ADC_IsEnabled>
 8004ad8:	4604      	mov	r4, r0
 8004ada:	481a      	ldr	r0, [pc, #104]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004adc:	f7ff ff34 	bl	8004948 <LL_ADC_IsEnabled>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4323      	orrs	r3, r4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e008      	b.n	8004b02 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004af0:	4817      	ldr	r0, [pc, #92]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004af2:	f7ff ff29 	bl	8004948 <LL_ADC_IsEnabled>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d010      	beq.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	4b12      	ldr	r3, [pc, #72]	@ (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b10:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b12:	e009      	b.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004b26:	e000      	b.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b32:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	378c      	adds	r7, #140	@ 0x8c
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd90      	pop	{r4, r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40022000 	.word	0x40022000
 8004b44:	40022100 	.word	0x40022100
 8004b48:	40022300 	.word	0x40022300
 8004b4c:	58026300 	.word	0x58026300
 8004b50:	58026000 	.word	0x58026000
 8004b54:	fffff0e0 	.word	0xfffff0e0

08004b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b68:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <__NVIC_SetPriorityGrouping+0x40>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b80:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b86:	4a04      	ldr	r2, [pc, #16]	@ (8004b98 <__NVIC_SetPriorityGrouping+0x40>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	60d3      	str	r3, [r2, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00
 8004b9c:	05fa0000 	.word	0x05fa0000

08004ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	f003 0307 	and.w	r3, r3, #7
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db0b      	blt.n	8004be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	4907      	ldr	r1, [pc, #28]	@ (8004bf4 <__NVIC_EnableIRQ+0x38>)
 8004bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2001      	movs	r0, #1
 8004bde:	fa00 f202 	lsl.w	r2, r0, r2
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	@ (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	@ (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	@ 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	@ 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cc4:	d301      	bcc.n	8004cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cca:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <SysTick_Config+0x40>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f7ff ff8e 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <SysTick_Config+0x40>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <SysTick_Config+0x40>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff29 	bl	8004b58 <__NVIC_SetPriorityGrouping>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1c:	f7ff ff40 	bl	8004ba0 <__NVIC_GetPriorityGrouping>
 8004d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f7ff ff90 	bl	8004c4c <NVIC_EncodePriority>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff5f 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4603      	mov	r3, r0
 8004d4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff33 	bl	8004bbc <__NVIC_EnableIRQ>
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ffa4 	bl	8004cb4 <SysTick_Config>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b098      	sub	sp, #96	@ 0x60
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004d80:	4a84      	ldr	r2, [pc, #528]	@ (8004f94 <HAL_FDCAN_Init+0x21c>)
 8004d82:	f107 030c 	add.w	r3, r7, #12
 8004d86:	4611      	mov	r1, r2
 8004d88:	224c      	movs	r2, #76	@ 0x4c
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f006 f9e8 	bl	800b160 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e1c6      	b.n	8005128 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f98 <HAL_FDCAN_Init+0x220>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d106      	bne.n	8004db2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004dac:	461a      	mov	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fd fc24 	bl	8002614 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0210 	bic.w	r2, r2, #16
 8004dda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ddc:	f7fd fef0 	bl	8002bc0 <HAL_GetTick>
 8004de0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004de2:	e014      	b.n	8004e0e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004de4:	f7fd feec 	bl	8002bc0 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b0a      	cmp	r3, #10
 8004df0:	d90d      	bls.n	8004e0e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004df8:	f043 0201 	orr.w	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2203      	movs	r2, #3
 8004e06:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e18c      	b.n	8005128 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d0e3      	beq.n	8004de4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e2c:	f7fd fec8 	bl	8002bc0 <HAL_GetTick>
 8004e30:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e32:	e014      	b.n	8004e5e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e34:	f7fd fec4 	bl	8002bc0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b0a      	cmp	r3, #10
 8004e40:	d90d      	bls.n	8004e5e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e48:	f043 0201 	orr.w	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2203      	movs	r2, #3
 8004e56:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e164      	b.n	8005128 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0e3      	beq.n	8004e34 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0202 	orr.w	r2, r2, #2
 8004e7a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	7c1b      	ldrb	r3, [r3, #16]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d108      	bne.n	8004e96 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e92:	619a      	str	r2, [r3, #24]
 8004e94:	e007      	b.n	8004ea6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ea4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7c5b      	ldrb	r3, [r3, #17]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d108      	bne.n	8004ec0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ebc:	619a      	str	r2, [r3, #24]
 8004ebe:	e007      	b.n	8004ed0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ece:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	7c9b      	ldrb	r3, [r3, #18]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d108      	bne.n	8004eea <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ee6:	619a      	str	r2, [r3, #24]
 8004ee8:	e007      	b.n	8004efa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ef8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004f1e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0210 	bic.w	r2, r2, #16
 8004f2e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0204 	orr.w	r2, r2, #4
 8004f46:	619a      	str	r2, [r3, #24]
 8004f48:	e030      	b.n	8004fac <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d02c      	beq.n	8004fac <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d020      	beq.n	8004f9c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f68:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0210 	orr.w	r2, r2, #16
 8004f78:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d114      	bne.n	8004fac <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0220 	orr.w	r2, r2, #32
 8004f90:	619a      	str	r2, [r3, #24]
 8004f92:	e00b      	b.n	8004fac <HAL_FDCAN_Init+0x234>
 8004f94:	0800bcb0 	.word	0x0800bcb0
 8004f98:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0220 	orr.w	r2, r2, #32
 8004faa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fbc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004fc4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004fd4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fd6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe0:	d115      	bne.n	800500e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	3b01      	subs	r3, #1
 8004fee:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ff0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ffa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	3b01      	subs	r3, #1
 8005004:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800500a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800500c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005034:	4413      	add	r3, r2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d011      	beq.n	800505e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005042:	f023 0107 	bic.w	r1, r3, #7
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	3360      	adds	r3, #96	@ 0x60
 800504e:	443b      	add	r3, r7
 8005050:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d011      	beq.n	800508a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800506e:	f023 0107 	bic.w	r1, r3, #7
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	3360      	adds	r3, #96	@ 0x60
 800507a:	443b      	add	r3, r7
 800507c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800508e:	2b00      	cmp	r3, #0
 8005090:	d012      	beq.n	80050b8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800509a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	3360      	adds	r3, #96	@ 0x60
 80050a6:	443b      	add	r3, r7
 80050a8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80050ac:	011a      	lsls	r2, r3, #4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80050c8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	3360      	adds	r3, #96	@ 0x60
 80050d4:	443b      	add	r3, r7
 80050d6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a11      	ldr	r2, [pc, #68]	@ (8005130 <HAL_FDCAN_Init+0x3b8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d107      	bne.n	8005100 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f022 0203 	bic.w	r2, r2, #3
 80050fe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fde5 	bl	8005ce8 <FDCAN_CalcultateRamBlockAddresses>
 800511e:	4603      	mov	r3, r0
 8005120:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005124:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005128:	4618      	mov	r0, r3
 800512a:	3760      	adds	r7, #96	@ 0x60
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	4000a000 	.word	0x4000a000

08005134 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005144:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d002      	beq.n	8005152 <HAL_FDCAN_ConfigFilter+0x1e>
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d157      	bne.n	8005202 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d12b      	bne.n	80051b2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b07      	cmp	r3, #7
 8005160:	d10d      	bne.n	800517e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800516e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005174:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005176:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e00e      	b.n	800519c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800518a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005192:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	e025      	b.n	80051fe <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	075a      	lsls	r2, r3, #29
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b07      	cmp	r3, #7
 80051c6:	d103      	bne.n	80051d0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e006      	b.n	80051de <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	079a      	lsls	r2, r3, #30
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	3304      	adds	r3, #4
 80051f6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e008      	b.n	8005214 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005208:	f043 0202 	orr.w	r2, r3, #2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d111      	bne.n	8005258 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	e008      	b.n	800526a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800525e:	f043 0204 	orr.w	r2, r3, #4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b086      	sub	sp, #24
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d141      	bne.n	8005312 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005296:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e038      	b.n	8005324 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80052ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e026      	b.n	8005324 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fe81 	bl	8005ff4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2101      	movs	r1, #1
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	fa01 f202 	lsl.w	r2, r1, r2
 80052fe:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005302:	2201      	movs	r2, #1
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	409a      	lsls	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e008      	b.n	8005324 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005318:	f043 0208 	orr.w	r2, r3, #8
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800532c:	b480      	push	{r7}
 800532e:	b08b      	sub	sp, #44	@ 0x2c
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005344:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005346:	7efb      	ldrb	r3, [r7, #27]
 8005348:	2b02      	cmp	r3, #2
 800534a:	f040 8149 	bne.w	80055e0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b40      	cmp	r3, #64	@ 0x40
 8005352:	d14c      	bne.n	80053ee <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800535c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e13c      	b.n	80055f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800538e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e12a      	b.n	80055f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d10a      	bne.n	80053c4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053b6:	0fdb      	lsrs	r3, r3, #31
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80053c0:	2301      	movs	r3, #1
 80053c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053cc:	0a1b      	lsrs	r3, r3, #8
 80053ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e0:	69f9      	ldr	r1, [r7, #28]
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ec:	e068      	b.n	80054c0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b41      	cmp	r3, #65	@ 0x41
 80053f2:	d14c      	bne.n	800548e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0ec      	b.n	80055f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800542e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0da      	b.n	80055f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005444:	0e1b      	lsrs	r3, r3, #24
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10a      	bne.n	8005464 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005456:	0fdb      	lsrs	r3, r3, #31
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005460:	2301      	movs	r3, #1
 8005462:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800546c:	0a1b      	lsrs	r3, r3, #8
 800546e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005480:	69f9      	ldr	r1, [r7, #28]
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
 800548c:	e018      	b.n	80054c0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	d309      	bcc.n	80054ac <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0a2      	b.n	80055f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d107      	bne.n	80054e4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	0c9b      	lsrs	r3, r3, #18
 80054da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e005      	b.n	80054f0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	3304      	adds	r3, #4
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 020f 	and.w	r2, r3, #15
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	0e1b      	lsrs	r3, r3, #24
 8005544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	0fda      	lsrs	r2, r3, #31
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	3304      	adds	r3, #4
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005560:	2300      	movs	r3, #0
 8005562:	623b      	str	r3, [r7, #32]
 8005564:	e00a      	b.n	800557c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	441a      	add	r2, r3
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	440b      	add	r3, r1
 8005572:	7812      	ldrb	r2, [r2, #0]
 8005574:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	3301      	adds	r3, #1
 800557a:	623b      	str	r3, [r7, #32]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005582:	5cd3      	ldrb	r3, [r2, r3]
 8005584:	461a      	mov	r2, r3
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	4293      	cmp	r3, r2
 800558a:	d3ec      	bcc.n	8005566 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b40      	cmp	r3, #64	@ 0x40
 8005590:	d105      	bne.n	800559e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800559c:	e01e      	b.n	80055dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b41      	cmp	r3, #65	@ 0x41
 80055a2:	d105      	bne.n	80055b0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80055ae:	e015      	b.n	80055dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b1f      	cmp	r3, #31
 80055b4:	d808      	bhi.n	80055c8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2101      	movs	r1, #1
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	fa01 f202 	lsl.w	r2, r1, r2
 80055c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80055c6:	e009      	b.n	80055dc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2101      	movs	r1, #1
 80055d4:	fa01 f202 	lsl.w	r2, r1, r2
 80055d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	e008      	b.n	80055f2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055e6:	f043 0208 	orr.w	r2, r3, #8
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
  }
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	372c      	adds	r7, #44	@ 0x2c
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	0800bd0c 	.word	0x0800bd0c

08005604 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005616:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d002      	beq.n	8005624 <HAL_FDCAN_ActivateNotification+0x20>
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d155      	bne.n	80056d0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d108      	bne.n	8005644 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005642:	e014      	b.n	800566e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4013      	ands	r3, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	d108      	bne.n	8005666 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0202 	orr.w	r2, r2, #2
 8005662:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005664:	e003      	b.n	800566e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2203      	movs	r2, #3
 800566c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	430a      	orrs	r2, r1
 8005688:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4b0f      	ldr	r3, [pc, #60]	@ (80056f0 <HAL_FDCAN_ActivateNotification+0xec>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	430b      	orrs	r3, r1
 80056bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80056be:	4b0d      	ldr	r3, [pc, #52]	@ (80056f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	0f9b      	lsrs	r3, r3, #30
 80056c6:	490b      	ldr	r1, [pc, #44]	@ (80056f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e008      	b.n	80056e2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056d6:	f043 0202 	orr.w	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
  }
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	3fcfffff 	.word	0x3fcfffff
 80056f4:	4000a800 	.word	0x4000a800

080056f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b096      	sub	sp, #88	@ 0x58
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005700:	4b95      	ldr	r3, [pc, #596]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	079b      	lsls	r3, r3, #30
 8005706:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005708:	4b93      	ldr	r3, [pc, #588]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	079b      	lsls	r3, r3, #30
 800570e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005710:	4013      	ands	r3, r2
 8005712:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800571a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800571e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005726:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005728:	4013      	ands	r3, r2
 800572a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005740:	4013      	ands	r3, r2
 8005742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800574a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800574e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005758:	4013      	ands	r3, r2
 800575a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005762:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005766:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005770:	4013      	ands	r3, r2
 8005772:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800577e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005786:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005788:	4013      	ands	r3, r2
 800578a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800579a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800579c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00f      	beq.n	80057c6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80057ba:	4b67      	ldr	r3, [pc, #412]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 80057bc:	2200      	movs	r2, #0
 80057be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fa44 	bl	8005c4e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80057c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01c      	beq.n	800580a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80057d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80057e2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ee:	4013      	ands	r3, r2
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80057fc:	4b56      	ldr	r3, [pc, #344]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 80057fe:	2200      	movs	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005802:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f9f9 	bl	8005bfc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800580a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00d      	beq.n	800582c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005816:	4b51      	ldr	r3, [pc, #324]	@ (800595c <HAL_FDCAN_IRQHandler+0x264>)
 8005818:	400b      	ands	r3, r1
 800581a:	6513      	str	r3, [r2, #80]	@ 0x50
 800581c:	4a4e      	ldr	r2, [pc, #312]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 800581e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005820:	0f9b      	lsrs	r3, r3, #30
 8005822:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005824:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9b2 	bl	8005b90 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800582c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005838:	4b48      	ldr	r3, [pc, #288]	@ (800595c <HAL_FDCAN_IRQHandler+0x264>)
 800583a:	400b      	ands	r3, r1
 800583c:	6513      	str	r3, [r2, #80]	@ 0x50
 800583e:	4a46      	ldr	r2, [pc, #280]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 8005840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005842:	0f9b      	lsrs	r3, r3, #30
 8005844:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005846:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f9ac 	bl	8005ba6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800584e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800585a:	4b40      	ldr	r3, [pc, #256]	@ (800595c <HAL_FDCAN_IRQHandler+0x264>)
 800585c:	400b      	ands	r3, r1
 800585e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005860:	4a3d      	ldr	r2, [pc, #244]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 8005862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005864:	0f9b      	lsrs	r3, r3, #30
 8005866:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005868:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fc f934 	bl	8001ad8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800587c:	4b37      	ldr	r3, [pc, #220]	@ (800595c <HAL_FDCAN_IRQHandler+0x264>)
 800587e:	400b      	ands	r3, r1
 8005880:	6513      	str	r3, [r2, #80]	@ 0x50
 8005882:	4a35      	ldr	r2, [pc, #212]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 8005884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005886:	0f9b      	lsrs	r3, r3, #30
 8005888:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800588a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f995 	bl	8005bbc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00f      	beq.n	80058bc <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80058b0:	4b29      	ldr	r3, [pc, #164]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f98b 	bl	8005bd2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80058bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01c      	beq.n	8005900 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d017      	beq.n	8005900 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058d8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e4:	4013      	ands	r3, r2
 80058e6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80058f2:	4b19      	ldr	r3, [pc, #100]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80058f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f973 	bl	8005be6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00f      	beq.n	800592a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800591c:	651a      	str	r2, [r3, #80]	@ 0x50
 800591e:	4b0e      	ldr	r3, [pc, #56]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 8005920:	2200      	movs	r2, #0
 8005922:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f974 	bl	8005c12 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800592a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d015      	beq.n	8005960 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d010      	beq.n	8005960 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005946:	651a      	str	r2, [r3, #80]	@ 0x50
 8005948:	4b03      	ldr	r3, [pc, #12]	@ (8005958 <HAL_FDCAN_IRQHandler+0x260>)
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f969 	bl	8005c26 <HAL_FDCAN_TimestampWraparoundCallback>
 8005954:	e004      	b.n	8005960 <HAL_FDCAN_IRQHandler+0x268>
 8005956:	bf00      	nop
 8005958:	4000a800 	.word	0x4000a800
 800595c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00f      	beq.n	800598a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800596a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800597c:	651a      	str	r2, [r3, #80]	@ 0x50
 800597e:	4b81      	ldr	r3, [pc, #516]	@ (8005b84 <HAL_FDCAN_IRQHandler+0x48c>)
 8005980:	2200      	movs	r2, #0
 8005982:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f958 	bl	8005c3a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800598a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800598c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d014      	beq.n	80059be <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00f      	beq.n	80059be <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80059a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80059a8:	4b76      	ldr	r3, [pc, #472]	@ (8005b84 <HAL_FDCAN_IRQHandler+0x48c>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80059be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00d      	beq.n	80059e0 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005b88 <HAL_FDCAN_IRQHandler+0x490>)
 80059cc:	400b      	ands	r3, r1
 80059ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80059d0:	4a6c      	ldr	r2, [pc, #432]	@ (8005b84 <HAL_FDCAN_IRQHandler+0x48c>)
 80059d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d4:	0f9b      	lsrs	r3, r3, #30
 80059d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80059d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f94b 	bl	8005c76 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80059e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d011      	beq.n	8005a0a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059ec:	4b66      	ldr	r3, [pc, #408]	@ (8005b88 <HAL_FDCAN_IRQHandler+0x490>)
 80059ee:	400b      	ands	r3, r1
 80059f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80059f2:	4a64      	ldr	r2, [pc, #400]	@ (8005b84 <HAL_FDCAN_IRQHandler+0x48c>)
 80059f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059f6:	0f9b      	lsrs	r3, r3, #30
 80059f8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8005b8c <HAL_FDCAN_IRQHandler+0x494>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	f040 80aa 	bne.w	8005b6a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80a2 	beq.w	8005b6a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a48:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a52:	4013      	ands	r3, r2
 8005a54:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005a78:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	4013      	ands	r3, r2
 8005a84:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005a90:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8e4 	bl	8005c8c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ad0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8e4 	bl	8005ca2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d019      	beq.n	8005b18 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d014      	beq.n	8005b18 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b04:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2240      	movs	r2, #64	@ 0x40
 8005b0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	6939      	ldr	r1, [r7, #16]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f8d0 	bl	8005cb8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b24:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005b26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f8d1 	bl	8005cd0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	6a3a      	ldr	r2, [r7, #32]
 8005b3a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00b      	beq.n	8005b6a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f874 	bl	8005c62 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	3758      	adds	r7, #88	@ 0x58
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	4000a800 	.word	0x4000a800
 8005b88:	3fcfffff 	.word	0x3fcfffff
 8005b8c:	4000a000 	.word	0x4000a000

08005b90 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005cfe:	4ba7      	ldr	r3, [pc, #668]	@ (8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0091      	lsls	r1, r2, #2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d18:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d20:	041a      	lsls	r2, r3, #16
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4413      	add	r3, r2
 8005d34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d3e:	4b97      	ldr	r3, [pc, #604]	@ (8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	0091      	lsls	r1, r2, #2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d58:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d60:	041a      	lsls	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	4413      	add	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005d80:	4b86      	ldr	r3, [pc, #536]	@ (8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	0091      	lsls	r1, r2, #2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d9a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	041a      	lsls	r2, r3, #16
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005dc8:	4b74      	ldr	r3, [pc, #464]	@ (8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	0091      	lsls	r1, r2, #2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005de2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dea:	041a      	lsls	r2, r3, #16
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	4413      	add	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005e10:	4b62      	ldr	r3, [pc, #392]	@ (8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	0091      	lsls	r1, r2, #2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	4413      	add	r3, r2
 8005e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005e3c:	4b57      	ldr	r3, [pc, #348]	@ (8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	0091      	lsls	r1, r2, #2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e56:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5e:	041a      	lsls	r2, r3, #16
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4413      	add	r3, r2
 8005e74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005e7e:	4b47      	ldr	r3, [pc, #284]	@ (8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	0091      	lsls	r1, r2, #2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e98:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea0:	041a      	lsls	r2, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005eb4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ebc:	061a      	lsls	r2, r3, #24
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ecc:	4b34      	ldr	r3, [pc, #208]	@ (8005fa0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005ece:	4413      	add	r3, r2
 8005ed0:	009a      	lsls	r2, r3, #2
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	441a      	add	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	441a      	add	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005f08:	441a      	add	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005f32:	fb01 f303 	mul.w	r3, r1, r3
 8005f36:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005f38:	441a      	add	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	441a      	add	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005f84:	441a      	add	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f92:	4a04      	ldr	r2, [pc, #16]	@ (8005fa4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d915      	bls.n	8005fc4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005f98:	e006      	b.n	8005fa8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005f9a:	bf00      	nop
 8005f9c:	ffff0003 	.word	0xffff0003
 8005fa0:	10002b00 	.word	0x10002b00
 8005fa4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2203      	movs	r2, #3
 8005fbc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e010      	b.n	8005fe6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e005      	b.n	8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d3f3      	bcc.n	8005fcc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop

08005ff4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b089      	sub	sp, #36	@ 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006012:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800601a:	4313      	orrs	r3, r2
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	e00a      	b.n	8006036 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006028:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800602e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006030:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006034:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006040:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006046:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800604c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	3304      	adds	r3, #4
 8006078:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	3304      	adds	r3, #4
 8006084:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e020      	b.n	80060ce <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3303      	adds	r3, #3
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	4413      	add	r3, r2
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3302      	adds	r3, #2
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	440b      	add	r3, r1
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80060a4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3301      	adds	r3, #1
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	440b      	add	r3, r1
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80060b2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	440a      	add	r2, r1
 80060ba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80060bc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	3304      	adds	r3, #4
 80060c6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	3304      	adds	r3, #4
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	4a06      	ldr	r2, [pc, #24]	@ (80060ec <FDCAN_CopyMessageToRAM+0xf8>)
 80060d4:	5cd3      	ldrb	r3, [r2, r3]
 80060d6:	461a      	mov	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4293      	cmp	r3, r2
 80060dc:	d3d6      	bcc.n	800608c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	3724      	adds	r7, #36	@ 0x24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	0800bd0c 	.word	0x0800bd0c

080060f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b089      	sub	sp, #36	@ 0x24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80060fe:	4b86      	ldr	r3, [pc, #536]	@ (8006318 <HAL_GPIO_Init+0x228>)
 8006100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006102:	e18c      	b.n	800641e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	2101      	movs	r1, #1
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	4013      	ands	r3, r2
 8006112:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 817e 	beq.w	8006418 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d005      	beq.n	8006134 <HAL_GPIO_Init+0x44>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d130      	bne.n	8006196 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	2203      	movs	r2, #3
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	43db      	mvns	r3, r3
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	4013      	ands	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	4313      	orrs	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800616a:	2201      	movs	r2, #1
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4013      	ands	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	f003 0201 	and.w	r2, r3, #1
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d017      	beq.n	80061d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	2203      	movs	r2, #3
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d123      	bne.n	8006226 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	08da      	lsrs	r2, r3, #3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3208      	adds	r2, #8
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	220f      	movs	r2, #15
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4313      	orrs	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	08da      	lsrs	r2, r3, #3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3208      	adds	r2, #8
 8006220:	69b9      	ldr	r1, [r7, #24]
 8006222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	2203      	movs	r2, #3
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	43db      	mvns	r3, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4013      	ands	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 0203 	and.w	r2, r3, #3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80d8 	beq.w	8006418 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006268:	4b2c      	ldr	r3, [pc, #176]	@ (800631c <HAL_GPIO_Init+0x22c>)
 800626a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800626e:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <HAL_GPIO_Init+0x22c>)
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006278:	4b28      	ldr	r3, [pc, #160]	@ (800631c <HAL_GPIO_Init+0x22c>)
 800627a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006286:	4a26      	ldr	r2, [pc, #152]	@ (8006320 <HAL_GPIO_Init+0x230>)
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	089b      	lsrs	r3, r3, #2
 800628c:	3302      	adds	r3, #2
 800628e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	220f      	movs	r2, #15
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006324 <HAL_GPIO_Init+0x234>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d04a      	beq.n	8006348 <HAL_GPIO_Init+0x258>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006328 <HAL_GPIO_Init+0x238>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d02b      	beq.n	8006312 <HAL_GPIO_Init+0x222>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a1b      	ldr	r2, [pc, #108]	@ (800632c <HAL_GPIO_Init+0x23c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d025      	beq.n	800630e <HAL_GPIO_Init+0x21e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006330 <HAL_GPIO_Init+0x240>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01f      	beq.n	800630a <HAL_GPIO_Init+0x21a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a19      	ldr	r2, [pc, #100]	@ (8006334 <HAL_GPIO_Init+0x244>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d019      	beq.n	8006306 <HAL_GPIO_Init+0x216>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a18      	ldr	r2, [pc, #96]	@ (8006338 <HAL_GPIO_Init+0x248>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_GPIO_Init+0x212>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a17      	ldr	r2, [pc, #92]	@ (800633c <HAL_GPIO_Init+0x24c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00d      	beq.n	80062fe <HAL_GPIO_Init+0x20e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a16      	ldr	r2, [pc, #88]	@ (8006340 <HAL_GPIO_Init+0x250>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <HAL_GPIO_Init+0x20a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <HAL_GPIO_Init+0x254>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <HAL_GPIO_Init+0x206>
 80062f2:	2309      	movs	r3, #9
 80062f4:	e029      	b.n	800634a <HAL_GPIO_Init+0x25a>
 80062f6:	230a      	movs	r3, #10
 80062f8:	e027      	b.n	800634a <HAL_GPIO_Init+0x25a>
 80062fa:	2307      	movs	r3, #7
 80062fc:	e025      	b.n	800634a <HAL_GPIO_Init+0x25a>
 80062fe:	2306      	movs	r3, #6
 8006300:	e023      	b.n	800634a <HAL_GPIO_Init+0x25a>
 8006302:	2305      	movs	r3, #5
 8006304:	e021      	b.n	800634a <HAL_GPIO_Init+0x25a>
 8006306:	2304      	movs	r3, #4
 8006308:	e01f      	b.n	800634a <HAL_GPIO_Init+0x25a>
 800630a:	2303      	movs	r3, #3
 800630c:	e01d      	b.n	800634a <HAL_GPIO_Init+0x25a>
 800630e:	2302      	movs	r3, #2
 8006310:	e01b      	b.n	800634a <HAL_GPIO_Init+0x25a>
 8006312:	2301      	movs	r3, #1
 8006314:	e019      	b.n	800634a <HAL_GPIO_Init+0x25a>
 8006316:	bf00      	nop
 8006318:	58000080 	.word	0x58000080
 800631c:	58024400 	.word	0x58024400
 8006320:	58000400 	.word	0x58000400
 8006324:	58020000 	.word	0x58020000
 8006328:	58020400 	.word	0x58020400
 800632c:	58020800 	.word	0x58020800
 8006330:	58020c00 	.word	0x58020c00
 8006334:	58021000 	.word	0x58021000
 8006338:	58021400 	.word	0x58021400
 800633c:	58021800 	.word	0x58021800
 8006340:	58021c00 	.word	0x58021c00
 8006344:	58022400 	.word	0x58022400
 8006348:	2300      	movs	r3, #0
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	f002 0203 	and.w	r2, r2, #3
 8006350:	0092      	lsls	r2, r2, #2
 8006352:	4093      	lsls	r3, r2
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800635a:	4938      	ldr	r1, [pc, #224]	@ (800643c <HAL_GPIO_Init+0x34c>)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	089b      	lsrs	r3, r3, #2
 8006360:	3302      	adds	r3, #2
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	43db      	mvns	r3, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4013      	ands	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800638e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	4013      	ands	r3, r2
 80063a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80063bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	4013      	ands	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	43db      	mvns	r3, r3
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	4013      	ands	r3, r2
 80063fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	f47f ae6b 	bne.w	8006104 <HAL_GPIO_Init+0x14>
  }
}
 800642e:	bf00      	nop
 8006430:	bf00      	nop
 8006432:	3724      	adds	r7, #36	@ 0x24
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	58000400 	.word	0x58000400

08006440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	887b      	ldrh	r3, [r7, #2]
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
 800645c:	e001      	b.n	8006462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	807b      	strh	r3, [r7, #2]
 800647c:	4613      	mov	r3, r2
 800647e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006480:	787b      	ldrb	r3, [r7, #1]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006486:	887a      	ldrh	r2, [r7, #2]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800648c:	e003      	b.n	8006496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800648e:	887b      	ldrh	r3, [r7, #2]
 8006490:	041a      	lsls	r2, r3, #16
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	619a      	str	r2, [r3, #24]
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80064ac:	4b19      	ldr	r3, [pc, #100]	@ (8006514 <HAL_PWREx_ConfigSupply+0x70>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d00a      	beq.n	80064ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064b8:	4b16      	ldr	r3, [pc, #88]	@ (8006514 <HAL_PWREx_ConfigSupply+0x70>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d001      	beq.n	80064ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e01f      	b.n	800650a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e01d      	b.n	800650a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064ce:	4b11      	ldr	r3, [pc, #68]	@ (8006514 <HAL_PWREx_ConfigSupply+0x70>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f023 0207 	bic.w	r2, r3, #7
 80064d6:	490f      	ldr	r1, [pc, #60]	@ (8006514 <HAL_PWREx_ConfigSupply+0x70>)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064de:	f7fc fb6f 	bl	8002bc0 <HAL_GetTick>
 80064e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064e4:	e009      	b.n	80064fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064e6:	f7fc fb6b 	bl	8002bc0 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064f4:	d901      	bls.n	80064fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e007      	b.n	800650a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064fa:	4b06      	ldr	r3, [pc, #24]	@ (8006514 <HAL_PWREx_ConfigSupply+0x70>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006506:	d1ee      	bne.n	80064e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	58024800 	.word	0x58024800

08006518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08c      	sub	sp, #48	@ 0x30
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e3c8      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8087 	beq.w	8006646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006538:	4b88      	ldr	r3, [pc, #544]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006542:	4b86      	ldr	r3, [pc, #536]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006546:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	2b10      	cmp	r3, #16
 800654c:	d007      	beq.n	800655e <HAL_RCC_OscConfig+0x46>
 800654e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006550:	2b18      	cmp	r3, #24
 8006552:	d110      	bne.n	8006576 <HAL_RCC_OscConfig+0x5e>
 8006554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d10b      	bne.n	8006576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655e:	4b7f      	ldr	r3, [pc, #508]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d06c      	beq.n	8006644 <HAL_RCC_OscConfig+0x12c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d168      	bne.n	8006644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e3a2      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800657e:	d106      	bne.n	800658e <HAL_RCC_OscConfig+0x76>
 8006580:	4b76      	ldr	r3, [pc, #472]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a75      	ldr	r2, [pc, #468]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e02e      	b.n	80065ec <HAL_RCC_OscConfig+0xd4>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x98>
 8006596:	4b71      	ldr	r3, [pc, #452]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a70      	ldr	r2, [pc, #448]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 800659c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	4b6e      	ldr	r3, [pc, #440]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a6d      	ldr	r2, [pc, #436]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e01d      	b.n	80065ec <HAL_RCC_OscConfig+0xd4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065b8:	d10c      	bne.n	80065d4 <HAL_RCC_OscConfig+0xbc>
 80065ba:	4b68      	ldr	r3, [pc, #416]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a67      	ldr	r2, [pc, #412]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	4b65      	ldr	r3, [pc, #404]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a64      	ldr	r2, [pc, #400]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	e00b      	b.n	80065ec <HAL_RCC_OscConfig+0xd4>
 80065d4:	4b61      	ldr	r3, [pc, #388]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a60      	ldr	r2, [pc, #384]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4b5e      	ldr	r3, [pc, #376]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a5d      	ldr	r2, [pc, #372]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80065e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d013      	beq.n	800661c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fc fae4 	bl	8002bc0 <HAL_GetTick>
 80065f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065fc:	f7fc fae0 	bl	8002bc0 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b64      	cmp	r3, #100	@ 0x64
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e356      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800660e:	4b53      	ldr	r3, [pc, #332]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCC_OscConfig+0xe4>
 800661a:	e014      	b.n	8006646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fc fad0 	bl	8002bc0 <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006624:	f7fc facc 	bl	8002bc0 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b64      	cmp	r3, #100	@ 0x64
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e342      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006636:	4b49      	ldr	r3, [pc, #292]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0x10c>
 8006642:	e000      	b.n	8006646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 808c 	beq.w	800676c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006654:	4b41      	ldr	r3, [pc, #260]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800665c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800665e:	4b3f      	ldr	r3, [pc, #252]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006662:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <HAL_RCC_OscConfig+0x162>
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	2b18      	cmp	r3, #24
 800666e:	d137      	bne.n	80066e0 <HAL_RCC_OscConfig+0x1c8>
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d132      	bne.n	80066e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800667a:	4b38      	ldr	r3, [pc, #224]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_RCC_OscConfig+0x17a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e314      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006692:	4b32      	ldr	r3, [pc, #200]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f023 0219 	bic.w	r2, r3, #25
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	492f      	ldr	r1, [pc, #188]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fc fa8c 	bl	8002bc0 <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ac:	f7fc fa88 	bl	8002bc0 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e2fe      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066be:	4b27      	ldr	r3, [pc, #156]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ca:	4b24      	ldr	r3, [pc, #144]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	061b      	lsls	r3, r3, #24
 80066d8:	4920      	ldr	r1, [pc, #128]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066de:	e045      	b.n	800676c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d026      	beq.n	8006736 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066e8:	4b1c      	ldr	r3, [pc, #112]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f023 0219 	bic.w	r2, r3, #25
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4919      	ldr	r1, [pc, #100]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fc fa61 	bl	8002bc0 <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006702:	f7fc fa5d 	bl	8002bc0 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e2d3      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006714:	4b11      	ldr	r3, [pc, #68]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4b0e      	ldr	r3, [pc, #56]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	490b      	ldr	r1, [pc, #44]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006730:	4313      	orrs	r3, r2
 8006732:	604b      	str	r3, [r1, #4]
 8006734:	e01a      	b.n	800676c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006736:	4b09      	ldr	r3, [pc, #36]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a08      	ldr	r2, [pc, #32]	@ (800675c <HAL_RCC_OscConfig+0x244>)
 800673c:	f023 0301 	bic.w	r3, r3, #1
 8006740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006742:	f7fc fa3d 	bl	8002bc0 <HAL_GetTick>
 8006746:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006748:	e00a      	b.n	8006760 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800674a:	f7fc fa39 	bl	8002bc0 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d903      	bls.n	8006760 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e2af      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
 800675c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006760:	4b96      	ldr	r3, [pc, #600]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1ee      	bne.n	800674a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b00      	cmp	r3, #0
 8006776:	d06a      	beq.n	800684e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006778:	4b90      	ldr	r3, [pc, #576]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006780:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006782:	4b8e      	ldr	r3, [pc, #568]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006786:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b08      	cmp	r3, #8
 800678c:	d007      	beq.n	800679e <HAL_RCC_OscConfig+0x286>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b18      	cmp	r3, #24
 8006792:	d11b      	bne.n	80067cc <HAL_RCC_OscConfig+0x2b4>
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	2b01      	cmp	r3, #1
 800679c:	d116      	bne.n	80067cc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800679e:	4b87      	ldr	r3, [pc, #540]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_RCC_OscConfig+0x29e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	2b80      	cmp	r3, #128	@ 0x80
 80067b0:	d001      	beq.n	80067b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e282      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067b6:	4b81      	ldr	r3, [pc, #516]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	061b      	lsls	r3, r3, #24
 80067c4:	497d      	ldr	r1, [pc, #500]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067ca:	e040      	b.n	800684e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d023      	beq.n	800681c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80067d4:	4b79      	ldr	r3, [pc, #484]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a78      	ldr	r2, [pc, #480]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80067da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e0:	f7fc f9ee 	bl	8002bc0 <HAL_GetTick>
 80067e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067e8:	f7fc f9ea 	bl	8002bc0 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e260      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067fa:	4b70      	ldr	r3, [pc, #448]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f0      	beq.n	80067e8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006806:	4b6d      	ldr	r3, [pc, #436]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	061b      	lsls	r3, r3, #24
 8006814:	4969      	ldr	r1, [pc, #420]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006816:	4313      	orrs	r3, r2
 8006818:	60cb      	str	r3, [r1, #12]
 800681a:	e018      	b.n	800684e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800681c:	4b67      	ldr	r3, [pc, #412]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a66      	ldr	r2, [pc, #408]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006828:	f7fc f9ca 	bl	8002bc0 <HAL_GetTick>
 800682c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006830:	f7fc f9c6 	bl	8002bc0 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e23c      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006842:	4b5e      	ldr	r3, [pc, #376]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f0      	bne.n	8006830 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d036      	beq.n	80068c8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d019      	beq.n	8006896 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006862:	4b56      	ldr	r3, [pc, #344]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006866:	4a55      	ldr	r2, [pc, #340]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686e:	f7fc f9a7 	bl	8002bc0 <HAL_GetTick>
 8006872:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006876:	f7fc f9a3 	bl	8002bc0 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e219      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006888:	4b4c      	ldr	r3, [pc, #304]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 800688a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0f0      	beq.n	8006876 <HAL_RCC_OscConfig+0x35e>
 8006894:	e018      	b.n	80068c8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006896:	4b49      	ldr	r3, [pc, #292]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800689a:	4a48      	ldr	r2, [pc, #288]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a2:	f7fc f98d 	bl	8002bc0 <HAL_GetTick>
 80068a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068aa:	f7fc f989 	bl	8002bc0 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e1ff      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068bc:	4b3f      	ldr	r3, [pc, #252]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80068be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1f0      	bne.n	80068aa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d036      	beq.n	8006942 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d019      	beq.n	8006910 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068dc:	4b37      	ldr	r3, [pc, #220]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a36      	ldr	r2, [pc, #216]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80068e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068e8:	f7fc f96a 	bl	8002bc0 <HAL_GetTick>
 80068ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068f0:	f7fc f966 	bl	8002bc0 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e1dc      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006902:	4b2e      	ldr	r3, [pc, #184]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f0      	beq.n	80068f0 <HAL_RCC_OscConfig+0x3d8>
 800690e:	e018      	b.n	8006942 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006910:	4b2a      	ldr	r3, [pc, #168]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a29      	ldr	r2, [pc, #164]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800691a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800691c:	f7fc f950 	bl	8002bc0 <HAL_GetTick>
 8006920:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006924:	f7fc f94c 	bl	8002bc0 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e1c2      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006936:	4b21      	ldr	r3, [pc, #132]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 8086 	beq.w	8006a5c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006950:	4b1b      	ldr	r3, [pc, #108]	@ (80069c0 <HAL_RCC_OscConfig+0x4a8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a1a      	ldr	r2, [pc, #104]	@ (80069c0 <HAL_RCC_OscConfig+0x4a8>)
 8006956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800695a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800695c:	f7fc f930 	bl	8002bc0 <HAL_GetTick>
 8006960:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006964:	f7fc f92c 	bl	8002bc0 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b64      	cmp	r3, #100	@ 0x64
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e1a2      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006976:	4b12      	ldr	r3, [pc, #72]	@ (80069c0 <HAL_RCC_OscConfig+0x4a8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0f0      	beq.n	8006964 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d106      	bne.n	8006998 <HAL_RCC_OscConfig+0x480>
 800698a:	4b0c      	ldr	r3, [pc, #48]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698e:	4a0b      	ldr	r2, [pc, #44]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	@ 0x70
 8006996:	e032      	b.n	80069fe <HAL_RCC_OscConfig+0x4e6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d111      	bne.n	80069c4 <HAL_RCC_OscConfig+0x4ac>
 80069a0:	4b06      	ldr	r3, [pc, #24]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80069a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a4:	4a05      	ldr	r2, [pc, #20]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ac:	4b03      	ldr	r3, [pc, #12]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b0:	4a02      	ldr	r2, [pc, #8]	@ (80069bc <HAL_RCC_OscConfig+0x4a4>)
 80069b2:	f023 0304 	bic.w	r3, r3, #4
 80069b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b8:	e021      	b.n	80069fe <HAL_RCC_OscConfig+0x4e6>
 80069ba:	bf00      	nop
 80069bc:	58024400 	.word	0x58024400
 80069c0:	58024800 	.word	0x58024800
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	2b05      	cmp	r3, #5
 80069ca:	d10c      	bne.n	80069e6 <HAL_RCC_OscConfig+0x4ce>
 80069cc:	4b83      	ldr	r3, [pc, #524]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 80069ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d0:	4a82      	ldr	r2, [pc, #520]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 80069d2:	f043 0304 	orr.w	r3, r3, #4
 80069d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d8:	4b80      	ldr	r3, [pc, #512]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069dc:	4a7f      	ldr	r2, [pc, #508]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069e4:	e00b      	b.n	80069fe <HAL_RCC_OscConfig+0x4e6>
 80069e6:	4b7d      	ldr	r3, [pc, #500]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ea:	4a7c      	ldr	r2, [pc, #496]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069f2:	4b7a      	ldr	r3, [pc, #488]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f6:	4a79      	ldr	r2, [pc, #484]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 80069f8:	f023 0304 	bic.w	r3, r3, #4
 80069fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d015      	beq.n	8006a32 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a06:	f7fc f8db 	bl	8002bc0 <HAL_GetTick>
 8006a0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a0c:	e00a      	b.n	8006a24 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a0e:	f7fc f8d7 	bl	8002bc0 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e14b      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a24:	4b6d      	ldr	r3, [pc, #436]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0ee      	beq.n	8006a0e <HAL_RCC_OscConfig+0x4f6>
 8006a30:	e014      	b.n	8006a5c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a32:	f7fc f8c5 	bl	8002bc0 <HAL_GetTick>
 8006a36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a38:	e00a      	b.n	8006a50 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a3a:	f7fc f8c1 	bl	8002bc0 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e135      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a50:	4b62      	ldr	r3, [pc, #392]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1ee      	bne.n	8006a3a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 812a 	beq.w	8006cba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a66:	4b5d      	ldr	r3, [pc, #372]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a6e:	2b18      	cmp	r3, #24
 8006a70:	f000 80ba 	beq.w	8006be8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	f040 8095 	bne.w	8006ba8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a7e:	4b57      	ldr	r3, [pc, #348]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a56      	ldr	r2, [pc, #344]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006a84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8a:	f7fc f899 	bl	8002bc0 <HAL_GetTick>
 8006a8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a92:	f7fc f895 	bl	8002bc0 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e10b      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f0      	bne.n	8006a92 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006ab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8006be0 <HAL_RCC_OscConfig+0x6c8>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ac0:	0112      	lsls	r2, r2, #4
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	4945      	ldr	r1, [pc, #276]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	628b      	str	r3, [r1, #40]	@ 0x28
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	025b      	lsls	r3, r3, #9
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af2:	3b01      	subs	r3, #1
 8006af4:	061b      	lsls	r3, r3, #24
 8006af6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006afa:	4938      	ldr	r1, [pc, #224]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006b00:	4b36      	ldr	r3, [pc, #216]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	4a35      	ldr	r2, [pc, #212]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b0c:	4b33      	ldr	r3, [pc, #204]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b10:	4b34      	ldr	r3, [pc, #208]	@ (8006be4 <HAL_RCC_OscConfig+0x6cc>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b18:	00d2      	lsls	r2, r2, #3
 8006b1a:	4930      	ldr	r1, [pc, #192]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b20:	4b2e      	ldr	r3, [pc, #184]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b24:	f023 020c 	bic.w	r2, r3, #12
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2c:	492b      	ldr	r1, [pc, #172]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b32:	4b2a      	ldr	r3, [pc, #168]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	f023 0202 	bic.w	r2, r3, #2
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	4927      	ldr	r1, [pc, #156]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b44:	4b25      	ldr	r3, [pc, #148]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b48:	4a24      	ldr	r2, [pc, #144]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b50:	4b22      	ldr	r3, [pc, #136]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	4a21      	ldr	r2, [pc, #132]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	4a1e      	ldr	r2, [pc, #120]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b68:	4b1c      	ldr	r3, [pc, #112]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b74:	4b19      	ldr	r3, [pc, #100]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a18      	ldr	r2, [pc, #96]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b80:	f7fc f81e 	bl	8002bc0 <HAL_GetTick>
 8006b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b88:	f7fc f81a 	bl	8002bc0 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e090      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b9a:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCC_OscConfig+0x670>
 8006ba6:	e088      	b.n	8006cba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a0b      	ldr	r2, [pc, #44]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fc f804 	bl	8002bc0 <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bbc:	f7fc f800 	bl	8002bc0 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e076      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bce:	4b03      	ldr	r3, [pc, #12]	@ (8006bdc <HAL_RCC_OscConfig+0x6c4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <HAL_RCC_OscConfig+0x6a4>
 8006bda:	e06e      	b.n	8006cba <HAL_RCC_OscConfig+0x7a2>
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	fffffc0c 	.word	0xfffffc0c
 8006be4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006be8:	4b36      	ldr	r3, [pc, #216]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bee:	4b35      	ldr	r3, [pc, #212]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d031      	beq.n	8006c60 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f003 0203 	and.w	r2, r3, #3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d12a      	bne.n	8006c60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d122      	bne.n	8006c60 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d11a      	bne.n	8006c60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	0a5b      	lsrs	r3, r3, #9
 8006c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d111      	bne.n	8006c60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	0c1b      	lsrs	r3, r3, #16
 8006c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d108      	bne.n	8006c60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	0e1b      	lsrs	r3, r3, #24
 8006c52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e02b      	b.n	8006cbc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c64:	4b17      	ldr	r3, [pc, #92]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c68:	08db      	lsrs	r3, r3, #3
 8006c6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d01f      	beq.n	8006cba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c7a:	4b12      	ldr	r3, [pc, #72]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7e:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c86:	f7fb ff9b 	bl	8002bc0 <HAL_GetTick>
 8006c8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c8c:	bf00      	nop
 8006c8e:	f7fb ff97 	bl	8002bc0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d0f9      	beq.n	8006c8e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc8 <HAL_RCC_OscConfig+0x7b0>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ca6:	00d2      	lsls	r2, r2, #3
 8006ca8:	4906      	ldr	r1, [pc, #24]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006cae:	4b05      	ldr	r3, [pc, #20]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	4a04      	ldr	r2, [pc, #16]	@ (8006cc4 <HAL_RCC_OscConfig+0x7ac>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3730      	adds	r7, #48	@ 0x30
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	ffff0007 	.word	0xffff0007

08006ccc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e19c      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce0:	4b8a      	ldr	r3, [pc, #552]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d910      	bls.n	8006d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cee:	4b87      	ldr	r3, [pc, #540]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f023 020f 	bic.w	r2, r3, #15
 8006cf6:	4985      	ldr	r1, [pc, #532]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfe:	4b83      	ldr	r3, [pc, #524]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e184      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d010      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	4b7b      	ldr	r3, [pc, #492]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d908      	bls.n	8006d3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d2c:	4b78      	ldr	r3, [pc, #480]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	4975      	ldr	r1, [pc, #468]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d010      	beq.n	8006d6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	4b70      	ldr	r3, [pc, #448]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d908      	bls.n	8006d6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	496a      	ldr	r1, [pc, #424]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d010      	beq.n	8006d9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699a      	ldr	r2, [r3, #24]
 8006d7c:	4b64      	ldr	r3, [pc, #400]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d908      	bls.n	8006d9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d88:	4b61      	ldr	r3, [pc, #388]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	495e      	ldr	r1, [pc, #376]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d010      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69da      	ldr	r2, [r3, #28]
 8006daa:	4b59      	ldr	r3, [pc, #356]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d908      	bls.n	8006dc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006db6:	4b56      	ldr	r3, [pc, #344]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	4953      	ldr	r1, [pc, #332]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d010      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d908      	bls.n	8006df6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de4:	4b4a      	ldr	r3, [pc, #296]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f023 020f 	bic.w	r2, r3, #15
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4947      	ldr	r1, [pc, #284]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d055      	beq.n	8006eae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e02:	4b43      	ldr	r3, [pc, #268]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	4940      	ldr	r1, [pc, #256]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d121      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0f6      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d107      	bne.n	8006e44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e34:	4b36      	ldr	r3, [pc, #216]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d115      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e0ea      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d107      	bne.n	8006e5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e4c:	4b30      	ldr	r3, [pc, #192]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0de      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0d6      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e6c:	4b28      	ldr	r3, [pc, #160]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f023 0207 	bic.w	r2, r3, #7
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4925      	ldr	r1, [pc, #148]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7e:	f7fb fe9f 	bl	8002bc0 <HAL_GetTick>
 8006e82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e84:	e00a      	b.n	8006e9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e86:	f7fb fe9b 	bl	8002bc0 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e0be      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d1eb      	bne.n	8006e86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d010      	beq.n	8006edc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	4b14      	ldr	r3, [pc, #80]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d208      	bcs.n	8006edc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eca:	4b11      	ldr	r3, [pc, #68]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f023 020f 	bic.w	r2, r3, #15
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	490e      	ldr	r1, [pc, #56]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006edc:	4b0b      	ldr	r3, [pc, #44]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d214      	bcs.n	8006f14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b08      	ldr	r3, [pc, #32]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f023 020f 	bic.w	r2, r3, #15
 8006ef2:	4906      	ldr	r1, [pc, #24]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efa:	4b04      	ldr	r3, [pc, #16]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d005      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e086      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
 8006f0c:	52002000 	.word	0x52002000
 8006f10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d010      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	4b3f      	ldr	r3, [pc, #252]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d208      	bcs.n	8006f42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f30:	4b3c      	ldr	r3, [pc, #240]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	4939      	ldr	r1, [pc, #228]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	4b34      	ldr	r3, [pc, #208]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d208      	bcs.n	8006f70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f5e:	4b31      	ldr	r3, [pc, #196]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	492e      	ldr	r1, [pc, #184]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d010      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699a      	ldr	r2, [r3, #24]
 8006f80:	4b28      	ldr	r3, [pc, #160]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d208      	bcs.n	8006f9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f8c:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	4922      	ldr	r1, [pc, #136]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	4b1d      	ldr	r3, [pc, #116]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d208      	bcs.n	8006fcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006fba:	4b1a      	ldr	r3, [pc, #104]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	4917      	ldr	r1, [pc, #92]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fcc:	f000 f834 	bl	8007038 <HAL_RCC_GetSysClockFreq>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b14      	ldr	r3, [pc, #80]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	4912      	ldr	r1, [pc, #72]	@ (8007028 <HAL_RCC_ClockConfig+0x35c>)
 8006fde:	5ccb      	ldrb	r3, [r1, r3]
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fea:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8007028 <HAL_RCC_ClockConfig+0x35c>)
 8006ff4:	5cd3      	ldrb	r3, [r2, r3]
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8007000:	4a0a      	ldr	r2, [pc, #40]	@ (800702c <HAL_RCC_ClockConfig+0x360>)
 8007002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007004:	4a0a      	ldr	r2, [pc, #40]	@ (8007030 <HAL_RCC_ClockConfig+0x364>)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_RCC_ClockConfig+0x368>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f7fb fd8c 	bl	8002b2c <HAL_InitTick>
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	58024400 	.word	0x58024400
 8007028:	0800bcfc 	.word	0x0800bcfc
 800702c:	24000010 	.word	0x24000010
 8007030:	2400000c 	.word	0x2400000c
 8007034:	24000014 	.word	0x24000014

08007038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007038:	b480      	push	{r7}
 800703a:	b089      	sub	sp, #36	@ 0x24
 800703c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800703e:	4bb3      	ldr	r3, [pc, #716]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007046:	2b18      	cmp	r3, #24
 8007048:	f200 8155 	bhi.w	80072f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800704c:	a201      	add	r2, pc, #4	@ (adr r2, 8007054 <HAL_RCC_GetSysClockFreq+0x1c>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	080070b9 	.word	0x080070b9
 8007058:	080072f7 	.word	0x080072f7
 800705c:	080072f7 	.word	0x080072f7
 8007060:	080072f7 	.word	0x080072f7
 8007064:	080072f7 	.word	0x080072f7
 8007068:	080072f7 	.word	0x080072f7
 800706c:	080072f7 	.word	0x080072f7
 8007070:	080072f7 	.word	0x080072f7
 8007074:	080070df 	.word	0x080070df
 8007078:	080072f7 	.word	0x080072f7
 800707c:	080072f7 	.word	0x080072f7
 8007080:	080072f7 	.word	0x080072f7
 8007084:	080072f7 	.word	0x080072f7
 8007088:	080072f7 	.word	0x080072f7
 800708c:	080072f7 	.word	0x080072f7
 8007090:	080072f7 	.word	0x080072f7
 8007094:	080070e5 	.word	0x080070e5
 8007098:	080072f7 	.word	0x080072f7
 800709c:	080072f7 	.word	0x080072f7
 80070a0:	080072f7 	.word	0x080072f7
 80070a4:	080072f7 	.word	0x080072f7
 80070a8:	080072f7 	.word	0x080072f7
 80070ac:	080072f7 	.word	0x080072f7
 80070b0:	080072f7 	.word	0x080072f7
 80070b4:	080070eb 	.word	0x080070eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b8:	4b94      	ldr	r3, [pc, #592]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070c4:	4b91      	ldr	r3, [pc, #580]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	4a90      	ldr	r2, [pc, #576]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
 80070d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80070d6:	e111      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070d8:	4b8d      	ldr	r3, [pc, #564]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070da:	61bb      	str	r3, [r7, #24]
      break;
 80070dc:	e10e      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80070de:	4b8d      	ldr	r3, [pc, #564]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070e0:	61bb      	str	r3, [r7, #24]
      break;
 80070e2:	e10b      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80070e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80070e6:	61bb      	str	r3, [r7, #24]
      break;
 80070e8:	e108      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070ea:	4b88      	ldr	r3, [pc, #544]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80070f4:	4b85      	ldr	r3, [pc, #532]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007100:	4b82      	ldr	r3, [pc, #520]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800710a:	4b80      	ldr	r3, [pc, #512]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710e:	08db      	lsrs	r3, r3, #3
 8007110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	fb02 f303 	mul.w	r3, r2, r3
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80e1 	beq.w	80072f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b02      	cmp	r3, #2
 8007132:	f000 8083 	beq.w	800723c <HAL_RCC_GetSysClockFreq+0x204>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b02      	cmp	r3, #2
 800713a:	f200 80a1 	bhi.w	8007280 <HAL_RCC_GetSysClockFreq+0x248>
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x114>
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d056      	beq.n	80071f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800714a:	e099      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800714c:	4b6f      	ldr	r3, [pc, #444]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02d      	beq.n	80071b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007158:	4b6c      	ldr	r3, [pc, #432]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	08db      	lsrs	r3, r3, #3
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	4a6b      	ldr	r2, [pc, #428]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007164:	fa22 f303 	lsr.w	r3, r2, r3
 8007168:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b62      	ldr	r3, [pc, #392]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a02 	vldr	s12, [r7, #8]
 8007196:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80071b2:	e087      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007320 <HAL_RCC_GetSysClockFreq+0x2e8>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b51      	ldr	r3, [pc, #324]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071f6:	e065      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007324 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b40      	ldr	r3, [pc, #256]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a02 	vldr	s12, [r7, #8]
 800721e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800723a:	e043      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007328 <HAL_RCC_GetSysClockFreq+0x2f0>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b2f      	ldr	r3, [pc, #188]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007262:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800727e:	e021      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007324 <HAL_RCC_GetSysClockFreq+0x2ec>
 800728e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007292:	4b1e      	ldr	r3, [pc, #120]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80072c4:	4b11      	ldr	r3, [pc, #68]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c8:	0a5b      	lsrs	r3, r3, #9
 80072ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ce:	3301      	adds	r3, #1
 80072d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80072e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e8:	ee17 3a90 	vmov	r3, s15
 80072ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80072ee:	e005      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]
      break;
 80072f4:	e002      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80072f6:	4b07      	ldr	r3, [pc, #28]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072f8:	61bb      	str	r3, [r7, #24]
      break;
 80072fa:	bf00      	nop
  }

  return sysclockfreq;
 80072fc:	69bb      	ldr	r3, [r7, #24]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3724      	adds	r7, #36	@ 0x24
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	03d09000 	.word	0x03d09000
 8007314:	003d0900 	.word	0x003d0900
 8007318:	016e3600 	.word	0x016e3600
 800731c:	46000000 	.word	0x46000000
 8007320:	4c742400 	.word	0x4c742400
 8007324:	4a742400 	.word	0x4a742400
 8007328:	4bb71b00 	.word	0x4bb71b00

0800732c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007332:	f7ff fe81 	bl	8007038 <HAL_RCC_GetSysClockFreq>
 8007336:	4602      	mov	r2, r0
 8007338:	4b10      	ldr	r3, [pc, #64]	@ (800737c <HAL_RCC_GetHCLKFreq+0x50>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	0a1b      	lsrs	r3, r3, #8
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	490f      	ldr	r1, [pc, #60]	@ (8007380 <HAL_RCC_GetHCLKFreq+0x54>)
 8007344:	5ccb      	ldrb	r3, [r1, r3]
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	fa22 f303 	lsr.w	r3, r2, r3
 800734e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007350:	4b0a      	ldr	r3, [pc, #40]	@ (800737c <HAL_RCC_GetHCLKFreq+0x50>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	4a09      	ldr	r2, [pc, #36]	@ (8007380 <HAL_RCC_GetHCLKFreq+0x54>)
 800735a:	5cd3      	ldrb	r3, [r2, r3]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	fa22 f303 	lsr.w	r3, r2, r3
 8007366:	4a07      	ldr	r2, [pc, #28]	@ (8007384 <HAL_RCC_GetHCLKFreq+0x58>)
 8007368:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800736a:	4a07      	ldr	r2, [pc, #28]	@ (8007388 <HAL_RCC_GetHCLKFreq+0x5c>)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007370:	4b04      	ldr	r3, [pc, #16]	@ (8007384 <HAL_RCC_GetHCLKFreq+0x58>)
 8007372:	681b      	ldr	r3, [r3, #0]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	58024400 	.word	0x58024400
 8007380:	0800bcfc 	.word	0x0800bcfc
 8007384:	24000010 	.word	0x24000010
 8007388:	2400000c 	.word	0x2400000c

0800738c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007390:	f7ff ffcc 	bl	800732c <HAL_RCC_GetHCLKFreq>
 8007394:	4602      	mov	r2, r0
 8007396:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	091b      	lsrs	r3, r3, #4
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	4904      	ldr	r1, [pc, #16]	@ (80073b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073a2:	5ccb      	ldrb	r3, [r1, r3]
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	58024400 	.word	0x58024400
 80073b4:	0800bcfc 	.word	0x0800bcfc

080073b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80073bc:	f7ff ffb6 	bl	800732c <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4904      	ldr	r1, [pc, #16]	@ (80073e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400
 80073e0:	0800bcfc 	.word	0x0800bcfc

080073e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e8:	b0c6      	sub	sp, #280	@ 0x118
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007408:	2500      	movs	r5, #0
 800740a:	ea54 0305 	orrs.w	r3, r4, r5
 800740e:	d049      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800741a:	d02f      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800741c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007420:	d828      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007426:	d01a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800742c:	d822      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007436:	d007      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007438:	e01c      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743a:	4bab      	ldr	r3, [pc, #684]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	4aaa      	ldr	r2, [pc, #680]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007446:	e01a      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	3308      	adds	r3, #8
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f002 fa49 	bl	80098e8 <RCCEx_PLL2_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800745c:	e00f      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	3328      	adds	r3, #40	@ 0x28
 8007464:	2102      	movs	r1, #2
 8007466:	4618      	mov	r0, r3
 8007468:	f002 faf0 	bl	8009a4c <RCCEx_PLL3_Config>
 800746c:	4603      	mov	r3, r0
 800746e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007472:	e004      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800747a:	e000      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800747c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10a      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007486:	4b98      	ldr	r3, [pc, #608]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007494:	4a94      	ldr	r2, [pc, #592]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007496:	430b      	orrs	r3, r1
 8007498:	6513      	str	r3, [r2, #80]	@ 0x50
 800749a:	e003      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80074b0:	f04f 0900 	mov.w	r9, #0
 80074b4:	ea58 0309 	orrs.w	r3, r8, r9
 80074b8:	d047      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d82a      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80074c4:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	080074e1 	.word	0x080074e1
 80074d0:	080074ef 	.word	0x080074ef
 80074d4:	08007505 	.word	0x08007505
 80074d8:	08007523 	.word	0x08007523
 80074dc:	08007523 	.word	0x08007523
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e0:	4b81      	ldr	r3, [pc, #516]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	4a80      	ldr	r2, [pc, #512]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074ec:	e01a      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	3308      	adds	r3, #8
 80074f4:	2100      	movs	r1, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f002 f9f6 	bl	80098e8 <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007502:	e00f      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007508:	3328      	adds	r3, #40	@ 0x28
 800750a:	2100      	movs	r1, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f002 fa9d 	bl	8009a4c <RCCEx_PLL3_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007518:	e004      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800752c:	4b6e      	ldr	r3, [pc, #440]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800752e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007530:	f023 0107 	bic.w	r1, r3, #7
 8007534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800753a:	4a6b      	ldr	r2, [pc, #428]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800753c:	430b      	orrs	r3, r1
 800753e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007540:	e003      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007546:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007556:	f04f 0b00 	mov.w	fp, #0
 800755a:	ea5a 030b 	orrs.w	r3, sl, fp
 800755e:	d05b      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007568:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800756c:	d03b      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800756e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007572:	d834      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007574:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007578:	d037      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800757a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800757e:	d82e      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007580:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007584:	d033      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007586:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800758a:	d828      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800758c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007590:	d01a      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007596:	d822      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800759c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075a0:	d007      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80075a2:	e01c      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a4:	4b50      	ldr	r3, [pc, #320]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	4a4f      	ldr	r2, [pc, #316]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075b0:	e01e      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b6:	3308      	adds	r3, #8
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f002 f994 	bl	80098e8 <RCCEx_PLL2_Config>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075c6:	e013      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075cc:	3328      	adds	r3, #40	@ 0x28
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f002 fa3b 	bl	8009a4c <RCCEx_PLL3_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075dc:	e008      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075e4:	e004      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80075e6:	bf00      	nop
 80075e8:	e002      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80075ea:	bf00      	nop
 80075ec:	e000      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80075ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10b      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075f8:	4b3b      	ldr	r3, [pc, #236]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075fc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007604:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007608:	4a37      	ldr	r2, [pc, #220]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800760a:	430b      	orrs	r3, r1
 800760c:	6593      	str	r3, [r2, #88]	@ 0x58
 800760e:	e003      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800762e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007632:	460b      	mov	r3, r1
 8007634:	4313      	orrs	r3, r2
 8007636:	d05d      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007640:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007644:	d03b      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007646:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800764a:	d834      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800764c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007650:	d037      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007652:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007656:	d82e      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007658:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800765c:	d033      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800765e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007662:	d828      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007668:	d01a      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800766a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800766e:	d822      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007678:	d007      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800767a:	e01c      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800767c:	4b1a      	ldr	r3, [pc, #104]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	4a19      	ldr	r2, [pc, #100]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007688:	e01e      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	3308      	adds	r3, #8
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f002 f928 	bl	80098e8 <RCCEx_PLL2_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800769e:	e013      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a4:	3328      	adds	r3, #40	@ 0x28
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f002 f9cf 	bl	8009a4c <RCCEx_PLL3_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076b4:	e008      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076bc:	e004      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80076be:	bf00      	nop
 80076c0:	e002      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80076c2:	bf00      	nop
 80076c4:	e000      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80076c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80076d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80076e0:	4a01      	ldr	r2, [pc, #4]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076e2:	430b      	orrs	r3, r1
 80076e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80076e6:	e005      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80076e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007700:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007704:	2300      	movs	r3, #0
 8007706:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800770a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800770e:	460b      	mov	r3, r1
 8007710:	4313      	orrs	r3, r2
 8007712:	d03a      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771a:	2b30      	cmp	r3, #48	@ 0x30
 800771c:	d01f      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800771e:	2b30      	cmp	r3, #48	@ 0x30
 8007720:	d819      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007722:	2b20      	cmp	r3, #32
 8007724:	d00c      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007726:	2b20      	cmp	r3, #32
 8007728:	d815      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d019      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800772e:	2b10      	cmp	r3, #16
 8007730:	d111      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007732:	4baa      	ldr	r3, [pc, #680]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007736:	4aa9      	ldr	r2, [pc, #676]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800773c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800773e:	e011      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007744:	3308      	adds	r3, #8
 8007746:	2102      	movs	r1, #2
 8007748:	4618      	mov	r0, r3
 800774a:	f002 f8cd 	bl	80098e8 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007754:	e006      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800775c:	e002      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800775e:	bf00      	nop
 8007760:	e000      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800776c:	4b9b      	ldr	r3, [pc, #620]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800776e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007770:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777a:	4a98      	ldr	r2, [pc, #608]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800777c:	430b      	orrs	r3, r1
 800777e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007780:	e003      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007786:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800779a:	2300      	movs	r3, #0
 800779c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80077a4:	460b      	mov	r3, r1
 80077a6:	4313      	orrs	r3, r2
 80077a8:	d051      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80077aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077b4:	d035      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80077b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ba:	d82e      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80077bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077c0:	d031      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80077c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077c6:	d828      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80077c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077cc:	d01a      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80077ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d2:	d822      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80077d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077dc:	d007      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80077de:	e01c      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e0:	4b7e      	ldr	r3, [pc, #504]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e4:	4a7d      	ldr	r2, [pc, #500]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077ec:	e01c      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f2:	3308      	adds	r3, #8
 80077f4:	2100      	movs	r1, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 f876 	bl	80098e8 <RCCEx_PLL2_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007802:	e011      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007808:	3328      	adds	r3, #40	@ 0x28
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f002 f91d 	bl	8009a4c <RCCEx_PLL3_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007818:	e006      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007820:	e002      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007822:	bf00      	nop
 8007824:	e000      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007830:	4b6a      	ldr	r3, [pc, #424]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007834:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783e:	4a67      	ldr	r2, [pc, #412]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007840:	430b      	orrs	r3, r1
 8007842:	6513      	str	r3, [r2, #80]	@ 0x50
 8007844:	e003      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007846:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800784a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800784e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800785a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007864:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007868:	460b      	mov	r3, r1
 800786a:	4313      	orrs	r3, r2
 800786c:	d053      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007878:	d033      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800787a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800787e:	d82c      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007880:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007884:	d02f      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007886:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800788a:	d826      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800788c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007890:	d02b      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007892:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007896:	d820      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800789c:	d012      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800789e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078a2:	d81a      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d022      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ac:	d115      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	3308      	adds	r3, #8
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f002 f816 	bl	80098e8 <RCCEx_PLL2_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078c2:	e015      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	3328      	adds	r3, #40	@ 0x28
 80078ca:	2101      	movs	r1, #1
 80078cc:	4618      	mov	r0, r3
 80078ce:	f002 f8bd 	bl	8009a4c <RCCEx_PLL3_Config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078d8:	e00a      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078e0:	e006      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80078e2:	bf00      	nop
 80078e4:	e004      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80078e6:	bf00      	nop
 80078e8:	e002      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80078ea:	bf00      	nop
 80078ec:	e000      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80078ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078f8:	4b38      	ldr	r3, [pc, #224]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007906:	4a35      	ldr	r2, [pc, #212]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007908:	430b      	orrs	r3, r1
 800790a:	6513      	str	r3, [r2, #80]	@ 0x50
 800790c:	e003      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007912:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007926:	2300      	movs	r3, #0
 8007928:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800792c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007930:	460b      	mov	r3, r1
 8007932:	4313      	orrs	r3, r2
 8007934:	d058      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800793e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007942:	d033      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007948:	d82c      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800794a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794e:	d02f      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007954:	d826      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800795a:	d02b      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800795c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007960:	d820      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007966:	d012      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800796c:	d81a      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d022      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007976:	d115      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797c:	3308      	adds	r3, #8
 800797e:	2101      	movs	r1, #1
 8007980:	4618      	mov	r0, r3
 8007982:	f001 ffb1 	bl	80098e8 <RCCEx_PLL2_Config>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800798c:	e015      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007992:	3328      	adds	r3, #40	@ 0x28
 8007994:	2101      	movs	r1, #1
 8007996:	4618      	mov	r0, r3
 8007998:	f002 f858 	bl	8009a4c <RCCEx_PLL3_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80079a2:	e00a      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079aa:	e006      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80079ac:	bf00      	nop
 80079ae:	e004      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80079b0:	bf00      	nop
 80079b2:	e002      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80079b4:	bf00      	nop
 80079b6:	e000      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80079b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10e      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079c2:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80079ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079d2:	4a02      	ldr	r2, [pc, #8]	@ (80079dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079d4:	430b      	orrs	r3, r1
 80079d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80079d8:	e006      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80079da:	bf00      	nop
 80079dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80079f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079f8:	2300      	movs	r3, #0
 80079fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80079fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4313      	orrs	r3, r2
 8007a06:	d037      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a12:	d00e      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a18:	d816      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d018      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a22:	d111      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a24:	4bc4      	ldr	r3, [pc, #784]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	4ac3      	ldr	r2, [pc, #780]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a30:	e00f      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a36:	3308      	adds	r3, #8
 8007a38:	2101      	movs	r1, #1
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 ff54 	bl	80098e8 <RCCEx_PLL2_Config>
 8007a40:	4603      	mov	r3, r0
 8007a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a46:	e004      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a4e:	e000      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a5a:	4bb7      	ldr	r3, [pc, #732]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a68:	4ab3      	ldr	r2, [pc, #716]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a6e:	e003      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a92:	460b      	mov	r3, r1
 8007a94:	4313      	orrs	r3, r2
 8007a96:	d039      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d81c      	bhi.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ae5 	.word	0x08007ae5
 8007aac:	08007ab9 	.word	0x08007ab9
 8007ab0:	08007ac7 	.word	0x08007ac7
 8007ab4:	08007ae5 	.word	0x08007ae5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab8:	4b9f      	ldr	r3, [pc, #636]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abc:	4a9e      	ldr	r2, [pc, #632]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ac4:	e00f      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	3308      	adds	r3, #8
 8007acc:	2102      	movs	r1, #2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 ff0a 	bl	80098e8 <RCCEx_PLL2_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ada:	e004      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ae2:	e000      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007aee:	4b92      	ldr	r3, [pc, #584]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007af2:	f023 0103 	bic.w	r1, r3, #3
 8007af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007afc:	4a8e      	ldr	r2, [pc, #568]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007afe:	430b      	orrs	r3, r1
 8007b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b02:	e003      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f000 8099 	beq.w	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b2e:	4b83      	ldr	r3, [pc, #524]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a82      	ldr	r2, [pc, #520]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b3a:	f7fb f841 	bl	8002bc0 <HAL_GetTick>
 8007b3e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b42:	e00b      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b44:	f7fb f83c 	bl	8002bc0 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b64      	cmp	r3, #100	@ 0x64
 8007b52:	d903      	bls.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b5a:	e005      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b5c:	4b77      	ldr	r3, [pc, #476]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0ed      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007b68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d173      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b70:	4b71      	ldr	r3, [pc, #452]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b7c:	4053      	eors	r3, r2
 8007b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d015      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b86:	4b6c      	ldr	r3, [pc, #432]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b92:	4b69      	ldr	r3, [pc, #420]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b96:	4a68      	ldr	r2, [pc, #416]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b9e:	4b66      	ldr	r3, [pc, #408]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba2:	4a65      	ldr	r2, [pc, #404]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ba8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007baa:	4a63      	ldr	r2, [pc, #396]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bbe:	d118      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fa fffe 	bl	8002bc0 <HAL_GetTick>
 8007bc4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bc8:	e00d      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bca:	f7fa fff9 	bl	8002bc0 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d903      	bls.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007be4:	e005      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007be6:	4b54      	ldr	r3, [pc, #336]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0eb      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007bf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d129      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c0a:	d10e      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c1c:	091a      	lsrs	r2, r3, #4
 8007c1e:	4b48      	ldr	r3, [pc, #288]	@ (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	4a45      	ldr	r2, [pc, #276]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6113      	str	r3, [r2, #16]
 8007c28:	e005      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007c2a:	4b43      	ldr	r3, [pc, #268]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	4a42      	ldr	r2, [pc, #264]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c34:	6113      	str	r3, [r2, #16]
 8007c36:	4b40      	ldr	r3, [pc, #256]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c46:	4a3c      	ldr	r2, [pc, #240]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c4c:	e008      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007c56:	e003      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f002 0301 	and.w	r3, r2, #1
 8007c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c70:	2300      	movs	r3, #0
 8007c72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f000 808f 	beq.w	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c88:	2b28      	cmp	r3, #40	@ 0x28
 8007c8a:	d871      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007d79 	.word	0x08007d79
 8007c98:	08007d71 	.word	0x08007d71
 8007c9c:	08007d71 	.word	0x08007d71
 8007ca0:	08007d71 	.word	0x08007d71
 8007ca4:	08007d71 	.word	0x08007d71
 8007ca8:	08007d71 	.word	0x08007d71
 8007cac:	08007d71 	.word	0x08007d71
 8007cb0:	08007d71 	.word	0x08007d71
 8007cb4:	08007d45 	.word	0x08007d45
 8007cb8:	08007d71 	.word	0x08007d71
 8007cbc:	08007d71 	.word	0x08007d71
 8007cc0:	08007d71 	.word	0x08007d71
 8007cc4:	08007d71 	.word	0x08007d71
 8007cc8:	08007d71 	.word	0x08007d71
 8007ccc:	08007d71 	.word	0x08007d71
 8007cd0:	08007d71 	.word	0x08007d71
 8007cd4:	08007d5b 	.word	0x08007d5b
 8007cd8:	08007d71 	.word	0x08007d71
 8007cdc:	08007d71 	.word	0x08007d71
 8007ce0:	08007d71 	.word	0x08007d71
 8007ce4:	08007d71 	.word	0x08007d71
 8007ce8:	08007d71 	.word	0x08007d71
 8007cec:	08007d71 	.word	0x08007d71
 8007cf0:	08007d71 	.word	0x08007d71
 8007cf4:	08007d79 	.word	0x08007d79
 8007cf8:	08007d71 	.word	0x08007d71
 8007cfc:	08007d71 	.word	0x08007d71
 8007d00:	08007d71 	.word	0x08007d71
 8007d04:	08007d71 	.word	0x08007d71
 8007d08:	08007d71 	.word	0x08007d71
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007d71 	.word	0x08007d71
 8007d14:	08007d79 	.word	0x08007d79
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d71 	.word	0x08007d71
 8007d20:	08007d71 	.word	0x08007d71
 8007d24:	08007d71 	.word	0x08007d71
 8007d28:	08007d71 	.word	0x08007d71
 8007d2c:	08007d71 	.word	0x08007d71
 8007d30:	08007d71 	.word	0x08007d71
 8007d34:	08007d79 	.word	0x08007d79
 8007d38:	58024400 	.word	0x58024400
 8007d3c:	58024800 	.word	0x58024800
 8007d40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d48:	3308      	adds	r3, #8
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 fdcb 	bl	80098e8 <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d58:	e00f      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2101      	movs	r1, #1
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fe72 	bl	8009a4c <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e004      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d76:	e000      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d82:	4bbf      	ldr	r3, [pc, #764]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d90:	4abb      	ldr	r2, [pc, #748]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d92:	430b      	orrs	r3, r1
 8007d94:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f002 0302 	and.w	r3, r2, #2
 8007dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007db0:	2300      	movs	r3, #0
 8007db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007db6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	d041      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	d824      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007dca:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007e1d 	.word	0x08007e1d
 8007dd4:	08007de9 	.word	0x08007de9
 8007dd8:	08007dff 	.word	0x08007dff
 8007ddc:	08007e1d 	.word	0x08007e1d
 8007de0:	08007e1d 	.word	0x08007e1d
 8007de4:	08007e1d 	.word	0x08007e1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dec:	3308      	adds	r3, #8
 8007dee:	2101      	movs	r1, #1
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 fd79 	bl	80098e8 <RCCEx_PLL2_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dfc:	e00f      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e02:	3328      	adds	r3, #40	@ 0x28
 8007e04:	2101      	movs	r1, #1
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 fe20 	bl	8009a4c <RCCEx_PLL3_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e12:	e004      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e1a:	e000      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e26:	4b96      	ldr	r3, [pc, #600]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2a:	f023 0107 	bic.w	r1, r3, #7
 8007e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e34:	4a92      	ldr	r2, [pc, #584]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e36:	430b      	orrs	r3, r1
 8007e38:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e3a:	e003      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f002 0304 	and.w	r3, r2, #4
 8007e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e54:	2300      	movs	r3, #0
 8007e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d044      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6c:	2b05      	cmp	r3, #5
 8007e6e:	d825      	bhi.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007e70:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007ec5 	.word	0x08007ec5
 8007e7c:	08007e91 	.word	0x08007e91
 8007e80:	08007ea7 	.word	0x08007ea7
 8007e84:	08007ec5 	.word	0x08007ec5
 8007e88:	08007ec5 	.word	0x08007ec5
 8007e8c:	08007ec5 	.word	0x08007ec5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e94:	3308      	adds	r3, #8
 8007e96:	2101      	movs	r1, #1
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fd25 	bl	80098e8 <RCCEx_PLL2_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ea4:	e00f      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eaa:	3328      	adds	r3, #40	@ 0x28
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 fdcc 	bl	8009a4c <RCCEx_PLL3_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007eba:	e004      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ec2:	e000      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ece:	4b6c      	ldr	r3, [pc, #432]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed2:	f023 0107 	bic.w	r1, r3, #7
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ede:	4a68      	ldr	r2, [pc, #416]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ee4:	e003      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f002 0320 	and.w	r3, r2, #32
 8007efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007efe:	2300      	movs	r3, #0
 8007f00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f04:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d055      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f1a:	d033      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f20:	d82c      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f26:	d02f      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f2c:	d826      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f32:	d02b      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007f34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f38:	d820      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f3e:	d012      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f44:	d81a      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d022      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f4e:	d115      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	3308      	adds	r3, #8
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f001 fcc5 	bl	80098e8 <RCCEx_PLL2_Config>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f64:	e015      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6a:	3328      	adds	r3, #40	@ 0x28
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 fd6c 	bl	8009a4c <RCCEx_PLL3_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f7a:	e00a      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f82:	e006      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f84:	bf00      	nop
 8007f86:	e004      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f88:	bf00      	nop
 8007f8a:	e002      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f8c:	bf00      	nop
 8007f8e:	e000      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f9a:	4b39      	ldr	r3, [pc, #228]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007faa:	4a35      	ldr	r2, [pc, #212]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fb0:	e003      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007fc6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fd0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	d058      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fe2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fe6:	d033      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007fe8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fec:	d82c      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff2:	d02f      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff8:	d826      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ffe:	d02b      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008004:	d820      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800800a:	d012      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800800c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008010:	d81a      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d022      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801a:	d115      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008020:	3308      	adds	r3, #8
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fc5f 	bl	80098e8 <RCCEx_PLL2_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008030:	e015      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008036:	3328      	adds	r3, #40	@ 0x28
 8008038:	2102      	movs	r1, #2
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fd06 	bl	8009a4c <RCCEx_PLL3_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008046:	e00a      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800804e:	e006      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008050:	bf00      	nop
 8008052:	e004      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008054:	bf00      	nop
 8008056:	e002      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008058:	bf00      	nop
 800805a:	e000      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800805c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10e      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008066:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800806e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008072:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008076:	4a02      	ldr	r2, [pc, #8]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008078:	430b      	orrs	r3, r1
 800807a:	6593      	str	r3, [r2, #88]	@ 0x58
 800807c:	e006      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008098:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800809c:	2300      	movs	r3, #0
 800809e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80080a6:	460b      	mov	r3, r1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	d055      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080b8:	d033      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80080ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080be:	d82c      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080c4:	d02f      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80080c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ca:	d826      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080d0:	d02b      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80080d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080d6:	d820      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080dc:	d012      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80080de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080e2:	d81a      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d022      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80080e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ec:	d115      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f2:	3308      	adds	r3, #8
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fbf6 	bl	80098e8 <RCCEx_PLL2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008102:	e015      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008108:	3328      	adds	r3, #40	@ 0x28
 800810a:	2102      	movs	r1, #2
 800810c:	4618      	mov	r0, r3
 800810e:	f001 fc9d 	bl	8009a4c <RCCEx_PLL3_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008118:	e00a      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008120:	e006      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008122:	bf00      	nop
 8008124:	e004      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008126:	bf00      	nop
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800812e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008138:	4ba0      	ldr	r3, [pc, #640]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800813a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800813c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008144:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008148:	4a9c      	ldr	r2, [pc, #624]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800814a:	430b      	orrs	r3, r1
 800814c:	6593      	str	r3, [r2, #88]	@ 0x58
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f002 0308 	and.w	r3, r2, #8
 8008164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800816e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008172:	460b      	mov	r3, r1
 8008174:	4313      	orrs	r3, r2
 8008176:	d01e      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008184:	d10c      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818a:	3328      	adds	r3, #40	@ 0x28
 800818c:	2102      	movs	r1, #2
 800818e:	4618      	mov	r0, r3
 8008190:	f001 fc5c 	bl	8009a4c <RCCEx_PLL3_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80081a0:	4b86      	ldr	r3, [pc, #536]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b0:	4a82      	ldr	r2, [pc, #520]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081b2:	430b      	orrs	r3, r1
 80081b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f002 0310 	and.w	r3, r2, #16
 80081c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081c6:	2300      	movs	r3, #0
 80081c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80081d0:	460b      	mov	r3, r1
 80081d2:	4313      	orrs	r3, r2
 80081d4:	d01e      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081e2:	d10c      	bne.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e8:	3328      	adds	r3, #40	@ 0x28
 80081ea:	2102      	movs	r1, #2
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 fc2d 	bl	8009a4c <RCCEx_PLL3_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081fe:	4b6f      	ldr	r3, [pc, #444]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800820e:	4a6b      	ldr	r2, [pc, #428]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008210:	430b      	orrs	r3, r1
 8008212:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008220:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008222:	2300      	movs	r3, #0
 8008224:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008226:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800822a:	460b      	mov	r3, r1
 800822c:	4313      	orrs	r3, r2
 800822e:	d03e      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800823c:	d022      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800823e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008242:	d81b      	bhi.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800824c:	d00b      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800824e:	e015      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008254:	3308      	adds	r3, #8
 8008256:	2100      	movs	r1, #0
 8008258:	4618      	mov	r0, r3
 800825a:	f001 fb45 	bl	80098e8 <RCCEx_PLL2_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008264:	e00f      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826a:	3328      	adds	r3, #40	@ 0x28
 800826c:	2102      	movs	r1, #2
 800826e:	4618      	mov	r0, r3
 8008270:	f001 fbec 	bl	8009a4c <RCCEx_PLL3_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800827a:	e004      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008282:	e000      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008286:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800828e:	4b4b      	ldr	r3, [pc, #300]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008292:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800829e:	4a47      	ldr	r2, [pc, #284]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80082bc:	2300      	movs	r3, #0
 80082be:	677b      	str	r3, [r7, #116]	@ 0x74
 80082c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80082c4:	460b      	mov	r3, r1
 80082c6:	4313      	orrs	r3, r2
 80082c8:	d03b      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082d6:	d01f      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80082d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082dc:	d818      	bhi.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80082de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e2:	d003      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80082e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082e8:	d007      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80082ea:	e011      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ec:	4b33      	ldr	r3, [pc, #204]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f0:	4a32      	ldr	r2, [pc, #200]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082f8:	e00f      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082fe:	3328      	adds	r3, #40	@ 0x28
 8008300:	2101      	movs	r1, #1
 8008302:	4618      	mov	r0, r3
 8008304:	f001 fba2 	bl	8009a4c <RCCEx_PLL3_Config>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800830e:	e004      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008316:	e000      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800831a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10b      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008322:	4b26      	ldr	r3, [pc, #152]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008326:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800832a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008332:	4a22      	ldr	r2, [pc, #136]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008334:	430b      	orrs	r3, r1
 8008336:	6553      	str	r3, [r2, #84]	@ 0x54
 8008338:	e003      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800833e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800834e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008350:	2300      	movs	r3, #0
 8008352:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008354:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008358:	460b      	mov	r3, r1
 800835a:	4313      	orrs	r3, r2
 800835c:	d034      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800835e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800836c:	d007      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800836e:	e011      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008370:	4b12      	ldr	r3, [pc, #72]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	4a11      	ldr	r2, [pc, #68]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800837a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800837c:	e00e      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800837e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008382:	3308      	adds	r3, #8
 8008384:	2102      	movs	r1, #2
 8008386:	4618      	mov	r0, r3
 8008388:	f001 faae 	bl	80098e8 <RCCEx_PLL2_Config>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008392:	e003      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800839a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800839c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10d      	bne.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083a4:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b2:	4a02      	ldr	r2, [pc, #8]	@ (80083bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083b4:	430b      	orrs	r3, r1
 80083b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083b8:	e006      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80083ba:	bf00      	nop
 80083bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80083d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80083d6:	2300      	movs	r3, #0
 80083d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80083da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80083de:	460b      	mov	r3, r1
 80083e0:	4313      	orrs	r3, r2
 80083e2:	d00c      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e8:	3328      	adds	r3, #40	@ 0x28
 80083ea:	2102      	movs	r1, #2
 80083ec:	4618      	mov	r0, r3
 80083ee:	f001 fb2d 	bl	8009a4c <RCCEx_PLL3_Config>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008406:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800840a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800840c:	2300      	movs	r3, #0
 800840e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008410:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008414:	460b      	mov	r3, r1
 8008416:	4313      	orrs	r3, r2
 8008418:	d036      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800841a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008424:	d018      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800842a:	d811      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800842c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008430:	d014      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008436:	d80b      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008438:	2b00      	cmp	r3, #0
 800843a:	d011      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800843c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008440:	d106      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008442:	4bb7      	ldr	r3, [pc, #732]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	4ab6      	ldr	r2, [pc, #728]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800844c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800844e:	e008      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008456:	e004      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008458:	bf00      	nop
 800845a:	e002      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800845c:	bf00      	nop
 800845e:	e000      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800846a:	4bad      	ldr	r3, [pc, #692]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800846c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008478:	4aa9      	ldr	r2, [pc, #676]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800847a:	430b      	orrs	r3, r1
 800847c:	6553      	str	r3, [r2, #84]	@ 0x54
 800847e:	e003      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008484:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008494:	653b      	str	r3, [r7, #80]	@ 0x50
 8008496:	2300      	movs	r3, #0
 8008498:	657b      	str	r3, [r7, #84]	@ 0x54
 800849a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800849e:	460b      	mov	r3, r1
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d009      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084a4:	4b9e      	ldr	r3, [pc, #632]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b2:	4a9b      	ldr	r2, [pc, #620]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084b4:	430b      	orrs	r3, r1
 80084b6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80084c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084c6:	2300      	movs	r3, #0
 80084c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80084ce:	460b      	mov	r3, r1
 80084d0:	4313      	orrs	r3, r2
 80084d2:	d009      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084d4:	4b92      	ldr	r3, [pc, #584]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80084dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084e2:	4a8f      	ldr	r2, [pc, #572]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084e4:	430b      	orrs	r3, r1
 80084e6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80084f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084f6:	2300      	movs	r3, #0
 80084f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80084fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80084fe:	460b      	mov	r3, r1
 8008500:	4313      	orrs	r3, r2
 8008502:	d00e      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008504:	4b86      	ldr	r3, [pc, #536]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	4a85      	ldr	r2, [pc, #532]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800850a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800850e:	6113      	str	r3, [r2, #16]
 8008510:	4b83      	ldr	r3, [pc, #524]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008512:	6919      	ldr	r1, [r3, #16]
 8008514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800851c:	4a80      	ldr	r2, [pc, #512]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800851e:	430b      	orrs	r3, r1
 8008520:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800852e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008530:	2300      	movs	r3, #0
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008534:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008538:	460b      	mov	r3, r1
 800853a:	4313      	orrs	r3, r2
 800853c:	d009      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800853e:	4b78      	ldr	r3, [pc, #480]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008542:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854c:	4a74      	ldr	r2, [pc, #464]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800854e:	430b      	orrs	r3, r1
 8008550:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800855e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008560:	2300      	movs	r3, #0
 8008562:	637b      	str	r3, [r7, #52]	@ 0x34
 8008564:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008568:	460b      	mov	r3, r1
 800856a:	4313      	orrs	r3, r2
 800856c:	d00a      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800856e:	4b6c      	ldr	r3, [pc, #432]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008572:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857e:	4a68      	ldr	r2, [pc, #416]	@ (8008720 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008580:	430b      	orrs	r3, r1
 8008582:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	2100      	movs	r1, #0
 800858e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008596:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d011      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	3308      	adds	r3, #8
 80085a6:	2100      	movs	r1, #0
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 f99d 	bl	80098e8 <RCCEx_PLL2_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	2100      	movs	r1, #0
 80085ce:	6239      	str	r1, [r7, #32]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085da:	460b      	mov	r3, r1
 80085dc:	4313      	orrs	r3, r2
 80085de:	d011      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e4:	3308      	adds	r3, #8
 80085e6:	2101      	movs	r1, #1
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f97d 	bl	80098e8 <RCCEx_PLL2_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	2100      	movs	r1, #0
 800860e:	61b9      	str	r1, [r7, #24]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	61fb      	str	r3, [r7, #28]
 8008616:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800861a:	460b      	mov	r3, r1
 800861c:	4313      	orrs	r3, r2
 800861e:	d011      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008624:	3308      	adds	r3, #8
 8008626:	2102      	movs	r1, #2
 8008628:	4618      	mov	r0, r3
 800862a:	f001 f95d 	bl	80098e8 <RCCEx_PLL2_Config>
 800862e:	4603      	mov	r3, r0
 8008630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	2100      	movs	r1, #0
 800864e:	6139      	str	r1, [r7, #16]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800865a:	460b      	mov	r3, r1
 800865c:	4313      	orrs	r3, r2
 800865e:	d011      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008664:	3328      	adds	r3, #40	@ 0x28
 8008666:	2100      	movs	r1, #0
 8008668:	4618      	mov	r0, r3
 800866a:	f001 f9ef 	bl	8009a4c <RCCEx_PLL3_Config>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	2100      	movs	r1, #0
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800869a:	460b      	mov	r3, r1
 800869c:	4313      	orrs	r3, r2
 800869e:	d011      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a4:	3328      	adds	r3, #40	@ 0x28
 80086a6:	2101      	movs	r1, #1
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 f9cf 	bl	8009a4c <RCCEx_PLL3_Config>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80086b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	2100      	movs	r1, #0
 80086ce:	6039      	str	r1, [r7, #0]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086da:	460b      	mov	r3, r1
 80086dc:	4313      	orrs	r3, r2
 80086de:	d011      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e4:	3328      	adds	r3, #40	@ 0x28
 80086e6:	2102      	movs	r1, #2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 f9af 	bl	8009a4c <RCCEx_PLL3_Config>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80086f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008700:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008704:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	e000      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
}
 8008712:	4618      	mov	r0, r3
 8008714:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008718:	46bd      	mov	sp, r7
 800871a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800871e:	bf00      	nop
 8008720:	58024400 	.word	0x58024400

08008724 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b090      	sub	sp, #64	@ 0x40
 8008728:	af00      	add	r7, sp, #0
 800872a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800872e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008732:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008736:	430b      	orrs	r3, r1
 8008738:	f040 8094 	bne.w	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800873c:	4b9b      	ldr	r3, [pc, #620]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800873e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008748:	2b04      	cmp	r3, #4
 800874a:	f200 8087 	bhi.w	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800874e:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	08008769 	.word	0x08008769
 8008758:	08008791 	.word	0x08008791
 800875c:	080087b9 	.word	0x080087b9
 8008760:	08008855 	.word	0x08008855
 8008764:	080087e1 	.word	0x080087e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008768:	4b90      	ldr	r3, [pc, #576]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008770:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008774:	d108      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800877a:	4618      	mov	r0, r3
 800877c:	f000 ff62 	bl	8009644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008784:	f000 bc93 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800878c:	f000 bc8f 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008790:	4b86      	ldr	r3, [pc, #536]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800879c:	d108      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800879e:	f107 0318 	add.w	r3, r7, #24
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fca6 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ac:	f000 bc7f 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087b4:	f000 bc7b 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087b8:	4b7c      	ldr	r3, [pc, #496]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087c4:	d108      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087c6:	f107 030c 	add.w	r3, r7, #12
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fde6 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d4:	f000 bc6b 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087dc:	f000 bc67 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087e0:	4b72      	ldr	r3, [pc, #456]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087ea:	4b70      	ldr	r3, [pc, #448]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d10c      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80087f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d109      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087fc:	4b6b      	ldr	r3, [pc, #428]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	08db      	lsrs	r3, r3, #3
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	4a6a      	ldr	r2, [pc, #424]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
 800880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800880e:	e01f      	b.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008810:	4b66      	ldr	r3, [pc, #408]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800881c:	d106      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800881e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008824:	d102      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008826:	4b63      	ldr	r3, [pc, #396]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800882a:	e011      	b.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800882c:	4b5f      	ldr	r3, [pc, #380]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008838:	d106      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800883a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800883c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008840:	d102      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008842:	4b5d      	ldr	r3, [pc, #372]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008846:	e003      	b.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800884c:	f000 bc2f 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008850:	f000 bc2d 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008854:	4b59      	ldr	r3, [pc, #356]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008858:	f000 bc29 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008860:	f000 bc25 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008868:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800886c:	430b      	orrs	r3, r1
 800886e:	f040 80a7 	bne.w	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008872:	4b4e      	ldr	r3, [pc, #312]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008876:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800887a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008882:	d054      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800888a:	f200 808b 	bhi.w	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008894:	f000 8083 	beq.w	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800889e:	f200 8081 	bhi.w	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088a8:	d02f      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088b0:	d878      	bhi.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d004      	beq.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088be:	d012      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80088c0:	e070      	b.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088c2:	4b3a      	ldr	r3, [pc, #232]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088ce:	d107      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 feb5 	bl	8009644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088de:	e3e6      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e4:	e3e3      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e6:	4b31      	ldr	r3, [pc, #196]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088f2:	d107      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f4:	f107 0318 	add.w	r3, r7, #24
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fbfb 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008902:	e3d4      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008908:	e3d1      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800890a:	4b28      	ldr	r3, [pc, #160]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008916:	d107      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008918:	f107 030c 	add.w	r3, r7, #12
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fd3d 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008926:	e3c2      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800892c:	e3bf      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800892e:	4b1f      	ldr	r3, [pc, #124]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008932:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008938:	4b1c      	ldr	r3, [pc, #112]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b04      	cmp	r3, #4
 8008942:	d10c      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894a:	4b18      	ldr	r3, [pc, #96]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	08db      	lsrs	r3, r3, #3
 8008950:	f003 0303 	and.w	r3, r3, #3
 8008954:	4a16      	ldr	r2, [pc, #88]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008956:	fa22 f303 	lsr.w	r3, r2, r3
 800895a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800895c:	e01e      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800895e:	4b13      	ldr	r3, [pc, #76]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800896a:	d106      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800896c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008972:	d102      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008974:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008978:	e010      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800897a:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008986:	d106      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800898e:	d102      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008990:	4b09      	ldr	r3, [pc, #36]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008994:	e002      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800899a:	e388      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800899c:	e387      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800899e:	4b07      	ldr	r3, [pc, #28]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80089a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a2:	e384      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a8:	e381      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089aa:	bf00      	nop
 80089ac:	58024400 	.word	0x58024400
 80089b0:	03d09000 	.word	0x03d09000
 80089b4:	003d0900 	.word	0x003d0900
 80089b8:	016e3600 	.word	0x016e3600
 80089bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80089c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80089c8:	430b      	orrs	r3, r1
 80089ca:	f040 809c 	bne.w	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80089ce:	4b9e      	ldr	r3, [pc, #632]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80089d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089de:	d054      	beq.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089e6:	f200 808b 	bhi.w	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089f0:	f000 8083 	beq.w	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089fa:	f200 8081 	bhi.w	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a04:	d02f      	beq.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a0c:	d878      	bhi.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a1a:	d012      	beq.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008a1c:	e070      	b.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a1e:	4b8a      	ldr	r3, [pc, #552]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a2a:	d107      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fe07 	bl	8009644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a3a:	e338      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a40:	e335      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a42:	4b81      	ldr	r3, [pc, #516]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a4e:	d107      	bne.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a50:	f107 0318 	add.w	r3, r7, #24
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fb4d 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5e:	e326      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a64:	e323      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a66:	4b78      	ldr	r3, [pc, #480]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a72:	d107      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a74:	f107 030c 	add.w	r3, r7, #12
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fc8f 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a82:	e314      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a88:	e311      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a94:	4b6c      	ldr	r3, [pc, #432]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d10c      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aa6:	4b68      	ldr	r3, [pc, #416]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	08db      	lsrs	r3, r3, #3
 8008aac:	f003 0303 	and.w	r3, r3, #3
 8008ab0:	4a66      	ldr	r2, [pc, #408]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ab8:	e01e      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aba:	4b63      	ldr	r3, [pc, #396]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac6:	d106      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ace:	d102      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ad4:	e010      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ae2:	d106      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aea:	d102      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008aec:	4b59      	ldr	r3, [pc, #356]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af0:	e002      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008af6:	e2da      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008af8:	e2d9      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008afa:	4b57      	ldr	r3, [pc, #348]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afe:	e2d6      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b04:	e2d3      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b0a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008b0e:	430b      	orrs	r3, r1
 8008b10:	f040 80a7 	bne.w	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008b14:	4b4c      	ldr	r3, [pc, #304]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b18:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008b1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b24:	d055      	beq.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b2c:	f200 8096 	bhi.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b36:	f000 8084 	beq.w	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b40:	f200 808c 	bhi.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b4a:	d030      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b52:	f200 8083 	bhi.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d004      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b62:	d012      	beq.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008b64:	e07a      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b66:	4b38      	ldr	r3, [pc, #224]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b72:	d107      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fd63 	bl	8009644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b82:	e294      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b88:	e291      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b96:	d107      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b98:	f107 0318 	add.w	r3, r7, #24
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 faa9 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba6:	e282      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bac:	e27f      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bae:	4b26      	ldr	r3, [pc, #152]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bba:	d107      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bbc:	f107 030c 	add.w	r3, r7, #12
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fbeb 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bca:	e270      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd0:	e26d      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d10c      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d109      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bee:	4b16      	ldr	r3, [pc, #88]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	08db      	lsrs	r3, r3, #3
 8008bf4:	f003 0303 	and.w	r3, r3, #3
 8008bf8:	4a14      	ldr	r2, [pc, #80]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c00:	e01e      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c02:	4b11      	ldr	r3, [pc, #68]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c0e:	d106      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c16:	d102      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c18:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c1c:	e010      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c2a:	d106      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c32:	d102      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c34:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c38:	e002      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c3e:	e236      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c40:	e235      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c42:	4b05      	ldr	r3, [pc, #20]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c46:	e232      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	03d09000 	.word	0x03d09000
 8008c50:	003d0900 	.word	0x003d0900
 8008c54:	016e3600 	.word	0x016e3600
 8008c58:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c60:	e225      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c66:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	f040 8085 	bne.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008c70:	4b9c      	ldr	r3, [pc, #624]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c74:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c78:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c80:	d06b      	beq.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c88:	d874      	bhi.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c90:	d056      	beq.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c98:	d86c      	bhi.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ca0:	d03b      	beq.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ca8:	d864      	bhi.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cb0:	d021      	beq.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cb8:	d85c      	bhi.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc6:	d004      	beq.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008cc8:	e054      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008cca:	f7fe fb5f 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 8008cce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cd0:	e1ed      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cd2:	4b84      	ldr	r3, [pc, #528]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cde:	d107      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ce0:	f107 0318 	add.w	r3, r7, #24
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fa05 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cee:	e1de      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf4:	e1db      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d02:	d107      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d04:	f107 030c 	add.w	r3, r7, #12
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 fb47 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d12:	e1cc      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d18:	e1c9      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d1a:	4b72      	ldr	r3, [pc, #456]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d109      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d26:	4b6f      	ldr	r3, [pc, #444]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	08db      	lsrs	r3, r3, #3
 8008d2c:	f003 0303 	and.w	r3, r3, #3
 8008d30:	4a6d      	ldr	r2, [pc, #436]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008d32:	fa22 f303 	lsr.w	r3, r2, r3
 8008d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d38:	e1b9      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d3e:	e1b6      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d40:	4b68      	ldr	r3, [pc, #416]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d4c:	d102      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008d4e:	4b67      	ldr	r3, [pc, #412]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d52:	e1ac      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d58:	e1a9      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d5a:	4b62      	ldr	r3, [pc, #392]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d66:	d102      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008d68:	4b61      	ldr	r3, [pc, #388]	@ (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d6c:	e19f      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d72:	e19c      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d78:	e199      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008d82:	430b      	orrs	r3, r1
 8008d84:	d173      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d86:	4b57      	ldr	r3, [pc, #348]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d96:	d02f      	beq.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d9e:	d863      	bhi.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d004      	beq.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dac:	d012      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008dae:	e05b      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008db0:	4b4c      	ldr	r3, [pc, #304]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008db8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dbc:	d107      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dbe:	f107 0318 	add.w	r3, r7, #24
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f996 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dcc:	e16f      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd2:	e16c      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dd4:	4b43      	ldr	r3, [pc, #268]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008de0:	d107      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de2:	f107 030c 	add.w	r3, r7, #12
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fad8 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df0:	e15d      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df6:	e15a      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008df8:	4b3a      	ldr	r3, [pc, #232]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e02:	4b38      	ldr	r3, [pc, #224]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d10c      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d109      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e14:	4b33      	ldr	r3, [pc, #204]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	08db      	lsrs	r3, r3, #3
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	4a32      	ldr	r2, [pc, #200]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
 8008e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e26:	e01e      	b.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e28:	4b2e      	ldr	r3, [pc, #184]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e34:	d106      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e3c:	d102      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e42:	e010      	b.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e44:	4b27      	ldr	r3, [pc, #156]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e50:	d106      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e58:	d102      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e5a:	4b25      	ldr	r3, [pc, #148]	@ (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e5e:	e002      	b.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e64:	e123      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e66:	e122      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6c:	e11f      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e72:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008e76:	430b      	orrs	r3, r1
 8008e78:	d13c      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d004      	beq.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e90:	d012      	beq.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008e92:	e023      	b.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e94:	4b13      	ldr	r3, [pc, #76]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fbcc 	bl	8009644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb0:	e0fd      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb6:	e0fa      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ec0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ec4:	d107      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ec6:	f107 0318 	add.w	r3, r7, #24
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 f912 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ed4:	e0eb      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eda:	e0e8      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee0:	e0e5      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ee2:	bf00      	nop
 8008ee4:	58024400 	.word	0x58024400
 8008ee8:	03d09000 	.word	0x03d09000
 8008eec:	003d0900 	.word	0x003d0900
 8008ef0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008efc:	430b      	orrs	r3, r1
 8008efe:	f040 8085 	bne.w	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008f02:	4b6d      	ldr	r3, [pc, #436]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f06:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008f0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f12:	d06b      	beq.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f1a:	d874      	bhi.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f22:	d056      	beq.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f2a:	d86c      	bhi.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f32:	d03b      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f3a:	d864      	bhi.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f42:	d021      	beq.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f4a:	d85c      	bhi.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d004      	beq.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f58:	d004      	beq.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008f5a:	e054      	b.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f5c:	f000 f8b4 	bl	80090c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f60:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f62:	e0a4      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f64:	4b54      	ldr	r3, [pc, #336]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f70:	d107      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f72:	f107 0318 	add.w	r3, r7, #24
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 f8bc 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f80:	e095      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f86:	e092      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f88:	4b4b      	ldr	r3, [pc, #300]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f94:	d107      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 f9fe 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fa4:	e083      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008faa:	e080      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fac:	4b42      	ldr	r3, [pc, #264]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d109      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	08db      	lsrs	r3, r3, #3
 8008fbe:	f003 0303 	and.w	r3, r3, #3
 8008fc2:	4a3e      	ldr	r2, [pc, #248]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fca:	e070      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd0:	e06d      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008fd2:	4b39      	ldr	r3, [pc, #228]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fde:	d102      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008fe0:	4b37      	ldr	r3, [pc, #220]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe4:	e063      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fea:	e060      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fec:	4b32      	ldr	r3, [pc, #200]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ff8:	d102      	bne.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008ffa:	4b32      	ldr	r3, [pc, #200]	@ (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ffe:	e056      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009004:	e053      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900a:	e050      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800900c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009010:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009014:	430b      	orrs	r3, r1
 8009016:	d148      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009018:	4b27      	ldr	r3, [pc, #156]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800901a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800901c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009020:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009028:	d02a      	beq.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800902a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009030:	d838      	bhi.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800903e:	d00d      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009040:	e030      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009042:	4b1d      	ldr	r3, [pc, #116]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800904a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800904e:	d102      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009050:	4b1c      	ldr	r3, [pc, #112]	@ (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009054:	e02b      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800905a:	e028      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800905c:	4b16      	ldr	r3, [pc, #88]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009068:	d107      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800906a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fae8 	bl	8009644 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009078:	e019      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907e:	e016      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009080:	4b0d      	ldr	r3, [pc, #52]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009088:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800908c:	d107      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800908e:	f107 0318 	add.w	r3, r7, #24
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f82e 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800909c:	e007      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a2:	e004      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a8:	e001      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80090ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3740      	adds	r7, #64	@ 0x40
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	58024400 	.word	0x58024400
 80090bc:	03d09000 	.word	0x03d09000
 80090c0:	003d0900 	.word	0x003d0900
 80090c4:	016e3600 	.word	0x016e3600

080090c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80090cc:	f7fe f92e 	bl	800732c <HAL_RCC_GetHCLKFreq>
 80090d0:	4602      	mov	r2, r0
 80090d2:	4b06      	ldr	r3, [pc, #24]	@ (80090ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	091b      	lsrs	r3, r3, #4
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	4904      	ldr	r1, [pc, #16]	@ (80090f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80090de:	5ccb      	ldrb	r3, [r1, r3]
 80090e0:	f003 031f 	and.w	r3, r3, #31
 80090e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	58024400 	.word	0x58024400
 80090f0:	0800bcfc 	.word	0x0800bcfc

080090f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b089      	sub	sp, #36	@ 0x24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090fc:	4ba1      	ldr	r3, [pc, #644]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009100:	f003 0303 	and.w	r3, r3, #3
 8009104:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009106:	4b9f      	ldr	r3, [pc, #636]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	0b1b      	lsrs	r3, r3, #12
 800910c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009110:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009112:	4b9c      	ldr	r3, [pc, #624]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	091b      	lsrs	r3, r3, #4
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800911e:	4b99      	ldr	r3, [pc, #612]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009122:	08db      	lsrs	r3, r3, #3
 8009124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	fb02 f303 	mul.w	r3, r2, r3
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8111 	beq.w	8009364 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	2b02      	cmp	r3, #2
 8009146:	f000 8083 	beq.w	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b02      	cmp	r3, #2
 800914e:	f200 80a1 	bhi.w	8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d003      	beq.n	8009160 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d056      	beq.n	800920c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800915e:	e099      	b.n	8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009160:	4b88      	ldr	r3, [pc, #544]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b00      	cmp	r3, #0
 800916a:	d02d      	beq.n	80091c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800916c:	4b85      	ldr	r3, [pc, #532]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	08db      	lsrs	r3, r3, #3
 8009172:	f003 0303 	and.w	r3, r3, #3
 8009176:	4a84      	ldr	r2, [pc, #528]	@ (8009388 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009178:	fa22 f303 	lsr.w	r3, r2, r3
 800917c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009196:	4b7b      	ldr	r3, [pc, #492]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800938c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091c6:	e087      	b.n	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009390 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80091d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091da:	4b6a      	ldr	r3, [pc, #424]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800938c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800920a:	e065      	b.n	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800921a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921e:	4b59      	ldr	r3, [pc, #356]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009232:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800938c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800924e:	e043      	b.n	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009398 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800925e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009262:	4b48      	ldr	r3, [pc, #288]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009272:	ed97 6a03 	vldr	s12, [r7, #12]
 8009276:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800938c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800927a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800928a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009292:	e021      	b.n	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a6:	4b37      	ldr	r3, [pc, #220]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800938c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80092d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092dc:	0a5b      	lsrs	r3, r3, #9
 80092de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092fe:	ee17 2a90 	vmov	r2, s15
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009306:	4b1f      	ldr	r3, [pc, #124]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009310:	ee07 3a90 	vmov	s15, r3
 8009314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009318:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800931c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009320:	edd7 6a07 	vldr	s13, [r7, #28]
 8009324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800932c:	ee17 2a90 	vmov	r2, s15
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009334:	4b13      	ldr	r3, [pc, #76]	@ (8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009338:	0e1b      	lsrs	r3, r3, #24
 800933a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800934a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800934e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800935a:	ee17 2a90 	vmov	r2, s15
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009362:	e008      	b.n	8009376 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	609a      	str	r2, [r3, #8]
}
 8009376:	bf00      	nop
 8009378:	3724      	adds	r7, #36	@ 0x24
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	58024400 	.word	0x58024400
 8009388:	03d09000 	.word	0x03d09000
 800938c:	46000000 	.word	0x46000000
 8009390:	4c742400 	.word	0x4c742400
 8009394:	4a742400 	.word	0x4a742400
 8009398:	4bb71b00 	.word	0x4bb71b00

0800939c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800939c:	b480      	push	{r7}
 800939e:	b089      	sub	sp, #36	@ 0x24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093a4:	4ba1      	ldr	r3, [pc, #644]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80093ae:	4b9f      	ldr	r3, [pc, #636]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b2:	0d1b      	lsrs	r3, r3, #20
 80093b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80093ba:	4b9c      	ldr	r3, [pc, #624]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80093c6:	4b99      	ldr	r3, [pc, #612]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ca:	08db      	lsrs	r3, r3, #3
 80093cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	fb02 f303 	mul.w	r3, r2, r3
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8111 	beq.w	800960c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	f000 8083 	beq.w	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	f200 80a1 	bhi.w	800953c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d056      	beq.n	80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009406:	e099      	b.n	800953c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009408:	4b88      	ldr	r3, [pc, #544]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d02d      	beq.n	8009470 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009414:	4b85      	ldr	r3, [pc, #532]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	08db      	lsrs	r3, r3, #3
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	4a84      	ldr	r2, [pc, #528]	@ (8009630 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009420:	fa22 f303 	lsr.w	r3, r2, r3
 8009424:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943e:	4b7b      	ldr	r3, [pc, #492]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009452:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800946e:	e087      	b.n	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009638 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b6a      	ldr	r3, [pc, #424]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009492:	ed97 6a03 	vldr	s12, [r7, #12]
 8009496:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b2:	e065      	b.n	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800963c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c6:	4b59      	ldr	r3, [pc, #356]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f6:	e043      	b.n	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009502:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009640 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800950a:	4b48      	ldr	r3, [pc, #288]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800950c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951a:	ed97 6a03 	vldr	s12, [r7, #12]
 800951e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800952a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800952e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800953a:	e021      	b.n	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009546:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800963c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954e:	4b37      	ldr	r3, [pc, #220]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009562:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800957e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009580:	4b2a      	ldr	r3, [pc, #168]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009584:	0a5b      	lsrs	r3, r3, #9
 8009586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009592:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800959a:	edd7 6a07 	vldr	s13, [r7, #28]
 800959e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a6:	ee17 2a90 	vmov	r2, s15
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80095ae:	4b1f      	ldr	r3, [pc, #124]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b2:	0c1b      	lsrs	r3, r3, #16
 80095b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095b8:	ee07 3a90 	vmov	s15, r3
 80095bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80095cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d4:	ee17 2a90 	vmov	r2, s15
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80095dc:	4b13      	ldr	r3, [pc, #76]	@ (800962c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e0:	0e1b      	lsrs	r3, r3, #24
 80095e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80095fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009602:	ee17 2a90 	vmov	r2, s15
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800960a:	e008      	b.n	800961e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	609a      	str	r2, [r3, #8]
}
 800961e:	bf00      	nop
 8009620:	3724      	adds	r7, #36	@ 0x24
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	58024400 	.word	0x58024400
 8009630:	03d09000 	.word	0x03d09000
 8009634:	46000000 	.word	0x46000000
 8009638:	4c742400 	.word	0x4c742400
 800963c:	4a742400 	.word	0x4a742400
 8009640:	4bb71b00 	.word	0x4bb71b00

08009644 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009644:	b480      	push	{r7}
 8009646:	b089      	sub	sp, #36	@ 0x24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800964c:	4ba0      	ldr	r3, [pc, #640]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800964e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009650:	f003 0303 	and.w	r3, r3, #3
 8009654:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009656:	4b9e      	ldr	r3, [pc, #632]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965a:	091b      	lsrs	r3, r3, #4
 800965c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009660:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009662:	4b9b      	ldr	r3, [pc, #620]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800966c:	4b98      	ldr	r3, [pc, #608]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800966e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009670:	08db      	lsrs	r3, r3, #3
 8009672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	fb02 f303 	mul.w	r3, r2, r3
 800967c:	ee07 3a90 	vmov	s15, r3
 8009680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009684:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 8111 	beq.w	80098b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b02      	cmp	r3, #2
 8009694:	f000 8083 	beq.w	800979e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	2b02      	cmp	r3, #2
 800969c:	f200 80a1 	bhi.w	80097e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d056      	beq.n	800975a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80096ac:	e099      	b.n	80097e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096ae:	4b88      	ldr	r3, [pc, #544]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0320 	and.w	r3, r3, #32
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d02d      	beq.n	8009716 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096ba:	4b85      	ldr	r3, [pc, #532]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	08db      	lsrs	r3, r3, #3
 80096c0:	f003 0303 	and.w	r3, r3, #3
 80096c4:	4a83      	ldr	r2, [pc, #524]	@ (80098d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80096c6:	fa22 f303 	lsr.w	r3, r2, r3
 80096ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e4:	4b7a      	ldr	r3, [pc, #488]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80098d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009704:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009710:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009714:	e087      	b.n	8009826 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	ee07 3a90 	vmov	s15, r3
 800971c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009720:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80098dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009728:	4b69      	ldr	r3, [pc, #420]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800972a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800972c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009738:	ed97 6a03 	vldr	s12, [r7, #12]
 800973c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80098d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009748:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800974c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009754:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009758:	e065      	b.n	8009826 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	ee07 3a90 	vmov	s15, r3
 8009760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009764:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80098e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800976c:	4b58      	ldr	r3, [pc, #352]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800977c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009780:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80098d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800978c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009798:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800979c:	e043      	b.n	8009826 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	ee07 3a90 	vmov	s15, r3
 80097a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80098e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80097ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097b0:	4b47      	ldr	r3, [pc, #284]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b8:	ee07 3a90 	vmov	s15, r3
 80097bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80097c4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80098d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097e0:	e021      	b.n	8009826 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	ee07 3a90 	vmov	s15, r3
 80097e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80098dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097f4:	4b36      	ldr	r3, [pc, #216]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fc:	ee07 3a90 	vmov	s15, r3
 8009800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009804:	ed97 6a03 	vldr	s12, [r7, #12]
 8009808:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80098d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800980c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009814:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800981c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009820:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009824:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009826:	4b2a      	ldr	r3, [pc, #168]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982a:	0a5b      	lsrs	r3, r3, #9
 800982c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009830:	ee07 3a90 	vmov	s15, r3
 8009834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800983c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009840:	edd7 6a07 	vldr	s13, [r7, #28]
 8009844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800984c:	ee17 2a90 	vmov	r2, s15
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009854:	4b1e      	ldr	r3, [pc, #120]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009858:	0c1b      	lsrs	r3, r3, #16
 800985a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800986a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800986e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800987a:	ee17 2a90 	vmov	r2, s15
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009882:	4b13      	ldr	r3, [pc, #76]	@ (80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009886:	0e1b      	lsrs	r3, r3, #24
 8009888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009898:	ee37 7a87 	vadd.f32	s14, s15, s14
 800989c:	edd7 6a07 	vldr	s13, [r7, #28]
 80098a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a8:	ee17 2a90 	vmov	r2, s15
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80098b0:	e008      	b.n	80098c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	609a      	str	r2, [r3, #8]
}
 80098c4:	bf00      	nop
 80098c6:	3724      	adds	r7, #36	@ 0x24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	58024400 	.word	0x58024400
 80098d4:	03d09000 	.word	0x03d09000
 80098d8:	46000000 	.word	0x46000000
 80098dc:	4c742400 	.word	0x4c742400
 80098e0:	4a742400 	.word	0x4a742400
 80098e4:	4bb71b00 	.word	0x4bb71b00

080098e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098f6:	4b53      	ldr	r3, [pc, #332]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80098f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d101      	bne.n	8009906 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e099      	b.n	8009a3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009906:	4b4f      	ldr	r3, [pc, #316]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a4e      	ldr	r2, [pc, #312]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 800990c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009912:	f7f9 f955 	bl	8002bc0 <HAL_GetTick>
 8009916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009918:	e008      	b.n	800992c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800991a:	f7f9 f951 	bl	8002bc0 <HAL_GetTick>
 800991e:	4602      	mov	r2, r0
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	2b02      	cmp	r3, #2
 8009926:	d901      	bls.n	800992c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e086      	b.n	8009a3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800992c:	4b45      	ldr	r3, [pc, #276]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1f0      	bne.n	800991a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009938:	4b42      	ldr	r3, [pc, #264]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 800993a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	031b      	lsls	r3, r3, #12
 8009946:	493f      	ldr	r1, [pc, #252]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009948:	4313      	orrs	r3, r2
 800994a:	628b      	str	r3, [r1, #40]	@ 0x28
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	3b01      	subs	r3, #1
 800995c:	025b      	lsls	r3, r3, #9
 800995e:	b29b      	uxth	r3, r3
 8009960:	431a      	orrs	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	3b01      	subs	r3, #1
 8009968:	041b      	lsls	r3, r3, #16
 800996a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	3b01      	subs	r3, #1
 8009976:	061b      	lsls	r3, r3, #24
 8009978:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800997c:	4931      	ldr	r1, [pc, #196]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 800997e:	4313      	orrs	r3, r2
 8009980:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009982:	4b30      	ldr	r3, [pc, #192]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009986:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	492d      	ldr	r1, [pc, #180]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009990:	4313      	orrs	r3, r2
 8009992:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009994:	4b2b      	ldr	r3, [pc, #172]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009998:	f023 0220 	bic.w	r2, r3, #32
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	4928      	ldr	r1, [pc, #160]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80099a6:	4b27      	ldr	r3, [pc, #156]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099aa:	4a26      	ldr	r2, [pc, #152]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099ac:	f023 0310 	bic.w	r3, r3, #16
 80099b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099b2:	4b24      	ldr	r3, [pc, #144]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099b6:	4b24      	ldr	r3, [pc, #144]	@ (8009a48 <RCCEx_PLL2_Config+0x160>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	69d2      	ldr	r2, [r2, #28]
 80099be:	00d2      	lsls	r2, r2, #3
 80099c0:	4920      	ldr	r1, [pc, #128]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80099c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099cc:	f043 0310 	orr.w	r3, r3, #16
 80099d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d106      	bne.n	80099e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80099d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099dc:	4a19      	ldr	r2, [pc, #100]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099e4:	e00f      	b.n	8009a06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d106      	bne.n	80099fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80099ec:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f0:	4a14      	ldr	r2, [pc, #80]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099f8:	e005      	b.n	8009a06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099fa:	4b12      	ldr	r3, [pc, #72]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	4a11      	ldr	r2, [pc, #68]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009a00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a06:	4b0f      	ldr	r3, [pc, #60]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009a0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a12:	f7f9 f8d5 	bl	8002bc0 <HAL_GetTick>
 8009a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a18:	e008      	b.n	8009a2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a1a:	f7f9 f8d1 	bl	8002bc0 <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d901      	bls.n	8009a2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e006      	b.n	8009a3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a2c:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <RCCEx_PLL2_Config+0x15c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0f0      	beq.n	8009a1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	58024400 	.word	0x58024400
 8009a48:	ffff0007 	.word	0xffff0007

08009a4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a5a:	4b53      	ldr	r3, [pc, #332]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d101      	bne.n	8009a6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e099      	b.n	8009b9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a4e      	ldr	r2, [pc, #312]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a76:	f7f9 f8a3 	bl	8002bc0 <HAL_GetTick>
 8009a7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a7c:	e008      	b.n	8009a90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a7e:	f7f9 f89f 	bl	8002bc0 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d901      	bls.n	8009a90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e086      	b.n	8009b9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a90:	4b45      	ldr	r3, [pc, #276]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f0      	bne.n	8009a7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a9c:	4b42      	ldr	r3, [pc, #264]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	051b      	lsls	r3, r3, #20
 8009aaa:	493f      	ldr	r1, [pc, #252]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009aac:	4313      	orrs	r3, r2
 8009aae:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	025b      	lsls	r3, r3, #9
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	041b      	lsls	r3, r3, #16
 8009ace:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	061b      	lsls	r3, r3, #24
 8009adc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ae0:	4931      	ldr	r1, [pc, #196]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ae6:	4b30      	ldr	r3, [pc, #192]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	492d      	ldr	r1, [pc, #180]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009af8:	4b2b      	ldr	r3, [pc, #172]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	4928      	ldr	r1, [pc, #160]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b0a:	4b27      	ldr	r3, [pc, #156]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0e:	4a26      	ldr	r2, [pc, #152]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b16:	4b24      	ldr	r3, [pc, #144]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b1a:	4b24      	ldr	r3, [pc, #144]	@ (8009bac <RCCEx_PLL3_Config+0x160>)
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	69d2      	ldr	r2, [r2, #28]
 8009b22:	00d2      	lsls	r2, r2, #3
 8009b24:	4920      	ldr	r1, [pc, #128]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d106      	bne.n	8009b4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b40:	4a19      	ldr	r2, [pc, #100]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009b46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b48:	e00f      	b.n	8009b6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d106      	bne.n	8009b5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b50:	4b15      	ldr	r3, [pc, #84]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b54:	4a14      	ldr	r2, [pc, #80]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b5c:	e005      	b.n	8009b6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b5e:	4b12      	ldr	r3, [pc, #72]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	4a11      	ldr	r2, [pc, #68]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b76:	f7f9 f823 	bl	8002bc0 <HAL_GetTick>
 8009b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b7c:	e008      	b.n	8009b90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b7e:	f7f9 f81f 	bl	8002bc0 <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d901      	bls.n	8009b90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e006      	b.n	8009b9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b90:	4b05      	ldr	r3, [pc, #20]	@ (8009ba8 <RCCEx_PLL3_Config+0x15c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0f0      	beq.n	8009b7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	58024400 	.word	0x58024400
 8009bac:	ffff0007 	.word	0xffff0007

08009bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e042      	b.n	8009c48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7f8 fdf3 	bl	80027c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2224      	movs	r2, #36	@ 0x24
 8009bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f022 0201 	bic.w	r2, r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 ff38 	bl	800aa70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f8c9 	bl	8009d98 <UART_SetConfig>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e01b      	b.n	8009c48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685a      	ldr	r2, [r3, #4]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689a      	ldr	r2, [r3, #8]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0201 	orr.w	r2, r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 ffb7 	bl	800abb4 <UART_CheckIdleState>
 8009c46:	4603      	mov	r3, r0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08a      	sub	sp, #40	@ 0x28
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	603b      	str	r3, [r7, #0]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	d17b      	bne.n	8009d62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <HAL_UART_Transmit+0x26>
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e074      	b.n	8009d64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2221      	movs	r2, #33	@ 0x21
 8009c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c8a:	f7f8 ff99 	bl	8002bc0 <HAL_GetTick>
 8009c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	88fa      	ldrh	r2, [r7, #6]
 8009c94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	88fa      	ldrh	r2, [r7, #6]
 8009c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ca8:	d108      	bne.n	8009cbc <HAL_UART_Transmit+0x6c>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	61bb      	str	r3, [r7, #24]
 8009cba:	e003      	b.n	8009cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009cc4:	e030      	b.n	8009d28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2180      	movs	r1, #128	@ 0x80
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f001 f819 	bl	800ad08 <UART_WaitOnFlagUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e03d      	b.n	8009d64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10b      	bne.n	8009d06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cfc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	3302      	adds	r3, #2
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	e007      	b.n	8009d16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	781a      	ldrb	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	3301      	adds	r3, #1
 8009d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1c8      	bne.n	8009cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2140      	movs	r1, #64	@ 0x40
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f000 ffe2 	bl	800ad08 <UART_WaitOnFlagUntilTimeout>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d005      	beq.n	8009d56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e006      	b.n	8009d64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e000      	b.n	8009d64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009d62:	2302      	movs	r3, #2
  }
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d7a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d82:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	4313      	orrs	r3, r2
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d9c:	b092      	sub	sp, #72	@ 0x48
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	431a      	orrs	r2, r3
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	4bbe      	ldr	r3, [pc, #760]	@ (800a0c0 <UART_SetConfig+0x328>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	6812      	ldr	r2, [r2, #0]
 8009dce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	68da      	ldr	r2, [r3, #12]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4ab3      	ldr	r2, [pc, #716]	@ (800a0c4 <UART_SetConfig+0x32c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d004      	beq.n	8009e04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e00:	4313      	orrs	r3, r2
 8009e02:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689a      	ldr	r2, [r3, #8]
 8009e0a:	4baf      	ldr	r3, [pc, #700]	@ (800a0c8 <UART_SetConfig+0x330>)
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e14:	430b      	orrs	r3, r1
 8009e16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1e:	f023 010f 	bic.w	r1, r3, #15
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4aa6      	ldr	r2, [pc, #664]	@ (800a0cc <UART_SetConfig+0x334>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d177      	bne.n	8009f28 <UART_SetConfig+0x190>
 8009e38:	4ba5      	ldr	r3, [pc, #660]	@ (800a0d0 <UART_SetConfig+0x338>)
 8009e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e40:	2b28      	cmp	r3, #40	@ 0x28
 8009e42:	d86d      	bhi.n	8009f20 <UART_SetConfig+0x188>
 8009e44:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <UART_SetConfig+0xb4>)
 8009e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4a:	bf00      	nop
 8009e4c:	08009ef1 	.word	0x08009ef1
 8009e50:	08009f21 	.word	0x08009f21
 8009e54:	08009f21 	.word	0x08009f21
 8009e58:	08009f21 	.word	0x08009f21
 8009e5c:	08009f21 	.word	0x08009f21
 8009e60:	08009f21 	.word	0x08009f21
 8009e64:	08009f21 	.word	0x08009f21
 8009e68:	08009f21 	.word	0x08009f21
 8009e6c:	08009ef9 	.word	0x08009ef9
 8009e70:	08009f21 	.word	0x08009f21
 8009e74:	08009f21 	.word	0x08009f21
 8009e78:	08009f21 	.word	0x08009f21
 8009e7c:	08009f21 	.word	0x08009f21
 8009e80:	08009f21 	.word	0x08009f21
 8009e84:	08009f21 	.word	0x08009f21
 8009e88:	08009f21 	.word	0x08009f21
 8009e8c:	08009f01 	.word	0x08009f01
 8009e90:	08009f21 	.word	0x08009f21
 8009e94:	08009f21 	.word	0x08009f21
 8009e98:	08009f21 	.word	0x08009f21
 8009e9c:	08009f21 	.word	0x08009f21
 8009ea0:	08009f21 	.word	0x08009f21
 8009ea4:	08009f21 	.word	0x08009f21
 8009ea8:	08009f21 	.word	0x08009f21
 8009eac:	08009f09 	.word	0x08009f09
 8009eb0:	08009f21 	.word	0x08009f21
 8009eb4:	08009f21 	.word	0x08009f21
 8009eb8:	08009f21 	.word	0x08009f21
 8009ebc:	08009f21 	.word	0x08009f21
 8009ec0:	08009f21 	.word	0x08009f21
 8009ec4:	08009f21 	.word	0x08009f21
 8009ec8:	08009f21 	.word	0x08009f21
 8009ecc:	08009f11 	.word	0x08009f11
 8009ed0:	08009f21 	.word	0x08009f21
 8009ed4:	08009f21 	.word	0x08009f21
 8009ed8:	08009f21 	.word	0x08009f21
 8009edc:	08009f21 	.word	0x08009f21
 8009ee0:	08009f21 	.word	0x08009f21
 8009ee4:	08009f21 	.word	0x08009f21
 8009ee8:	08009f21 	.word	0x08009f21
 8009eec:	08009f19 	.word	0x08009f19
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e326      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efe:	e322      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f00:	2308      	movs	r3, #8
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f06:	e31e      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f08:	2310      	movs	r3, #16
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0e:	e31a      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f10:	2320      	movs	r3, #32
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e316      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f18:	2340      	movs	r3, #64	@ 0x40
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e312      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f20:	2380      	movs	r3, #128	@ 0x80
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e30e      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a69      	ldr	r2, [pc, #420]	@ (800a0d4 <UART_SetConfig+0x33c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d130      	bne.n	8009f94 <UART_SetConfig+0x1fc>
 8009f32:	4b67      	ldr	r3, [pc, #412]	@ (800a0d0 <UART_SetConfig+0x338>)
 8009f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b05      	cmp	r3, #5
 8009f3c:	d826      	bhi.n	8009f8c <UART_SetConfig+0x1f4>
 8009f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f44 <UART_SetConfig+0x1ac>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f5d 	.word	0x08009f5d
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f6d 	.word	0x08009f6d
 8009f50:	08009f75 	.word	0x08009f75
 8009f54:	08009f7d 	.word	0x08009f7d
 8009f58:	08009f85 	.word	0x08009f85
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f62:	e2f0      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f64:	2304      	movs	r3, #4
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6a:	e2ec      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f72:	e2e8      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f74:	2310      	movs	r3, #16
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7a:	e2e4      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f7c:	2320      	movs	r3, #32
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e2e0      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f84:	2340      	movs	r3, #64	@ 0x40
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e2dc      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f8c:	2380      	movs	r3, #128	@ 0x80
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e2d8      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a4f      	ldr	r2, [pc, #316]	@ (800a0d8 <UART_SetConfig+0x340>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d130      	bne.n	800a000 <UART_SetConfig+0x268>
 8009f9e:	4b4c      	ldr	r3, [pc, #304]	@ (800a0d0 <UART_SetConfig+0x338>)
 8009fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fa2:	f003 0307 	and.w	r3, r3, #7
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	d826      	bhi.n	8009ff8 <UART_SetConfig+0x260>
 8009faa:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb0 <UART_SetConfig+0x218>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	08009fc9 	.word	0x08009fc9
 8009fb4:	08009fd1 	.word	0x08009fd1
 8009fb8:	08009fd9 	.word	0x08009fd9
 8009fbc:	08009fe1 	.word	0x08009fe1
 8009fc0:	08009fe9 	.word	0x08009fe9
 8009fc4:	08009ff1 	.word	0x08009ff1
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fce:	e2ba      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd6:	e2b6      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009fd8:	2308      	movs	r3, #8
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fde:	e2b2      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009fe0:	2310      	movs	r3, #16
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	e2ae      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009fe8:	2320      	movs	r3, #32
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e2aa      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009ff0:	2340      	movs	r3, #64	@ 0x40
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e2a6      	b.n	800a546 <UART_SetConfig+0x7ae>
 8009ff8:	2380      	movs	r3, #128	@ 0x80
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e2a2      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a35      	ldr	r2, [pc, #212]	@ (800a0dc <UART_SetConfig+0x344>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d130      	bne.n	800a06c <UART_SetConfig+0x2d4>
 800a00a:	4b31      	ldr	r3, [pc, #196]	@ (800a0d0 <UART_SetConfig+0x338>)
 800a00c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	2b05      	cmp	r3, #5
 800a014:	d826      	bhi.n	800a064 <UART_SetConfig+0x2cc>
 800a016:	a201      	add	r2, pc, #4	@ (adr r2, 800a01c <UART_SetConfig+0x284>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a035 	.word	0x0800a035
 800a020:	0800a03d 	.word	0x0800a03d
 800a024:	0800a045 	.word	0x0800a045
 800a028:	0800a04d 	.word	0x0800a04d
 800a02c:	0800a055 	.word	0x0800a055
 800a030:	0800a05d 	.word	0x0800a05d
 800a034:	2300      	movs	r3, #0
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03a:	e284      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a03c:	2304      	movs	r3, #4
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a042:	e280      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a044:	2308      	movs	r3, #8
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e27c      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a04c:	2310      	movs	r3, #16
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a052:	e278      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a054:	2320      	movs	r3, #32
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05a:	e274      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a05c:	2340      	movs	r3, #64	@ 0x40
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a062:	e270      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a064:	2380      	movs	r3, #128	@ 0x80
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06a:	e26c      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a1b      	ldr	r2, [pc, #108]	@ (800a0e0 <UART_SetConfig+0x348>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d142      	bne.n	800a0fc <UART_SetConfig+0x364>
 800a076:	4b16      	ldr	r3, [pc, #88]	@ (800a0d0 <UART_SetConfig+0x338>)
 800a078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	2b05      	cmp	r3, #5
 800a080:	d838      	bhi.n	800a0f4 <UART_SetConfig+0x35c>
 800a082:	a201      	add	r2, pc, #4	@ (adr r2, 800a088 <UART_SetConfig+0x2f0>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a0a1 	.word	0x0800a0a1
 800a08c:	0800a0a9 	.word	0x0800a0a9
 800a090:	0800a0b1 	.word	0x0800a0b1
 800a094:	0800a0b9 	.word	0x0800a0b9
 800a098:	0800a0e5 	.word	0x0800a0e5
 800a09c:	0800a0ed 	.word	0x0800a0ed
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e24e      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a0a8:	2304      	movs	r3, #4
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e24a      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a0b0:	2308      	movs	r3, #8
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e246      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a0b8:	2310      	movs	r3, #16
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0be:	e242      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a0c0:	cfff69f3 	.word	0xcfff69f3
 800a0c4:	58000c00 	.word	0x58000c00
 800a0c8:	11fff4ff 	.word	0x11fff4ff
 800a0cc:	40011000 	.word	0x40011000
 800a0d0:	58024400 	.word	0x58024400
 800a0d4:	40004400 	.word	0x40004400
 800a0d8:	40004800 	.word	0x40004800
 800a0dc:	40004c00 	.word	0x40004c00
 800a0e0:	40005000 	.word	0x40005000
 800a0e4:	2320      	movs	r3, #32
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e22c      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a0ec:	2340      	movs	r3, #64	@ 0x40
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e228      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a0f4:	2380      	movs	r3, #128	@ 0x80
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e224      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4ab1      	ldr	r2, [pc, #708]	@ (800a3c8 <UART_SetConfig+0x630>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d176      	bne.n	800a1f4 <UART_SetConfig+0x45c>
 800a106:	4bb1      	ldr	r3, [pc, #708]	@ (800a3cc <UART_SetConfig+0x634>)
 800a108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a10a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a10e:	2b28      	cmp	r3, #40	@ 0x28
 800a110:	d86c      	bhi.n	800a1ec <UART_SetConfig+0x454>
 800a112:	a201      	add	r2, pc, #4	@ (adr r2, 800a118 <UART_SetConfig+0x380>)
 800a114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a118:	0800a1bd 	.word	0x0800a1bd
 800a11c:	0800a1ed 	.word	0x0800a1ed
 800a120:	0800a1ed 	.word	0x0800a1ed
 800a124:	0800a1ed 	.word	0x0800a1ed
 800a128:	0800a1ed 	.word	0x0800a1ed
 800a12c:	0800a1ed 	.word	0x0800a1ed
 800a130:	0800a1ed 	.word	0x0800a1ed
 800a134:	0800a1ed 	.word	0x0800a1ed
 800a138:	0800a1c5 	.word	0x0800a1c5
 800a13c:	0800a1ed 	.word	0x0800a1ed
 800a140:	0800a1ed 	.word	0x0800a1ed
 800a144:	0800a1ed 	.word	0x0800a1ed
 800a148:	0800a1ed 	.word	0x0800a1ed
 800a14c:	0800a1ed 	.word	0x0800a1ed
 800a150:	0800a1ed 	.word	0x0800a1ed
 800a154:	0800a1ed 	.word	0x0800a1ed
 800a158:	0800a1cd 	.word	0x0800a1cd
 800a15c:	0800a1ed 	.word	0x0800a1ed
 800a160:	0800a1ed 	.word	0x0800a1ed
 800a164:	0800a1ed 	.word	0x0800a1ed
 800a168:	0800a1ed 	.word	0x0800a1ed
 800a16c:	0800a1ed 	.word	0x0800a1ed
 800a170:	0800a1ed 	.word	0x0800a1ed
 800a174:	0800a1ed 	.word	0x0800a1ed
 800a178:	0800a1d5 	.word	0x0800a1d5
 800a17c:	0800a1ed 	.word	0x0800a1ed
 800a180:	0800a1ed 	.word	0x0800a1ed
 800a184:	0800a1ed 	.word	0x0800a1ed
 800a188:	0800a1ed 	.word	0x0800a1ed
 800a18c:	0800a1ed 	.word	0x0800a1ed
 800a190:	0800a1ed 	.word	0x0800a1ed
 800a194:	0800a1ed 	.word	0x0800a1ed
 800a198:	0800a1dd 	.word	0x0800a1dd
 800a19c:	0800a1ed 	.word	0x0800a1ed
 800a1a0:	0800a1ed 	.word	0x0800a1ed
 800a1a4:	0800a1ed 	.word	0x0800a1ed
 800a1a8:	0800a1ed 	.word	0x0800a1ed
 800a1ac:	0800a1ed 	.word	0x0800a1ed
 800a1b0:	0800a1ed 	.word	0x0800a1ed
 800a1b4:	0800a1ed 	.word	0x0800a1ed
 800a1b8:	0800a1e5 	.word	0x0800a1e5
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c2:	e1c0      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a1c4:	2304      	movs	r3, #4
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ca:	e1bc      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a1cc:	2308      	movs	r3, #8
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d2:	e1b8      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a1d4:	2310      	movs	r3, #16
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1da:	e1b4      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a1dc:	2320      	movs	r3, #32
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e1b0      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a1e4:	2340      	movs	r3, #64	@ 0x40
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e1ac      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a1ec:	2380      	movs	r3, #128	@ 0x80
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f2:	e1a8      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a75      	ldr	r2, [pc, #468]	@ (800a3d0 <UART_SetConfig+0x638>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d130      	bne.n	800a260 <UART_SetConfig+0x4c8>
 800a1fe:	4b73      	ldr	r3, [pc, #460]	@ (800a3cc <UART_SetConfig+0x634>)
 800a200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a202:	f003 0307 	and.w	r3, r3, #7
 800a206:	2b05      	cmp	r3, #5
 800a208:	d826      	bhi.n	800a258 <UART_SetConfig+0x4c0>
 800a20a:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <UART_SetConfig+0x478>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a229 	.word	0x0800a229
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a239 	.word	0x0800a239
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a251 	.word	0x0800a251
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22e:	e18a      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a230:	2304      	movs	r3, #4
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a236:	e186      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a238:	2308      	movs	r3, #8
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23e:	e182      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a240:	2310      	movs	r3, #16
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a246:	e17e      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a248:	2320      	movs	r3, #32
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24e:	e17a      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a250:	2340      	movs	r3, #64	@ 0x40
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a256:	e176      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a258:	2380      	movs	r3, #128	@ 0x80
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25e:	e172      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a5b      	ldr	r2, [pc, #364]	@ (800a3d4 <UART_SetConfig+0x63c>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d130      	bne.n	800a2cc <UART_SetConfig+0x534>
 800a26a:	4b58      	ldr	r3, [pc, #352]	@ (800a3cc <UART_SetConfig+0x634>)
 800a26c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	2b05      	cmp	r3, #5
 800a274:	d826      	bhi.n	800a2c4 <UART_SetConfig+0x52c>
 800a276:	a201      	add	r2, pc, #4	@ (adr r2, 800a27c <UART_SetConfig+0x4e4>)
 800a278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27c:	0800a295 	.word	0x0800a295
 800a280:	0800a29d 	.word	0x0800a29d
 800a284:	0800a2a5 	.word	0x0800a2a5
 800a288:	0800a2ad 	.word	0x0800a2ad
 800a28c:	0800a2b5 	.word	0x0800a2b5
 800a290:	0800a2bd 	.word	0x0800a2bd
 800a294:	2300      	movs	r3, #0
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29a:	e154      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a29c:	2304      	movs	r3, #4
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a2:	e150      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a2a4:	2308      	movs	r3, #8
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2aa:	e14c      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a2ac:	2310      	movs	r3, #16
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b2:	e148      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a2b4:	2320      	movs	r3, #32
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ba:	e144      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a2bc:	2340      	movs	r3, #64	@ 0x40
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c2:	e140      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a2c4:	2380      	movs	r3, #128	@ 0x80
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ca:	e13c      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a41      	ldr	r2, [pc, #260]	@ (800a3d8 <UART_SetConfig+0x640>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	f040 8082 	bne.w	800a3dc <UART_SetConfig+0x644>
 800a2d8:	4b3c      	ldr	r3, [pc, #240]	@ (800a3cc <UART_SetConfig+0x634>)
 800a2da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2e0:	2b28      	cmp	r3, #40	@ 0x28
 800a2e2:	d86d      	bhi.n	800a3c0 <UART_SetConfig+0x628>
 800a2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ec <UART_SetConfig+0x554>)
 800a2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ea:	bf00      	nop
 800a2ec:	0800a391 	.word	0x0800a391
 800a2f0:	0800a3c1 	.word	0x0800a3c1
 800a2f4:	0800a3c1 	.word	0x0800a3c1
 800a2f8:	0800a3c1 	.word	0x0800a3c1
 800a2fc:	0800a3c1 	.word	0x0800a3c1
 800a300:	0800a3c1 	.word	0x0800a3c1
 800a304:	0800a3c1 	.word	0x0800a3c1
 800a308:	0800a3c1 	.word	0x0800a3c1
 800a30c:	0800a399 	.word	0x0800a399
 800a310:	0800a3c1 	.word	0x0800a3c1
 800a314:	0800a3c1 	.word	0x0800a3c1
 800a318:	0800a3c1 	.word	0x0800a3c1
 800a31c:	0800a3c1 	.word	0x0800a3c1
 800a320:	0800a3c1 	.word	0x0800a3c1
 800a324:	0800a3c1 	.word	0x0800a3c1
 800a328:	0800a3c1 	.word	0x0800a3c1
 800a32c:	0800a3a1 	.word	0x0800a3a1
 800a330:	0800a3c1 	.word	0x0800a3c1
 800a334:	0800a3c1 	.word	0x0800a3c1
 800a338:	0800a3c1 	.word	0x0800a3c1
 800a33c:	0800a3c1 	.word	0x0800a3c1
 800a340:	0800a3c1 	.word	0x0800a3c1
 800a344:	0800a3c1 	.word	0x0800a3c1
 800a348:	0800a3c1 	.word	0x0800a3c1
 800a34c:	0800a3a9 	.word	0x0800a3a9
 800a350:	0800a3c1 	.word	0x0800a3c1
 800a354:	0800a3c1 	.word	0x0800a3c1
 800a358:	0800a3c1 	.word	0x0800a3c1
 800a35c:	0800a3c1 	.word	0x0800a3c1
 800a360:	0800a3c1 	.word	0x0800a3c1
 800a364:	0800a3c1 	.word	0x0800a3c1
 800a368:	0800a3c1 	.word	0x0800a3c1
 800a36c:	0800a3b1 	.word	0x0800a3b1
 800a370:	0800a3c1 	.word	0x0800a3c1
 800a374:	0800a3c1 	.word	0x0800a3c1
 800a378:	0800a3c1 	.word	0x0800a3c1
 800a37c:	0800a3c1 	.word	0x0800a3c1
 800a380:	0800a3c1 	.word	0x0800a3c1
 800a384:	0800a3c1 	.word	0x0800a3c1
 800a388:	0800a3c1 	.word	0x0800a3c1
 800a38c:	0800a3b9 	.word	0x0800a3b9
 800a390:	2301      	movs	r3, #1
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e0d6      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a398:	2304      	movs	r3, #4
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e0d2      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e0ce      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ae:	e0ca      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	e0c6      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a3b8:	2340      	movs	r3, #64	@ 0x40
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e0c2      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a3c0:	2380      	movs	r3, #128	@ 0x80
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e0be      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a3c8:	40011400 	.word	0x40011400
 800a3cc:	58024400 	.word	0x58024400
 800a3d0:	40007800 	.word	0x40007800
 800a3d4:	40007c00 	.word	0x40007c00
 800a3d8:	40011800 	.word	0x40011800
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4aad      	ldr	r2, [pc, #692]	@ (800a698 <UART_SetConfig+0x900>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d176      	bne.n	800a4d4 <UART_SetConfig+0x73c>
 800a3e6:	4bad      	ldr	r3, [pc, #692]	@ (800a69c <UART_SetConfig+0x904>)
 800a3e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3ee:	2b28      	cmp	r3, #40	@ 0x28
 800a3f0:	d86c      	bhi.n	800a4cc <UART_SetConfig+0x734>
 800a3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f8 <UART_SetConfig+0x660>)
 800a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f8:	0800a49d 	.word	0x0800a49d
 800a3fc:	0800a4cd 	.word	0x0800a4cd
 800a400:	0800a4cd 	.word	0x0800a4cd
 800a404:	0800a4cd 	.word	0x0800a4cd
 800a408:	0800a4cd 	.word	0x0800a4cd
 800a40c:	0800a4cd 	.word	0x0800a4cd
 800a410:	0800a4cd 	.word	0x0800a4cd
 800a414:	0800a4cd 	.word	0x0800a4cd
 800a418:	0800a4a5 	.word	0x0800a4a5
 800a41c:	0800a4cd 	.word	0x0800a4cd
 800a420:	0800a4cd 	.word	0x0800a4cd
 800a424:	0800a4cd 	.word	0x0800a4cd
 800a428:	0800a4cd 	.word	0x0800a4cd
 800a42c:	0800a4cd 	.word	0x0800a4cd
 800a430:	0800a4cd 	.word	0x0800a4cd
 800a434:	0800a4cd 	.word	0x0800a4cd
 800a438:	0800a4ad 	.word	0x0800a4ad
 800a43c:	0800a4cd 	.word	0x0800a4cd
 800a440:	0800a4cd 	.word	0x0800a4cd
 800a444:	0800a4cd 	.word	0x0800a4cd
 800a448:	0800a4cd 	.word	0x0800a4cd
 800a44c:	0800a4cd 	.word	0x0800a4cd
 800a450:	0800a4cd 	.word	0x0800a4cd
 800a454:	0800a4cd 	.word	0x0800a4cd
 800a458:	0800a4b5 	.word	0x0800a4b5
 800a45c:	0800a4cd 	.word	0x0800a4cd
 800a460:	0800a4cd 	.word	0x0800a4cd
 800a464:	0800a4cd 	.word	0x0800a4cd
 800a468:	0800a4cd 	.word	0x0800a4cd
 800a46c:	0800a4cd 	.word	0x0800a4cd
 800a470:	0800a4cd 	.word	0x0800a4cd
 800a474:	0800a4cd 	.word	0x0800a4cd
 800a478:	0800a4bd 	.word	0x0800a4bd
 800a47c:	0800a4cd 	.word	0x0800a4cd
 800a480:	0800a4cd 	.word	0x0800a4cd
 800a484:	0800a4cd 	.word	0x0800a4cd
 800a488:	0800a4cd 	.word	0x0800a4cd
 800a48c:	0800a4cd 	.word	0x0800a4cd
 800a490:	0800a4cd 	.word	0x0800a4cd
 800a494:	0800a4cd 	.word	0x0800a4cd
 800a498:	0800a4c5 	.word	0x0800a4c5
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a2:	e050      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e04c      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a4ac:	2308      	movs	r3, #8
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e048      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a4b4:	2310      	movs	r3, #16
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e044      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a4bc:	2320      	movs	r3, #32
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e040      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a4c4:	2340      	movs	r3, #64	@ 0x40
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e03c      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a4cc:	2380      	movs	r3, #128	@ 0x80
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d2:	e038      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a71      	ldr	r2, [pc, #452]	@ (800a6a0 <UART_SetConfig+0x908>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d130      	bne.n	800a540 <UART_SetConfig+0x7a8>
 800a4de:	4b6f      	ldr	r3, [pc, #444]	@ (800a69c <UART_SetConfig+0x904>)
 800a4e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b05      	cmp	r3, #5
 800a4e8:	d826      	bhi.n	800a538 <UART_SetConfig+0x7a0>
 800a4ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f0 <UART_SetConfig+0x758>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a509 	.word	0x0800a509
 800a4f4:	0800a511 	.word	0x0800a511
 800a4f8:	0800a519 	.word	0x0800a519
 800a4fc:	0800a521 	.word	0x0800a521
 800a500:	0800a529 	.word	0x0800a529
 800a504:	0800a531 	.word	0x0800a531
 800a508:	2302      	movs	r3, #2
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e01a      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a510:	2304      	movs	r3, #4
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e016      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a518:	2308      	movs	r3, #8
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e012      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a520:	2310      	movs	r3, #16
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e00e      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a528:	2320      	movs	r3, #32
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52e:	e00a      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a530:	2340      	movs	r3, #64	@ 0x40
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a536:	e006      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a538:	2380      	movs	r3, #128	@ 0x80
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53e:	e002      	b.n	800a546 <UART_SetConfig+0x7ae>
 800a540:	2380      	movs	r3, #128	@ 0x80
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a55      	ldr	r2, [pc, #340]	@ (800a6a0 <UART_SetConfig+0x908>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	f040 80f8 	bne.w	800a742 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a552:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a556:	2b20      	cmp	r3, #32
 800a558:	dc46      	bgt.n	800a5e8 <UART_SetConfig+0x850>
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	db75      	blt.n	800a64a <UART_SetConfig+0x8b2>
 800a55e:	3b02      	subs	r3, #2
 800a560:	2b1e      	cmp	r3, #30
 800a562:	d872      	bhi.n	800a64a <UART_SetConfig+0x8b2>
 800a564:	a201      	add	r2, pc, #4	@ (adr r2, 800a56c <UART_SetConfig+0x7d4>)
 800a566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56a:	bf00      	nop
 800a56c:	0800a5ef 	.word	0x0800a5ef
 800a570:	0800a64b 	.word	0x0800a64b
 800a574:	0800a5f7 	.word	0x0800a5f7
 800a578:	0800a64b 	.word	0x0800a64b
 800a57c:	0800a64b 	.word	0x0800a64b
 800a580:	0800a64b 	.word	0x0800a64b
 800a584:	0800a607 	.word	0x0800a607
 800a588:	0800a64b 	.word	0x0800a64b
 800a58c:	0800a64b 	.word	0x0800a64b
 800a590:	0800a64b 	.word	0x0800a64b
 800a594:	0800a64b 	.word	0x0800a64b
 800a598:	0800a64b 	.word	0x0800a64b
 800a59c:	0800a64b 	.word	0x0800a64b
 800a5a0:	0800a64b 	.word	0x0800a64b
 800a5a4:	0800a617 	.word	0x0800a617
 800a5a8:	0800a64b 	.word	0x0800a64b
 800a5ac:	0800a64b 	.word	0x0800a64b
 800a5b0:	0800a64b 	.word	0x0800a64b
 800a5b4:	0800a64b 	.word	0x0800a64b
 800a5b8:	0800a64b 	.word	0x0800a64b
 800a5bc:	0800a64b 	.word	0x0800a64b
 800a5c0:	0800a64b 	.word	0x0800a64b
 800a5c4:	0800a64b 	.word	0x0800a64b
 800a5c8:	0800a64b 	.word	0x0800a64b
 800a5cc:	0800a64b 	.word	0x0800a64b
 800a5d0:	0800a64b 	.word	0x0800a64b
 800a5d4:	0800a64b 	.word	0x0800a64b
 800a5d8:	0800a64b 	.word	0x0800a64b
 800a5dc:	0800a64b 	.word	0x0800a64b
 800a5e0:	0800a64b 	.word	0x0800a64b
 800a5e4:	0800a63d 	.word	0x0800a63d
 800a5e8:	2b40      	cmp	r3, #64	@ 0x40
 800a5ea:	d02a      	beq.n	800a642 <UART_SetConfig+0x8aa>
 800a5ec:	e02d      	b.n	800a64a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a5ee:	f7fe fd6b 	bl	80090c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a5f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5f4:	e02f      	b.n	800a656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe fd7a 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a604:	e027      	b.n	800a656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a606:	f107 0318 	add.w	r3, r7, #24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe fec6 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a614:	e01f      	b.n	800a656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a616:	4b21      	ldr	r3, [pc, #132]	@ (800a69c <UART_SetConfig+0x904>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0320 	and.w	r3, r3, #32
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d009      	beq.n	800a636 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a622:	4b1e      	ldr	r3, [pc, #120]	@ (800a69c <UART_SetConfig+0x904>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	08db      	lsrs	r3, r3, #3
 800a628:	f003 0303 	and.w	r3, r3, #3
 800a62c:	4a1d      	ldr	r2, [pc, #116]	@ (800a6a4 <UART_SetConfig+0x90c>)
 800a62e:	fa22 f303 	lsr.w	r3, r2, r3
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a634:	e00f      	b.n	800a656 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a636:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a4 <UART_SetConfig+0x90c>)
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63a:	e00c      	b.n	800a656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a63c:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a8 <UART_SetConfig+0x910>)
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a640:	e009      	b.n	800a656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a648:	e005      	b.n	800a656 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a654:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 81ee 	beq.w	800aa3a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a662:	4a12      	ldr	r2, [pc, #72]	@ (800a6ac <UART_SetConfig+0x914>)
 800a664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a668:	461a      	mov	r2, r3
 800a66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a66c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a670:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	4613      	mov	r3, r2
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	4413      	add	r3, r2
 800a67c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a67e:	429a      	cmp	r2, r3
 800a680:	d305      	bcc.n	800a68e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d910      	bls.n	800a6b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a694:	e1d1      	b.n	800aa3a <UART_SetConfig+0xca2>
 800a696:	bf00      	nop
 800a698:	40011c00 	.word	0x40011c00
 800a69c:	58024400 	.word	0x58024400
 800a6a0:	58000c00 	.word	0x58000c00
 800a6a4:	03d09000 	.word	0x03d09000
 800a6a8:	003d0900 	.word	0x003d0900
 800a6ac:	0800bd1c 	.word	0x0800bd1c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	60bb      	str	r3, [r7, #8]
 800a6b6:	60fa      	str	r2, [r7, #12]
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6bc:	4ac0      	ldr	r2, [pc, #768]	@ (800a9c0 <UART_SetConfig+0xc28>)
 800a6be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	607a      	str	r2, [r7, #4]
 800a6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6d2:	f7f5 fe75 	bl	80003c0 <__aeabi_uldivmod>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4610      	mov	r0, r2
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f04f 0200 	mov.w	r2, #0
 800a6e2:	f04f 0300 	mov.w	r3, #0
 800a6e6:	020b      	lsls	r3, r1, #8
 800a6e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6ec:	0202      	lsls	r2, r0, #8
 800a6ee:	6979      	ldr	r1, [r7, #20]
 800a6f0:	6849      	ldr	r1, [r1, #4]
 800a6f2:	0849      	lsrs	r1, r1, #1
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	eb12 0804 	adds.w	r8, r2, r4
 800a6fe:	eb43 0905 	adc.w	r9, r3, r5
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	469a      	mov	sl, r3
 800a70a:	4693      	mov	fp, r2
 800a70c:	4652      	mov	r2, sl
 800a70e:	465b      	mov	r3, fp
 800a710:	4640      	mov	r0, r8
 800a712:	4649      	mov	r1, r9
 800a714:	f7f5 fe54 	bl	80003c0 <__aeabi_uldivmod>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4613      	mov	r3, r2
 800a71e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a726:	d308      	bcc.n	800a73a <UART_SetConfig+0x9a2>
 800a728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a72e:	d204      	bcs.n	800a73a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a736:	60da      	str	r2, [r3, #12]
 800a738:	e17f      	b.n	800aa3a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a740:	e17b      	b.n	800aa3a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a74a:	f040 80bd 	bne.w	800a8c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a74e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a752:	2b20      	cmp	r3, #32
 800a754:	dc48      	bgt.n	800a7e8 <UART_SetConfig+0xa50>
 800a756:	2b00      	cmp	r3, #0
 800a758:	db7b      	blt.n	800a852 <UART_SetConfig+0xaba>
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	d879      	bhi.n	800a852 <UART_SetConfig+0xaba>
 800a75e:	a201      	add	r2, pc, #4	@ (adr r2, 800a764 <UART_SetConfig+0x9cc>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a7ef 	.word	0x0800a7ef
 800a768:	0800a7f7 	.word	0x0800a7f7
 800a76c:	0800a853 	.word	0x0800a853
 800a770:	0800a853 	.word	0x0800a853
 800a774:	0800a7ff 	.word	0x0800a7ff
 800a778:	0800a853 	.word	0x0800a853
 800a77c:	0800a853 	.word	0x0800a853
 800a780:	0800a853 	.word	0x0800a853
 800a784:	0800a80f 	.word	0x0800a80f
 800a788:	0800a853 	.word	0x0800a853
 800a78c:	0800a853 	.word	0x0800a853
 800a790:	0800a853 	.word	0x0800a853
 800a794:	0800a853 	.word	0x0800a853
 800a798:	0800a853 	.word	0x0800a853
 800a79c:	0800a853 	.word	0x0800a853
 800a7a0:	0800a853 	.word	0x0800a853
 800a7a4:	0800a81f 	.word	0x0800a81f
 800a7a8:	0800a853 	.word	0x0800a853
 800a7ac:	0800a853 	.word	0x0800a853
 800a7b0:	0800a853 	.word	0x0800a853
 800a7b4:	0800a853 	.word	0x0800a853
 800a7b8:	0800a853 	.word	0x0800a853
 800a7bc:	0800a853 	.word	0x0800a853
 800a7c0:	0800a853 	.word	0x0800a853
 800a7c4:	0800a853 	.word	0x0800a853
 800a7c8:	0800a853 	.word	0x0800a853
 800a7cc:	0800a853 	.word	0x0800a853
 800a7d0:	0800a853 	.word	0x0800a853
 800a7d4:	0800a853 	.word	0x0800a853
 800a7d8:	0800a853 	.word	0x0800a853
 800a7dc:	0800a853 	.word	0x0800a853
 800a7e0:	0800a853 	.word	0x0800a853
 800a7e4:	0800a845 	.word	0x0800a845
 800a7e8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ea:	d02e      	beq.n	800a84a <UART_SetConfig+0xab2>
 800a7ec:	e031      	b.n	800a852 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7ee:	f7fc fdcd 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 800a7f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7f4:	e033      	b.n	800a85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7f6:	f7fc fddf 	bl	80073b8 <HAL_RCC_GetPCLK2Freq>
 800a7fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7fc:	e02f      	b.n	800a85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fc76 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80c:	e027      	b.n	800a85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a80e:	f107 0318 	add.w	r3, r7, #24
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fdc2 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a81c:	e01f      	b.n	800a85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a81e:	4b69      	ldr	r3, [pc, #420]	@ (800a9c4 <UART_SetConfig+0xc2c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 0320 	and.w	r3, r3, #32
 800a826:	2b00      	cmp	r3, #0
 800a828:	d009      	beq.n	800a83e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a82a:	4b66      	ldr	r3, [pc, #408]	@ (800a9c4 <UART_SetConfig+0xc2c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	08db      	lsrs	r3, r3, #3
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	4a64      	ldr	r2, [pc, #400]	@ (800a9c8 <UART_SetConfig+0xc30>)
 800a836:	fa22 f303 	lsr.w	r3, r2, r3
 800a83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a83c:	e00f      	b.n	800a85e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a83e:	4b62      	ldr	r3, [pc, #392]	@ (800a9c8 <UART_SetConfig+0xc30>)
 800a840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a842:	e00c      	b.n	800a85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a844:	4b61      	ldr	r3, [pc, #388]	@ (800a9cc <UART_SetConfig+0xc34>)
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a848:	e009      	b.n	800a85e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a84a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a850:	e005      	b.n	800a85e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a85c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a85e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 80ea 	beq.w	800aa3a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86a:	4a55      	ldr	r2, [pc, #340]	@ (800a9c0 <UART_SetConfig+0xc28>)
 800a86c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a870:	461a      	mov	r2, r3
 800a872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a874:	fbb3 f3f2 	udiv	r3, r3, r2
 800a878:	005a      	lsls	r2, r3, #1
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	441a      	add	r2, r3
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	fbb2 f3f3 	udiv	r3, r2, r3
 800a88a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88e:	2b0f      	cmp	r3, #15
 800a890:	d916      	bls.n	800a8c0 <UART_SetConfig+0xb28>
 800a892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a898:	d212      	bcs.n	800a8c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	f023 030f 	bic.w	r3, r3, #15
 800a8a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a6:	085b      	lsrs	r3, r3, #1
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a8bc:	60da      	str	r2, [r3, #12]
 800a8be:	e0bc      	b.n	800aa3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a8c6:	e0b8      	b.n	800aa3a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a8cc:	2b20      	cmp	r3, #32
 800a8ce:	dc4b      	bgt.n	800a968 <UART_SetConfig+0xbd0>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f2c0 8087 	blt.w	800a9e4 <UART_SetConfig+0xc4c>
 800a8d6:	2b20      	cmp	r3, #32
 800a8d8:	f200 8084 	bhi.w	800a9e4 <UART_SetConfig+0xc4c>
 800a8dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e4 <UART_SetConfig+0xb4c>)
 800a8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e2:	bf00      	nop
 800a8e4:	0800a96f 	.word	0x0800a96f
 800a8e8:	0800a977 	.word	0x0800a977
 800a8ec:	0800a9e5 	.word	0x0800a9e5
 800a8f0:	0800a9e5 	.word	0x0800a9e5
 800a8f4:	0800a97f 	.word	0x0800a97f
 800a8f8:	0800a9e5 	.word	0x0800a9e5
 800a8fc:	0800a9e5 	.word	0x0800a9e5
 800a900:	0800a9e5 	.word	0x0800a9e5
 800a904:	0800a98f 	.word	0x0800a98f
 800a908:	0800a9e5 	.word	0x0800a9e5
 800a90c:	0800a9e5 	.word	0x0800a9e5
 800a910:	0800a9e5 	.word	0x0800a9e5
 800a914:	0800a9e5 	.word	0x0800a9e5
 800a918:	0800a9e5 	.word	0x0800a9e5
 800a91c:	0800a9e5 	.word	0x0800a9e5
 800a920:	0800a9e5 	.word	0x0800a9e5
 800a924:	0800a99f 	.word	0x0800a99f
 800a928:	0800a9e5 	.word	0x0800a9e5
 800a92c:	0800a9e5 	.word	0x0800a9e5
 800a930:	0800a9e5 	.word	0x0800a9e5
 800a934:	0800a9e5 	.word	0x0800a9e5
 800a938:	0800a9e5 	.word	0x0800a9e5
 800a93c:	0800a9e5 	.word	0x0800a9e5
 800a940:	0800a9e5 	.word	0x0800a9e5
 800a944:	0800a9e5 	.word	0x0800a9e5
 800a948:	0800a9e5 	.word	0x0800a9e5
 800a94c:	0800a9e5 	.word	0x0800a9e5
 800a950:	0800a9e5 	.word	0x0800a9e5
 800a954:	0800a9e5 	.word	0x0800a9e5
 800a958:	0800a9e5 	.word	0x0800a9e5
 800a95c:	0800a9e5 	.word	0x0800a9e5
 800a960:	0800a9e5 	.word	0x0800a9e5
 800a964:	0800a9d7 	.word	0x0800a9d7
 800a968:	2b40      	cmp	r3, #64	@ 0x40
 800a96a:	d037      	beq.n	800a9dc <UART_SetConfig+0xc44>
 800a96c:	e03a      	b.n	800a9e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a96e:	f7fc fd0d 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 800a972:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a974:	e03c      	b.n	800a9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a976:	f7fc fd1f 	bl	80073b8 <HAL_RCC_GetPCLK2Freq>
 800a97a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a97c:	e038      	b.n	800a9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a97e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe fbb6 	bl	80090f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98c:	e030      	b.n	800a9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a98e:	f107 0318 	add.w	r3, r7, #24
 800a992:	4618      	mov	r0, r3
 800a994:	f7fe fd02 	bl	800939c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99c:	e028      	b.n	800a9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a99e:	4b09      	ldr	r3, [pc, #36]	@ (800a9c4 <UART_SetConfig+0xc2c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0320 	and.w	r3, r3, #32
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d012      	beq.n	800a9d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9aa:	4b06      	ldr	r3, [pc, #24]	@ (800a9c4 <UART_SetConfig+0xc2c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	08db      	lsrs	r3, r3, #3
 800a9b0:	f003 0303 	and.w	r3, r3, #3
 800a9b4:	4a04      	ldr	r2, [pc, #16]	@ (800a9c8 <UART_SetConfig+0xc30>)
 800a9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9bc:	e018      	b.n	800a9f0 <UART_SetConfig+0xc58>
 800a9be:	bf00      	nop
 800a9c0:	0800bd1c 	.word	0x0800bd1c
 800a9c4:	58024400 	.word	0x58024400
 800a9c8:	03d09000 	.word	0x03d09000
 800a9cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a9d0:	4b24      	ldr	r3, [pc, #144]	@ (800aa64 <UART_SetConfig+0xccc>)
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d4:	e00c      	b.n	800a9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9d6:	4b24      	ldr	r3, [pc, #144]	@ (800aa68 <UART_SetConfig+0xcd0>)
 800a9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9da:	e009      	b.n	800a9f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e2:	e005      	b.n	800a9f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a9ee:	bf00      	nop
    }

    if (pclk != 0U)
 800a9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d021      	beq.n	800aa3a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fa:	4a1c      	ldr	r2, [pc, #112]	@ (800aa6c <UART_SetConfig+0xcd4>)
 800a9fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa00:	461a      	mov	r2, r3
 800aa02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa04:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	441a      	add	r2, r3
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa18:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1c:	2b0f      	cmp	r3, #15
 800aa1e:	d909      	bls.n	800aa34 <UART_SetConfig+0xc9c>
 800aa20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa26:	d205      	bcs.n	800aa34 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	60da      	str	r2, [r3, #12]
 800aa32:	e002      	b.n	800aa3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2200      	movs	r2, #0
 800aa54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa56:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3748      	adds	r7, #72	@ 0x48
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa64:	03d09000 	.word	0x03d09000
 800aa68:	003d0900 	.word	0x003d0900
 800aa6c:	0800bd1c 	.word	0x0800bd1c

0800aa70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7c:	f003 0308 	and.w	r3, r3, #8
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00a      	beq.n	800aa9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00a      	beq.n	800aabc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00a      	beq.n	800aade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	430a      	orrs	r2, r1
 800aadc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab04:	f003 0310 	and.w	r3, r3, #16
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	430a      	orrs	r2, r1
 800ab20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab26:	f003 0320 	and.w	r3, r3, #32
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00a      	beq.n	800ab44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d01a      	beq.n	800ab86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab6e:	d10a      	bne.n	800ab86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	430a      	orrs	r2, r1
 800aba6:	605a      	str	r2, [r3, #4]
  }
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b098      	sub	sp, #96	@ 0x60
 800abb8:	af02      	add	r7, sp, #8
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abc4:	f7f7 fffc 	bl	8002bc0 <HAL_GetTick>
 800abc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0308 	and.w	r3, r3, #8
 800abd4:	2b08      	cmp	r3, #8
 800abd6:	d12f      	bne.n	800ac38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abe0:	2200      	movs	r2, #0
 800abe2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f88e 	bl	800ad08 <UART_WaitOnFlagUntilTimeout>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d022      	beq.n	800ac38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfa:	e853 3f00 	ldrex	r3, [r3]
 800abfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac06:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac18:	e841 2300 	strex	r3, r2, [r1]
 800ac1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1e6      	bne.n	800abf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2220      	movs	r2, #32
 800ac28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e063      	b.n	800ad00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0304 	and.w	r3, r3, #4
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d149      	bne.n	800acda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f857 	bl	800ad08 <UART_WaitOnFlagUntilTimeout>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d03c      	beq.n	800acda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac68:	e853 3f00 	ldrex	r3, [r3]
 800ac6c:	623b      	str	r3, [r7, #32]
   return(result);
 800ac6e:	6a3b      	ldr	r3, [r7, #32]
 800ac70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac86:	e841 2300 	strex	r3, r2, [r1]
 800ac8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1e6      	bne.n	800ac60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	e853 3f00 	ldrex	r3, [r3]
 800aca0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f023 0301 	bic.w	r3, r3, #1
 800aca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3308      	adds	r3, #8
 800acb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acb2:	61fa      	str	r2, [r7, #28]
 800acb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	69b9      	ldr	r1, [r7, #24]
 800acb8:	69fa      	ldr	r2, [r7, #28]
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	617b      	str	r3, [r7, #20]
   return(result);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1e5      	bne.n	800ac92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2220      	movs	r2, #32
 800acca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e012      	b.n	800ad00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2220      	movs	r2, #32
 800acde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2220      	movs	r2, #32
 800ace6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3758      	adds	r7, #88	@ 0x58
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	4613      	mov	r3, r2
 800ad16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad18:	e04f      	b.n	800adba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad20:	d04b      	beq.n	800adba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad22:	f7f7 ff4d 	bl	8002bc0 <HAL_GetTick>
 800ad26:	4602      	mov	r2, r0
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	69ba      	ldr	r2, [r7, #24]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d302      	bcc.n	800ad38 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e04e      	b.n	800adda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0304 	and.w	r3, r3, #4
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d037      	beq.n	800adba <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b80      	cmp	r3, #128	@ 0x80
 800ad4e:	d034      	beq.n	800adba <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2b40      	cmp	r3, #64	@ 0x40
 800ad54:	d031      	beq.n	800adba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	69db      	ldr	r3, [r3, #28]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d110      	bne.n	800ad86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2208      	movs	r2, #8
 800ad6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 f839 	bl	800ade4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2208      	movs	r2, #8
 800ad76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e029      	b.n	800adda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad94:	d111      	bne.n	800adba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 f81f 	bl	800ade4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2220      	movs	r2, #32
 800adaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e00f      	b.n	800adda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	69da      	ldr	r2, [r3, #28]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	4013      	ands	r3, r2
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	bf0c      	ite	eq
 800adca:	2301      	moveq	r3, #1
 800adcc:	2300      	movne	r3, #0
 800adce:	b2db      	uxtb	r3, r3
 800add0:	461a      	mov	r2, r3
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	429a      	cmp	r2, r3
 800add6:	d0a0      	beq.n	800ad1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b095      	sub	sp, #84	@ 0x54
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800adfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e6      	bne.n	800adec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	e853 3f00 	ldrex	r3, [r3]
 800ae2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	4b1e      	ldr	r3, [pc, #120]	@ (800aeac <UART_EndRxTransfer+0xc8>)
 800ae32:	4013      	ands	r3, r2
 800ae34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae46:	e841 2300 	strex	r3, r2, [r1]
 800ae4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1e5      	bne.n	800ae1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d118      	bne.n	800ae8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	f023 0310 	bic.w	r3, r3, #16
 800ae6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae78:	61bb      	str	r3, [r7, #24]
 800ae7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6979      	ldr	r1, [r7, #20]
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	613b      	str	r3, [r7, #16]
   return(result);
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e6      	bne.n	800ae5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2220      	movs	r2, #32
 800ae90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aea0:	bf00      	nop
 800aea2:	3754      	adds	r7, #84	@ 0x54
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	effffffe 	.word	0xeffffffe

0800aeb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d101      	bne.n	800aec6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aec2:	2302      	movs	r3, #2
 800aec4:	e027      	b.n	800af16 <HAL_UARTEx_DisableFifoMode+0x66>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2224      	movs	r2, #36	@ 0x24
 800aed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0201 	bic.w	r2, r2, #1
 800aeec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aef4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2220      	movs	r2, #32
 800af08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af32:	2b01      	cmp	r3, #1
 800af34:	d101      	bne.n	800af3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af36:	2302      	movs	r3, #2
 800af38:	e02d      	b.n	800af96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2224      	movs	r2, #36	@ 0x24
 800af46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0201 	bic.w	r2, r2, #1
 800af60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f850 	bl	800b01c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2220      	movs	r2, #32
 800af88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d101      	bne.n	800afb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afb2:	2302      	movs	r3, #2
 800afb4:	e02d      	b.n	800b012 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2224      	movs	r2, #36	@ 0x24
 800afc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f022 0201 	bic.w	r2, r2, #1
 800afdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	430a      	orrs	r2, r1
 800aff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f812 	bl	800b01c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2220      	movs	r2, #32
 800b004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
	...

0800b01c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d108      	bne.n	800b03e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b03c:	e031      	b.n	800b0a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b03e:	2310      	movs	r3, #16
 800b040:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b042:	2310      	movs	r3, #16
 800b044:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	0e5b      	lsrs	r3, r3, #25
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	f003 0307 	and.w	r3, r3, #7
 800b054:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	0f5b      	lsrs	r3, r3, #29
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	f003 0307 	and.w	r3, r3, #7
 800b064:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	7b3a      	ldrb	r2, [r7, #12]
 800b06a:	4911      	ldr	r1, [pc, #68]	@ (800b0b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b06c:	5c8a      	ldrb	r2, [r1, r2]
 800b06e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b072:	7b3a      	ldrb	r2, [r7, #12]
 800b074:	490f      	ldr	r1, [pc, #60]	@ (800b0b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b076:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b078:	fb93 f3f2 	sdiv	r3, r3, r2
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b084:	7bfb      	ldrb	r3, [r7, #15]
 800b086:	7b7a      	ldrb	r2, [r7, #13]
 800b088:	4909      	ldr	r1, [pc, #36]	@ (800b0b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b08a:	5c8a      	ldrb	r2, [r1, r2]
 800b08c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b090:	7b7a      	ldrb	r2, [r7, #13]
 800b092:	4908      	ldr	r1, [pc, #32]	@ (800b0b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b094:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b096:	fb93 f3f2 	sdiv	r3, r3, r2
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0a2:	bf00      	nop
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	0800bd34 	.word	0x0800bd34
 800b0b4:	0800bd3c 	.word	0x0800bd3c

0800b0b8 <siprintf>:
 800b0b8:	b40e      	push	{r1, r2, r3}
 800b0ba:	b500      	push	{lr}
 800b0bc:	b09c      	sub	sp, #112	@ 0x70
 800b0be:	ab1d      	add	r3, sp, #116	@ 0x74
 800b0c0:	9002      	str	r0, [sp, #8]
 800b0c2:	9006      	str	r0, [sp, #24]
 800b0c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b0c8:	4809      	ldr	r0, [pc, #36]	@ (800b0f0 <siprintf+0x38>)
 800b0ca:	9107      	str	r1, [sp, #28]
 800b0cc:	9104      	str	r1, [sp, #16]
 800b0ce:	4909      	ldr	r1, [pc, #36]	@ (800b0f4 <siprintf+0x3c>)
 800b0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d4:	9105      	str	r1, [sp, #20]
 800b0d6:	6800      	ldr	r0, [r0, #0]
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	a902      	add	r1, sp, #8
 800b0dc:	f000 f9a2 	bl	800b424 <_svfiprintf_r>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	b01c      	add	sp, #112	@ 0x70
 800b0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ec:	b003      	add	sp, #12
 800b0ee:	4770      	bx	lr
 800b0f0:	2400001c 	.word	0x2400001c
 800b0f4:	ffff0208 	.word	0xffff0208

0800b0f8 <memset>:
 800b0f8:	4402      	add	r2, r0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d100      	bne.n	800b102 <memset+0xa>
 800b100:	4770      	bx	lr
 800b102:	f803 1b01 	strb.w	r1, [r3], #1
 800b106:	e7f9      	b.n	800b0fc <memset+0x4>

0800b108 <__errno>:
 800b108:	4b01      	ldr	r3, [pc, #4]	@ (800b110 <__errno+0x8>)
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	2400001c 	.word	0x2400001c

0800b114 <__libc_init_array>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	4d0d      	ldr	r5, [pc, #52]	@ (800b14c <__libc_init_array+0x38>)
 800b118:	4c0d      	ldr	r4, [pc, #52]	@ (800b150 <__libc_init_array+0x3c>)
 800b11a:	1b64      	subs	r4, r4, r5
 800b11c:	10a4      	asrs	r4, r4, #2
 800b11e:	2600      	movs	r6, #0
 800b120:	42a6      	cmp	r6, r4
 800b122:	d109      	bne.n	800b138 <__libc_init_array+0x24>
 800b124:	4d0b      	ldr	r5, [pc, #44]	@ (800b154 <__libc_init_array+0x40>)
 800b126:	4c0c      	ldr	r4, [pc, #48]	@ (800b158 <__libc_init_array+0x44>)
 800b128:	f000 fc66 	bl	800b9f8 <_init>
 800b12c:	1b64      	subs	r4, r4, r5
 800b12e:	10a4      	asrs	r4, r4, #2
 800b130:	2600      	movs	r6, #0
 800b132:	42a6      	cmp	r6, r4
 800b134:	d105      	bne.n	800b142 <__libc_init_array+0x2e>
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13c:	4798      	blx	r3
 800b13e:	3601      	adds	r6, #1
 800b140:	e7ee      	b.n	800b120 <__libc_init_array+0xc>
 800b142:	f855 3b04 	ldr.w	r3, [r5], #4
 800b146:	4798      	blx	r3
 800b148:	3601      	adds	r6, #1
 800b14a:	e7f2      	b.n	800b132 <__libc_init_array+0x1e>
 800b14c:	0800bd80 	.word	0x0800bd80
 800b150:	0800bd80 	.word	0x0800bd80
 800b154:	0800bd80 	.word	0x0800bd80
 800b158:	0800bd88 	.word	0x0800bd88

0800b15c <__retarget_lock_acquire_recursive>:
 800b15c:	4770      	bx	lr

0800b15e <__retarget_lock_release_recursive>:
 800b15e:	4770      	bx	lr

0800b160 <memcpy>:
 800b160:	440a      	add	r2, r1
 800b162:	4291      	cmp	r1, r2
 800b164:	f100 33ff 	add.w	r3, r0, #4294967295
 800b168:	d100      	bne.n	800b16c <memcpy+0xc>
 800b16a:	4770      	bx	lr
 800b16c:	b510      	push	{r4, lr}
 800b16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b172:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b176:	4291      	cmp	r1, r2
 800b178:	d1f9      	bne.n	800b16e <memcpy+0xe>
 800b17a:	bd10      	pop	{r4, pc}

0800b17c <_free_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4605      	mov	r5, r0
 800b180:	2900      	cmp	r1, #0
 800b182:	d041      	beq.n	800b208 <_free_r+0x8c>
 800b184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b188:	1f0c      	subs	r4, r1, #4
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	bfb8      	it	lt
 800b18e:	18e4      	addlt	r4, r4, r3
 800b190:	f000 f8e0 	bl	800b354 <__malloc_lock>
 800b194:	4a1d      	ldr	r2, [pc, #116]	@ (800b20c <_free_r+0x90>)
 800b196:	6813      	ldr	r3, [r2, #0]
 800b198:	b933      	cbnz	r3, 800b1a8 <_free_r+0x2c>
 800b19a:	6063      	str	r3, [r4, #4]
 800b19c:	6014      	str	r4, [r2, #0]
 800b19e:	4628      	mov	r0, r5
 800b1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a4:	f000 b8dc 	b.w	800b360 <__malloc_unlock>
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	d908      	bls.n	800b1be <_free_r+0x42>
 800b1ac:	6820      	ldr	r0, [r4, #0]
 800b1ae:	1821      	adds	r1, r4, r0
 800b1b0:	428b      	cmp	r3, r1
 800b1b2:	bf01      	itttt	eq
 800b1b4:	6819      	ldreq	r1, [r3, #0]
 800b1b6:	685b      	ldreq	r3, [r3, #4]
 800b1b8:	1809      	addeq	r1, r1, r0
 800b1ba:	6021      	streq	r1, [r4, #0]
 800b1bc:	e7ed      	b.n	800b19a <_free_r+0x1e>
 800b1be:	461a      	mov	r2, r3
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	b10b      	cbz	r3, 800b1c8 <_free_r+0x4c>
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	d9fa      	bls.n	800b1be <_free_r+0x42>
 800b1c8:	6811      	ldr	r1, [r2, #0]
 800b1ca:	1850      	adds	r0, r2, r1
 800b1cc:	42a0      	cmp	r0, r4
 800b1ce:	d10b      	bne.n	800b1e8 <_free_r+0x6c>
 800b1d0:	6820      	ldr	r0, [r4, #0]
 800b1d2:	4401      	add	r1, r0
 800b1d4:	1850      	adds	r0, r2, r1
 800b1d6:	4283      	cmp	r3, r0
 800b1d8:	6011      	str	r1, [r2, #0]
 800b1da:	d1e0      	bne.n	800b19e <_free_r+0x22>
 800b1dc:	6818      	ldr	r0, [r3, #0]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	6053      	str	r3, [r2, #4]
 800b1e2:	4408      	add	r0, r1
 800b1e4:	6010      	str	r0, [r2, #0]
 800b1e6:	e7da      	b.n	800b19e <_free_r+0x22>
 800b1e8:	d902      	bls.n	800b1f0 <_free_r+0x74>
 800b1ea:	230c      	movs	r3, #12
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	e7d6      	b.n	800b19e <_free_r+0x22>
 800b1f0:	6820      	ldr	r0, [r4, #0]
 800b1f2:	1821      	adds	r1, r4, r0
 800b1f4:	428b      	cmp	r3, r1
 800b1f6:	bf04      	itt	eq
 800b1f8:	6819      	ldreq	r1, [r3, #0]
 800b1fa:	685b      	ldreq	r3, [r3, #4]
 800b1fc:	6063      	str	r3, [r4, #4]
 800b1fe:	bf04      	itt	eq
 800b200:	1809      	addeq	r1, r1, r0
 800b202:	6021      	streq	r1, [r4, #0]
 800b204:	6054      	str	r4, [r2, #4]
 800b206:	e7ca      	b.n	800b19e <_free_r+0x22>
 800b208:	bd38      	pop	{r3, r4, r5, pc}
 800b20a:	bf00      	nop
 800b20c:	24001500 	.word	0x24001500

0800b210 <sbrk_aligned>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	4e0f      	ldr	r6, [pc, #60]	@ (800b250 <sbrk_aligned+0x40>)
 800b214:	460c      	mov	r4, r1
 800b216:	6831      	ldr	r1, [r6, #0]
 800b218:	4605      	mov	r5, r0
 800b21a:	b911      	cbnz	r1, 800b222 <sbrk_aligned+0x12>
 800b21c:	f000 fba6 	bl	800b96c <_sbrk_r>
 800b220:	6030      	str	r0, [r6, #0]
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f000 fba1 	bl	800b96c <_sbrk_r>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d103      	bne.n	800b236 <sbrk_aligned+0x26>
 800b22e:	f04f 34ff 	mov.w	r4, #4294967295
 800b232:	4620      	mov	r0, r4
 800b234:	bd70      	pop	{r4, r5, r6, pc}
 800b236:	1cc4      	adds	r4, r0, #3
 800b238:	f024 0403 	bic.w	r4, r4, #3
 800b23c:	42a0      	cmp	r0, r4
 800b23e:	d0f8      	beq.n	800b232 <sbrk_aligned+0x22>
 800b240:	1a21      	subs	r1, r4, r0
 800b242:	4628      	mov	r0, r5
 800b244:	f000 fb92 	bl	800b96c <_sbrk_r>
 800b248:	3001      	adds	r0, #1
 800b24a:	d1f2      	bne.n	800b232 <sbrk_aligned+0x22>
 800b24c:	e7ef      	b.n	800b22e <sbrk_aligned+0x1e>
 800b24e:	bf00      	nop
 800b250:	240014fc 	.word	0x240014fc

0800b254 <_malloc_r>:
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	1ccd      	adds	r5, r1, #3
 800b25a:	f025 0503 	bic.w	r5, r5, #3
 800b25e:	3508      	adds	r5, #8
 800b260:	2d0c      	cmp	r5, #12
 800b262:	bf38      	it	cc
 800b264:	250c      	movcc	r5, #12
 800b266:	2d00      	cmp	r5, #0
 800b268:	4606      	mov	r6, r0
 800b26a:	db01      	blt.n	800b270 <_malloc_r+0x1c>
 800b26c:	42a9      	cmp	r1, r5
 800b26e:	d904      	bls.n	800b27a <_malloc_r+0x26>
 800b270:	230c      	movs	r3, #12
 800b272:	6033      	str	r3, [r6, #0]
 800b274:	2000      	movs	r0, #0
 800b276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b350 <_malloc_r+0xfc>
 800b27e:	f000 f869 	bl	800b354 <__malloc_lock>
 800b282:	f8d8 3000 	ldr.w	r3, [r8]
 800b286:	461c      	mov	r4, r3
 800b288:	bb44      	cbnz	r4, 800b2dc <_malloc_r+0x88>
 800b28a:	4629      	mov	r1, r5
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff ffbf 	bl	800b210 <sbrk_aligned>
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	4604      	mov	r4, r0
 800b296:	d158      	bne.n	800b34a <_malloc_r+0xf6>
 800b298:	f8d8 4000 	ldr.w	r4, [r8]
 800b29c:	4627      	mov	r7, r4
 800b29e:	2f00      	cmp	r7, #0
 800b2a0:	d143      	bne.n	800b32a <_malloc_r+0xd6>
 800b2a2:	2c00      	cmp	r4, #0
 800b2a4:	d04b      	beq.n	800b33e <_malloc_r+0xea>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	eb04 0903 	add.w	r9, r4, r3
 800b2b0:	f000 fb5c 	bl	800b96c <_sbrk_r>
 800b2b4:	4581      	cmp	r9, r0
 800b2b6:	d142      	bne.n	800b33e <_malloc_r+0xea>
 800b2b8:	6821      	ldr	r1, [r4, #0]
 800b2ba:	1a6d      	subs	r5, r5, r1
 800b2bc:	4629      	mov	r1, r5
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f7ff ffa6 	bl	800b210 <sbrk_aligned>
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d03a      	beq.n	800b33e <_malloc_r+0xea>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	442b      	add	r3, r5
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	bb62      	cbnz	r2, 800b330 <_malloc_r+0xdc>
 800b2d6:	f8c8 7000 	str.w	r7, [r8]
 800b2da:	e00f      	b.n	800b2fc <_malloc_r+0xa8>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	1b52      	subs	r2, r2, r5
 800b2e0:	d420      	bmi.n	800b324 <_malloc_r+0xd0>
 800b2e2:	2a0b      	cmp	r2, #11
 800b2e4:	d917      	bls.n	800b316 <_malloc_r+0xc2>
 800b2e6:	1961      	adds	r1, r4, r5
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	6025      	str	r5, [r4, #0]
 800b2ec:	bf18      	it	ne
 800b2ee:	6059      	strne	r1, [r3, #4]
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	bf08      	it	eq
 800b2f4:	f8c8 1000 	streq.w	r1, [r8]
 800b2f8:	5162      	str	r2, [r4, r5]
 800b2fa:	604b      	str	r3, [r1, #4]
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f000 f82f 	bl	800b360 <__malloc_unlock>
 800b302:	f104 000b 	add.w	r0, r4, #11
 800b306:	1d23      	adds	r3, r4, #4
 800b308:	f020 0007 	bic.w	r0, r0, #7
 800b30c:	1ac2      	subs	r2, r0, r3
 800b30e:	bf1c      	itt	ne
 800b310:	1a1b      	subne	r3, r3, r0
 800b312:	50a3      	strne	r3, [r4, r2]
 800b314:	e7af      	b.n	800b276 <_malloc_r+0x22>
 800b316:	6862      	ldr	r2, [r4, #4]
 800b318:	42a3      	cmp	r3, r4
 800b31a:	bf0c      	ite	eq
 800b31c:	f8c8 2000 	streq.w	r2, [r8]
 800b320:	605a      	strne	r2, [r3, #4]
 800b322:	e7eb      	b.n	800b2fc <_malloc_r+0xa8>
 800b324:	4623      	mov	r3, r4
 800b326:	6864      	ldr	r4, [r4, #4]
 800b328:	e7ae      	b.n	800b288 <_malloc_r+0x34>
 800b32a:	463c      	mov	r4, r7
 800b32c:	687f      	ldr	r7, [r7, #4]
 800b32e:	e7b6      	b.n	800b29e <_malloc_r+0x4a>
 800b330:	461a      	mov	r2, r3
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	42a3      	cmp	r3, r4
 800b336:	d1fb      	bne.n	800b330 <_malloc_r+0xdc>
 800b338:	2300      	movs	r3, #0
 800b33a:	6053      	str	r3, [r2, #4]
 800b33c:	e7de      	b.n	800b2fc <_malloc_r+0xa8>
 800b33e:	230c      	movs	r3, #12
 800b340:	6033      	str	r3, [r6, #0]
 800b342:	4630      	mov	r0, r6
 800b344:	f000 f80c 	bl	800b360 <__malloc_unlock>
 800b348:	e794      	b.n	800b274 <_malloc_r+0x20>
 800b34a:	6005      	str	r5, [r0, #0]
 800b34c:	e7d6      	b.n	800b2fc <_malloc_r+0xa8>
 800b34e:	bf00      	nop
 800b350:	24001500 	.word	0x24001500

0800b354 <__malloc_lock>:
 800b354:	4801      	ldr	r0, [pc, #4]	@ (800b35c <__malloc_lock+0x8>)
 800b356:	f7ff bf01 	b.w	800b15c <__retarget_lock_acquire_recursive>
 800b35a:	bf00      	nop
 800b35c:	240014f8 	.word	0x240014f8

0800b360 <__malloc_unlock>:
 800b360:	4801      	ldr	r0, [pc, #4]	@ (800b368 <__malloc_unlock+0x8>)
 800b362:	f7ff befc 	b.w	800b15e <__retarget_lock_release_recursive>
 800b366:	bf00      	nop
 800b368:	240014f8 	.word	0x240014f8

0800b36c <__ssputs_r>:
 800b36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b370:	688e      	ldr	r6, [r1, #8]
 800b372:	461f      	mov	r7, r3
 800b374:	42be      	cmp	r6, r7
 800b376:	680b      	ldr	r3, [r1, #0]
 800b378:	4682      	mov	sl, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	4690      	mov	r8, r2
 800b37e:	d82d      	bhi.n	800b3dc <__ssputs_r+0x70>
 800b380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b384:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b388:	d026      	beq.n	800b3d8 <__ssputs_r+0x6c>
 800b38a:	6965      	ldr	r5, [r4, #20]
 800b38c:	6909      	ldr	r1, [r1, #16]
 800b38e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b392:	eba3 0901 	sub.w	r9, r3, r1
 800b396:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b39a:	1c7b      	adds	r3, r7, #1
 800b39c:	444b      	add	r3, r9
 800b39e:	106d      	asrs	r5, r5, #1
 800b3a0:	429d      	cmp	r5, r3
 800b3a2:	bf38      	it	cc
 800b3a4:	461d      	movcc	r5, r3
 800b3a6:	0553      	lsls	r3, r2, #21
 800b3a8:	d527      	bpl.n	800b3fa <__ssputs_r+0x8e>
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7ff ff52 	bl	800b254 <_malloc_r>
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	b360      	cbz	r0, 800b40e <__ssputs_r+0xa2>
 800b3b4:	6921      	ldr	r1, [r4, #16]
 800b3b6:	464a      	mov	r2, r9
 800b3b8:	f7ff fed2 	bl	800b160 <memcpy>
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	6126      	str	r6, [r4, #16]
 800b3ca:	6165      	str	r5, [r4, #20]
 800b3cc:	444e      	add	r6, r9
 800b3ce:	eba5 0509 	sub.w	r5, r5, r9
 800b3d2:	6026      	str	r6, [r4, #0]
 800b3d4:	60a5      	str	r5, [r4, #8]
 800b3d6:	463e      	mov	r6, r7
 800b3d8:	42be      	cmp	r6, r7
 800b3da:	d900      	bls.n	800b3de <__ssputs_r+0x72>
 800b3dc:	463e      	mov	r6, r7
 800b3de:	6820      	ldr	r0, [r4, #0]
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	4641      	mov	r1, r8
 800b3e4:	f000 faa8 	bl	800b938 <memmove>
 800b3e8:	68a3      	ldr	r3, [r4, #8]
 800b3ea:	1b9b      	subs	r3, r3, r6
 800b3ec:	60a3      	str	r3, [r4, #8]
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	4433      	add	r3, r6
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	f000 fac6 	bl	800b98c <_realloc_r>
 800b400:	4606      	mov	r6, r0
 800b402:	2800      	cmp	r0, #0
 800b404:	d1e0      	bne.n	800b3c8 <__ssputs_r+0x5c>
 800b406:	6921      	ldr	r1, [r4, #16]
 800b408:	4650      	mov	r0, sl
 800b40a:	f7ff feb7 	bl	800b17c <_free_r>
 800b40e:	230c      	movs	r3, #12
 800b410:	f8ca 3000 	str.w	r3, [sl]
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b41a:	81a3      	strh	r3, [r4, #12]
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	e7e9      	b.n	800b3f6 <__ssputs_r+0x8a>
	...

0800b424 <_svfiprintf_r>:
 800b424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b428:	4698      	mov	r8, r3
 800b42a:	898b      	ldrh	r3, [r1, #12]
 800b42c:	061b      	lsls	r3, r3, #24
 800b42e:	b09d      	sub	sp, #116	@ 0x74
 800b430:	4607      	mov	r7, r0
 800b432:	460d      	mov	r5, r1
 800b434:	4614      	mov	r4, r2
 800b436:	d510      	bpl.n	800b45a <_svfiprintf_r+0x36>
 800b438:	690b      	ldr	r3, [r1, #16]
 800b43a:	b973      	cbnz	r3, 800b45a <_svfiprintf_r+0x36>
 800b43c:	2140      	movs	r1, #64	@ 0x40
 800b43e:	f7ff ff09 	bl	800b254 <_malloc_r>
 800b442:	6028      	str	r0, [r5, #0]
 800b444:	6128      	str	r0, [r5, #16]
 800b446:	b930      	cbnz	r0, 800b456 <_svfiprintf_r+0x32>
 800b448:	230c      	movs	r3, #12
 800b44a:	603b      	str	r3, [r7, #0]
 800b44c:	f04f 30ff 	mov.w	r0, #4294967295
 800b450:	b01d      	add	sp, #116	@ 0x74
 800b452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b456:	2340      	movs	r3, #64	@ 0x40
 800b458:	616b      	str	r3, [r5, #20]
 800b45a:	2300      	movs	r3, #0
 800b45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b45e:	2320      	movs	r3, #32
 800b460:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b464:	f8cd 800c 	str.w	r8, [sp, #12]
 800b468:	2330      	movs	r3, #48	@ 0x30
 800b46a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b608 <_svfiprintf_r+0x1e4>
 800b46e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b472:	f04f 0901 	mov.w	r9, #1
 800b476:	4623      	mov	r3, r4
 800b478:	469a      	mov	sl, r3
 800b47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47e:	b10a      	cbz	r2, 800b484 <_svfiprintf_r+0x60>
 800b480:	2a25      	cmp	r2, #37	@ 0x25
 800b482:	d1f9      	bne.n	800b478 <_svfiprintf_r+0x54>
 800b484:	ebba 0b04 	subs.w	fp, sl, r4
 800b488:	d00b      	beq.n	800b4a2 <_svfiprintf_r+0x7e>
 800b48a:	465b      	mov	r3, fp
 800b48c:	4622      	mov	r2, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	4638      	mov	r0, r7
 800b492:	f7ff ff6b 	bl	800b36c <__ssputs_r>
 800b496:	3001      	adds	r0, #1
 800b498:	f000 80a7 	beq.w	800b5ea <_svfiprintf_r+0x1c6>
 800b49c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b49e:	445a      	add	r2, fp
 800b4a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 809f 	beq.w	800b5ea <_svfiprintf_r+0x1c6>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b6:	f10a 0a01 	add.w	sl, sl, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	9307      	str	r3, [sp, #28]
 800b4be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4c4:	4654      	mov	r4, sl
 800b4c6:	2205      	movs	r2, #5
 800b4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4cc:	484e      	ldr	r0, [pc, #312]	@ (800b608 <_svfiprintf_r+0x1e4>)
 800b4ce:	f7f4 ff27 	bl	8000320 <memchr>
 800b4d2:	9a04      	ldr	r2, [sp, #16]
 800b4d4:	b9d8      	cbnz	r0, 800b50e <_svfiprintf_r+0xea>
 800b4d6:	06d0      	lsls	r0, r2, #27
 800b4d8:	bf44      	itt	mi
 800b4da:	2320      	movmi	r3, #32
 800b4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e0:	0711      	lsls	r1, r2, #28
 800b4e2:	bf44      	itt	mi
 800b4e4:	232b      	movmi	r3, #43	@ 0x2b
 800b4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4f0:	d015      	beq.n	800b51e <_svfiprintf_r+0xfa>
 800b4f2:	9a07      	ldr	r2, [sp, #28]
 800b4f4:	4654      	mov	r4, sl
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f04f 0c0a 	mov.w	ip, #10
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b502:	3b30      	subs	r3, #48	@ 0x30
 800b504:	2b09      	cmp	r3, #9
 800b506:	d94b      	bls.n	800b5a0 <_svfiprintf_r+0x17c>
 800b508:	b1b0      	cbz	r0, 800b538 <_svfiprintf_r+0x114>
 800b50a:	9207      	str	r2, [sp, #28]
 800b50c:	e014      	b.n	800b538 <_svfiprintf_r+0x114>
 800b50e:	eba0 0308 	sub.w	r3, r0, r8
 800b512:	fa09 f303 	lsl.w	r3, r9, r3
 800b516:	4313      	orrs	r3, r2
 800b518:	9304      	str	r3, [sp, #16]
 800b51a:	46a2      	mov	sl, r4
 800b51c:	e7d2      	b.n	800b4c4 <_svfiprintf_r+0xa0>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	1d19      	adds	r1, r3, #4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	9103      	str	r1, [sp, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	bfbb      	ittet	lt
 800b52a:	425b      	neglt	r3, r3
 800b52c:	f042 0202 	orrlt.w	r2, r2, #2
 800b530:	9307      	strge	r3, [sp, #28]
 800b532:	9307      	strlt	r3, [sp, #28]
 800b534:	bfb8      	it	lt
 800b536:	9204      	strlt	r2, [sp, #16]
 800b538:	7823      	ldrb	r3, [r4, #0]
 800b53a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b53c:	d10a      	bne.n	800b554 <_svfiprintf_r+0x130>
 800b53e:	7863      	ldrb	r3, [r4, #1]
 800b540:	2b2a      	cmp	r3, #42	@ 0x2a
 800b542:	d132      	bne.n	800b5aa <_svfiprintf_r+0x186>
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	1d1a      	adds	r2, r3, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	9203      	str	r2, [sp, #12]
 800b54c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b550:	3402      	adds	r4, #2
 800b552:	9305      	str	r3, [sp, #20]
 800b554:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b618 <_svfiprintf_r+0x1f4>
 800b558:	7821      	ldrb	r1, [r4, #0]
 800b55a:	2203      	movs	r2, #3
 800b55c:	4650      	mov	r0, sl
 800b55e:	f7f4 fedf 	bl	8000320 <memchr>
 800b562:	b138      	cbz	r0, 800b574 <_svfiprintf_r+0x150>
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	eba0 000a 	sub.w	r0, r0, sl
 800b56a:	2240      	movs	r2, #64	@ 0x40
 800b56c:	4082      	lsls	r2, r0
 800b56e:	4313      	orrs	r3, r2
 800b570:	3401      	adds	r4, #1
 800b572:	9304      	str	r3, [sp, #16]
 800b574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b578:	4824      	ldr	r0, [pc, #144]	@ (800b60c <_svfiprintf_r+0x1e8>)
 800b57a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b57e:	2206      	movs	r2, #6
 800b580:	f7f4 fece 	bl	8000320 <memchr>
 800b584:	2800      	cmp	r0, #0
 800b586:	d036      	beq.n	800b5f6 <_svfiprintf_r+0x1d2>
 800b588:	4b21      	ldr	r3, [pc, #132]	@ (800b610 <_svfiprintf_r+0x1ec>)
 800b58a:	bb1b      	cbnz	r3, 800b5d4 <_svfiprintf_r+0x1b0>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	3307      	adds	r3, #7
 800b590:	f023 0307 	bic.w	r3, r3, #7
 800b594:	3308      	adds	r3, #8
 800b596:	9303      	str	r3, [sp, #12]
 800b598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b59a:	4433      	add	r3, r6
 800b59c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b59e:	e76a      	b.n	800b476 <_svfiprintf_r+0x52>
 800b5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	e7a8      	b.n	800b4fc <_svfiprintf_r+0xd8>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	3401      	adds	r4, #1
 800b5ae:	9305      	str	r3, [sp, #20]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	f04f 0c0a 	mov.w	ip, #10
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5bc:	3a30      	subs	r2, #48	@ 0x30
 800b5be:	2a09      	cmp	r2, #9
 800b5c0:	d903      	bls.n	800b5ca <_svfiprintf_r+0x1a6>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0c6      	beq.n	800b554 <_svfiprintf_r+0x130>
 800b5c6:	9105      	str	r1, [sp, #20]
 800b5c8:	e7c4      	b.n	800b554 <_svfiprintf_r+0x130>
 800b5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e7f0      	b.n	800b5b6 <_svfiprintf_r+0x192>
 800b5d4:	ab03      	add	r3, sp, #12
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	462a      	mov	r2, r5
 800b5da:	4b0e      	ldr	r3, [pc, #56]	@ (800b614 <_svfiprintf_r+0x1f0>)
 800b5dc:	a904      	add	r1, sp, #16
 800b5de:	4638      	mov	r0, r7
 800b5e0:	f3af 8000 	nop.w
 800b5e4:	1c42      	adds	r2, r0, #1
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	d1d6      	bne.n	800b598 <_svfiprintf_r+0x174>
 800b5ea:	89ab      	ldrh	r3, [r5, #12]
 800b5ec:	065b      	lsls	r3, r3, #25
 800b5ee:	f53f af2d 	bmi.w	800b44c <_svfiprintf_r+0x28>
 800b5f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f4:	e72c      	b.n	800b450 <_svfiprintf_r+0x2c>
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4b05      	ldr	r3, [pc, #20]	@ (800b614 <_svfiprintf_r+0x1f0>)
 800b5fe:	a904      	add	r1, sp, #16
 800b600:	4638      	mov	r0, r7
 800b602:	f000 f879 	bl	800b6f8 <_printf_i>
 800b606:	e7ed      	b.n	800b5e4 <_svfiprintf_r+0x1c0>
 800b608:	0800bd44 	.word	0x0800bd44
 800b60c:	0800bd4e 	.word	0x0800bd4e
 800b610:	00000000 	.word	0x00000000
 800b614:	0800b36d 	.word	0x0800b36d
 800b618:	0800bd4a 	.word	0x0800bd4a

0800b61c <_printf_common>:
 800b61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b620:	4616      	mov	r6, r2
 800b622:	4698      	mov	r8, r3
 800b624:	688a      	ldr	r2, [r1, #8]
 800b626:	690b      	ldr	r3, [r1, #16]
 800b628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b62c:	4293      	cmp	r3, r2
 800b62e:	bfb8      	it	lt
 800b630:	4613      	movlt	r3, r2
 800b632:	6033      	str	r3, [r6, #0]
 800b634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b638:	4607      	mov	r7, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	b10a      	cbz	r2, 800b642 <_printf_common+0x26>
 800b63e:	3301      	adds	r3, #1
 800b640:	6033      	str	r3, [r6, #0]
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	0699      	lsls	r1, r3, #26
 800b646:	bf42      	ittt	mi
 800b648:	6833      	ldrmi	r3, [r6, #0]
 800b64a:	3302      	addmi	r3, #2
 800b64c:	6033      	strmi	r3, [r6, #0]
 800b64e:	6825      	ldr	r5, [r4, #0]
 800b650:	f015 0506 	ands.w	r5, r5, #6
 800b654:	d106      	bne.n	800b664 <_printf_common+0x48>
 800b656:	f104 0a19 	add.w	sl, r4, #25
 800b65a:	68e3      	ldr	r3, [r4, #12]
 800b65c:	6832      	ldr	r2, [r6, #0]
 800b65e:	1a9b      	subs	r3, r3, r2
 800b660:	42ab      	cmp	r3, r5
 800b662:	dc26      	bgt.n	800b6b2 <_printf_common+0x96>
 800b664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b668:	6822      	ldr	r2, [r4, #0]
 800b66a:	3b00      	subs	r3, #0
 800b66c:	bf18      	it	ne
 800b66e:	2301      	movne	r3, #1
 800b670:	0692      	lsls	r2, r2, #26
 800b672:	d42b      	bmi.n	800b6cc <_printf_common+0xb0>
 800b674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b678:	4641      	mov	r1, r8
 800b67a:	4638      	mov	r0, r7
 800b67c:	47c8      	blx	r9
 800b67e:	3001      	adds	r0, #1
 800b680:	d01e      	beq.n	800b6c0 <_printf_common+0xa4>
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	6922      	ldr	r2, [r4, #16]
 800b686:	f003 0306 	and.w	r3, r3, #6
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	bf02      	ittt	eq
 800b68e:	68e5      	ldreq	r5, [r4, #12]
 800b690:	6833      	ldreq	r3, [r6, #0]
 800b692:	1aed      	subeq	r5, r5, r3
 800b694:	68a3      	ldr	r3, [r4, #8]
 800b696:	bf0c      	ite	eq
 800b698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b69c:	2500      	movne	r5, #0
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	bfc4      	itt	gt
 800b6a2:	1a9b      	subgt	r3, r3, r2
 800b6a4:	18ed      	addgt	r5, r5, r3
 800b6a6:	2600      	movs	r6, #0
 800b6a8:	341a      	adds	r4, #26
 800b6aa:	42b5      	cmp	r5, r6
 800b6ac:	d11a      	bne.n	800b6e4 <_printf_common+0xc8>
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e008      	b.n	800b6c4 <_printf_common+0xa8>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	4652      	mov	r2, sl
 800b6b6:	4641      	mov	r1, r8
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	47c8      	blx	r9
 800b6bc:	3001      	adds	r0, #1
 800b6be:	d103      	bne.n	800b6c8 <_printf_common+0xac>
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c8:	3501      	adds	r5, #1
 800b6ca:	e7c6      	b.n	800b65a <_printf_common+0x3e>
 800b6cc:	18e1      	adds	r1, r4, r3
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	2030      	movs	r0, #48	@ 0x30
 800b6d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6d6:	4422      	add	r2, r4
 800b6d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6e0:	3302      	adds	r3, #2
 800b6e2:	e7c7      	b.n	800b674 <_printf_common+0x58>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	4622      	mov	r2, r4
 800b6e8:	4641      	mov	r1, r8
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	47c8      	blx	r9
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	d0e6      	beq.n	800b6c0 <_printf_common+0xa4>
 800b6f2:	3601      	adds	r6, #1
 800b6f4:	e7d9      	b.n	800b6aa <_printf_common+0x8e>
	...

0800b6f8 <_printf_i>:
 800b6f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fc:	7e0f      	ldrb	r7, [r1, #24]
 800b6fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b700:	2f78      	cmp	r7, #120	@ 0x78
 800b702:	4691      	mov	r9, r2
 800b704:	4680      	mov	r8, r0
 800b706:	460c      	mov	r4, r1
 800b708:	469a      	mov	sl, r3
 800b70a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b70e:	d807      	bhi.n	800b720 <_printf_i+0x28>
 800b710:	2f62      	cmp	r7, #98	@ 0x62
 800b712:	d80a      	bhi.n	800b72a <_printf_i+0x32>
 800b714:	2f00      	cmp	r7, #0
 800b716:	f000 80d2 	beq.w	800b8be <_printf_i+0x1c6>
 800b71a:	2f58      	cmp	r7, #88	@ 0x58
 800b71c:	f000 80b9 	beq.w	800b892 <_printf_i+0x19a>
 800b720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b728:	e03a      	b.n	800b7a0 <_printf_i+0xa8>
 800b72a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b72e:	2b15      	cmp	r3, #21
 800b730:	d8f6      	bhi.n	800b720 <_printf_i+0x28>
 800b732:	a101      	add	r1, pc, #4	@ (adr r1, 800b738 <_printf_i+0x40>)
 800b734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b738:	0800b791 	.word	0x0800b791
 800b73c:	0800b7a5 	.word	0x0800b7a5
 800b740:	0800b721 	.word	0x0800b721
 800b744:	0800b721 	.word	0x0800b721
 800b748:	0800b721 	.word	0x0800b721
 800b74c:	0800b721 	.word	0x0800b721
 800b750:	0800b7a5 	.word	0x0800b7a5
 800b754:	0800b721 	.word	0x0800b721
 800b758:	0800b721 	.word	0x0800b721
 800b75c:	0800b721 	.word	0x0800b721
 800b760:	0800b721 	.word	0x0800b721
 800b764:	0800b8a5 	.word	0x0800b8a5
 800b768:	0800b7cf 	.word	0x0800b7cf
 800b76c:	0800b85f 	.word	0x0800b85f
 800b770:	0800b721 	.word	0x0800b721
 800b774:	0800b721 	.word	0x0800b721
 800b778:	0800b8c7 	.word	0x0800b8c7
 800b77c:	0800b721 	.word	0x0800b721
 800b780:	0800b7cf 	.word	0x0800b7cf
 800b784:	0800b721 	.word	0x0800b721
 800b788:	0800b721 	.word	0x0800b721
 800b78c:	0800b867 	.word	0x0800b867
 800b790:	6833      	ldr	r3, [r6, #0]
 800b792:	1d1a      	adds	r2, r3, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	6032      	str	r2, [r6, #0]
 800b798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b79c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e09d      	b.n	800b8e0 <_printf_i+0x1e8>
 800b7a4:	6833      	ldr	r3, [r6, #0]
 800b7a6:	6820      	ldr	r0, [r4, #0]
 800b7a8:	1d19      	adds	r1, r3, #4
 800b7aa:	6031      	str	r1, [r6, #0]
 800b7ac:	0606      	lsls	r6, r0, #24
 800b7ae:	d501      	bpl.n	800b7b4 <_printf_i+0xbc>
 800b7b0:	681d      	ldr	r5, [r3, #0]
 800b7b2:	e003      	b.n	800b7bc <_printf_i+0xc4>
 800b7b4:	0645      	lsls	r5, r0, #25
 800b7b6:	d5fb      	bpl.n	800b7b0 <_printf_i+0xb8>
 800b7b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7bc:	2d00      	cmp	r5, #0
 800b7be:	da03      	bge.n	800b7c8 <_printf_i+0xd0>
 800b7c0:	232d      	movs	r3, #45	@ 0x2d
 800b7c2:	426d      	negs	r5, r5
 800b7c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7c8:	4859      	ldr	r0, [pc, #356]	@ (800b930 <_printf_i+0x238>)
 800b7ca:	230a      	movs	r3, #10
 800b7cc:	e011      	b.n	800b7f2 <_printf_i+0xfa>
 800b7ce:	6821      	ldr	r1, [r4, #0]
 800b7d0:	6833      	ldr	r3, [r6, #0]
 800b7d2:	0608      	lsls	r0, r1, #24
 800b7d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7d8:	d402      	bmi.n	800b7e0 <_printf_i+0xe8>
 800b7da:	0649      	lsls	r1, r1, #25
 800b7dc:	bf48      	it	mi
 800b7de:	b2ad      	uxthmi	r5, r5
 800b7e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7e2:	4853      	ldr	r0, [pc, #332]	@ (800b930 <_printf_i+0x238>)
 800b7e4:	6033      	str	r3, [r6, #0]
 800b7e6:	bf14      	ite	ne
 800b7e8:	230a      	movne	r3, #10
 800b7ea:	2308      	moveq	r3, #8
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7f2:	6866      	ldr	r6, [r4, #4]
 800b7f4:	60a6      	str	r6, [r4, #8]
 800b7f6:	2e00      	cmp	r6, #0
 800b7f8:	bfa2      	ittt	ge
 800b7fa:	6821      	ldrge	r1, [r4, #0]
 800b7fc:	f021 0104 	bicge.w	r1, r1, #4
 800b800:	6021      	strge	r1, [r4, #0]
 800b802:	b90d      	cbnz	r5, 800b808 <_printf_i+0x110>
 800b804:	2e00      	cmp	r6, #0
 800b806:	d04b      	beq.n	800b8a0 <_printf_i+0x1a8>
 800b808:	4616      	mov	r6, r2
 800b80a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b80e:	fb03 5711 	mls	r7, r3, r1, r5
 800b812:	5dc7      	ldrb	r7, [r0, r7]
 800b814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b818:	462f      	mov	r7, r5
 800b81a:	42bb      	cmp	r3, r7
 800b81c:	460d      	mov	r5, r1
 800b81e:	d9f4      	bls.n	800b80a <_printf_i+0x112>
 800b820:	2b08      	cmp	r3, #8
 800b822:	d10b      	bne.n	800b83c <_printf_i+0x144>
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	07df      	lsls	r7, r3, #31
 800b828:	d508      	bpl.n	800b83c <_printf_i+0x144>
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	6861      	ldr	r1, [r4, #4]
 800b82e:	4299      	cmp	r1, r3
 800b830:	bfde      	ittt	le
 800b832:	2330      	movle	r3, #48	@ 0x30
 800b834:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b83c:	1b92      	subs	r2, r2, r6
 800b83e:	6122      	str	r2, [r4, #16]
 800b840:	f8cd a000 	str.w	sl, [sp]
 800b844:	464b      	mov	r3, r9
 800b846:	aa03      	add	r2, sp, #12
 800b848:	4621      	mov	r1, r4
 800b84a:	4640      	mov	r0, r8
 800b84c:	f7ff fee6 	bl	800b61c <_printf_common>
 800b850:	3001      	adds	r0, #1
 800b852:	d14a      	bne.n	800b8ea <_printf_i+0x1f2>
 800b854:	f04f 30ff 	mov.w	r0, #4294967295
 800b858:	b004      	add	sp, #16
 800b85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	f043 0320 	orr.w	r3, r3, #32
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	4833      	ldr	r0, [pc, #204]	@ (800b934 <_printf_i+0x23c>)
 800b868:	2778      	movs	r7, #120	@ 0x78
 800b86a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	6831      	ldr	r1, [r6, #0]
 800b872:	061f      	lsls	r7, r3, #24
 800b874:	f851 5b04 	ldr.w	r5, [r1], #4
 800b878:	d402      	bmi.n	800b880 <_printf_i+0x188>
 800b87a:	065f      	lsls	r7, r3, #25
 800b87c:	bf48      	it	mi
 800b87e:	b2ad      	uxthmi	r5, r5
 800b880:	6031      	str	r1, [r6, #0]
 800b882:	07d9      	lsls	r1, r3, #31
 800b884:	bf44      	itt	mi
 800b886:	f043 0320 	orrmi.w	r3, r3, #32
 800b88a:	6023      	strmi	r3, [r4, #0]
 800b88c:	b11d      	cbz	r5, 800b896 <_printf_i+0x19e>
 800b88e:	2310      	movs	r3, #16
 800b890:	e7ac      	b.n	800b7ec <_printf_i+0xf4>
 800b892:	4827      	ldr	r0, [pc, #156]	@ (800b930 <_printf_i+0x238>)
 800b894:	e7e9      	b.n	800b86a <_printf_i+0x172>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	f023 0320 	bic.w	r3, r3, #32
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	e7f6      	b.n	800b88e <_printf_i+0x196>
 800b8a0:	4616      	mov	r6, r2
 800b8a2:	e7bd      	b.n	800b820 <_printf_i+0x128>
 800b8a4:	6833      	ldr	r3, [r6, #0]
 800b8a6:	6825      	ldr	r5, [r4, #0]
 800b8a8:	6961      	ldr	r1, [r4, #20]
 800b8aa:	1d18      	adds	r0, r3, #4
 800b8ac:	6030      	str	r0, [r6, #0]
 800b8ae:	062e      	lsls	r6, r5, #24
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	d501      	bpl.n	800b8b8 <_printf_i+0x1c0>
 800b8b4:	6019      	str	r1, [r3, #0]
 800b8b6:	e002      	b.n	800b8be <_printf_i+0x1c6>
 800b8b8:	0668      	lsls	r0, r5, #25
 800b8ba:	d5fb      	bpl.n	800b8b4 <_printf_i+0x1bc>
 800b8bc:	8019      	strh	r1, [r3, #0]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	6123      	str	r3, [r4, #16]
 800b8c2:	4616      	mov	r6, r2
 800b8c4:	e7bc      	b.n	800b840 <_printf_i+0x148>
 800b8c6:	6833      	ldr	r3, [r6, #0]
 800b8c8:	1d1a      	adds	r2, r3, #4
 800b8ca:	6032      	str	r2, [r6, #0]
 800b8cc:	681e      	ldr	r6, [r3, #0]
 800b8ce:	6862      	ldr	r2, [r4, #4]
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f7f4 fd24 	bl	8000320 <memchr>
 800b8d8:	b108      	cbz	r0, 800b8de <_printf_i+0x1e6>
 800b8da:	1b80      	subs	r0, r0, r6
 800b8dc:	6060      	str	r0, [r4, #4]
 800b8de:	6863      	ldr	r3, [r4, #4]
 800b8e0:	6123      	str	r3, [r4, #16]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8e8:	e7aa      	b.n	800b840 <_printf_i+0x148>
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	47d0      	blx	sl
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d0ad      	beq.n	800b854 <_printf_i+0x15c>
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	079b      	lsls	r3, r3, #30
 800b8fc:	d413      	bmi.n	800b926 <_printf_i+0x22e>
 800b8fe:	68e0      	ldr	r0, [r4, #12]
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	4298      	cmp	r0, r3
 800b904:	bfb8      	it	lt
 800b906:	4618      	movlt	r0, r3
 800b908:	e7a6      	b.n	800b858 <_printf_i+0x160>
 800b90a:	2301      	movs	r3, #1
 800b90c:	4632      	mov	r2, r6
 800b90e:	4649      	mov	r1, r9
 800b910:	4640      	mov	r0, r8
 800b912:	47d0      	blx	sl
 800b914:	3001      	adds	r0, #1
 800b916:	d09d      	beq.n	800b854 <_printf_i+0x15c>
 800b918:	3501      	adds	r5, #1
 800b91a:	68e3      	ldr	r3, [r4, #12]
 800b91c:	9903      	ldr	r1, [sp, #12]
 800b91e:	1a5b      	subs	r3, r3, r1
 800b920:	42ab      	cmp	r3, r5
 800b922:	dcf2      	bgt.n	800b90a <_printf_i+0x212>
 800b924:	e7eb      	b.n	800b8fe <_printf_i+0x206>
 800b926:	2500      	movs	r5, #0
 800b928:	f104 0619 	add.w	r6, r4, #25
 800b92c:	e7f5      	b.n	800b91a <_printf_i+0x222>
 800b92e:	bf00      	nop
 800b930:	0800bd55 	.word	0x0800bd55
 800b934:	0800bd66 	.word	0x0800bd66

0800b938 <memmove>:
 800b938:	4288      	cmp	r0, r1
 800b93a:	b510      	push	{r4, lr}
 800b93c:	eb01 0402 	add.w	r4, r1, r2
 800b940:	d902      	bls.n	800b948 <memmove+0x10>
 800b942:	4284      	cmp	r4, r0
 800b944:	4623      	mov	r3, r4
 800b946:	d807      	bhi.n	800b958 <memmove+0x20>
 800b948:	1e43      	subs	r3, r0, #1
 800b94a:	42a1      	cmp	r1, r4
 800b94c:	d008      	beq.n	800b960 <memmove+0x28>
 800b94e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b952:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b956:	e7f8      	b.n	800b94a <memmove+0x12>
 800b958:	4402      	add	r2, r0
 800b95a:	4601      	mov	r1, r0
 800b95c:	428a      	cmp	r2, r1
 800b95e:	d100      	bne.n	800b962 <memmove+0x2a>
 800b960:	bd10      	pop	{r4, pc}
 800b962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b96a:	e7f7      	b.n	800b95c <memmove+0x24>

0800b96c <_sbrk_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	@ (800b988 <_sbrk_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f6 ffc4 	bl	8002904 <_sbrk>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_sbrk_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_sbrk_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	240014f4 	.word	0x240014f4

0800b98c <_realloc_r>:
 800b98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b990:	4680      	mov	r8, r0
 800b992:	4615      	mov	r5, r2
 800b994:	460c      	mov	r4, r1
 800b996:	b921      	cbnz	r1, 800b9a2 <_realloc_r+0x16>
 800b998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b99c:	4611      	mov	r1, r2
 800b99e:	f7ff bc59 	b.w	800b254 <_malloc_r>
 800b9a2:	b92a      	cbnz	r2, 800b9b0 <_realloc_r+0x24>
 800b9a4:	f7ff fbea 	bl	800b17c <_free_r>
 800b9a8:	2400      	movs	r4, #0
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	f000 f81a 	bl	800b9e8 <_malloc_usable_size_r>
 800b9b4:	4285      	cmp	r5, r0
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	d802      	bhi.n	800b9c0 <_realloc_r+0x34>
 800b9ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b9be:	d8f4      	bhi.n	800b9aa <_realloc_r+0x1e>
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	f7ff fc46 	bl	800b254 <_malloc_r>
 800b9c8:	4607      	mov	r7, r0
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d0ec      	beq.n	800b9a8 <_realloc_r+0x1c>
 800b9ce:	42b5      	cmp	r5, r6
 800b9d0:	462a      	mov	r2, r5
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	bf28      	it	cs
 800b9d6:	4632      	movcs	r2, r6
 800b9d8:	f7ff fbc2 	bl	800b160 <memcpy>
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4640      	mov	r0, r8
 800b9e0:	f7ff fbcc 	bl	800b17c <_free_r>
 800b9e4:	463c      	mov	r4, r7
 800b9e6:	e7e0      	b.n	800b9aa <_realloc_r+0x1e>

0800b9e8 <_malloc_usable_size_r>:
 800b9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ec:	1f18      	subs	r0, r3, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bfbc      	itt	lt
 800b9f2:	580b      	ldrlt	r3, [r1, r0]
 800b9f4:	18c0      	addlt	r0, r0, r3
 800b9f6:	4770      	bx	lr

0800b9f8 <_init>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	bf00      	nop
 800b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fe:	bc08      	pop	{r3}
 800ba00:	469e      	mov	lr, r3
 800ba02:	4770      	bx	lr

0800ba04 <_fini>:
 800ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba06:	bf00      	nop
 800ba08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba0a:	bc08      	pop	{r3}
 800ba0c:	469e      	mov	lr, r3
 800ba0e:	4770      	bx	lr
