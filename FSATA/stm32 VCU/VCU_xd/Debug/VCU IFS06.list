
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123a4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08012674  08012674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012b18  08012b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012b20  08012b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012b24  08012b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08012b28  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b44  2400006c  08012b94  0001406c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001bb0  08012b94  00014bb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000288e0  00000000  00000000  0001409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041fc  00000000  00000000  0003c97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002080  00000000  00000000  00040b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000195a  00000000  00000000  00042bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a603  00000000  00000000  00044552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ba31  00000000  00000000  0007eb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179a85  00000000  00000000  000aa586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022400b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092cc  00000000  00000000  00224050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  0022d31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801265c 	.word	0x0801265c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0801265c 	.word	0x0801265c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <LPF_EMA_Init>:
 *      Author: RMG
 */

#include "LPF.h"

void LPF_EMA_Init(LPF_EMA *filt, float alpha){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	ed87 0a00 	vstr	s0, [r7]

	//Set filter coefficient

	LPF_EMA_SetAlpha(filt, alpha);
 80006bc:	ed97 0a00 	vldr	s0, [r7]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f808 	bl	80006d6 <LPF_EMA_SetAlpha>

	//Clear filter output

	filt->output = 0.0f;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <LPF_EMA_SetAlpha>:

void LPF_EMA_SetAlpha(LPF_EMA *filt, float alpha){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	ed87 0a00 	vstr	s0, [r7]

	//Correct filter

	if(alpha > 1.0f){
 80006e2:	edd7 7a00 	vldr	s15, [r7]
 80006e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f2:	dd03      	ble.n	80006fc <LPF_EMA_SetAlpha+0x26>
		alpha = 1.0f;
 80006f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	e009      	b.n	8000710 <LPF_EMA_SetAlpha+0x3a>

	}else if (alpha < 0.0f){
 80006fc:	edd7 7a00 	vldr	s15, [r7]
 8000700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000708:	d502      	bpl.n	8000710 <LPF_EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
	}

	//Set filter coefficient

	filt->alpha = alpha;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <LPF_EMA_Update>:

float LPF_EMA_Update(LPF_EMA *filt, float in){
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	ed87 0a00 	vstr	s0, [r7]

	filt->output = filt->alpha*in + (1-filt->alpha)*filt->output;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	ed93 7a00 	vldr	s14, [r3]
 8000734:	edd7 7a00 	vldr	s15, [r7]
 8000738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000746:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	edc3 7a01 	vstr	s15, [r3, #4]

	return filt->output;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
}
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f002 f88c 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f97e 	bl	8000a7c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000780:	f000 f9ea 	bl	8000b58 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 fdd0 	bl	8001328 <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 fdae 	bl	80012e8 <MX_DMA_Init>
  MX_ADC1_Init();
 800078c:	f000 fa16 	bl	8000bbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000790:	f000 fab0 	bl	8000cf4 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000794:	f000 fb16 	bl	8000dc4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000798:	f000 fb92 	bl	8000ec0 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 800079c:	f000 fc2c 	bl	8000ff8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 fd56 	bl	8001250 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80007a4:	f000 fce0 	bl	8001168 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fd06 	bl	80011b8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80007ac:	f000 fc06 	bl	8000fbc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007b0:	f010 f996 	bl	8010ae0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	//Inicializar tarjeta microSD
	SDCard_start();
 80007b4:	f001 fa90 	bl	8001cd8 <SDCard_start>
	HAL_Delay(2000);
 80007b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007bc:	f002 f8fc 	bl	80029b8 <HAL_Delay>

	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer_adc, 3) != HAL_OK) {
 80007c0:	2203      	movs	r2, #3
 80007c2:	4983      	ldr	r1, [pc, #524]	@ (80009d0 <main+0x25c>)
 80007c4:	4883      	ldr	r0, [pc, #524]	@ (80009d4 <main+0x260>)
 80007c6:	f002 fe0f 	bl	80033e8 <HAL_ADC_Start_DMA>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0x66>
#if DEBUG
		print("Error al inicializar ADC_DMA");
 80007d0:	4881      	ldr	r0, [pc, #516]	@ (80009d8 <main+0x264>)
 80007d2:	f000 fe8d 	bl	80014f0 <print>
#endif
		Error_Handler();
 80007d6:	f001 fb0a 	bl	8001dee <Error_Handler>
	}
	//Inicializacion filtro paso bajo
	LPF_EMA_Init(&s1_filt, 0.09f);
 80007da:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 80009dc <main+0x268>
 80007de:	4880      	ldr	r0, [pc, #512]	@ (80009e0 <main+0x26c>)
 80007e0:	f7ff ff66 	bl	80006b0 <LPF_EMA_Init>
	LPF_EMA_Init(&s2_filt, 0.09f);
 80007e4:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 80009dc <main+0x268>
 80007e8:	487e      	ldr	r0, [pc, #504]	@ (80009e4 <main+0x270>)
 80007ea:	f7ff ff61 	bl	80006b0 <LPF_EMA_Init>

	//Inicialización de buses CAN
	//Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80007ee:	487e      	ldr	r0, [pc, #504]	@ (80009e8 <main+0x274>)
 80007f0:	f006 fddc 	bl	80073ac <HAL_FDCAN_Start>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <main+0x90>
#if DEBUG
		print("Error al inicializar CAN_INV");
 80007fa:	487c      	ldr	r0, [pc, #496]	@ (80009ec <main+0x278>)
 80007fc:	f000 fe78 	bl	80014f0 <print>
#endif
		Error_Handler();
 8000800:	f001 faf5 	bl	8001dee <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4877      	ldr	r0, [pc, #476]	@ (80009e8 <main+0x274>)
 800080a:	f007 f811 	bl	8007830 <HAL_FDCAN_ActivateNotification>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <main+0xaa>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000814:	4876      	ldr	r0, [pc, #472]	@ (80009f0 <main+0x27c>)
 8000816:	f000 fe6b 	bl	80014f0 <print>
#endif
		Error_Handler();
 800081a:	f001 fae8 	bl	8001dee <Error_Handler>
#endif
		Error_Handler();
    }*/

	//Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 800081e:	4875      	ldr	r0, [pc, #468]	@ (80009f4 <main+0x280>)
 8000820:	f006 fdc4 	bl	80073ac <HAL_FDCAN_Start>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <main+0xc0>

#if DEBUG
		print("Error al inicializar CAN_ACU");
 800082a:	4873      	ldr	r0, [pc, #460]	@ (80009f8 <main+0x284>)
 800082c:	f000 fe60 	bl	80014f0 <print>

#endif
		Error_Handler();
 8000830:	f001 fadd 	bl	8001dee <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	486e      	ldr	r0, [pc, #440]	@ (80009f4 <main+0x280>)
 800083a:	f006 fff9 	bl	8007830 <HAL_FDCAN_ActivateNotification>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d004      	beq.n	800084e <main+0xda>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000844:	486d      	ldr	r0, [pc, #436]	@ (80009fc <main+0x288>)
 8000846:	f000 fe53 	bl	80014f0 <print>
#endif
		Error_Handler();
 800084a:	f001 fad0 	bl	8001dee <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if(DEBUG)
	print("Solicitar tensión inversor");
 800084e:	486c      	ldr	r0, [pc, #432]	@ (8000a00 <main+0x28c>)
 8000850:	f000 fe4e 	bl	80014f0 <print>
#endif
	//Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0) {
 8000854:	e006      	b.n	8000864 <main+0xf0>

		if (config_inv_lectura_v == 1) {
 8000856:	4b6b      	ldr	r3, [pc, #428]	@ (8000a04 <main+0x290>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d102      	bne.n	8000864 <main+0xf0>

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 800085e:	486a      	ldr	r0, [pc, #424]	@ (8000a08 <main+0x294>)
 8000860:	f000 fe46 	bl	80014f0 <print>
	while (config_inv_lectura_v == 0) {
 8000864:	4b67      	ldr	r3, [pc, #412]	@ (8000a04 <main+0x290>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f4      	beq.n	8000856 <main+0xe2>
	}

#if !CALIBRATION

	//Estado STAND BY inversor
	while (state != 3) {
 800086c:	e006      	b.n	800087c <main+0x108>

		if (state == 3) {
 800086e:	4b67      	ldr	r3, [pc, #412]	@ (8000a0c <main+0x298>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d102      	bne.n	800087c <main+0x108>
#if DEBUG
			print("Precarga");
 8000876:	4866      	ldr	r0, [pc, #408]	@ (8000a10 <main+0x29c>)
 8000878:	f000 fe3a 	bl	80014f0 <print>
	while (state != 3) {
 800087c:	4b63      	ldr	r3, [pc, #396]	@ (8000a0c <main+0x298>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d1f4      	bne.n	800086e <main+0xfa>
#endif
		}
	}
	//PRE-CHARGE
	while (precarga_inv == 0) {
 8000884:	e037      	b.n	80008f6 <main+0x182>

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000886:	4b63      	ldr	r3, [pc, #396]	@ (8000a14 <main+0x2a0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4962      	ldr	r1, [pc, #392]	@ (8000a18 <main+0x2a4>)
 800088e:	4863      	ldr	r0, [pc, #396]	@ (8000a1c <main+0x2a8>)
 8000890:	f011 fa44 	bl	8011d1c <siprintf>
		print(TxBuffer);
 8000894:	4861      	ldr	r0, [pc, #388]	@ (8000a1c <main+0x2a8>)
 8000896:	f000 fe2b 	bl	80014f0 <print>
		//printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		//Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800089a:	4b61      	ldr	r3, [pc, #388]	@ (8000a20 <main+0x2ac>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a61      	ldr	r2, [pc, #388]	@ (8000a24 <main+0x2b0>)
 80008a0:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 80008a2:	4b60      	ldr	r3, [pc, #384]	@ (8000a24 <main+0x2b0>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a24 <main+0x2b0>)
 80008aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ae:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008b0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a24 <main+0x2b0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008b6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <main+0x2b0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008bc:	4b55      	ldr	r3, [pc, #340]	@ (8000a14 <main+0x2a0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b59      	ldr	r3, [pc, #356]	@ (8000a28 <main+0x2b4>)
 80008c4:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008c6:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <main+0x2a0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	121b      	asrs	r3, r3, #8
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b56      	ldr	r3, [pc, #344]	@ (8000a28 <main+0x2b4>)
 80008d0:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu)
 80008d2:	4a55      	ldr	r2, [pc, #340]	@ (8000a28 <main+0x2b4>)
 80008d4:	4953      	ldr	r1, [pc, #332]	@ (8000a24 <main+0x2b0>)
 80008d6:	4847      	ldr	r0, [pc, #284]	@ (80009f4 <main+0x280>)
 80008d8:	f006 fd93 	bl	8007402 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <main+0x174>
				== HAL_OK) {
#if DEBUG
			print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 80008e2:	4852      	ldr	r0, [pc, #328]	@ (8000a2c <main+0x2b8>)
 80008e4:	f000 fe04 	bl	80014f0 <print>
#endif
		}

		if (precarga_inv == 1) {
 80008e8:	4b51      	ldr	r3, [pc, #324]	@ (8000a30 <main+0x2bc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d102      	bne.n	80008f6 <main+0x182>
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80008f0:	4850      	ldr	r0, [pc, #320]	@ (8000a34 <main+0x2c0>)
 80008f2:	f000 fdfd 	bl	80014f0 <print>
	while (precarga_inv == 0) {
 80008f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a30 <main+0x2bc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0c3      	beq.n	8000886 <main+0x112>
		}

	}

#if DEBUG
	print("state : stand by");
 80008fe:	484e      	ldr	r0, [pc, #312]	@ (8000a38 <main+0x2c4>)
 8000900:	f000 fdf6 	bl	80014f0 <print>
#endif
	//Estado READY inversor
	TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000904:	4b4d      	ldr	r3, [pc, #308]	@ (8000a3c <main+0x2c8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a4d      	ldr	r2, [pc, #308]	@ (8000a40 <main+0x2cc>)
 800090a:	6013      	str	r3, [r2, #0]
	TxHeader_Inv.DataLength = 3;
 800090c:	4b4c      	ldr	r3, [pc, #304]	@ (8000a40 <main+0x2cc>)
 800090e:	2203      	movs	r2, #3
 8000910:	60da      	str	r2, [r3, #12]
	TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000912:	4b4b      	ldr	r3, [pc, #300]	@ (8000a40 <main+0x2cc>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]

	TxData_Inv[0] = 0x0;
 8000918:	4b4a      	ldr	r3, [pc, #296]	@ (8000a44 <main+0x2d0>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	TxData_Inv[1] = 0x0;
 800091e:	4b49      	ldr	r3, [pc, #292]	@ (8000a44 <main+0x2d0>)
 8000920:	2200      	movs	r2, #0
 8000922:	705a      	strb	r2, [r3, #1]
	TxData_Inv[2] = 0x4;
 8000924:	4b47      	ldr	r3, [pc, #284]	@ (8000a44 <main+0x2d0>)
 8000926:	2204      	movs	r2, #4
 8000928:	709a      	strb	r2, [r3, #2]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800092a:	4a46      	ldr	r2, [pc, #280]	@ (8000a44 <main+0x2d0>)
 800092c:	4944      	ldr	r1, [pc, #272]	@ (8000a40 <main+0x2cc>)
 800092e:	482e      	ldr	r0, [pc, #184]	@ (80009e8 <main+0x274>)
 8000930:	f006 fd67 	bl	8007402 <HAL_FDCAN_AddMessageToTxFifoQ>

	while (state != 4) {
 8000934:	bf00      	nop
 8000936:	4b35      	ldr	r3, [pc, #212]	@ (8000a0c <main+0x298>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d1fb      	bne.n	8000936 <main+0x1c2>

	}

#if DEBUG
	print("state: ready");
 800093e:	4842      	ldr	r0, [pc, #264]	@ (8000a48 <main+0x2d4>)
 8000940:	f000 fdd6 	bl	80014f0 <print>
#endif

#endif

	//Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0) {
 8000944:	e027      	b.n	8000996 <main+0x222>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	4840      	ldr	r0, [pc, #256]	@ (8000a4c <main+0x2d8>)
 800094a:	f007 fe8f 	bl	800866c <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b3f      	ldr	r3, [pc, #252]	@ (8000a50 <main+0x2dc>)
 8000954:	601a      	str	r2, [r3, #0]
		START_BUTTON_Pin);
		if (start_button_act == 1 && start_button_ant == 0) {
 8000956:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <main+0x2dc>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d11b      	bne.n	8000996 <main+0x222>
 800095e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <main+0x2e0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d117      	bne.n	8000996 <main+0x222>

#if DEBUG
			print("Botón Start + Freno:");
 8000966:	483c      	ldr	r0, [pc, #240]	@ (8000a58 <main+0x2e4>)
 8000968:	f000 fdc2 	bl	80014f0 <print>
			printValue(s_freno);
 800096c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a5c <main+0x2e8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fddb 	bl	800152c <printValue>
#endif
			if (s_freno > UMBRAL_FRENO) {
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <main+0x2e8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800097e:	4293      	cmp	r3, r2
 8000980:	dd06      	ble.n	8000990 <main+0x21c>
				boton_arranque = 1;
 8000982:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <main+0x2ec>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000988:	4836      	ldr	r0, [pc, #216]	@ (8000a64 <main+0x2f0>)
 800098a:	f000 fdb1 	bl	80014f0 <print>
 800098e:	e002      	b.n	8000996 <main+0x222>
#endif
			} else {
#if DEBUG
				print("Pulsar freno para arrancar");
 8000990:	4835      	ldr	r0, [pc, #212]	@ (8000a68 <main+0x2f4>)
 8000992:	f000 fdad 	bl	80014f0 <print>
	while (boton_arranque == 0) {
 8000996:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <main+0x2ec>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0d3      	beq.n	8000946 <main+0x1d2>
		}
	}

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 800099e:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <main+0x2f8>)
 80009a0:	f000 fda6 	bl	80014f0 <print>
#endif
#if !CALIBRATION

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); //Enciende RTDS
 80009a4:	2201      	movs	r2, #1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4831      	ldr	r0, [pc, #196]	@ (8000a70 <main+0x2fc>)
 80009aa:	f007 fe77 	bl	800869c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80009ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009b2:	f002 f801 	bl	80029b8 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); //Apaga RTDS
 80009b6:	2200      	movs	r2, #0
 80009b8:	2102      	movs	r1, #2
 80009ba:	482d      	ldr	r0, [pc, #180]	@ (8000a70 <main+0x2fc>)
 80009bc:	f007 fe6e 	bl	800869c <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 80009c0:	482c      	ldr	r0, [pc, #176]	@ (8000a74 <main+0x300>)
 80009c2:	f000 fd95 	bl	80014f0 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * prescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80009c6:	482c      	ldr	r0, [pc, #176]	@ (8000a78 <main+0x304>)
 80009c8:	f00c fec4 	bl	800d754 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <main+0x258>
 80009d0:	2400166c 	.word	0x2400166c
 80009d4:	24000094 	.word	0x24000094
 80009d8:	08012674 	.word	0x08012674
 80009dc:	3db851ec 	.word	0x3db851ec
 80009e0:	24001684 	.word	0x24001684
 80009e4:	2400168c 	.word	0x2400168c
 80009e8:	240001ec 	.word	0x240001ec
 80009ec:	08012694 	.word	0x08012694
 80009f0:	080126b4 	.word	0x080126b4
 80009f4:	2400028c 	.word	0x2400028c
 80009f8:	080126dc 	.word	0x080126dc
 80009fc:	080126fc 	.word	0x080126fc
 8000a00:	08012724 	.word	0x08012724
 8000a04:	2400008c 	.word	0x2400008c
 8000a08:	08012740 	.word	0x08012740
 8000a0c:	240016a2 	.word	0x240016a2
 8000a10:	08012774 	.word	0x08012774
 8000a14:	24001660 	.word	0x24001660
 8000a18:	08012780 	.word	0x08012780
 8000a1c:	24001714 	.word	0x24001714
 8000a20:	24000004 	.word	0x24000004
 8000a24:	240005b4 	.word	0x240005b4
 8000a28:	24000610 	.word	0x24000610
 8000a2c:	08012798 	.word	0x08012798
 8000a30:	24000088 	.word	0x24000088
 8000a34:	080127c0 	.word	0x080127c0
 8000a38:	080127dc 	.word	0x080127dc
 8000a3c:	24000000 	.word	0x24000000
 8000a40:	24000568 	.word	0x24000568
 8000a44:	24000600 	.word	0x24000600
 8000a48:	080127f0 	.word	0x080127f0
 8000a4c:	58021800 	.word	0x58021800
 8000a50:	24001658 	.word	0x24001658
 8000a54:	2400165c 	.word	0x2400165c
 8000a58:	08012800 	.word	0x08012800
 8000a5c:	24001694 	.word	0x24001694
 8000a60:	24000090 	.word	0x24000090
 8000a64:	08012818 	.word	0x08012818
 8000a68:	08012838 	.word	0x08012838
 8000a6c:	08012854 	.word	0x08012854
 8000a70:	58020800 	.word	0x58020800
 8000a74:	08012864 	.word	0x08012864
 8000a78:	240003f4 	.word	0x240003f4

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09c      	sub	sp, #112	@ 0x70
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	224c      	movs	r2, #76	@ 0x4c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f011 f966 	bl	8011d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2220      	movs	r2, #32
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f011 f960 	bl	8011d5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f007 fe17 	bl	80086d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000aac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b28      	ldr	r3, [pc, #160]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000abe:	bf00      	nop
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000acc:	d1f8      	bne.n	8000ac0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000adc:	2302      	movs	r3, #2
 8000ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000ae4:	232c      	movs	r3, #44	@ 0x2c
 8000ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000af4:	230c      	movs	r3, #12
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fe1d 	bl	8008744 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b10:	f001 f96d 	bl	8001dee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	233f      	movs	r3, #63	@ 0x3f
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b20:	2308      	movs	r3, #8
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b24:	2340      	movs	r3, #64	@ 0x40
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b28:	2340      	movs	r3, #64	@ 0x40
 8000b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b32:	2340      	movs	r3, #64	@ 0x40
 8000b34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2103      	movs	r1, #3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f008 f9dc 	bl	8008ef8 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b46:	f001 f952 	bl	8001dee <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3770      	adds	r7, #112	@ 0x70
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	58024800 	.word	0x58024800

08000b58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	22b8      	movs	r2, #184	@ 0xb8
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f011 f8f9 	bl	8011d5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000b6a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b6e:	f04f 0300 	mov.w	r3, #0
 8000b72:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b8a:	23c0      	movs	r3, #192	@ 0xc0
 8000b8c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 fd33 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000bb0:	f001 f91d 	bl	8001dee <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	37b8      	adds	r7, #184	@ 0xb8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2224      	movs	r2, #36	@ 0x24
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f011 f8c1 	bl	8011d5c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bda:	4b41      	ldr	r3, [pc, #260]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bdc:	4a41      	ldr	r2, [pc, #260]	@ (8000ce4 <MX_ADC1_Init+0x128>)
 8000bde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000be0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000be2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bea:	2208      	movs	r2, #8
 8000bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c00:	4b37      	ldr	r3, [pc, #220]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c08:	2203      	movs	r2, #3
 8000c0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c14:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c40:	4827      	ldr	r0, [pc, #156]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c42:	f002 f9c9 	bl	8002fd8 <HAL_ADC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c4c:	f001 f8cf 	bl	8001dee <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4821      	ldr	r0, [pc, #132]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c5c:	f003 fe8c 	bl	8004978 <HAL_ADCEx_MultiModeConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c66:	f001 f8c2 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6e:	2306      	movs	r3, #6
 8000c70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c72:	2305      	movs	r3, #5
 8000c74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c76:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4814      	ldr	r0, [pc, #80]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c90:	f002 fede 	bl	8003a50 <HAL_ADC_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000c9a:	f001 f8a8 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_ADC1_Init+0x130>)
 8000ca0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000cac:	f002 fed0 	bl	8003a50 <HAL_ADC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000cb6:	f001 f89a 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <MX_ADC1_Init+0x134>)
 8000cbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cbe:	2312      	movs	r3, #18
 8000cc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000cc8:	f002 fec2 	bl	8003a50 <HAL_ADC_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000cd2:	f001 f88c 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	@ 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000094 	.word	0x24000094
 8000ce4:	40022000 	.word	0x40022000
 8000ce8:	10c00010 	.word	0x10c00010
 8000cec:	14f00020 	.word	0x14f00020
 8000cf0:	08600004 	.word	0x08600004

08000cf4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2224      	movs	r2, #36	@ 0x24
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f011 f82b 	bl	8011d5c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d08:	4a2c      	ldr	r2, [pc, #176]	@ (8000dbc <MX_ADC2_Init+0xc8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d0e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d20:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d22:	2204      	movs	r2, #4
 8000d24:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d52:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d6c:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d6e:	f002 f933 	bl	8002fd8 <HAL_ADC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000d78:	f001 f839 	bl	8001dee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_ADC2_Init+0xcc>)
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d80:	2306      	movs	r3, #6
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d88:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000da2:	f002 fe55 	bl	8003a50 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000dac:	f001 f81f 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	@ 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000104 	.word	0x24000104
 8000dbc:	40022100 	.word	0x40022100
 8000dc0:	25b00200 	.word	0x25b00200

08000dc4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8000ebc <MX_FDCAN1_Init+0xf8>)
 8000dce:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dd0:	4b39      	ldr	r3, [pc, #228]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dd6:	4b38      	ldr	r3, [pc, #224]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000ddc:	4b36      	ldr	r3, [pc, #216]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000de2:	4b35      	ldr	r3, [pc, #212]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000de8:	4b33      	ldr	r3, [pc, #204]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000dee:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000df0:	2206      	movs	r2, #6
 8000df2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000df4:	4b30      	ldr	r3, [pc, #192]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e00:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e02:	2205      	movs	r2, #5
 8000e04:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e06:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e12:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e32:	2220      	movs	r2, #32
 8000e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e62:	2220      	movs	r2, #32
 8000e64:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e6e:	2204      	movs	r2, #4
 8000e70:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e72:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e74:	f006 f846 	bl	8006f04 <HAL_FDCAN_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000e7e:	f000 ffb6 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000ea0:	f006 fa0e 	bl	80072c0 <HAL_FDCAN_ConfigFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_FDCAN1_Init+0xea>
		Error_Handler();
 8000eaa:	f000 ffa0 	bl	8001dee <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240001ec 	.word	0x240001ec
 8000ebc:	4000a000 	.word	0x4000a000

08000ec0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb8 <MX_FDCAN2_Init+0xf8>)
 8000eca:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ecc:	4b39      	ldr	r3, [pc, #228]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ed2:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ede:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000eea:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000eec:	2206      	movs	r2, #6
 8000eee:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ef8:	220a      	movs	r2, #10
 8000efa:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000efe:	2205      	movs	r2, #5
 8000f00:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f02:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f2e:	2210      	movs	r2, #16
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f34:	2204      	movs	r2, #4
 8000f36:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f6e:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f70:	f005 ffc8 	bl	8006f04 <HAL_FDCAN_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000f7a:	f000 ff38 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f82:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f9e:	f006 f98f 	bl	80072c0 <HAL_FDCAN_ConfigFilter>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_FDCAN2_Init+0xec>
		Error_Handler();
 8000fa8:	f000 ff21 	bl	8001dee <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2400028c 	.word	0x2400028c
 8000fb8:	4000a400 	.word	0x4000a400

08000fbc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <MX_SDMMC1_SD_Init+0x38>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fd4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	2400032c 	.word	0x2400032c
 8000ff4:	52007000 	.word	0x52007000

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09c      	sub	sp, #112	@ 0x70
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2234      	movs	r2, #52	@ 0x34
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f010 fe92 	bl	8011d5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <MX_TIM1_Init+0x168>)
 800103a:	4a4a      	ldr	r2, [pc, #296]	@ (8001164 <MX_TIM1_Init+0x16c>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800103e:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800104a:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <MX_TIM1_Init+0x168>)
 800104c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b43      	ldr	r3, [pc, #268]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001058:	4b41      	ldr	r3, [pc, #260]	@ (8001160 <MX_TIM1_Init+0x168>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800105e:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001064:	483e      	ldr	r0, [pc, #248]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001066:	f00c fb1d 	bl	800d6a4 <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001070:	f000 febd 	bl	8001dee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800107e:	4619      	mov	r1, r3
 8001080:	4837      	ldr	r0, [pc, #220]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001082:	f00c fe69 	bl	800dd58 <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800108c:	f000 feaf 	bl	8001dee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001090:	4833      	ldr	r0, [pc, #204]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001092:	f00c fbe5 	bl	800d860 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800109c:	f000 fea7 	bl	8001dee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b0:	4619      	mov	r1, r3
 80010b2:	482b      	ldr	r0, [pc, #172]	@ (8001160 <MX_TIM1_Init+0x168>)
 80010b4:	f00d fb96 	bl	800e7e4 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010be:	f000 fe96 	bl	8001dee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
 80010c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	481e      	ldr	r0, [pc, #120]	@ (8001160 <MX_TIM1_Init+0x168>)
 80010e8:	f00c fd22 	bl	800db30 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010f2:	f000 fe7c 	bl	8001dee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4818      	ldr	r0, [pc, #96]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001100:	f00c fd16 	bl	800db30 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800110a:	f000 fe70 	bl	8001dee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001122:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001126:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001144:	f00d fbea 	bl	800e91c <HAL_TIMEx_ConfigBreakDeadTime>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800114e:	f000 fe4e 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001154:	f001 f962 	bl	800241c <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3770      	adds	r7, #112	@ 0x70
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	240003a8 	.word	0x240003a8
 8001164:	40010000 	.word	0x40010000

08001168 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800116e:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <MX_TIM16_Init+0x4c>)
 8001170:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001174:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001178:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001182:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001186:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800119c:	f00c fa82 	bl	800d6a4 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80011a6:	f000 fe22 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240003f4 	.word	0x240003f4
 80011b4:	40014400 	.word	0x40014400

080011b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <MX_USART1_UART_Init+0x94>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001202:	f00d fc35 	bl	800ea70 <HAL_UART_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800120c:	f000 fdef 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001214:	f00e fdcf 	bl	800fdb6 <HAL_UARTEx_SetTxFifoThreshold>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800121e:	f000 fde6 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001226:	f00e fe04 	bl	800fe32 <HAL_UARTEx_SetRxFifoThreshold>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001230:	f000 fddd 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001236:	f00e fd85 	bl	800fd44 <HAL_UARTEx_DisableFifoMode>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 fdd5 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	24000440 	.word	0x24000440
 800124c:	40011000 	.word	0x40011000

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001256:	4a23      	ldr	r2, [pc, #140]	@ (80012e4 <MX_USART2_UART_Init+0x94>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800128c:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001292:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001298:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800129a:	f00d fbe9 	bl	800ea70 <HAL_UART_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012a4:	f000 fda3 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ac:	f00e fd83 	bl	800fdb6 <HAL_UARTEx_SetTxFifoThreshold>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012b6:	f000 fd9a 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012be:	f00e fdb8 	bl	800fe32 <HAL_UARTEx_SetRxFifoThreshold>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012c8:	f000 fd91 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ce:	f00e fd39 	bl	800fd44 <HAL_UARTEx_DisableFifoMode>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012d8:	f000 fd89 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	240004d4 	.word	0x240004d4
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <MX_DMA_Init+0x3c>)
 80012f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <MX_DMA_Init+0x3c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_DMA_Init+0x3c>)
 8001300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	200b      	movs	r0, #11
 8001312:	f003 fcee 	bl	8004cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001316:	200b      	movs	r0, #11
 8001318:	f003 fd05 	bl	8004d26 <HAL_NVIC_EnableIRQ>

}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58024400 	.word	0x58024400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	@ 0x38
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	4a65      	ldr	r2, [pc, #404]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134e:	4b63      	ldr	r3, [pc, #396]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001362:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136c:	4b5b      	ldr	r3, [pc, #364]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	4a56      	ldr	r2, [pc, #344]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138a:	4b54      	ldr	r3, [pc, #336]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b50      	ldr	r3, [pc, #320]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	4a4f      	ldr	r2, [pc, #316]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a8:	4b4c      	ldr	r3, [pc, #304]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013bc:	4a47      	ldr	r2, [pc, #284]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c6:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d4:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013da:	4a40      	ldr	r2, [pc, #256]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e4:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f2:	4b3a      	ldr	r3, [pc, #232]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f8:	4a38      	ldr	r2, [pc, #224]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001402:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001410:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001416:	4a31      	ldr	r2, [pc, #196]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2103      	movs	r1, #3
 8001432:	482b      	ldr	r0, [pc, #172]	@ (80014e0 <MX_GPIO_Init+0x1b8>)
 8001434:	f007 f932 	bl	800869c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143e:	4829      	ldr	r0, [pc, #164]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001440:	f007 f92c 	bl	800869c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001444:	2303      	movs	r3, #3
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	4821      	ldr	r0, [pc, #132]	@ (80014e0 <MX_GPIO_Init+0x1b8>)
 800145c:	f006 ff5e 	bl	800831c <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	@ (80014e8 <MX_GPIO_Init+0x1c0>)
 8001476:	f006 ff51 	bl	800831c <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 800147a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001494:	f006 ff42 	bl	800831c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4810      	ldr	r0, [pc, #64]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80014ac:	f006 ff36 	bl	800831c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80014c2:	2302      	movs	r3, #2
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80014ce:	f006 ff25 	bl	800831c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	@ 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020800 	.word	0x58020800
 80014e4:	58021000 	.word	0x58021000
 80014e8:	58021400 	.word	0x58021400
 80014ec:	58021800 	.word	0x58021800

080014f0 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4909      	ldr	r1, [pc, #36]	@ (8001520 <print+0x30>)
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <print+0x34>)
 80014fe:	f010 fc0d 	bl	8011d1c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 8001502:	4808      	ldr	r0, [pc, #32]	@ (8001524 <print+0x34>)
 8001504:	f7fe ff04 	bl	8000310 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	4904      	ldr	r1, [pc, #16]	@ (8001524 <print+0x34>)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <print+0x38>)
 8001514:	f00d fafc 	bl	800eb10 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08012874 	.word	0x08012874
 8001524:	240016b0 	.word	0x240016b0
 8001528:	240004d4 	.word	0x240004d4

0800152c <printValue>:

void printValue(int value) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4909      	ldr	r1, [pc, #36]	@ (800155c <printValue+0x30>)
 8001538:	4809      	ldr	r0, [pc, #36]	@ (8001560 <printValue+0x34>)
 800153a:	f010 fbef 	bl	8011d1c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 800153e:	4808      	ldr	r0, [pc, #32]	@ (8001560 <printValue+0x34>)
 8001540:	f7fe fee6 	bl	8000310 <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	4904      	ldr	r1, [pc, #16]	@ (8001560 <printValue+0x34>)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <printValue+0x38>)
 8001550:	f00d fade 	bl	800eb10 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0801287c 	.word	0x0801287c
 8001560:	240016b0 	.word	0x240016b0
 8001564:	240004d4 	.word	0x240004d4

08001568 <HAL_ADC_ConvCpltCallback>:
	sprintf(uart_msg, "0x%02X \n\r", value);
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
	HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	s1_aceleracion = buffer_adc[0];
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001578:	601a      	str	r2, [r3, #0]
	s2_aceleracion = buffer_adc[1];
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	461a      	mov	r2, r3
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001582:	601a      	str	r2, [r3, #0]
	s_freno = buffer_adc[2];
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	461a      	mov	r2, r3
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <HAL_ADC_ConvCpltCallback+0x40>)
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2400166c 	.word	0x2400166c
 80015a0:	24001674 	.word	0x24001674
 80015a4:	24001678 	.word	0x24001678
 80015a8:	24001694 	.word	0x24001694

080015ac <HAL_FDCAN_RxFifo0Callback>:
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80bf 	beq.w	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1) {
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a60      	ldr	r2, [pc, #384]	@ (8001748 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	f040 8086 	bne.w	80016da <HAL_FDCAN_RxFifo0Callback+0x12e>
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80015ce:	4b5f      	ldr	r3, [pc, #380]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 80015d0:	4a5f      	ldr	r2, [pc, #380]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 80015d2:	2140      	movs	r1, #64	@ 0x40
 80015d4:	485f      	ldr	r0, [pc, #380]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80015d6:	f005 ff6f 	bl	80074b8 <HAL_FDCAN_GetRxMessage>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 80af 	bne.w	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					RxData_Inv) == HAL_OK) {
				switch (RxHeader_Inv.Identifier) {
 80015e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f240 4266 	movw	r2, #1126	@ 0x466
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d03c      	beq.n	8001668 <HAL_FDCAN_RxFifo0Callback+0xbc>
 80015ee:	f240 4266 	movw	r2, #1126	@ 0x466
 80015f2:	4293      	cmp	r3, r2
 80015f4:	f200 80a4 	bhi.w	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
 80015f8:	f240 4262 	movw	r2, #1122	@ 0x462
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_FDCAN_RxFifo0Callback+0x5e>
 8001600:	f240 4263 	movw	r2, #1123	@ 0x463
 8001604:	4293      	cmp	r3, r2
 8001606:	d015      	beq.n	8001634 <HAL_FDCAN_RxFifo0Callback+0x88>
			}

		}

	}
}
 8001608:	e09a      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					state = RxData_Inv[2] >> 0x1;
 800160a:	4b50      	ldr	r3, [pc, #320]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001614:	701a      	strb	r2, [r3, #0]
					printValue(state);
 8001616:	4b50      	ldr	r3, [pc, #320]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff86 	bl	800152c <printValue>
					if (state == 10) {
 8001620:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b0a      	cmp	r3, #10
 8001626:	f040 8084 	bne.w	8001732 <HAL_FDCAN_RxFifo0Callback+0x186>
						error = RxData_Inv[0];
 800162a:	4b48      	ldr	r3, [pc, #288]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001630:	701a      	strb	r2, [r3, #0]
					break;
 8001632:	e07e      	b.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x186>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 8001634:	4b45      	ldr	r3, [pc, #276]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8001636:	79db      	ldrb	r3, [r3, #7]
 8001638:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
							| RxData_Inv[8] << 8 | RxData_Inv[5];
 800163c:	4b43      	ldr	r3, [pc, #268]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800163e:	7a1b      	ldrb	r3, [r3, #8]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	4313      	orrs	r3, r2
 8001644:	4a41      	ldr	r2, [pc, #260]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8001646:	7952      	ldrb	r2, [r2, #5]
 8001648:	4313      	orrs	r3, r2
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 800164a:	4a45      	ldr	r2, [pc, #276]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 800164c:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000) {
 800164e:	4b44      	ldr	r3, [pc, #272]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d06d      	beq.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
						e_machine_rpm |= 0xFFF0000;
 800165a:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b41      	ldr	r3, [pc, #260]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001660:	4313      	orrs	r3, r2
 8001662:	4a3f      	ldr	r2, [pc, #252]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001664:	6013      	str	r3, [r2, #0]
					break;
 8001666:	e066      	b.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					if (RxHeader_Inv.DataLength == 6) {
 8001668:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b06      	cmp	r3, #6
 800166e:	d164      	bne.n	800173a <HAL_FDCAN_RxFifo0Callback+0x18e>
						if (config_inv_lectura_v == 0) {
 8001670:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <HAL_FDCAN_RxFifo0Callback+0xd4>
							config_inv_lectura_v = 1;
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]
					break;
 800167e:	e05c      	b.n	800173a <HAL_FDCAN_RxFifo0Callback+0x18e>
						} else if (config_inv_lectura_v == 1) {
 8001680:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d158      	bne.n	800173a <HAL_FDCAN_RxFifo0Callback+0x18e>
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 8001688:	4b30      	ldr	r3, [pc, #192]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800168a:	785b      	ldrb	r3, [r3, #1]
 800168c:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[0];
 800168e:	4a2f      	ldr	r2, [pc, #188]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	4313      	orrs	r3, r2
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 8001694:	4a35      	ldr	r2, [pc, #212]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001696:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 8001698:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800169a:	789b      	ldrb	r3, [r3, #2]
 800169c:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[1];
 800169e:	4a2b      	ldr	r2, [pc, #172]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 80016a0:	7852      	ldrb	r2, [r2, #1]
 80016a2:	4313      	orrs	r3, r2
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 80016a4:	4a32      	ldr	r2, [pc, #200]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016a6:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power >> 2;//Bits 10 to 16
 80016a8:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	109b      	asrs	r3, r3, #2
 80016ae:	4a30      	ldr	r2, [pc, #192]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016b0:	6013      	str	r3, [r2, #0]
							if (inv_dc_bus_power & 0x2000) {//Check for bit signing
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_FDCAN_RxFifo0Callback+0x11e>
								inv_dc_bus_power |= 0xC000;
 80016be:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016c8:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power * 32767; //Scale factor
 80016ca:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4613      	mov	r3, r2
 80016d0:	03db      	lsls	r3, r3, #15
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016d6:	6013      	str	r3, [r2, #0]
					break;
 80016d8:	e02f      	b.n	800173a <HAL_FDCAN_RxFifo0Callback+0x18e>
		} else if (hfdcan->Instance == FDCAN2) {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a25      	ldr	r2, [pc, #148]	@ (8001774 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d12d      	bne.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80016e6:	4a25      	ldr	r2, [pc, #148]	@ (800177c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80016e8:	2140      	movs	r1, #64	@ 0x40
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f005 fee4 	bl	80074b8 <HAL_FDCAN_GetRxMessage>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d124      	bne.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
				switch (RxHeader_Acu.Identifier) {
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d003      	beq.n	8001706 <HAL_FDCAN_RxFifo0Callback+0x15a>
 80016fe:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001702:	d008      	beq.n	8001716 <HAL_FDCAN_RxFifo0Callback+0x16a>
}
 8001704:	e01c      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					if (RxData_Acu[0] == 0) {
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d117      	bne.n	800173e <HAL_FDCAN_RxFifo0Callback+0x192>
						precarga_inv = 1;
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
					break;
 8001714:	e013      	b.n	800173e <HAL_FDCAN_RxFifo0Callback+0x192>
					v_celda_min = (int) (RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800171e:	7852      	ldrb	r2, [r2, #1]
 8001720:	4313      	orrs	r3, r2
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800172c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001730:	e006      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					break;
 8001732:	bf00      	nop
 8001734:	e004      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					break;
 8001736:	bf00      	nop
 8001738:	e002      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					break;
 800173a:	bf00      	nop
 800173c:	e000      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					break;
 800173e:	bf00      	nop
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	4000a000 	.word	0x4000a000
 800174c:	24000608 	.word	0x24000608
 8001750:	2400058c 	.word	0x2400058c
 8001754:	240001ec 	.word	0x240001ec
 8001758:	240016a2 	.word	0x240016a2
 800175c:	2400180e 	.word	0x2400180e
 8001760:	24001668 	.word	0x24001668
 8001764:	0fff0000 	.word	0x0fff0000
 8001768:	2400008c 	.word	0x2400008c
 800176c:	24001660 	.word	0x24001660
 8001770:	24001664 	.word	0x24001664
 8001774:	4000a400 	.word	0x4000a400
 8001778:	24000618 	.word	0x24000618
 800177c:	240005d8 	.word	0x240005d8
 8001780:	24000088 	.word	0x24000088
 8001784:	24000008 	.word	0x24000008

08001788 <setTorque>:
		sum += lecturas[i];
	}
	return sum / N_LECTURAS;
}

uint16_t setTorque() {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
	// Leemos sensores de posición del pedal de acelaración

	int s1_aceleracion_filtr = LPF_EMA_Update(&s1_filt, s1_aceleracion);
 800178e:	4ba8      	ldr	r3, [pc, #672]	@ (8001a30 <setTorque+0x2a8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	48a5      	ldr	r0, [pc, #660]	@ (8001a34 <setTorque+0x2ac>)
 80017a0:	f7fe ffbf 	bl	8000722 <LPF_EMA_Update>
 80017a4:	eef0 7a40 	vmov.f32	s15, s0
 80017a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ac:	ee17 3a90 	vmov	r3, s15
 80017b0:	60fb      	str	r3, [r7, #12]
	int s2_aceleracion_filtr = LPF_EMA_Update(&s2_filt, s2_aceleracion);
 80017b2:	4ba1      	ldr	r3, [pc, #644]	@ (8001a38 <setTorque+0x2b0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	489e      	ldr	r0, [pc, #632]	@ (8001a3c <setTorque+0x2b4>)
 80017c4:	f7fe ffad 	bl	8000722 <LPF_EMA_Update>
 80017c8:	eef0 7a40 	vmov.f32	s15, s0
 80017cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d0:	ee17 3a90 	vmov	r3, s15
 80017d4:	60bb      	str	r3, [r7, #8]

#if 1
	print("Sensor 1: ");
 80017d6:	489a      	ldr	r0, [pc, #616]	@ (8001a40 <setTorque+0x2b8>)
 80017d8:	f7ff fe8a 	bl	80014f0 <print>
	printValue(s1_aceleracion_filtr);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fea5 	bl	800152c <printValue>
	print("");
 80017e2:	4898      	ldr	r0, [pc, #608]	@ (8001a44 <setTorque+0x2bc>)
 80017e4:	f7ff fe84 	bl	80014f0 <print>
	print("Sensor 2: ");
 80017e8:	4897      	ldr	r0, [pc, #604]	@ (8001a48 <setTorque+0x2c0>)
 80017ea:	f7ff fe81 	bl	80014f0 <print>
	printValue(s2_aceleracion_filtr);
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f7ff fe9c 	bl	800152c <printValue>
	print("");
 80017f4:	4893      	ldr	r0, [pc, #588]	@ (8001a44 <setTorque+0x2bc>)
 80017f6:	f7ff fe7b 	bl	80014f0 <print>
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion_filtr - 1886) / (29.4 - 18.86);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f2a3 735e 	subw	r3, r3, #1886	@ 0x75e
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001808:	ed9f 5b7d 	vldr	d5, [pc, #500]	@ 8001a00 <setTorque+0x278>
 800180c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001810:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001814:	ee17 2a90 	vmov	r2, s15
 8001818:	4b8c      	ldr	r3, [pc, #560]	@ (8001a4c <setTorque+0x2c4>)
 800181a:	601a      	str	r2, [r3, #0]
	if (s1_aceleracion_aux < 0) {
 800181c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a4c <setTorque+0x2c4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	da03      	bge.n	800182c <setTorque+0xa4>
		s1_aceleracion_aux = 0;
 8001824:	4b89      	ldr	r3, [pc, #548]	@ (8001a4c <setTorque+0x2c4>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e006      	b.n	800183a <setTorque+0xb2>
	} else if (s1_aceleracion_aux > 100) {
 800182c:	4b87      	ldr	r3, [pc, #540]	@ (8001a4c <setTorque+0x2c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b64      	cmp	r3, #100	@ 0x64
 8001832:	dd02      	ble.n	800183a <setTorque+0xb2>
		s1_aceleracion_aux = 100;
 8001834:	4b85      	ldr	r3, [pc, #532]	@ (8001a4c <setTorque+0x2c4>)
 8001836:	2264      	movs	r2, #100	@ 0x64
 8001838:	601a      	str	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion_filtr - 1780) / (25.27 - 17.8);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001848:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8001a08 <setTorque+0x280>
 800184c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001850:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001854:	ee17 2a90 	vmov	r2, s15
 8001858:	4b7d      	ldr	r3, [pc, #500]	@ (8001a50 <setTorque+0x2c8>)
 800185a:	601a      	str	r2, [r3, #0]
	if (s2_aceleracion_aux < 0) {
 800185c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a50 <setTorque+0x2c8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	da03      	bge.n	800186c <setTorque+0xe4>
		s2_aceleracion_aux = 0;
 8001864:	4b7a      	ldr	r3, [pc, #488]	@ (8001a50 <setTorque+0x2c8>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e006      	b.n	800187a <setTorque+0xf2>
	} else if (s2_aceleracion_aux > 100) {
 800186c:	4b78      	ldr	r3, [pc, #480]	@ (8001a50 <setTorque+0x2c8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b64      	cmp	r3, #100	@ 0x64
 8001872:	dd02      	ble.n	800187a <setTorque+0xf2>
		s2_aceleracion_aux = 100;
 8001874:	4b76      	ldr	r3, [pc, #472]	@ (8001a50 <setTorque+0x2c8>)
 8001876:	2264      	movs	r2, #100	@ 0x64
 8001878:	601a      	str	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 800187a:	4876      	ldr	r0, [pc, #472]	@ (8001a54 <setTorque+0x2cc>)
 800187c:	f7ff fe38 	bl	80014f0 <print>
	printValue(s1_aceleracion_aux);
 8001880:	4b72      	ldr	r3, [pc, #456]	@ (8001a4c <setTorque+0x2c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe51 	bl	800152c <printValue>
	print("");
 800188a:	486e      	ldr	r0, [pc, #440]	@ (8001a44 <setTorque+0x2bc>)
 800188c:	f7ff fe30 	bl	80014f0 <print>
	print("Sensor % 2: ");
 8001890:	4871      	ldr	r0, [pc, #452]	@ (8001a58 <setTorque+0x2d0>)
 8001892:	f7ff fe2d 	bl	80014f0 <print>
	printValue(s2_aceleracion_aux);
 8001896:	4b6e      	ldr	r3, [pc, #440]	@ (8001a50 <setTorque+0x2c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fe46 	bl	800152c <printValue>
	print("");
 80018a0:	4868      	ldr	r0, [pc, #416]	@ (8001a44 <setTorque+0x2bc>)
 80018a2:	f7ff fe25 	bl	80014f0 <print>
#endif

	// Torque enviado es la media de los dos sensores
	torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 80018a6:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <setTorque+0x2c4>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b69      	ldr	r3, [pc, #420]	@ (8001a50 <setTorque+0x2c8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da00      	bge.n	80018b6 <setTorque+0x12e>
 80018b4:	3301      	adds	r3, #1
 80018b6:	105b      	asrs	r3, r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b68      	ldr	r3, [pc, #416]	@ (8001a5c <setTorque+0x2d4>)
 80018bc:	801a      	strh	r2, [r3, #0]

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10) {
 80018be:	4b67      	ldr	r3, [pc, #412]	@ (8001a5c <setTorque+0x2d4>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d803      	bhi.n	80018ce <setTorque+0x146>
		torque_total = 0;
 80018c6:	4b65      	ldr	r3, [pc, #404]	@ (8001a5c <setTorque+0x2d4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	801a      	strh	r2, [r3, #0]
 80018cc:	e006      	b.n	80018dc <setTorque+0x154>
	} else if (torque_total > 100) {
 80018ce:	4b63      	ldr	r3, [pc, #396]	@ (8001a5c <setTorque+0x2d4>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d902      	bls.n	80018dc <setTorque+0x154>
		torque_total = 100;
 80018d6:	4b61      	ldr	r3, [pc, #388]	@ (8001a5c <setTorque+0x2d4>)
 80018d8:	2264      	movs	r2, #100	@ 0x64
 80018da:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25) {
 80018dc:	4b60      	ldr	r3, [pc, #384]	@ (8001a60 <setTorque+0x2d8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80018e4:	4293      	cmp	r3, r2
 80018e6:	dd0a      	ble.n	80018fe <setTorque+0x176>
 80018e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <setTorque+0x2d4>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b19      	cmp	r3, #25
 80018ee:	d906      	bls.n	80018fe <setTorque+0x176>
		print("EV_2_3");
 80018f0:	485c      	ldr	r0, [pc, #368]	@ (8001a64 <setTorque+0x2dc>)
 80018f2:	f7ff fdfd 	bl	80014f0 <print>
		flag_EV_2_3 = 1;
 80018f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a68 <setTorque+0x2e0>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e00c      	b.n	8001918 <setTorque+0x190>
	} else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5) {
 80018fe:	4b58      	ldr	r3, [pc, #352]	@ (8001a60 <setTorque+0x2d8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001906:	4293      	cmp	r3, r2
 8001908:	dc06      	bgt.n	8001918 <setTorque+0x190>
 800190a:	4b54      	ldr	r3, [pc, #336]	@ (8001a5c <setTorque+0x2d4>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b04      	cmp	r3, #4
 8001910:	d802      	bhi.n	8001918 <setTorque+0x190>
		flag_EV_2_3 = 0;
 8001912:	4b55      	ldr	r3, [pc, #340]	@ (8001a68 <setTorque+0x2e0>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10) {
 8001918:	4b4c      	ldr	r3, [pc, #304]	@ (8001a4c <setTorque+0x2c4>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a50 <setTorque+0x2c8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	bfb8      	it	lt
 8001926:	425b      	neglt	r3, r3
 8001928:	2b0a      	cmp	r3, #10
 800192a:	dd0e      	ble.n	800194a <setTorque+0x1c2>

		if (HAL_GetTick() - last_time_t_11_8 > 100) {
 800192c:	f001 f838 	bl	80029a0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	4b4e      	ldr	r3, [pc, #312]	@ (8001a6c <setTorque+0x2e4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b64      	cmp	r3, #100	@ 0x64
 800193a:	d90e      	bls.n	800195a <setTorque+0x1d2>
			print("T11.8.9");
 800193c:	484c      	ldr	r0, [pc, #304]	@ (8001a70 <setTorque+0x2e8>)
 800193e:	f7ff fdd7 	bl	80014f0 <print>
			flag_T11_8_9 = 1;
 8001942:	4b4c      	ldr	r3, [pc, #304]	@ (8001a74 <setTorque+0x2ec>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e007      	b.n	800195a <setTorque+0x1d2>
		}

	} else {
		last_time_t_11_8 = HAL_GetTick();
 800194a:	f001 f829 	bl	80029a0 <HAL_GetTick>
 800194e:	4603      	mov	r3, r0
 8001950:	4a46      	ldr	r2, [pc, #280]	@ (8001a6c <setTorque+0x2e4>)
 8001952:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001954:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <setTorque+0x2ec>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9) {
 800195a:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <setTorque+0x2e0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d103      	bne.n	800196a <setTorque+0x1e2>
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <setTorque+0x2ec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <setTorque+0x1e8>
		torque_total = 0;
 800196a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a5c <setTorque+0x2d4>)
 800196c:	2200      	movs	r2, #0
 800196e:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500) {
 8001970:	4b41      	ldr	r3, [pc, #260]	@ (8001a78 <setTorque+0x2f0>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001a7c <setTorque+0x2f4>
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	f140 8081 	bpl.w	8001a88 <setTorque+0x300>
		if (v_celda_min > 2800) {
 8001986:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <setTorque+0x2f0>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001a80 <setTorque+0x2f8>
 8001990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	dd1f      	ble.n	80019da <setTorque+0x252>
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 800199a:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <setTorque+0x2d4>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019a6:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <setTorque+0x2f0>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019b0:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8001a10 <setTorque+0x288>
 80019b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019b8:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8001a18 <setTorque+0x290>
 80019bc:	ee37 7b45 	vsub.f64	d7, d7, d5
 80019c0:	ee26 6b07 	vmul.f64	d6, d6, d7
					/ 1000;
 80019c4:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8001a20 <setTorque+0x298>
 80019c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 80019cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019d0:	ee17 2a90 	vmov	r2, s15
 80019d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a84 <setTorque+0x2fc>)
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e05b      	b.n	8001a92 <setTorque+0x30a>
		} else {
			torque_limitado = torque_total * 0.05;
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <setTorque+0x2d4>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019e6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8001a28 <setTorque+0x2a0>
 80019ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019f2:	ee17 2a90 	vmov	r2, s15
 80019f6:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <setTorque+0x2fc>)
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e04a      	b.n	8001a92 <setTorque+0x30a>
 80019fc:	f3af 8000 	nop.w
 8001a00:	e147ae14 	.word	0xe147ae14
 8001a04:	4025147a 	.word	0x4025147a
 8001a08:	ae147ae0 	.word	0xae147ae0
 8001a0c:	401de147 	.word	0x401de147
 8001a10:	a1cac083 	.word	0xa1cac083
 8001a14:	3ff5b645 	.word	0x3ff5b645
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40ad4c00 	.word	0x40ad4c00
 8001a20:	00000000 	.word	0x00000000
 8001a24:	408f4000 	.word	0x408f4000
 8001a28:	9999999a 	.word	0x9999999a
 8001a2c:	3fa99999 	.word	0x3fa99999
 8001a30:	24001674 	.word	0x24001674
 8001a34:	24001684 	.word	0x24001684
 8001a38:	24001678 	.word	0x24001678
 8001a3c:	2400168c 	.word	0x2400168c
 8001a40:	08012890 	.word	0x08012890
 8001a44:	0801289c 	.word	0x0801289c
 8001a48:	080128a0 	.word	0x080128a0
 8001a4c:	2400167c 	.word	0x2400167c
 8001a50:	24001680 	.word	0x24001680
 8001a54:	080128ac 	.word	0x080128ac
 8001a58:	080128bc 	.word	0x080128bc
 8001a5c:	24001698 	.word	0x24001698
 8001a60:	24001694 	.word	0x24001694
 8001a64:	080128cc 	.word	0x080128cc
 8001a68:	240016a8 	.word	0x240016a8
 8001a6c:	240016a4 	.word	0x240016a4
 8001a70:	080128d4 	.word	0x080128d4
 8001a74:	240016ac 	.word	0x240016ac
 8001a78:	24000008 	.word	0x24000008
 8001a7c:	455ac000 	.word	0x455ac000
 8001a80:	452f0000 	.word	0x452f0000
 8001a84:	2400169c 	.word	0x2400169c
		}
	} else {
		torque_limitado = torque_total;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <setTorque+0x340>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <setTorque+0x344>)
 8001a90:	601a      	str	r2, [r3, #0]
#if 0
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	torque_total = torque_total * 168 / 100;
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <setTorque+0x340>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	23a8      	movs	r3, #168	@ 0xa8
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <setTorque+0x348>)
 8001aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa4:	1152      	asrs	r2, r2, #5
 8001aa6:	17db      	asrs	r3, r3, #31
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <setTorque+0x340>)
 8001aae:	801a      	strh	r2, [r3, #0]
	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <setTorque+0x340>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	3301      	adds	r3, #1
 8001abc:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001abe:	88bb      	ldrh	r3, [r7, #4]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	24001698 	.word	0x24001698
 8001acc:	2400169c 	.word	0x2400169c
 8001ad0:	51eb851f 	.word	0x51eb851f

08001ad4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a6f      	ldr	r2, [pc, #444]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	f040 80d6 	bne.w	8001c92 <HAL_TIM_PeriodElapsedCallback+0x1be>
#if !CALIBRATION

		// ---------- CONTROL DEL INVERSOR ----------

		//Estado TORQUE
if(flag_react == 0){//Si no hay que reactivar el coche manda siempre torque
 8001ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d117      	bne.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x4a>

		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001aee:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6d      	ldr	r2, [pc, #436]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001af4:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8001af6:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001af8:	2203      	movs	r2, #3
 8001afa:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001afc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8001b02:	4b6a      	ldr	r3, [pc, #424]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8001b08:	4b68      	ldr	r3, [pc, #416]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x6;
 8001b0e:	4b67      	ldr	r3, [pc, #412]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b10:	2206      	movs	r2, #6
 8001b12:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b14:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b16:	4964      	ldr	r1, [pc, #400]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b18:	4865      	ldr	r0, [pc, #404]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001b1a:	f005 fc72 	bl	8007402 <HAL_FDCAN_AddMessageToTxFifoQ>


}


		switch (state) {
 8001b1e:	4b65      	ldr	r3, [pc, #404]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	3b03      	subs	r3, #3
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	f200 80b4 	bhi.w	8001c92 <HAL_TIM_PeriodElapsedCallback+0x1be>
 8001b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001b51 	.word	0x08001b51
 8001b34:	08001b91 	.word	0x08001b91
 8001b38:	08001c93 	.word	0x08001c93
 8001b3c:	08001bd9 	.word	0x08001bd9
 8001b40:	08001c93 	.word	0x08001c93
 8001b44:	08001c93 	.word	0x08001c93
 8001b48:	08001c93 	.word	0x08001c93
 8001b4c:	08001c39 	.word	0x08001c39
		case 3:
#if DEBUG
			print("state: standby");
 8001b50:	4859      	ldr	r0, [pc, #356]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b52:	f7ff fccd 	bl	80014f0 <print>
#endif
			//Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b56:	4b53      	ldr	r3, [pc, #332]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a53      	ldr	r2, [pc, #332]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b5c:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001b5e:	4b52      	ldr	r3, [pc, #328]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b60:	2203      	movs	r2, #3
 8001b62:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001b64:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001b6a:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b70:	4b4e      	ldr	r3, [pc, #312]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001b76:	4b4d      	ldr	r3, [pc, #308]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b7e:	494a      	ldr	r1, [pc, #296]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b80:	484b      	ldr	r0, [pc, #300]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001b82:	f005 fc3e 	bl	8007402 <HAL_FDCAN_AddMessageToTxFifoQ>

			while (state != 4) {
 8001b86:	bf00      	nop
 8001b88:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d1fb      	bne.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0xb4>


		case 4:

#if DEBUG
	print("state: ready");
 8001b90:	484a      	ldr	r0, [pc, #296]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001b92:	f7ff fcad 	bl	80014f0 <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001b96:	4b44      	ldr	r3, [pc, #272]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b98:	f240 3262 	movw	r2, #866	@ 0x362
 8001b9c:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b9e:	4b42      	ldr	r3, [pc, #264]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001ba4:	4b46      	ldr	r3, [pc, #280]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001bb6:	4b42      	ldr	r3, [pc, #264]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001bbe:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bc6:	4a39      	ldr	r2, [pc, #228]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001bc8:	4937      	ldr	r1, [pc, #220]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001bca:	4839      	ldr	r0, [pc, #228]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001bcc:	f005 fc19 	bl	8007402 <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; //Reactivado
 8001bd0:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]


			break;
 8001bd6:	e05c      	b.n	8001c92 <HAL_TIM_PeriodElapsedCallback+0x1be>

			//Request TORQUE inversor

			//flag_react = 1;

			real_torque = setTorque();
 8001bd8:	f7ff fdd6 	bl	8001788 <setTorque>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001be2:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001be4:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001be6:	f240 3262 	movw	r2, #866	@ 0x362
 8001bea:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001bec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	60da      	str	r2, [r3, #12]

			//real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001bf2:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b32      	ldr	r3, [pc, #200]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001bfa:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001bfc:	4b30      	ldr	r3, [pc, #192]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b30      	ldr	r3, [pc, #192]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c08:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001c10:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c1c:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c24:	70da      	strb	r2, [r3, #3]
			//TxData_Inv[2] = 0xFE;
			//TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv) ;
 8001c26:	4a21      	ldr	r2, [pc, #132]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c28:	491f      	ldr	r1, [pc, #124]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c2a:	4821      	ldr	r0, [pc, #132]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001c2c:	f005 fbe9 	bl	8007402 <HAL_FDCAN_AddMessageToTxFifoQ>
 			CAN_bus_off_check_reset(&hfdcan1);
 8001c30:	481f      	ldr	r0, [pc, #124]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001c32:	f000 f8c3 	bl	8001dbc <CAN_bus_off_check_reset>

			break;
 8001c36:	e02c      	b.n	8001c92 <HAL_TIM_PeriodElapsedCallback+0x1be>

		case 10:
			print("state: soft fault");
 8001c38:	4824      	ldr	r0, [pc, #144]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c3a:	f7ff fc59 	bl	80014f0 <print>
			printValue(error);
 8001c3e:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fc72 	bl	800152c <printValue>
			case 3:
				print("Error: Overtemperature");
				break;
			}*/

			if (inv_dc_bus_voltage < 60) {
 8001c48:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c4e:	dc1f      	bgt.n	8001c90 <HAL_TIM_PeriodElapsedCallback+0x1bc>

				//Estado STAND BY inversor
				while (state != 3) {
 8001c50:	e01a      	b.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x1b4>

					flag_react = 1;
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]

					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c5e:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c62:	2203      	movs	r2, #3
 8001c64:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]

					TxData_Inv[0] = 0x0;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x3;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c80:	4909      	ldr	r1, [pc, #36]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c82:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001c84:	f005 fbbd 	bl	8007402 <HAL_FDCAN_AddMessageToTxFifoQ>
				while (state != 3) {
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d1e0      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x17e>
							TxData_Inv);
				}
			}

			break;
 8001c90:	bf00      	nop
		}
#endif
	}
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	240003f4 	.word	0x240003f4
 8001ca0:	2400180f 	.word	0x2400180f
 8001ca4:	24000000 	.word	0x24000000
 8001ca8:	24000568 	.word	0x24000568
 8001cac:	24000600 	.word	0x24000600
 8001cb0:	240001ec 	.word	0x240001ec
 8001cb4:	240016a2 	.word	0x240016a2
 8001cb8:	080128dc 	.word	0x080128dc
 8001cbc:	080127f0 	.word	0x080127f0
 8001cc0:	240016a0 	.word	0x240016a0
 8001cc4:	2400169a 	.word	0x2400169a
 8001cc8:	2400169b 	.word	0x2400169b
 8001ccc:	080128ec 	.word	0x080128ec
 8001cd0:	2400180e 	.word	0x2400180e
 8001cd4:	24001660 	.word	0x24001660

08001cd8 <SDCard_start>:

void SDCard_start(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
	FATFS *FS_Ptr;
	DWORD FreeClusters;
	uint32_t TotalSize, FreeSpace;
	do {
		//------------------[ Mount The SD Card ]--------------------
		FR_Status = f_mount(&FatFs, SDPath, 1);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	492e      	ldr	r1, [pc, #184]	@ (8001d9c <SDCard_start+0xc4>)
 8001ce2:	482f      	ldr	r0, [pc, #188]	@ (8001da0 <SDCard_start+0xc8>)
 8001ce4:	f00f fec2 	bl	8011a6c <f_mount>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	75fb      	strb	r3, [r7, #23]
		if (FR_Status != FR_OK) {
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <SDCard_start+0x2e>
			sprintf(TxBuffer, "Error! Error Code: (%i)\r\n", FR_Status);
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	492b      	ldr	r1, [pc, #172]	@ (8001da4 <SDCard_start+0xcc>)
 8001cf8:	482b      	ldr	r0, [pc, #172]	@ (8001da8 <SDCard_start+0xd0>)
 8001cfa:	f010 f80f 	bl	8011d1c <siprintf>
			print(TxBuffer);
 8001cfe:	482a      	ldr	r0, [pc, #168]	@ (8001da8 <SDCard_start+0xd0>)
 8001d00:	f7ff fbf6 	bl	80014f0 <print>
			break;
 8001d04:	e045      	b.n	8001d92 <SDCard_start+0xba>
		}
		sprintf(TxBuffer, "SD montada correctamente \r\n\n");
 8001d06:	4929      	ldr	r1, [pc, #164]	@ (8001dac <SDCard_start+0xd4>)
 8001d08:	4827      	ldr	r0, [pc, #156]	@ (8001da8 <SDCard_start+0xd0>)
 8001d0a:	f010 f807 	bl	8011d1c <siprintf>
		print(TxBuffer);
 8001d0e:	4826      	ldr	r0, [pc, #152]	@ (8001da8 <SDCard_start+0xd0>)
 8001d10:	f7ff fbee 	bl	80014f0 <print>
		//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8001d14:	f107 0208 	add.w	r2, r7, #8
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4824      	ldr	r0, [pc, #144]	@ (8001db0 <SDCard_start+0xd8>)
 8001d1e:	f00f feeb 	bl	8011af8 <f_getfree>
		TotalSize = (uint32_t) ((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	3b02      	subs	r3, #2
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	8952      	ldrh	r2, [r2, #10]
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d38:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d40:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d44:	ee17 3a90 	vmov	r3, s15
 8001d48:	613b      	str	r3, [r7, #16]
		FreeSpace = (uint32_t) (FreeClusters * FS_Ptr->csize * 0.5);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	895b      	ldrh	r3, [r3, #10]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d5e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	60fb      	str	r3, [r7, #12]
		sprintf(TxBuffer, "Espacio total: %lu Bytes\r\n", TotalSize);
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4910      	ldr	r1, [pc, #64]	@ (8001db4 <SDCard_start+0xdc>)
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <SDCard_start+0xd0>)
 8001d76:	f00f ffd1 	bl	8011d1c <siprintf>
		print(TxBuffer);
 8001d7a:	480b      	ldr	r0, [pc, #44]	@ (8001da8 <SDCard_start+0xd0>)
 8001d7c:	f7ff fbb8 	bl	80014f0 <print>
		sprintf(TxBuffer, "Espacio libre: %lu Bytes\r\n\n", FreeSpace);
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	490d      	ldr	r1, [pc, #52]	@ (8001db8 <SDCard_start+0xe0>)
 8001d84:	4808      	ldr	r0, [pc, #32]	@ (8001da8 <SDCard_start+0xd0>)
 8001d86:	f00f ffc9 	bl	8011d1c <siprintf>
		print(TxBuffer);
 8001d8a:	4807      	ldr	r0, [pc, #28]	@ (8001da8 <SDCard_start+0xd0>)
 8001d8c:	f7ff fbb0 	bl	80014f0 <print>
	} while (0);

}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	24001824 	.word	0x24001824
 8001da0:	24000620 	.word	0x24000620
 8001da4:	08012900 	.word	0x08012900
 8001da8:	24001714 	.word	0x24001714
 8001dac:	0801291c 	.word	0x0801291c
 8001db0:	0801289c 	.word	0x0801289c
 8001db4:	0801293c 	.word	0x0801293c
 8001db8:	08012958 	.word	0x08012958

08001dbc <CAN_bus_off_check_reset>:

void CAN_bus_off_check_reset(FDCAN_HandleTypeDef *hfdcan){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08e      	sub	sp, #56	@ 0x38
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	FDCAN_ProtocolStatusTypeDef protocolStatus;
	HAL_FDCAN_GetProtocolStatus(hfdcan, &protocolStatus);
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f005 fce0 	bl	8007790 <HAL_FDCAN_GetProtocolStatus>
	if(protocolStatus.BusOff){
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <CAN_bus_off_check_reset+0x2a>
		CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	619a      	str	r2, [r3, #24]
	}
}
 8001de6:	bf00      	nop
 8001de8:	3738      	adds	r7, #56	@ 0x38
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df2:	b672      	cpsid	i
}
 8001df4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001df6:	bf00      	nop
 8001df8:	e7fd      	b.n	8001df6 <Error_Handler+0x8>
	...

08001dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_MspInit+0x30>)
 8001e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e08:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <HAL_MspInit+0x30>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_MspInit+0x30>)
 8001e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	58024400 	.word	0x58024400

08001e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b090      	sub	sp, #64	@ 0x40
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a90      	ldr	r2, [pc, #576]	@ (8002090 <HAL_ADC_MspInit+0x260>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	f040 80a3 	bne.w	8001f9a <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e54:	4b8f      	ldr	r3, [pc, #572]	@ (8002094 <HAL_ADC_MspInit+0x264>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a8e      	ldr	r2, [pc, #568]	@ (8002094 <HAL_ADC_MspInit+0x264>)
 8001e5c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002094 <HAL_ADC_MspInit+0x264>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d10e      	bne.n	8001e84 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e66:	4b8c      	ldr	r3, [pc, #560]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001e68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e6c:	4a8a      	ldr	r2, [pc, #552]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001e6e:	f043 0320 	orr.w	r3, r3, #32
 8001e72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e76:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	4b84      	ldr	r3, [pc, #528]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8a:	4a83      	ldr	r2, [pc, #524]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e94:	4b80      	ldr	r3, [pc, #512]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea8:	4a7b      	ldr	r2, [pc, #492]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb2:	4b79      	ldr	r3, [pc, #484]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec0:	4b75      	ldr	r3, [pc, #468]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec6:	4a74      	ldr	r2, [pc, #464]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001ec8:	f043 0320 	orr.w	r3, r3, #32
 8001ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed0:	4b71      	ldr	r3, [pc, #452]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001ede:	2330      	movs	r3, #48	@ 0x30
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	486a      	ldr	r0, [pc, #424]	@ (800209c <HAL_ADC_MspInit+0x26c>)
 8001ef2:	f006 fa13 	bl	800831c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efa:	2303      	movs	r3, #3
 8001efc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f06:	4619      	mov	r1, r3
 8001f08:	4865      	ldr	r0, [pc, #404]	@ (80020a0 <HAL_ADC_MspInit+0x270>)
 8001f0a:	f006 fa07 	bl	800831c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001f0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f14:	2303      	movs	r3, #3
 8001f16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f20:	4619      	mov	r1, r3
 8001f22:	4860      	ldr	r0, [pc, #384]	@ (80020a4 <HAL_ADC_MspInit+0x274>)
 8001f24:	f006 f9fa 	bl	800831c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f28:	4b5f      	ldr	r3, [pc, #380]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f2a:	4a60      	ldr	r2, [pc, #384]	@ (80020ac <HAL_ADC_MspInit+0x27c>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f30:	2209      	movs	r2, #9
 8001f32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f34:	4b5c      	ldr	r3, [pc, #368]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f40:	4b59      	ldr	r3, [pc, #356]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f48:	4b57      	ldr	r3, [pc, #348]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f50:	4b55      	ldr	r3, [pc, #340]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f58:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f60:	4b51      	ldr	r3, [pc, #324]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f66:	4b50      	ldr	r3, [pc, #320]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f6c:	484e      	ldr	r0, [pc, #312]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f6e:	f002 fef5 	bl	8004d5c <HAL_DMA_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001f78:	f7ff ff39 	bl	8001dee <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f80:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f82:	4a49      	ldr	r2, [pc, #292]	@ (80020a8 <HAL_ADC_MspInit+0x278>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2012      	movs	r0, #18
 8001f8e:	f002 feb0 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f92:	2012      	movs	r0, #18
 8001f94:	f002 fec7 	bl	8004d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f98:	e076      	b.n	8002088 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a44      	ldr	r2, [pc, #272]	@ (80020b0 <HAL_ADC_MspInit+0x280>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d171      	bne.n	8002088 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8002094 <HAL_ADC_MspInit+0x264>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a3a      	ldr	r2, [pc, #232]	@ (8002094 <HAL_ADC_MspInit+0x264>)
 8001fac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fae:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_ADC_MspInit+0x264>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fb6:	4b38      	ldr	r3, [pc, #224]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fbc:	4a36      	ldr	r2, [pc, #216]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001fbe:	f043 0320 	orr.w	r3, r3, #32
 8001fc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	4b30      	ldr	r3, [pc, #192]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fda:	4a2f      	ldr	r2, [pc, #188]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b29      	ldr	r3, [pc, #164]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff8:	4a27      	ldr	r2, [pc, #156]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002002:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002016:	4a20      	ldr	r2, [pc, #128]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8002018:	f043 0320 	orr.w	r3, r3, #32
 800201c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002020:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_ADC_MspInit+0x268>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 800202e:	2320      	movs	r3, #32
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002032:	2303      	movs	r3, #3
 8002034:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800203e:	4619      	mov	r1, r3
 8002040:	4816      	ldr	r0, [pc, #88]	@ (800209c <HAL_ADC_MspInit+0x26c>)
 8002042:	f006 f96b 	bl	800831c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8002046:	2301      	movs	r3, #1
 8002048:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204a:	2303      	movs	r3, #3
 800204c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002056:	4619      	mov	r1, r3
 8002058:	4811      	ldr	r0, [pc, #68]	@ (80020a0 <HAL_ADC_MspInit+0x270>)
 800205a:	f006 f95f 	bl	800831c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 800205e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002064:	2303      	movs	r3, #3
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800206c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002070:	4619      	mov	r1, r3
 8002072:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <HAL_ADC_MspInit+0x274>)
 8002074:	f006 f952 	bl	800831c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2012      	movs	r0, #18
 800207e:	f002 fe38 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002082:	2012      	movs	r0, #18
 8002084:	f002 fe4f 	bl	8004d26 <HAL_NVIC_EnableIRQ>
}
 8002088:	bf00      	nop
 800208a:	3740      	adds	r7, #64	@ 0x40
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40022000 	.word	0x40022000
 8002094:	24001810 	.word	0x24001810
 8002098:	58024400 	.word	0x58024400
 800209c:	58020800 	.word	0x58020800
 80020a0:	58020400 	.word	0x58020400
 80020a4:	58021400 	.word	0x58021400
 80020a8:	24000174 	.word	0x24000174
 80020ac:	40020010 	.word	0x40020010
 80020b0:	40022100 	.word	0x40022100

080020b4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b0ba      	sub	sp, #232	@ 0xe8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	22b8      	movs	r2, #184	@ 0xb8
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f00f fe41 	bl	8011d5c <memset>
  if(hfdcan->Instance==FDCAN1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a5e      	ldr	r2, [pc, #376]	@ (8002258 <HAL_FDCAN_MspInit+0x1a4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d157      	bne.n	8002194 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	4618      	mov	r0, r3
 80020fc:	f007 fa88 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002106:	f7ff fe72 	bl	8001dee <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800210a:	4b54      	ldr	r3, [pc, #336]	@ (800225c <HAL_FDCAN_MspInit+0x1a8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	4a52      	ldr	r2, [pc, #328]	@ (800225c <HAL_FDCAN_MspInit+0x1a8>)
 8002112:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002114:	4b51      	ldr	r3, [pc, #324]	@ (800225c <HAL_FDCAN_MspInit+0x1a8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d10e      	bne.n	800213a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800211c:	4b50      	ldr	r3, [pc, #320]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 800211e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002122:	4a4f      	ldr	r2, [pc, #316]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002128:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800212c:	4b4c      	ldr	r3, [pc, #304]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 800212e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	4b49      	ldr	r3, [pc, #292]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002140:	4a47      	ldr	r2, [pc, #284]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800214a:	4b45      	ldr	r3, [pc, #276]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002158:	2303      	movs	r3, #3
 800215a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002170:	2309      	movs	r3, #9
 8002172:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002176:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800217a:	4619      	mov	r1, r3
 800217c:	4839      	ldr	r0, [pc, #228]	@ (8002264 <HAL_FDCAN_MspInit+0x1b0>)
 800217e:	f006 f8cd 	bl	800831c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2101      	movs	r1, #1
 8002186:	2013      	movs	r0, #19
 8002188:	f002 fdb3 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800218c:	2013      	movs	r0, #19
 800218e:	f002 fdca 	bl	8004d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002192:	e05c      	b.n	800224e <HAL_FDCAN_MspInit+0x19a>
  else if(hfdcan->Instance==FDCAN2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a33      	ldr	r2, [pc, #204]	@ (8002268 <HAL_FDCAN_MspInit+0x1b4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d157      	bne.n	800224e <HAL_FDCAN_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800219e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b0:	f107 0318 	add.w	r3, r7, #24
 80021b4:	4618      	mov	r0, r3
 80021b6:	f007 fa2b 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80021c0:	f7ff fe15 	bl	8001dee <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021c4:	4b25      	ldr	r3, [pc, #148]	@ (800225c <HAL_FDCAN_MspInit+0x1a8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a24      	ldr	r2, [pc, #144]	@ (800225c <HAL_FDCAN_MspInit+0x1a8>)
 80021cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021ce:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_FDCAN_MspInit+0x1a8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10e      	bne.n	80021f4 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021d6:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 80021d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021dc:	4a20      	ldr	r2, [pc, #128]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80021e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 80021e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fa:	4a19      	ldr	r2, [pc, #100]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002204:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <HAL_FDCAN_MspInit+0x1ac>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002212:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800222c:	2309      	movs	r3, #9
 800222e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	@ (800226c <HAL_FDCAN_MspInit+0x1b8>)
 800223a:	f006 f86f 	bl	800831c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2102      	movs	r1, #2
 8002242:	2014      	movs	r0, #20
 8002244:	f002 fd55 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002248:	2014      	movs	r0, #20
 800224a:	f002 fd6c 	bl	8004d26 <HAL_NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	37e8      	adds	r7, #232	@ 0xe8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	4000a000 	.word	0x4000a000
 800225c:	24001814 	.word	0x24001814
 8002260:	58024400 	.word	0x58024400
 8002264:	58020c00 	.word	0x58020c00
 8002268:	4000a400 	.word	0x4000a400
 800226c:	58020400 	.word	0x58020400

08002270 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	@ 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a3e      	ldr	r2, [pc, #248]	@ (8002388 <HAL_SD_MspInit+0x118>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d175      	bne.n	800237e <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002292:	4b3e      	ldr	r3, [pc, #248]	@ (800238c <HAL_SD_MspInit+0x11c>)
 8002294:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002298:	4a3c      	ldr	r2, [pc, #240]	@ (800238c <HAL_SD_MspInit+0x11c>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80022a2:	4b3a      	ldr	r3, [pc, #232]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b0:	4b36      	ldr	r3, [pc, #216]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b6:	4a35      	ldr	r2, [pc, #212]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c0:	4b32      	ldr	r3, [pc, #200]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d4:	4a2d      	ldr	r2, [pc, #180]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022d6:	f043 0308 	orr.w	r3, r3, #8
 80022da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022de:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f2:	4a26      	ldr	r2, [pc, #152]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022fc:	4b23      	ldr	r3, [pc, #140]	@ (800238c <HAL_SD_MspInit+0x11c>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800230a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800230e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	2303      	movs	r3, #3
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800231c:	230c      	movs	r3, #12
 800231e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4619      	mov	r1, r3
 8002326:	481a      	ldr	r0, [pc, #104]	@ (8002390 <HAL_SD_MspInit+0x120>)
 8002328:	f005 fff8 	bl	800831c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800232c:	2304      	movs	r3, #4
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800233c:	230c      	movs	r3, #12
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4813      	ldr	r0, [pc, #76]	@ (8002394 <HAL_SD_MspInit+0x124>)
 8002348:	f005 ffe8 	bl	800831c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800234c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 800235e:	2307      	movs	r3, #7
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	480b      	ldr	r0, [pc, #44]	@ (8002398 <HAL_SD_MspInit+0x128>)
 800236a:	f005 ffd7 	bl	800831c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2031      	movs	r0, #49	@ 0x31
 8002374:	f002 fcbd 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002378:	2031      	movs	r0, #49	@ 0x31
 800237a:	f002 fcd4 	bl	8004d26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800237e:	bf00      	nop
 8002380:	3730      	adds	r7, #48	@ 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	52007000 	.word	0x52007000
 800238c:	58024400 	.word	0x58024400
 8002390:	58020800 	.word	0x58020800
 8002394:	58020c00 	.word	0x58020c00
 8002398:	58020400 	.word	0x58020400

0800239c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a19      	ldr	r2, [pc, #100]	@ (8002410 <HAL_TIM_Base_MspInit+0x74>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10f      	bne.n	80023ce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ae:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_TIM_Base_MspInit+0x78>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023b4:	4a17      	ldr	r2, [pc, #92]	@ (8002414 <HAL_TIM_Base_MspInit+0x78>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_TIM_Base_MspInit+0x78>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80023cc:	e01b      	b.n	8002406 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <HAL_TIM_Base_MspInit+0x7c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d116      	bne.n	8002406 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_TIM_Base_MspInit+0x78>)
 80023da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023de:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <HAL_TIM_Base_MspInit+0x78>)
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_TIM_Base_MspInit+0x78>)
 80023ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2075      	movs	r0, #117	@ 0x75
 80023fc:	f002 fc79 	bl	8004cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002400:	2075      	movs	r0, #117	@ 0x75
 8002402:	f002 fc90 	bl	8004d26 <HAL_NVIC_EnableIRQ>
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	58024400 	.word	0x58024400
 8002418:	40014400 	.word	0x40014400

0800241c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a13      	ldr	r2, [pc, #76]	@ (8002488 <HAL_TIM_MspPostInit+0x6c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d11f      	bne.n	800247e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800243e:	4b13      	ldr	r3, [pc, #76]	@ (800248c <HAL_TIM_MspPostInit+0x70>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002444:	4a11      	ldr	r2, [pc, #68]	@ (800248c <HAL_TIM_MspPostInit+0x70>)
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <HAL_TIM_MspPostInit+0x70>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 800245c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002460:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	4619      	mov	r1, r3
 8002478:	4805      	ldr	r0, [pc, #20]	@ (8002490 <HAL_TIM_MspPostInit+0x74>)
 800247a:	f005 ff4f 	bl	800831c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	58024400 	.word	0x58024400
 8002490:	58021000 	.word	0x58021000

08002494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0ba      	sub	sp, #232	@ 0xe8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ac:	f107 0318 	add.w	r3, r7, #24
 80024b0:	22b8      	movs	r2, #184	@ 0xb8
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f00f fc51 	bl	8011d5c <memset>
  if(huart->Instance==USART1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4d      	ldr	r2, [pc, #308]	@ (80025f4 <HAL_UART_MspInit+0x160>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d147      	bne.n	8002554 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024c4:	f04f 0201 	mov.w	r2, #1
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	4618      	mov	r0, r3
 80024dc:	f007 f898 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024e6:	f7ff fc82 	bl	8001dee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ea:	4b43      	ldr	r3, [pc, #268]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 80024ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024f0:	4a41      	ldr	r2, [pc, #260]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 80024f2:	f043 0310 	orr.w	r3, r3, #16
 80024f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024fa:	4b3f      	ldr	r3, [pc, #252]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 80024fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250e:	4a3a      	ldr	r2, [pc, #232]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002518:	4b37      	ldr	r3, [pc, #220]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8002526:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800252a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002540:	2307      	movs	r3, #7
 8002542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800254a:	4619      	mov	r1, r3
 800254c:	482b      	ldr	r0, [pc, #172]	@ (80025fc <HAL_UART_MspInit+0x168>)
 800254e:	f005 fee5 	bl	800831c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002552:	e04a      	b.n	80025ea <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a29      	ldr	r2, [pc, #164]	@ (8002600 <HAL_UART_MspInit+0x16c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d145      	bne.n	80025ea <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800255e:	f04f 0202 	mov.w	r2, #2
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	4618      	mov	r0, r3
 8002576:	f007 f84b 	bl	8009610 <HAL_RCCEx_PeriphCLKConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002580:	f7ff fc35 	bl	8001dee <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002584:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 8002586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800258a:	4a1b      	ldr	r2, [pc, #108]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 800258c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002590:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002594:	4b18      	ldr	r3, [pc, #96]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 8002596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 80025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a8:	4a13      	ldr	r2, [pc, #76]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b2:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_UART_MspInit+0x164>)
 80025b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c0:	230c      	movs	r3, #12
 80025c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d8:	2307      	movs	r3, #7
 80025da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	@ (80025fc <HAL_UART_MspInit+0x168>)
 80025e6:	f005 fe99 	bl	800831c <HAL_GPIO_Init>
}
 80025ea:	bf00      	nop
 80025ec:	37e8      	adds	r7, #232	@ 0xe8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40011000 	.word	0x40011000
 80025f8:	58024400 	.word	0x58024400
 80025fc:	58020000 	.word	0x58020000
 8002600:	40004400 	.word	0x40004400

08002604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <NMI_Handler+0x4>

0800260c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <HardFault_Handler+0x4>

08002614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <MemManage_Handler+0x4>

0800261c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <BusFault_Handler+0x4>

08002624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <UsageFault_Handler+0x4>

0800262c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265a:	f000 f98d 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002668:	4802      	ldr	r0, [pc, #8]	@ (8002674 <DMA1_Stream0_IRQHandler+0x10>)
 800266a:	f003 f939 	bl	80058e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	24000174 	.word	0x24000174

08002678 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800267c:	4803      	ldr	r0, [pc, #12]	@ (800268c <ADC_IRQHandler+0x14>)
 800267e:	f000 ff8f 	bl	80035a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002682:	4803      	ldr	r0, [pc, #12]	@ (8002690 <ADC_IRQHandler+0x18>)
 8002684:	f000 ff8c 	bl	80035a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	24000094 	.word	0x24000094
 8002690:	24000104 	.word	0x24000104

08002694 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002698:	4802      	ldr	r0, [pc, #8]	@ (80026a4 <FDCAN1_IT0_IRQHandler+0x10>)
 800269a:	f005 f943 	bl	8007924 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	240001ec 	.word	0x240001ec

080026a8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <FDCAN2_IT0_IRQHandler+0x10>)
 80026ae:	f005 f939 	bl	8007924 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2400028c 	.word	0x2400028c

080026bc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80026c0:	4802      	ldr	r0, [pc, #8]	@ (80026cc <SDMMC1_IRQHandler+0x10>)
 80026c2:	f009 fdfb 	bl	800c2bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2400032c 	.word	0x2400032c

080026d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026d4:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <TIM16_IRQHandler+0x10>)
 80026d6:	f00b f924 	bl	800d922 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	240003f4 	.word	0x240003f4

080026e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ec:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <_sbrk+0x5c>)
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <_sbrk+0x60>)
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f8:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <_sbrk+0x64>)
 8002702:	4a12      	ldr	r2, [pc, #72]	@ (800274c <_sbrk+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002714:	f00f fb2a 	bl	8011d6c <__errno>
 8002718:	4603      	mov	r3, r0
 800271a:	220c      	movs	r2, #12
 800271c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	e009      	b.n	8002738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	4a05      	ldr	r2, [pc, #20]	@ (8002748 <_sbrk+0x64>)
 8002734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	24050000 	.word	0x24050000
 8002744:	00000400 	.word	0x00000400
 8002748:	24001818 	.word	0x24001818
 800274c:	24001bb0 	.word	0x24001bb0

08002750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002754:	4b32      	ldr	r3, [pc, #200]	@ (8002820 <SystemInit+0xd0>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <SystemInit+0xd0>)
 800275c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002764:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <SystemInit+0xd4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	2b06      	cmp	r3, #6
 800276e:	d807      	bhi.n	8002780 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002770:	4b2c      	ldr	r3, [pc, #176]	@ (8002824 <SystemInit+0xd4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 030f 	bic.w	r3, r3, #15
 8002778:	4a2a      	ldr	r2, [pc, #168]	@ (8002824 <SystemInit+0xd4>)
 800277a:	f043 0307 	orr.w	r3, r3, #7
 800277e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002780:	4b29      	ldr	r3, [pc, #164]	@ (8002828 <SystemInit+0xd8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a28      	ldr	r2, [pc, #160]	@ (8002828 <SystemInit+0xd8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800278c:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <SystemInit+0xd8>)
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002792:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <SystemInit+0xd8>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4924      	ldr	r1, [pc, #144]	@ (8002828 <SystemInit+0xd8>)
 8002798:	4b24      	ldr	r3, [pc, #144]	@ (800282c <SystemInit+0xdc>)
 800279a:	4013      	ands	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800279e:	4b21      	ldr	r3, [pc, #132]	@ (8002824 <SystemInit+0xd4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <SystemInit+0xd4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 030f 	bic.w	r3, r3, #15
 80027b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <SystemInit+0xd4>)
 80027b4:	f043 0307 	orr.w	r3, r3, #7
 80027b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <SystemInit+0xd8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <SystemInit+0xd8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027c6:	4b18      	ldr	r3, [pc, #96]	@ (8002828 <SystemInit+0xd8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027cc:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <SystemInit+0xd8>)
 80027ce:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <SystemInit+0xe0>)
 80027d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <SystemInit+0xd8>)
 80027d4:	4a17      	ldr	r2, [pc, #92]	@ (8002834 <SystemInit+0xe4>)
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027d8:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <SystemInit+0xd8>)
 80027da:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <SystemInit+0xe8>)
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <SystemInit+0xd8>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <SystemInit+0xd8>)
 80027e6:	4a14      	ldr	r2, [pc, #80]	@ (8002838 <SystemInit+0xe8>)
 80027e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <SystemInit+0xd8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <SystemInit+0xd8>)
 80027f2:	4a11      	ldr	r2, [pc, #68]	@ (8002838 <SystemInit+0xe8>)
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <SystemInit+0xd8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <SystemInit+0xd8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a09      	ldr	r2, [pc, #36]	@ (8002828 <SystemInit+0xd8>)
 8002802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002806:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002808:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <SystemInit+0xd8>)
 800280a:	2200      	movs	r2, #0
 800280c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800280e:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <SystemInit+0xec>)
 8002810:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002814:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00
 8002824:	52002000 	.word	0x52002000
 8002828:	58024400 	.word	0x58024400
 800282c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002830:	02020200 	.word	0x02020200
 8002834:	01ff0000 	.word	0x01ff0000
 8002838:	01010280 	.word	0x01010280
 800283c:	52004000 	.word	0x52004000

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7ff ff84 	bl	8002750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	@ (800287c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	@ (8002880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	@ (800288c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f00f fa83 	bl	8011d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7fd ff7f 	bl	8000774 <main>
  bx  lr
 8002876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002878:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800287c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002880:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002884:	08012b28 	.word	0x08012b28
  ldr r2, =_sbss
 8002888:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800288c:	24001bb0 	.word	0x24001bb0

08002890 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC3_IRQHandler>
	...

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289a:	2003      	movs	r0, #3
 800289c:	f002 fa1e 	bl	8004cdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028a0:	f006 fce0 	bl	8009264 <HAL_RCC_GetSysClockFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <HAL_Init+0x68>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	4913      	ldr	r1, [pc, #76]	@ (8002900 <HAL_Init+0x6c>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028be:	4b0f      	ldr	r3, [pc, #60]	@ (80028fc <HAL_Init+0x68>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002900 <HAL_Init+0x6c>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002904 <HAL_Init+0x70>)
 80028d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002908 <HAL_Init+0x74>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028de:	200f      	movs	r0, #15
 80028e0:	f000 f814 	bl	800290c <HAL_InitTick>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e002      	b.n	80028f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028ee:	f7ff fa85 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	58024400 	.word	0x58024400
 8002900:	08012a80 	.word	0x08012a80
 8002904:	24000010 	.word	0x24000010
 8002908:	2400000c 	.word	0x2400000c

0800290c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002914:	4b15      	ldr	r3, [pc, #84]	@ (800296c <HAL_InitTick+0x60>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e021      	b.n	8002964 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <HAL_InitTick+0x64>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b11      	ldr	r3, [pc, #68]	@ (800296c <HAL_InitTick+0x60>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fa03 	bl	8004d42 <HAL_SYSTICK_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00e      	b.n	8002964 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d80a      	bhi.n	8002962 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294c:	2200      	movs	r2, #0
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f002 f9cd 	bl	8004cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002958:	4a06      	ldr	r2, [pc, #24]	@ (8002974 <HAL_InitTick+0x68>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	24000018 	.word	0x24000018
 8002970:	2400000c 	.word	0x2400000c
 8002974:	24000014 	.word	0x24000014

08002978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_IncTick+0x20>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_IncTick+0x24>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_IncTick+0x24>)
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	24000018 	.word	0x24000018
 800299c:	2400181c 	.word	0x2400181c

080029a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return uwTick;
 80029a4:	4b03      	ldr	r3, [pc, #12]	@ (80029b4 <HAL_GetTick+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2400181c 	.word	0x2400181c

080029b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff ffee 	bl	80029a0 <HAL_GetTick>
 80029c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d005      	beq.n	80029de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d2:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <HAL_Delay+0x44>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029de:	bf00      	nop
 80029e0:	f7ff ffde 	bl	80029a0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d8f7      	bhi.n	80029e0 <HAL_Delay+0x28>
  {
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	24000018 	.word	0x24000018

08002a00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	609a      	str	r2, [r3, #8]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3360      	adds	r3, #96	@ 0x60
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a10      	ldr	r2, [pc, #64]	@ (8002ac8 <LL_ADC_SetOffset+0x60>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10b      	bne.n	8002aa4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002aa2:	e00b      	b.n	8002abc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	601a      	str	r2, [r3, #0]
}
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	58026000 	.word	0x58026000

08002acc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3360      	adds	r3, #96	@ 0x60
 8002ada:	461a      	mov	r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	611a      	str	r2, [r3, #16]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b6c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3360      	adds	r3, #96	@ 0x60
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	601a      	str	r2, [r3, #0]
  }
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	58026000 	.word	0x58026000

08002b70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb0 <LL_ADC_SetOffsetSaturation+0x40>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d10e      	bne.n	8002ba2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3360      	adds	r3, #96	@ 0x60
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	58026000 	.word	0x58026000

08002bb4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf4 <LL_ADC_SetOffsetSign+0x40>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d10e      	bne.n	8002be6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3360      	adds	r3, #96	@ 0x60
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	58026000 	.word	0x58026000

08002bf8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3360      	adds	r3, #96	@ 0x60
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a0c      	ldr	r2, [pc, #48]	@ (8002c48 <LL_ADC_SetOffsetState+0x50>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002c2a:	e007      	b.n	8002c3c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	58026000 	.word	0x58026000

08002c4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b087      	sub	sp, #28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3330      	adds	r3, #48	@ 0x30
 8002c82:	461a      	mov	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	4413      	add	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	211f      	movs	r1, #31
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	f003 011f 	and.w	r1, r3, #31
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f023 0203 	bic.w	r2, r3, #3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a08      	ldr	r2, [pc, #32]	@ (8002d40 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d107      	bne.n	8002d32 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60da      	str	r2, [r3, #12]
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	58026000 	.word	0x58026000

08002d44 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d50:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b087      	sub	sp, #28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	0e5b      	lsrs	r3, r3, #25
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	4413      	add	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	0d1b      	lsrs	r3, r3, #20
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2107      	movs	r1, #7
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	0d1b      	lsrs	r3, r3, #20
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	431a      	orrs	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d115      	bne.n	8002e00 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de0:	43db      	mvns	r3, r3
 8002de2:	401a      	ands	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0318 	and.w	r3, r3, #24
 8002dea:	4914      	ldr	r1, [pc, #80]	@ (8002e3c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002dec:	40d9      	lsrs	r1, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	400b      	ands	r3, r1
 8002df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df6:	431a      	orrs	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002dfe:	e014      	b.n	8002e2a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0318 	and.w	r3, r3, #24
 8002e16:	4909      	ldr	r1, [pc, #36]	@ (8002e3c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e18:	40d9      	lsrs	r1, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e22:	431a      	orrs	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	58026000 	.word	0x58026000
 8002e3c:	000fffff 	.word	0x000fffff

08002e40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6093      	str	r3, [r2, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	5fffffc0 	.word	0x5fffffc0

08002e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb0:	d101      	bne.n	8002eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	6fffffc0 	.word	0x6fffffc0

08002eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <LL_ADC_Enable+0x24>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	7fffffc0 	.word	0x7fffffc0

08002f3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <LL_ADC_IsEnabled+0x18>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <LL_ADC_IsEnabled+0x1a>
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <LL_ADC_REG_StartConversion+0x24>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	7fffffc0 	.word	0x7fffffc0

08002f8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d101      	bne.n	8002fca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1ee      	b.n	80033d0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7fe ff15 	bl	8001e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff3f 	bl	8002e9c <LL_ADC_IsDeepPowerDownEnabled>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff25 	bl	8002e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ff5a 	bl	8002eec <LL_ADC_IsInternalRegulatorEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d114      	bne.n	8003068 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff3e 	bl	8002ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003048:	4b8e      	ldr	r3, [pc, #568]	@ (8003284 <HAL_ADC_Init+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	4a8e      	ldr	r2, [pc, #568]	@ (8003288 <HAL_ADC_Init+0x2b0>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	3301      	adds	r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800305a:	e002      	b.n	8003062 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3b01      	subs	r3, #1
 8003060:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f9      	bne.n	800305c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff3d 	bl	8002eec <LL_ADC_IsInternalRegulatorEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10d      	bne.n	8003094 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff77 	bl	8002f8c <LL_ADC_REG_IsConversionOngoing>
 800309e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 8188 	bne.w	80033be <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 8184 	bne.w	80033be <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ba:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff36 	bl	8002f3c <LL_ADC_IsEnabled>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d136      	bne.n	8003144 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6c      	ldr	r2, [pc, #432]	@ (800328c <HAL_ADC_Init+0x2b4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_ADC_Init+0x112>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003290 <HAL_ADC_Init+0x2b8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10e      	bne.n	8003108 <HAL_ADC_Init+0x130>
 80030ea:	4868      	ldr	r0, [pc, #416]	@ (800328c <HAL_ADC_Init+0x2b4>)
 80030ec:	f7ff ff26 	bl	8002f3c <LL_ADC_IsEnabled>
 80030f0:	4604      	mov	r4, r0
 80030f2:	4867      	ldr	r0, [pc, #412]	@ (8003290 <HAL_ADC_Init+0x2b8>)
 80030f4:	f7ff ff22 	bl	8002f3c <LL_ADC_IsEnabled>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4323      	orrs	r3, r4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e008      	b.n	800311a <HAL_ADC_Init+0x142>
 8003108:	4862      	ldr	r0, [pc, #392]	@ (8003294 <HAL_ADC_Init+0x2bc>)
 800310a:	f7ff ff17 	bl	8002f3c <LL_ADC_IsEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5a      	ldr	r2, [pc, #360]	@ (800328c <HAL_ADC_Init+0x2b4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_ADC_Init+0x15a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a58      	ldr	r2, [pc, #352]	@ (8003290 <HAL_ADC_Init+0x2b8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Init+0x15e>
 8003132:	4a59      	ldr	r2, [pc, #356]	@ (8003298 <HAL_ADC_Init+0x2c0>)
 8003134:	e000      	b.n	8003138 <HAL_ADC_Init+0x160>
 8003136:	4a59      	ldr	r2, [pc, #356]	@ (800329c <HAL_ADC_Init+0x2c4>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7ff fc5e 	bl	8002a00 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a52      	ldr	r2, [pc, #328]	@ (8003294 <HAL_ADC_Init+0x2bc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d129      	bne.n	80031a2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7e5b      	ldrb	r3, [r3, #25]
 8003152:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003158:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800315e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d013      	beq.n	8003190 <HAL_ADC_Init+0x1b8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	d00d      	beq.n	800318c <HAL_ADC_Init+0x1b4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b1c      	cmp	r3, #28
 8003176:	d007      	beq.n	8003188 <HAL_ADC_Init+0x1b0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b18      	cmp	r3, #24
 800317e:	d101      	bne.n	8003184 <HAL_ADC_Init+0x1ac>
 8003180:	2318      	movs	r3, #24
 8003182:	e006      	b.n	8003192 <HAL_ADC_Init+0x1ba>
 8003184:	2300      	movs	r3, #0
 8003186:	e004      	b.n	8003192 <HAL_ADC_Init+0x1ba>
 8003188:	2310      	movs	r3, #16
 800318a:	e002      	b.n	8003192 <HAL_ADC_Init+0x1ba>
 800318c:	2308      	movs	r3, #8
 800318e:	e000      	b.n	8003192 <HAL_ADC_Init+0x1ba>
 8003190:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003192:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e00e      	b.n	80031c0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7e5b      	ldrb	r3, [r3, #25]
 80031a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d106      	bne.n	80031d8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	3b01      	subs	r3, #1
 80031d0:	045b      	lsls	r3, r3, #17
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a26      	ldr	r2, [pc, #152]	@ (8003294 <HAL_ADC_Init+0x2bc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d115      	bne.n	800322a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b26      	ldr	r3, [pc, #152]	@ (80032a0 <HAL_ADC_Init+0x2c8>)
 8003206:	4013      	ands	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	611a      	str	r2, [r3, #16]
 8003228:	e009      	b.n	800323e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	4b1c      	ldr	r3, [pc, #112]	@ (80032a4 <HAL_ADC_Init+0x2cc>)
 8003232:	4013      	ands	r3, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	69b9      	ldr	r1, [r7, #24]
 800323a:	430b      	orrs	r3, r1
 800323c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fea2 	bl	8002f8c <LL_ADC_REG_IsConversionOngoing>
 8003248:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff feaf 	bl	8002fb2 <LL_ADC_INJ_IsConversionOngoing>
 8003254:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f040 808e 	bne.w	800337a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 808a 	bne.w	800337a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a0a      	ldr	r2, [pc, #40]	@ (8003294 <HAL_ADC_Init+0x2bc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d11b      	bne.n	80032a8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7e1b      	ldrb	r3, [r3, #24]
 8003274:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800327c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	e018      	b.n	80032b6 <HAL_ADC_Init+0x2de>
 8003284:	2400000c 	.word	0x2400000c
 8003288:	053e2d63 	.word	0x053e2d63
 800328c:	40022000 	.word	0x40022000
 8003290:	40022100 	.word	0x40022100
 8003294:	58026000 	.word	0x58026000
 8003298:	40022300 	.word	0x40022300
 800329c:	58026300 	.word	0x58026300
 80032a0:	fff04007 	.word	0xfff04007
 80032a4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7e1b      	ldrb	r3, [r3, #24]
 80032ac:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	4b46      	ldr	r3, [pc, #280]	@ (80033d8 <HAL_ADC_Init+0x400>)
 80032be:	4013      	ands	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	430b      	orrs	r3, r1
 80032c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d137      	bne.n	8003344 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3f      	ldr	r2, [pc, #252]	@ (80033dc <HAL_ADC_Init+0x404>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d116      	bne.n	8003312 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	4b3d      	ldr	r3, [pc, #244]	@ (80033e0 <HAL_ADC_Init+0x408>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003302:	430a      	orrs	r2, r1
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	611a      	str	r2, [r3, #16]
 8003310:	e020      	b.n	8003354 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	4b32      	ldr	r3, [pc, #200]	@ (80033e4 <HAL_ADC_Init+0x40c>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003320:	3a01      	subs	r2, #1
 8003322:	0411      	lsls	r1, r2, #16
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003334:	430a      	orrs	r2, r1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	611a      	str	r2, [r3, #16]
 8003342:	e007      	b.n	8003354 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <HAL_ADC_Init+0x404>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d002      	beq.n	800337a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f001 f9b9 	bl	80046ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d10c      	bne.n	800339c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	f023 010f 	bic.w	r1, r3, #15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
 800339a:	e007      	b.n	80033ac <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 020f 	bic.w	r2, r2, #15
 80033aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b0:	f023 0303 	bic.w	r3, r3, #3
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80033bc:	e007      	b.n	80033ce <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c2:	f043 0210 	orr.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3724      	adds	r7, #36	@ 0x24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}
 80033d8:	ffffbffc 	.word	0xffffbffc
 80033dc:	58026000 	.word	0x58026000
 80033e0:	fc00f81f 	.word	0xfc00f81f
 80033e4:	fc00f81e 	.word	0xfc00f81e

080033e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a60      	ldr	r2, [pc, #384]	@ (800357c <HAL_ADC_Start_DMA+0x194>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_ADC_Start_DMA+0x20>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5f      	ldr	r2, [pc, #380]	@ (8003580 <HAL_ADC_Start_DMA+0x198>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d101      	bne.n	800340c <HAL_ADC_Start_DMA+0x24>
 8003408:	4b5e      	ldr	r3, [pc, #376]	@ (8003584 <HAL_ADC_Start_DMA+0x19c>)
 800340a:	e000      	b.n	800340e <HAL_ADC_Start_DMA+0x26>
 800340c:	4b5e      	ldr	r3, [pc, #376]	@ (8003588 <HAL_ADC_Start_DMA+0x1a0>)
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fd16 	bl	8002e40 <LL_ADC_GetMultimode>
 8003414:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fdb6 	bl	8002f8c <LL_ADC_REG_IsConversionOngoing>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 80a2 	bne.w	800356c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_ADC_Start_DMA+0x4e>
 8003432:	2302      	movs	r3, #2
 8003434:	e09d      	b.n	8003572 <HAL_ADC_Start_DMA+0x18a>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d006      	beq.n	8003452 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d003      	beq.n	8003452 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b09      	cmp	r3, #9
 800344e:	f040 8086 	bne.w	800355e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f001 f82c 	bl	80044b0 <ADC_Enable>
 8003458:	4603      	mov	r3, r0
 800345a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d178      	bne.n	8003554 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003466:	4b49      	ldr	r3, [pc, #292]	@ (800358c <HAL_ADC_Start_DMA+0x1a4>)
 8003468:	4013      	ands	r3, r2
 800346a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a42      	ldr	r2, [pc, #264]	@ (8003580 <HAL_ADC_Start_DMA+0x198>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d002      	beq.n	8003482 <HAL_ADC_Start_DMA+0x9a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	e000      	b.n	8003484 <HAL_ADC_Start_DMA+0x9c>
 8003482:	4b3e      	ldr	r3, [pc, #248]	@ (800357c <HAL_ADC_Start_DMA+0x194>)
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	4293      	cmp	r3, r2
 800348a:	d002      	beq.n	8003492 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003496:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d006      	beq.n	80034b8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034ae:	f023 0206 	bic.w	r2, r3, #6
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	665a      	str	r2, [r3, #100]	@ 0x64
 80034b6:	e002      	b.n	80034be <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c2:	4a33      	ldr	r2, [pc, #204]	@ (8003590 <HAL_ADC_Start_DMA+0x1a8>)
 80034c4:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	4a32      	ldr	r2, [pc, #200]	@ (8003594 <HAL_ADC_Start_DMA+0x1ac>)
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	4a31      	ldr	r2, [pc, #196]	@ (8003598 <HAL_ADC_Start_DMA+0x1b0>)
 80034d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	221c      	movs	r2, #28
 80034dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0210 	orr.w	r2, r2, #16
 80034f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a28      	ldr	r2, [pc, #160]	@ (800359c <HAL_ADC_Start_DMA+0x1b4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10f      	bne.n	8003520 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7ff fbfe 	bl	8002d10 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fbe9 	bl	8002cf0 <LL_ADC_EnableDMAReq>
 800351e:	e007      	b.n	8003530 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f7ff fbcd 	bl	8002cca <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3340      	adds	r3, #64	@ 0x40
 800353a:	4619      	mov	r1, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f001 ff64 	bl	800540c <HAL_DMA_Start_IT>
 8003544:	4603      	mov	r3, r0
 8003546:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fd09 	bl	8002f64 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003552:	e00d      	b.n	8003570 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800355c:	e008      	b.n	8003570 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800356a:	e001      	b.n	8003570 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40022000 	.word	0x40022000
 8003580:	40022100 	.word	0x40022100
 8003584:	40022300 	.word	0x40022300
 8003588:	58026300 	.word	0x58026300
 800358c:	fffff0fe 	.word	0xfffff0fe
 8003590:	080045c5 	.word	0x080045c5
 8003594:	0800469d 	.word	0x0800469d
 8003598:	080046b9 	.word	0x080046b9
 800359c:	58026000 	.word	0x58026000

080035a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	@ 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a87      	ldr	r2, [pc, #540]	@ (80037e0 <HAL_ADC_IRQHandler+0x240>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x30>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a86      	ldr	r2, [pc, #536]	@ (80037e4 <HAL_ADC_IRQHandler+0x244>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x34>
 80035d0:	4b85      	ldr	r3, [pc, #532]	@ (80037e8 <HAL_ADC_IRQHandler+0x248>)
 80035d2:	e000      	b.n	80035d6 <HAL_ADC_IRQHandler+0x36>
 80035d4:	4b85      	ldr	r3, [pc, #532]	@ (80037ec <HAL_ADC_IRQHandler+0x24c>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fc32 	bl	8002e40 <LL_ADC_GetMultimode>
 80035dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <HAL_ADC_IRQHandler+0x78>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003602:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 f9aa 	bl	8004964 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2202      	movs	r2, #2
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_ADC_IRQHandler+0x8c>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8083 	beq.w	800373e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d07d      	beq.n	800373e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003652:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff faf4 	bl	8002c4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d062      	beq.n	8003730 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5d      	ldr	r2, [pc, #372]	@ (80037e4 <HAL_ADC_IRQHandler+0x244>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d002      	beq.n	800367a <HAL_ADC_IRQHandler+0xda>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	e000      	b.n	800367c <HAL_ADC_IRQHandler+0xdc>
 800367a:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_ADC_IRQHandler+0x240>)
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	4293      	cmp	r3, r2
 8003682:	d008      	beq.n	8003696 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d002      	beq.n	8003696 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b09      	cmp	r3, #9
 8003694:	d104      	bne.n	80036a0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	e00c      	b.n	80036ba <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a4f      	ldr	r2, [pc, #316]	@ (80037e4 <HAL_ADC_IRQHandler+0x244>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d002      	beq.n	80036b0 <HAL_ADC_IRQHandler+0x110>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e000      	b.n	80036b2 <HAL_ADC_IRQHandler+0x112>
 80036b0:	4b4b      	ldr	r3, [pc, #300]	@ (80037e0 <HAL_ADC_IRQHandler+0x240>)
 80036b2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d135      	bne.n	8003730 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d12e      	bne.n	8003730 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fc58 	bl	8002f8c <LL_ADC_REG_IsConversionOngoing>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11a      	bne.n	8003718 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 020c 	bic.w	r2, r2, #12
 80036f0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d112      	bne.n	8003730 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	661a      	str	r2, [r3, #96]	@ 0x60
 8003716:	e00b      	b.n	8003730 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7fd ff19 	bl	8001568 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	220c      	movs	r2, #12
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_ADC_IRQHandler+0x1b2>
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80a0 	beq.w	800389e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 809a 	beq.w	800389e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fadc 	bl	8002d44 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800378c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fa5a 	bl	8002c4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003798:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a11      	ldr	r2, [pc, #68]	@ (80037e4 <HAL_ADC_IRQHandler+0x244>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d002      	beq.n	80037aa <HAL_ADC_IRQHandler+0x20a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	e000      	b.n	80037ac <HAL_ADC_IRQHandler+0x20c>
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <HAL_ADC_IRQHandler+0x240>)
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d008      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b06      	cmp	r3, #6
 80037be:	d002      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d104      	bne.n	80037d0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	e014      	b.n	80037fa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a03      	ldr	r2, [pc, #12]	@ (80037e4 <HAL_ADC_IRQHandler+0x244>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00a      	beq.n	80037f0 <HAL_ADC_IRQHandler+0x250>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e008      	b.n	80037f2 <HAL_ADC_IRQHandler+0x252>
 80037e0:	40022000 	.word	0x40022000
 80037e4:	40022100 	.word	0x40022100
 80037e8:	40022300 	.word	0x40022300
 80037ec:	58026300 	.word	0x58026300
 80037f0:	4b84      	ldr	r3, [pc, #528]	@ (8003a04 <HAL_ADC_IRQHandler+0x464>)
 80037f2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d047      	beq.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_ADC_IRQHandler+0x27a>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d03f      	beq.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	d13a      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d133      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d12e      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fbbb 	bl	8002fb2 <LL_ADC_INJ_IsConversionOngoing>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11a      	bne.n	8003878 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003850:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003856:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d112      	bne.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	f043 0201 	orr.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	661a      	str	r2, [r3, #96]	@ 0x60
 8003876:	e00b      	b.n	8003890 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	f043 0210 	orr.w	r2, r3, #16
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f001 f83f 	bl	8004914 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2260      	movs	r2, #96	@ 0x60
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d011      	beq.n	80038cc <HAL_ADC_IRQHandler+0x32c>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8b2 	bl	8003a28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2280      	movs	r2, #128	@ 0x80
 80038ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d012      	beq.n	80038fc <HAL_ADC_IRQHandler+0x35c>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f001 f825 	bl	800493c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <HAL_ADC_IRQHandler+0x38c>
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003914:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f001 f817 	bl	8004950 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800392a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d043      	beq.n	80039be <HAL_ADC_IRQHandler+0x41e>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d03e      	beq.n	80039be <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003948:	2301      	movs	r3, #1
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
 800394c:	e021      	b.n	8003992 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <HAL_ADC_IRQHandler+0x464>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_ADC_IRQHandler+0x3c8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a29      	ldr	r2, [pc, #164]	@ (8003a08 <HAL_ADC_IRQHandler+0x468>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_ADC_IRQHandler+0x3cc>
 8003968:	4b28      	ldr	r3, [pc, #160]	@ (8003a0c <HAL_ADC_IRQHandler+0x46c>)
 800396a:	e000      	b.n	800396e <HAL_ADC_IRQHandler+0x3ce>
 800396c:	4b28      	ldr	r3, [pc, #160]	@ (8003a10 <HAL_ADC_IRQHandler+0x470>)
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fa74 	bl	8002e5c <LL_ADC_GetMultiDMATransfer>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800397a:	2301      	movs	r3, #1
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
 800397e:	e008      	b.n	8003992 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800398e:	2301      	movs	r3, #1
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10e      	bne.n	80039b6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a8:	f043 0202 	orr.w	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f843 	bl	8003a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d018      	beq.n	80039fa <HAL_ADC_IRQHandler+0x45a>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039e2:	f043 0208 	orr.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039f2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 ff97 	bl	8004928 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039fa:	bf00      	nop
 80039fc:	3728      	adds	r7, #40	@ 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40022100 	.word	0x40022100
 8003a0c:	40022300 	.word	0x40022300
 8003a10:	58026300 	.word	0x58026300

08003a14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b0b9      	sub	sp, #228	@ 0xe4
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a6a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4aab      	ldr	r2, [pc, #684]	@ (8003d20 <HAL_ADC_ConfigChannel+0x2d0>)
 8003a72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x34>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f000 bcfe 	b.w	8004480 <HAL_ADC_ConfigChannel+0xa30>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fa7b 	bl	8002f8c <LL_ADC_REG_IsConversionOngoing>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 84e2 	bne.w	8004462 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	db38      	blt.n	8003b18 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a9e      	ldr	r2, [pc, #632]	@ (8003d24 <HAL_ADC_ConfigChannel+0x2d4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d033      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x7e>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	0e9b      	lsrs	r3, r3, #26
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	e01d      	b.n	8003b0a <HAL_ADC_ConfigChannel+0xba>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ae2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003af2:	2320      	movs	r3, #32
 8003af4:	e004      	b.n	8003b00 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2201      	movs	r2, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	69d1      	ldr	r1, [r2, #28]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f7ff f8a4 	bl	8002c72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fa2c 	bl	8002f8c <LL_ADC_REG_IsConversionOngoing>
 8003b34:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fa38 	bl	8002fb2 <LL_ADC_INJ_IsConversionOngoing>
 8003b42:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 8270 	bne.w	8004030 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 826b 	bne.w	8004030 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f7ff f8ff 	bl	8002d6a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a6c      	ldr	r2, [pc, #432]	@ (8003d24 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10d      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b90:	e032      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b92:	4b65      	ldr	r3, [pc, #404]	@ (8003d28 <HAL_ADC_ConfigChannel+0x2d8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003b9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x168>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	e01d      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x1a4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x18e>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	e00a      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x1a4>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d048      	beq.n	8003c92 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6919      	ldr	r1, [r3, #16]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c10:	f7fe ff2a 	bl	8002a68 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a42      	ldr	r2, [pc, #264]	@ (8003d24 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d119      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6919      	ldr	r1, [r3, #16]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f7fe ffc2 	bl	8002bb4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6919      	ldr	r1, [r3, #16]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d102      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x1f8>
 8003c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c46:	e000      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x1fa>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7fe ff90 	bl	8002b70 <LL_ADC_SetOffsetSaturation>
 8003c50:	e1ee      	b.n	8004030 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6919      	ldr	r1, [r3, #16]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d102      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x21a>
 8003c64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c68:	e000      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x21c>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f7fe ff5d 	bl	8002b2c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6919      	ldr	r1, [r3, #16]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	7e1b      	ldrb	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d102      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x238>
 8003c82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c86:	e000      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x23a>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f7fe ff34 	bl	8002af8 <LL_ADC_SetDataRightShift>
 8003c90:	e1ce      	b.n	8004030 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a23      	ldr	r2, [pc, #140]	@ (8003d24 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	f040 8181 	bne.w	8003fa0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe ff11 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x27a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe ff06 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	0e9b      	lsrs	r3, r3, #26
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	e01e      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x2b8>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe fefb 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003ce8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003cec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	e004      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003cfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x2dc>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0e9b      	lsrs	r3, r3, #26
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	e01e      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x30e>
 8003d20:	47ff0000 	.word	0x47ff0000
 8003d24:	58026000 	.word	0x58026000
 8003d28:	5c001000 	.word	0x5c001000
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e004      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d106      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe ff44 	bl	8002bf8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fea8 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x34c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fe9d 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	0e9b      	lsrs	r3, r3, #26
 8003d96:	f003 021f 	and.w	r2, r3, #31
 8003d9a:	e01e      	b.n	8003dda <HAL_ADC_ConfigChannel+0x38a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fe92 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	e004      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003dce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x3a2>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	0e9b      	lsrs	r3, r3, #26
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	e018      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x3d4>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003e16:	2320      	movs	r3, #32
 8003e18:	e004      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d106      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fee1 	bl	8002bf8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fe45 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x412>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fe3a 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	0e9b      	lsrs	r3, r3, #26
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	e01e      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x450>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fe2f 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003e90:	2320      	movs	r3, #32
 8003e92:	e004      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x468>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	e014      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x492>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	e004      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d106      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fe82 	bl	8002bf8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2103      	movs	r1, #3
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fde6 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x4d0>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2103      	movs	r1, #3
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fddb 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	f003 021f 	and.w	r2, r3, #31
 8003f1e:	e017      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x500>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2103      	movs	r1, #3
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe fdd0 	bl	8002acc <LL_ADC_GetOffsetChannel>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e003      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x518>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	e011      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x53c>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f70:	fa93 f3a3 	rbit	r3, r3
 8003f74:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f78:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003f80:	2320      	movs	r3, #32
 8003f82:	e003      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d14f      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2103      	movs	r1, #3
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fe2d 	bl	8002bf8 <LL_ADC_SetOffsetState>
 8003f9e:	e047      	b.n	8004030 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	069b      	lsls	r3, r3, #26
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d107      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fc2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	069b      	lsls	r3, r3, #26
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d107      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fe6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	069b      	lsls	r3, r3, #26
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d107      	bne.n	800400c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800400a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004012:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	069b      	lsls	r3, r3, #26
 800401c:	429a      	cmp	r2, r3
 800401e:	d107      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800402e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe ff81 	bl	8002f3c <LL_ADC_IsEnabled>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 8219 	bne.w	8004474 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	461a      	mov	r2, r3
 8004050:	f7fe feb6 	bl	8002dc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4aa1      	ldr	r2, [pc, #644]	@ (80042e0 <HAL_ADC_ConfigChannel+0x890>)
 800405a:	4293      	cmp	r3, r2
 800405c:	f040 812e 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x638>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	3301      	adds	r3, #1
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2b09      	cmp	r3, #9
 800407e:	bf94      	ite	ls
 8004080:	2301      	movls	r3, #1
 8004082:	2300      	movhi	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e019      	b.n	80040bc <HAL_ADC_ConfigChannel+0x66c>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004098:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800409a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80040a0:	2320      	movs	r3, #32
 80040a2:	e003      	b.n	80040ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80040a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	bf94      	ite	ls
 80040b6:	2301      	movls	r3, #1
 80040b8:	2300      	movhi	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d079      	beq.n	80041b4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x68c>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0e9b      	lsrs	r3, r3, #26
 80040d2:	3301      	adds	r3, #1
 80040d4:	069b      	lsls	r3, r3, #26
 80040d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040da:	e015      	b.n	8004108 <HAL_ADC_ConfigChannel+0x6b8>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80040ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80040ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	e003      	b.n	8004100 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80040f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	069b      	lsls	r3, r3, #26
 8004104:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x6d8>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0e9b      	lsrs	r3, r3, #26
 800411a:	3301      	adds	r3, #1
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	e017      	b.n	8004158 <HAL_ADC_ConfigChannel+0x708>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004138:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800413a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004140:	2320      	movs	r3, #32
 8004142:	e003      	b.n	800414c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2101      	movs	r1, #1
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	ea42 0103 	orr.w	r1, r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <HAL_ADC_ConfigChannel+0x72e>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0e9b      	lsrs	r3, r3, #26
 800416e:	3301      	adds	r3, #1
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	051b      	lsls	r3, r3, #20
 800417c:	e018      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x760>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004196:	2320      	movs	r3, #32
 8004198:	e003      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	4613      	mov	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4413      	add	r3, r2
 80041ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b0:	430b      	orrs	r3, r1
 80041b2:	e07e      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x780>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0e9b      	lsrs	r3, r3, #26
 80041c6:	3301      	adds	r3, #1
 80041c8:	069b      	lsls	r3, r3, #26
 80041ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041ce:	e015      	b.n	80041fc <HAL_ADC_ConfigChannel+0x7ac>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80041e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e003      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80041ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	069b      	lsls	r3, r3, #26
 80041f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_ADC_ConfigChannel+0x7cc>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	0e9b      	lsrs	r3, r3, #26
 800420e:	3301      	adds	r3, #1
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	e017      	b.n	800424c <HAL_ADC_ConfigChannel+0x7fc>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	61bb      	str	r3, [r7, #24]
  return result;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004234:	2320      	movs	r3, #32
 8004236:	e003      	b.n	8004240 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3301      	adds	r3, #1
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2101      	movs	r1, #1
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	ea42 0103 	orr.w	r1, r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10d      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x828>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e9b      	lsrs	r3, r3, #26
 8004262:	3301      	adds	r3, #1
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	3b1e      	subs	r3, #30
 8004270:	051b      	lsls	r3, r3, #20
 8004272:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004276:	e01b      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x860>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	60fb      	str	r3, [r7, #12]
  return result;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004290:	2320      	movs	r3, #32
 8004292:	e003      	b.n	800429c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	3301      	adds	r3, #1
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	3b1e      	subs	r3, #30
 80042aa:	051b      	lsls	r3, r3, #20
 80042ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b0:	430b      	orrs	r3, r1
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	6892      	ldr	r2, [r2, #8]
 80042b6:	4619      	mov	r1, r3
 80042b8:	f7fe fd57 	bl	8002d6a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f280 80d7 	bge.w	8004474 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a06      	ldr	r2, [pc, #24]	@ (80042e4 <HAL_ADC_ConfigChannel+0x894>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_ADC_ConfigChannel+0x88a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a04      	ldr	r2, [pc, #16]	@ (80042e8 <HAL_ADC_ConfigChannel+0x898>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10a      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x8a0>
 80042da:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <HAL_ADC_ConfigChannel+0x89c>)
 80042dc:	e009      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x8a2>
 80042de:	bf00      	nop
 80042e0:	47ff0000 	.word	0x47ff0000
 80042e4:	40022000 	.word	0x40022000
 80042e8:	40022100 	.word	0x40022100
 80042ec:	40022300 	.word	0x40022300
 80042f0:	4b65      	ldr	r3, [pc, #404]	@ (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fbaa 	bl	8002a4c <LL_ADC_GetCommonPathInternalCh>
 80042f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a62      	ldr	r2, [pc, #392]	@ (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_ADC_ConfigChannel+0x8c0>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a61      	ldr	r2, [pc, #388]	@ (8004490 <HAL_ADC_ConfigChannel+0xa40>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10e      	bne.n	800432e <HAL_ADC_ConfigChannel+0x8de>
 8004310:	485e      	ldr	r0, [pc, #376]	@ (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 8004312:	f7fe fe13 	bl	8002f3c <LL_ADC_IsEnabled>
 8004316:	4604      	mov	r4, r0
 8004318:	485d      	ldr	r0, [pc, #372]	@ (8004490 <HAL_ADC_ConfigChannel+0xa40>)
 800431a:	f7fe fe0f 	bl	8002f3c <LL_ADC_IsEnabled>
 800431e:	4603      	mov	r3, r0
 8004320:	4323      	orrs	r3, r4
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	e008      	b.n	8004340 <HAL_ADC_ConfigChannel+0x8f0>
 800432e:	4859      	ldr	r0, [pc, #356]	@ (8004494 <HAL_ADC_ConfigChannel+0xa44>)
 8004330:	f7fe fe04 	bl	8002f3c <LL_ADC_IsEnabled>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8084 	beq.w	800444e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a53      	ldr	r2, [pc, #332]	@ (8004498 <HAL_ADC_ConfigChannel+0xa48>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d132      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x966>
 8004350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d12c      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a4c      	ldr	r2, [pc, #304]	@ (8004494 <HAL_ADC_ConfigChannel+0xa44>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f040 8086 	bne.w	8004474 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a47      	ldr	r2, [pc, #284]	@ (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_ADC_ConfigChannel+0x92c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a46      	ldr	r2, [pc, #280]	@ (8004490 <HAL_ADC_ConfigChannel+0xa40>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x930>
 800437c:	4a47      	ldr	r2, [pc, #284]	@ (800449c <HAL_ADC_ConfigChannel+0xa4c>)
 800437e:	e000      	b.n	8004382 <HAL_ADC_ConfigChannel+0x932>
 8004380:	4a41      	ldr	r2, [pc, #260]	@ (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 8004382:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004386:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f7fe fb4a 	bl	8002a26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004392:	4b43      	ldr	r3, [pc, #268]	@ (80044a0 <HAL_ADC_ConfigChannel+0xa50>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	4a42      	ldr	r2, [pc, #264]	@ (80044a4 <HAL_ADC_ConfigChannel+0xa54>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	3301      	adds	r3, #1
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043a6:	e002      	b.n	80043ae <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f9      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043b4:	e05e      	b.n	8004474 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a3b      	ldr	r2, [pc, #236]	@ (80044a8 <HAL_ADC_ConfigChannel+0xa58>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d120      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x9b2>
 80043c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11a      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a30      	ldr	r2, [pc, #192]	@ (8004494 <HAL_ADC_ConfigChannel+0xa44>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d14e      	bne.n	8004474 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2c      	ldr	r2, [pc, #176]	@ (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_ADC_ConfigChannel+0x99a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004490 <HAL_ADC_ConfigChannel+0xa40>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x99e>
 80043ea:	4a2c      	ldr	r2, [pc, #176]	@ (800449c <HAL_ADC_ConfigChannel+0xa4c>)
 80043ec:	e000      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x9a0>
 80043ee:	4a26      	ldr	r2, [pc, #152]	@ (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 80043f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f7fe fb13 	bl	8002a26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004400:	e038      	b.n	8004474 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a29      	ldr	r2, [pc, #164]	@ (80044ac <HAL_ADC_ConfigChannel+0xa5c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d133      	bne.n	8004474 <HAL_ADC_ConfigChannel+0xa24>
 800440c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d12d      	bne.n	8004474 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <HAL_ADC_ConfigChannel+0xa44>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d128      	bne.n	8004474 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a19      	ldr	r2, [pc, #100]	@ (800448c <HAL_ADC_ConfigChannel+0xa3c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d004      	beq.n	8004436 <HAL_ADC_ConfigChannel+0x9e6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a17      	ldr	r2, [pc, #92]	@ (8004490 <HAL_ADC_ConfigChannel+0xa40>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d101      	bne.n	800443a <HAL_ADC_ConfigChannel+0x9ea>
 8004436:	4a19      	ldr	r2, [pc, #100]	@ (800449c <HAL_ADC_ConfigChannel+0xa4c>)
 8004438:	e000      	b.n	800443c <HAL_ADC_ConfigChannel+0x9ec>
 800443a:	4a13      	ldr	r2, [pc, #76]	@ (8004488 <HAL_ADC_ConfigChannel+0xa38>)
 800443c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004440:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe faed 	bl	8002a26 <LL_ADC_SetCommonPathInternalCh>
 800444c:	e012      	b.n	8004474 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004460:	e008      	b.n	8004474 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800447c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004480:	4618      	mov	r0, r3
 8004482:	37e4      	adds	r7, #228	@ 0xe4
 8004484:	46bd      	mov	sp, r7
 8004486:	bd90      	pop	{r4, r7, pc}
 8004488:	58026300 	.word	0x58026300
 800448c:	40022000 	.word	0x40022000
 8004490:	40022100 	.word	0x40022100
 8004494:	58026000 	.word	0x58026000
 8004498:	c7520000 	.word	0xc7520000
 800449c:	40022300 	.word	0x40022300
 80044a0:	2400000c 	.word	0x2400000c
 80044a4:	053e2d63 	.word	0x053e2d63
 80044a8:	c3210000 	.word	0xc3210000
 80044ac:	cb840000 	.word	0xcb840000

080044b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fd3d 	bl	8002f3c <LL_ADC_IsEnabled>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d16e      	bne.n	80045a6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	4b38      	ldr	r3, [pc, #224]	@ (80045b0 <ADC_Enable+0x100>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044da:	f043 0210 	orr.w	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e05a      	b.n	80045a8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fd0c 	bl	8002f14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044fc:	f7fe fa50 	bl	80029a0 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2b      	ldr	r2, [pc, #172]	@ (80045b4 <ADC_Enable+0x104>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <ADC_Enable+0x66>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a29      	ldr	r2, [pc, #164]	@ (80045b8 <ADC_Enable+0x108>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <ADC_Enable+0x6a>
 8004516:	4b29      	ldr	r3, [pc, #164]	@ (80045bc <ADC_Enable+0x10c>)
 8004518:	e000      	b.n	800451c <ADC_Enable+0x6c>
 800451a:	4b29      	ldr	r3, [pc, #164]	@ (80045c0 <ADC_Enable+0x110>)
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe fc8f 	bl	8002e40 <LL_ADC_GetMultimode>
 8004522:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a23      	ldr	r2, [pc, #140]	@ (80045b8 <ADC_Enable+0x108>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d002      	beq.n	8004534 <ADC_Enable+0x84>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	e000      	b.n	8004536 <ADC_Enable+0x86>
 8004534:	4b1f      	ldr	r3, [pc, #124]	@ (80045b4 <ADC_Enable+0x104>)
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	4293      	cmp	r3, r2
 800453c:	d02c      	beq.n	8004598 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d130      	bne.n	80045a6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004544:	e028      	b.n	8004598 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fcf6 	bl	8002f3c <LL_ADC_IsEnabled>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fcda 	bl	8002f14 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004560:	f7fe fa1e 	bl	80029a0 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d914      	bls.n	8004598 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b01      	cmp	r3, #1
 800457a:	d00d      	beq.n	8004598 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004580:	f043 0210 	orr.w	r2, r3, #16
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e007      	b.n	80045a8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d1cf      	bne.n	8004546 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	8000003f 	.word	0x8000003f
 80045b4:	40022000 	.word	0x40022000
 80045b8:	40022100 	.word	0x40022100
 80045bc:	40022300 	.word	0x40022300
 80045c0:	58026300 	.word	0x58026300

080045c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d14b      	bne.n	8004676 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d021      	beq.n	800463c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fb25 	bl	8002c4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d032      	beq.n	800466e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d12b      	bne.n	800466e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11f      	bne.n	800466e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	661a      	str	r2, [r3, #96]	@ 0x60
 800463a:	e018      	b.n	800466e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d111      	bne.n	800466e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d105      	bne.n	800466e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7fc ff7a 	bl	8001568 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004674:	e00e      	b.n	8004694 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff f9da 	bl	8003a3c <HAL_ADC_ErrorCallback>
}
 8004688:	e004      	b.n	8004694 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4798      	blx	r3
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff f9b2 	bl	8003a14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046d6:	f043 0204 	orr.w	r2, r3, #4
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff f9ac 	bl	8003a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a6c      	ldr	r2, [pc, #432]	@ (80048ac <ADC_ConfigureBoostMode+0x1c0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <ADC_ConfigureBoostMode+0x1c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a6b      	ldr	r2, [pc, #428]	@ (80048b0 <ADC_ConfigureBoostMode+0x1c4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d109      	bne.n	800471c <ADC_ConfigureBoostMode+0x30>
 8004708:	4b6a      	ldr	r3, [pc, #424]	@ (80048b4 <ADC_ConfigureBoostMode+0x1c8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e008      	b.n	800472e <ADC_ConfigureBoostMode+0x42>
 800471c:	4b66      	ldr	r3, [pc, #408]	@ (80048b8 <ADC_ConfigureBoostMode+0x1cc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01c      	beq.n	800476c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004732:	f004 ff11 	bl	8009558 <HAL_RCC_GetHCLKFreq>
 8004736:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004740:	d010      	beq.n	8004764 <ADC_ConfigureBoostMode+0x78>
 8004742:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004746:	d873      	bhi.n	8004830 <ADC_ConfigureBoostMode+0x144>
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474c:	d002      	beq.n	8004754 <ADC_ConfigureBoostMode+0x68>
 800474e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004752:	d16d      	bne.n	8004830 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	60fb      	str	r3, [r7, #12]
        break;
 8004762:	e068      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	60fb      	str	r3, [r7, #12]
        break;
 800476a:	e064      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800476c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	f006 f8ec 	bl	800a950 <HAL_RCCEx_GetPeriphCLKFreq>
 8004778:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004782:	d051      	beq.n	8004828 <ADC_ConfigureBoostMode+0x13c>
 8004784:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004788:	d854      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 800478a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800478e:	d047      	beq.n	8004820 <ADC_ConfigureBoostMode+0x134>
 8004790:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004794:	d84e      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 8004796:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800479a:	d03d      	beq.n	8004818 <ADC_ConfigureBoostMode+0x12c>
 800479c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047a0:	d848      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 80047a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047a6:	d033      	beq.n	8004810 <ADC_ConfigureBoostMode+0x124>
 80047a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ac:	d842      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 80047ae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047b2:	d029      	beq.n	8004808 <ADC_ConfigureBoostMode+0x11c>
 80047b4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047b8:	d83c      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 80047ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047be:	d01a      	beq.n	80047f6 <ADC_ConfigureBoostMode+0x10a>
 80047c0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047c4:	d836      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 80047c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047ca:	d014      	beq.n	80047f6 <ADC_ConfigureBoostMode+0x10a>
 80047cc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047d0:	d830      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 80047d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d6:	d00e      	beq.n	80047f6 <ADC_ConfigureBoostMode+0x10a>
 80047d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047dc:	d82a      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 80047de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047e2:	d008      	beq.n	80047f6 <ADC_ConfigureBoostMode+0x10a>
 80047e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047e8:	d824      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x148>
 80047ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047ee:	d002      	beq.n	80047f6 <ADC_ConfigureBoostMode+0x10a>
 80047f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047f4:	d11e      	bne.n	8004834 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	0c9b      	lsrs	r3, r3, #18
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	60fb      	str	r3, [r7, #12]
        break;
 8004806:	e016      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
        break;
 800480e:	e012      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	60fb      	str	r3, [r7, #12]
        break;
 8004816:	e00e      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	60fb      	str	r3, [r7, #12]
        break;
 800481e:	e00a      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	09db      	lsrs	r3, r3, #7
 8004824:	60fb      	str	r3, [r7, #12]
        break;
 8004826:	e006      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	60fb      	str	r3, [r7, #12]
        break;
 800482e:	e002      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004834:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <ADC_ConfigureBoostMode+0x1d0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d808      	bhi.n	8004856 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004852:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004854:	e025      	b.n	80048a2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a19      	ldr	r2, [pc, #100]	@ (80048c0 <ADC_ConfigureBoostMode+0x1d4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d80a      	bhi.n	8004874 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004870:	609a      	str	r2, [r3, #8]
}
 8004872:	e016      	b.n	80048a2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a13      	ldr	r2, [pc, #76]	@ (80048c4 <ADC_ConfigureBoostMode+0x1d8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d80a      	bhi.n	8004892 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	e007      	b.n	80048a2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80048a0:	609a      	str	r2, [r3, #8]
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40022000 	.word	0x40022000
 80048b0:	40022100 	.word	0x40022100
 80048b4:	40022300 	.word	0x40022300
 80048b8:	58026300 	.word	0x58026300
 80048bc:	005f5e10 	.word	0x005f5e10
 80048c0:	00bebc20 	.word	0x00bebc20
 80048c4:	017d7840 	.word	0x017d7840

080048c8 <LL_ADC_IsEnabled>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <LL_ADC_IsEnabled+0x18>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <LL_ADC_IsEnabled+0x1a>
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <LL_ADC_REG_IsConversionOngoing>:
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d101      	bne.n	8004906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	b0a3      	sub	sp, #140	@ 0x8c
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004992:	2302      	movs	r3, #2
 8004994:	e0c1      	b.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800499e:	2300      	movs	r3, #0
 80049a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d102      	bne.n	80049b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e001      	b.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0a0      	b.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ff87 	bl	80048ee <LL_ADC_REG_IsConversionOngoing>
 80049e0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ff80 	bl	80048ee <LL_ADC_REG_IsConversionOngoing>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 8081 	bne.w	8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d17c      	bne.n	8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a48      	ldr	r2, [pc, #288]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a46      	ldr	r2, [pc, #280]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a12:	4b46      	ldr	r3, [pc, #280]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a14:	e000      	b.n	8004a18 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004a16:	4b46      	ldr	r3, [pc, #280]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a18:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d039      	beq.n	8004a96 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3a      	ldr	r2, [pc, #232]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a39      	ldr	r2, [pc, #228]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10e      	bne.n	8004a66 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a48:	4836      	ldr	r0, [pc, #216]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a4a:	f7ff ff3d 	bl	80048c8 <LL_ADC_IsEnabled>
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4835      	ldr	r0, [pc, #212]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a52:	f7ff ff39 	bl	80048c8 <LL_ADC_IsEnabled>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4323      	orrs	r3, r4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e008      	b.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a66:	4833      	ldr	r0, [pc, #204]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a68:	f7ff ff2e 	bl	80048c8 <LL_ADC_IsEnabled>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d047      	beq.n	8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	4b2d      	ldr	r3, [pc, #180]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	6811      	ldr	r1, [r2, #0]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	6892      	ldr	r2, [r2, #8]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a92:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a94:	e03a      	b.n	8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10e      	bne.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004ab6:	481b      	ldr	r0, [pc, #108]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ab8:	f7ff ff06 	bl	80048c8 <LL_ADC_IsEnabled>
 8004abc:	4604      	mov	r4, r0
 8004abe:	481a      	ldr	r0, [pc, #104]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ac0:	f7ff ff02 	bl	80048c8 <LL_ADC_IsEnabled>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4323      	orrs	r3, r4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e008      	b.n	8004ae6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ad4:	4817      	ldr	r0, [pc, #92]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ad6:	f7ff fef7 	bl	80048c8 <LL_ADC_IsEnabled>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d010      	beq.n	8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004aea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004af4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004af6:	e009      	b.n	8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004b0a:	e000      	b.n	8004b0e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b16:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	378c      	adds	r7, #140	@ 0x8c
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd90      	pop	{r4, r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40022000 	.word	0x40022000
 8004b28:	40022100 	.word	0x40022100
 8004b2c:	40022300 	.word	0x40022300
 8004b30:	58026300 	.word	0x58026300
 8004b34:	58026000 	.word	0x58026000
 8004b38:	fffff0e0 	.word	0xfffff0e0

08004b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <__NVIC_SetPriorityGrouping+0x40>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b6a:	4a04      	ldr	r2, [pc, #16]	@ (8004b7c <__NVIC_SetPriorityGrouping+0x40>)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	60d3      	str	r3, [r2, #12]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000ed00 	.word	0xe000ed00
 8004b80:	05fa0000 	.word	0x05fa0000

08004b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b88:	4b04      	ldr	r3, [pc, #16]	@ (8004b9c <__NVIC_GetPriorityGrouping+0x18>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	f003 0307 	and.w	r3, r3, #7
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db0b      	blt.n	8004bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	f003 021f 	and.w	r2, r3, #31
 8004bb8:	4907      	ldr	r1, [pc, #28]	@ (8004bd8 <__NVIC_EnableIRQ+0x38>)
 8004bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e100 	.word	0xe000e100

08004bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db0a      	blt.n	8004c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	490c      	ldr	r1, [pc, #48]	@ (8004c28 <__NVIC_SetPriority+0x4c>)
 8004bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c04:	e00a      	b.n	8004c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4908      	ldr	r1, [pc, #32]	@ (8004c2c <__NVIC_SetPriority+0x50>)
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	3b04      	subs	r3, #4
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	440b      	add	r3, r1
 8004c1a:	761a      	strb	r2, [r3, #24]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	@ 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f1c3 0307 	rsb	r3, r3, #7
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	bf28      	it	cs
 8004c4e:	2304      	movcs	r3, #4
 8004c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d902      	bls.n	8004c60 <NVIC_EncodePriority+0x30>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3b03      	subs	r3, #3
 8004c5e:	e000      	b.n	8004c62 <NVIC_EncodePriority+0x32>
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	401a      	ands	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c78:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	43d9      	mvns	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c88:	4313      	orrs	r3, r2
         );
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3724      	adds	r7, #36	@ 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ca8:	d301      	bcc.n	8004cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00f      	b.n	8004cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cae:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd8 <SysTick_Config+0x40>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cb6:	210f      	movs	r1, #15
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	f7ff ff8e 	bl	8004bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc0:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <SysTick_Config+0x40>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cc6:	4b04      	ldr	r3, [pc, #16]	@ (8004cd8 <SysTick_Config+0x40>)
 8004cc8:	2207      	movs	r2, #7
 8004cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	e000e010 	.word	0xe000e010

08004cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ff29 	bl	8004b3c <__NVIC_SetPriorityGrouping>
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d00:	f7ff ff40 	bl	8004b84 <__NVIC_GetPriorityGrouping>
 8004d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	f7ff ff90 	bl	8004c30 <NVIC_EncodePriority>
 8004d10:	4602      	mov	r2, r0
 8004d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ff5f 	bl	8004bdc <__NVIC_SetPriority>
}
 8004d1e:	bf00      	nop
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff33 	bl	8004ba0 <__NVIC_EnableIRQ>
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff ffa4 	bl	8004c98 <SysTick_Config>
 8004d50:	4603      	mov	r3, r0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d64:	f7fd fe1c 	bl	80029a0 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e312      	b.n	800539a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a66      	ldr	r2, [pc, #408]	@ (8004f14 <HAL_DMA_Init+0x1b8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d04a      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a65      	ldr	r2, [pc, #404]	@ (8004f18 <HAL_DMA_Init+0x1bc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d045      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a63      	ldr	r2, [pc, #396]	@ (8004f1c <HAL_DMA_Init+0x1c0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d040      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a62      	ldr	r2, [pc, #392]	@ (8004f20 <HAL_DMA_Init+0x1c4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d03b      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a60      	ldr	r2, [pc, #384]	@ (8004f24 <HAL_DMA_Init+0x1c8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d036      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a5f      	ldr	r2, [pc, #380]	@ (8004f28 <HAL_DMA_Init+0x1cc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d031      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5d      	ldr	r2, [pc, #372]	@ (8004f2c <HAL_DMA_Init+0x1d0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02c      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5c      	ldr	r2, [pc, #368]	@ (8004f30 <HAL_DMA_Init+0x1d4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d027      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f34 <HAL_DMA_Init+0x1d8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a59      	ldr	r2, [pc, #356]	@ (8004f38 <HAL_DMA_Init+0x1dc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d01d      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a57      	ldr	r2, [pc, #348]	@ (8004f3c <HAL_DMA_Init+0x1e0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a56      	ldr	r2, [pc, #344]	@ (8004f40 <HAL_DMA_Init+0x1e4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a54      	ldr	r2, [pc, #336]	@ (8004f44 <HAL_DMA_Init+0x1e8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a53      	ldr	r2, [pc, #332]	@ (8004f48 <HAL_DMA_Init+0x1ec>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a51      	ldr	r2, [pc, #324]	@ (8004f4c <HAL_DMA_Init+0x1f0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_DMA_Init+0xb8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a50      	ldr	r2, [pc, #320]	@ (8004f50 <HAL_DMA_Init+0x1f4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_DMA_Init+0xbc>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <HAL_DMA_Init+0xbe>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 813c 	beq.w	8005098 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a37      	ldr	r2, [pc, #220]	@ (8004f14 <HAL_DMA_Init+0x1b8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d04a      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a36      	ldr	r2, [pc, #216]	@ (8004f18 <HAL_DMA_Init+0x1bc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d045      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a34      	ldr	r2, [pc, #208]	@ (8004f1c <HAL_DMA_Init+0x1c0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d040      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a33      	ldr	r2, [pc, #204]	@ (8004f20 <HAL_DMA_Init+0x1c4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d03b      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a31      	ldr	r2, [pc, #196]	@ (8004f24 <HAL_DMA_Init+0x1c8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d036      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a30      	ldr	r2, [pc, #192]	@ (8004f28 <HAL_DMA_Init+0x1cc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d031      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2e      	ldr	r2, [pc, #184]	@ (8004f2c <HAL_DMA_Init+0x1d0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d02c      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f30 <HAL_DMA_Init+0x1d4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d027      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2b      	ldr	r2, [pc, #172]	@ (8004f34 <HAL_DMA_Init+0x1d8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d022      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f38 <HAL_DMA_Init+0x1dc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d01d      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a28      	ldr	r2, [pc, #160]	@ (8004f3c <HAL_DMA_Init+0x1e0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d018      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a27      	ldr	r2, [pc, #156]	@ (8004f40 <HAL_DMA_Init+0x1e4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a25      	ldr	r2, [pc, #148]	@ (8004f44 <HAL_DMA_Init+0x1e8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a24      	ldr	r2, [pc, #144]	@ (8004f48 <HAL_DMA_Init+0x1ec>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a22      	ldr	r2, [pc, #136]	@ (8004f4c <HAL_DMA_Init+0x1f0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_DMA_Init+0x174>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a21      	ldr	r2, [pc, #132]	@ (8004f50 <HAL_DMA_Init+0x1f4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d108      	bne.n	8004ee2 <HAL_DMA_Init+0x186>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e007      	b.n	8004ef2 <HAL_DMA_Init+0x196>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ef2:	e02f      	b.n	8004f54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ef4:	f7fd fd54 	bl	80029a0 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b05      	cmp	r3, #5
 8004f00:	d928      	bls.n	8004f54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e242      	b.n	800539a <HAL_DMA_Init+0x63e>
 8004f14:	40020010 	.word	0x40020010
 8004f18:	40020028 	.word	0x40020028
 8004f1c:	40020040 	.word	0x40020040
 8004f20:	40020058 	.word	0x40020058
 8004f24:	40020070 	.word	0x40020070
 8004f28:	40020088 	.word	0x40020088
 8004f2c:	400200a0 	.word	0x400200a0
 8004f30:	400200b8 	.word	0x400200b8
 8004f34:	40020410 	.word	0x40020410
 8004f38:	40020428 	.word	0x40020428
 8004f3c:	40020440 	.word	0x40020440
 8004f40:	40020458 	.word	0x40020458
 8004f44:	40020470 	.word	0x40020470
 8004f48:	40020488 	.word	0x40020488
 8004f4c:	400204a0 	.word	0x400204a0
 8004f50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1c8      	bne.n	8004ef4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4b83      	ldr	r3, [pc, #524]	@ (800517c <HAL_DMA_Init+0x420>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d107      	bne.n	8004fb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b28      	cmp	r3, #40	@ 0x28
 8004fbe:	d903      	bls.n	8004fc8 <HAL_DMA_Init+0x26c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fc6:	d91f      	bls.n	8005008 <HAL_DMA_Init+0x2ac>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fce:	d903      	bls.n	8004fd8 <HAL_DMA_Init+0x27c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b42      	cmp	r3, #66	@ 0x42
 8004fd6:	d917      	bls.n	8005008 <HAL_DMA_Init+0x2ac>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b46      	cmp	r3, #70	@ 0x46
 8004fde:	d903      	bls.n	8004fe8 <HAL_DMA_Init+0x28c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b48      	cmp	r3, #72	@ 0x48
 8004fe6:	d90f      	bls.n	8005008 <HAL_DMA_Init+0x2ac>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b4e      	cmp	r3, #78	@ 0x4e
 8004fee:	d903      	bls.n	8004ff8 <HAL_DMA_Init+0x29c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b52      	cmp	r3, #82	@ 0x52
 8004ff6:	d907      	bls.n	8005008 <HAL_DMA_Init+0x2ac>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b73      	cmp	r3, #115	@ 0x73
 8004ffe:	d905      	bls.n	800500c <HAL_DMA_Init+0x2b0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b77      	cmp	r3, #119	@ 0x77
 8005006:	d801      	bhi.n	800500c <HAL_DMA_Init+0x2b0>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_DMA_Init+0x2b2>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005018:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	2b04      	cmp	r3, #4
 8005042:	d117      	bne.n	8005074 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00e      	beq.n	8005074 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 fdca 	bl	8006bf0 <DMA_CheckFifoParam>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2240      	movs	r2, #64	@ 0x40
 8005066:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e192      	b.n	800539a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 fd05 	bl	8006a8c <DMA_CalcBaseAndBitshift>
 8005082:	4603      	mov	r3, r0
 8005084:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	223f      	movs	r2, #63	@ 0x3f
 8005090:	409a      	lsls	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	609a      	str	r2, [r3, #8]
 8005096:	e0c8      	b.n	800522a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a38      	ldr	r2, [pc, #224]	@ (8005180 <HAL_DMA_Init+0x424>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d022      	beq.n	80050e8 <HAL_DMA_Init+0x38c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a37      	ldr	r2, [pc, #220]	@ (8005184 <HAL_DMA_Init+0x428>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d01d      	beq.n	80050e8 <HAL_DMA_Init+0x38c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a35      	ldr	r2, [pc, #212]	@ (8005188 <HAL_DMA_Init+0x42c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <HAL_DMA_Init+0x38c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a34      	ldr	r2, [pc, #208]	@ (800518c <HAL_DMA_Init+0x430>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_DMA_Init+0x38c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a32      	ldr	r2, [pc, #200]	@ (8005190 <HAL_DMA_Init+0x434>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_DMA_Init+0x38c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a31      	ldr	r2, [pc, #196]	@ (8005194 <HAL_DMA_Init+0x438>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_DMA_Init+0x38c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005198 <HAL_DMA_Init+0x43c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_DMA_Init+0x38c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2e      	ldr	r2, [pc, #184]	@ (800519c <HAL_DMA_Init+0x440>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <HAL_DMA_Init+0x390>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_DMA_Init+0x392>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8092 	beq.w	8005218 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a21      	ldr	r2, [pc, #132]	@ (8005180 <HAL_DMA_Init+0x424>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d021      	beq.n	8005142 <HAL_DMA_Init+0x3e6>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a20      	ldr	r2, [pc, #128]	@ (8005184 <HAL_DMA_Init+0x428>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d01c      	beq.n	8005142 <HAL_DMA_Init+0x3e6>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_DMA_Init+0x42c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d017      	beq.n	8005142 <HAL_DMA_Init+0x3e6>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1d      	ldr	r2, [pc, #116]	@ (800518c <HAL_DMA_Init+0x430>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d012      	beq.n	8005142 <HAL_DMA_Init+0x3e6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <HAL_DMA_Init+0x434>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00d      	beq.n	8005142 <HAL_DMA_Init+0x3e6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1a      	ldr	r2, [pc, #104]	@ (8005194 <HAL_DMA_Init+0x438>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d008      	beq.n	8005142 <HAL_DMA_Init+0x3e6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a18      	ldr	r2, [pc, #96]	@ (8005198 <HAL_DMA_Init+0x43c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <HAL_DMA_Init+0x3e6>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a17      	ldr	r2, [pc, #92]	@ (800519c <HAL_DMA_Init+0x440>)
 8005140:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4b10      	ldr	r3, [pc, #64]	@ (80051a0 <HAL_DMA_Init+0x444>)
 800515e:	4013      	ands	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b40      	cmp	r3, #64	@ 0x40
 8005168:	d01c      	beq.n	80051a4 <HAL_DMA_Init+0x448>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b80      	cmp	r3, #128	@ 0x80
 8005170:	d102      	bne.n	8005178 <HAL_DMA_Init+0x41c>
 8005172:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005176:	e016      	b.n	80051a6 <HAL_DMA_Init+0x44a>
 8005178:	2300      	movs	r3, #0
 800517a:	e014      	b.n	80051a6 <HAL_DMA_Init+0x44a>
 800517c:	fe10803f 	.word	0xfe10803f
 8005180:	58025408 	.word	0x58025408
 8005184:	5802541c 	.word	0x5802541c
 8005188:	58025430 	.word	0x58025430
 800518c:	58025444 	.word	0x58025444
 8005190:	58025458 	.word	0x58025458
 8005194:	5802546c 	.word	0x5802546c
 8005198:	58025480 	.word	0x58025480
 800519c:	58025494 	.word	0x58025494
 80051a0:	fffe000f 	.word	0xfffe000f
 80051a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68d2      	ldr	r2, [r2, #12]
 80051aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b6e      	ldr	r3, [pc, #440]	@ (80053a4 <HAL_DMA_Init+0x648>)
 80051ec:	4413      	add	r3, r2
 80051ee:	4a6e      	ldr	r2, [pc, #440]	@ (80053a8 <HAL_DMA_Init+0x64c>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 fc45 	bl	8006a8c <DMA_CalcBaseAndBitshift>
 8005202:	4603      	mov	r3, r0
 8005204:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520a:	f003 031f 	and.w	r3, r3, #31
 800520e:	2201      	movs	r2, #1
 8005210:	409a      	lsls	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	e008      	b.n	800522a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2240      	movs	r2, #64	@ 0x40
 800521c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2203      	movs	r2, #3
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e0b7      	b.n	800539a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5f      	ldr	r2, [pc, #380]	@ (80053ac <HAL_DMA_Init+0x650>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d072      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5d      	ldr	r2, [pc, #372]	@ (80053b0 <HAL_DMA_Init+0x654>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d06d      	beq.n	800531a <HAL_DMA_Init+0x5be>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5c      	ldr	r2, [pc, #368]	@ (80053b4 <HAL_DMA_Init+0x658>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d068      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a5a      	ldr	r2, [pc, #360]	@ (80053b8 <HAL_DMA_Init+0x65c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d063      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a59      	ldr	r2, [pc, #356]	@ (80053bc <HAL_DMA_Init+0x660>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d05e      	beq.n	800531a <HAL_DMA_Init+0x5be>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a57      	ldr	r2, [pc, #348]	@ (80053c0 <HAL_DMA_Init+0x664>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d059      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a56      	ldr	r2, [pc, #344]	@ (80053c4 <HAL_DMA_Init+0x668>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d054      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a54      	ldr	r2, [pc, #336]	@ (80053c8 <HAL_DMA_Init+0x66c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d04f      	beq.n	800531a <HAL_DMA_Init+0x5be>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a53      	ldr	r2, [pc, #332]	@ (80053cc <HAL_DMA_Init+0x670>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d04a      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a51      	ldr	r2, [pc, #324]	@ (80053d0 <HAL_DMA_Init+0x674>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d045      	beq.n	800531a <HAL_DMA_Init+0x5be>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a50      	ldr	r2, [pc, #320]	@ (80053d4 <HAL_DMA_Init+0x678>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d040      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a4e      	ldr	r2, [pc, #312]	@ (80053d8 <HAL_DMA_Init+0x67c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03b      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a4d      	ldr	r2, [pc, #308]	@ (80053dc <HAL_DMA_Init+0x680>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d036      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a4b      	ldr	r2, [pc, #300]	@ (80053e0 <HAL_DMA_Init+0x684>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a4a      	ldr	r2, [pc, #296]	@ (80053e4 <HAL_DMA_Init+0x688>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d02c      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a48      	ldr	r2, [pc, #288]	@ (80053e8 <HAL_DMA_Init+0x68c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a47      	ldr	r2, [pc, #284]	@ (80053ec <HAL_DMA_Init+0x690>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a45      	ldr	r2, [pc, #276]	@ (80053f0 <HAL_DMA_Init+0x694>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a44      	ldr	r2, [pc, #272]	@ (80053f4 <HAL_DMA_Init+0x698>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a42      	ldr	r2, [pc, #264]	@ (80053f8 <HAL_DMA_Init+0x69c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a41      	ldr	r2, [pc, #260]	@ (80053fc <HAL_DMA_Init+0x6a0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_Init+0x5be>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a3f      	ldr	r2, [pc, #252]	@ (8005400 <HAL_DMA_Init+0x6a4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a3e      	ldr	r2, [pc, #248]	@ (8005404 <HAL_DMA_Init+0x6a8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_DMA_Init+0x5be>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a3c      	ldr	r2, [pc, #240]	@ (8005408 <HAL_DMA_Init+0x6ac>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d101      	bne.n	800531e <HAL_DMA_Init+0x5c2>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_DMA_Init+0x5c4>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d032      	beq.n	800538a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 fcdf 	bl	8006ce8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b80      	cmp	r3, #128	@ 0x80
 8005330:	d102      	bne.n	8005338 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800534c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <HAL_DMA_Init+0x61c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d80c      	bhi.n	8005378 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fd5c 	bl	8006e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	e008      	b.n	800538a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	a7fdabf8 	.word	0xa7fdabf8
 80053a8:	cccccccd 	.word	0xcccccccd
 80053ac:	40020010 	.word	0x40020010
 80053b0:	40020028 	.word	0x40020028
 80053b4:	40020040 	.word	0x40020040
 80053b8:	40020058 	.word	0x40020058
 80053bc:	40020070 	.word	0x40020070
 80053c0:	40020088 	.word	0x40020088
 80053c4:	400200a0 	.word	0x400200a0
 80053c8:	400200b8 	.word	0x400200b8
 80053cc:	40020410 	.word	0x40020410
 80053d0:	40020428 	.word	0x40020428
 80053d4:	40020440 	.word	0x40020440
 80053d8:	40020458 	.word	0x40020458
 80053dc:	40020470 	.word	0x40020470
 80053e0:	40020488 	.word	0x40020488
 80053e4:	400204a0 	.word	0x400204a0
 80053e8:	400204b8 	.word	0x400204b8
 80053ec:	58025408 	.word	0x58025408
 80053f0:	5802541c 	.word	0x5802541c
 80053f4:	58025430 	.word	0x58025430
 80053f8:	58025444 	.word	0x58025444
 80053fc:	58025458 	.word	0x58025458
 8005400:	5802546c 	.word	0x5802546c
 8005404:	58025480 	.word	0x58025480
 8005408:	58025494 	.word	0x58025494

0800540c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e226      	b.n	8005876 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_DMA_Start_IT+0x2a>
 8005432:	2302      	movs	r3, #2
 8005434:	e21f      	b.n	8005876 <HAL_DMA_Start_IT+0x46a>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b01      	cmp	r3, #1
 8005448:	f040 820a 	bne.w	8005860 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a68      	ldr	r2, [pc, #416]	@ (8005600 <HAL_DMA_Start_IT+0x1f4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d04a      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a66      	ldr	r2, [pc, #408]	@ (8005604 <HAL_DMA_Start_IT+0x1f8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d045      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a65      	ldr	r2, [pc, #404]	@ (8005608 <HAL_DMA_Start_IT+0x1fc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d040      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a63      	ldr	r2, [pc, #396]	@ (800560c <HAL_DMA_Start_IT+0x200>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d03b      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a62      	ldr	r2, [pc, #392]	@ (8005610 <HAL_DMA_Start_IT+0x204>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d036      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a60      	ldr	r2, [pc, #384]	@ (8005614 <HAL_DMA_Start_IT+0x208>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d031      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a5f      	ldr	r2, [pc, #380]	@ (8005618 <HAL_DMA_Start_IT+0x20c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d02c      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a5d      	ldr	r2, [pc, #372]	@ (800561c <HAL_DMA_Start_IT+0x210>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d027      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005620 <HAL_DMA_Start_IT+0x214>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d022      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a5a      	ldr	r2, [pc, #360]	@ (8005624 <HAL_DMA_Start_IT+0x218>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01d      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a59      	ldr	r2, [pc, #356]	@ (8005628 <HAL_DMA_Start_IT+0x21c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d018      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a57      	ldr	r2, [pc, #348]	@ (800562c <HAL_DMA_Start_IT+0x220>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a56      	ldr	r2, [pc, #344]	@ (8005630 <HAL_DMA_Start_IT+0x224>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a54      	ldr	r2, [pc, #336]	@ (8005634 <HAL_DMA_Start_IT+0x228>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a53      	ldr	r2, [pc, #332]	@ (8005638 <HAL_DMA_Start_IT+0x22c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_DMA_Start_IT+0xee>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a51      	ldr	r2, [pc, #324]	@ (800563c <HAL_DMA_Start_IT+0x230>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d108      	bne.n	800550c <HAL_DMA_Start_IT+0x100>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e007      	b.n	800551c <HAL_DMA_Start_IT+0x110>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f001 f906 	bl	8006734 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a34      	ldr	r2, [pc, #208]	@ (8005600 <HAL_DMA_Start_IT+0x1f4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d04a      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a33      	ldr	r2, [pc, #204]	@ (8005604 <HAL_DMA_Start_IT+0x1f8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d045      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a31      	ldr	r2, [pc, #196]	@ (8005608 <HAL_DMA_Start_IT+0x1fc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d040      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a30      	ldr	r2, [pc, #192]	@ (800560c <HAL_DMA_Start_IT+0x200>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d03b      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2e      	ldr	r2, [pc, #184]	@ (8005610 <HAL_DMA_Start_IT+0x204>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d036      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2d      	ldr	r2, [pc, #180]	@ (8005614 <HAL_DMA_Start_IT+0x208>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d031      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2b      	ldr	r2, [pc, #172]	@ (8005618 <HAL_DMA_Start_IT+0x20c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d02c      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2a      	ldr	r2, [pc, #168]	@ (800561c <HAL_DMA_Start_IT+0x210>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d027      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a28      	ldr	r2, [pc, #160]	@ (8005620 <HAL_DMA_Start_IT+0x214>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d022      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a27      	ldr	r2, [pc, #156]	@ (8005624 <HAL_DMA_Start_IT+0x218>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d01d      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a25      	ldr	r2, [pc, #148]	@ (8005628 <HAL_DMA_Start_IT+0x21c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d018      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a24      	ldr	r2, [pc, #144]	@ (800562c <HAL_DMA_Start_IT+0x220>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a22      	ldr	r2, [pc, #136]	@ (8005630 <HAL_DMA_Start_IT+0x224>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00e      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <HAL_DMA_Start_IT+0x228>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005638 <HAL_DMA_Start_IT+0x22c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_DMA_Start_IT+0x1bc>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1e      	ldr	r2, [pc, #120]	@ (800563c <HAL_DMA_Start_IT+0x230>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d101      	bne.n	80055cc <HAL_DMA_Start_IT+0x1c0>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_DMA_Start_IT+0x1c2>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d036      	beq.n	8005640 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 021e 	bic.w	r2, r3, #30
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0216 	orr.w	r2, r2, #22
 80055e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d03e      	beq.n	800566c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0208 	orr.w	r2, r2, #8
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e035      	b.n	800566c <HAL_DMA_Start_IT+0x260>
 8005600:	40020010 	.word	0x40020010
 8005604:	40020028 	.word	0x40020028
 8005608:	40020040 	.word	0x40020040
 800560c:	40020058 	.word	0x40020058
 8005610:	40020070 	.word	0x40020070
 8005614:	40020088 	.word	0x40020088
 8005618:	400200a0 	.word	0x400200a0
 800561c:	400200b8 	.word	0x400200b8
 8005620:	40020410 	.word	0x40020410
 8005624:	40020428 	.word	0x40020428
 8005628:	40020440 	.word	0x40020440
 800562c:	40020458 	.word	0x40020458
 8005630:	40020470 	.word	0x40020470
 8005634:	40020488 	.word	0x40020488
 8005638:	400204a0 	.word	0x400204a0
 800563c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 020e 	bic.w	r2, r3, #14
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 020a 	orr.w	r2, r2, #10
 8005652:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0204 	orr.w	r2, r2, #4
 800566a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a83      	ldr	r2, [pc, #524]	@ (8005880 <HAL_DMA_Start_IT+0x474>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d072      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a82      	ldr	r2, [pc, #520]	@ (8005884 <HAL_DMA_Start_IT+0x478>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d06d      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a80      	ldr	r2, [pc, #512]	@ (8005888 <HAL_DMA_Start_IT+0x47c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d068      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a7f      	ldr	r2, [pc, #508]	@ (800588c <HAL_DMA_Start_IT+0x480>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d063      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a7d      	ldr	r2, [pc, #500]	@ (8005890 <HAL_DMA_Start_IT+0x484>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d05e      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005894 <HAL_DMA_Start_IT+0x488>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d059      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a7a      	ldr	r2, [pc, #488]	@ (8005898 <HAL_DMA_Start_IT+0x48c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d054      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a79      	ldr	r2, [pc, #484]	@ (800589c <HAL_DMA_Start_IT+0x490>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d04f      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a77      	ldr	r2, [pc, #476]	@ (80058a0 <HAL_DMA_Start_IT+0x494>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04a      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a76      	ldr	r2, [pc, #472]	@ (80058a4 <HAL_DMA_Start_IT+0x498>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d045      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a74      	ldr	r2, [pc, #464]	@ (80058a8 <HAL_DMA_Start_IT+0x49c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d040      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a73      	ldr	r2, [pc, #460]	@ (80058ac <HAL_DMA_Start_IT+0x4a0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d03b      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a71      	ldr	r2, [pc, #452]	@ (80058b0 <HAL_DMA_Start_IT+0x4a4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d036      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a70      	ldr	r2, [pc, #448]	@ (80058b4 <HAL_DMA_Start_IT+0x4a8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d031      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6e      	ldr	r2, [pc, #440]	@ (80058b8 <HAL_DMA_Start_IT+0x4ac>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02c      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a6d      	ldr	r2, [pc, #436]	@ (80058bc <HAL_DMA_Start_IT+0x4b0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d027      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a6b      	ldr	r2, [pc, #428]	@ (80058c0 <HAL_DMA_Start_IT+0x4b4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a6a      	ldr	r2, [pc, #424]	@ (80058c4 <HAL_DMA_Start_IT+0x4b8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a68      	ldr	r2, [pc, #416]	@ (80058c8 <HAL_DMA_Start_IT+0x4bc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a67      	ldr	r2, [pc, #412]	@ (80058cc <HAL_DMA_Start_IT+0x4c0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a65      	ldr	r2, [pc, #404]	@ (80058d0 <HAL_DMA_Start_IT+0x4c4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a64      	ldr	r2, [pc, #400]	@ (80058d4 <HAL_DMA_Start_IT+0x4c8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a62      	ldr	r2, [pc, #392]	@ (80058d8 <HAL_DMA_Start_IT+0x4cc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_DMA_Start_IT+0x350>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a61      	ldr	r2, [pc, #388]	@ (80058dc <HAL_DMA_Start_IT+0x4d0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <HAL_DMA_Start_IT+0x354>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_DMA_Start_IT+0x356>
 8005760:	2300      	movs	r3, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01a      	beq.n	800579c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005782:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800579a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a37      	ldr	r2, [pc, #220]	@ (8005880 <HAL_DMA_Start_IT+0x474>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d04a      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a36      	ldr	r2, [pc, #216]	@ (8005884 <HAL_DMA_Start_IT+0x478>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d045      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a34      	ldr	r2, [pc, #208]	@ (8005888 <HAL_DMA_Start_IT+0x47c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d040      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a33      	ldr	r2, [pc, #204]	@ (800588c <HAL_DMA_Start_IT+0x480>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d03b      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a31      	ldr	r2, [pc, #196]	@ (8005890 <HAL_DMA_Start_IT+0x484>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d036      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a30      	ldr	r2, [pc, #192]	@ (8005894 <HAL_DMA_Start_IT+0x488>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d031      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005898 <HAL_DMA_Start_IT+0x48c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d02c      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2d      	ldr	r2, [pc, #180]	@ (800589c <HAL_DMA_Start_IT+0x490>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d027      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2b      	ldr	r2, [pc, #172]	@ (80058a0 <HAL_DMA_Start_IT+0x494>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d022      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2a      	ldr	r2, [pc, #168]	@ (80058a4 <HAL_DMA_Start_IT+0x498>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d01d      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a28      	ldr	r2, [pc, #160]	@ (80058a8 <HAL_DMA_Start_IT+0x49c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d018      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a27      	ldr	r2, [pc, #156]	@ (80058ac <HAL_DMA_Start_IT+0x4a0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a25      	ldr	r2, [pc, #148]	@ (80058b0 <HAL_DMA_Start_IT+0x4a4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00e      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a24      	ldr	r2, [pc, #144]	@ (80058b4 <HAL_DMA_Start_IT+0x4a8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a22      	ldr	r2, [pc, #136]	@ (80058b8 <HAL_DMA_Start_IT+0x4ac>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_DMA_Start_IT+0x430>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a21      	ldr	r2, [pc, #132]	@ (80058bc <HAL_DMA_Start_IT+0x4b0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d108      	bne.n	800584e <HAL_DMA_Start_IT+0x442>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e012      	b.n	8005874 <HAL_DMA_Start_IT+0x468>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0201 	orr.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e009      	b.n	8005874 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005866:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40020010 	.word	0x40020010
 8005884:	40020028 	.word	0x40020028
 8005888:	40020040 	.word	0x40020040
 800588c:	40020058 	.word	0x40020058
 8005890:	40020070 	.word	0x40020070
 8005894:	40020088 	.word	0x40020088
 8005898:	400200a0 	.word	0x400200a0
 800589c:	400200b8 	.word	0x400200b8
 80058a0:	40020410 	.word	0x40020410
 80058a4:	40020428 	.word	0x40020428
 80058a8:	40020440 	.word	0x40020440
 80058ac:	40020458 	.word	0x40020458
 80058b0:	40020470 	.word	0x40020470
 80058b4:	40020488 	.word	0x40020488
 80058b8:	400204a0 	.word	0x400204a0
 80058bc:	400204b8 	.word	0x400204b8
 80058c0:	58025408 	.word	0x58025408
 80058c4:	5802541c 	.word	0x5802541c
 80058c8:	58025430 	.word	0x58025430
 80058cc:	58025444 	.word	0x58025444
 80058d0:	58025458 	.word	0x58025458
 80058d4:	5802546c 	.word	0x5802546c
 80058d8:	58025480 	.word	0x58025480
 80058dc:	58025494 	.word	0x58025494

080058e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	@ 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058ec:	4b67      	ldr	r3, [pc, #412]	@ (8005a8c <HAL_DMA_IRQHandler+0x1ac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a67      	ldr	r2, [pc, #412]	@ (8005a90 <HAL_DMA_IRQHandler+0x1b0>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	0a9b      	lsrs	r3, r3, #10
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005904:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a5f      	ldr	r2, [pc, #380]	@ (8005a94 <HAL_DMA_IRQHandler+0x1b4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d04a      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a5d      	ldr	r2, [pc, #372]	@ (8005a98 <HAL_DMA_IRQHandler+0x1b8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d045      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a5c      	ldr	r2, [pc, #368]	@ (8005a9c <HAL_DMA_IRQHandler+0x1bc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d040      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a5a      	ldr	r2, [pc, #360]	@ (8005aa0 <HAL_DMA_IRQHandler+0x1c0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d03b      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a59      	ldr	r2, [pc, #356]	@ (8005aa4 <HAL_DMA_IRQHandler+0x1c4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d036      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a57      	ldr	r2, [pc, #348]	@ (8005aa8 <HAL_DMA_IRQHandler+0x1c8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d031      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a56      	ldr	r2, [pc, #344]	@ (8005aac <HAL_DMA_IRQHandler+0x1cc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d02c      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a54      	ldr	r2, [pc, #336]	@ (8005ab0 <HAL_DMA_IRQHandler+0x1d0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d027      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a53      	ldr	r2, [pc, #332]	@ (8005ab4 <HAL_DMA_IRQHandler+0x1d4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d022      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a51      	ldr	r2, [pc, #324]	@ (8005ab8 <HAL_DMA_IRQHandler+0x1d8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a50      	ldr	r2, [pc, #320]	@ (8005abc <HAL_DMA_IRQHandler+0x1dc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d018      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4e      	ldr	r2, [pc, #312]	@ (8005ac0 <HAL_DMA_IRQHandler+0x1e0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a4d      	ldr	r2, [pc, #308]	@ (8005ac4 <HAL_DMA_IRQHandler+0x1e4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a4b      	ldr	r2, [pc, #300]	@ (8005ac8 <HAL_DMA_IRQHandler+0x1e8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a4a      	ldr	r2, [pc, #296]	@ (8005acc <HAL_DMA_IRQHandler+0x1ec>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xd2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a48      	ldr	r2, [pc, #288]	@ (8005ad0 <HAL_DMA_IRQHandler+0x1f0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_DMA_IRQHandler+0xd6>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_DMA_IRQHandler+0xd8>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 842b 	beq.w	8006214 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2208      	movs	r2, #8
 80059c8:	409a      	lsls	r2, r3
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80a2 	beq.w	8005b18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005a94 <HAL_DMA_IRQHandler+0x1b4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d04a      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005a98 <HAL_DMA_IRQHandler+0x1b8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d045      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2b      	ldr	r2, [pc, #172]	@ (8005a9c <HAL_DMA_IRQHandler+0x1bc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d040      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa0 <HAL_DMA_IRQHandler+0x1c0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d03b      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a28      	ldr	r2, [pc, #160]	@ (8005aa4 <HAL_DMA_IRQHandler+0x1c4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d036      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a27      	ldr	r2, [pc, #156]	@ (8005aa8 <HAL_DMA_IRQHandler+0x1c8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d031      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a25      	ldr	r2, [pc, #148]	@ (8005aac <HAL_DMA_IRQHandler+0x1cc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02c      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a24      	ldr	r2, [pc, #144]	@ (8005ab0 <HAL_DMA_IRQHandler+0x1d0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d027      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a22      	ldr	r2, [pc, #136]	@ (8005ab4 <HAL_DMA_IRQHandler+0x1d4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a21      	ldr	r2, [pc, #132]	@ (8005ab8 <HAL_DMA_IRQHandler+0x1d8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01d      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005abc <HAL_DMA_IRQHandler+0x1dc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac0 <HAL_DMA_IRQHandler+0x1e0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac4 <HAL_DMA_IRQHandler+0x1e4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac8 <HAL_DMA_IRQHandler+0x1e8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a19      	ldr	r2, [pc, #100]	@ (8005acc <HAL_DMA_IRQHandler+0x1ec>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x194>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a18      	ldr	r2, [pc, #96]	@ (8005ad0 <HAL_DMA_IRQHandler+0x1f0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d12f      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x1f4>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	e02e      	b.n	8005ae8 <HAL_DMA_IRQHandler+0x208>
 8005a8a:	bf00      	nop
 8005a8c:	2400000c 	.word	0x2400000c
 8005a90:	1b4e81b5 	.word	0x1b4e81b5
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d015      	beq.n	8005b18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0204 	bic.w	r2, r2, #4
 8005afa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	2208      	movs	r2, #8
 8005b06:	409a      	lsls	r2, r3
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b10:	f043 0201 	orr.w	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	fa22 f303 	lsr.w	r3, r2, r3
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d06e      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a69      	ldr	r2, [pc, #420]	@ (8005cd8 <HAL_DMA_IRQHandler+0x3f8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d04a      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a67      	ldr	r2, [pc, #412]	@ (8005cdc <HAL_DMA_IRQHandler+0x3fc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d045      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a66      	ldr	r2, [pc, #408]	@ (8005ce0 <HAL_DMA_IRQHandler+0x400>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d040      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a64      	ldr	r2, [pc, #400]	@ (8005ce4 <HAL_DMA_IRQHandler+0x404>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d03b      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a63      	ldr	r2, [pc, #396]	@ (8005ce8 <HAL_DMA_IRQHandler+0x408>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d036      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a61      	ldr	r2, [pc, #388]	@ (8005cec <HAL_DMA_IRQHandler+0x40c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d031      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a60      	ldr	r2, [pc, #384]	@ (8005cf0 <HAL_DMA_IRQHandler+0x410>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d02c      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5e      	ldr	r2, [pc, #376]	@ (8005cf4 <HAL_DMA_IRQHandler+0x414>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d027      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5d      	ldr	r2, [pc, #372]	@ (8005cf8 <HAL_DMA_IRQHandler+0x418>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a5b      	ldr	r2, [pc, #364]	@ (8005cfc <HAL_DMA_IRQHandler+0x41c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01d      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a5a      	ldr	r2, [pc, #360]	@ (8005d00 <HAL_DMA_IRQHandler+0x420>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a58      	ldr	r2, [pc, #352]	@ (8005d04 <HAL_DMA_IRQHandler+0x424>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a57      	ldr	r2, [pc, #348]	@ (8005d08 <HAL_DMA_IRQHandler+0x428>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a55      	ldr	r2, [pc, #340]	@ (8005d0c <HAL_DMA_IRQHandler+0x42c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a54      	ldr	r2, [pc, #336]	@ (8005d10 <HAL_DMA_IRQHandler+0x430>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_DMA_IRQHandler+0x2ee>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a52      	ldr	r2, [pc, #328]	@ (8005d14 <HAL_DMA_IRQHandler+0x434>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10a      	bne.n	8005be4 <HAL_DMA_IRQHandler+0x304>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e003      	b.n	8005bec <HAL_DMA_IRQHandler+0x30c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2300      	movs	r3, #0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00d      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c04:	f043 0202 	orr.w	r2, r3, #2
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2204      	movs	r2, #4
 8005c16:	409a      	lsls	r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 808f 	beq.w	8005d40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd8 <HAL_DMA_IRQHandler+0x3f8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d04a      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2a      	ldr	r2, [pc, #168]	@ (8005cdc <HAL_DMA_IRQHandler+0x3fc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d045      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a29      	ldr	r2, [pc, #164]	@ (8005ce0 <HAL_DMA_IRQHandler+0x400>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d040      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a27      	ldr	r2, [pc, #156]	@ (8005ce4 <HAL_DMA_IRQHandler+0x404>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d03b      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a26      	ldr	r2, [pc, #152]	@ (8005ce8 <HAL_DMA_IRQHandler+0x408>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d036      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a24      	ldr	r2, [pc, #144]	@ (8005cec <HAL_DMA_IRQHandler+0x40c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d031      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a23      	ldr	r2, [pc, #140]	@ (8005cf0 <HAL_DMA_IRQHandler+0x410>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d02c      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	@ (8005cf4 <HAL_DMA_IRQHandler+0x414>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d027      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a20      	ldr	r2, [pc, #128]	@ (8005cf8 <HAL_DMA_IRQHandler+0x418>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <HAL_DMA_IRQHandler+0x41c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01d      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <HAL_DMA_IRQHandler+0x420>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_DMA_IRQHandler+0x424>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <HAL_DMA_IRQHandler+0x428>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <HAL_DMA_IRQHandler+0x42c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	@ (8005d10 <HAL_DMA_IRQHandler+0x430>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x3e2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a15      	ldr	r2, [pc, #84]	@ (8005d14 <HAL_DMA_IRQHandler+0x434>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d12a      	bne.n	8005d18 <HAL_DMA_IRQHandler+0x438>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bf14      	ite	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e023      	b.n	8005d20 <HAL_DMA_IRQHandler+0x440>
 8005cd8:	40020010 	.word	0x40020010
 8005cdc:	40020028 	.word	0x40020028
 8005ce0:	40020040 	.word	0x40020040
 8005ce4:	40020058 	.word	0x40020058
 8005ce8:	40020070 	.word	0x40020070
 8005cec:	40020088 	.word	0x40020088
 8005cf0:	400200a0 	.word	0x400200a0
 8005cf4:	400200b8 	.word	0x400200b8
 8005cf8:	40020410 	.word	0x40020410
 8005cfc:	40020428 	.word	0x40020428
 8005d00:	40020440 	.word	0x40020440
 8005d04:	40020458 	.word	0x40020458
 8005d08:	40020470 	.word	0x40020470
 8005d0c:	40020488 	.word	0x40020488
 8005d10:	400204a0 	.word	0x400204a0
 8005d14:	400204b8 	.word	0x400204b8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00d      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d28:	f003 031f 	and.w	r3, r3, #31
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	409a      	lsls	r2, r3
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d38:	f043 0204 	orr.w	r2, r3, #4
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	2210      	movs	r2, #16
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 80a6 	beq.w	8005ea2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a85      	ldr	r2, [pc, #532]	@ (8005f70 <HAL_DMA_IRQHandler+0x690>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d04a      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a83      	ldr	r2, [pc, #524]	@ (8005f74 <HAL_DMA_IRQHandler+0x694>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d045      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a82      	ldr	r2, [pc, #520]	@ (8005f78 <HAL_DMA_IRQHandler+0x698>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d040      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a80      	ldr	r2, [pc, #512]	@ (8005f7c <HAL_DMA_IRQHandler+0x69c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d03b      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a7f      	ldr	r2, [pc, #508]	@ (8005f80 <HAL_DMA_IRQHandler+0x6a0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d036      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a7d      	ldr	r2, [pc, #500]	@ (8005f84 <HAL_DMA_IRQHandler+0x6a4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d031      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a7c      	ldr	r2, [pc, #496]	@ (8005f88 <HAL_DMA_IRQHandler+0x6a8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d02c      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a7a      	ldr	r2, [pc, #488]	@ (8005f8c <HAL_DMA_IRQHandler+0x6ac>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d027      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a79      	ldr	r2, [pc, #484]	@ (8005f90 <HAL_DMA_IRQHandler+0x6b0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a77      	ldr	r2, [pc, #476]	@ (8005f94 <HAL_DMA_IRQHandler+0x6b4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01d      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a76      	ldr	r2, [pc, #472]	@ (8005f98 <HAL_DMA_IRQHandler+0x6b8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a74      	ldr	r2, [pc, #464]	@ (8005f9c <HAL_DMA_IRQHandler+0x6bc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a73      	ldr	r2, [pc, #460]	@ (8005fa0 <HAL_DMA_IRQHandler+0x6c0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a71      	ldr	r2, [pc, #452]	@ (8005fa4 <HAL_DMA_IRQHandler+0x6c4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a70      	ldr	r2, [pc, #448]	@ (8005fa8 <HAL_DMA_IRQHandler+0x6c8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x516>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a6e      	ldr	r2, [pc, #440]	@ (8005fac <HAL_DMA_IRQHandler+0x6cc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10a      	bne.n	8005e0c <HAL_DMA_IRQHandler+0x52c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e009      	b.n	8005e20 <HAL_DMA_IRQHandler+0x540>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d03e      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d018      	beq.n	8005e74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d108      	bne.n	8005e62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d024      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
 8005e60:	e01f      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01b      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
 8005e72:	e016      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d107      	bne.n	8005e92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0208 	bic.w	r2, r2, #8
 8005e90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	2220      	movs	r2, #32
 8005eac:	409a      	lsls	r2, r3
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8110 	beq.w	80060d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8005f70 <HAL_DMA_IRQHandler+0x690>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d04a      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8005f74 <HAL_DMA_IRQHandler+0x694>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d045      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a29      	ldr	r2, [pc, #164]	@ (8005f78 <HAL_DMA_IRQHandler+0x698>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d040      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a28      	ldr	r2, [pc, #160]	@ (8005f7c <HAL_DMA_IRQHandler+0x69c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d03b      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a26      	ldr	r2, [pc, #152]	@ (8005f80 <HAL_DMA_IRQHandler+0x6a0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d036      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a25      	ldr	r2, [pc, #148]	@ (8005f84 <HAL_DMA_IRQHandler+0x6a4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d031      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a23      	ldr	r2, [pc, #140]	@ (8005f88 <HAL_DMA_IRQHandler+0x6a8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d02c      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a22      	ldr	r2, [pc, #136]	@ (8005f8c <HAL_DMA_IRQHandler+0x6ac>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d027      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a20      	ldr	r2, [pc, #128]	@ (8005f90 <HAL_DMA_IRQHandler+0x6b0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d022      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1f      	ldr	r2, [pc, #124]	@ (8005f94 <HAL_DMA_IRQHandler+0x6b4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d01d      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1d      	ldr	r2, [pc, #116]	@ (8005f98 <HAL_DMA_IRQHandler+0x6b8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d018      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f9c <HAL_DMA_IRQHandler+0x6bc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa0 <HAL_DMA_IRQHandler+0x6c0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a19      	ldr	r2, [pc, #100]	@ (8005fa4 <HAL_DMA_IRQHandler+0x6c4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d009      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <HAL_DMA_IRQHandler+0x6c8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x678>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <HAL_DMA_IRQHandler+0x6cc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d12b      	bne.n	8005fb0 <HAL_DMA_IRQHandler+0x6d0>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bf14      	ite	ne
 8005f66:	2301      	movne	r3, #1
 8005f68:	2300      	moveq	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	e02a      	b.n	8005fc4 <HAL_DMA_IRQHandler+0x6e4>
 8005f6e:	bf00      	nop
 8005f70:	40020010 	.word	0x40020010
 8005f74:	40020028 	.word	0x40020028
 8005f78:	40020040 	.word	0x40020040
 8005f7c:	40020058 	.word	0x40020058
 8005f80:	40020070 	.word	0x40020070
 8005f84:	40020088 	.word	0x40020088
 8005f88:	400200a0 	.word	0x400200a0
 8005f8c:	400200b8 	.word	0x400200b8
 8005f90:	40020410 	.word	0x40020410
 8005f94:	40020428 	.word	0x40020428
 8005f98:	40020440 	.word	0x40020440
 8005f9c:	40020458 	.word	0x40020458
 8005fa0:	40020470 	.word	0x40020470
 8005fa4:	40020488 	.word	0x40020488
 8005fa8:	400204a0 	.word	0x400204a0
 8005fac:	400204b8 	.word	0x400204b8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bf14      	ite	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	2300      	moveq	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8087 	beq.w	80060d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d139      	bne.n	800605a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0216 	bic.w	r2, r2, #22
 8005ff4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006004:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <HAL_DMA_IRQHandler+0x736>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0208 	bic.w	r2, r2, #8
 8006024:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	223f      	movs	r2, #63	@ 0x3f
 8006030:	409a      	lsls	r2, r3
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 834a 	beq.w	80066e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	4798      	blx	r3
          }
          return;
 8006058:	e344      	b.n	80066e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d018      	beq.n	800609a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d108      	bne.n	8006088 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	2b00      	cmp	r3, #0
 800607c:	d02c      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	4798      	blx	r3
 8006086:	e027      	b.n	80060d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d023      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
 8006098:	e01e      	b.n	80060d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10f      	bne.n	80060c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0210 	bic.w	r2, r2, #16
 80060b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8306 	beq.w	80066ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8088 	beq.w	8006200 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2204      	movs	r2, #4
 80060f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a7a      	ldr	r2, [pc, #488]	@ (80062e8 <HAL_DMA_IRQHandler+0xa08>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d04a      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a79      	ldr	r2, [pc, #484]	@ (80062ec <HAL_DMA_IRQHandler+0xa0c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d045      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a77      	ldr	r2, [pc, #476]	@ (80062f0 <HAL_DMA_IRQHandler+0xa10>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d040      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a76      	ldr	r2, [pc, #472]	@ (80062f4 <HAL_DMA_IRQHandler+0xa14>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d03b      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a74      	ldr	r2, [pc, #464]	@ (80062f8 <HAL_DMA_IRQHandler+0xa18>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d036      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a73      	ldr	r2, [pc, #460]	@ (80062fc <HAL_DMA_IRQHandler+0xa1c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d031      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a71      	ldr	r2, [pc, #452]	@ (8006300 <HAL_DMA_IRQHandler+0xa20>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d02c      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a70      	ldr	r2, [pc, #448]	@ (8006304 <HAL_DMA_IRQHandler+0xa24>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d027      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a6e      	ldr	r2, [pc, #440]	@ (8006308 <HAL_DMA_IRQHandler+0xa28>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d022      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a6d      	ldr	r2, [pc, #436]	@ (800630c <HAL_DMA_IRQHandler+0xa2c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d01d      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a6b      	ldr	r2, [pc, #428]	@ (8006310 <HAL_DMA_IRQHandler+0xa30>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d018      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a6a      	ldr	r2, [pc, #424]	@ (8006314 <HAL_DMA_IRQHandler+0xa34>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a68      	ldr	r2, [pc, #416]	@ (8006318 <HAL_DMA_IRQHandler+0xa38>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00e      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a67      	ldr	r2, [pc, #412]	@ (800631c <HAL_DMA_IRQHandler+0xa3c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d009      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a65      	ldr	r2, [pc, #404]	@ (8006320 <HAL_DMA_IRQHandler+0xa40>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_DMA_IRQHandler+0x8b8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a64      	ldr	r2, [pc, #400]	@ (8006324 <HAL_DMA_IRQHandler+0xa44>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d108      	bne.n	80061aa <HAL_DMA_IRQHandler+0x8ca>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e007      	b.n	80061ba <HAL_DMA_IRQHandler+0x8da>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3301      	adds	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d307      	bcc.n	80061d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f2      	bne.n	80061ba <HAL_DMA_IRQHandler+0x8da>
 80061d4:	e000      	b.n	80061d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80061d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2203      	movs	r2, #3
 80061ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80061ee:	e003      	b.n	80061f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8272 	beq.w	80066ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
 8006212:	e26c      	b.n	80066ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a43      	ldr	r2, [pc, #268]	@ (8006328 <HAL_DMA_IRQHandler+0xa48>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d022      	beq.n	8006264 <HAL_DMA_IRQHandler+0x984>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a42      	ldr	r2, [pc, #264]	@ (800632c <HAL_DMA_IRQHandler+0xa4c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d01d      	beq.n	8006264 <HAL_DMA_IRQHandler+0x984>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a40      	ldr	r2, [pc, #256]	@ (8006330 <HAL_DMA_IRQHandler+0xa50>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d018      	beq.n	8006264 <HAL_DMA_IRQHandler+0x984>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a3f      	ldr	r2, [pc, #252]	@ (8006334 <HAL_DMA_IRQHandler+0xa54>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d013      	beq.n	8006264 <HAL_DMA_IRQHandler+0x984>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a3d      	ldr	r2, [pc, #244]	@ (8006338 <HAL_DMA_IRQHandler+0xa58>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00e      	beq.n	8006264 <HAL_DMA_IRQHandler+0x984>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a3c      	ldr	r2, [pc, #240]	@ (800633c <HAL_DMA_IRQHandler+0xa5c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d009      	beq.n	8006264 <HAL_DMA_IRQHandler+0x984>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a3a      	ldr	r2, [pc, #232]	@ (8006340 <HAL_DMA_IRQHandler+0xa60>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_DMA_IRQHandler+0x984>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a39      	ldr	r2, [pc, #228]	@ (8006344 <HAL_DMA_IRQHandler+0xa64>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d101      	bne.n	8006268 <HAL_DMA_IRQHandler+0x988>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_DMA_IRQHandler+0x98a>
 8006268:	2300      	movs	r3, #0
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 823f 	beq.w	80066ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	2204      	movs	r2, #4
 8006282:	409a      	lsls	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4013      	ands	r3, r2
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80cd 	beq.w	8006428 <HAL_DMA_IRQHandler+0xb48>
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80c7 	beq.w	8006428 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	2204      	movs	r2, #4
 80062a4:	409a      	lsls	r2, r3
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d049      	beq.n	8006348 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8210 	beq.w	80066e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062d0:	e20a      	b.n	80066e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8206 	beq.w	80066e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e4:	e200      	b.n	80066e8 <HAL_DMA_IRQHandler+0xe08>
 80062e6:	bf00      	nop
 80062e8:	40020010 	.word	0x40020010
 80062ec:	40020028 	.word	0x40020028
 80062f0:	40020040 	.word	0x40020040
 80062f4:	40020058 	.word	0x40020058
 80062f8:	40020070 	.word	0x40020070
 80062fc:	40020088 	.word	0x40020088
 8006300:	400200a0 	.word	0x400200a0
 8006304:	400200b8 	.word	0x400200b8
 8006308:	40020410 	.word	0x40020410
 800630c:	40020428 	.word	0x40020428
 8006310:	40020440 	.word	0x40020440
 8006314:	40020458 	.word	0x40020458
 8006318:	40020470 	.word	0x40020470
 800631c:	40020488 	.word	0x40020488
 8006320:	400204a0 	.word	0x400204a0
 8006324:	400204b8 	.word	0x400204b8
 8006328:	58025408 	.word	0x58025408
 800632c:	5802541c 	.word	0x5802541c
 8006330:	58025430 	.word	0x58025430
 8006334:	58025444 	.word	0x58025444
 8006338:	58025458 	.word	0x58025458
 800633c:	5802546c 	.word	0x5802546c
 8006340:	58025480 	.word	0x58025480
 8006344:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d160      	bne.n	8006414 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a7f      	ldr	r2, [pc, #508]	@ (8006554 <HAL_DMA_IRQHandler+0xc74>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d04a      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a7d      	ldr	r2, [pc, #500]	@ (8006558 <HAL_DMA_IRQHandler+0xc78>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d045      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a7c      	ldr	r2, [pc, #496]	@ (800655c <HAL_DMA_IRQHandler+0xc7c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d040      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a7a      	ldr	r2, [pc, #488]	@ (8006560 <HAL_DMA_IRQHandler+0xc80>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d03b      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a79      	ldr	r2, [pc, #484]	@ (8006564 <HAL_DMA_IRQHandler+0xc84>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d036      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a77      	ldr	r2, [pc, #476]	@ (8006568 <HAL_DMA_IRQHandler+0xc88>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d031      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a76      	ldr	r2, [pc, #472]	@ (800656c <HAL_DMA_IRQHandler+0xc8c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d02c      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a74      	ldr	r2, [pc, #464]	@ (8006570 <HAL_DMA_IRQHandler+0xc90>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d027      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a73      	ldr	r2, [pc, #460]	@ (8006574 <HAL_DMA_IRQHandler+0xc94>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a71      	ldr	r2, [pc, #452]	@ (8006578 <HAL_DMA_IRQHandler+0xc98>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01d      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a70      	ldr	r2, [pc, #448]	@ (800657c <HAL_DMA_IRQHandler+0xc9c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006580 <HAL_DMA_IRQHandler+0xca0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006584 <HAL_DMA_IRQHandler+0xca4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006588 <HAL_DMA_IRQHandler+0xca8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a6a      	ldr	r2, [pc, #424]	@ (800658c <HAL_DMA_IRQHandler+0xcac>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xb12>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a68      	ldr	r2, [pc, #416]	@ (8006590 <HAL_DMA_IRQHandler+0xcb0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d108      	bne.n	8006404 <HAL_DMA_IRQHandler+0xb24>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0208 	bic.w	r2, r2, #8
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e007      	b.n	8006414 <HAL_DMA_IRQHandler+0xb34>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0204 	bic.w	r2, r2, #4
 8006412:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8165 	beq.w	80066e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006426:	e15f      	b.n	80066e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	2202      	movs	r2, #2
 8006432:	409a      	lsls	r2, r3
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	4013      	ands	r3, r2
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80c5 	beq.w	80065c8 <HAL_DMA_IRQHandler+0xce8>
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80bf 	beq.w	80065c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2202      	movs	r2, #2
 8006454:	409a      	lsls	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d018      	beq.n	8006496 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 813a 	beq.w	80066ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006480:	e134      	b.n	80066ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8130 	beq.w	80066ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006494:	e12a      	b.n	80066ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 8089 	bne.w	80065b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006554 <HAL_DMA_IRQHandler+0xc74>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d04a      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <HAL_DMA_IRQHandler+0xc78>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d045      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a28      	ldr	r2, [pc, #160]	@ (800655c <HAL_DMA_IRQHandler+0xc7c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d040      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a26      	ldr	r2, [pc, #152]	@ (8006560 <HAL_DMA_IRQHandler+0xc80>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d03b      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a25      	ldr	r2, [pc, #148]	@ (8006564 <HAL_DMA_IRQHandler+0xc84>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d036      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a23      	ldr	r2, [pc, #140]	@ (8006568 <HAL_DMA_IRQHandler+0xc88>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d031      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a22      	ldr	r2, [pc, #136]	@ (800656c <HAL_DMA_IRQHandler+0xc8c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d02c      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a20      	ldr	r2, [pc, #128]	@ (8006570 <HAL_DMA_IRQHandler+0xc90>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d027      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006574 <HAL_DMA_IRQHandler+0xc94>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d022      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1d      	ldr	r2, [pc, #116]	@ (8006578 <HAL_DMA_IRQHandler+0xc98>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01d      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1c      	ldr	r2, [pc, #112]	@ (800657c <HAL_DMA_IRQHandler+0xc9c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d018      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1a      	ldr	r2, [pc, #104]	@ (8006580 <HAL_DMA_IRQHandler+0xca0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a19      	ldr	r2, [pc, #100]	@ (8006584 <HAL_DMA_IRQHandler+0xca4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a17      	ldr	r2, [pc, #92]	@ (8006588 <HAL_DMA_IRQHandler+0xca8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a16      	ldr	r2, [pc, #88]	@ (800658c <HAL_DMA_IRQHandler+0xcac>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_DMA_IRQHandler+0xc62>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a14      	ldr	r2, [pc, #80]	@ (8006590 <HAL_DMA_IRQHandler+0xcb0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d128      	bne.n	8006594 <HAL_DMA_IRQHandler+0xcb4>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0214 	bic.w	r2, r2, #20
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e027      	b.n	80065a4 <HAL_DMA_IRQHandler+0xcc4>
 8006554:	40020010 	.word	0x40020010
 8006558:	40020028 	.word	0x40020028
 800655c:	40020040 	.word	0x40020040
 8006560:	40020058 	.word	0x40020058
 8006564:	40020070 	.word	0x40020070
 8006568:	40020088 	.word	0x40020088
 800656c:	400200a0 	.word	0x400200a0
 8006570:	400200b8 	.word	0x400200b8
 8006574:	40020410 	.word	0x40020410
 8006578:	40020428 	.word	0x40020428
 800657c:	40020440 	.word	0x40020440
 8006580:	40020458 	.word	0x40020458
 8006584:	40020470 	.word	0x40020470
 8006588:	40020488 	.word	0x40020488
 800658c:	400204a0 	.word	0x400204a0
 8006590:	400204b8 	.word	0x400204b8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 020a 	bic.w	r2, r2, #10
 80065a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8097 	beq.w	80066ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065c6:	e091      	b.n	80066ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	2208      	movs	r2, #8
 80065d2:	409a      	lsls	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8088 	beq.w	80066ee <HAL_DMA_IRQHandler+0xe0e>
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8082 	beq.w	80066ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a41      	ldr	r2, [pc, #260]	@ (80066f4 <HAL_DMA_IRQHandler+0xe14>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d04a      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a3f      	ldr	r2, [pc, #252]	@ (80066f8 <HAL_DMA_IRQHandler+0xe18>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d045      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a3e      	ldr	r2, [pc, #248]	@ (80066fc <HAL_DMA_IRQHandler+0xe1c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d040      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a3c      	ldr	r2, [pc, #240]	@ (8006700 <HAL_DMA_IRQHandler+0xe20>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d03b      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a3b      	ldr	r2, [pc, #236]	@ (8006704 <HAL_DMA_IRQHandler+0xe24>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d036      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a39      	ldr	r2, [pc, #228]	@ (8006708 <HAL_DMA_IRQHandler+0xe28>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d031      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a38      	ldr	r2, [pc, #224]	@ (800670c <HAL_DMA_IRQHandler+0xe2c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d02c      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a36      	ldr	r2, [pc, #216]	@ (8006710 <HAL_DMA_IRQHandler+0xe30>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d027      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a35      	ldr	r2, [pc, #212]	@ (8006714 <HAL_DMA_IRQHandler+0xe34>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d022      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a33      	ldr	r2, [pc, #204]	@ (8006718 <HAL_DMA_IRQHandler+0xe38>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01d      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a32      	ldr	r2, [pc, #200]	@ (800671c <HAL_DMA_IRQHandler+0xe3c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d018      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a30      	ldr	r2, [pc, #192]	@ (8006720 <HAL_DMA_IRQHandler+0xe40>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2f      	ldr	r2, [pc, #188]	@ (8006724 <HAL_DMA_IRQHandler+0xe44>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00e      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a2d      	ldr	r2, [pc, #180]	@ (8006728 <HAL_DMA_IRQHandler+0xe48>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d009      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2c      	ldr	r2, [pc, #176]	@ (800672c <HAL_DMA_IRQHandler+0xe4c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d004      	beq.n	800668a <HAL_DMA_IRQHandler+0xdaa>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2a      	ldr	r2, [pc, #168]	@ (8006730 <HAL_DMA_IRQHandler+0xe50>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <HAL_DMA_IRQHandler+0xdbc>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 021c 	bic.w	r2, r2, #28
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e007      	b.n	80066ac <HAL_DMA_IRQHandler+0xdcc>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 020e 	bic.w	r2, r2, #14
 80066aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	2201      	movs	r2, #1
 80066b6:	409a      	lsls	r2, r3
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
 80066e2:	e004      	b.n	80066ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80066e4:	bf00      	nop
 80066e6:	e002      	b.n	80066ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066ee:	3728      	adds	r7, #40	@ 0x28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40020010 	.word	0x40020010
 80066f8:	40020028 	.word	0x40020028
 80066fc:	40020040 	.word	0x40020040
 8006700:	40020058 	.word	0x40020058
 8006704:	40020070 	.word	0x40020070
 8006708:	40020088 	.word	0x40020088
 800670c:	400200a0 	.word	0x400200a0
 8006710:	400200b8 	.word	0x400200b8
 8006714:	40020410 	.word	0x40020410
 8006718:	40020428 	.word	0x40020428
 800671c:	40020440 	.word	0x40020440
 8006720:	40020458 	.word	0x40020458
 8006724:	40020470 	.word	0x40020470
 8006728:	40020488 	.word	0x40020488
 800672c:	400204a0 	.word	0x400204a0
 8006730:	400204b8 	.word	0x400204b8

08006734 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a7f      	ldr	r2, [pc, #508]	@ (8006950 <DMA_SetConfig+0x21c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d072      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a7d      	ldr	r2, [pc, #500]	@ (8006954 <DMA_SetConfig+0x220>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d06d      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a7c      	ldr	r2, [pc, #496]	@ (8006958 <DMA_SetConfig+0x224>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d068      	beq.n	800683e <DMA_SetConfig+0x10a>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a7a      	ldr	r2, [pc, #488]	@ (800695c <DMA_SetConfig+0x228>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d063      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a79      	ldr	r2, [pc, #484]	@ (8006960 <DMA_SetConfig+0x22c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d05e      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a77      	ldr	r2, [pc, #476]	@ (8006964 <DMA_SetConfig+0x230>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d059      	beq.n	800683e <DMA_SetConfig+0x10a>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a76      	ldr	r2, [pc, #472]	@ (8006968 <DMA_SetConfig+0x234>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d054      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a74      	ldr	r2, [pc, #464]	@ (800696c <DMA_SetConfig+0x238>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d04f      	beq.n	800683e <DMA_SetConfig+0x10a>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a73      	ldr	r2, [pc, #460]	@ (8006970 <DMA_SetConfig+0x23c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d04a      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a71      	ldr	r2, [pc, #452]	@ (8006974 <DMA_SetConfig+0x240>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d045      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a70      	ldr	r2, [pc, #448]	@ (8006978 <DMA_SetConfig+0x244>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d040      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a6e      	ldr	r2, [pc, #440]	@ (800697c <DMA_SetConfig+0x248>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d03b      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a6d      	ldr	r2, [pc, #436]	@ (8006980 <DMA_SetConfig+0x24c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d036      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a6b      	ldr	r2, [pc, #428]	@ (8006984 <DMA_SetConfig+0x250>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d031      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a6a      	ldr	r2, [pc, #424]	@ (8006988 <DMA_SetConfig+0x254>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d02c      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a68      	ldr	r2, [pc, #416]	@ (800698c <DMA_SetConfig+0x258>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d027      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a67      	ldr	r2, [pc, #412]	@ (8006990 <DMA_SetConfig+0x25c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d022      	beq.n	800683e <DMA_SetConfig+0x10a>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a65      	ldr	r2, [pc, #404]	@ (8006994 <DMA_SetConfig+0x260>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d01d      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a64      	ldr	r2, [pc, #400]	@ (8006998 <DMA_SetConfig+0x264>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d018      	beq.n	800683e <DMA_SetConfig+0x10a>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a62      	ldr	r2, [pc, #392]	@ (800699c <DMA_SetConfig+0x268>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d013      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a61      	ldr	r2, [pc, #388]	@ (80069a0 <DMA_SetConfig+0x26c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00e      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a5f      	ldr	r2, [pc, #380]	@ (80069a4 <DMA_SetConfig+0x270>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d009      	beq.n	800683e <DMA_SetConfig+0x10a>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a5e      	ldr	r2, [pc, #376]	@ (80069a8 <DMA_SetConfig+0x274>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d004      	beq.n	800683e <DMA_SetConfig+0x10a>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a5c      	ldr	r2, [pc, #368]	@ (80069ac <DMA_SetConfig+0x278>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d101      	bne.n	8006842 <DMA_SetConfig+0x10e>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <DMA_SetConfig+0x110>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00d      	beq.n	8006864 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006850:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006862:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a39      	ldr	r2, [pc, #228]	@ (8006950 <DMA_SetConfig+0x21c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d04a      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a38      	ldr	r2, [pc, #224]	@ (8006954 <DMA_SetConfig+0x220>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d045      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a36      	ldr	r2, [pc, #216]	@ (8006958 <DMA_SetConfig+0x224>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d040      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a35      	ldr	r2, [pc, #212]	@ (800695c <DMA_SetConfig+0x228>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d03b      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a33      	ldr	r2, [pc, #204]	@ (8006960 <DMA_SetConfig+0x22c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d036      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a32      	ldr	r2, [pc, #200]	@ (8006964 <DMA_SetConfig+0x230>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d031      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a30      	ldr	r2, [pc, #192]	@ (8006968 <DMA_SetConfig+0x234>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d02c      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2f      	ldr	r2, [pc, #188]	@ (800696c <DMA_SetConfig+0x238>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d027      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006970 <DMA_SetConfig+0x23c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006974 <DMA_SetConfig+0x240>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01d      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <DMA_SetConfig+0x244>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a29      	ldr	r2, [pc, #164]	@ (800697c <DMA_SetConfig+0x248>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a27      	ldr	r2, [pc, #156]	@ (8006980 <DMA_SetConfig+0x24c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a26      	ldr	r2, [pc, #152]	@ (8006984 <DMA_SetConfig+0x250>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a24      	ldr	r2, [pc, #144]	@ (8006988 <DMA_SetConfig+0x254>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <DMA_SetConfig+0x1d0>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a23      	ldr	r2, [pc, #140]	@ (800698c <DMA_SetConfig+0x258>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <DMA_SetConfig+0x1d4>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <DMA_SetConfig+0x1d6>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d059      	beq.n	80069c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	223f      	movs	r2, #63	@ 0x3f
 8006918:	409a      	lsls	r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800692c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d138      	bne.n	80069b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800694e:	e086      	b.n	8006a5e <DMA_SetConfig+0x32a>
 8006950:	40020010 	.word	0x40020010
 8006954:	40020028 	.word	0x40020028
 8006958:	40020040 	.word	0x40020040
 800695c:	40020058 	.word	0x40020058
 8006960:	40020070 	.word	0x40020070
 8006964:	40020088 	.word	0x40020088
 8006968:	400200a0 	.word	0x400200a0
 800696c:	400200b8 	.word	0x400200b8
 8006970:	40020410 	.word	0x40020410
 8006974:	40020428 	.word	0x40020428
 8006978:	40020440 	.word	0x40020440
 800697c:	40020458 	.word	0x40020458
 8006980:	40020470 	.word	0x40020470
 8006984:	40020488 	.word	0x40020488
 8006988:	400204a0 	.word	0x400204a0
 800698c:	400204b8 	.word	0x400204b8
 8006990:	58025408 	.word	0x58025408
 8006994:	5802541c 	.word	0x5802541c
 8006998:	58025430 	.word	0x58025430
 800699c:	58025444 	.word	0x58025444
 80069a0:	58025458 	.word	0x58025458
 80069a4:	5802546c 	.word	0x5802546c
 80069a8:	58025480 	.word	0x58025480
 80069ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	60da      	str	r2, [r3, #12]
}
 80069c0:	e04d      	b.n	8006a5e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a29      	ldr	r2, [pc, #164]	@ (8006a6c <DMA_SetConfig+0x338>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d022      	beq.n	8006a12 <DMA_SetConfig+0x2de>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a27      	ldr	r2, [pc, #156]	@ (8006a70 <DMA_SetConfig+0x33c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <DMA_SetConfig+0x2de>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a26      	ldr	r2, [pc, #152]	@ (8006a74 <DMA_SetConfig+0x340>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <DMA_SetConfig+0x2de>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a24      	ldr	r2, [pc, #144]	@ (8006a78 <DMA_SetConfig+0x344>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <DMA_SetConfig+0x2de>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a23      	ldr	r2, [pc, #140]	@ (8006a7c <DMA_SetConfig+0x348>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <DMA_SetConfig+0x2de>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a21      	ldr	r2, [pc, #132]	@ (8006a80 <DMA_SetConfig+0x34c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <DMA_SetConfig+0x2de>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a20      	ldr	r2, [pc, #128]	@ (8006a84 <DMA_SetConfig+0x350>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <DMA_SetConfig+0x2de>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8006a88 <DMA_SetConfig+0x354>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d101      	bne.n	8006a16 <DMA_SetConfig+0x2e2>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <DMA_SetConfig+0x2e4>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d020      	beq.n	8006a5e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2201      	movs	r2, #1
 8006a26:	409a      	lsls	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b40      	cmp	r3, #64	@ 0x40
 8006a3a:	d108      	bne.n	8006a4e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	60da      	str	r2, [r3, #12]
}
 8006a4c:	e007      	b.n	8006a5e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	60da      	str	r2, [r3, #12]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	58025408 	.word	0x58025408
 8006a70:	5802541c 	.word	0x5802541c
 8006a74:	58025430 	.word	0x58025430
 8006a78:	58025444 	.word	0x58025444
 8006a7c:	58025458 	.word	0x58025458
 8006a80:	5802546c 	.word	0x5802546c
 8006a84:	58025480 	.word	0x58025480
 8006a88:	58025494 	.word	0x58025494

08006a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a42      	ldr	r2, [pc, #264]	@ (8006ba4 <DMA_CalcBaseAndBitshift+0x118>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d04a      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a41      	ldr	r2, [pc, #260]	@ (8006ba8 <DMA_CalcBaseAndBitshift+0x11c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d045      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a3f      	ldr	r2, [pc, #252]	@ (8006bac <DMA_CalcBaseAndBitshift+0x120>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d040      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8006bb0 <DMA_CalcBaseAndBitshift+0x124>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d03b      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8006bb4 <DMA_CalcBaseAndBitshift+0x128>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d036      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a3b      	ldr	r2, [pc, #236]	@ (8006bb8 <DMA_CalcBaseAndBitshift+0x12c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d031      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a39      	ldr	r2, [pc, #228]	@ (8006bbc <DMA_CalcBaseAndBitshift+0x130>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d02c      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a38      	ldr	r2, [pc, #224]	@ (8006bc0 <DMA_CalcBaseAndBitshift+0x134>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d027      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a36      	ldr	r2, [pc, #216]	@ (8006bc4 <DMA_CalcBaseAndBitshift+0x138>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d022      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a35      	ldr	r2, [pc, #212]	@ (8006bc8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d01d      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a33      	ldr	r2, [pc, #204]	@ (8006bcc <DMA_CalcBaseAndBitshift+0x140>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d018      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a32      	ldr	r2, [pc, #200]	@ (8006bd0 <DMA_CalcBaseAndBitshift+0x144>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d013      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a30      	ldr	r2, [pc, #192]	@ (8006bd4 <DMA_CalcBaseAndBitshift+0x148>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00e      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8006bd8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a2d      	ldr	r2, [pc, #180]	@ (8006bdc <DMA_CalcBaseAndBitshift+0x150>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <DMA_CalcBaseAndBitshift+0xa8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006be0 <DMA_CalcBaseAndBitshift+0x154>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d101      	bne.n	8006b38 <DMA_CalcBaseAndBitshift+0xac>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <DMA_CalcBaseAndBitshift+0xae>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d024      	beq.n	8006b88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	3b10      	subs	r3, #16
 8006b46:	4a27      	ldr	r2, [pc, #156]	@ (8006be4 <DMA_CalcBaseAndBitshift+0x158>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	4a24      	ldr	r2, [pc, #144]	@ (8006be8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006b58:	5cd3      	ldrb	r3, [r2, r3]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d908      	bls.n	8006b78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bec <DMA_CalcBaseAndBitshift+0x160>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	1d1a      	adds	r2, r3, #4
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b76:	e00d      	b.n	8006b94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bec <DMA_CalcBaseAndBitshift+0x160>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b86:	e005      	b.n	8006b94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	40020010 	.word	0x40020010
 8006ba8:	40020028 	.word	0x40020028
 8006bac:	40020040 	.word	0x40020040
 8006bb0:	40020058 	.word	0x40020058
 8006bb4:	40020070 	.word	0x40020070
 8006bb8:	40020088 	.word	0x40020088
 8006bbc:	400200a0 	.word	0x400200a0
 8006bc0:	400200b8 	.word	0x400200b8
 8006bc4:	40020410 	.word	0x40020410
 8006bc8:	40020428 	.word	0x40020428
 8006bcc:	40020440 	.word	0x40020440
 8006bd0:	40020458 	.word	0x40020458
 8006bd4:	40020470 	.word	0x40020470
 8006bd8:	40020488 	.word	0x40020488
 8006bdc:	400204a0 	.word	0x400204a0
 8006be0:	400204b8 	.word	0x400204b8
 8006be4:	aaaaaaab 	.word	0xaaaaaaab
 8006be8:	08012a90 	.word	0x08012a90
 8006bec:	fffffc00 	.word	0xfffffc00

08006bf0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d120      	bne.n	8006c46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d858      	bhi.n	8006cbe <DMA_CheckFifoParam+0xce>
 8006c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c14 <DMA_CheckFifoParam+0x24>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c25 	.word	0x08006c25
 8006c18:	08006c37 	.word	0x08006c37
 8006c1c:	08006c25 	.word	0x08006c25
 8006c20:	08006cbf 	.word	0x08006cbf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d048      	beq.n	8006cc2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c34:	e045      	b.n	8006cc2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c3e:	d142      	bne.n	8006cc6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c44:	e03f      	b.n	8006cc6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c4e:	d123      	bne.n	8006c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d838      	bhi.n	8006cca <DMA_CheckFifoParam+0xda>
 8006c58:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <DMA_CheckFifoParam+0x70>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c77 	.word	0x08006c77
 8006c68:	08006c71 	.word	0x08006c71
 8006c6c:	08006c89 	.word	0x08006c89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73fb      	strb	r3, [r7, #15]
        break;
 8006c74:	e030      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d025      	beq.n	8006cce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c86:	e022      	b.n	8006cce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c90:	d11f      	bne.n	8006cd2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c96:	e01c      	b.n	8006cd2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d902      	bls.n	8006ca6 <DMA_CheckFifoParam+0xb6>
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d003      	beq.n	8006cac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006ca4:	e018      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8006caa:	e015      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00e      	beq.n	8006cd6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
    break;
 8006cbc:	e00b      	b.n	8006cd6 <DMA_CheckFifoParam+0xe6>
        break;
 8006cbe:	bf00      	nop
 8006cc0:	e00a      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e008      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e006      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e004      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e002      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006cd2:	bf00      	nop
 8006cd4:	e000      	b.n	8006cd8 <DMA_CheckFifoParam+0xe8>
    break;
 8006cd6:	bf00      	nop
    }
  }

  return status;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop

08006ce8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a38      	ldr	r2, [pc, #224]	@ (8006ddc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d022      	beq.n	8006d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a36      	ldr	r2, [pc, #216]	@ (8006de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01d      	beq.n	8006d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a35      	ldr	r2, [pc, #212]	@ (8006de4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d018      	beq.n	8006d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a33      	ldr	r2, [pc, #204]	@ (8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a32      	ldr	r2, [pc, #200]	@ (8006dec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00e      	beq.n	8006d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a30      	ldr	r2, [pc, #192]	@ (8006df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d009      	beq.n	8006d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a2f      	ldr	r2, [pc, #188]	@ (8006df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2d      	ldr	r2, [pc, #180]	@ (8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d101      	bne.n	8006d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01a      	beq.n	8006d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	3b08      	subs	r3, #8
 8006d58:	4a28      	ldr	r2, [pc, #160]	@ (8006dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5e:	091b      	lsrs	r3, r3, #4
 8006d60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4b26      	ldr	r3, [pc, #152]	@ (8006e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a24      	ldr	r2, [pc, #144]	@ (8006e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d84:	e024      	b.n	8006dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	3b10      	subs	r3, #16
 8006d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	091b      	lsrs	r3, r3, #4
 8006d96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d806      	bhi.n	8006dae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d902      	bls.n	8006dae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3308      	adds	r3, #8
 8006dac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4b18      	ldr	r3, [pc, #96]	@ (8006e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	461a      	mov	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a16      	ldr	r2, [pc, #88]	@ (8006e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006dc0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2201      	movs	r2, #1
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	58025408 	.word	0x58025408
 8006de0:	5802541c 	.word	0x5802541c
 8006de4:	58025430 	.word	0x58025430
 8006de8:	58025444 	.word	0x58025444
 8006dec:	58025458 	.word	0x58025458
 8006df0:	5802546c 	.word	0x5802546c
 8006df4:	58025480 	.word	0x58025480
 8006df8:	58025494 	.word	0x58025494
 8006dfc:	cccccccd 	.word	0xcccccccd
 8006e00:	16009600 	.word	0x16009600
 8006e04:	58025880 	.word	0x58025880
 8006e08:	aaaaaaab 	.word	0xaaaaaaab
 8006e0c:	400204b8 	.word	0x400204b8
 8006e10:	4002040f 	.word	0x4002040f
 8006e14:	10008200 	.word	0x10008200
 8006e18:	40020880 	.word	0x40020880

08006e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d04a      	beq.n	8006ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d847      	bhi.n	8006ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a25      	ldr	r2, [pc, #148]	@ (8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d022      	beq.n	8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a24      	ldr	r2, [pc, #144]	@ (8006ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d01d      	beq.n	8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a22      	ldr	r2, [pc, #136]	@ (8006edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d018      	beq.n	8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d013      	beq.n	8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00e      	beq.n	8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d009      	beq.n	8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1c      	ldr	r2, [pc, #112]	@ (8006eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d004      	beq.n	8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d101      	bne.n	8006e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a15      	ldr	r2, [pc, #84]	@ (8006ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ea4:	671a      	str	r2, [r3, #112]	@ 0x70
 8006ea6:	e009      	b.n	8006ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a11      	ldr	r2, [pc, #68]	@ (8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006eba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	58025408 	.word	0x58025408
 8006ed8:	5802541c 	.word	0x5802541c
 8006edc:	58025430 	.word	0x58025430
 8006ee0:	58025444 	.word	0x58025444
 8006ee4:	58025458 	.word	0x58025458
 8006ee8:	5802546c 	.word	0x5802546c
 8006eec:	58025480 	.word	0x58025480
 8006ef0:	58025494 	.word	0x58025494
 8006ef4:	1600963f 	.word	0x1600963f
 8006ef8:	58025940 	.word	0x58025940
 8006efc:	1000823f 	.word	0x1000823f
 8006f00:	40020940 	.word	0x40020940

08006f04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b098      	sub	sp, #96	@ 0x60
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006f0c:	4a84      	ldr	r2, [pc, #528]	@ (8007120 <HAL_FDCAN_Init+0x21c>)
 8006f0e:	f107 030c 	add.w	r3, r7, #12
 8006f12:	4611      	mov	r1, r2
 8006f14:	224c      	movs	r2, #76	@ 0x4c
 8006f16:	4618      	mov	r0, r3
 8006f18:	f00a ff54 	bl	8011dc4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e1c6      	b.n	80072b4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8007124 <HAL_FDCAN_Init+0x220>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d106      	bne.n	8006f3e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f38:	461a      	mov	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fb f8ae 	bl	80020b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0210 	bic.w	r2, r2, #16
 8006f66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f68:	f7fb fd1a 	bl	80029a0 <HAL_GetTick>
 8006f6c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006f6e:	e014      	b.n	8006f9a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006f70:	f7fb fd16 	bl	80029a0 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b0a      	cmp	r3, #10
 8006f7c:	d90d      	bls.n	8006f9a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f84:	f043 0201 	orr.w	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2203      	movs	r2, #3
 8006f92:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e18c      	b.n	80072b4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d0e3      	beq.n	8006f70 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fb8:	f7fb fcf2 	bl	80029a0 <HAL_GetTick>
 8006fbc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006fbe:	e014      	b.n	8006fea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006fc0:	f7fb fcee 	bl	80029a0 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b0a      	cmp	r3, #10
 8006fcc:	d90d      	bls.n	8006fea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fd4:	f043 0201 	orr.w	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e164      	b.n	80072b4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0e3      	beq.n	8006fc0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0202 	orr.w	r2, r2, #2
 8007006:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	7c1b      	ldrb	r3, [r3, #16]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d108      	bne.n	8007022 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800701e:	619a      	str	r2, [r3, #24]
 8007020:	e007      	b.n	8007032 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007030:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	7c5b      	ldrb	r3, [r3, #17]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d108      	bne.n	800704c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007048:	619a      	str	r2, [r3, #24]
 800704a:	e007      	b.n	800705c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699a      	ldr	r2, [r3, #24]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800705a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	7c9b      	ldrb	r3, [r3, #18]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d108      	bne.n	8007076 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007072:	619a      	str	r2, [r3, #24]
 8007074:	e007      	b.n	8007086 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007084:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80070aa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691a      	ldr	r2, [r3, #16]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0210 	bic.w	r2, r2, #16
 80070ba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d108      	bne.n	80070d6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0204 	orr.w	r2, r2, #4
 80070d2:	619a      	str	r2, [r3, #24]
 80070d4:	e030      	b.n	8007138 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d02c      	beq.n	8007138 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d020      	beq.n	8007128 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699a      	ldr	r2, [r3, #24]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80070f4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0210 	orr.w	r2, r2, #16
 8007104:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d114      	bne.n	8007138 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0220 	orr.w	r2, r2, #32
 800711c:	619a      	str	r2, [r3, #24]
 800711e:	e00b      	b.n	8007138 <HAL_FDCAN_Init+0x234>
 8007120:	08012a34 	.word	0x08012a34
 8007124:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0220 	orr.w	r2, r2, #32
 8007136:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	3b01      	subs	r3, #1
 800713e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	3b01      	subs	r3, #1
 8007146:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007148:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007150:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	3b01      	subs	r3, #1
 800715a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007160:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007162:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800716c:	d115      	bne.n	800719a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	3b01      	subs	r3, #1
 800717a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800717c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007182:	3b01      	subs	r3, #1
 8007184:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007186:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	3b01      	subs	r3, #1
 8007190:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007196:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007198:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c0:	4413      	add	r3, r2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80071ce:	f023 0107 	bic.w	r1, r3, #7
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	3360      	adds	r3, #96	@ 0x60
 80071da:	443b      	add	r3, r7
 80071dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d011      	beq.n	8007216 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071fa:	f023 0107 	bic.w	r1, r3, #7
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	3360      	adds	r3, #96	@ 0x60
 8007206:	443b      	add	r3, r7
 8007208:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800721a:	2b00      	cmp	r3, #0
 800721c:	d012      	beq.n	8007244 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007226:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	3360      	adds	r3, #96	@ 0x60
 8007232:	443b      	add	r3, r7
 8007234:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007238:	011a      	lsls	r2, r3, #4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007248:	2b00      	cmp	r3, #0
 800724a:	d012      	beq.n	8007272 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007254:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	3360      	adds	r3, #96	@ 0x60
 8007260:	443b      	add	r3, r7
 8007262:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007266:	021a      	lsls	r2, r3, #8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a11      	ldr	r2, [pc, #68]	@ (80072bc <HAL_FDCAN_Init+0x3b8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d107      	bne.n	800728c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f022 0203 	bic.w	r2, r2, #3
 800728a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fe35 	bl	8007f14 <FDCAN_CalcultateRamBlockAddresses>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80072b0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3760      	adds	r7, #96	@ 0x60
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	4000a000 	.word	0x4000a000

080072c0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072d0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d002      	beq.n	80072de <HAL_FDCAN_ConfigFilter+0x1e>
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d157      	bne.n	800738e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d12b      	bne.n	800733e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b07      	cmp	r3, #7
 80072ec:	d10d      	bne.n	800730a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80072fa:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007300:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007302:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e00e      	b.n	8007328 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007316:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800731e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e025      	b.n	800738a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	075a      	lsls	r2, r3, #29
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b07      	cmp	r3, #7
 8007352:	d103      	bne.n	800735c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	e006      	b.n	800736a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	079a      	lsls	r2, r3, #30
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	4413      	add	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	3304      	adds	r3, #4
 8007382:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	e008      	b.n	80073a0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007394:	f043 0202 	orr.w	r2, r3, #2
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d111      	bne.n	80073e4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0201 	bic.w	r2, r2, #1
 80073d6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e008      	b.n	80073f6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073ea:	f043 0204 	orr.w	r2, r3, #4
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
  }
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b086      	sub	sp, #24
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d141      	bne.n	800749e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007422:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007430:	f043 0220 	orr.w	r2, r3, #32
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e038      	b.n	80074b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007454:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e026      	b.n	80074b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800746a:	0c1b      	lsrs	r3, r3, #16
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fed1 	bl	8008220 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2101      	movs	r1, #1
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	fa01 f202 	lsl.w	r2, r1, r2
 800748a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800748e:	2201      	movs	r2, #1
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	409a      	lsls	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	e008      	b.n	80074b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074a4:	f043 0208 	orr.w	r2, r3, #8
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
  }
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b08b      	sub	sp, #44	@ 0x2c
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074d0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80074d2:	7efb      	ldrb	r3, [r7, #27]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	f040 8149 	bne.w	800776c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b40      	cmp	r3, #64	@ 0x40
 80074de:	d14c      	bne.n	800757a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e13c      	b.n	800777e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800750c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800751a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e12a      	b.n	800777e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007530:	0e1b      	lsrs	r3, r3, #24
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10a      	bne.n	8007550 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007542:	0fdb      	lsrs	r3, r3, #31
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800754c:	2301      	movs	r3, #1
 800754e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007558:	0a1b      	lsrs	r3, r3, #8
 800755a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756c:	69f9      	ldr	r1, [r7, #28]
 800756e:	fb01 f303 	mul.w	r3, r1, r3
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
 8007578:	e068      	b.n	800764c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b41      	cmp	r3, #65	@ 0x41
 800757e:	d14c      	bne.n	800761a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007588:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d109      	bne.n	80075a4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0ec      	b.n	800777e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0da      	b.n	800777e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075d0:	0e1b      	lsrs	r3, r3, #24
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d10a      	bne.n	80075f0 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075e2:	0fdb      	lsrs	r3, r3, #31
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80075ec:	2301      	movs	r3, #1
 80075ee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075f8:	0a1b      	lsrs	r3, r3, #8
 80075fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760c:	69f9      	ldr	r1, [r7, #28]
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
 8007618:	e018      	b.n	800764c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	429a      	cmp	r2, r3
 8007622:	d309      	bcc.n	8007638 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800762a:	f043 0220 	orr.w	r2, r3, #32
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0a2      	b.n	800777e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	fb01 f303 	mul.w	r3, r1, r3
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d107      	bne.n	8007670 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	0c9b      	lsrs	r3, r3, #18
 8007666:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e005      	b.n	800767c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	3304      	adds	r3, #4
 8007698:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	0c1b      	lsrs	r3, r3, #16
 80076aa:	f003 020f 	and.w	r2, r3, #15
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	0e1b      	lsrs	r3, r3, #24
 80076d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	0fda      	lsrs	r2, r3, #31
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e4:	3304      	adds	r3, #4
 80076e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80076ec:	2300      	movs	r3, #0
 80076ee:	623b      	str	r3, [r7, #32]
 80076f0:	e00a      	b.n	8007708 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	441a      	add	r2, r3
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	440b      	add	r3, r1
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	3301      	adds	r3, #1
 8007706:	623b      	str	r3, [r7, #32]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4a1f      	ldr	r2, [pc, #124]	@ (800778c <HAL_FDCAN_GetRxMessage+0x2d4>)
 800770e:	5cd3      	ldrb	r3, [r2, r3]
 8007710:	461a      	mov	r2, r3
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	4293      	cmp	r3, r2
 8007716:	d3ec      	bcc.n	80076f2 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b40      	cmp	r3, #64	@ 0x40
 800771c:	d105      	bne.n	800772a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007728:	e01e      	b.n	8007768 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b41      	cmp	r3, #65	@ 0x41
 800772e:	d105      	bne.n	800773c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800773a:	e015      	b.n	8007768 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b1f      	cmp	r3, #31
 8007740:	d808      	bhi.n	8007754 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2101      	movs	r1, #1
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	fa01 f202 	lsl.w	r2, r1, r2
 800774e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007752:	e009      	b.n	8007768 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f003 021f 	and.w	r2, r3, #31
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2101      	movs	r1, #1
 8007760:	fa01 f202 	lsl.w	r2, r1, r2
 8007764:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	e008      	b.n	800777e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007772:	f043 0208 	orr.w	r2, r3, #8
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
  }
}
 800777e:	4618      	mov	r0, r3
 8007780:	372c      	adds	r7, #44	@ 0x2c
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	08012a98 	.word	0x08012a98

08007790 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f003 0207 	and.w	r2, r3, #7
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	f003 0207 	and.w	r2, r3, #7
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 0218 	and.w	r2, r3, #24
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	095b      	lsrs	r3, r3, #5
 80077c6:	f003 0201 	and.w	r2, r3, #1
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	099b      	lsrs	r3, r3, #6
 80077d2:	f003 0201 	and.w	r2, r3, #1
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	09db      	lsrs	r3, r3, #7
 80077de:	f003 0201 	and.w	r2, r3, #1
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	0adb      	lsrs	r3, r3, #11
 80077ea:	f003 0201 	and.w	r2, r3, #1
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	0b1b      	lsrs	r3, r3, #12
 80077f6:	f003 0201 	and.w	r2, r3, #1
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	0b5b      	lsrs	r3, r3, #13
 8007802:	f003 0201 	and.w	r2, r3, #1
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	0b9b      	lsrs	r3, r3, #14
 800780e:	f003 0201 	and.w	r2, r3, #1
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	0c1b      	lsrs	r3, r3, #16
 800781a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007842:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d002      	beq.n	8007850 <HAL_FDCAN_ActivateNotification+0x20>
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d155      	bne.n	80078fc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4013      	ands	r3, r2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d108      	bne.n	8007870 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 0201 	orr.w	r2, r2, #1
 800786c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800786e:	e014      	b.n	800789a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4013      	ands	r3, r2
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	429a      	cmp	r2, r3
 800787e:	d108      	bne.n	8007892 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0202 	orr.w	r2, r2, #2
 800788e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007890:	e003      	b.n	800789a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2203      	movs	r2, #3
 8007898:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d009      	beq.n	80078b8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	4b0f      	ldr	r3, [pc, #60]	@ (800791c <HAL_FDCAN_ActivateNotification+0xec>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	430b      	orrs	r3, r1
 80078e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <HAL_FDCAN_ActivateNotification+0xf0>)
 80078ec:	695a      	ldr	r2, [r3, #20]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	0f9b      	lsrs	r3, r3, #30
 80078f2:	490b      	ldr	r1, [pc, #44]	@ (8007920 <HAL_FDCAN_ActivateNotification+0xf0>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e008      	b.n	800790e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007902:	f043 0202 	orr.w	r2, r3, #2
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
  }
}
 800790e:	4618      	mov	r0, r3
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	3fcfffff 	.word	0x3fcfffff
 8007920:	4000a800 	.word	0x4000a800

08007924 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b096      	sub	sp, #88	@ 0x58
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800792c:	4b95      	ldr	r3, [pc, #596]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	079b      	lsls	r3, r3, #30
 8007932:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007934:	4b93      	ldr	r3, [pc, #588]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	079b      	lsls	r3, r3, #30
 800793a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800793c:	4013      	ands	r3, r2
 800793e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007946:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800794a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007952:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007954:	4013      	ands	r3, r2
 8007956:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800796c:	4013      	ands	r3, r2
 800796e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007976:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800797a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007984:	4013      	ands	r3, r2
 8007986:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007992:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800799c:	4013      	ands	r3, r2
 800799e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80079aa:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079b4:	4013      	ands	r3, r2
 80079b6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80079c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00f      	beq.n	80079f2 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80079e6:	4b67      	ldr	r3, [pc, #412]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa44 	bl	8007e7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80079f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01c      	beq.n	8007a36 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d017      	beq.n	8007a36 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a0e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a26:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a28:	4b56      	ldr	r3, [pc, #344]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007a2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f9f9 	bl	8007e28 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00d      	beq.n	8007a58 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a42:	4b51      	ldr	r3, [pc, #324]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x264>)
 8007a44:	400b      	ands	r3, r1
 8007a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a48:	4a4e      	ldr	r2, [pc, #312]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a4c:	0f9b      	lsrs	r3, r3, #30
 8007a4e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007a50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f9b2 	bl	8007dbc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00d      	beq.n	8007a7a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a64:	4b48      	ldr	r3, [pc, #288]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x264>)
 8007a66:	400b      	ands	r3, r1
 8007a68:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a6a:	4a46      	ldr	r2, [pc, #280]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a6e:	0f9b      	lsrs	r3, r3, #30
 8007a70:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007a72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f9ac 	bl	8007dd2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00d      	beq.n	8007a9c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a86:	4b40      	ldr	r3, [pc, #256]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x264>)
 8007a88:	400b      	ands	r3, r1
 8007a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a8c:	4a3d      	ldr	r2, [pc, #244]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a90:	0f9b      	lsrs	r3, r3, #30
 8007a92:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007a94:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7f9 fd88 	bl	80015ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007aa8:	4b37      	ldr	r3, [pc, #220]	@ (8007b88 <HAL_FDCAN_IRQHandler+0x264>)
 8007aaa:	400b      	ands	r3, r1
 8007aac:	6513      	str	r3, [r2, #80]	@ 0x50
 8007aae:	4a35      	ldr	r2, [pc, #212]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ab2:	0f9b      	lsrs	r3, r3, #30
 8007ab4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007ab6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f995 	bl	8007de8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00f      	beq.n	8007ae8 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ada:	651a      	str	r2, [r3, #80]	@ 0x50
 8007adc:	4b29      	ldr	r3, [pc, #164]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f98b 	bl	8007dfe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01c      	beq.n	8007b2c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d017      	beq.n	8007b2c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b04:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b10:	4013      	ands	r3, r2
 8007b12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b1e:	4b19      	ldr	r3, [pc, #100]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007b24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f973 	bl	8007e12 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00f      	beq.n	8007b56 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007b48:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f974 	bl	8007e3e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d015      	beq.n	8007b8c <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d010      	beq.n	8007b8c <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007b72:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b74:	4b03      	ldr	r3, [pc, #12]	@ (8007b84 <HAL_FDCAN_IRQHandler+0x260>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f969 	bl	8007e52 <HAL_FDCAN_TimestampWraparoundCallback>
 8007b80:	e004      	b.n	8007b8c <HAL_FDCAN_IRQHandler+0x268>
 8007b82:	bf00      	nop
 8007b84:	4000a800 	.word	0x4000a800
 8007b88:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00f      	beq.n	8007bb6 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007ba8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007baa:	4b81      	ldr	r3, [pc, #516]	@ (8007db0 <HAL_FDCAN_IRQHandler+0x48c>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f958 	bl	8007e66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d014      	beq.n	8007bea <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00f      	beq.n	8007bea <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007bd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bd4:	4b76      	ldr	r3, [pc, #472]	@ (8007db0 <HAL_FDCAN_IRQHandler+0x48c>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007be0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bf6:	4b6f      	ldr	r3, [pc, #444]	@ (8007db4 <HAL_FDCAN_IRQHandler+0x490>)
 8007bf8:	400b      	ands	r3, r1
 8007bfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bfc:	4a6c      	ldr	r2, [pc, #432]	@ (8007db0 <HAL_FDCAN_IRQHandler+0x48c>)
 8007bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c00:	0f9b      	lsrs	r3, r3, #30
 8007c02:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007c04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f94b 	bl	8007ea2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d011      	beq.n	8007c36 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c18:	4b66      	ldr	r3, [pc, #408]	@ (8007db4 <HAL_FDCAN_IRQHandler+0x490>)
 8007c1a:	400b      	ands	r3, r1
 8007c1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c1e:	4a64      	ldr	r2, [pc, #400]	@ (8007db0 <HAL_FDCAN_IRQHandler+0x48c>)
 8007c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c22:	0f9b      	lsrs	r3, r3, #30
 8007c24:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a5f      	ldr	r2, [pc, #380]	@ (8007db8 <HAL_FDCAN_IRQHandler+0x494>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	f040 80aa 	bne.w	8007d96 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80a2 	beq.w	8007d96 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c66:	4013      	ands	r3, r2
 8007c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c74:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c7e:	4013      	ands	r3, r2
 8007c80:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007c8c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c96:	4013      	ands	r3, r2
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007ca4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cac:	6a3a      	ldr	r2, [r7, #32]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007cbc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d007      	beq.n	8007cf0 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ce6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f8e4 	bl	8007eb8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cfc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007cfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8e4 	bl	8007ece <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d019      	beq.n	8007d44 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d014      	beq.n	8007d44 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d20:	0c1b      	lsrs	r3, r3, #16
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d30:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2240      	movs	r2, #64	@ 0x40
 8007d38:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	6939      	ldr	r1, [r7, #16]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f8d0 	bl	8007ee4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f8d1 	bl	8007efc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00b      	beq.n	8007d78 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	6a3a      	ldr	r2, [r7, #32]
 8007d66:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f874 	bl	8007e8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007da6:	bf00      	nop
 8007da8:	3758      	adds	r7, #88	@ 0x58
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	4000a800 	.word	0x4000a800
 8007db4:	3fcfffff 	.word	0x3fcfffff
 8007db8:	4000a000 	.word	0x4000a000

08007dbc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f20:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007f2a:	4ba7      	ldr	r3, [pc, #668]	@ (80081c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	0091      	lsls	r1, r2, #2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	430b      	orrs	r3, r1
 8007f38:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f44:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	041a      	lsls	r2, r3, #16
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	4413      	add	r3, r2
 8007f60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f6a:	4b97      	ldr	r3, [pc, #604]	@ (80081c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0091      	lsls	r1, r2, #2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	430b      	orrs	r3, r1
 8007f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f84:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8c:	041a      	lsls	r2, r3, #16
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007fac:	4b86      	ldr	r3, [pc, #536]	@ (80081c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007fae:	4013      	ands	r3, r2
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	0091      	lsls	r1, r2, #2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6812      	ldr	r2, [r2, #0]
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fc6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fce:	041a      	lsls	r2, r3, #16
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007fe2:	fb02 f303 	mul.w	r3, r2, r3
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	4413      	add	r3, r2
 8007fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007ff4:	4b74      	ldr	r3, [pc, #464]	@ (80081c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	0091      	lsls	r1, r2, #2
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	430b      	orrs	r3, r1
 8008002:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800800e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008016:	041a      	lsls	r2, r3, #16
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	4413      	add	r3, r2
 8008032:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800803c:	4b62      	ldr	r3, [pc, #392]	@ (80081c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800803e:	4013      	ands	r3, r2
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	0091      	lsls	r1, r2, #2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6812      	ldr	r2, [r2, #0]
 8008048:	430b      	orrs	r3, r1
 800804a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	4413      	add	r3, r2
 800805e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008068:	4b57      	ldr	r3, [pc, #348]	@ (80081c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800806a:	4013      	ands	r3, r2
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	0091      	lsls	r1, r2, #2
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6812      	ldr	r2, [r2, #0]
 8008074:	430b      	orrs	r3, r1
 8008076:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008082:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808a:	041a      	lsls	r2, r3, #16
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	4413      	add	r3, r2
 80080a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80080aa:	4b47      	ldr	r3, [pc, #284]	@ (80081c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	0091      	lsls	r1, r2, #2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	430b      	orrs	r3, r1
 80080b8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080c4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080cc:	041a      	lsls	r2, r3, #16
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080e0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080e8:	061a      	lsls	r2, r3, #24
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080f8:	4b34      	ldr	r3, [pc, #208]	@ (80081cc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80080fa:	4413      	add	r3, r2
 80080fc:	009a      	lsls	r2, r3, #2
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	441a      	add	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	441a      	add	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800812e:	fb01 f303 	mul.w	r3, r1, r3
 8008132:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008146:	fb01 f303 	mul.w	r3, r1, r3
 800814a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800815e:	fb01 f303 	mul.w	r3, r1, r3
 8008162:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008164:	441a      	add	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	441a      	add	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800818e:	fb01 f303 	mul.w	r3, r1, r3
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	441a      	add	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80081aa:	fb01 f303 	mul.w	r3, r1, r3
 80081ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80081b0:	441a      	add	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081be:	4a04      	ldr	r2, [pc, #16]	@ (80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d915      	bls.n	80081f0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80081c4:	e006      	b.n	80081d4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80081c6:	bf00      	nop
 80081c8:	ffff0003 	.word	0xffff0003
 80081cc:	10002b00 	.word	0x10002b00
 80081d0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2203      	movs	r2, #3
 80081e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e010      	b.n	8008212 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	e005      	b.n	8008204 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3304      	adds	r3, #4
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	429a      	cmp	r2, r3
 800820e:	d3f3      	bcc.n	80081f8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop

08008220 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008220:	b480      	push	{r7}
 8008222:	b089      	sub	sp, #36	@ 0x24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10a      	bne.n	800824c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800823e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008246:	4313      	orrs	r3, r2
 8008248:	61fb      	str	r3, [r7, #28]
 800824a:	e00a      	b.n	8008262 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008254:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800825a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800825c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008260:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800826c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008272:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008278:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	3304      	adds	r3, #4
 80082a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	3304      	adds	r3, #4
 80082b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	e020      	b.n	80082fa <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	3303      	adds	r3, #3
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	4413      	add	r3, r2
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	3302      	adds	r3, #2
 80082c8:	6879      	ldr	r1, [r7, #4]
 80082ca:	440b      	add	r3, r1
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	3301      	adds	r3, #1
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	440b      	add	r3, r1
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80082de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	440a      	add	r2, r1
 80082e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80082e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	3304      	adds	r3, #4
 80082f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	3304      	adds	r3, #4
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	4a06      	ldr	r2, [pc, #24]	@ (8008318 <FDCAN_CopyMessageToRAM+0xf8>)
 8008300:	5cd3      	ldrb	r3, [r2, r3]
 8008302:	461a      	mov	r2, r3
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	4293      	cmp	r3, r2
 8008308:	d3d6      	bcc.n	80082b8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800830a:	bf00      	nop
 800830c:	bf00      	nop
 800830e:	3724      	adds	r7, #36	@ 0x24
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	08012a98 	.word	0x08012a98

0800831c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800831c:	b480      	push	{r7}
 800831e:	b089      	sub	sp, #36	@ 0x24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008326:	2300      	movs	r3, #0
 8008328:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800832a:	4b86      	ldr	r3, [pc, #536]	@ (8008544 <HAL_GPIO_Init+0x228>)
 800832c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800832e:	e18c      	b.n	800864a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	2101      	movs	r1, #1
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	fa01 f303 	lsl.w	r3, r1, r3
 800833c:	4013      	ands	r3, r2
 800833e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 817e 	beq.w	8008644 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	2b01      	cmp	r3, #1
 8008352:	d005      	beq.n	8008360 <HAL_GPIO_Init+0x44>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d130      	bne.n	80083c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	2203      	movs	r2, #3
 800836c:	fa02 f303 	lsl.w	r3, r2, r3
 8008370:	43db      	mvns	r3, r3
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	4013      	ands	r3, r2
 8008376:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	fa02 f303 	lsl.w	r3, r2, r3
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	4313      	orrs	r3, r2
 8008388:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008396:	2201      	movs	r2, #1
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	fa02 f303 	lsl.w	r3, r2, r3
 800839e:	43db      	mvns	r3, r3
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	4013      	ands	r3, r2
 80083a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	091b      	lsrs	r3, r3, #4
 80083ac:	f003 0201 	and.w	r2, r3, #1
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	fa02 f303 	lsl.w	r3, r2, r3
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d017      	beq.n	80083fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	2203      	movs	r2, #3
 80083da:	fa02 f303 	lsl.w	r3, r2, r3
 80083de:	43db      	mvns	r3, r3
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	4013      	ands	r3, r2
 80083e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	fa02 f303 	lsl.w	r3, r2, r3
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d123      	bne.n	8008452 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	08da      	lsrs	r2, r3, #3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3208      	adds	r2, #8
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	220f      	movs	r2, #15
 8008422:	fa02 f303 	lsl.w	r3, r2, r3
 8008426:	43db      	mvns	r3, r3
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	4013      	ands	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	4313      	orrs	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	08da      	lsrs	r2, r3, #3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3208      	adds	r2, #8
 800844c:	69b9      	ldr	r1, [r7, #24]
 800844e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	2203      	movs	r2, #3
 800845e:	fa02 f303 	lsl.w	r3, r2, r3
 8008462:	43db      	mvns	r3, r3
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	4013      	ands	r3, r2
 8008468:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f003 0203 	and.w	r2, r3, #3
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	4313      	orrs	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80d8 	beq.w	8008644 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008494:	4b2c      	ldr	r3, [pc, #176]	@ (8008548 <HAL_GPIO_Init+0x22c>)
 8008496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800849a:	4a2b      	ldr	r2, [pc, #172]	@ (8008548 <HAL_GPIO_Init+0x22c>)
 800849c:	f043 0302 	orr.w	r3, r3, #2
 80084a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80084a4:	4b28      	ldr	r3, [pc, #160]	@ (8008548 <HAL_GPIO_Init+0x22c>)
 80084a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084b2:	4a26      	ldr	r2, [pc, #152]	@ (800854c <HAL_GPIO_Init+0x230>)
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	089b      	lsrs	r3, r3, #2
 80084b8:	3302      	adds	r3, #2
 80084ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	220f      	movs	r2, #15
 80084ca:	fa02 f303 	lsl.w	r3, r2, r3
 80084ce:	43db      	mvns	r3, r3
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	4013      	ands	r3, r2
 80084d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008550 <HAL_GPIO_Init+0x234>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d04a      	beq.n	8008574 <HAL_GPIO_Init+0x258>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008554 <HAL_GPIO_Init+0x238>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d02b      	beq.n	800853e <HAL_GPIO_Init+0x222>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008558 <HAL_GPIO_Init+0x23c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d025      	beq.n	800853a <HAL_GPIO_Init+0x21e>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1a      	ldr	r2, [pc, #104]	@ (800855c <HAL_GPIO_Init+0x240>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d01f      	beq.n	8008536 <HAL_GPIO_Init+0x21a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a19      	ldr	r2, [pc, #100]	@ (8008560 <HAL_GPIO_Init+0x244>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d019      	beq.n	8008532 <HAL_GPIO_Init+0x216>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a18      	ldr	r2, [pc, #96]	@ (8008564 <HAL_GPIO_Init+0x248>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d013      	beq.n	800852e <HAL_GPIO_Init+0x212>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a17      	ldr	r2, [pc, #92]	@ (8008568 <HAL_GPIO_Init+0x24c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00d      	beq.n	800852a <HAL_GPIO_Init+0x20e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a16      	ldr	r2, [pc, #88]	@ (800856c <HAL_GPIO_Init+0x250>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d007      	beq.n	8008526 <HAL_GPIO_Init+0x20a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a15      	ldr	r2, [pc, #84]	@ (8008570 <HAL_GPIO_Init+0x254>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d101      	bne.n	8008522 <HAL_GPIO_Init+0x206>
 800851e:	2309      	movs	r3, #9
 8008520:	e029      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 8008522:	230a      	movs	r3, #10
 8008524:	e027      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 8008526:	2307      	movs	r3, #7
 8008528:	e025      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 800852a:	2306      	movs	r3, #6
 800852c:	e023      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 800852e:	2305      	movs	r3, #5
 8008530:	e021      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 8008532:	2304      	movs	r3, #4
 8008534:	e01f      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 8008536:	2303      	movs	r3, #3
 8008538:	e01d      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 800853a:	2302      	movs	r3, #2
 800853c:	e01b      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 800853e:	2301      	movs	r3, #1
 8008540:	e019      	b.n	8008576 <HAL_GPIO_Init+0x25a>
 8008542:	bf00      	nop
 8008544:	58000080 	.word	0x58000080
 8008548:	58024400 	.word	0x58024400
 800854c:	58000400 	.word	0x58000400
 8008550:	58020000 	.word	0x58020000
 8008554:	58020400 	.word	0x58020400
 8008558:	58020800 	.word	0x58020800
 800855c:	58020c00 	.word	0x58020c00
 8008560:	58021000 	.word	0x58021000
 8008564:	58021400 	.word	0x58021400
 8008568:	58021800 	.word	0x58021800
 800856c:	58021c00 	.word	0x58021c00
 8008570:	58022400 	.word	0x58022400
 8008574:	2300      	movs	r3, #0
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	f002 0203 	and.w	r2, r2, #3
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	4093      	lsls	r3, r2
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4313      	orrs	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008586:	4938      	ldr	r1, [pc, #224]	@ (8008668 <HAL_GPIO_Init+0x34c>)
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	089b      	lsrs	r3, r3, #2
 800858c:	3302      	adds	r3, #2
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	43db      	mvns	r3, r3
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	4013      	ands	r3, r2
 80085a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80085ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80085c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	43db      	mvns	r3, r3
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	4013      	ands	r3, r2
 80085d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80085e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	43db      	mvns	r3, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4013      	ands	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	43db      	mvns	r3, r3
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	4013      	ands	r3, r2
 8008628:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	4313      	orrs	r3, r2
 800863c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	3301      	adds	r3, #1
 8008648:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	fa22 f303 	lsr.w	r3, r2, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	f47f ae6b 	bne.w	8008330 <HAL_GPIO_Init+0x14>
  }
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	3724      	adds	r7, #36	@ 0x24
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	58000400 	.word	0x58000400

0800866c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691a      	ldr	r2, [r3, #16]
 800867c:	887b      	ldrh	r3, [r7, #2]
 800867e:	4013      	ands	r3, r2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
 8008688:	e001      	b.n	800868e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	807b      	strh	r3, [r7, #2]
 80086a8:	4613      	mov	r3, r2
 80086aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086ac:	787b      	ldrb	r3, [r7, #1]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086b2:	887a      	ldrh	r2, [r7, #2]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80086b8:	e003      	b.n	80086c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80086ba:	887b      	ldrh	r3, [r7, #2]
 80086bc:	041a      	lsls	r2, r3, #16
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	619a      	str	r2, [r3, #24]
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086d8:	4b19      	ldr	r3, [pc, #100]	@ (8008740 <HAL_PWREx_ConfigSupply+0x70>)
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d00a      	beq.n	80086fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086e4:	4b16      	ldr	r3, [pc, #88]	@ (8008740 <HAL_PWREx_ConfigSupply+0x70>)
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d001      	beq.n	80086f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e01f      	b.n	8008736 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	e01d      	b.n	8008736 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086fa:	4b11      	ldr	r3, [pc, #68]	@ (8008740 <HAL_PWREx_ConfigSupply+0x70>)
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f023 0207 	bic.w	r2, r3, #7
 8008702:	490f      	ldr	r1, [pc, #60]	@ (8008740 <HAL_PWREx_ConfigSupply+0x70>)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4313      	orrs	r3, r2
 8008708:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800870a:	f7fa f949 	bl	80029a0 <HAL_GetTick>
 800870e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008710:	e009      	b.n	8008726 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008712:	f7fa f945 	bl	80029a0 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008720:	d901      	bls.n	8008726 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e007      	b.n	8008736 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008726:	4b06      	ldr	r3, [pc, #24]	@ (8008740 <HAL_PWREx_ConfigSupply+0x70>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800872e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008732:	d1ee      	bne.n	8008712 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	58024800 	.word	0x58024800

08008744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08c      	sub	sp, #48	@ 0x30
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e3c8      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8087 	beq.w	8008872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008764:	4b88      	ldr	r3, [pc, #544]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800876c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800876e:	4b86      	ldr	r3, [pc, #536]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008772:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008776:	2b10      	cmp	r3, #16
 8008778:	d007      	beq.n	800878a <HAL_RCC_OscConfig+0x46>
 800877a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877c:	2b18      	cmp	r3, #24
 800877e:	d110      	bne.n	80087a2 <HAL_RCC_OscConfig+0x5e>
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d10b      	bne.n	80087a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800878a:	4b7f      	ldr	r3, [pc, #508]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d06c      	beq.n	8008870 <HAL_RCC_OscConfig+0x12c>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d168      	bne.n	8008870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e3a2      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087aa:	d106      	bne.n	80087ba <HAL_RCC_OscConfig+0x76>
 80087ac:	4b76      	ldr	r3, [pc, #472]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a75      	ldr	r2, [pc, #468]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	e02e      	b.n	8008818 <HAL_RCC_OscConfig+0xd4>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10c      	bne.n	80087dc <HAL_RCC_OscConfig+0x98>
 80087c2:	4b71      	ldr	r3, [pc, #452]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a70      	ldr	r2, [pc, #448]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	4b6e      	ldr	r3, [pc, #440]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a6d      	ldr	r2, [pc, #436]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	e01d      	b.n	8008818 <HAL_RCC_OscConfig+0xd4>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087e4:	d10c      	bne.n	8008800 <HAL_RCC_OscConfig+0xbc>
 80087e6:	4b68      	ldr	r3, [pc, #416]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a67      	ldr	r2, [pc, #412]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	4b65      	ldr	r3, [pc, #404]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a64      	ldr	r2, [pc, #400]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80087f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	e00b      	b.n	8008818 <HAL_RCC_OscConfig+0xd4>
 8008800:	4b61      	ldr	r3, [pc, #388]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a60      	ldr	r2, [pc, #384]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	4b5e      	ldr	r3, [pc, #376]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a5d      	ldr	r2, [pc, #372]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d013      	beq.n	8008848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008820:	f7fa f8be 	bl	80029a0 <HAL_GetTick>
 8008824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008826:	e008      	b.n	800883a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008828:	f7fa f8ba 	bl	80029a0 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b64      	cmp	r3, #100	@ 0x64
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e356      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800883a:	4b53      	ldr	r3, [pc, #332]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0f0      	beq.n	8008828 <HAL_RCC_OscConfig+0xe4>
 8008846:	e014      	b.n	8008872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008848:	f7fa f8aa 	bl	80029a0 <HAL_GetTick>
 800884c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800884e:	e008      	b.n	8008862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008850:	f7fa f8a6 	bl	80029a0 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b64      	cmp	r3, #100	@ 0x64
 800885c:	d901      	bls.n	8008862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e342      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008862:	4b49      	ldr	r3, [pc, #292]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1f0      	bne.n	8008850 <HAL_RCC_OscConfig+0x10c>
 800886e:	e000      	b.n	8008872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 808c 	beq.w	8008998 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008880:	4b41      	ldr	r3, [pc, #260]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008888:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800888a:	4b3f      	ldr	r3, [pc, #252]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 800888c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d007      	beq.n	80088a6 <HAL_RCC_OscConfig+0x162>
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	2b18      	cmp	r3, #24
 800889a:	d137      	bne.n	800890c <HAL_RCC_OscConfig+0x1c8>
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d132      	bne.n	800890c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088a6:	4b38      	ldr	r3, [pc, #224]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <HAL_RCC_OscConfig+0x17a>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e314      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088be:	4b32      	ldr	r3, [pc, #200]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f023 0219 	bic.w	r2, r3, #25
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	492f      	ldr	r1, [pc, #188]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d0:	f7fa f866 	bl	80029a0 <HAL_GetTick>
 80088d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088d6:	e008      	b.n	80088ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088d8:	f7fa f862 	bl	80029a0 <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d901      	bls.n	80088ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e2fe      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088ea:	4b27      	ldr	r3, [pc, #156]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0f0      	beq.n	80088d8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f6:	4b24      	ldr	r3, [pc, #144]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	061b      	lsls	r3, r3, #24
 8008904:	4920      	ldr	r1, [pc, #128]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008906:	4313      	orrs	r3, r2
 8008908:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800890a:	e045      	b.n	8008998 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d026      	beq.n	8008962 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008914:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f023 0219 	bic.w	r2, r3, #25
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	4919      	ldr	r1, [pc, #100]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008922:	4313      	orrs	r3, r2
 8008924:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008926:	f7fa f83b 	bl	80029a0 <HAL_GetTick>
 800892a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800892c:	e008      	b.n	8008940 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800892e:	f7fa f837 	bl	80029a0 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e2d3      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008940:	4b11      	ldr	r3, [pc, #68]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0f0      	beq.n	800892e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894c:	4b0e      	ldr	r3, [pc, #56]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	061b      	lsls	r3, r3, #24
 800895a:	490b      	ldr	r1, [pc, #44]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 800895c:	4313      	orrs	r3, r2
 800895e:	604b      	str	r3, [r1, #4]
 8008960:	e01a      	b.n	8008998 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008962:	4b09      	ldr	r3, [pc, #36]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a08      	ldr	r2, [pc, #32]	@ (8008988 <HAL_RCC_OscConfig+0x244>)
 8008968:	f023 0301 	bic.w	r3, r3, #1
 800896c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896e:	f7fa f817 	bl	80029a0 <HAL_GetTick>
 8008972:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008974:	e00a      	b.n	800898c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008976:	f7fa f813 	bl	80029a0 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d903      	bls.n	800898c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e2af      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
 8008988:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800898c:	4b96      	ldr	r3, [pc, #600]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1ee      	bne.n	8008976 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d06a      	beq.n	8008a7a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089a4:	4b90      	ldr	r3, [pc, #576]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089ae:	4b8e      	ldr	r3, [pc, #568]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 80089b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	2b08      	cmp	r3, #8
 80089b8:	d007      	beq.n	80089ca <HAL_RCC_OscConfig+0x286>
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	2b18      	cmp	r3, #24
 80089be:	d11b      	bne.n	80089f8 <HAL_RCC_OscConfig+0x2b4>
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d116      	bne.n	80089f8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089ca:	4b87      	ldr	r3, [pc, #540]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d005      	beq.n	80089e2 <HAL_RCC_OscConfig+0x29e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	2b80      	cmp	r3, #128	@ 0x80
 80089dc:	d001      	beq.n	80089e2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e282      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089e2:	4b81      	ldr	r3, [pc, #516]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	061b      	lsls	r3, r3, #24
 80089f0:	497d      	ldr	r1, [pc, #500]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089f6:	e040      	b.n	8008a7a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d023      	beq.n	8008a48 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a00:	4b79      	ldr	r3, [pc, #484]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a78      	ldr	r2, [pc, #480]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0c:	f7f9 ffc8 	bl	80029a0 <HAL_GetTick>
 8008a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a14:	f7f9 ffc4 	bl	80029a0 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e260      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a26:	4b70      	ldr	r3, [pc, #448]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0f0      	beq.n	8008a14 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a32:	4b6d      	ldr	r3, [pc, #436]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	061b      	lsls	r3, r3, #24
 8008a40:	4969      	ldr	r1, [pc, #420]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60cb      	str	r3, [r1, #12]
 8008a46:	e018      	b.n	8008a7a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a48:	4b67      	ldr	r3, [pc, #412]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a66      	ldr	r2, [pc, #408]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a54:	f7f9 ffa4 	bl	80029a0 <HAL_GetTick>
 8008a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a5a:	e008      	b.n	8008a6e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a5c:	f7f9 ffa0 	bl	80029a0 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e23c      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1f0      	bne.n	8008a5c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d036      	beq.n	8008af4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d019      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a8e:	4b56      	ldr	r3, [pc, #344]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a92:	4a55      	ldr	r2, [pc, #340]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008a94:	f043 0301 	orr.w	r3, r3, #1
 8008a98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a9a:	f7f9 ff81 	bl	80029a0 <HAL_GetTick>
 8008a9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aa2:	f7f9 ff7d 	bl	80029a0 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e219      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0f0      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x35e>
 8008ac0:	e018      	b.n	8008af4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ac2:	4b49      	ldr	r3, [pc, #292]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac6:	4a48      	ldr	r2, [pc, #288]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008ac8:	f023 0301 	bic.w	r3, r3, #1
 8008acc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ace:	f7f9 ff67 	bl	80029a0 <HAL_GetTick>
 8008ad2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ad4:	e008      	b.n	8008ae8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ad6:	f7f9 ff63 	bl	80029a0 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e1ff      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1f0      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d036      	beq.n	8008b6e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d019      	beq.n	8008b3c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b08:	4b37      	ldr	r3, [pc, #220]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a36      	ldr	r2, [pc, #216]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008b0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008b12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b14:	f7f9 ff44 	bl	80029a0 <HAL_GetTick>
 8008b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b1a:	e008      	b.n	8008b2e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b1c:	f7f9 ff40 	bl	80029a0 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e1dc      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0f0      	beq.n	8008b1c <HAL_RCC_OscConfig+0x3d8>
 8008b3a:	e018      	b.n	8008b6e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a29      	ldr	r2, [pc, #164]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008b42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b48:	f7f9 ff2a 	bl	80029a0 <HAL_GetTick>
 8008b4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b50:	f7f9 ff26 	bl	80029a0 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e1c2      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b62:	4b21      	ldr	r3, [pc, #132]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f0      	bne.n	8008b50 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 8086 	beq.w	8008c88 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008bec <HAL_RCC_OscConfig+0x4a8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a1a      	ldr	r2, [pc, #104]	@ (8008bec <HAL_RCC_OscConfig+0x4a8>)
 8008b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b88:	f7f9 ff0a 	bl	80029a0 <HAL_GetTick>
 8008b8c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b8e:	e008      	b.n	8008ba2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b90:	f7f9 ff06 	bl	80029a0 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b64      	cmp	r3, #100	@ 0x64
 8008b9c:	d901      	bls.n	8008ba2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e1a2      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ba2:	4b12      	ldr	r3, [pc, #72]	@ (8008bec <HAL_RCC_OscConfig+0x4a8>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0f0      	beq.n	8008b90 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d106      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x480>
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bba:	4a0b      	ldr	r2, [pc, #44]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bc2:	e032      	b.n	8008c2a <HAL_RCC_OscConfig+0x4e6>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d111      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x4ac>
 8008bcc:	4b06      	ldr	r3, [pc, #24]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd0:	4a05      	ldr	r2, [pc, #20]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008bd2:	f023 0301 	bic.w	r3, r3, #1
 8008bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bd8:	4b03      	ldr	r3, [pc, #12]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bdc:	4a02      	ldr	r2, [pc, #8]	@ (8008be8 <HAL_RCC_OscConfig+0x4a4>)
 8008bde:	f023 0304 	bic.w	r3, r3, #4
 8008be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008be4:	e021      	b.n	8008c2a <HAL_RCC_OscConfig+0x4e6>
 8008be6:	bf00      	nop
 8008be8:	58024400 	.word	0x58024400
 8008bec:	58024800 	.word	0x58024800
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	2b05      	cmp	r3, #5
 8008bf6:	d10c      	bne.n	8008c12 <HAL_RCC_OscConfig+0x4ce>
 8008bf8:	4b83      	ldr	r3, [pc, #524]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bfc:	4a82      	ldr	r2, [pc, #520]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008bfe:	f043 0304 	orr.w	r3, r3, #4
 8008c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c04:	4b80      	ldr	r3, [pc, #512]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c08:	4a7f      	ldr	r2, [pc, #508]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c0a:	f043 0301 	orr.w	r3, r3, #1
 8008c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c10:	e00b      	b.n	8008c2a <HAL_RCC_OscConfig+0x4e6>
 8008c12:	4b7d      	ldr	r3, [pc, #500]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c16:	4a7c      	ldr	r2, [pc, #496]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c18:	f023 0301 	bic.w	r3, r3, #1
 8008c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c22:	4a79      	ldr	r2, [pc, #484]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c24:	f023 0304 	bic.w	r3, r3, #4
 8008c28:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d015      	beq.n	8008c5e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c32:	f7f9 feb5 	bl	80029a0 <HAL_GetTick>
 8008c36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c38:	e00a      	b.n	8008c50 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c3a:	f7f9 feb1 	bl	80029a0 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e14b      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c50:	4b6d      	ldr	r3, [pc, #436]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0ee      	beq.n	8008c3a <HAL_RCC_OscConfig+0x4f6>
 8008c5c:	e014      	b.n	8008c88 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c5e:	f7f9 fe9f 	bl	80029a0 <HAL_GetTick>
 8008c62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c64:	e00a      	b.n	8008c7c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c66:	f7f9 fe9b 	bl	80029a0 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d901      	bls.n	8008c7c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e135      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c7c:	4b62      	ldr	r3, [pc, #392]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1ee      	bne.n	8008c66 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 812a 	beq.w	8008ee6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c92:	4b5d      	ldr	r3, [pc, #372]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c9a:	2b18      	cmp	r3, #24
 8008c9c:	f000 80ba 	beq.w	8008e14 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	f040 8095 	bne.w	8008dd4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008caa:	4b57      	ldr	r3, [pc, #348]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a56      	ldr	r2, [pc, #344]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb6:	f7f9 fe73 	bl	80029a0 <HAL_GetTick>
 8008cba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cbc:	e008      	b.n	8008cd0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cbe:	f7f9 fe6f 	bl	80029a0 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d901      	bls.n	8008cd0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e10b      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1f0      	bne.n	8008cbe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008cde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8008e0c <HAL_RCC_OscConfig+0x6c8>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008cec:	0112      	lsls	r2, r2, #4
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	4945      	ldr	r1, [pc, #276]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	628b      	str	r3, [r1, #40]	@ 0x28
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d04:	3b01      	subs	r3, #1
 8008d06:	025b      	lsls	r3, r3, #9
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d10:	3b01      	subs	r3, #1
 8008d12:	041b      	lsls	r3, r3, #16
 8008d14:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	061b      	lsls	r3, r3, #24
 8008d22:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d26:	4938      	ldr	r1, [pc, #224]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d2c:	4b36      	ldr	r3, [pc, #216]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	4a35      	ldr	r2, [pc, #212]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d32:	f023 0301 	bic.w	r3, r3, #1
 8008d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d38:	4b33      	ldr	r3, [pc, #204]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d3c:	4b34      	ldr	r3, [pc, #208]	@ (8008e10 <HAL_RCC_OscConfig+0x6cc>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d44:	00d2      	lsls	r2, r2, #3
 8008d46:	4930      	ldr	r1, [pc, #192]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d50:	f023 020c 	bic.w	r2, r3, #12
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d58:	492b      	ldr	r1, [pc, #172]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d62:	f023 0202 	bic.w	r2, r3, #2
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6a:	4927      	ldr	r1, [pc, #156]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d70:	4b25      	ldr	r3, [pc, #148]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d74:	4a24      	ldr	r2, [pc, #144]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d7c:	4b22      	ldr	r3, [pc, #136]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d80:	4a21      	ldr	r2, [pc, #132]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d88:	4b1f      	ldr	r3, [pc, #124]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d94:	4b1c      	ldr	r3, [pc, #112]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d98:	4a1b      	ldr	r2, [pc, #108]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008d9a:	f043 0301 	orr.w	r3, r3, #1
 8008d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008da0:	4b19      	ldr	r3, [pc, #100]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a18      	ldr	r2, [pc, #96]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dac:	f7f9 fdf8 	bl	80029a0 <HAL_GetTick>
 8008db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db4:	f7f9 fdf4 	bl	80029a0 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e090      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dc6:	4b10      	ldr	r3, [pc, #64]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0f0      	beq.n	8008db4 <HAL_RCC_OscConfig+0x670>
 8008dd2:	e088      	b.n	8008ee6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de0:	f7f9 fdde 	bl	80029a0 <HAL_GetTick>
 8008de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008de6:	e008      	b.n	8008dfa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008de8:	f7f9 fdda 	bl	80029a0 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e076      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dfa:	4b03      	ldr	r3, [pc, #12]	@ (8008e08 <HAL_RCC_OscConfig+0x6c4>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f0      	bne.n	8008de8 <HAL_RCC_OscConfig+0x6a4>
 8008e06:	e06e      	b.n	8008ee6 <HAL_RCC_OscConfig+0x7a2>
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	fffffc0c 	.word	0xfffffc0c
 8008e10:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e14:	4b36      	ldr	r3, [pc, #216]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e1a:	4b35      	ldr	r3, [pc, #212]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d031      	beq.n	8008e8c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f003 0203 	and.w	r2, r3, #3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d12a      	bne.n	8008e8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	091b      	lsrs	r3, r3, #4
 8008e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d122      	bne.n	8008e8c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d11a      	bne.n	8008e8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	0a5b      	lsrs	r3, r3, #9
 8008e5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d111      	bne.n	8008e8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	0c1b      	lsrs	r3, r3, #16
 8008e6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d108      	bne.n	8008e8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	0e1b      	lsrs	r3, r3, #24
 8008e7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d001      	beq.n	8008e90 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e02b      	b.n	8008ee8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e90:	4b17      	ldr	r3, [pc, #92]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e94:	08db      	lsrs	r3, r3, #3
 8008e96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d01f      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008ea6:	4b12      	ldr	r3, [pc, #72]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eaa:	4a11      	ldr	r2, [pc, #68]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008eac:	f023 0301 	bic.w	r3, r3, #1
 8008eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008eb2:	f7f9 fd75 	bl	80029a0 <HAL_GetTick>
 8008eb6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008eb8:	bf00      	nop
 8008eba:	f7f9 fd71 	bl	80029a0 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d0f9      	beq.n	8008eba <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <HAL_RCC_OscConfig+0x7b0>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ed2:	00d2      	lsls	r2, r2, #3
 8008ed4:	4906      	ldr	r1, [pc, #24]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008eda:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	4a04      	ldr	r2, [pc, #16]	@ (8008ef0 <HAL_RCC_OscConfig+0x7ac>)
 8008ee0:	f043 0301 	orr.w	r3, r3, #1
 8008ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3730      	adds	r7, #48	@ 0x30
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	58024400 	.word	0x58024400
 8008ef4:	ffff0007 	.word	0xffff0007

08008ef8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e19c      	b.n	8009246 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8009138 <HAL_RCC_ClockConfig+0x240>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d910      	bls.n	8008f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f1a:	4b87      	ldr	r3, [pc, #540]	@ (8009138 <HAL_RCC_ClockConfig+0x240>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f023 020f 	bic.w	r2, r3, #15
 8008f22:	4985      	ldr	r1, [pc, #532]	@ (8009138 <HAL_RCC_ClockConfig+0x240>)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f2a:	4b83      	ldr	r3, [pc, #524]	@ (8009138 <HAL_RCC_ClockConfig+0x240>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 030f 	and.w	r3, r3, #15
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d001      	beq.n	8008f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e184      	b.n	8009246 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d010      	beq.n	8008f6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d908      	bls.n	8008f6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f58:	4b78      	ldr	r3, [pc, #480]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	4975      	ldr	r1, [pc, #468]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0308 	and.w	r3, r3, #8
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d010      	beq.n	8008f98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	4b70      	ldr	r3, [pc, #448]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d908      	bls.n	8008f98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f86:	4b6d      	ldr	r3, [pc, #436]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	496a      	ldr	r1, [pc, #424]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0310 	and.w	r3, r3, #16
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d010      	beq.n	8008fc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699a      	ldr	r2, [r3, #24]
 8008fa8:	4b64      	ldr	r3, [pc, #400]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d908      	bls.n	8008fc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fb4:	4b61      	ldr	r3, [pc, #388]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	495e      	ldr	r1, [pc, #376]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d010      	beq.n	8008ff4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69da      	ldr	r2, [r3, #28]
 8008fd6:	4b59      	ldr	r3, [pc, #356]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d908      	bls.n	8008ff4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fe2:	4b56      	ldr	r3, [pc, #344]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	4953      	ldr	r1, [pc, #332]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d010      	beq.n	8009022 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	4b4d      	ldr	r3, [pc, #308]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	f003 030f 	and.w	r3, r3, #15
 800900c:	429a      	cmp	r2, r3
 800900e:	d908      	bls.n	8009022 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009010:	4b4a      	ldr	r3, [pc, #296]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	f023 020f 	bic.w	r2, r3, #15
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	4947      	ldr	r1, [pc, #284]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 800901e:	4313      	orrs	r3, r2
 8009020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d055      	beq.n	80090da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800902e:	4b43      	ldr	r3, [pc, #268]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	4940      	ldr	r1, [pc, #256]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 800903c:	4313      	orrs	r3, r2
 800903e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d107      	bne.n	8009058 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009048:	4b3c      	ldr	r3, [pc, #240]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d121      	bne.n	8009098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e0f6      	b.n	8009246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	2b03      	cmp	r3, #3
 800905e:	d107      	bne.n	8009070 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009060:	4b36      	ldr	r3, [pc, #216]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d115      	bne.n	8009098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e0ea      	b.n	8009246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d107      	bne.n	8009088 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009078:	4b30      	ldr	r3, [pc, #192]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009080:	2b00      	cmp	r3, #0
 8009082:	d109      	bne.n	8009098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e0de      	b.n	8009246 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009088:	4b2c      	ldr	r3, [pc, #176]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e0d6      	b.n	8009246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009098:	4b28      	ldr	r3, [pc, #160]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	f023 0207 	bic.w	r2, r3, #7
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	4925      	ldr	r1, [pc, #148]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090aa:	f7f9 fc79 	bl	80029a0 <HAL_GetTick>
 80090ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b0:	e00a      	b.n	80090c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090b2:	f7f9 fc75 	bl	80029a0 <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d901      	bls.n	80090c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e0be      	b.n	8009246 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090c8:	4b1c      	ldr	r3, [pc, #112]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	00db      	lsls	r3, r3, #3
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d1eb      	bne.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d010      	beq.n	8009108 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	4b14      	ldr	r3, [pc, #80]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	f003 030f 	and.w	r3, r3, #15
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d208      	bcs.n	8009108 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090f6:	4b11      	ldr	r3, [pc, #68]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	f023 020f 	bic.w	r2, r3, #15
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	490e      	ldr	r1, [pc, #56]	@ (800913c <HAL_RCC_ClockConfig+0x244>)
 8009104:	4313      	orrs	r3, r2
 8009106:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009108:	4b0b      	ldr	r3, [pc, #44]	@ (8009138 <HAL_RCC_ClockConfig+0x240>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 030f 	and.w	r3, r3, #15
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d214      	bcs.n	8009140 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009116:	4b08      	ldr	r3, [pc, #32]	@ (8009138 <HAL_RCC_ClockConfig+0x240>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f023 020f 	bic.w	r2, r3, #15
 800911e:	4906      	ldr	r1, [pc, #24]	@ (8009138 <HAL_RCC_ClockConfig+0x240>)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	4313      	orrs	r3, r2
 8009124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009126:	4b04      	ldr	r3, [pc, #16]	@ (8009138 <HAL_RCC_ClockConfig+0x240>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	429a      	cmp	r2, r3
 8009132:	d005      	beq.n	8009140 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e086      	b.n	8009246 <HAL_RCC_ClockConfig+0x34e>
 8009138:	52002000 	.word	0x52002000
 800913c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0304 	and.w	r3, r3, #4
 8009148:	2b00      	cmp	r3, #0
 800914a:	d010      	beq.n	800916e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	4b3f      	ldr	r3, [pc, #252]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009158:	429a      	cmp	r2, r3
 800915a:	d208      	bcs.n	800916e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800915c:	4b3c      	ldr	r3, [pc, #240]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	4939      	ldr	r1, [pc, #228]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 800916a:	4313      	orrs	r3, r2
 800916c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0308 	and.w	r3, r3, #8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d010      	beq.n	800919c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	695a      	ldr	r2, [r3, #20]
 800917e:	4b34      	ldr	r3, [pc, #208]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009186:	429a      	cmp	r2, r3
 8009188:	d208      	bcs.n	800919c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800918a:	4b31      	ldr	r3, [pc, #196]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	492e      	ldr	r1, [pc, #184]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 8009198:	4313      	orrs	r3, r2
 800919a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0310 	and.w	r3, r3, #16
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d010      	beq.n	80091ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699a      	ldr	r2, [r3, #24]
 80091ac:	4b28      	ldr	r3, [pc, #160]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d208      	bcs.n	80091ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091b8:	4b25      	ldr	r3, [pc, #148]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	4922      	ldr	r1, [pc, #136]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0320 	and.w	r3, r3, #32
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d010      	beq.n	80091f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69da      	ldr	r2, [r3, #28]
 80091da:	4b1d      	ldr	r3, [pc, #116]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d208      	bcs.n	80091f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	4917      	ldr	r1, [pc, #92]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80091f8:	f000 f834 	bl	8009264 <HAL_RCC_GetSysClockFreq>
 80091fc:	4602      	mov	r2, r0
 80091fe:	4b14      	ldr	r3, [pc, #80]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	f003 030f 	and.w	r3, r3, #15
 8009208:	4912      	ldr	r1, [pc, #72]	@ (8009254 <HAL_RCC_ClockConfig+0x35c>)
 800920a:	5ccb      	ldrb	r3, [r1, r3]
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	fa22 f303 	lsr.w	r3, r2, r3
 8009214:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009216:	4b0e      	ldr	r3, [pc, #56]	@ (8009250 <HAL_RCC_ClockConfig+0x358>)
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	4a0d      	ldr	r2, [pc, #52]	@ (8009254 <HAL_RCC_ClockConfig+0x35c>)
 8009220:	5cd3      	ldrb	r3, [r2, r3]
 8009222:	f003 031f 	and.w	r3, r3, #31
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
 800922c:	4a0a      	ldr	r2, [pc, #40]	@ (8009258 <HAL_RCC_ClockConfig+0x360>)
 800922e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009230:	4a0a      	ldr	r2, [pc, #40]	@ (800925c <HAL_RCC_ClockConfig+0x364>)
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009236:	4b0a      	ldr	r3, [pc, #40]	@ (8009260 <HAL_RCC_ClockConfig+0x368>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4618      	mov	r0, r3
 800923c:	f7f9 fb66 	bl	800290c <HAL_InitTick>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	58024400 	.word	0x58024400
 8009254:	08012a80 	.word	0x08012a80
 8009258:	24000010 	.word	0x24000010
 800925c:	2400000c 	.word	0x2400000c
 8009260:	24000014 	.word	0x24000014

08009264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009264:	b480      	push	{r7}
 8009266:	b089      	sub	sp, #36	@ 0x24
 8009268:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800926a:	4bb3      	ldr	r3, [pc, #716]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009272:	2b18      	cmp	r3, #24
 8009274:	f200 8155 	bhi.w	8009522 <HAL_RCC_GetSysClockFreq+0x2be>
 8009278:	a201      	add	r2, pc, #4	@ (adr r2, 8009280 <HAL_RCC_GetSysClockFreq+0x1c>)
 800927a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927e:	bf00      	nop
 8009280:	080092e5 	.word	0x080092e5
 8009284:	08009523 	.word	0x08009523
 8009288:	08009523 	.word	0x08009523
 800928c:	08009523 	.word	0x08009523
 8009290:	08009523 	.word	0x08009523
 8009294:	08009523 	.word	0x08009523
 8009298:	08009523 	.word	0x08009523
 800929c:	08009523 	.word	0x08009523
 80092a0:	0800930b 	.word	0x0800930b
 80092a4:	08009523 	.word	0x08009523
 80092a8:	08009523 	.word	0x08009523
 80092ac:	08009523 	.word	0x08009523
 80092b0:	08009523 	.word	0x08009523
 80092b4:	08009523 	.word	0x08009523
 80092b8:	08009523 	.word	0x08009523
 80092bc:	08009523 	.word	0x08009523
 80092c0:	08009311 	.word	0x08009311
 80092c4:	08009523 	.word	0x08009523
 80092c8:	08009523 	.word	0x08009523
 80092cc:	08009523 	.word	0x08009523
 80092d0:	08009523 	.word	0x08009523
 80092d4:	08009523 	.word	0x08009523
 80092d8:	08009523 	.word	0x08009523
 80092dc:	08009523 	.word	0x08009523
 80092e0:	08009317 	.word	0x08009317
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092e4:	4b94      	ldr	r3, [pc, #592]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d009      	beq.n	8009304 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092f0:	4b91      	ldr	r3, [pc, #580]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	08db      	lsrs	r3, r3, #3
 80092f6:	f003 0303 	and.w	r3, r3, #3
 80092fa:	4a90      	ldr	r2, [pc, #576]	@ (800953c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009300:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009302:	e111      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009304:	4b8d      	ldr	r3, [pc, #564]	@ (800953c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009306:	61bb      	str	r3, [r7, #24]
      break;
 8009308:	e10e      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800930a:	4b8d      	ldr	r3, [pc, #564]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800930c:	61bb      	str	r3, [r7, #24]
      break;
 800930e:	e10b      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009310:	4b8c      	ldr	r3, [pc, #560]	@ (8009544 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009312:	61bb      	str	r3, [r7, #24]
      break;
 8009314:	e108      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009316:	4b88      	ldr	r3, [pc, #544]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931a:	f003 0303 	and.w	r3, r3, #3
 800931e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009320:	4b85      	ldr	r3, [pc, #532]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009324:	091b      	lsrs	r3, r3, #4
 8009326:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800932a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800932c:	4b82      	ldr	r3, [pc, #520]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009336:	4b80      	ldr	r3, [pc, #512]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800933a:	08db      	lsrs	r3, r3, #3
 800933c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	fb02 f303 	mul.w	r3, r2, r3
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 80e1 	beq.w	800951c <HAL_RCC_GetSysClockFreq+0x2b8>
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b02      	cmp	r3, #2
 800935e:	f000 8083 	beq.w	8009468 <HAL_RCC_GetSysClockFreq+0x204>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b02      	cmp	r3, #2
 8009366:	f200 80a1 	bhi.w	80094ac <HAL_RCC_GetSysClockFreq+0x248>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_RCC_GetSysClockFreq+0x114>
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d056      	beq.n	8009424 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009376:	e099      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009378:	4b6f      	ldr	r3, [pc, #444]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b00      	cmp	r3, #0
 8009382:	d02d      	beq.n	80093e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009384:	4b6c      	ldr	r3, [pc, #432]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	08db      	lsrs	r3, r3, #3
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	4a6b      	ldr	r2, [pc, #428]	@ (800953c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
 8009394:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	ee07 3a90 	vmov	s15, r3
 800939c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ae:	4b62      	ldr	r3, [pc, #392]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093be:	ed97 6a02 	vldr	s12, [r7, #8]
 80093c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009548 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80093de:	e087      	b.n	80094f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800954c <HAL_RCC_GetSysClockFreq+0x2e8>
 80093ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f2:	4b51      	ldr	r3, [pc, #324]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009402:	ed97 6a02 	vldr	s12, [r7, #8]
 8009406:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009548 <HAL_RCC_GetSysClockFreq+0x2e4>
 800940a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009422:	e065      	b.n	80094f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009550 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009436:	4b40      	ldr	r3, [pc, #256]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009446:	ed97 6a02 	vldr	s12, [r7, #8]
 800944a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009548 <HAL_RCC_GetSysClockFreq+0x2e4>
 800944e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009466:	e043      	b.n	80094f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009472:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009554 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947a:	4b2f      	ldr	r3, [pc, #188]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800947c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948a:	ed97 6a02 	vldr	s12, [r7, #8]
 800948e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009548 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800949e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094aa:	e021      	b.n	80094f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009550 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094be:	4b1e      	ldr	r3, [pc, #120]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80094d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009548 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80094f0:	4b11      	ldr	r3, [pc, #68]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f4:	0a5b      	lsrs	r3, r3, #9
 80094f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094fa:	3301      	adds	r3, #1
 80094fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	ee07 3a90 	vmov	s15, r3
 8009504:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009508:	edd7 6a07 	vldr	s13, [r7, #28]
 800950c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009514:	ee17 3a90 	vmov	r3, s15
 8009518:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800951a:	e005      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	61bb      	str	r3, [r7, #24]
      break;
 8009520:	e002      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009522:	4b07      	ldr	r3, [pc, #28]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009524:	61bb      	str	r3, [r7, #24]
      break;
 8009526:	bf00      	nop
  }

  return sysclockfreq;
 8009528:	69bb      	ldr	r3, [r7, #24]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3724      	adds	r7, #36	@ 0x24
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	58024400 	.word	0x58024400
 800953c:	03d09000 	.word	0x03d09000
 8009540:	003d0900 	.word	0x003d0900
 8009544:	016e3600 	.word	0x016e3600
 8009548:	46000000 	.word	0x46000000
 800954c:	4c742400 	.word	0x4c742400
 8009550:	4a742400 	.word	0x4a742400
 8009554:	4bb71b00 	.word	0x4bb71b00

08009558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800955e:	f7ff fe81 	bl	8009264 <HAL_RCC_GetSysClockFreq>
 8009562:	4602      	mov	r2, r0
 8009564:	4b10      	ldr	r3, [pc, #64]	@ (80095a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	0a1b      	lsrs	r3, r3, #8
 800956a:	f003 030f 	and.w	r3, r3, #15
 800956e:	490f      	ldr	r1, [pc, #60]	@ (80095ac <HAL_RCC_GetHCLKFreq+0x54>)
 8009570:	5ccb      	ldrb	r3, [r1, r3]
 8009572:	f003 031f 	and.w	r3, r3, #31
 8009576:	fa22 f303 	lsr.w	r3, r2, r3
 800957a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800957c:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	4a09      	ldr	r2, [pc, #36]	@ (80095ac <HAL_RCC_GetHCLKFreq+0x54>)
 8009586:	5cd3      	ldrb	r3, [r2, r3]
 8009588:	f003 031f 	and.w	r3, r3, #31
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	fa22 f303 	lsr.w	r3, r2, r3
 8009592:	4a07      	ldr	r2, [pc, #28]	@ (80095b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009594:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009596:	4a07      	ldr	r2, [pc, #28]	@ (80095b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800959c:	4b04      	ldr	r3, [pc, #16]	@ (80095b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800959e:	681b      	ldr	r3, [r3, #0]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	58024400 	.word	0x58024400
 80095ac:	08012a80 	.word	0x08012a80
 80095b0:	24000010 	.word	0x24000010
 80095b4:	2400000c 	.word	0x2400000c

080095b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095bc:	f7ff ffcc 	bl	8009558 <HAL_RCC_GetHCLKFreq>
 80095c0:	4602      	mov	r2, r0
 80095c2:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	091b      	lsrs	r3, r3, #4
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	4904      	ldr	r1, [pc, #16]	@ (80095e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095ce:	5ccb      	ldrb	r3, [r1, r3]
 80095d0:	f003 031f 	and.w	r3, r3, #31
 80095d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095d8:	4618      	mov	r0, r3
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	58024400 	.word	0x58024400
 80095e0:	08012a80 	.word	0x08012a80

080095e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095e8:	f7ff ffb6 	bl	8009558 <HAL_RCC_GetHCLKFreq>
 80095ec:	4602      	mov	r2, r0
 80095ee:	4b06      	ldr	r3, [pc, #24]	@ (8009608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	0a1b      	lsrs	r3, r3, #8
 80095f4:	f003 0307 	and.w	r3, r3, #7
 80095f8:	4904      	ldr	r1, [pc, #16]	@ (800960c <HAL_RCC_GetPCLK2Freq+0x28>)
 80095fa:	5ccb      	ldrb	r3, [r1, r3]
 80095fc:	f003 031f 	and.w	r3, r3, #31
 8009600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009604:	4618      	mov	r0, r3
 8009606:	bd80      	pop	{r7, pc}
 8009608:	58024400 	.word	0x58024400
 800960c:	08012a80 	.word	0x08012a80

08009610 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009614:	b0c6      	sub	sp, #280	@ 0x118
 8009616:	af00      	add	r7, sp, #0
 8009618:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800961c:	2300      	movs	r3, #0
 800961e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009622:	2300      	movs	r3, #0
 8009624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009634:	2500      	movs	r5, #0
 8009636:	ea54 0305 	orrs.w	r3, r4, r5
 800963a:	d049      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800963c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009642:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009646:	d02f      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009648:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800964c:	d828      	bhi.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800964e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009652:	d01a      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009654:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009658:	d822      	bhi.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800965e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009662:	d007      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009664:	e01c      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009666:	4bab      	ldr	r3, [pc, #684]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966a:	4aaa      	ldr	r2, [pc, #680]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800966c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009670:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009672:	e01a      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009678:	3308      	adds	r3, #8
 800967a:	2102      	movs	r1, #2
 800967c:	4618      	mov	r0, r3
 800967e:	f002 fa49 	bl	800bb14 <RCCEx_PLL2_Config>
 8009682:	4603      	mov	r3, r0
 8009684:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009688:	e00f      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800968a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968e:	3328      	adds	r3, #40	@ 0x28
 8009690:	2102      	movs	r1, #2
 8009692:	4618      	mov	r0, r3
 8009694:	f002 faf0 	bl	800bc78 <RCCEx_PLL3_Config>
 8009698:	4603      	mov	r3, r0
 800969a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800969e:	e004      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096a6:	e000      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80096a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10a      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80096b2:	4b98      	ldr	r3, [pc, #608]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80096ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096c0:	4a94      	ldr	r2, [pc, #592]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096c2:	430b      	orrs	r3, r1
 80096c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80096c6:	e003      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80096dc:	f04f 0900 	mov.w	r9, #0
 80096e0:	ea58 0309 	orrs.w	r3, r8, r9
 80096e4:	d047      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80096e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	d82a      	bhi.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80096f0:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	0800970d 	.word	0x0800970d
 80096fc:	0800971b 	.word	0x0800971b
 8009700:	08009731 	.word	0x08009731
 8009704:	0800974f 	.word	0x0800974f
 8009708:	0800974f 	.word	0x0800974f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800970c:	4b81      	ldr	r3, [pc, #516]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800970e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009710:	4a80      	ldr	r2, [pc, #512]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009718:	e01a      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800971a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971e:	3308      	adds	r3, #8
 8009720:	2100      	movs	r1, #0
 8009722:	4618      	mov	r0, r3
 8009724:	f002 f9f6 	bl	800bb14 <RCCEx_PLL2_Config>
 8009728:	4603      	mov	r3, r0
 800972a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800972e:	e00f      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009734:	3328      	adds	r3, #40	@ 0x28
 8009736:	2100      	movs	r1, #0
 8009738:	4618      	mov	r0, r3
 800973a:	f002 fa9d 	bl	800bc78 <RCCEx_PLL3_Config>
 800973e:	4603      	mov	r3, r0
 8009740:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009744:	e004      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800974c:	e000      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800974e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009758:	4b6e      	ldr	r3, [pc, #440]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800975a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800975c:	f023 0107 	bic.w	r1, r3, #7
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009766:	4a6b      	ldr	r2, [pc, #428]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009768:	430b      	orrs	r3, r1
 800976a:	6513      	str	r3, [r2, #80]	@ 0x50
 800976c:	e003      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009772:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009782:	f04f 0b00 	mov.w	fp, #0
 8009786:	ea5a 030b 	orrs.w	r3, sl, fp
 800978a:	d05b      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800978c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009790:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009794:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009798:	d03b      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800979a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800979e:	d834      	bhi.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097a4:	d037      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80097a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097aa:	d82e      	bhi.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097b0:	d033      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80097b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097b6:	d828      	bhi.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097bc:	d01a      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80097be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097c2:	d822      	bhi.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80097c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097cc:	d007      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80097ce:	e01c      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d0:	4b50      	ldr	r3, [pc, #320]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d4:	4a4f      	ldr	r2, [pc, #316]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097dc:	e01e      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e2:	3308      	adds	r3, #8
 80097e4:	2100      	movs	r1, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f002 f994 	bl	800bb14 <RCCEx_PLL2_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097f2:	e013      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f8:	3328      	adds	r3, #40	@ 0x28
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f002 fa3b 	bl	800bc78 <RCCEx_PLL3_Config>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009808:	e008      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009810:	e004      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009812:	bf00      	nop
 8009814:	e002      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800981a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800981c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10b      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009824:	4b3b      	ldr	r3, [pc, #236]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009828:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009834:	4a37      	ldr	r2, [pc, #220]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009836:	430b      	orrs	r3, r1
 8009838:	6593      	str	r3, [r2, #88]	@ 0x58
 800983a:	e003      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009850:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009854:	2300      	movs	r3, #0
 8009856:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800985a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800985e:	460b      	mov	r3, r1
 8009860:	4313      	orrs	r3, r2
 8009862:	d05d      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009868:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800986c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009870:	d03b      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009872:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009876:	d834      	bhi.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009878:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800987c:	d037      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800987e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009882:	d82e      	bhi.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009884:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009888:	d033      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800988a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800988e:	d828      	bhi.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009890:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009894:	d01a      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009896:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800989a:	d822      	bhi.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80098a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098a4:	d007      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80098a6:	e01c      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	4a19      	ldr	r2, [pc, #100]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098b4:	e01e      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ba:	3308      	adds	r3, #8
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f002 f928 	bl	800bb14 <RCCEx_PLL2_Config>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098ca:	e013      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d0:	3328      	adds	r3, #40	@ 0x28
 80098d2:	2100      	movs	r1, #0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f002 f9cf 	bl	800bc78 <RCCEx_PLL3_Config>
 80098da:	4603      	mov	r3, r0
 80098dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098e0:	e008      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098e8:	e004      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098ea:	bf00      	nop
 80098ec:	e002      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098ee:	bf00      	nop
 80098f0:	e000      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10d      	bne.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098fc:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009900:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009908:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800990c:	4a01      	ldr	r2, [pc, #4]	@ (8009914 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800990e:	430b      	orrs	r3, r1
 8009910:	6593      	str	r3, [r2, #88]	@ 0x58
 8009912:	e005      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800991c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800992c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009930:	2300      	movs	r3, #0
 8009932:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009936:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800993a:	460b      	mov	r3, r1
 800993c:	4313      	orrs	r3, r2
 800993e:	d03a      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009946:	2b30      	cmp	r3, #48	@ 0x30
 8009948:	d01f      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800994a:	2b30      	cmp	r3, #48	@ 0x30
 800994c:	d819      	bhi.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800994e:	2b20      	cmp	r3, #32
 8009950:	d00c      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009952:	2b20      	cmp	r3, #32
 8009954:	d815      	bhi.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009956:	2b00      	cmp	r3, #0
 8009958:	d019      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800995a:	2b10      	cmp	r3, #16
 800995c:	d111      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800995e:	4baa      	ldr	r3, [pc, #680]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009962:	4aa9      	ldr	r2, [pc, #676]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800996a:	e011      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009970:	3308      	adds	r3, #8
 8009972:	2102      	movs	r1, #2
 8009974:	4618      	mov	r0, r3
 8009976:	f002 f8cd 	bl	800bb14 <RCCEx_PLL2_Config>
 800997a:	4603      	mov	r3, r0
 800997c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009980:	e006      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009988:	e002      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800998a:	bf00      	nop
 800998c:	e000      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800998e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009998:	4b9b      	ldr	r3, [pc, #620]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800999a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800999c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80099a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a6:	4a98      	ldr	r2, [pc, #608]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099a8:	430b      	orrs	r3, r1
 80099aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099ac:	e003      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80099c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099c6:	2300      	movs	r3, #0
 80099c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80099cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80099d0:	460b      	mov	r3, r1
 80099d2:	4313      	orrs	r3, r2
 80099d4:	d051      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80099d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099e0:	d035      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80099e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099e6:	d82e      	bhi.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099ec:	d031      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80099ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099f2:	d828      	bhi.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099f8:	d01a      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80099fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099fe:	d822      	bhi.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a08:	d007      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009a0a:	e01c      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a10:	4a7d      	ldr	r2, [pc, #500]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a18:	e01c      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1e:	3308      	adds	r3, #8
 8009a20:	2100      	movs	r1, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f002 f876 	bl	800bb14 <RCCEx_PLL2_Config>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a2e:	e011      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a34:	3328      	adds	r3, #40	@ 0x28
 8009a36:	2100      	movs	r1, #0
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f002 f91d 	bl	800bc78 <RCCEx_PLL3_Config>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a44:	e006      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a4c:	e002      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a4e:	bf00      	nop
 8009a50:	e000      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a6a:	4a67      	ldr	r2, [pc, #412]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a70:	e003      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009a86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a90:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4313      	orrs	r3, r2
 8009a98:	d053      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009aa4:	d033      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009aaa:	d82c      	bhi.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009aac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ab0:	d02f      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ab6:	d826      	bhi.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009abc:	d02b      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009abe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ac2:	d820      	bhi.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ac8:	d012      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ace:	d81a      	bhi.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d022      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ad8:	d115      	bne.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ade:	3308      	adds	r3, #8
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f002 f816 	bl	800bb14 <RCCEx_PLL2_Config>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009aee:	e015      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af4:	3328      	adds	r3, #40	@ 0x28
 8009af6:	2101      	movs	r1, #1
 8009af8:	4618      	mov	r0, r3
 8009afa:	f002 f8bd 	bl	800bc78 <RCCEx_PLL3_Config>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b04:	e00a      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b0c:	e006      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b0e:	bf00      	nop
 8009b10:	e004      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b12:	bf00      	nop
 8009b14:	e002      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b16:	bf00      	nop
 8009b18:	e000      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b24:	4b38      	ldr	r3, [pc, #224]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b32:	4a35      	ldr	r2, [pc, #212]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b34:	430b      	orrs	r3, r1
 8009b36:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b38:	e003      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b52:	2300      	movs	r3, #0
 8009b54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b58:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	d058      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b6e:	d033      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b74:	d82c      	bhi.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b7a:	d02f      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b80:	d826      	bhi.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b86:	d02b      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009b88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b8c:	d820      	bhi.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b92:	d012      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b98:	d81a      	bhi.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d022      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ba2:	d115      	bne.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba8:	3308      	adds	r3, #8
 8009baa:	2101      	movs	r1, #1
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 ffb1 	bl	800bb14 <RCCEx_PLL2_Config>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bb8:	e015      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bbe:	3328      	adds	r3, #40	@ 0x28
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 f858 	bl	800bc78 <RCCEx_PLL3_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bce:	e00a      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bd6:	e006      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bd8:	bf00      	nop
 8009bda:	e004      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bdc:	bf00      	nop
 8009bde:	e002      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009be0:	bf00      	nop
 8009be2:	e000      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10e      	bne.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bee:	4b06      	ldr	r3, [pc, #24]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bf2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009bfe:	4a02      	ldr	r2, [pc, #8]	@ (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c00:	430b      	orrs	r3, r1
 8009c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c04:	e006      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009c06:	bf00      	nop
 8009c08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009c20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c24:	2300      	movs	r3, #0
 8009c26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009c2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4313      	orrs	r3, r2
 8009c32:	d037      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c3e:	d00e      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c44:	d816      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d018      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c4e:	d111      	bne.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c50:	4bc4      	ldr	r3, [pc, #784]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c54:	4ac3      	ldr	r2, [pc, #780]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c5c:	e00f      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c62:	3308      	adds	r3, #8
 8009c64:	2101      	movs	r1, #1
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 ff54 	bl	800bb14 <RCCEx_PLL2_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c72:	e004      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c7a:	e000      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c86:	4bb7      	ldr	r3, [pc, #732]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c94:	4ab3      	ldr	r2, [pc, #716]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c96:	430b      	orrs	r3, r1
 8009c98:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c9a:	e003      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	d039      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d81c      	bhi.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009cce:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd4:	08009d11 	.word	0x08009d11
 8009cd8:	08009ce5 	.word	0x08009ce5
 8009cdc:	08009cf3 	.word	0x08009cf3
 8009ce0:	08009d11 	.word	0x08009d11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ce4:	4b9f      	ldr	r3, [pc, #636]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce8:	4a9e      	ldr	r2, [pc, #632]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cf0:	e00f      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	2102      	movs	r1, #2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f001 ff0a 	bl	800bb14 <RCCEx_PLL2_Config>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d06:	e004      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d0e:	e000      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d1a:	4b92      	ldr	r3, [pc, #584]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d1e:	f023 0103 	bic.w	r1, r3, #3
 8009d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d28:	4a8e      	ldr	r2, [pc, #568]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d2a:	430b      	orrs	r3, r1
 8009d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d2e:	e003      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009d44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4313      	orrs	r3, r2
 8009d56:	f000 8099 	beq.w	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d5a:	4b83      	ldr	r3, [pc, #524]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a82      	ldr	r2, [pc, #520]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d66:	f7f8 fe1b 	bl	80029a0 <HAL_GetTick>
 8009d6a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d6e:	e00b      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d70:	f7f8 fe16 	bl	80029a0 <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	2b64      	cmp	r3, #100	@ 0x64
 8009d7e:	d903      	bls.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d86:	e005      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d88:	4b77      	ldr	r3, [pc, #476]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d0ed      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d173      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d9c:	4b71      	ldr	r3, [pc, #452]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009da8:	4053      	eors	r3, r2
 8009daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d015      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009db2:	4b6c      	ldr	r3, [pc, #432]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dbe:	4b69      	ldr	r3, [pc, #420]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dc2:	4a68      	ldr	r2, [pc, #416]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009dca:	4b66      	ldr	r3, [pc, #408]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dce:	4a65      	ldr	r2, [pc, #404]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009dd6:	4a63      	ldr	r2, [pc, #396]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ddc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dea:	d118      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dec:	f7f8 fdd8 	bl	80029a0 <HAL_GetTick>
 8009df0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009df4:	e00d      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009df6:	f7f8 fdd3 	bl	80029a0 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009e00:	1ad2      	subs	r2, r2, r3
 8009e02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d903      	bls.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009e10:	e005      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e12:	4b54      	ldr	r3, [pc, #336]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0eb      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d129      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e36:	d10e      	bne.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009e38:	4b4a      	ldr	r3, [pc, #296]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e48:	091a      	lsrs	r2, r3, #4
 8009e4a:	4b48      	ldr	r3, [pc, #288]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	4a45      	ldr	r2, [pc, #276]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e50:	430b      	orrs	r3, r1
 8009e52:	6113      	str	r3, [r2, #16]
 8009e54:	e005      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009e56:	4b43      	ldr	r3, [pc, #268]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	4a42      	ldr	r2, [pc, #264]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e60:	6113      	str	r3, [r2, #16]
 8009e62:	4b40      	ldr	r3, [pc, #256]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e64:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e72:	4a3c      	ldr	r2, [pc, #240]	@ (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e74:	430b      	orrs	r3, r1
 8009e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e78:	e008      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009e82:	e003      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f002 0301 	and.w	r3, r2, #1
 8009e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009ea2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	f000 808f 	beq.w	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eb4:	2b28      	cmp	r3, #40	@ 0x28
 8009eb6:	d871      	bhi.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009fa5 	.word	0x08009fa5
 8009ec4:	08009f9d 	.word	0x08009f9d
 8009ec8:	08009f9d 	.word	0x08009f9d
 8009ecc:	08009f9d 	.word	0x08009f9d
 8009ed0:	08009f9d 	.word	0x08009f9d
 8009ed4:	08009f9d 	.word	0x08009f9d
 8009ed8:	08009f9d 	.word	0x08009f9d
 8009edc:	08009f9d 	.word	0x08009f9d
 8009ee0:	08009f71 	.word	0x08009f71
 8009ee4:	08009f9d 	.word	0x08009f9d
 8009ee8:	08009f9d 	.word	0x08009f9d
 8009eec:	08009f9d 	.word	0x08009f9d
 8009ef0:	08009f9d 	.word	0x08009f9d
 8009ef4:	08009f9d 	.word	0x08009f9d
 8009ef8:	08009f9d 	.word	0x08009f9d
 8009efc:	08009f9d 	.word	0x08009f9d
 8009f00:	08009f87 	.word	0x08009f87
 8009f04:	08009f9d 	.word	0x08009f9d
 8009f08:	08009f9d 	.word	0x08009f9d
 8009f0c:	08009f9d 	.word	0x08009f9d
 8009f10:	08009f9d 	.word	0x08009f9d
 8009f14:	08009f9d 	.word	0x08009f9d
 8009f18:	08009f9d 	.word	0x08009f9d
 8009f1c:	08009f9d 	.word	0x08009f9d
 8009f20:	08009fa5 	.word	0x08009fa5
 8009f24:	08009f9d 	.word	0x08009f9d
 8009f28:	08009f9d 	.word	0x08009f9d
 8009f2c:	08009f9d 	.word	0x08009f9d
 8009f30:	08009f9d 	.word	0x08009f9d
 8009f34:	08009f9d 	.word	0x08009f9d
 8009f38:	08009f9d 	.word	0x08009f9d
 8009f3c:	08009f9d 	.word	0x08009f9d
 8009f40:	08009fa5 	.word	0x08009fa5
 8009f44:	08009f9d 	.word	0x08009f9d
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009f9d 	.word	0x08009f9d
 8009f50:	08009f9d 	.word	0x08009f9d
 8009f54:	08009f9d 	.word	0x08009f9d
 8009f58:	08009f9d 	.word	0x08009f9d
 8009f5c:	08009f9d 	.word	0x08009f9d
 8009f60:	08009fa5 	.word	0x08009fa5
 8009f64:	58024400 	.word	0x58024400
 8009f68:	58024800 	.word	0x58024800
 8009f6c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f74:	3308      	adds	r3, #8
 8009f76:	2101      	movs	r1, #1
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f001 fdcb 	bl	800bb14 <RCCEx_PLL2_Config>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f84:	e00f      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8a:	3328      	adds	r3, #40	@ 0x28
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f001 fe72 	bl	800bc78 <RCCEx_PLL3_Config>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f9a:	e004      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fa2:	e000      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fae:	4bbf      	ldr	r3, [pc, #764]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fbc:	4abb      	ldr	r2, [pc, #748]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fbe:	430b      	orrs	r3, r1
 8009fc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fc2:	e003      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f002 0302 	and.w	r3, r2, #2
 8009fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fe2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	d041      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ff2:	2b05      	cmp	r3, #5
 8009ff4:	d824      	bhi.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a049 	.word	0x0800a049
 800a000:	0800a015 	.word	0x0800a015
 800a004:	0800a02b 	.word	0x0800a02b
 800a008:	0800a049 	.word	0x0800a049
 800a00c:	0800a049 	.word	0x0800a049
 800a010:	0800a049 	.word	0x0800a049
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a018:	3308      	adds	r3, #8
 800a01a:	2101      	movs	r1, #1
 800a01c:	4618      	mov	r0, r3
 800a01e:	f001 fd79 	bl	800bb14 <RCCEx_PLL2_Config>
 800a022:	4603      	mov	r3, r0
 800a024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a028:	e00f      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a02e:	3328      	adds	r3, #40	@ 0x28
 800a030:	2101      	movs	r1, #1
 800a032:	4618      	mov	r0, r3
 800a034:	f001 fe20 	bl	800bc78 <RCCEx_PLL3_Config>
 800a038:	4603      	mov	r3, r0
 800a03a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a03e:	e004      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a046:	e000      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a04a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a052:	4b96      	ldr	r3, [pc, #600]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a056:	f023 0107 	bic.w	r1, r3, #7
 800a05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a060:	4a92      	ldr	r2, [pc, #584]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a062:	430b      	orrs	r3, r1
 800a064:	6553      	str	r3, [r2, #84]	@ 0x54
 800a066:	e003      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a06c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	f002 0304 	and.w	r3, r2, #4
 800a07c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a080:	2300      	movs	r3, #0
 800a082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a086:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a08a:	460b      	mov	r3, r1
 800a08c:	4313      	orrs	r3, r2
 800a08e:	d044      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a098:	2b05      	cmp	r3, #5
 800a09a:	d825      	bhi.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a09c:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a2:	bf00      	nop
 800a0a4:	0800a0f1 	.word	0x0800a0f1
 800a0a8:	0800a0bd 	.word	0x0800a0bd
 800a0ac:	0800a0d3 	.word	0x0800a0d3
 800a0b0:	0800a0f1 	.word	0x0800a0f1
 800a0b4:	0800a0f1 	.word	0x0800a0f1
 800a0b8:	0800a0f1 	.word	0x0800a0f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f001 fd25 	bl	800bb14 <RCCEx_PLL2_Config>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0d0:	e00f      	b.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d6:	3328      	adds	r3, #40	@ 0x28
 800a0d8:	2101      	movs	r1, #1
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 fdcc 	bl	800bc78 <RCCEx_PLL3_Config>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0e6:	e004      	b.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0ee:	e000      	b.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a0f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10b      	bne.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0fa:	4b6c      	ldr	r3, [pc, #432]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a0fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fe:	f023 0107 	bic.w	r1, r3, #7
 800a102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a10a:	4a68      	ldr	r2, [pc, #416]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a10c:	430b      	orrs	r3, r1
 800a10e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a110:	e003      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a112:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a116:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	f002 0320 	and.w	r3, r2, #32
 800a126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a12a:	2300      	movs	r3, #0
 800a12c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a130:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a134:	460b      	mov	r3, r1
 800a136:	4313      	orrs	r3, r2
 800a138:	d055      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a13e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a146:	d033      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a14c:	d82c      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a14e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a152:	d02f      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a158:	d826      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a15a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a15e:	d02b      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a164:	d820      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a16a:	d012      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a16c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a170:	d81a      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d022      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a17a:	d115      	bne.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a180:	3308      	adds	r3, #8
 800a182:	2100      	movs	r1, #0
 800a184:	4618      	mov	r0, r3
 800a186:	f001 fcc5 	bl	800bb14 <RCCEx_PLL2_Config>
 800a18a:	4603      	mov	r3, r0
 800a18c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a190:	e015      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a196:	3328      	adds	r3, #40	@ 0x28
 800a198:	2102      	movs	r1, #2
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 fd6c 	bl	800bc78 <RCCEx_PLL3_Config>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1a6:	e00a      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1ae:	e006      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1b0:	bf00      	nop
 800a1b2:	e004      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1b4:	bf00      	nop
 800a1b6:	e002      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1b8:	bf00      	nop
 800a1ba:	e000      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1c6:	4b39      	ldr	r3, [pc, #228]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1d6:	4a35      	ldr	r2, [pc, #212]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1dc:	e003      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a1f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a200:	460b      	mov	r3, r1
 800a202:	4313      	orrs	r3, r2
 800a204:	d058      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a20a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a20e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a212:	d033      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a214:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a218:	d82c      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a21a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a21e:	d02f      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a224:	d826      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a22a:	d02b      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a22c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a230:	d820      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a236:	d012      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a23c:	d81a      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d022      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a246:	d115      	bne.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a24c:	3308      	adds	r3, #8
 800a24e:	2100      	movs	r1, #0
 800a250:	4618      	mov	r0, r3
 800a252:	f001 fc5f 	bl	800bb14 <RCCEx_PLL2_Config>
 800a256:	4603      	mov	r3, r0
 800a258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a25c:	e015      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a262:	3328      	adds	r3, #40	@ 0x28
 800a264:	2102      	movs	r1, #2
 800a266:	4618      	mov	r0, r3
 800a268:	f001 fd06 	bl	800bc78 <RCCEx_PLL3_Config>
 800a26c:	4603      	mov	r3, r0
 800a26e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a272:	e00a      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a27a:	e006      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a27c:	bf00      	nop
 800a27e:	e004      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a280:	bf00      	nop
 800a282:	e002      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a284:	bf00      	nop
 800a286:	e000      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a28a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10e      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a292:	4b06      	ldr	r3, [pc, #24]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a296:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2a2:	4a02      	ldr	r2, [pc, #8]	@ (800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2a4:	430b      	orrs	r3, r1
 800a2a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2a8:	e006      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a2aa:	bf00      	nop
 800a2ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a2c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	d055      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2e4:	d033      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a2e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2ea:	d82c      	bhi.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2f0:	d02f      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a2f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2f6:	d826      	bhi.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a2fc:	d02b      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a2fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a302:	d820      	bhi.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a308:	d012      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a30a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a30e:	d81a      	bhi.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a310:	2b00      	cmp	r3, #0
 800a312:	d022      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a318:	d115      	bne.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a31e:	3308      	adds	r3, #8
 800a320:	2100      	movs	r1, #0
 800a322:	4618      	mov	r0, r3
 800a324:	f001 fbf6 	bl	800bb14 <RCCEx_PLL2_Config>
 800a328:	4603      	mov	r3, r0
 800a32a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a32e:	e015      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a334:	3328      	adds	r3, #40	@ 0x28
 800a336:	2102      	movs	r1, #2
 800a338:	4618      	mov	r0, r3
 800a33a:	f001 fc9d 	bl	800bc78 <RCCEx_PLL3_Config>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a344:	e00a      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a34c:	e006      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a34e:	bf00      	nop
 800a350:	e004      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a352:	bf00      	nop
 800a354:	e002      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a356:	bf00      	nop
 800a358:	e000      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a35c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10b      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a364:	4ba0      	ldr	r3, [pc, #640]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a368:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a370:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a374:	4a9c      	ldr	r2, [pc, #624]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a376:	430b      	orrs	r3, r1
 800a378:	6593      	str	r3, [r2, #88]	@ 0x58
 800a37a:	e003      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	f002 0308 	and.w	r3, r2, #8
 800a390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a394:	2300      	movs	r3, #0
 800a396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a39a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	d01e      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3b0:	d10c      	bne.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b6:	3328      	adds	r3, #40	@ 0x28
 800a3b8:	2102      	movs	r1, #2
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f001 fc5c 	bl	800bc78 <RCCEx_PLL3_Config>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a3cc:	4b86      	ldr	r3, [pc, #536]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3dc:	4a82      	ldr	r2, [pc, #520]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f002 0310 	and.w	r3, r2, #16
 800a3ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3f8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4313      	orrs	r3, r2
 800a400:	d01e      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a40a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a40e:	d10c      	bne.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a414:	3328      	adds	r3, #40	@ 0x28
 800a416:	2102      	movs	r1, #2
 800a418:	4618      	mov	r0, r3
 800a41a:	f001 fc2d 	bl	800bc78 <RCCEx_PLL3_Config>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a42a:	4b6f      	ldr	r3, [pc, #444]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a42c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a42e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a43a:	4a6b      	ldr	r2, [pc, #428]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a43c:	430b      	orrs	r3, r1
 800a43e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a44c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a44e:	2300      	movs	r3, #0
 800a450:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a452:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a456:	460b      	mov	r3, r1
 800a458:	4313      	orrs	r3, r2
 800a45a:	d03e      	beq.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a460:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a468:	d022      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a46a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a46e:	d81b      	bhi.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d003      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a478:	d00b      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a47a:	e015      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a480:	3308      	adds	r3, #8
 800a482:	2100      	movs	r1, #0
 800a484:	4618      	mov	r0, r3
 800a486:	f001 fb45 	bl	800bb14 <RCCEx_PLL2_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a490:	e00f      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a496:	3328      	adds	r3, #40	@ 0x28
 800a498:	2102      	movs	r1, #2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f001 fbec 	bl	800bc78 <RCCEx_PLL3_Config>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4a6:	e004      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4ae:	e000      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a4b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4ba:	4b4b      	ldr	r3, [pc, #300]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4ca:	4a47      	ldr	r2, [pc, #284]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4cc:	430b      	orrs	r3, r1
 800a4ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4d0:	e003      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a4e6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800a4ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	d03b      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a502:	d01f      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a504:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a508:	d818      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a50a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a50e:	d003      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a510:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a514:	d007      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a516:	e011      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a518:	4b33      	ldr	r3, [pc, #204]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51c:	4a32      	ldr	r2, [pc, #200]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a51e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a524:	e00f      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a52a:	3328      	adds	r3, #40	@ 0x28
 800a52c:	2101      	movs	r1, #1
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 fba2 	bl	800bc78 <RCCEx_PLL3_Config>
 800a534:	4603      	mov	r3, r0
 800a536:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a53a:	e004      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a542:	e000      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a546:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10b      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a54e:	4b26      	ldr	r3, [pc, #152]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a552:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a55a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a55e:	4a22      	ldr	r2, [pc, #136]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a560:	430b      	orrs	r3, r1
 800a562:	6553      	str	r3, [r2, #84]	@ 0x54
 800a564:	e003      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a566:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a56a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a57a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a57c:	2300      	movs	r3, #0
 800a57e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a580:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a584:	460b      	mov	r3, r1
 800a586:	4313      	orrs	r3, r2
 800a588:	d034      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a598:	d007      	beq.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a59a:	e011      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a59c:	4b12      	ldr	r3, [pc, #72]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	4a11      	ldr	r2, [pc, #68]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5a8:	e00e      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ae:	3308      	adds	r3, #8
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f001 faae 	bl	800bb14 <RCCEx_PLL2_Config>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5be:	e003      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10d      	bne.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5d0:	4b05      	ldr	r3, [pc, #20]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5de:	4a02      	ldr	r2, [pc, #8]	@ (800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5e4:	e006      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a5e6:	bf00      	nop
 800a5e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a600:	663b      	str	r3, [r7, #96]	@ 0x60
 800a602:	2300      	movs	r3, #0
 800a604:	667b      	str	r3, [r7, #100]	@ 0x64
 800a606:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a60a:	460b      	mov	r3, r1
 800a60c:	4313      	orrs	r3, r2
 800a60e:	d00c      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a614:	3328      	adds	r3, #40	@ 0x28
 800a616:	2102      	movs	r1, #2
 800a618:	4618      	mov	r0, r3
 800a61a:	f001 fb2d 	bl	800bc78 <RCCEx_PLL3_Config>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a632:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a636:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a638:	2300      	movs	r3, #0
 800a63a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a63c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a640:	460b      	mov	r3, r1
 800a642:	4313      	orrs	r3, r2
 800a644:	d036      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a64a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a64c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a650:	d018      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a656:	d811      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a65c:	d014      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a65e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a662:	d80b      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a664:	2b00      	cmp	r3, #0
 800a666:	d011      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a66c:	d106      	bne.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a66e:	4bb7      	ldr	r3, [pc, #732]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a672:	4ab6      	ldr	r2, [pc, #728]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a67a:	e008      	b.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a682:	e004      	b.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a684:	bf00      	nop
 800a686:	e002      	b.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a688:	bf00      	nop
 800a68a:	e000      	b.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a68c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a68e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a696:	4bad      	ldr	r3, [pc, #692]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a69a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6a4:	4aa9      	ldr	r2, [pc, #676]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6a6:	430b      	orrs	r3, r1
 800a6a8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6aa:	e003      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a6c0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	d009      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6d0:	4b9e      	ldr	r3, [pc, #632]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6de:	4a9b      	ldr	r2, [pc, #620]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6e0:	430b      	orrs	r3, r1
 800a6e2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a6f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	d009      	beq.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a700:	4b92      	ldr	r3, [pc, #584]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a704:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a70c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a70e:	4a8f      	ldr	r2, [pc, #572]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a710:	430b      	orrs	r3, r1
 800a712:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a720:	643b      	str	r3, [r7, #64]	@ 0x40
 800a722:	2300      	movs	r3, #0
 800a724:	647b      	str	r3, [r7, #68]	@ 0x44
 800a726:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a72a:	460b      	mov	r3, r1
 800a72c:	4313      	orrs	r3, r2
 800a72e:	d00e      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a730:	4b86      	ldr	r3, [pc, #536]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	4a85      	ldr	r2, [pc, #532]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a736:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a73a:	6113      	str	r3, [r2, #16]
 800a73c:	4b83      	ldr	r3, [pc, #524]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a73e:	6919      	ldr	r1, [r3, #16]
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a748:	4a80      	ldr	r2, [pc, #512]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a74a:	430b      	orrs	r3, r1
 800a74c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a75a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a760:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a764:	460b      	mov	r3, r1
 800a766:	4313      	orrs	r3, r2
 800a768:	d009      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a76a:	4b78      	ldr	r3, [pc, #480]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a76c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a76e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a778:	4a74      	ldr	r2, [pc, #464]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a77a:	430b      	orrs	r3, r1
 800a77c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a78a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a78c:	2300      	movs	r3, #0
 800a78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a790:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a794:	460b      	mov	r3, r1
 800a796:	4313      	orrs	r3, r2
 800a798:	d00a      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a79a:	4b6c      	ldr	r3, [pc, #432]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a79c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a79e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7aa:	4a68      	ldr	r2, [pc, #416]	@ (800a94c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7ac:	430b      	orrs	r3, r1
 800a7ae:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	d011      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f001 f99d 	bl	800bb14 <RCCEx_PLL2_Config>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a7e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	6239      	str	r1, [r7, #32]
 800a7fc:	f003 0302 	and.w	r3, r3, #2
 800a800:	627b      	str	r3, [r7, #36]	@ 0x24
 800a802:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a806:	460b      	mov	r3, r1
 800a808:	4313      	orrs	r3, r2
 800a80a:	d011      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a810:	3308      	adds	r3, #8
 800a812:	2101      	movs	r1, #1
 800a814:	4618      	mov	r0, r3
 800a816:	f001 f97d 	bl	800bb14 <RCCEx_PLL2_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a824:	2b00      	cmp	r3, #0
 800a826:	d003      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a82c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	2100      	movs	r1, #0
 800a83a:	61b9      	str	r1, [r7, #24]
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	61fb      	str	r3, [r7, #28]
 800a842:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a846:	460b      	mov	r3, r1
 800a848:	4313      	orrs	r3, r2
 800a84a:	d011      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a850:	3308      	adds	r3, #8
 800a852:	2102      	movs	r1, #2
 800a854:	4618      	mov	r0, r3
 800a856:	f001 f95d 	bl	800bb14 <RCCEx_PLL2_Config>
 800a85a:	4603      	mov	r3, r0
 800a85c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a86c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	2100      	movs	r1, #0
 800a87a:	6139      	str	r1, [r7, #16]
 800a87c:	f003 0308 	and.w	r3, r3, #8
 800a880:	617b      	str	r3, [r7, #20]
 800a882:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a886:	460b      	mov	r3, r1
 800a888:	4313      	orrs	r3, r2
 800a88a:	d011      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a890:	3328      	adds	r3, #40	@ 0x28
 800a892:	2100      	movs	r1, #0
 800a894:	4618      	mov	r0, r3
 800a896:	f001 f9ef 	bl	800bc78 <RCCEx_PLL3_Config>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a8a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d003      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	f003 0310 	and.w	r3, r3, #16
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	d011      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d0:	3328      	adds	r3, #40	@ 0x28
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 f9cf 	bl	800bc78 <RCCEx_PLL3_Config>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a8e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	6039      	str	r1, [r7, #0]
 800a8fc:	f003 0320 	and.w	r3, r3, #32
 800a900:	607b      	str	r3, [r7, #4]
 800a902:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a906:	460b      	mov	r3, r1
 800a908:	4313      	orrs	r3, r2
 800a90a:	d011      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a910:	3328      	adds	r3, #40	@ 0x28
 800a912:	2102      	movs	r1, #2
 800a914:	4618      	mov	r0, r3
 800a916:	f001 f9af 	bl	800bc78 <RCCEx_PLL3_Config>
 800a91a:	4603      	mov	r3, r0
 800a91c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a92c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a930:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	e000      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
}
 800a93e:	4618      	mov	r0, r3
 800a940:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a944:	46bd      	mov	sp, r7
 800a946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a94a:	bf00      	nop
 800a94c:	58024400 	.word	0x58024400

0800a950 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b090      	sub	sp, #64	@ 0x40
 800a954:	af00      	add	r7, sp, #0
 800a956:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a95e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a962:	430b      	orrs	r3, r1
 800a964:	f040 8094 	bne.w	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a968:	4b9b      	ldr	r3, [pc, #620]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a96a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a96c:	f003 0307 	and.w	r3, r3, #7
 800a970:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a974:	2b04      	cmp	r3, #4
 800a976:	f200 8087 	bhi.w	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a97a:	a201      	add	r2, pc, #4	@ (adr r2, 800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800a995 	.word	0x0800a995
 800a984:	0800a9bd 	.word	0x0800a9bd
 800a988:	0800a9e5 	.word	0x0800a9e5
 800a98c:	0800aa81 	.word	0x0800aa81
 800a990:	0800aa0d 	.word	0x0800aa0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a994:	4b90      	ldr	r3, [pc, #576]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a99c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9a0:	d108      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 ff62 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b0:	f000 bc93 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b8:	f000 bc8f 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9bc:	4b86      	ldr	r3, [pc, #536]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9c8:	d108      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ca:	f107 0318 	add.w	r3, r7, #24
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fca6 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d8:	f000 bc7f 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e0:	f000 bc7b 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9e4:	4b7c      	ldr	r3, [pc, #496]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9f0:	d108      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9f2:	f107 030c 	add.w	r3, r7, #12
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fde6 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa00:	f000 bc6b 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa08:	f000 bc67 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa0c:	4b72      	ldr	r3, [pc, #456]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa16:	4b70      	ldr	r3, [pc, #448]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0304 	and.w	r3, r3, #4
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	d10c      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d109      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa28:	4b6b      	ldr	r3, [pc, #428]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	08db      	lsrs	r3, r3, #3
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	4a6a      	ldr	r2, [pc, #424]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aa34:	fa22 f303 	lsr.w	r3, r2, r3
 800aa38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa3a:	e01f      	b.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa3c:	4b66      	ldr	r3, [pc, #408]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa48:	d106      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa50:	d102      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa52:	4b63      	ldr	r3, [pc, #396]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa56:	e011      	b.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa58:	4b5f      	ldr	r3, [pc, #380]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa64:	d106      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aa66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa6c:	d102      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa6e:	4b5d      	ldr	r3, [pc, #372]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa72:	e003      	b.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa78:	f000 bc2f 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa7c:	f000 bc2d 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa80:	4b59      	ldr	r3, [pc, #356]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa84:	f000 bc29 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8c:	f000 bc25 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aa90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa94:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	f040 80a7 	bne.w	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aa9e:	4b4e      	ldr	r3, [pc, #312]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aaa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800aaa6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aaae:	d054      	beq.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aab6:	f200 808b 	bhi.w	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aac0:	f000 8083 	beq.w	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800aac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aaca:	f200 8081 	bhi.w	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aad4:	d02f      	beq.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aadc:	d878      	bhi.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d004      	beq.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aaea:	d012      	beq.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800aaec:	e070      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaee:	4b3a      	ldr	r3, [pc, #232]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aafa:	d107      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aafc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 feb5 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab0a:	e3e6      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab10:	e3e3      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab12:	4b31      	ldr	r3, [pc, #196]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab1e:	d107      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab20:	f107 0318 	add.w	r3, r7, #24
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fbfb 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab2e:	e3d4      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab34:	e3d1      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab36:	4b28      	ldr	r3, [pc, #160]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab42:	d107      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab44:	f107 030c 	add.w	r3, r7, #12
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 fd3d 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab52:	e3c2      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab58:	e3bf      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab5a:	4b1f      	ldr	r3, [pc, #124]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab64:	4b1c      	ldr	r3, [pc, #112]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0304 	and.w	r3, r3, #4
 800ab6c:	2b04      	cmp	r3, #4
 800ab6e:	d10c      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ab70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab76:	4b18      	ldr	r3, [pc, #96]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	08db      	lsrs	r3, r3, #3
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	4a16      	ldr	r2, [pc, #88]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ab82:	fa22 f303 	lsr.w	r3, r2, r3
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab88:	e01e      	b.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab8a:	4b13      	ldr	r3, [pc, #76]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab96:	d106      	bne.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ab98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab9e:	d102      	bne.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aba0:	4b0f      	ldr	r3, [pc, #60]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aba4:	e010      	b.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aba6:	4b0c      	ldr	r3, [pc, #48]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abb2:	d106      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800abb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abba:	d102      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abbc:	4b09      	ldr	r3, [pc, #36]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abc0:	e002      	b.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800abc6:	e388      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abc8:	e387      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abca:	4b07      	ldr	r3, [pc, #28]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abce:	e384      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd4:	e381      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abd6:	bf00      	nop
 800abd8:	58024400 	.word	0x58024400
 800abdc:	03d09000 	.word	0x03d09000
 800abe0:	003d0900 	.word	0x003d0900
 800abe4:	016e3600 	.word	0x016e3600
 800abe8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800abec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800abf4:	430b      	orrs	r3, r1
 800abf6:	f040 809c 	bne.w	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800abfa:	4b9e      	ldr	r3, [pc, #632]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abfe:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ac02:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ac04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac0a:	d054      	beq.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac12:	f200 808b 	bhi.w	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ac1c:	f000 8083 	beq.w	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ac20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ac26:	f200 8081 	bhi.w	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac30:	d02f      	beq.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac38:	d878      	bhi.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d004      	beq.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac46:	d012      	beq.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ac48:	e070      	b.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac4a:	4b8a      	ldr	r3, [pc, #552]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac56:	d107      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fe07 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac66:	e338      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac6c:	e335      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac6e:	4b81      	ldr	r3, [pc, #516]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac7a:	d107      	bne.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac7c:	f107 0318 	add.w	r3, r7, #24
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 fb4d 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac8a:	e326      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac90:	e323      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac92:	4b78      	ldr	r3, [pc, #480]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac9e:	d107      	bne.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aca0:	f107 030c 	add.w	r3, r7, #12
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fc8f 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acae:	e314      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb4:	e311      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acb6:	4b6f      	ldr	r3, [pc, #444]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acbe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acc0:	4b6c      	ldr	r3, [pc, #432]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b04      	cmp	r3, #4
 800acca:	d10c      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800accc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d109      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acd2:	4b68      	ldr	r3, [pc, #416]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	08db      	lsrs	r3, r3, #3
 800acd8:	f003 0303 	and.w	r3, r3, #3
 800acdc:	4a66      	ldr	r2, [pc, #408]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800acde:	fa22 f303 	lsr.w	r3, r2, r3
 800ace2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ace4:	e01e      	b.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ace6:	4b63      	ldr	r3, [pc, #396]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acf2:	d106      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800acf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acfa:	d102      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acfc:	4b5f      	ldr	r3, [pc, #380]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad00:	e010      	b.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad02:	4b5c      	ldr	r3, [pc, #368]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad0e:	d106      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ad10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad16:	d102      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad18:	4b59      	ldr	r3, [pc, #356]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad1c:	e002      	b.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad22:	e2da      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad24:	e2d9      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad26:	4b57      	ldr	r3, [pc, #348]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ad28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2a:	e2d6      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad30:	e2d3      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ad32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad36:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ad3a:	430b      	orrs	r3, r1
 800ad3c:	f040 80a7 	bne.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ad40:	4b4c      	ldr	r3, [pc, #304]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad44:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ad48:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad50:	d055      	beq.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ad52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad58:	f200 8096 	bhi.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad62:	f000 8084 	beq.w	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ad66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad6c:	f200 808c 	bhi.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad76:	d030      	beq.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad7e:	f200 8083 	bhi.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d004      	beq.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ad88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad8e:	d012      	beq.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ad90:	e07a      	b.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad92:	4b38      	ldr	r3, [pc, #224]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ada0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 fd63 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adae:	e294      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb4:	e291      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adb6:	4b2f      	ldr	r3, [pc, #188]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adc2:	d107      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc4:	f107 0318 	add.w	r3, r7, #24
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 faa9 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add2:	e282      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add8:	e27f      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adda:	4b26      	ldr	r3, [pc, #152]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ade2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ade6:	d107      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ade8:	f107 030c 	add.w	r3, r7, #12
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fbeb 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf6:	e270      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfc:	e26d      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adfe:	4b1d      	ldr	r3, [pc, #116]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae06:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae08:	4b1a      	ldr	r3, [pc, #104]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b04      	cmp	r3, #4
 800ae12:	d10c      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ae14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae1a:	4b16      	ldr	r3, [pc, #88]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	08db      	lsrs	r3, r3, #3
 800ae20:	f003 0303 	and.w	r3, r3, #3
 800ae24:	4a14      	ldr	r2, [pc, #80]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ae26:	fa22 f303 	lsr.w	r3, r2, r3
 800ae2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae2c:	e01e      	b.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae2e:	4b11      	ldr	r3, [pc, #68]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae3a:	d106      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ae3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae42:	d102      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae44:	4b0d      	ldr	r3, [pc, #52]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae48:	e010      	b.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae56:	d106      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ae58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae5e:	d102      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae60:	4b07      	ldr	r3, [pc, #28]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae64:	e002      	b.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae6a:	e236      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae6c:	e235      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae6e:	4b05      	ldr	r3, [pc, #20]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae72:	e232      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae74:	58024400 	.word	0x58024400
 800ae78:	03d09000 	.word	0x03d09000
 800ae7c:	003d0900 	.word	0x003d0900
 800ae80:	016e3600 	.word	0x016e3600
 800ae84:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae8c:	e225      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ae8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae92:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ae96:	430b      	orrs	r3, r1
 800ae98:	f040 8085 	bne.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ae9c:	4b9c      	ldr	r3, [pc, #624]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aea4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aeac:	d06b      	beq.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800aeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aeb4:	d874      	bhi.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aebc:	d056      	beq.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800aebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aec4:	d86c      	bhi.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aecc:	d03b      	beq.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800aece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aed4:	d864      	bhi.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aedc:	d021      	beq.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800aede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aee4:	d85c      	bhi.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d004      	beq.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800aeec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aef2:	d004      	beq.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800aef4:	e054      	b.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aef6:	f7fe fb5f 	bl	80095b8 <HAL_RCC_GetPCLK1Freq>
 800aefa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aefc:	e1ed      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aefe:	4b84      	ldr	r3, [pc, #528]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af0a:	d107      	bne.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af0c:	f107 0318 	add.w	r3, r7, #24
 800af10:	4618      	mov	r0, r3
 800af12:	f000 fa05 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af1a:	e1de      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af20:	e1db      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af22:	4b7b      	ldr	r3, [pc, #492]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af2e:	d107      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af30:	f107 030c 	add.w	r3, r7, #12
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fb47 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af3e:	e1cc      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af44:	e1c9      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af46:	4b72      	ldr	r3, [pc, #456]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 0304 	and.w	r3, r3, #4
 800af4e:	2b04      	cmp	r3, #4
 800af50:	d109      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af52:	4b6f      	ldr	r3, [pc, #444]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	08db      	lsrs	r3, r3, #3
 800af58:	f003 0303 	and.w	r3, r3, #3
 800af5c:	4a6d      	ldr	r2, [pc, #436]	@ (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800af5e:	fa22 f303 	lsr.w	r3, r2, r3
 800af62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af64:	e1b9      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af6a:	e1b6      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800af6c:	4b68      	ldr	r3, [pc, #416]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af78:	d102      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800af7a:	4b67      	ldr	r3, [pc, #412]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800af7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7e:	e1ac      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af84:	e1a9      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af86:	4b62      	ldr	r3, [pc, #392]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af92:	d102      	bne.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800af94:	4b61      	ldr	r3, [pc, #388]	@ (800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800af96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af98:	e19f      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9e:	e19c      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa4:	e199      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800afa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afaa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800afae:	430b      	orrs	r3, r1
 800afb0:	d173      	bne.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800afb2:	4b57      	ldr	r3, [pc, #348]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800afbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afc2:	d02f      	beq.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800afc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afca:	d863      	bhi.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800afd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afd8:	d012      	beq.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800afda:	e05b      	b.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afdc:	4b4c      	ldr	r3, [pc, #304]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afe8:	d107      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afea:	f107 0318 	add.w	r3, r7, #24
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 f996 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff8:	e16f      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800affe:	e16c      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b000:	4b43      	ldr	r3, [pc, #268]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b00c:	d107      	bne.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b00e:	f107 030c 	add.w	r3, r7, #12
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fad8 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b01c:	e15d      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b022:	e15a      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b024:	4b3a      	ldr	r3, [pc, #232]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b028:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b02c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b02e:	4b38      	ldr	r3, [pc, #224]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 0304 	and.w	r3, r3, #4
 800b036:	2b04      	cmp	r3, #4
 800b038:	d10c      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d109      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b040:	4b33      	ldr	r3, [pc, #204]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	08db      	lsrs	r3, r3, #3
 800b046:	f003 0303 	and.w	r3, r3, #3
 800b04a:	4a32      	ldr	r2, [pc, #200]	@ (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b04c:	fa22 f303 	lsr.w	r3, r2, r3
 800b050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b052:	e01e      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b054:	4b2e      	ldr	r3, [pc, #184]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b05c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b060:	d106      	bne.n	800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b068:	d102      	bne.n	800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b06a:	4b2b      	ldr	r3, [pc, #172]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b06e:	e010      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b070:	4b27      	ldr	r3, [pc, #156]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b07c:	d106      	bne.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b084:	d102      	bne.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b086:	4b25      	ldr	r3, [pc, #148]	@ (800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b08a:	e002      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b090:	e123      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b092:	e122      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b098:	e11f      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b09e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b0a2:	430b      	orrs	r3, r1
 800b0a4:	d13c      	bne.n	800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d004      	beq.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0bc:	d012      	beq.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b0be:	e023      	b.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0c0:	4b13      	ldr	r3, [pc, #76]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0cc:	d107      	bne.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fbcc 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0dc:	e0fd      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e2:	e0fa      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0f0:	d107      	bne.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0f2:	f107 0318 	add.w	r3, r7, #24
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 f912 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b100:	e0eb      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b106:	e0e8      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b10c:	e0e5      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b10e:	bf00      	nop
 800b110:	58024400 	.word	0x58024400
 800b114:	03d09000 	.word	0x03d09000
 800b118:	003d0900 	.word	0x003d0900
 800b11c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b124:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b128:	430b      	orrs	r3, r1
 800b12a:	f040 8085 	bne.w	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b12e:	4b6d      	ldr	r3, [pc, #436]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b132:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b136:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b13e:	d06b      	beq.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b146:	d874      	bhi.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b14e:	d056      	beq.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b156:	d86c      	bhi.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b15e:	d03b      	beq.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b166:	d864      	bhi.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b16e:	d021      	beq.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b176:	d85c      	bhi.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d004      	beq.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b184:	d004      	beq.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b186:	e054      	b.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b188:	f000 f8b4 	bl	800b2f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b18c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b18e:	e0a4      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b190:	4b54      	ldr	r3, [pc, #336]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b19c:	d107      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19e:	f107 0318 	add.w	r3, r7, #24
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f8bc 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ac:	e095      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b2:	e092      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1b4:	4b4b      	ldr	r3, [pc, #300]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1c0:	d107      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c2:	f107 030c 	add.w	r3, r7, #12
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 f9fe 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d0:	e083      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d6:	e080      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1d8:	4b42      	ldr	r3, [pc, #264]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0304 	and.w	r3, r3, #4
 800b1e0:	2b04      	cmp	r3, #4
 800b1e2:	d109      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1e4:	4b3f      	ldr	r3, [pc, #252]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	08db      	lsrs	r3, r3, #3
 800b1ea:	f003 0303 	and.w	r3, r3, #3
 800b1ee:	4a3e      	ldr	r2, [pc, #248]	@ (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f6:	e070      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fc:	e06d      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b1fe:	4b39      	ldr	r3, [pc, #228]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b20a:	d102      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b20c:	4b37      	ldr	r3, [pc, #220]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b210:	e063      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b216:	e060      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b218:	4b32      	ldr	r3, [pc, #200]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b220:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b224:	d102      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b226:	4b32      	ldr	r3, [pc, #200]	@ (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22a:	e056      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b230:	e053      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b236:	e050      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b23c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b240:	430b      	orrs	r3, r1
 800b242:	d148      	bne.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b244:	4b27      	ldr	r3, [pc, #156]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b248:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b24c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b254:	d02a      	beq.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b25c:	d838      	bhi.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	2b00      	cmp	r3, #0
 800b262:	d004      	beq.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b26a:	d00d      	beq.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b26c:	e030      	b.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b26e:	4b1d      	ldr	r3, [pc, #116]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b27a:	d102      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b27c:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b280:	e02b      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b286:	e028      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b288:	4b16      	ldr	r3, [pc, #88]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b294:	d107      	bne.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fae8 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a4:	e019      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2aa:	e016      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2b8:	d107      	bne.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2ba:	f107 0318 	add.w	r3, r7, #24
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 f82e 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c8:	e007      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ce:	e004      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d4:	e001      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3740      	adds	r7, #64	@ 0x40
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	58024400 	.word	0x58024400
 800b2e8:	03d09000 	.word	0x03d09000
 800b2ec:	003d0900 	.word	0x003d0900
 800b2f0:	016e3600 	.word	0x016e3600

0800b2f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b2f8:	f7fe f92e 	bl	8009558 <HAL_RCC_GetHCLKFreq>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	4b06      	ldr	r3, [pc, #24]	@ (800b318 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b300:	6a1b      	ldr	r3, [r3, #32]
 800b302:	091b      	lsrs	r3, r3, #4
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	4904      	ldr	r1, [pc, #16]	@ (800b31c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b30a:	5ccb      	ldrb	r3, [r1, r3]
 800b30c:	f003 031f 	and.w	r3, r3, #31
 800b310:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b314:	4618      	mov	r0, r3
 800b316:	bd80      	pop	{r7, pc}
 800b318:	58024400 	.word	0x58024400
 800b31c:	08012a80 	.word	0x08012a80

0800b320 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b320:	b480      	push	{r7}
 800b322:	b089      	sub	sp, #36	@ 0x24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b328:	4ba1      	ldr	r3, [pc, #644]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32c:	f003 0303 	and.w	r3, r3, #3
 800b330:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b332:	4b9f      	ldr	r3, [pc, #636]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b336:	0b1b      	lsrs	r3, r3, #12
 800b338:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b33c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b33e:	4b9c      	ldr	r3, [pc, #624]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b342:	091b      	lsrs	r3, r3, #4
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b34a:	4b99      	ldr	r3, [pc, #612]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b34e:	08db      	lsrs	r3, r3, #3
 800b350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	fb02 f303 	mul.w	r3, r2, r3
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 8111 	beq.w	800b590 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b02      	cmp	r3, #2
 800b372:	f000 8083 	beq.w	800b47c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	f200 80a1 	bhi.w	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d056      	beq.n	800b438 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b38a:	e099      	b.n	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b38c:	4b88      	ldr	r3, [pc, #544]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0320 	and.w	r3, r3, #32
 800b394:	2b00      	cmp	r3, #0
 800b396:	d02d      	beq.n	800b3f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b398:	4b85      	ldr	r3, [pc, #532]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	08db      	lsrs	r3, r3, #3
 800b39e:	f003 0303 	and.w	r3, r3, #3
 800b3a2:	4a84      	ldr	r2, [pc, #528]	@ (800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	ee07 3a90 	vmov	s15, r3
 800b3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c2:	4b7b      	ldr	r3, [pc, #492]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b3f2:	e087      	b.n	800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b5bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b406:	4b6a      	ldr	r3, [pc, #424]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b416:	ed97 6a03 	vldr	s12, [r7, #12]
 800b41a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b436:	e065      	b.n	800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b442:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44a:	4b59      	ldr	r3, [pc, #356]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b45e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b47a:	e043      	b.n	800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48e:	4b48      	ldr	r3, [pc, #288]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4be:	e021      	b.n	800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	ee07 3a90 	vmov	s15, r3
 800b4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4d2:	4b37      	ldr	r3, [pc, #220]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b502:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b504:	4b2a      	ldr	r3, [pc, #168]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b508:	0a5b      	lsrs	r3, r3, #9
 800b50a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b51a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b51e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b52a:	ee17 2a90 	vmov	r2, s15
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b532:	4b1f      	ldr	r3, [pc, #124]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b536:	0c1b      	lsrs	r3, r3, #16
 800b538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b544:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b54c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b558:	ee17 2a90 	vmov	r2, s15
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b560:	4b13      	ldr	r3, [pc, #76]	@ (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b564:	0e1b      	lsrs	r3, r3, #24
 800b566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b57a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b586:	ee17 2a90 	vmov	r2, s15
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b58e:	e008      	b.n	800b5a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	609a      	str	r2, [r3, #8]
}
 800b5a2:	bf00      	nop
 800b5a4:	3724      	adds	r7, #36	@ 0x24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	03d09000 	.word	0x03d09000
 800b5b8:	46000000 	.word	0x46000000
 800b5bc:	4c742400 	.word	0x4c742400
 800b5c0:	4a742400 	.word	0x4a742400
 800b5c4:	4bb71b00 	.word	0x4bb71b00

0800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b089      	sub	sp, #36	@ 0x24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5d0:	4ba1      	ldr	r3, [pc, #644]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d4:	f003 0303 	and.w	r3, r3, #3
 800b5d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b5da:	4b9f      	ldr	r3, [pc, #636]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5de:	0d1b      	lsrs	r3, r3, #20
 800b5e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b5e6:	4b9c      	ldr	r3, [pc, #624]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ea:	0a1b      	lsrs	r3, r3, #8
 800b5ec:	f003 0301 	and.w	r3, r3, #1
 800b5f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b5f2:	4b99      	ldr	r3, [pc, #612]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5f6:	08db      	lsrs	r3, r3, #3
 800b5f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	fb02 f303 	mul.w	r3, r2, r3
 800b602:	ee07 3a90 	vmov	s15, r3
 800b606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b60a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 8111 	beq.w	800b838 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	2b02      	cmp	r3, #2
 800b61a:	f000 8083 	beq.w	800b724 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	2b02      	cmp	r3, #2
 800b622:	f200 80a1 	bhi.w	800b768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d056      	beq.n	800b6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b632:	e099      	b.n	800b768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b634:	4b88      	ldr	r3, [pc, #544]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0320 	and.w	r3, r3, #32
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d02d      	beq.n	800b69c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b640:	4b85      	ldr	r3, [pc, #532]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	08db      	lsrs	r3, r3, #3
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	4a84      	ldr	r2, [pc, #528]	@ (800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b64c:	fa22 f303 	lsr.w	r3, r2, r3
 800b650:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	ee07 3a90 	vmov	s15, r3
 800b662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b66a:	4b7b      	ldr	r3, [pc, #492]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b66c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b672:	ee07 3a90 	vmov	s15, r3
 800b676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b67a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b67e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b68a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b696:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b69a:	e087      	b.n	800b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	ee07 3a90 	vmov	s15, r3
 800b6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ae:	4b6a      	ldr	r3, [pc, #424]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6de:	e065      	b.n	800b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f2:	4b59      	ldr	r3, [pc, #356]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b702:	ed97 6a03 	vldr	s12, [r7, #12]
 800b706:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b71e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b722:	e043      	b.n	800b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b86c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b736:	4b48      	ldr	r3, [pc, #288]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b746:	ed97 6a03 	vldr	s12, [r7, #12]
 800b74a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b766:	e021      	b.n	800b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	ee07 3a90 	vmov	s15, r3
 800b76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b772:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b77a:	4b37      	ldr	r3, [pc, #220]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b78e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b79a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b7ac:	4b2a      	ldr	r3, [pc, #168]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b0:	0a5b      	lsrs	r3, r3, #9
 800b7b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7b6:	ee07 3a90 	vmov	s15, r3
 800b7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d2:	ee17 2a90 	vmov	r2, s15
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b7da:	4b1f      	ldr	r3, [pc, #124]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7de:	0c1b      	lsrs	r3, r3, #16
 800b7e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7e4:	ee07 3a90 	vmov	s15, r3
 800b7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b800:	ee17 2a90 	vmov	r2, s15
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b808:	4b13      	ldr	r3, [pc, #76]	@ (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b80c:	0e1b      	lsrs	r3, r3, #24
 800b80e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b812:	ee07 3a90 	vmov	s15, r3
 800b816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b81e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b822:	edd7 6a07 	vldr	s13, [r7, #28]
 800b826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b82a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b82e:	ee17 2a90 	vmov	r2, s15
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b836:	e008      	b.n	800b84a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	609a      	str	r2, [r3, #8]
}
 800b84a:	bf00      	nop
 800b84c:	3724      	adds	r7, #36	@ 0x24
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	58024400 	.word	0x58024400
 800b85c:	03d09000 	.word	0x03d09000
 800b860:	46000000 	.word	0x46000000
 800b864:	4c742400 	.word	0x4c742400
 800b868:	4a742400 	.word	0x4a742400
 800b86c:	4bb71b00 	.word	0x4bb71b00

0800b870 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b870:	b480      	push	{r7}
 800b872:	b089      	sub	sp, #36	@ 0x24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b878:	4ba0      	ldr	r3, [pc, #640]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b882:	4b9e      	ldr	r3, [pc, #632]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b886:	091b      	lsrs	r3, r3, #4
 800b888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b88c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b88e:	4b9b      	ldr	r3, [pc, #620]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b898:	4b98      	ldr	r3, [pc, #608]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b89a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b89c:	08db      	lsrs	r3, r3, #3
 800b89e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	fb02 f303 	mul.w	r3, r2, r3
 800b8a8:	ee07 3a90 	vmov	s15, r3
 800b8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 8111 	beq.w	800bade <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	f000 8083 	beq.w	800b9ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	f200 80a1 	bhi.w	800ba0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d056      	beq.n	800b986 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b8d8:	e099      	b.n	800ba0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8da:	4b88      	ldr	r3, [pc, #544]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f003 0320 	and.w	r3, r3, #32
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d02d      	beq.n	800b942 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8e6:	4b85      	ldr	r3, [pc, #532]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	08db      	lsrs	r3, r3, #3
 800b8ec:	f003 0303 	and.w	r3, r3, #3
 800b8f0:	4a83      	ldr	r2, [pc, #524]	@ (800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b8f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	ee07 3a90 	vmov	s15, r3
 800b8fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	ee07 3a90 	vmov	s15, r3
 800b908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b910:	4b7a      	ldr	r3, [pc, #488]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b918:	ee07 3a90 	vmov	s15, r3
 800b91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b920:	ed97 6a03 	vldr	s12, [r7, #12]
 800b924:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b92c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b930:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b93c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b940:	e087      	b.n	800ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	ee07 3a90 	vmov	s15, r3
 800b948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b94c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800bb08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b954:	4b69      	ldr	r3, [pc, #420]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b95c:	ee07 3a90 	vmov	s15, r3
 800b960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b964:	ed97 6a03 	vldr	s12, [r7, #12]
 800b968:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b96c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b974:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b97c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b980:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b984:	e065      	b.n	800ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	ee07 3a90 	vmov	s15, r3
 800b98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b990:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b998:	4b58      	ldr	r3, [pc, #352]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ac:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9c8:	e043      	b.n	800ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	ee07 3a90 	vmov	s15, r3
 800b9d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bb10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b9d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9dc:	4b47      	ldr	r3, [pc, #284]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e4:	ee07 3a90 	vmov	s15, r3
 800b9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba0c:	e021      	b.n	800ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	ee07 3a90 	vmov	s15, r3
 800ba14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba18:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bb08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba20:	4b36      	ldr	r3, [pc, #216]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba28:	ee07 3a90 	vmov	s15, r3
 800ba2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba30:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba34:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ba52:	4b2a      	ldr	r3, [pc, #168]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba56:	0a5b      	lsrs	r3, r3, #9
 800ba58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba78:	ee17 2a90 	vmov	r2, s15
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ba80:	4b1e      	ldr	r3, [pc, #120]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba84:	0c1b      	lsrs	r3, r3, #16
 800ba86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba8a:	ee07 3a90 	vmov	s15, r3
 800ba8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa6:	ee17 2a90 	vmov	r2, s15
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800baae:	4b13      	ldr	r3, [pc, #76]	@ (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bab2:	0e1b      	lsrs	r3, r3, #24
 800bab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bab8:	ee07 3a90 	vmov	s15, r3
 800babc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bac8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bacc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad4:	ee17 2a90 	vmov	r2, s15
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800badc:	e008      	b.n	800baf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	609a      	str	r2, [r3, #8]
}
 800baf0:	bf00      	nop
 800baf2:	3724      	adds	r7, #36	@ 0x24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	58024400 	.word	0x58024400
 800bb00:	03d09000 	.word	0x03d09000
 800bb04:	46000000 	.word	0x46000000
 800bb08:	4c742400 	.word	0x4c742400
 800bb0c:	4a742400 	.word	0x4a742400
 800bb10:	4bb71b00 	.word	0x4bb71b00

0800bb14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb22:	4b53      	ldr	r3, [pc, #332]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb26:	f003 0303 	and.w	r3, r3, #3
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d101      	bne.n	800bb32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e099      	b.n	800bc66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb32:	4b4f      	ldr	r3, [pc, #316]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a4e      	ldr	r2, [pc, #312]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb3e:	f7f6 ff2f 	bl	80029a0 <HAL_GetTick>
 800bb42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb44:	e008      	b.n	800bb58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb46:	f7f6 ff2b 	bl	80029a0 <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d901      	bls.n	800bb58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e086      	b.n	800bc66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb58:	4b45      	ldr	r3, [pc, #276]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1f0      	bne.n	800bb46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb64:	4b42      	ldr	r3, [pc, #264]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb68:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	031b      	lsls	r3, r3, #12
 800bb72:	493f      	ldr	r1, [pc, #252]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	025b      	lsls	r3, r3, #9
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	3b01      	subs	r3, #1
 800bb94:	041b      	lsls	r3, r3, #16
 800bb96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bb9a:	431a      	orrs	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	061b      	lsls	r3, r3, #24
 800bba4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bba8:	4931      	ldr	r1, [pc, #196]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbae:	4b30      	ldr	r3, [pc, #192]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	492d      	ldr	r1, [pc, #180]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbc0:	4b2b      	ldr	r3, [pc, #172]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc4:	f023 0220 	bic.w	r2, r3, #32
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	4928      	ldr	r1, [pc, #160]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bbd2:	4b27      	ldr	r3, [pc, #156]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd6:	4a26      	ldr	r2, [pc, #152]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbd8:	f023 0310 	bic.w	r3, r3, #16
 800bbdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bbde:	4b24      	ldr	r3, [pc, #144]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbe0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bbe2:	4b24      	ldr	r3, [pc, #144]	@ (800bc74 <RCCEx_PLL2_Config+0x160>)
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	69d2      	ldr	r2, [r2, #28]
 800bbea:	00d2      	lsls	r2, r2, #3
 800bbec:	4920      	ldr	r1, [pc, #128]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bbf2:	4b1f      	ldr	r3, [pc, #124]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf6:	4a1e      	ldr	r2, [pc, #120]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbf8:	f043 0310 	orr.w	r3, r3, #16
 800bbfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc04:	4b1a      	ldr	r3, [pc, #104]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc08:	4a19      	ldr	r2, [pc, #100]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc10:	e00f      	b.n	800bc32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d106      	bne.n	800bc26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc18:	4b15      	ldr	r3, [pc, #84]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1c:	4a14      	ldr	r2, [pc, #80]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc24:	e005      	b.n	800bc32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc26:	4b12      	ldr	r3, [pc, #72]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2a:	4a11      	ldr	r2, [pc, #68]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bc30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc32:	4b0f      	ldr	r3, [pc, #60]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a0e      	ldr	r2, [pc, #56]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3e:	f7f6 feaf 	bl	80029a0 <HAL_GetTick>
 800bc42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc44:	e008      	b.n	800bc58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc46:	f7f6 feab 	bl	80029a0 <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d901      	bls.n	800bc58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e006      	b.n	800bc66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc58:	4b05      	ldr	r3, [pc, #20]	@ (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0f0      	beq.n	800bc46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	58024400 	.word	0x58024400
 800bc74:	ffff0007 	.word	0xffff0007

0800bc78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc86:	4b53      	ldr	r3, [pc, #332]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d101      	bne.n	800bc96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e099      	b.n	800bdca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc96:	4b4f      	ldr	r3, [pc, #316]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a4e      	ldr	r2, [pc, #312]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bc9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bca2:	f7f6 fe7d 	bl	80029a0 <HAL_GetTick>
 800bca6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bca8:	e008      	b.n	800bcbc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcaa:	f7f6 fe79 	bl	80029a0 <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d901      	bls.n	800bcbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e086      	b.n	800bdca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcbc:	4b45      	ldr	r3, [pc, #276]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1f0      	bne.n	800bcaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bcc8:	4b42      	ldr	r3, [pc, #264]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bcca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bccc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	051b      	lsls	r3, r3, #20
 800bcd6:	493f      	ldr	r1, [pc, #252]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	628b      	str	r3, [r1, #40]	@ 0x28
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	025b      	lsls	r3, r3, #9
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	041b      	lsls	r3, r3, #16
 800bcfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	061b      	lsls	r3, r3, #24
 800bd08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd0c:	4931      	ldr	r1, [pc, #196]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd12:	4b30      	ldr	r3, [pc, #192]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	492d      	ldr	r1, [pc, #180]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd20:	4313      	orrs	r3, r2
 800bd22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd24:	4b2b      	ldr	r3, [pc, #172]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd28:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	4928      	ldr	r1, [pc, #160]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd32:	4313      	orrs	r3, r2
 800bd34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd36:	4b27      	ldr	r3, [pc, #156]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3a:	4a26      	ldr	r2, [pc, #152]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd42:	4b24      	ldr	r3, [pc, #144]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd46:	4b24      	ldr	r3, [pc, #144]	@ (800bdd8 <RCCEx_PLL3_Config+0x160>)
 800bd48:	4013      	ands	r3, r2
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	69d2      	ldr	r2, [r2, #28]
 800bd4e:	00d2      	lsls	r2, r2, #3
 800bd50:	4920      	ldr	r1, [pc, #128]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd56:	4b1f      	ldr	r3, [pc, #124]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5a:	4a1e      	ldr	r2, [pc, #120]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd68:	4b1a      	ldr	r3, [pc, #104]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6c:	4a19      	ldr	r2, [pc, #100]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bd72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd74:	e00f      	b.n	800bd96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d106      	bne.n	800bd8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd7c:	4b15      	ldr	r3, [pc, #84]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd80:	4a14      	ldr	r2, [pc, #80]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd88:	e005      	b.n	800bd96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bd8a:	4b12      	ldr	r3, [pc, #72]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd8e:	4a11      	ldr	r2, [pc, #68]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd96:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a0e      	ldr	r2, [pc, #56]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bda0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bda2:	f7f6 fdfd 	bl	80029a0 <HAL_GetTick>
 800bda6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bda8:	e008      	b.n	800bdbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bdaa:	f7f6 fdf9 	bl	80029a0 <HAL_GetTick>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d901      	bls.n	800bdbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	e006      	b.n	800bdca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdbc:	4b05      	ldr	r3, [pc, #20]	@ (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d0f0      	beq.n	800bdaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	58024400 	.word	0x58024400
 800bdd8:	ffff0007 	.word	0xffff0007

0800bddc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08a      	sub	sp, #40	@ 0x28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e075      	b.n	800beda <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d105      	bne.n	800be06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f7f6 fa35 	bl	8002270 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2204      	movs	r2, #4
 800be0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f868 	bl	800bee4 <HAL_SD_InitCard>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e05d      	b.n	800beda <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800be1e:	f107 0308 	add.w	r3, r7, #8
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fdaf 	bl	800c988 <HAL_SD_GetCardStatus>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e052      	b.n	800beda <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800be34:	7e3b      	ldrb	r3, [r7, #24]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be3a:	7e7b      	ldrb	r3, [r7, #25]
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be44:	2b01      	cmp	r3, #1
 800be46:	d10a      	bne.n	800be5e <HAL_SD_Init+0x82>
 800be48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d102      	bne.n	800be54 <HAL_SD_Init+0x78>
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d004      	beq.n	800be5e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be5a:	659a      	str	r2, [r3, #88]	@ 0x58
 800be5c:	e00b      	b.n	800be76 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be62:	2b01      	cmp	r3, #1
 800be64:	d104      	bne.n	800be70 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be6c:	659a      	str	r2, [r3, #88]	@ 0x58
 800be6e:	e002      	b.n	800be76 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	4619      	mov	r1, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fe6d 	bl	800cb5c <HAL_SD_ConfigWideBusOperation>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d001      	beq.n	800be8c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	e026      	b.n	800beda <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800be8c:	f7f6 fd88 	bl	80029a0 <HAL_GetTick>
 800be90:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800be92:	e011      	b.n	800beb8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be94:	f7f6 fd84 	bl	80029a0 <HAL_GetTick>
 800be98:	4602      	mov	r2, r0
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea2:	d109      	bne.n	800beb8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800beaa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e010      	b.n	800beda <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 ff61 	bl	800cd80 <HAL_SD_GetCardState>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b04      	cmp	r3, #4
 800bec2:	d1e7      	bne.n	800be94 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3728      	adds	r7, #40	@ 0x28
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
	...

0800bee4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bee4:	b590      	push	{r4, r7, lr}
 800bee6:	b08d      	sub	sp, #52	@ 0x34
 800bee8:	af02      	add	r7, sp, #8
 800beea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bef4:	2300      	movs	r3, #0
 800bef6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bef8:	2300      	movs	r3, #0
 800befa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800befc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bf00:	f04f 0100 	mov.w	r1, #0
 800bf04:	f7fe fd24 	bl	800a950 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf08:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d109      	bne.n	800bf24 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800bf1e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	e070      	b.n	800c006 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bf24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf26:	0a1b      	lsrs	r3, r3, #8
 800bf28:	4a39      	ldr	r2, [pc, #228]	@ (800c010 <HAL_SD_InitCard+0x12c>)
 800bf2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2e:	091b      	lsrs	r3, r3, #4
 800bf30:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681c      	ldr	r4, [r3, #0]
 800bf36:	466a      	mov	r2, sp
 800bf38:	f107 0318 	add.w	r3, r7, #24
 800bf3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf40:	e882 0003 	stmia.w	r2, {r0, r1}
 800bf44:	f107 030c 	add.w	r3, r7, #12
 800bf48:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f003 fffe 	bl	800ff4c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f004 f841 	bl	800ffdc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d005      	beq.n	800bf6c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d007      	beq.n	800bf82 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bf72:	4a28      	ldr	r2, [pc, #160]	@ (800c014 <HAL_SD_InitCard+0x130>)
 800bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf76:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7f6 fd1b 	bl	80029b8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 ffea 	bl	800cf5c <SD_PowerON>
 800bf88:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00b      	beq.n	800bfa8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
 800bf9e:	431a      	orrs	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e02e      	b.n	800c006 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 ff09 	bl	800cdc0 <SD_InitCard>
 800bfae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfb0:	6a3b      	ldr	r3, [r7, #32]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00b      	beq.n	800bfce <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfc2:	6a3b      	ldr	r3, [r7, #32]
 800bfc4:	431a      	orrs	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e01b      	b.n	800c006 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f004 f896 	bl	8010108 <SDMMC_CmdBlockLength>
 800bfdc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00f      	beq.n	800c004 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a0b      	ldr	r2, [pc, #44]	@ (800c018 <HAL_SD_InitCard+0x134>)
 800bfea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	431a      	orrs	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e000      	b.n	800c006 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	372c      	adds	r7, #44	@ 0x2c
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd90      	pop	{r4, r7, pc}
 800c00e:	bf00      	nop
 800c010:	014f8b59 	.word	0x014f8b59
 800c014:	00012110 	.word	0x00012110
 800c018:	1fe00fff 	.word	0x1fe00fff

0800c01c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b08c      	sub	sp, #48	@ 0x30
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
 800c028:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d107      	bne.n	800c044 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c038:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e08d      	b.n	800c160 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	f040 8086 	bne.w	800c15e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	441a      	add	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c062:	429a      	cmp	r2, r3
 800c064:	d907      	bls.n	800c076 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c06a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e074      	b.n	800c160 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2203      	movs	r2, #3
 800c07a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2200      	movs	r2, #0
 800c084:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	025a      	lsls	r2, r3, #9
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d002      	beq.n	800c0a2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09e:	025b      	lsls	r3, r3, #9
 800c0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	025b      	lsls	r3, r3, #9
 800c0ac:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c0ae:	2390      	movs	r3, #144	@ 0x90
 800c0b0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f107 0210 	add.w	r2, r7, #16
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f003 fff1 	bl	80100b0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68da      	ldr	r2, [r3, #12]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0dc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d90a      	bls.n	800c10a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2282      	movs	r2, #130	@ 0x82
 800c0f8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c100:	4618      	mov	r0, r3
 800c102:	f004 f847 	bl	8010194 <SDMMC_CmdReadMultiBlock>
 800c106:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c108:	e009      	b.n	800c11e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2281      	movs	r2, #129	@ 0x81
 800c10e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c116:	4618      	mov	r0, r3
 800c118:	f004 f819 	bl	801014e <SDMMC_CmdReadSingleBlock>
 800c11c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d012      	beq.n	800c14a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a0f      	ldr	r2, [pc, #60]	@ (800c168 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c12a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c132:	431a      	orrs	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	e00a      	b.n	800c160 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c158:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e000      	b.n	800c160 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c15e:	2302      	movs	r3, #2
  }
}
 800c160:	4618      	mov	r0, r3
 800c162:	3730      	adds	r7, #48	@ 0x30
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	1fe00fff 	.word	0x1fe00fff

0800c16c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08c      	sub	sp, #48	@ 0x30
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d107      	bne.n	800c194 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c188:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	e08d      	b.n	800c2b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	f040 8086 	bne.w	800c2ae <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c1a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	441a      	add	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d907      	bls.n	800c1c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e074      	b.n	800c2b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2203      	movs	r2, #3
 800c1ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	025a      	lsls	r2, r3, #9
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d002      	beq.n	800c1f2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ee:	025b      	lsls	r3, r3, #9
 800c1f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	025b      	lsls	r3, r3, #9
 800c1fc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c1fe:	2390      	movs	r3, #144	@ 0x90
 800c200:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c202:	2300      	movs	r3, #0
 800c204:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c206:	2300      	movs	r3, #0
 800c208:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c20a:	2300      	movs	r3, #0
 800c20c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f107 0210 	add.w	r2, r7, #16
 800c216:	4611      	mov	r1, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f003 ff49 	bl	80100b0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68da      	ldr	r2, [r3, #12]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c22c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2201      	movs	r2, #1
 800c23c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d90a      	bls.n	800c25a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	22a0      	movs	r2, #160	@ 0xa0
 800c248:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c250:	4618      	mov	r0, r3
 800c252:	f003 ffe5 	bl	8010220 <SDMMC_CmdWriteMultiBlock>
 800c256:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c258:	e009      	b.n	800c26e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2290      	movs	r2, #144	@ 0x90
 800c25e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c266:	4618      	mov	r0, r3
 800c268:	f003 ffb7 	bl	80101da <SDMMC_CmdWriteSingleBlock>
 800c26c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c270:	2b00      	cmp	r3, #0
 800c272:	d012      	beq.n	800c29a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a0f      	ldr	r2, [pc, #60]	@ (800c2b8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c27a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c282:	431a      	orrs	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e00a      	b.n	800c2b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c2a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e000      	b.n	800c2b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c2ae:	2302      	movs	r3, #2
  }
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3730      	adds	r7, #48	@ 0x30
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	1fe00fff 	.word	0x1fe00fff

0800c2bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d008      	beq.n	800c2ea <HAL_SD_IRQHandler+0x2e>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f003 0308 	and.w	r3, r3, #8
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d003      	beq.n	800c2ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 f926 	bl	800d534 <SD_Read_IT>
 800c2e8:	e19a      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f000 80ac 	beq.w	800c452 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c302:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	4b59      	ldr	r3, [pc, #356]	@ (800c474 <HAL_SD_IRQHandler+0x1b8>)
 800c310:	400b      	ands	r3, r1
 800c312:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c322:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68da      	ldr	r2, [r3, #12]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c332:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f003 0308 	and.w	r3, r3, #8
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d038      	beq.n	800c3b0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f003 0302 	and.w	r3, r3, #2
 800c344:	2b00      	cmp	r3, #0
 800c346:	d104      	bne.n	800c352 <HAL_SD_IRQHandler+0x96>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f003 0320 	and.w	r3, r3, #32
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d011      	beq.n	800c376 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4618      	mov	r0, r3
 800c358:	f003 ff86 	bl	8010268 <SDMMC_CmdStopTransfer>
 800c35c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d008      	beq.n	800c376 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	431a      	orrs	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f95b 	bl	800c62c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a3f      	ldr	r2, [pc, #252]	@ (800c478 <HAL_SD_IRQHandler+0x1bc>)
 800c37c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d104      	bne.n	800c3a0 <HAL_SD_IRQHandler+0xe4>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f003 0302 	and.w	r3, r3, #2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d003      	beq.n	800c3a8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f004 fc31 	bl	8010c08 <HAL_SD_RxCpltCallback>
 800c3a6:	e13b      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f004 fc23 	bl	8010bf4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c3ae:	e137      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 8132 	beq.w	800c620 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d104      	bne.n	800c3e8 <HAL_SD_IRQHandler+0x12c>
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f003 0320 	and.w	r3, r3, #32
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d011      	beq.n	800c40c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f003 ff3b 	bl	8010268 <SDMMC_CmdStopTransfer>
 800c3f2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d008      	beq.n	800c40c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	431a      	orrs	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f910 	bl	800c62c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f003 0310 	and.w	r3, r3, #16
 800c420:	2b00      	cmp	r3, #0
 800c422:	d104      	bne.n	800c42e <HAL_SD_IRQHandler+0x172>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f003 0320 	and.w	r3, r3, #32
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d002      	beq.n	800c434 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f004 fbe0 	bl	8010bf4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d105      	bne.n	800c44a <HAL_SD_IRQHandler+0x18e>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f003 0302 	and.w	r3, r3, #2
 800c444:	2b00      	cmp	r3, #0
 800c446:	f000 80eb 	beq.w	800c620 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f004 fbdc 	bl	8010c08 <HAL_SD_RxCpltCallback>
}
 800c450:	e0e6      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00d      	beq.n	800c47c <HAL_SD_IRQHandler+0x1c0>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f003 0308 	and.w	r3, r3, #8
 800c466:	2b00      	cmp	r3, #0
 800c468:	d008      	beq.n	800c47c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f001 f8a8 	bl	800d5c0 <SD_Write_IT>
 800c470:	e0d6      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
 800c472:	bf00      	nop
 800c474:	ffff3ec5 	.word	0xffff3ec5
 800c478:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c482:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 809d 	beq.w	800c5c6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c492:	f003 0302 	and.w	r3, r3, #2
 800c496:	2b00      	cmp	r3, #0
 800c498:	d005      	beq.n	800c4a6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c49e:	f043 0202 	orr.w	r2, r3, #2
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4ac:	f003 0308 	and.w	r3, r3, #8
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d005      	beq.n	800c4c0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b8:	f043 0208 	orr.w	r2, r3, #8
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4c6:	f003 0320 	and.w	r3, r3, #32
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4d2:	f043 0220 	orr.w	r2, r3, #32
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e0:	f003 0310 	and.w	r3, r3, #16
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4ec:	f043 0210 	orr.w	r2, r3, #16
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a4b      	ldr	r2, [pc, #300]	@ (800c628 <HAL_SD_IRQHandler+0x36c>)
 800c4fa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c50a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68da      	ldr	r2, [r3, #12]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c51a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c52a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68da      	ldr	r2, [r3, #12]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c53a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4618      	mov	r0, r3
 800c542:	f003 fe91 	bl	8010268 <SDMMC_CmdStopTransfer>
 800c546:	4602      	mov	r2, r0
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c54c:	431a      	orrs	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68da      	ldr	r2, [r3, #12]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c560:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c56a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f003 0308 	and.w	r3, r3, #8
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f851 	bl	800c62c <HAL_SD_ErrorCallback>
}
 800c58a:	e049      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c592:	2b00      	cmp	r3, #0
 800c594:	d044      	beq.n	800c620 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d040      	beq.n	800c620 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c5ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f834 	bl	800c62c <HAL_SD_ErrorCallback>
}
 800c5c4:	e02c      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d025      	beq.n	800c620 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5dc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5e4:	f003 0304 	and.w	r3, r3, #4
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10c      	bne.n	800c606 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f003 0320 	and.w	r3, r3, #32
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d003      	beq.n	800c5fe <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 f84a 	bl	800d690 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c5fc:	e010      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f001 f832 	bl	800d668 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c604:	e00c      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f003 0320 	and.w	r3, r3, #32
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d003      	beq.n	800c618 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f001 f833 	bl	800d67c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c616:	e003      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f001 f81b 	bl	800d654 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c61e:	e7ff      	b.n	800c620 <HAL_SD_IRQHandler+0x364>
 800c620:	bf00      	nop
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	18000f3a 	.word	0x18000f3a

0800c62c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c634:	bf00      	nop
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c64e:	0f9b      	lsrs	r3, r3, #30
 800c650:	b2da      	uxtb	r2, r3
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c65a:	0e9b      	lsrs	r3, r3, #26
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	f003 030f 	and.w	r3, r3, #15
 800c662:	b2da      	uxtb	r2, r3
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c66c:	0e1b      	lsrs	r3, r3, #24
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	f003 0303 	and.w	r3, r3, #3
 800c674:	b2da      	uxtb	r2, r3
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c67e:	0c1b      	lsrs	r3, r3, #16
 800c680:	b2da      	uxtb	r2, r3
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	b2da      	uxtb	r2, r3
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c696:	b2da      	uxtb	r2, r3
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6a0:	0d1b      	lsrs	r3, r3, #20
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6ac:	0c1b      	lsrs	r3, r3, #16
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	f003 030f 	and.w	r3, r3, #15
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6be:	0bdb      	lsrs	r3, r3, #15
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6d0:	0b9b      	lsrs	r3, r3, #14
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6e2:	0b5b      	lsrs	r3, r3, #13
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6f4:	0b1b      	lsrs	r3, r3, #12
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2200      	movs	r2, #0
 800c706:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d163      	bne.n	800c7d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c714:	009a      	lsls	r2, r3, #2
 800c716:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c71a:	4013      	ands	r3, r2
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c720:	0f92      	lsrs	r2, r2, #30
 800c722:	431a      	orrs	r2, r3
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c72c:	0edb      	lsrs	r3, r3, #27
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	f003 0307 	and.w	r3, r3, #7
 800c734:	b2da      	uxtb	r2, r3
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c73e:	0e1b      	lsrs	r3, r3, #24
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f003 0307 	and.w	r3, r3, #7
 800c746:	b2da      	uxtb	r2, r3
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c750:	0d5b      	lsrs	r3, r3, #21
 800c752:	b2db      	uxtb	r3, r3
 800c754:	f003 0307 	and.w	r3, r3, #7
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c762:	0c9b      	lsrs	r3, r3, #18
 800c764:	b2db      	uxtb	r3, r3
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c774:	0bdb      	lsrs	r3, r3, #15
 800c776:	b2db      	uxtb	r3, r3
 800c778:	f003 0307 	and.w	r3, r3, #7
 800c77c:	b2da      	uxtb	r2, r3
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	7e1b      	ldrb	r3, [r3, #24]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	f003 0307 	and.w	r3, r3, #7
 800c796:	3302      	adds	r3, #2
 800c798:	2201      	movs	r2, #1
 800c79a:	fa02 f303 	lsl.w	r3, r2, r3
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c7a2:	fb03 f202 	mul.w	r2, r3, r2
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	7a1b      	ldrb	r3, [r3, #8]
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	f003 030f 	and.w	r3, r3, #15
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	409a      	lsls	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c7c4:	0a52      	lsrs	r2, r2, #9
 800c7c6:	fb03 f202 	mul.w	r2, r3, r2
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7d4:	655a      	str	r2, [r3, #84]	@ 0x54
 800c7d6:	e031      	b.n	800c83c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d11d      	bne.n	800c81c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7e4:	041b      	lsls	r3, r3, #16
 800c7e6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ee:	0c1b      	lsrs	r3, r3, #16
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	029a      	lsls	r2, r3, #10
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c810:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	655a      	str	r2, [r3, #84]	@ 0x54
 800c81a:	e00f      	b.n	800c83c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a58      	ldr	r2, [pc, #352]	@ (800c984 <HAL_SD_GetCardCSD+0x344>)
 800c822:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c828:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	e09d      	b.n	800c978 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c840:	0b9b      	lsrs	r3, r3, #14
 800c842:	b2db      	uxtb	r3, r3
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	b2da      	uxtb	r2, r3
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c852:	09db      	lsrs	r3, r3, #7
 800c854:	b2db      	uxtb	r3, r3
 800c856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c864:	b2db      	uxtb	r3, r3
 800c866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c874:	0fdb      	lsrs	r3, r3, #31
 800c876:	b2da      	uxtb	r2, r3
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c880:	0f5b      	lsrs	r3, r3, #29
 800c882:	b2db      	uxtb	r3, r3
 800c884:	f003 0303 	and.w	r3, r3, #3
 800c888:	b2da      	uxtb	r2, r3
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c892:	0e9b      	lsrs	r3, r3, #26
 800c894:	b2db      	uxtb	r3, r3
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8a4:	0d9b      	lsrs	r3, r3, #22
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	f003 030f 	and.w	r3, r3, #15
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8b6:	0d5b      	lsrs	r3, r3, #21
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	f003 0301 	and.w	r3, r3, #1
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8d2:	0c1b      	lsrs	r3, r3, #16
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8e6:	0bdb      	lsrs	r3, r3, #15
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	f003 0301 	and.w	r3, r3, #1
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8fa:	0b9b      	lsrs	r3, r3, #14
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	f003 0301 	and.w	r3, r3, #1
 800c902:	b2da      	uxtb	r2, r3
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c90e:	0b5b      	lsrs	r3, r3, #13
 800c910:	b2db      	uxtb	r3, r3
 800c912:	f003 0301 	and.w	r3, r3, #1
 800c916:	b2da      	uxtb	r2, r3
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c922:	0b1b      	lsrs	r3, r3, #12
 800c924:	b2db      	uxtb	r3, r3
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c936:	0a9b      	lsrs	r3, r3, #10
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	f003 0303 	and.w	r3, r3, #3
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c94a:	0a1b      	lsrs	r3, r3, #8
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	f003 0303 	and.w	r3, r3, #3
 800c952:	b2da      	uxtb	r2, r3
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c95e:	085b      	lsrs	r3, r3, #1
 800c960:	b2db      	uxtb	r3, r3
 800c962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c966:	b2da      	uxtb	r2, r3
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2201      	movs	r2, #1
 800c972:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr
 800c984:	1fe00fff 	.word	0x1fe00fff

0800c988 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b094      	sub	sp, #80	@ 0x50
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	2b03      	cmp	r3, #3
 800c9a2:	d101      	bne.n	800c9a8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e0a7      	b.n	800caf8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c9a8:	f107 0308 	add.w	r3, r7, #8
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fb62 	bl	800d078 <SD_SendSDStatus>
 800c9b4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c9b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d011      	beq.n	800c9e0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a4f      	ldr	r2, [pc, #316]	@ (800cb00 <HAL_SD_GetCardStatus+0x178>)
 800c9c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c9de:	e070      	b.n	800cac2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	099b      	lsrs	r3, r3, #6
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	f003 0303 	and.w	r3, r3, #3
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	095b      	lsrs	r3, r3, #5
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	0a1b      	lsrs	r3, r3, #8
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	0e1b      	lsrs	r3, r3, #24
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	4313      	orrs	r3, r2
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	061a      	lsls	r2, r3, #24
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	021b      	lsls	r3, r3, #8
 800ca22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca26:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	0a1b      	lsrs	r3, r3, #8
 800ca2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca30:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	0e1b      	lsrs	r3, r3, #24
 800ca36:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	b2da      	uxtb	r2, r3
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	0a1b      	lsrs	r3, r3, #8
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	0d1b      	lsrs	r3, r3, #20
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	f003 030f 	and.w	r3, r3, #15
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	0c1b      	lsrs	r3, r3, #16
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	4313      	orrs	r3, r2
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	0a9b      	lsrs	r3, r3, #10
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	0a1b      	lsrs	r3, r3, #8
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	f003 0303 	and.w	r3, r3, #3
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	091b      	lsrs	r3, r3, #4
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	f003 030f 	and.w	r3, r3, #15
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	b2db      	uxtb	r3, r3
 800caae:	f003 030f 	and.w	r3, r3, #15
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	0e1b      	lsrs	r3, r3, #24
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800caca:	4618      	mov	r0, r3
 800cacc:	f003 fb1c 	bl	8010108 <SDMMC_CmdBlockLength>
 800cad0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00d      	beq.n	800caf4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a08      	ldr	r2, [pc, #32]	@ (800cb00 <HAL_SD_GetCardStatus+0x178>)
 800cade:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cae4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2201      	movs	r2, #1
 800caea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800caf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3750      	adds	r7, #80	@ 0x50
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	1fe00fff 	.word	0x1fe00fff

0800cb04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cb5c:	b590      	push	{r4, r7, lr}
 800cb5e:	b08d      	sub	sp, #52	@ 0x34
 800cb60:	af02      	add	r7, sp, #8
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2203      	movs	r2, #3
 800cb70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d02e      	beq.n	800cbda <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb82:	d106      	bne.n	800cb92 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	635a      	str	r2, [r3, #52]	@ 0x34
 800cb90:	e029      	b.n	800cbe6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb98:	d10a      	bne.n	800cbb0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 fb64 	bl	800d268 <SD_WideBus_Enable>
 800cba0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cba6:	6a3b      	ldr	r3, [r7, #32]
 800cba8:	431a      	orrs	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbae:	e01a      	b.n	800cbe6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d10a      	bne.n	800cbcc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fba1 	bl	800d2fe <SD_WideBus_Disable>
 800cbbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	431a      	orrs	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbca:	e00c      	b.n	800cbe6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbd0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbd8:	e005      	b.n	800cbe6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbde:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d007      	beq.n	800cbfe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a5f      	ldr	r2, [pc, #380]	@ (800cd70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cbf4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cbfc:	e096      	b.n	800cd2c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cbfe:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cc02:	f04f 0100 	mov.w	r1, #0
 800cc06:	f7fd fea3 	bl	800a950 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc0a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 8083 	beq.w	800cd1a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	695a      	ldr	r2, [r3, #20]
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	4950      	ldr	r1, [pc, #320]	@ (800cd74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc32:	fba1 1303 	umull	r1, r3, r1, r3
 800cc36:	0e1b      	lsrs	r3, r3, #24
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d303      	bcc.n	800cc44 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	695b      	ldr	r3, [r3, #20]
 800cc40:	61bb      	str	r3, [r7, #24]
 800cc42:	e05a      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc4c:	d103      	bne.n	800cc56 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	695b      	ldr	r3, [r3, #20]
 800cc52:	61bb      	str	r3, [r7, #24]
 800cc54:	e051      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc5e:	d126      	bne.n	800ccae <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10e      	bne.n	800cc86 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	4a43      	ldr	r2, [pc, #268]	@ (800cd78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d906      	bls.n	800cc7e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	4a40      	ldr	r2, [pc, #256]	@ (800cd74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc74:	fba2 2303 	umull	r2, r3, r2, r3
 800cc78:	0e5b      	lsrs	r3, r3, #25
 800cc7a:	61bb      	str	r3, [r7, #24]
 800cc7c:	e03d      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	61bb      	str	r3, [r7, #24]
 800cc84:	e039      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	69fa      	ldr	r2, [r7, #28]
 800cc8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc92:	4a39      	ldr	r2, [pc, #228]	@ (800cd78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d906      	bls.n	800cca6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	4a36      	ldr	r2, [pc, #216]	@ (800cd74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc9c:	fba2 2303 	umull	r2, r3, r2, r3
 800cca0:	0e5b      	lsrs	r3, r3, #25
 800cca2:	61bb      	str	r3, [r7, #24]
 800cca4:	e029      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	695b      	ldr	r3, [r3, #20]
 800ccaa:	61bb      	str	r3, [r7, #24]
 800ccac:	e025      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10e      	bne.n	800ccd4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	4a30      	ldr	r2, [pc, #192]	@ (800cd7c <HAL_SD_ConfigWideBusOperation+0x220>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d906      	bls.n	800cccc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	4a2c      	ldr	r2, [pc, #176]	@ (800cd74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccc2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc6:	0e1b      	lsrs	r3, r3, #24
 800ccc8:	61bb      	str	r3, [r7, #24]
 800ccca:	e016      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	695b      	ldr	r3, [r3, #20]
 800ccd0:	61bb      	str	r3, [r7, #24]
 800ccd2:	e012      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	69fa      	ldr	r2, [r7, #28]
 800ccdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce0:	4a26      	ldr	r2, [pc, #152]	@ (800cd7c <HAL_SD_ConfigWideBusOperation+0x220>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d906      	bls.n	800ccf4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	4a22      	ldr	r2, [pc, #136]	@ (800cd74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccea:	fba2 2303 	umull	r2, r3, r2, r3
 800ccee:	0e1b      	lsrs	r3, r3, #24
 800ccf0:	61bb      	str	r3, [r7, #24]
 800ccf2:	e002      	b.n	800ccfa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681c      	ldr	r4, [r3, #0]
 800ccfe:	466a      	mov	r2, sp
 800cd00:	f107 0314 	add.w	r3, r7, #20
 800cd04:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd08:	e882 0003 	stmia.w	r2, {r0, r1}
 800cd0c:	f107 0308 	add.w	r3, r7, #8
 800cd10:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd12:	4620      	mov	r0, r4
 800cd14:	f003 f91a 	bl	800ff4c <SDMMC_Init>
 800cd18:	e008      	b.n	800cd2c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd34:	4618      	mov	r0, r3
 800cd36:	f003 f9e7 	bl	8010108 <SDMMC_CmdBlockLength>
 800cd3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00c      	beq.n	800cd5c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a0a      	ldr	r2, [pc, #40]	@ (800cd70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cd48:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	431a      	orrs	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cd64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	372c      	adds	r7, #44	@ 0x2c
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd90      	pop	{r4, r7, pc}
 800cd70:	1fe00fff 	.word	0x1fe00fff
 800cd74:	55e63b89 	.word	0x55e63b89
 800cd78:	02faf080 	.word	0x02faf080
 800cd7c:	017d7840 	.word	0x017d7840

0800cd80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cd8c:	f107 030c 	add.w	r3, r7, #12
 800cd90:	4619      	mov	r1, r3
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fa40 	bl	800d218 <SD_SendStatus>
 800cd98:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d005      	beq.n	800cdac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	431a      	orrs	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	0a5b      	lsrs	r3, r3, #9
 800cdb0:	f003 030f 	and.w	r3, r3, #15
 800cdb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cdb6:	693b      	ldr	r3, [r7, #16]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b090      	sub	sp, #64	@ 0x40
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cdcc:	f7f5 fde8 	bl	80029a0 <HAL_GetTick>
 800cdd0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f003 f911 	bl	800fffe <SDMMC_GetPowerState>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d102      	bne.n	800cde8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cde2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cde6:	e0b5      	b.n	800cf54 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdec:	2b03      	cmp	r3, #3
 800cdee:	d02e      	beq.n	800ce4e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f003 fb5c 	bl	80104b2 <SDMMC_CmdSendCID>
 800cdfa:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <SD_InitCard+0x46>
    {
      return errorstate;
 800ce02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce04:	e0a6      	b.n	800cf54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f003 f93c 	bl	801008a <SDMMC_GetResponse>
 800ce12:	4602      	mov	r2, r0
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2104      	movs	r1, #4
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f003 f933 	bl	801008a <SDMMC_GetResponse>
 800ce24:	4602      	mov	r2, r0
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2108      	movs	r1, #8
 800ce30:	4618      	mov	r0, r3
 800ce32:	f003 f92a 	bl	801008a <SDMMC_GetResponse>
 800ce36:	4602      	mov	r2, r0
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	210c      	movs	r1, #12
 800ce42:	4618      	mov	r0, r3
 800ce44:	f003 f921 	bl	801008a <SDMMC_GetResponse>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce52:	2b03      	cmp	r3, #3
 800ce54:	d01d      	beq.n	800ce92 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ce56:	e019      	b.n	800ce8c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f107 020a 	add.w	r2, r7, #10
 800ce60:	4611      	mov	r1, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f003 fb64 	bl	8010530 <SDMMC_CmdSetRelAdd>
 800ce68:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ce70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce72:	e06f      	b.n	800cf54 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ce74:	f7f5 fd94 	bl	80029a0 <HAL_GetTick>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d902      	bls.n	800ce8c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ce86:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce8a:	e063      	b.n	800cf54 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ce8c:	897b      	ldrh	r3, [r7, #10]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0e2      	beq.n	800ce58 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d036      	beq.n	800cf08 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ce9a:	897b      	ldrh	r3, [r7, #10]
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceaa:	041b      	lsls	r3, r3, #16
 800ceac:	4619      	mov	r1, r3
 800ceae:	4610      	mov	r0, r2
 800ceb0:	f003 fb1e 	bl	80104f0 <SDMMC_CmdSendCSD>
 800ceb4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d001      	beq.n	800cec0 <SD_InitCard+0x100>
    {
      return errorstate;
 800cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebe:	e049      	b.n	800cf54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2100      	movs	r1, #0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f003 f8df 	bl	801008a <SDMMC_GetResponse>
 800cecc:	4602      	mov	r2, r0
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2104      	movs	r1, #4
 800ced8:	4618      	mov	r0, r3
 800ceda:	f003 f8d6 	bl	801008a <SDMMC_GetResponse>
 800cede:	4602      	mov	r2, r0
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2108      	movs	r1, #8
 800ceea:	4618      	mov	r0, r3
 800ceec:	f003 f8cd 	bl	801008a <SDMMC_GetResponse>
 800cef0:	4602      	mov	r2, r0
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	210c      	movs	r1, #12
 800cefc:	4618      	mov	r0, r3
 800cefe:	f003 f8c4 	bl	801008a <SDMMC_GetResponse>
 800cf02:	4602      	mov	r2, r0
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2104      	movs	r1, #4
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f003 f8bb 	bl	801008a <SDMMC_GetResponse>
 800cf14:	4603      	mov	r3, r0
 800cf16:	0d1a      	lsrs	r2, r3, #20
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cf1c:	f107 030c 	add.w	r3, r7, #12
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7ff fb8c 	bl	800c640 <HAL_SD_GetCardCSD>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cf32:	e00f      	b.n	800cf54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf3c:	041b      	lsls	r3, r3, #16
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4610      	mov	r0, r2
 800cf42:	f003 f9cd 	bl	80102e0 <SDMMC_CmdSelDesel>
 800cf46:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <SD_InitCard+0x192>
  {
    return errorstate;
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf50:	e000      	b.n	800cf54 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3740      	adds	r7, #64	@ 0x40
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf64:	2300      	movs	r3, #0
 800cf66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f003 f9d6 	bl	8010326 <SDMMC_CmdGoIdleState>
 800cf7a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	e072      	b.n	800d06c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f003 f9e9 	bl	8010362 <SDMMC_CmdOperCond>
 800cf90:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf98:	d10d      	bne.n	800cfb6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f003 f9be 	bl	8010326 <SDMMC_CmdGoIdleState>
 800cfaa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d004      	beq.n	800cfbc <SD_PowerON+0x60>
    {
      return errorstate;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	e05a      	b.n	800d06c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d137      	bne.n	800d034 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2100      	movs	r1, #0
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f003 f9e9 	bl	80103a2 <SDMMC_CmdAppCommand>
 800cfd0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d02d      	beq.n	800d034 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfd8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cfdc:	e046      	b.n	800d06c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f003 f9dc 	bl	80103a2 <SDMMC_CmdAppCommand>
 800cfea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	e03a      	b.n	800d06c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	491e      	ldr	r1, [pc, #120]	@ (800d074 <SD_PowerON+0x118>)
 800cffc:	4618      	mov	r0, r3
 800cffe:	f003 f9f3 	bl	80103e8 <SDMMC_CmdAppOperCommand>
 800d002:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d002      	beq.n	800d010 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d00a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d00e:	e02d      	b.n	800d06c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2100      	movs	r1, #0
 800d016:	4618      	mov	r0, r3
 800d018:	f003 f837 	bl	801008a <SDMMC_GetResponse>
 800d01c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	0fdb      	lsrs	r3, r3, #31
 800d022:	2b01      	cmp	r3, #1
 800d024:	d101      	bne.n	800d02a <SD_PowerON+0xce>
 800d026:	2301      	movs	r3, #1
 800d028:	e000      	b.n	800d02c <SD_PowerON+0xd0>
 800d02a:	2300      	movs	r3, #0
 800d02c:	613b      	str	r3, [r7, #16]

    count++;
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	3301      	adds	r3, #1
 800d032:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d802      	bhi.n	800d044 <SD_PowerON+0xe8>
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d0cc      	beq.n	800cfde <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d902      	bls.n	800d054 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d04e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d052:	e00b      	b.n	800d06c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3718      	adds	r7, #24
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	c1100000 	.word	0xc1100000

0800d078 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08c      	sub	sp, #48	@ 0x30
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d082:	f7f5 fc8d 	bl	80029a0 <HAL_GetTick>
 800d086:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2100      	movs	r1, #0
 800d092:	4618      	mov	r0, r3
 800d094:	f002 fff9 	bl	801008a <SDMMC_GetResponse>
 800d098:	4603      	mov	r3, r0
 800d09a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d09e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0a2:	d102      	bne.n	800d0aa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d0a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d0a8:	e0b0      	b.n	800d20c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2140      	movs	r1, #64	@ 0x40
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f003 f829 	bl	8010108 <SDMMC_CmdBlockLength>
 800d0b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d005      	beq.n	800d0ca <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	e0a0      	b.n	800d20c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0d2:	041b      	lsls	r3, r3, #16
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	f003 f963 	bl	80103a2 <SDMMC_CmdAppCommand>
 800d0dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0de:	6a3b      	ldr	r3, [r7, #32]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d005      	beq.n	800d0f0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	e08d      	b.n	800d20c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d0f6:	2340      	movs	r3, #64	@ 0x40
 800d0f8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d0fa:	2360      	movs	r3, #96	@ 0x60
 800d0fc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d0fe:	2302      	movs	r3, #2
 800d100:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d102:	2300      	movs	r3, #0
 800d104:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d106:	2301      	movs	r3, #1
 800d108:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f107 0208 	add.w	r2, r7, #8
 800d112:	4611      	mov	r1, r2
 800d114:	4618      	mov	r0, r3
 800d116:	f002 ffcb 	bl	80100b0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4618      	mov	r0, r3
 800d120:	f003 fa4b 	bl	80105ba <SDMMC_CmdStatusRegister>
 800d124:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d02b      	beq.n	800d184 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	e069      	b.n	800d20c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d13e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d013      	beq.n	800d16e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d146:	2300      	movs	r3, #0
 800d148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d14a:	e00d      	b.n	800d168 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4618      	mov	r0, r3
 800d152:	f002 ff25 	bl	800ffa0 <SDMMC_ReadFIFO>
 800d156:	4602      	mov	r2, r0
 800d158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15a:	601a      	str	r2, [r3, #0]
        pData++;
 800d15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15e:	3304      	adds	r3, #4
 800d160:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d164:	3301      	adds	r3, #1
 800d166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16a:	2b07      	cmp	r3, #7
 800d16c:	d9ee      	bls.n	800d14c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d16e:	f7f5 fc17 	bl	80029a0 <HAL_GetTick>
 800d172:	4602      	mov	r2, r0
 800d174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17c:	d102      	bne.n	800d184 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d17e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d182:	e043      	b.n	800d20c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d18a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d0d2      	beq.n	800d138 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d198:	f003 0308 	and.w	r3, r3, #8
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	e033      	b.n	800d20c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1aa:	f003 0302 	and.w	r3, r3, #2
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	e02a      	b.n	800d20c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1bc:	f003 0320 	and.w	r3, r3, #32
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d017      	beq.n	800d1f4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d1c4:	2320      	movs	r3, #32
 800d1c6:	e021      	b.n	800d20c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f002 fee7 	bl	800ffa0 <SDMMC_ReadFIFO>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d6:	601a      	str	r2, [r3, #0]
    pData++;
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	3304      	adds	r3, #4
 800d1dc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1de:	f7f5 fbdf 	bl	80029a0 <HAL_GetTick>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ec:	d102      	bne.n	800d1f4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d1ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1f2:	e00b      	b.n	800d20c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1e2      	bne.n	800d1c8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a03      	ldr	r2, [pc, #12]	@ (800d214 <SD_SendSDStatus+0x19c>)
 800d208:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3730      	adds	r7, #48	@ 0x30
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	18000f3a 	.word	0x18000f3a

0800d218 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d228:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d22c:	e018      	b.n	800d260 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d236:	041b      	lsls	r3, r3, #16
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f003 f99a 	bl	8010574 <SDMMC_CmdSendStatus>
 800d240:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d001      	beq.n	800d24c <SD_SendStatus+0x34>
  {
    return errorstate;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	e009      	b.n	800d260 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2100      	movs	r1, #0
 800d252:	4618      	mov	r0, r3
 800d254:	f002 ff19 	bl	801008a <SDMMC_GetResponse>
 800d258:	4602      	mov	r2, r0
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	4618      	mov	r0, r3
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b086      	sub	sp, #24
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d270:	2300      	movs	r3, #0
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	2300      	movs	r3, #0
 800d276:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2100      	movs	r1, #0
 800d27e:	4618      	mov	r0, r3
 800d280:	f002 ff03 	bl	801008a <SDMMC_GetResponse>
 800d284:	4603      	mov	r3, r0
 800d286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d28a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d28e:	d102      	bne.n	800d296 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d290:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d294:	e02f      	b.n	800d2f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d296:	f107 030c 	add.w	r3, r7, #12
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f879 	bl	800d394 <SD_FindSCR>
 800d2a2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d001      	beq.n	800d2ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	e023      	b.n	800d2f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d01c      	beq.n	800d2f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2c0:	041b      	lsls	r3, r3, #16
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	f003 f86c 	bl	80103a2 <SDMMC_CmdAppCommand>
 800d2ca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	e00f      	b.n	800d2f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2102      	movs	r1, #2
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f003 f8a3 	bl	8010428 <SDMMC_CmdBusWidth>
 800d2e2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	e003      	b.n	800d2f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e001      	b.n	800d2f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b086      	sub	sp, #24
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d306:	2300      	movs	r3, #0
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	2300      	movs	r3, #0
 800d30c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2100      	movs	r1, #0
 800d314:	4618      	mov	r0, r3
 800d316:	f002 feb8 	bl	801008a <SDMMC_GetResponse>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d320:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d324:	d102      	bne.n	800d32c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d326:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d32a:	e02f      	b.n	800d38c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d32c:	f107 030c 	add.w	r3, r7, #12
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f82e 	bl	800d394 <SD_FindSCR>
 800d338:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	e023      	b.n	800d38c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d01c      	beq.n	800d388 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d356:	041b      	lsls	r3, r3, #16
 800d358:	4619      	mov	r1, r3
 800d35a:	4610      	mov	r0, r2
 800d35c:	f003 f821 	bl	80103a2 <SDMMC_CmdAppCommand>
 800d360:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d001      	beq.n	800d36c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	e00f      	b.n	800d38c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2100      	movs	r1, #0
 800d372:	4618      	mov	r0, r3
 800d374:	f003 f858 	bl	8010428 <SDMMC_CmdBusWidth>
 800d378:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	e003      	b.n	800d38c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d384:	2300      	movs	r3, #0
 800d386:	e001      	b.n	800d38c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d388:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3718      	adds	r7, #24
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b08e      	sub	sp, #56	@ 0x38
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d39e:	f7f5 faff 	bl	80029a0 <HAL_GetTick>
 800d3a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60bb      	str	r3, [r7, #8]
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2108      	movs	r1, #8
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f002 fea4 	bl	8010108 <SDMMC_CmdBlockLength>
 800d3c0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <SD_FindSCR+0x38>
  {
    return errorstate;
 800d3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ca:	e0ad      	b.n	800d528 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3d4:	041b      	lsls	r3, r3, #16
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f002 ffe2 	bl	80103a2 <SDMMC_CmdAppCommand>
 800d3de:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <SD_FindSCR+0x56>
  {
    return errorstate;
 800d3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e8:	e09e      	b.n	800d528 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d3f0:	2308      	movs	r3, #8
 800d3f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d3f4:	2330      	movs	r3, #48	@ 0x30
 800d3f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d400:	2301      	movs	r3, #1
 800d402:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f107 0210 	add.w	r2, r7, #16
 800d40c:	4611      	mov	r1, r2
 800d40e:	4618      	mov	r0, r3
 800d410:	f002 fe4e 	bl	80100b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	f003 f828 	bl	801046e <SDMMC_CmdSendSCR>
 800d41e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d422:	2b00      	cmp	r3, #0
 800d424:	d027      	beq.n	800d476 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d428:	e07e      	b.n	800d528 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d430:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d434:	2b00      	cmp	r3, #0
 800d436:	d113      	bne.n	800d460 <SD_FindSCR+0xcc>
 800d438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d110      	bne.n	800d460 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4618      	mov	r0, r3
 800d444:	f002 fdac 	bl	800ffa0 <SDMMC_ReadFIFO>
 800d448:	4603      	mov	r3, r0
 800d44a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4618      	mov	r0, r3
 800d452:	f002 fda5 	bl	800ffa0 <SDMMC_ReadFIFO>
 800d456:	4603      	mov	r3, r0
 800d458:	60fb      	str	r3, [r7, #12]
      index++;
 800d45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45c:	3301      	adds	r3, #1
 800d45e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d460:	f7f5 fa9e 	bl	80029a0 <HAL_GetTick>
 800d464:	4602      	mov	r2, r0
 800d466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d46e:	d102      	bne.n	800d476 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d470:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d474:	e058      	b.n	800d528 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d47c:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d480:	4013      	ands	r3, r2
 800d482:	2b00      	cmp	r3, #0
 800d484:	d0d1      	beq.n	800d42a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d48c:	f003 0308 	and.w	r3, r3, #8
 800d490:	2b00      	cmp	r3, #0
 800d492:	d005      	beq.n	800d4a0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2208      	movs	r2, #8
 800d49a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d49c:	2308      	movs	r3, #8
 800d49e:	e043      	b.n	800d528 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4a6:	f003 0302 	and.w	r3, r3, #2
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d005      	beq.n	800d4ba <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	e036      	b.n	800d528 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4c0:	f003 0320 	and.w	r3, r3, #32
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d005      	beq.n	800d4d4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2220      	movs	r2, #32
 800d4ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d4d0:	2320      	movs	r3, #32
 800d4d2:	e029      	b.n	800d528 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a15      	ldr	r2, [pc, #84]	@ (800d530 <SD_FindSCR+0x19c>)
 800d4da:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	061a      	lsls	r2, r3, #24
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	021b      	lsls	r3, r3, #8
 800d4e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d4e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	0a1b      	lsrs	r3, r3, #8
 800d4ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	0e1b      	lsrs	r3, r3, #24
 800d4f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fc:	601a      	str	r2, [r3, #0]
    scr++;
 800d4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d500:	3304      	adds	r3, #4
 800d502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	061a      	lsls	r2, r3, #24
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	021b      	lsls	r3, r3, #8
 800d50c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d510:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	0a1b      	lsrs	r3, r3, #8
 800d516:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d51a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	0e1b      	lsrs	r3, r3, #24
 800d520:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d524:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3738      	adds	r7, #56	@ 0x38
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	18000f3a 	.word	0x18000f3a

0800d534 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d540:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d546:	2b1f      	cmp	r3, #31
 800d548:	d936      	bls.n	800d5b8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d54a:	2300      	movs	r3, #0
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	e027      	b.n	800d5a0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4618      	mov	r0, r3
 800d556:	f002 fd23 	bl	800ffa0 <SDMMC_ReadFIFO>
 800d55a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	3301      	adds	r3, #1
 800d568:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	0a1b      	lsrs	r3, r3, #8
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	3301      	adds	r3, #1
 800d578:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	0c1b      	lsrs	r3, r3, #16
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	3301      	adds	r3, #1
 800d588:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	0e1b      	lsrs	r3, r3, #24
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	3301      	adds	r3, #1
 800d598:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	3301      	adds	r3, #1
 800d59e:	617b      	str	r3, [r7, #20]
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2b07      	cmp	r3, #7
 800d5a4:	d9d4      	bls.n	800d550 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	693a      	ldr	r2, [r7, #16]
 800d5aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b0:	f1a3 0220 	sub.w	r2, r3, #32
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d5b8:	bf00      	nop
 800d5ba:	3718      	adds	r7, #24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	69db      	ldr	r3, [r3, #28]
 800d5cc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	2b1f      	cmp	r3, #31
 800d5d4:	d93a      	bls.n	800d64c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	617b      	str	r3, [r7, #20]
 800d5da:	e02b      	b.n	800d634 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	021a      	lsls	r2, r3, #8
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	041a      	lsls	r2, r3, #16
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	3301      	adds	r3, #1
 800d60a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	061a      	lsls	r2, r3, #24
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	4313      	orrs	r3, r2
 800d616:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	3301      	adds	r3, #1
 800d61c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f107 020c 	add.w	r2, r7, #12
 800d626:	4611      	mov	r1, r2
 800d628:	4618      	mov	r0, r3
 800d62a:	f002 fcc6 	bl	800ffba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	3301      	adds	r3, #1
 800d632:	617b      	str	r3, [r7, #20]
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	2b07      	cmp	r3, #7
 800d638:	d9d0      	bls.n	800d5dc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	693a      	ldr	r2, [r7, #16]
 800d63e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a1b      	ldr	r3, [r3, #32]
 800d644:	f1a3 0220 	sub.w	r2, r3, #32
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	621a      	str	r2, [r3, #32]
  }
}
 800d64c:	bf00      	nop
 800d64e:	3718      	adds	r7, #24
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d101      	bne.n	800d6b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e049      	b.n	800d74a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d106      	bne.n	800d6d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7f4 fe66 	bl	800239c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	3304      	adds	r3, #4
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4610      	mov	r0, r2
 800d6e4:	f000 fc58 	bl	800df98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2201      	movs	r2, #1
 800d724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b01      	cmp	r3, #1
 800d766:	d001      	beq.n	800d76c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	e05e      	b.n	800d82a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2202      	movs	r2, #2
 800d770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	68da      	ldr	r2, [r3, #12]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f042 0201 	orr.w	r2, r2, #1
 800d782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a2b      	ldr	r2, [pc, #172]	@ (800d838 <HAL_TIM_Base_Start_IT+0xe4>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d02c      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d796:	d027      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a27      	ldr	r2, [pc, #156]	@ (800d83c <HAL_TIM_Base_Start_IT+0xe8>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d022      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a26      	ldr	r2, [pc, #152]	@ (800d840 <HAL_TIM_Base_Start_IT+0xec>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d01d      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a24      	ldr	r2, [pc, #144]	@ (800d844 <HAL_TIM_Base_Start_IT+0xf0>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d018      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a23      	ldr	r2, [pc, #140]	@ (800d848 <HAL_TIM_Base_Start_IT+0xf4>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d013      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a21      	ldr	r2, [pc, #132]	@ (800d84c <HAL_TIM_Base_Start_IT+0xf8>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d00e      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a20      	ldr	r2, [pc, #128]	@ (800d850 <HAL_TIM_Base_Start_IT+0xfc>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d009      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a1e      	ldr	r2, [pc, #120]	@ (800d854 <HAL_TIM_Base_Start_IT+0x100>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d004      	beq.n	800d7e8 <HAL_TIM_Base_Start_IT+0x94>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4a1d      	ldr	r2, [pc, #116]	@ (800d858 <HAL_TIM_Base_Start_IT+0x104>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d115      	bne.n	800d814 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	689a      	ldr	r2, [r3, #8]
 800d7ee:	4b1b      	ldr	r3, [pc, #108]	@ (800d85c <HAL_TIM_Base_Start_IT+0x108>)
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2b06      	cmp	r3, #6
 800d7f8:	d015      	beq.n	800d826 <HAL_TIM_Base_Start_IT+0xd2>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d800:	d011      	beq.n	800d826 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f042 0201 	orr.w	r2, r2, #1
 800d810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d812:	e008      	b.n	800d826 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f042 0201 	orr.w	r2, r2, #1
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	e000      	b.n	800d828 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3714      	adds	r7, #20
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	40010000 	.word	0x40010000
 800d83c:	40000400 	.word	0x40000400
 800d840:	40000800 	.word	0x40000800
 800d844:	40000c00 	.word	0x40000c00
 800d848:	40010400 	.word	0x40010400
 800d84c:	40001800 	.word	0x40001800
 800d850:	40014000 	.word	0x40014000
 800d854:	4000e000 	.word	0x4000e000
 800d858:	4000e400 	.word	0x4000e400
 800d85c:	00010007 	.word	0x00010007

0800d860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d101      	bne.n	800d872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	e049      	b.n	800d906 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d106      	bne.n	800d88c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f841 	bl	800d90e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2202      	movs	r2, #2
 800d890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f000 fb7a 	bl	800df98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d90e:	b480      	push	{r7}
 800d910:	b083      	sub	sp, #12
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d916:	bf00      	nop
 800d918:	370c      	adds	r7, #12
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr

0800d922 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	f003 0302 	and.w	r3, r3, #2
 800d940:	2b00      	cmp	r3, #0
 800d942:	d020      	beq.n	800d986 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d01b      	beq.n	800d986 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f06f 0202 	mvn.w	r2, #2
 800d956:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	f003 0303 	and.w	r3, r3, #3
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d003      	beq.n	800d974 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 faf5 	bl	800df5c <HAL_TIM_IC_CaptureCallback>
 800d972:	e005      	b.n	800d980 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fae7 	bl	800df48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 faf8 	bl	800df70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	f003 0304 	and.w	r3, r3, #4
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d020      	beq.n	800d9d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f003 0304 	and.w	r3, r3, #4
 800d996:	2b00      	cmp	r3, #0
 800d998:	d01b      	beq.n	800d9d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f06f 0204 	mvn.w	r2, #4
 800d9a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d003      	beq.n	800d9c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 facf 	bl	800df5c <HAL_TIM_IC_CaptureCallback>
 800d9be:	e005      	b.n	800d9cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 fac1 	bl	800df48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fad2 	bl	800df70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	f003 0308 	and.w	r3, r3, #8
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d020      	beq.n	800da1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f003 0308 	and.w	r3, r3, #8
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d01b      	beq.n	800da1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f06f 0208 	mvn.w	r2, #8
 800d9ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2204      	movs	r2, #4
 800d9f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	69db      	ldr	r3, [r3, #28]
 800d9fc:	f003 0303 	and.w	r3, r3, #3
 800da00:	2b00      	cmp	r3, #0
 800da02:	d003      	beq.n	800da0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 faa9 	bl	800df5c <HAL_TIM_IC_CaptureCallback>
 800da0a:	e005      	b.n	800da18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fa9b 	bl	800df48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 faac 	bl	800df70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	f003 0310 	and.w	r3, r3, #16
 800da24:	2b00      	cmp	r3, #0
 800da26:	d020      	beq.n	800da6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f003 0310 	and.w	r3, r3, #16
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d01b      	beq.n	800da6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f06f 0210 	mvn.w	r2, #16
 800da3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2208      	movs	r2, #8
 800da40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	69db      	ldr	r3, [r3, #28]
 800da48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d003      	beq.n	800da58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 fa83 	bl	800df5c <HAL_TIM_IC_CaptureCallback>
 800da56:	e005      	b.n	800da64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 fa75 	bl	800df48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 fa86 	bl	800df70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	f003 0301 	and.w	r3, r3, #1
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00c      	beq.n	800da8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d007      	beq.n	800da8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f06f 0201 	mvn.w	r2, #1
 800da86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7f4 f823 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da94:	2b00      	cmp	r3, #0
 800da96:	d104      	bne.n	800daa2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00c      	beq.n	800dabc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d007      	beq.n	800dabc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 ffc6 	bl	800ea48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00c      	beq.n	800dae0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d007      	beq.n	800dae0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 ffbe 	bl	800ea5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00c      	beq.n	800db04 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d007      	beq.n	800db04 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dafc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fa40 	bl	800df84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f003 0320 	and.w	r3, r3, #32
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00c      	beq.n	800db28 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f003 0320 	and.w	r3, r3, #32
 800db14:	2b00      	cmp	r3, #0
 800db16:	d007      	beq.n	800db28 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f06f 0220 	mvn.w	r2, #32
 800db20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 ff86 	bl	800ea34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db28:	bf00      	nop
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db46:	2b01      	cmp	r3, #1
 800db48:	d101      	bne.n	800db4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db4a:	2302      	movs	r3, #2
 800db4c:	e0ff      	b.n	800dd4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2201      	movs	r2, #1
 800db52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b14      	cmp	r3, #20
 800db5a:	f200 80f0 	bhi.w	800dd3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db5e:	a201      	add	r2, pc, #4	@ (adr r2, 800db64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db64:	0800dbb9 	.word	0x0800dbb9
 800db68:	0800dd3f 	.word	0x0800dd3f
 800db6c:	0800dd3f 	.word	0x0800dd3f
 800db70:	0800dd3f 	.word	0x0800dd3f
 800db74:	0800dbf9 	.word	0x0800dbf9
 800db78:	0800dd3f 	.word	0x0800dd3f
 800db7c:	0800dd3f 	.word	0x0800dd3f
 800db80:	0800dd3f 	.word	0x0800dd3f
 800db84:	0800dc3b 	.word	0x0800dc3b
 800db88:	0800dd3f 	.word	0x0800dd3f
 800db8c:	0800dd3f 	.word	0x0800dd3f
 800db90:	0800dd3f 	.word	0x0800dd3f
 800db94:	0800dc7b 	.word	0x0800dc7b
 800db98:	0800dd3f 	.word	0x0800dd3f
 800db9c:	0800dd3f 	.word	0x0800dd3f
 800dba0:	0800dd3f 	.word	0x0800dd3f
 800dba4:	0800dcbd 	.word	0x0800dcbd
 800dba8:	0800dd3f 	.word	0x0800dd3f
 800dbac:	0800dd3f 	.word	0x0800dd3f
 800dbb0:	0800dd3f 	.word	0x0800dd3f
 800dbb4:	0800dcfd 	.word	0x0800dcfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68b9      	ldr	r1, [r7, #8]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 fa9c 	bl	800e0fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	699a      	ldr	r2, [r3, #24]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f042 0208 	orr.w	r2, r2, #8
 800dbd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	699a      	ldr	r2, [r3, #24]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f022 0204 	bic.w	r2, r2, #4
 800dbe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6999      	ldr	r1, [r3, #24]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	691a      	ldr	r2, [r3, #16]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	430a      	orrs	r2, r1
 800dbf4:	619a      	str	r2, [r3, #24]
      break;
 800dbf6:	e0a5      	b.n	800dd44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	68b9      	ldr	r1, [r7, #8]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 fb0c 	bl	800e21c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	699a      	ldr	r2, [r3, #24]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	699a      	ldr	r2, [r3, #24]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6999      	ldr	r1, [r3, #24]
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	021a      	lsls	r2, r3, #8
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	430a      	orrs	r2, r1
 800dc36:	619a      	str	r2, [r3, #24]
      break;
 800dc38:	e084      	b.n	800dd44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f000 fb75 	bl	800e330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	69da      	ldr	r2, [r3, #28]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f042 0208 	orr.w	r2, r2, #8
 800dc54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	69da      	ldr	r2, [r3, #28]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f022 0204 	bic.w	r2, r2, #4
 800dc64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	69d9      	ldr	r1, [r3, #28]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	691a      	ldr	r2, [r3, #16]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	430a      	orrs	r2, r1
 800dc76:	61da      	str	r2, [r3, #28]
      break;
 800dc78:	e064      	b.n	800dd44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	68b9      	ldr	r1, [r7, #8]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f000 fbdd 	bl	800e440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	69da      	ldr	r2, [r3, #28]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	69da      	ldr	r2, [r3, #28]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	69d9      	ldr	r1, [r3, #28]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	691b      	ldr	r3, [r3, #16]
 800dcb0:	021a      	lsls	r2, r3, #8
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	430a      	orrs	r2, r1
 800dcb8:	61da      	str	r2, [r3, #28]
      break;
 800dcba:	e043      	b.n	800dd44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68b9      	ldr	r1, [r7, #8]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 fc26 	bl	800e514 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f042 0208 	orr.w	r2, r2, #8
 800dcd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f022 0204 	bic.w	r2, r2, #4
 800dce6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	691a      	ldr	r2, [r3, #16]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	430a      	orrs	r2, r1
 800dcf8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dcfa:	e023      	b.n	800dd44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68b9      	ldr	r1, [r7, #8]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 fc6a 	bl	800e5dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	691b      	ldr	r3, [r3, #16]
 800dd32:	021a      	lsls	r2, r3, #8
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	430a      	orrs	r2, r1
 800dd3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd3c:	e002      	b.n	800dd44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	75fb      	strb	r3, [r7, #23]
      break;
 800dd42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3718      	adds	r7, #24
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop

0800dd58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d101      	bne.n	800dd74 <HAL_TIM_ConfigClockSource+0x1c>
 800dd70:	2302      	movs	r3, #2
 800dd72:	e0dc      	b.n	800df2e <HAL_TIM_ConfigClockSource+0x1d6>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2202      	movs	r2, #2
 800dd80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd8c:	68ba      	ldr	r2, [r7, #8]
 800dd8e:	4b6a      	ldr	r3, [pc, #424]	@ (800df38 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dd90:	4013      	ands	r3, r2
 800dd92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a64      	ldr	r2, [pc, #400]	@ (800df3c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	f000 80a9 	beq.w	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddb0:	4a62      	ldr	r2, [pc, #392]	@ (800df3c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	f200 80ae 	bhi.w	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddb8:	4a61      	ldr	r2, [pc, #388]	@ (800df40 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	f000 80a1 	beq.w	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddc0:	4a5f      	ldr	r2, [pc, #380]	@ (800df40 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	f200 80a6 	bhi.w	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddc8:	4a5e      	ldr	r2, [pc, #376]	@ (800df44 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	f000 8099 	beq.w	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddd0:	4a5c      	ldr	r2, [pc, #368]	@ (800df44 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	f200 809e 	bhi.w	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dddc:	f000 8091 	beq.w	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800dde0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dde4:	f200 8096 	bhi.w	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800dde8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddec:	f000 8089 	beq.w	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddf4:	f200 808e 	bhi.w	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddfc:	d03e      	beq.n	800de7c <HAL_TIM_ConfigClockSource+0x124>
 800ddfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de02:	f200 8087 	bhi.w	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800de06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de0a:	f000 8086 	beq.w	800df1a <HAL_TIM_ConfigClockSource+0x1c2>
 800de0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de12:	d87f      	bhi.n	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800de14:	2b70      	cmp	r3, #112	@ 0x70
 800de16:	d01a      	beq.n	800de4e <HAL_TIM_ConfigClockSource+0xf6>
 800de18:	2b70      	cmp	r3, #112	@ 0x70
 800de1a:	d87b      	bhi.n	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800de1c:	2b60      	cmp	r3, #96	@ 0x60
 800de1e:	d050      	beq.n	800dec2 <HAL_TIM_ConfigClockSource+0x16a>
 800de20:	2b60      	cmp	r3, #96	@ 0x60
 800de22:	d877      	bhi.n	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800de24:	2b50      	cmp	r3, #80	@ 0x50
 800de26:	d03c      	beq.n	800dea2 <HAL_TIM_ConfigClockSource+0x14a>
 800de28:	2b50      	cmp	r3, #80	@ 0x50
 800de2a:	d873      	bhi.n	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800de2c:	2b40      	cmp	r3, #64	@ 0x40
 800de2e:	d058      	beq.n	800dee2 <HAL_TIM_ConfigClockSource+0x18a>
 800de30:	2b40      	cmp	r3, #64	@ 0x40
 800de32:	d86f      	bhi.n	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800de34:	2b30      	cmp	r3, #48	@ 0x30
 800de36:	d064      	beq.n	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800de38:	2b30      	cmp	r3, #48	@ 0x30
 800de3a:	d86b      	bhi.n	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	d060      	beq.n	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800de40:	2b20      	cmp	r3, #32
 800de42:	d867      	bhi.n	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
 800de44:	2b00      	cmp	r3, #0
 800de46:	d05c      	beq.n	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800de48:	2b10      	cmp	r3, #16
 800de4a:	d05a      	beq.n	800df02 <HAL_TIM_ConfigClockSource+0x1aa>
 800de4c:	e062      	b.n	800df14 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de5e:	f000 fca1 	bl	800e7a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800de70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	68ba      	ldr	r2, [r7, #8]
 800de78:	609a      	str	r2, [r3, #8]
      break;
 800de7a:	e04f      	b.n	800df1c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de8c:	f000 fc8a 	bl	800e7a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	689a      	ldr	r2, [r3, #8]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800de9e:	609a      	str	r2, [r3, #8]
      break;
 800dea0:	e03c      	b.n	800df1c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800deae:	461a      	mov	r2, r3
 800deb0:	f000 fbfa 	bl	800e6a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2150      	movs	r1, #80	@ 0x50
 800deba:	4618      	mov	r0, r3
 800debc:	f000 fc54 	bl	800e768 <TIM_ITRx_SetConfig>
      break;
 800dec0:	e02c      	b.n	800df1c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dece:	461a      	mov	r2, r3
 800ded0:	f000 fc19 	bl	800e706 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2160      	movs	r1, #96	@ 0x60
 800deda:	4618      	mov	r0, r3
 800dedc:	f000 fc44 	bl	800e768 <TIM_ITRx_SetConfig>
      break;
 800dee0:	e01c      	b.n	800df1c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800deee:	461a      	mov	r2, r3
 800def0:	f000 fbda 	bl	800e6a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2140      	movs	r1, #64	@ 0x40
 800defa:	4618      	mov	r0, r3
 800defc:	f000 fc34 	bl	800e768 <TIM_ITRx_SetConfig>
      break;
 800df00:	e00c      	b.n	800df1c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4619      	mov	r1, r3
 800df0c:	4610      	mov	r0, r2
 800df0e:	f000 fc2b 	bl	800e768 <TIM_ITRx_SetConfig>
      break;
 800df12:	e003      	b.n	800df1c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800df14:	2301      	movs	r3, #1
 800df16:	73fb      	strb	r3, [r7, #15]
      break;
 800df18:	e000      	b.n	800df1c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800df1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2201      	movs	r2, #1
 800df20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	ffceff88 	.word	0xffceff88
 800df3c:	00100040 	.word	0x00100040
 800df40:	00100030 	.word	0x00100030
 800df44:	00100020 	.word	0x00100020

0800df48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df64:	bf00      	nop
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4a4a      	ldr	r2, [pc, #296]	@ (800e0d4 <TIM_Base_SetConfig+0x13c>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d013      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfb6:	d00f      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a47      	ldr	r2, [pc, #284]	@ (800e0d8 <TIM_Base_SetConfig+0x140>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d00b      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a46      	ldr	r2, [pc, #280]	@ (800e0dc <TIM_Base_SetConfig+0x144>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d007      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a45      	ldr	r2, [pc, #276]	@ (800e0e0 <TIM_Base_SetConfig+0x148>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d003      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a44      	ldr	r2, [pc, #272]	@ (800e0e4 <TIM_Base_SetConfig+0x14c>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d108      	bne.n	800dfea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4a39      	ldr	r2, [pc, #228]	@ (800e0d4 <TIM_Base_SetConfig+0x13c>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d027      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dff8:	d023      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4a36      	ldr	r2, [pc, #216]	@ (800e0d8 <TIM_Base_SetConfig+0x140>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d01f      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a35      	ldr	r2, [pc, #212]	@ (800e0dc <TIM_Base_SetConfig+0x144>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d01b      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a34      	ldr	r2, [pc, #208]	@ (800e0e0 <TIM_Base_SetConfig+0x148>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d017      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a33      	ldr	r2, [pc, #204]	@ (800e0e4 <TIM_Base_SetConfig+0x14c>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d013      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a32      	ldr	r2, [pc, #200]	@ (800e0e8 <TIM_Base_SetConfig+0x150>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d00f      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a31      	ldr	r2, [pc, #196]	@ (800e0ec <TIM_Base_SetConfig+0x154>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d00b      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a30      	ldr	r2, [pc, #192]	@ (800e0f0 <TIM_Base_SetConfig+0x158>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d007      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a2f      	ldr	r2, [pc, #188]	@ (800e0f4 <TIM_Base_SetConfig+0x15c>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d003      	beq.n	800e042 <TIM_Base_SetConfig+0xaa>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a2e      	ldr	r2, [pc, #184]	@ (800e0f8 <TIM_Base_SetConfig+0x160>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d108      	bne.n	800e054 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	68fa      	ldr	r2, [r7, #12]
 800e050:	4313      	orrs	r3, r2
 800e052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	695b      	ldr	r3, [r3, #20]
 800e05e:	4313      	orrs	r3, r2
 800e060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	689a      	ldr	r2, [r3, #8]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4a16      	ldr	r2, [pc, #88]	@ (800e0d4 <TIM_Base_SetConfig+0x13c>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d00f      	beq.n	800e0a0 <TIM_Base_SetConfig+0x108>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4a18      	ldr	r2, [pc, #96]	@ (800e0e4 <TIM_Base_SetConfig+0x14c>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d00b      	beq.n	800e0a0 <TIM_Base_SetConfig+0x108>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a17      	ldr	r2, [pc, #92]	@ (800e0e8 <TIM_Base_SetConfig+0x150>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d007      	beq.n	800e0a0 <TIM_Base_SetConfig+0x108>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	4a16      	ldr	r2, [pc, #88]	@ (800e0ec <TIM_Base_SetConfig+0x154>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d003      	beq.n	800e0a0 <TIM_Base_SetConfig+0x108>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	4a15      	ldr	r2, [pc, #84]	@ (800e0f0 <TIM_Base_SetConfig+0x158>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d103      	bne.n	800e0a8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	691a      	ldr	r2, [r3, #16]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	f003 0301 	and.w	r3, r3, #1
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d105      	bne.n	800e0c6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	f023 0201 	bic.w	r2, r3, #1
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	611a      	str	r2, [r3, #16]
  }
}
 800e0c6:	bf00      	nop
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	40010000 	.word	0x40010000
 800e0d8:	40000400 	.word	0x40000400
 800e0dc:	40000800 	.word	0x40000800
 800e0e0:	40000c00 	.word	0x40000c00
 800e0e4:	40010400 	.word	0x40010400
 800e0e8:	40014000 	.word	0x40014000
 800e0ec:	40014400 	.word	0x40014400
 800e0f0:	40014800 	.word	0x40014800
 800e0f4:	4000e000 	.word	0x4000e000
 800e0f8:	4000e400 	.word	0x4000e400

0800e0fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b087      	sub	sp, #28
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a1b      	ldr	r3, [r3, #32]
 800e10a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6a1b      	ldr	r3, [r3, #32]
 800e110:	f023 0201 	bic.w	r2, r3, #1
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	699b      	ldr	r3, [r3, #24]
 800e122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e124:	68fa      	ldr	r2, [r7, #12]
 800e126:	4b37      	ldr	r3, [pc, #220]	@ (800e204 <TIM_OC1_SetConfig+0x108>)
 800e128:	4013      	ands	r3, r2
 800e12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f023 0303 	bic.w	r3, r3, #3
 800e132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f023 0302 	bic.w	r3, r3, #2
 800e144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4a2d      	ldr	r2, [pc, #180]	@ (800e208 <TIM_OC1_SetConfig+0x10c>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d00f      	beq.n	800e178 <TIM_OC1_SetConfig+0x7c>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4a2c      	ldr	r2, [pc, #176]	@ (800e20c <TIM_OC1_SetConfig+0x110>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d00b      	beq.n	800e178 <TIM_OC1_SetConfig+0x7c>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4a2b      	ldr	r2, [pc, #172]	@ (800e210 <TIM_OC1_SetConfig+0x114>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d007      	beq.n	800e178 <TIM_OC1_SetConfig+0x7c>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4a2a      	ldr	r2, [pc, #168]	@ (800e214 <TIM_OC1_SetConfig+0x118>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d003      	beq.n	800e178 <TIM_OC1_SetConfig+0x7c>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a29      	ldr	r2, [pc, #164]	@ (800e218 <TIM_OC1_SetConfig+0x11c>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d10c      	bne.n	800e192 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	f023 0308 	bic.w	r3, r3, #8
 800e17e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	697a      	ldr	r2, [r7, #20]
 800e186:	4313      	orrs	r3, r2
 800e188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f023 0304 	bic.w	r3, r3, #4
 800e190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4a1c      	ldr	r2, [pc, #112]	@ (800e208 <TIM_OC1_SetConfig+0x10c>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d00f      	beq.n	800e1ba <TIM_OC1_SetConfig+0xbe>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4a1b      	ldr	r2, [pc, #108]	@ (800e20c <TIM_OC1_SetConfig+0x110>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d00b      	beq.n	800e1ba <TIM_OC1_SetConfig+0xbe>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	4a1a      	ldr	r2, [pc, #104]	@ (800e210 <TIM_OC1_SetConfig+0x114>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d007      	beq.n	800e1ba <TIM_OC1_SetConfig+0xbe>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4a19      	ldr	r2, [pc, #100]	@ (800e214 <TIM_OC1_SetConfig+0x118>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d003      	beq.n	800e1ba <TIM_OC1_SetConfig+0xbe>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4a18      	ldr	r2, [pc, #96]	@ (800e218 <TIM_OC1_SetConfig+0x11c>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d111      	bne.n	800e1de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	695b      	ldr	r3, [r3, #20]
 800e1ce:	693a      	ldr	r2, [r7, #16]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	693a      	ldr	r2, [r7, #16]
 800e1e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	685a      	ldr	r2, [r3, #4]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	697a      	ldr	r2, [r7, #20]
 800e1f6:	621a      	str	r2, [r3, #32]
}
 800e1f8:	bf00      	nop
 800e1fa:	371c      	adds	r7, #28
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	fffeff8f 	.word	0xfffeff8f
 800e208:	40010000 	.word	0x40010000
 800e20c:	40010400 	.word	0x40010400
 800e210:	40014000 	.word	0x40014000
 800e214:	40014400 	.word	0x40014400
 800e218:	40014800 	.word	0x40014800

0800e21c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b087      	sub	sp, #28
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6a1b      	ldr	r3, [r3, #32]
 800e22a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6a1b      	ldr	r3, [r3, #32]
 800e230:	f023 0210 	bic.w	r2, r3, #16
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	699b      	ldr	r3, [r3, #24]
 800e242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	4b34      	ldr	r3, [pc, #208]	@ (800e318 <TIM_OC2_SetConfig+0xfc>)
 800e248:	4013      	ands	r3, r2
 800e24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	021b      	lsls	r3, r3, #8
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f023 0320 	bic.w	r3, r3, #32
 800e266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	011b      	lsls	r3, r3, #4
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	4313      	orrs	r3, r2
 800e272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a29      	ldr	r2, [pc, #164]	@ (800e31c <TIM_OC2_SetConfig+0x100>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d003      	beq.n	800e284 <TIM_OC2_SetConfig+0x68>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a28      	ldr	r2, [pc, #160]	@ (800e320 <TIM_OC2_SetConfig+0x104>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d10d      	bne.n	800e2a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e28a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	011b      	lsls	r3, r3, #4
 800e292:	697a      	ldr	r2, [r7, #20]
 800e294:	4313      	orrs	r3, r2
 800e296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e29e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4a1e      	ldr	r2, [pc, #120]	@ (800e31c <TIM_OC2_SetConfig+0x100>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d00f      	beq.n	800e2c8 <TIM_OC2_SetConfig+0xac>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a1d      	ldr	r2, [pc, #116]	@ (800e320 <TIM_OC2_SetConfig+0x104>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00b      	beq.n	800e2c8 <TIM_OC2_SetConfig+0xac>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a1c      	ldr	r2, [pc, #112]	@ (800e324 <TIM_OC2_SetConfig+0x108>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d007      	beq.n	800e2c8 <TIM_OC2_SetConfig+0xac>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a1b      	ldr	r2, [pc, #108]	@ (800e328 <TIM_OC2_SetConfig+0x10c>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d003      	beq.n	800e2c8 <TIM_OC2_SetConfig+0xac>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a1a      	ldr	r2, [pc, #104]	@ (800e32c <TIM_OC2_SetConfig+0x110>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d113      	bne.n	800e2f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	695b      	ldr	r3, [r3, #20]
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	693a      	ldr	r2, [r7, #16]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	693a      	ldr	r2, [r7, #16]
 800e2f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	697a      	ldr	r2, [r7, #20]
 800e308:	621a      	str	r2, [r3, #32]
}
 800e30a:	bf00      	nop
 800e30c:	371c      	adds	r7, #28
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	feff8fff 	.word	0xfeff8fff
 800e31c:	40010000 	.word	0x40010000
 800e320:	40010400 	.word	0x40010400
 800e324:	40014000 	.word	0x40014000
 800e328:	40014400 	.word	0x40014400
 800e32c:	40014800 	.word	0x40014800

0800e330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e330:	b480      	push	{r7}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6a1b      	ldr	r3, [r3, #32]
 800e33e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a1b      	ldr	r3, [r3, #32]
 800e344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	69db      	ldr	r3, [r3, #28]
 800e356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	4b33      	ldr	r3, [pc, #204]	@ (800e428 <TIM_OC3_SetConfig+0xf8>)
 800e35c:	4013      	ands	r3, r2
 800e35e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f023 0303 	bic.w	r3, r3, #3
 800e366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	4313      	orrs	r3, r2
 800e370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	021b      	lsls	r3, r3, #8
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	4313      	orrs	r3, r2
 800e384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a28      	ldr	r2, [pc, #160]	@ (800e42c <TIM_OC3_SetConfig+0xfc>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d003      	beq.n	800e396 <TIM_OC3_SetConfig+0x66>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4a27      	ldr	r2, [pc, #156]	@ (800e430 <TIM_OC3_SetConfig+0x100>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d10d      	bne.n	800e3b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e39c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	021b      	lsls	r3, r3, #8
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e3b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e42c <TIM_OC3_SetConfig+0xfc>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d00f      	beq.n	800e3da <TIM_OC3_SetConfig+0xaa>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4a1c      	ldr	r2, [pc, #112]	@ (800e430 <TIM_OC3_SetConfig+0x100>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d00b      	beq.n	800e3da <TIM_OC3_SetConfig+0xaa>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	4a1b      	ldr	r2, [pc, #108]	@ (800e434 <TIM_OC3_SetConfig+0x104>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d007      	beq.n	800e3da <TIM_OC3_SetConfig+0xaa>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4a1a      	ldr	r2, [pc, #104]	@ (800e438 <TIM_OC3_SetConfig+0x108>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d003      	beq.n	800e3da <TIM_OC3_SetConfig+0xaa>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4a19      	ldr	r2, [pc, #100]	@ (800e43c <TIM_OC3_SetConfig+0x10c>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d113      	bne.n	800e402 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	011b      	lsls	r3, r3, #4
 800e3f0:	693a      	ldr	r2, [r7, #16]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	699b      	ldr	r3, [r3, #24]
 800e3fa:	011b      	lsls	r3, r3, #4
 800e3fc:	693a      	ldr	r2, [r7, #16]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	693a      	ldr	r2, [r7, #16]
 800e406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	685a      	ldr	r2, [r3, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	697a      	ldr	r2, [r7, #20]
 800e41a:	621a      	str	r2, [r3, #32]
}
 800e41c:	bf00      	nop
 800e41e:	371c      	adds	r7, #28
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr
 800e428:	fffeff8f 	.word	0xfffeff8f
 800e42c:	40010000 	.word	0x40010000
 800e430:	40010400 	.word	0x40010400
 800e434:	40014000 	.word	0x40014000
 800e438:	40014400 	.word	0x40014400
 800e43c:	40014800 	.word	0x40014800

0800e440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e440:	b480      	push	{r7}
 800e442:	b087      	sub	sp, #28
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a1b      	ldr	r3, [r3, #32]
 800e44e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6a1b      	ldr	r3, [r3, #32]
 800e454:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	4b24      	ldr	r3, [pc, #144]	@ (800e4fc <TIM_OC4_SetConfig+0xbc>)
 800e46c:	4013      	ands	r3, r2
 800e46e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	021b      	lsls	r3, r3, #8
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	4313      	orrs	r3, r2
 800e482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e48a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	031b      	lsls	r3, r3, #12
 800e492:	693a      	ldr	r2, [r7, #16]
 800e494:	4313      	orrs	r3, r2
 800e496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a19      	ldr	r2, [pc, #100]	@ (800e500 <TIM_OC4_SetConfig+0xc0>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d00f      	beq.n	800e4c0 <TIM_OC4_SetConfig+0x80>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a18      	ldr	r2, [pc, #96]	@ (800e504 <TIM_OC4_SetConfig+0xc4>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d00b      	beq.n	800e4c0 <TIM_OC4_SetConfig+0x80>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a17      	ldr	r2, [pc, #92]	@ (800e508 <TIM_OC4_SetConfig+0xc8>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d007      	beq.n	800e4c0 <TIM_OC4_SetConfig+0x80>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a16      	ldr	r2, [pc, #88]	@ (800e50c <TIM_OC4_SetConfig+0xcc>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d003      	beq.n	800e4c0 <TIM_OC4_SetConfig+0x80>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a15      	ldr	r2, [pc, #84]	@ (800e510 <TIM_OC4_SetConfig+0xd0>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d109      	bne.n	800e4d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e4c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	695b      	ldr	r3, [r3, #20]
 800e4cc:	019b      	lsls	r3, r3, #6
 800e4ce:	697a      	ldr	r2, [r7, #20]
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	697a      	ldr	r2, [r7, #20]
 800e4d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	693a      	ldr	r2, [r7, #16]
 800e4ec:	621a      	str	r2, [r3, #32]
}
 800e4ee:	bf00      	nop
 800e4f0:	371c      	adds	r7, #28
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop
 800e4fc:	feff8fff 	.word	0xfeff8fff
 800e500:	40010000 	.word	0x40010000
 800e504:	40010400 	.word	0x40010400
 800e508:	40014000 	.word	0x40014000
 800e50c:	40014400 	.word	0x40014400
 800e510:	40014800 	.word	0x40014800

0800e514 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e514:	b480      	push	{r7}
 800e516:	b087      	sub	sp, #28
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6a1b      	ldr	r3, [r3, #32]
 800e522:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a1b      	ldr	r3, [r3, #32]
 800e528:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	4b21      	ldr	r3, [pc, #132]	@ (800e5c4 <TIM_OC5_SetConfig+0xb0>)
 800e540:	4013      	ands	r3, r2
 800e542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e554:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	041b      	lsls	r3, r3, #16
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	4313      	orrs	r3, r2
 800e560:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a18      	ldr	r2, [pc, #96]	@ (800e5c8 <TIM_OC5_SetConfig+0xb4>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d00f      	beq.n	800e58a <TIM_OC5_SetConfig+0x76>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a17      	ldr	r2, [pc, #92]	@ (800e5cc <TIM_OC5_SetConfig+0xb8>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d00b      	beq.n	800e58a <TIM_OC5_SetConfig+0x76>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4a16      	ldr	r2, [pc, #88]	@ (800e5d0 <TIM_OC5_SetConfig+0xbc>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d007      	beq.n	800e58a <TIM_OC5_SetConfig+0x76>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4a15      	ldr	r2, [pc, #84]	@ (800e5d4 <TIM_OC5_SetConfig+0xc0>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d003      	beq.n	800e58a <TIM_OC5_SetConfig+0x76>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4a14      	ldr	r2, [pc, #80]	@ (800e5d8 <TIM_OC5_SetConfig+0xc4>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d109      	bne.n	800e59e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e590:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	021b      	lsls	r3, r3, #8
 800e598:	697a      	ldr	r2, [r7, #20]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	685a      	ldr	r2, [r3, #4]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	693a      	ldr	r2, [r7, #16]
 800e5b6:	621a      	str	r2, [r3, #32]
}
 800e5b8:	bf00      	nop
 800e5ba:	371c      	adds	r7, #28
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr
 800e5c4:	fffeff8f 	.word	0xfffeff8f
 800e5c8:	40010000 	.word	0x40010000
 800e5cc:	40010400 	.word	0x40010400
 800e5d0:	40014000 	.word	0x40014000
 800e5d4:	40014400 	.word	0x40014400
 800e5d8:	40014800 	.word	0x40014800

0800e5dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b087      	sub	sp, #28
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6a1b      	ldr	r3, [r3, #32]
 800e5f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	4b22      	ldr	r3, [pc, #136]	@ (800e690 <TIM_OC6_SetConfig+0xb4>)
 800e608:	4013      	ands	r3, r2
 800e60a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	021b      	lsls	r3, r3, #8
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	4313      	orrs	r3, r2
 800e616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e61e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	051b      	lsls	r3, r3, #20
 800e626:	693a      	ldr	r2, [r7, #16]
 800e628:	4313      	orrs	r3, r2
 800e62a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a19      	ldr	r2, [pc, #100]	@ (800e694 <TIM_OC6_SetConfig+0xb8>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d00f      	beq.n	800e654 <TIM_OC6_SetConfig+0x78>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a18      	ldr	r2, [pc, #96]	@ (800e698 <TIM_OC6_SetConfig+0xbc>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d00b      	beq.n	800e654 <TIM_OC6_SetConfig+0x78>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a17      	ldr	r2, [pc, #92]	@ (800e69c <TIM_OC6_SetConfig+0xc0>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d007      	beq.n	800e654 <TIM_OC6_SetConfig+0x78>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a16      	ldr	r2, [pc, #88]	@ (800e6a0 <TIM_OC6_SetConfig+0xc4>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d003      	beq.n	800e654 <TIM_OC6_SetConfig+0x78>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a15      	ldr	r2, [pc, #84]	@ (800e6a4 <TIM_OC6_SetConfig+0xc8>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d109      	bne.n	800e668 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e65a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	029b      	lsls	r3, r3, #10
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	4313      	orrs	r3, r2
 800e666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	697a      	ldr	r2, [r7, #20]
 800e66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	685a      	ldr	r2, [r3, #4]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	693a      	ldr	r2, [r7, #16]
 800e680:	621a      	str	r2, [r3, #32]
}
 800e682:	bf00      	nop
 800e684:	371c      	adds	r7, #28
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	feff8fff 	.word	0xfeff8fff
 800e694:	40010000 	.word	0x40010000
 800e698:	40010400 	.word	0x40010400
 800e69c:	40014000 	.word	0x40014000
 800e6a0:	40014400 	.word	0x40014400
 800e6a4:	40014800 	.word	0x40014800

0800e6a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6a1b      	ldr	r3, [r3, #32]
 800e6b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6a1b      	ldr	r3, [r3, #32]
 800e6be:	f023 0201 	bic.w	r2, r3, #1
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e6d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	011b      	lsls	r3, r3, #4
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f023 030a 	bic.w	r3, r3, #10
 800e6e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	693a      	ldr	r2, [r7, #16]
 800e6f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	697a      	ldr	r2, [r7, #20]
 800e6f8:	621a      	str	r2, [r3, #32]
}
 800e6fa:	bf00      	nop
 800e6fc:	371c      	adds	r7, #28
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e706:	b480      	push	{r7}
 800e708:	b087      	sub	sp, #28
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	60f8      	str	r0, [r7, #12]
 800e70e:	60b9      	str	r1, [r7, #8]
 800e710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6a1b      	ldr	r3, [r3, #32]
 800e716:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6a1b      	ldr	r3, [r3, #32]
 800e71c:	f023 0210 	bic.w	r2, r3, #16
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	699b      	ldr	r3, [r3, #24]
 800e728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	031b      	lsls	r3, r3, #12
 800e736:	693a      	ldr	r2, [r7, #16]
 800e738:	4313      	orrs	r3, r2
 800e73a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e742:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	011b      	lsls	r3, r3, #4
 800e748:	697a      	ldr	r2, [r7, #20]
 800e74a:	4313      	orrs	r3, r2
 800e74c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	621a      	str	r2, [r3, #32]
}
 800e75a:	bf00      	nop
 800e75c:	371c      	adds	r7, #28
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
	...

0800e768 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	4b09      	ldr	r3, [pc, #36]	@ (800e7a0 <TIM_ITRx_SetConfig+0x38>)
 800e77c:	4013      	ands	r3, r2
 800e77e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e780:	683a      	ldr	r2, [r7, #0]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	4313      	orrs	r3, r2
 800e786:	f043 0307 	orr.w	r3, r3, #7
 800e78a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	609a      	str	r2, [r3, #8]
}
 800e792:	bf00      	nop
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	ffcfff8f 	.word	0xffcfff8f

0800e7a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b087      	sub	sp, #28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e7be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	021a      	lsls	r2, r3, #8
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	431a      	orrs	r2, r3
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	697a      	ldr	r2, [r7, #20]
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	609a      	str	r2, [r3, #8]
}
 800e7d8:	bf00      	nop
 800e7da:	371c      	adds	r7, #28
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d101      	bne.n	800e7fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7f8:	2302      	movs	r3, #2
 800e7fa:	e077      	b.n	800e8ec <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2201      	movs	r2, #1
 800e800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2202      	movs	r2, #2
 800e808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a35      	ldr	r2, [pc, #212]	@ (800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d004      	beq.n	800e830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a34      	ldr	r2, [pc, #208]	@ (800e8fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d108      	bne.n	800e842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	4313      	orrs	r3, r2
 800e840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	4313      	orrs	r3, r2
 800e852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a25      	ldr	r2, [pc, #148]	@ (800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d02c      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e86e:	d027      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4a22      	ldr	r2, [pc, #136]	@ (800e900 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d022      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a21      	ldr	r2, [pc, #132]	@ (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d01d      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a1f      	ldr	r2, [pc, #124]	@ (800e908 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d018      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a1a      	ldr	r2, [pc, #104]	@ (800e8fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d013      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a1b      	ldr	r2, [pc, #108]	@ (800e90c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d00e      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4a1a      	ldr	r2, [pc, #104]	@ (800e910 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d009      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a18      	ldr	r2, [pc, #96]	@ (800e914 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d004      	beq.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4a17      	ldr	r2, [pc, #92]	@ (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d10c      	bne.n	800e8da <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	689b      	ldr	r3, [r3, #8]
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68ba      	ldr	r2, [r7, #8]
 800e8d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3714      	adds	r7, #20
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr
 800e8f8:	40010000 	.word	0x40010000
 800e8fc:	40010400 	.word	0x40010400
 800e900:	40000400 	.word	0x40000400
 800e904:	40000800 	.word	0x40000800
 800e908:	40000c00 	.word	0x40000c00
 800e90c:	40001800 	.word	0x40001800
 800e910:	40014000 	.word	0x40014000
 800e914:	4000e000 	.word	0x4000e000
 800e918:	4000e400 	.word	0x4000e400

0800e91c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e926:	2300      	movs	r3, #0
 800e928:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e930:	2b01      	cmp	r3, #1
 800e932:	d101      	bne.n	800e938 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e934:	2302      	movs	r3, #2
 800e936:	e073      	b.n	800ea20 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	4313      	orrs	r3, r2
 800e95a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	4313      	orrs	r3, r2
 800e968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4313      	orrs	r3, r2
 800e976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	4313      	orrs	r3, r2
 800e984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	4313      	orrs	r3, r2
 800e992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	699b      	ldr	r3, [r3, #24]
 800e9ac:	041b      	lsls	r3, r3, #16
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	69db      	ldr	r3, [r3, #28]
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a19      	ldr	r2, [pc, #100]	@ (800ea2c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d004      	beq.n	800e9d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a18      	ldr	r2, [pc, #96]	@ (800ea30 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d11c      	bne.n	800ea0e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9de:	051b      	lsls	r3, r3, #20
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ea1e:	2300      	movs	r3, #0
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	40010000 	.word	0x40010000
 800ea30:	40010400 	.word	0x40010400

0800ea34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea3c:	bf00      	nop
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea50:	bf00      	nop
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d101      	bne.n	800ea82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e042      	b.n	800eb08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d106      	bne.n	800ea9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7f3 fcfd 	bl	8002494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2224      	movs	r2, #36	@ 0x24
 800ea9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f022 0201 	bic.w	r2, r2, #1
 800eab0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 ff22 	bl	800f904 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f8b3 	bl	800ec2c <UART_SetConfig>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d101      	bne.n	800ead0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800eacc:	2301      	movs	r3, #1
 800eace:	e01b      	b.n	800eb08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685a      	ldr	r2, [r3, #4]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800eade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	689a      	ldr	r2, [r3, #8]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800eaee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f042 0201 	orr.w	r2, r2, #1
 800eafe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 ffa1 	bl	800fa48 <UART_CheckIdleState>
 800eb06:	4603      	mov	r3, r0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b08a      	sub	sp, #40	@ 0x28
 800eb14:	af02      	add	r7, sp, #8
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	603b      	str	r3, [r7, #0]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb26:	2b20      	cmp	r3, #32
 800eb28:	d17b      	bne.n	800ec22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d002      	beq.n	800eb36 <HAL_UART_Transmit+0x26>
 800eb30:	88fb      	ldrh	r3, [r7, #6]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eb36:	2301      	movs	r3, #1
 800eb38:	e074      	b.n	800ec24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2221      	movs	r2, #33	@ 0x21
 800eb46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb4a:	f7f3 ff29 	bl	80029a0 <HAL_GetTick>
 800eb4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	88fa      	ldrh	r2, [r7, #6]
 800eb54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	88fa      	ldrh	r2, [r7, #6]
 800eb5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb68:	d108      	bne.n	800eb7c <HAL_UART_Transmit+0x6c>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d104      	bne.n	800eb7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eb72:	2300      	movs	r3, #0
 800eb74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	61bb      	str	r3, [r7, #24]
 800eb7a:	e003      	b.n	800eb84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb80:	2300      	movs	r3, #0
 800eb82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eb84:	e030      	b.n	800ebe8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	2180      	movs	r1, #128	@ 0x80
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f001 f803 	bl	800fb9c <UART_WaitOnFlagUntilTimeout>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d005      	beq.n	800eba8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2220      	movs	r2, #32
 800eba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800eba4:	2303      	movs	r3, #3
 800eba6:	e03d      	b.n	800ec24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10b      	bne.n	800ebc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	881b      	ldrh	r3, [r3, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	3302      	adds	r3, #2
 800ebc2:	61bb      	str	r3, [r7, #24]
 800ebc4:	e007      	b.n	800ebd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	781a      	ldrb	r2, [r3, #0]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d1c8      	bne.n	800eb86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	2140      	movs	r1, #64	@ 0x40
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f000 ffcc 	bl	800fb9c <UART_WaitOnFlagUntilTimeout>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d005      	beq.n	800ec16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2220      	movs	r2, #32
 800ec0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ec12:	2303      	movs	r3, #3
 800ec14:	e006      	b.n	800ec24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2220      	movs	r2, #32
 800ec1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	e000      	b.n	800ec24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ec22:	2302      	movs	r3, #2
  }
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3720      	adds	r7, #32
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec30:	b092      	sub	sp, #72	@ 0x48
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec36:	2300      	movs	r3, #0
 800ec38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	689a      	ldr	r2, [r3, #8]
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	691b      	ldr	r3, [r3, #16]
 800ec44:	431a      	orrs	r2, r3
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	695b      	ldr	r3, [r3, #20]
 800ec4a:	431a      	orrs	r2, r3
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	69db      	ldr	r3, [r3, #28]
 800ec50:	4313      	orrs	r3, r2
 800ec52:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	4bbe      	ldr	r3, [pc, #760]	@ (800ef54 <UART_SetConfig+0x328>)
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	697a      	ldr	r2, [r7, #20]
 800ec60:	6812      	ldr	r2, [r2, #0]
 800ec62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec64:	430b      	orrs	r3, r1
 800ec66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	68da      	ldr	r2, [r3, #12]
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	430a      	orrs	r2, r1
 800ec7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4ab3      	ldr	r2, [pc, #716]	@ (800ef58 <UART_SetConfig+0x32c>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d004      	beq.n	800ec98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	6a1b      	ldr	r3, [r3, #32]
 800ec92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec94:	4313      	orrs	r3, r2
 800ec96:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	689a      	ldr	r2, [r3, #8]
 800ec9e:	4baf      	ldr	r3, [pc, #700]	@ (800ef5c <UART_SetConfig+0x330>)
 800eca0:	4013      	ands	r3, r2
 800eca2:	697a      	ldr	r2, [r7, #20]
 800eca4:	6812      	ldr	r2, [r2, #0]
 800eca6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eca8:	430b      	orrs	r3, r1
 800ecaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb2:	f023 010f 	bic.w	r1, r3, #15
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	430a      	orrs	r2, r1
 800ecc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4aa6      	ldr	r2, [pc, #664]	@ (800ef60 <UART_SetConfig+0x334>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d177      	bne.n	800edbc <UART_SetConfig+0x190>
 800eccc:	4ba5      	ldr	r3, [pc, #660]	@ (800ef64 <UART_SetConfig+0x338>)
 800ecce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ecd4:	2b28      	cmp	r3, #40	@ 0x28
 800ecd6:	d86d      	bhi.n	800edb4 <UART_SetConfig+0x188>
 800ecd8:	a201      	add	r2, pc, #4	@ (adr r2, 800ece0 <UART_SetConfig+0xb4>)
 800ecda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecde:	bf00      	nop
 800ece0:	0800ed85 	.word	0x0800ed85
 800ece4:	0800edb5 	.word	0x0800edb5
 800ece8:	0800edb5 	.word	0x0800edb5
 800ecec:	0800edb5 	.word	0x0800edb5
 800ecf0:	0800edb5 	.word	0x0800edb5
 800ecf4:	0800edb5 	.word	0x0800edb5
 800ecf8:	0800edb5 	.word	0x0800edb5
 800ecfc:	0800edb5 	.word	0x0800edb5
 800ed00:	0800ed8d 	.word	0x0800ed8d
 800ed04:	0800edb5 	.word	0x0800edb5
 800ed08:	0800edb5 	.word	0x0800edb5
 800ed0c:	0800edb5 	.word	0x0800edb5
 800ed10:	0800edb5 	.word	0x0800edb5
 800ed14:	0800edb5 	.word	0x0800edb5
 800ed18:	0800edb5 	.word	0x0800edb5
 800ed1c:	0800edb5 	.word	0x0800edb5
 800ed20:	0800ed95 	.word	0x0800ed95
 800ed24:	0800edb5 	.word	0x0800edb5
 800ed28:	0800edb5 	.word	0x0800edb5
 800ed2c:	0800edb5 	.word	0x0800edb5
 800ed30:	0800edb5 	.word	0x0800edb5
 800ed34:	0800edb5 	.word	0x0800edb5
 800ed38:	0800edb5 	.word	0x0800edb5
 800ed3c:	0800edb5 	.word	0x0800edb5
 800ed40:	0800ed9d 	.word	0x0800ed9d
 800ed44:	0800edb5 	.word	0x0800edb5
 800ed48:	0800edb5 	.word	0x0800edb5
 800ed4c:	0800edb5 	.word	0x0800edb5
 800ed50:	0800edb5 	.word	0x0800edb5
 800ed54:	0800edb5 	.word	0x0800edb5
 800ed58:	0800edb5 	.word	0x0800edb5
 800ed5c:	0800edb5 	.word	0x0800edb5
 800ed60:	0800eda5 	.word	0x0800eda5
 800ed64:	0800edb5 	.word	0x0800edb5
 800ed68:	0800edb5 	.word	0x0800edb5
 800ed6c:	0800edb5 	.word	0x0800edb5
 800ed70:	0800edb5 	.word	0x0800edb5
 800ed74:	0800edb5 	.word	0x0800edb5
 800ed78:	0800edb5 	.word	0x0800edb5
 800ed7c:	0800edb5 	.word	0x0800edb5
 800ed80:	0800edad 	.word	0x0800edad
 800ed84:	2301      	movs	r3, #1
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed8a:	e326      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ed8c:	2304      	movs	r3, #4
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed92:	e322      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ed94:	2308      	movs	r3, #8
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9a:	e31e      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ed9c:	2310      	movs	r3, #16
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda2:	e31a      	b.n	800f3da <UART_SetConfig+0x7ae>
 800eda4:	2320      	movs	r3, #32
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edaa:	e316      	b.n	800f3da <UART_SetConfig+0x7ae>
 800edac:	2340      	movs	r3, #64	@ 0x40
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb2:	e312      	b.n	800f3da <UART_SetConfig+0x7ae>
 800edb4:	2380      	movs	r3, #128	@ 0x80
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edba:	e30e      	b.n	800f3da <UART_SetConfig+0x7ae>
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a69      	ldr	r2, [pc, #420]	@ (800ef68 <UART_SetConfig+0x33c>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d130      	bne.n	800ee28 <UART_SetConfig+0x1fc>
 800edc6:	4b67      	ldr	r3, [pc, #412]	@ (800ef64 <UART_SetConfig+0x338>)
 800edc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edca:	f003 0307 	and.w	r3, r3, #7
 800edce:	2b05      	cmp	r3, #5
 800edd0:	d826      	bhi.n	800ee20 <UART_SetConfig+0x1f4>
 800edd2:	a201      	add	r2, pc, #4	@ (adr r2, 800edd8 <UART_SetConfig+0x1ac>)
 800edd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd8:	0800edf1 	.word	0x0800edf1
 800eddc:	0800edf9 	.word	0x0800edf9
 800ede0:	0800ee01 	.word	0x0800ee01
 800ede4:	0800ee09 	.word	0x0800ee09
 800ede8:	0800ee11 	.word	0x0800ee11
 800edec:	0800ee19 	.word	0x0800ee19
 800edf0:	2300      	movs	r3, #0
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edf6:	e2f0      	b.n	800f3da <UART_SetConfig+0x7ae>
 800edf8:	2304      	movs	r3, #4
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfe:	e2ec      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee00:	2308      	movs	r3, #8
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee06:	e2e8      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee08:	2310      	movs	r3, #16
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0e:	e2e4      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee10:	2320      	movs	r3, #32
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee16:	e2e0      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee18:	2340      	movs	r3, #64	@ 0x40
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1e:	e2dc      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee20:	2380      	movs	r3, #128	@ 0x80
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee26:	e2d8      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a4f      	ldr	r2, [pc, #316]	@ (800ef6c <UART_SetConfig+0x340>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d130      	bne.n	800ee94 <UART_SetConfig+0x268>
 800ee32:	4b4c      	ldr	r3, [pc, #304]	@ (800ef64 <UART_SetConfig+0x338>)
 800ee34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee36:	f003 0307 	and.w	r3, r3, #7
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	d826      	bhi.n	800ee8c <UART_SetConfig+0x260>
 800ee3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee44 <UART_SetConfig+0x218>)
 800ee40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee44:	0800ee5d 	.word	0x0800ee5d
 800ee48:	0800ee65 	.word	0x0800ee65
 800ee4c:	0800ee6d 	.word	0x0800ee6d
 800ee50:	0800ee75 	.word	0x0800ee75
 800ee54:	0800ee7d 	.word	0x0800ee7d
 800ee58:	0800ee85 	.word	0x0800ee85
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee62:	e2ba      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee64:	2304      	movs	r3, #4
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e2b6      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee6c:	2308      	movs	r3, #8
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee72:	e2b2      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee74:	2310      	movs	r3, #16
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7a:	e2ae      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee7c:	2320      	movs	r3, #32
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee82:	e2aa      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee84:	2340      	movs	r3, #64	@ 0x40
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8a:	e2a6      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee8c:	2380      	movs	r3, #128	@ 0x80
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee92:	e2a2      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a35      	ldr	r2, [pc, #212]	@ (800ef70 <UART_SetConfig+0x344>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d130      	bne.n	800ef00 <UART_SetConfig+0x2d4>
 800ee9e:	4b31      	ldr	r3, [pc, #196]	@ (800ef64 <UART_SetConfig+0x338>)
 800eea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eea2:	f003 0307 	and.w	r3, r3, #7
 800eea6:	2b05      	cmp	r3, #5
 800eea8:	d826      	bhi.n	800eef8 <UART_SetConfig+0x2cc>
 800eeaa:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb0 <UART_SetConfig+0x284>)
 800eeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb0:	0800eec9 	.word	0x0800eec9
 800eeb4:	0800eed1 	.word	0x0800eed1
 800eeb8:	0800eed9 	.word	0x0800eed9
 800eebc:	0800eee1 	.word	0x0800eee1
 800eec0:	0800eee9 	.word	0x0800eee9
 800eec4:	0800eef1 	.word	0x0800eef1
 800eec8:	2300      	movs	r3, #0
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eece:	e284      	b.n	800f3da <UART_SetConfig+0x7ae>
 800eed0:	2304      	movs	r3, #4
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed6:	e280      	b.n	800f3da <UART_SetConfig+0x7ae>
 800eed8:	2308      	movs	r3, #8
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eede:	e27c      	b.n	800f3da <UART_SetConfig+0x7ae>
 800eee0:	2310      	movs	r3, #16
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eee6:	e278      	b.n	800f3da <UART_SetConfig+0x7ae>
 800eee8:	2320      	movs	r3, #32
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeee:	e274      	b.n	800f3da <UART_SetConfig+0x7ae>
 800eef0:	2340      	movs	r3, #64	@ 0x40
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eef6:	e270      	b.n	800f3da <UART_SetConfig+0x7ae>
 800eef8:	2380      	movs	r3, #128	@ 0x80
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefe:	e26c      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a1b      	ldr	r2, [pc, #108]	@ (800ef74 <UART_SetConfig+0x348>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d142      	bne.n	800ef90 <UART_SetConfig+0x364>
 800ef0a:	4b16      	ldr	r3, [pc, #88]	@ (800ef64 <UART_SetConfig+0x338>)
 800ef0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef0e:	f003 0307 	and.w	r3, r3, #7
 800ef12:	2b05      	cmp	r3, #5
 800ef14:	d838      	bhi.n	800ef88 <UART_SetConfig+0x35c>
 800ef16:	a201      	add	r2, pc, #4	@ (adr r2, 800ef1c <UART_SetConfig+0x2f0>)
 800ef18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1c:	0800ef35 	.word	0x0800ef35
 800ef20:	0800ef3d 	.word	0x0800ef3d
 800ef24:	0800ef45 	.word	0x0800ef45
 800ef28:	0800ef4d 	.word	0x0800ef4d
 800ef2c:	0800ef79 	.word	0x0800ef79
 800ef30:	0800ef81 	.word	0x0800ef81
 800ef34:	2300      	movs	r3, #0
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3a:	e24e      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ef3c:	2304      	movs	r3, #4
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef42:	e24a      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ef44:	2308      	movs	r3, #8
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4a:	e246      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ef4c:	2310      	movs	r3, #16
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef52:	e242      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ef54:	cfff69f3 	.word	0xcfff69f3
 800ef58:	58000c00 	.word	0x58000c00
 800ef5c:	11fff4ff 	.word	0x11fff4ff
 800ef60:	40011000 	.word	0x40011000
 800ef64:	58024400 	.word	0x58024400
 800ef68:	40004400 	.word	0x40004400
 800ef6c:	40004800 	.word	0x40004800
 800ef70:	40004c00 	.word	0x40004c00
 800ef74:	40005000 	.word	0x40005000
 800ef78:	2320      	movs	r3, #32
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e22c      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ef80:	2340      	movs	r3, #64	@ 0x40
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e228      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ef88:	2380      	movs	r3, #128	@ 0x80
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8e:	e224      	b.n	800f3da <UART_SetConfig+0x7ae>
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4ab1      	ldr	r2, [pc, #708]	@ (800f25c <UART_SetConfig+0x630>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d176      	bne.n	800f088 <UART_SetConfig+0x45c>
 800ef9a:	4bb1      	ldr	r3, [pc, #708]	@ (800f260 <UART_SetConfig+0x634>)
 800ef9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800efa2:	2b28      	cmp	r3, #40	@ 0x28
 800efa4:	d86c      	bhi.n	800f080 <UART_SetConfig+0x454>
 800efa6:	a201      	add	r2, pc, #4	@ (adr r2, 800efac <UART_SetConfig+0x380>)
 800efa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efac:	0800f051 	.word	0x0800f051
 800efb0:	0800f081 	.word	0x0800f081
 800efb4:	0800f081 	.word	0x0800f081
 800efb8:	0800f081 	.word	0x0800f081
 800efbc:	0800f081 	.word	0x0800f081
 800efc0:	0800f081 	.word	0x0800f081
 800efc4:	0800f081 	.word	0x0800f081
 800efc8:	0800f081 	.word	0x0800f081
 800efcc:	0800f059 	.word	0x0800f059
 800efd0:	0800f081 	.word	0x0800f081
 800efd4:	0800f081 	.word	0x0800f081
 800efd8:	0800f081 	.word	0x0800f081
 800efdc:	0800f081 	.word	0x0800f081
 800efe0:	0800f081 	.word	0x0800f081
 800efe4:	0800f081 	.word	0x0800f081
 800efe8:	0800f081 	.word	0x0800f081
 800efec:	0800f061 	.word	0x0800f061
 800eff0:	0800f081 	.word	0x0800f081
 800eff4:	0800f081 	.word	0x0800f081
 800eff8:	0800f081 	.word	0x0800f081
 800effc:	0800f081 	.word	0x0800f081
 800f000:	0800f081 	.word	0x0800f081
 800f004:	0800f081 	.word	0x0800f081
 800f008:	0800f081 	.word	0x0800f081
 800f00c:	0800f069 	.word	0x0800f069
 800f010:	0800f081 	.word	0x0800f081
 800f014:	0800f081 	.word	0x0800f081
 800f018:	0800f081 	.word	0x0800f081
 800f01c:	0800f081 	.word	0x0800f081
 800f020:	0800f081 	.word	0x0800f081
 800f024:	0800f081 	.word	0x0800f081
 800f028:	0800f081 	.word	0x0800f081
 800f02c:	0800f071 	.word	0x0800f071
 800f030:	0800f081 	.word	0x0800f081
 800f034:	0800f081 	.word	0x0800f081
 800f038:	0800f081 	.word	0x0800f081
 800f03c:	0800f081 	.word	0x0800f081
 800f040:	0800f081 	.word	0x0800f081
 800f044:	0800f081 	.word	0x0800f081
 800f048:	0800f081 	.word	0x0800f081
 800f04c:	0800f079 	.word	0x0800f079
 800f050:	2301      	movs	r3, #1
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f056:	e1c0      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f058:	2304      	movs	r3, #4
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05e:	e1bc      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f060:	2308      	movs	r3, #8
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f066:	e1b8      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f068:	2310      	movs	r3, #16
 800f06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f06e:	e1b4      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f070:	2320      	movs	r3, #32
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f076:	e1b0      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f078:	2340      	movs	r3, #64	@ 0x40
 800f07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f07e:	e1ac      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f080:	2380      	movs	r3, #128	@ 0x80
 800f082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f086:	e1a8      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a75      	ldr	r2, [pc, #468]	@ (800f264 <UART_SetConfig+0x638>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d130      	bne.n	800f0f4 <UART_SetConfig+0x4c8>
 800f092:	4b73      	ldr	r3, [pc, #460]	@ (800f260 <UART_SetConfig+0x634>)
 800f094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f096:	f003 0307 	and.w	r3, r3, #7
 800f09a:	2b05      	cmp	r3, #5
 800f09c:	d826      	bhi.n	800f0ec <UART_SetConfig+0x4c0>
 800f09e:	a201      	add	r2, pc, #4	@ (adr r2, 800f0a4 <UART_SetConfig+0x478>)
 800f0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a4:	0800f0bd 	.word	0x0800f0bd
 800f0a8:	0800f0c5 	.word	0x0800f0c5
 800f0ac:	0800f0cd 	.word	0x0800f0cd
 800f0b0:	0800f0d5 	.word	0x0800f0d5
 800f0b4:	0800f0dd 	.word	0x0800f0dd
 800f0b8:	0800f0e5 	.word	0x0800f0e5
 800f0bc:	2300      	movs	r3, #0
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0c2:	e18a      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f0c4:	2304      	movs	r3, #4
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ca:	e186      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f0cc:	2308      	movs	r3, #8
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0d2:	e182      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f0d4:	2310      	movs	r3, #16
 800f0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0da:	e17e      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f0dc:	2320      	movs	r3, #32
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0e2:	e17a      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f0e4:	2340      	movs	r3, #64	@ 0x40
 800f0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ea:	e176      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f0ec:	2380      	movs	r3, #128	@ 0x80
 800f0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0f2:	e172      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4a5b      	ldr	r2, [pc, #364]	@ (800f268 <UART_SetConfig+0x63c>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d130      	bne.n	800f160 <UART_SetConfig+0x534>
 800f0fe:	4b58      	ldr	r3, [pc, #352]	@ (800f260 <UART_SetConfig+0x634>)
 800f100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f102:	f003 0307 	and.w	r3, r3, #7
 800f106:	2b05      	cmp	r3, #5
 800f108:	d826      	bhi.n	800f158 <UART_SetConfig+0x52c>
 800f10a:	a201      	add	r2, pc, #4	@ (adr r2, 800f110 <UART_SetConfig+0x4e4>)
 800f10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f110:	0800f129 	.word	0x0800f129
 800f114:	0800f131 	.word	0x0800f131
 800f118:	0800f139 	.word	0x0800f139
 800f11c:	0800f141 	.word	0x0800f141
 800f120:	0800f149 	.word	0x0800f149
 800f124:	0800f151 	.word	0x0800f151
 800f128:	2300      	movs	r3, #0
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12e:	e154      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f130:	2304      	movs	r3, #4
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f136:	e150      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f138:	2308      	movs	r3, #8
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f13e:	e14c      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f140:	2310      	movs	r3, #16
 800f142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f146:	e148      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f148:	2320      	movs	r3, #32
 800f14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f14e:	e144      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f150:	2340      	movs	r3, #64	@ 0x40
 800f152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f156:	e140      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f158:	2380      	movs	r3, #128	@ 0x80
 800f15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15e:	e13c      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a41      	ldr	r2, [pc, #260]	@ (800f26c <UART_SetConfig+0x640>)
 800f166:	4293      	cmp	r3, r2
 800f168:	f040 8082 	bne.w	800f270 <UART_SetConfig+0x644>
 800f16c:	4b3c      	ldr	r3, [pc, #240]	@ (800f260 <UART_SetConfig+0x634>)
 800f16e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f174:	2b28      	cmp	r3, #40	@ 0x28
 800f176:	d86d      	bhi.n	800f254 <UART_SetConfig+0x628>
 800f178:	a201      	add	r2, pc, #4	@ (adr r2, 800f180 <UART_SetConfig+0x554>)
 800f17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f17e:	bf00      	nop
 800f180:	0800f225 	.word	0x0800f225
 800f184:	0800f255 	.word	0x0800f255
 800f188:	0800f255 	.word	0x0800f255
 800f18c:	0800f255 	.word	0x0800f255
 800f190:	0800f255 	.word	0x0800f255
 800f194:	0800f255 	.word	0x0800f255
 800f198:	0800f255 	.word	0x0800f255
 800f19c:	0800f255 	.word	0x0800f255
 800f1a0:	0800f22d 	.word	0x0800f22d
 800f1a4:	0800f255 	.word	0x0800f255
 800f1a8:	0800f255 	.word	0x0800f255
 800f1ac:	0800f255 	.word	0x0800f255
 800f1b0:	0800f255 	.word	0x0800f255
 800f1b4:	0800f255 	.word	0x0800f255
 800f1b8:	0800f255 	.word	0x0800f255
 800f1bc:	0800f255 	.word	0x0800f255
 800f1c0:	0800f235 	.word	0x0800f235
 800f1c4:	0800f255 	.word	0x0800f255
 800f1c8:	0800f255 	.word	0x0800f255
 800f1cc:	0800f255 	.word	0x0800f255
 800f1d0:	0800f255 	.word	0x0800f255
 800f1d4:	0800f255 	.word	0x0800f255
 800f1d8:	0800f255 	.word	0x0800f255
 800f1dc:	0800f255 	.word	0x0800f255
 800f1e0:	0800f23d 	.word	0x0800f23d
 800f1e4:	0800f255 	.word	0x0800f255
 800f1e8:	0800f255 	.word	0x0800f255
 800f1ec:	0800f255 	.word	0x0800f255
 800f1f0:	0800f255 	.word	0x0800f255
 800f1f4:	0800f255 	.word	0x0800f255
 800f1f8:	0800f255 	.word	0x0800f255
 800f1fc:	0800f255 	.word	0x0800f255
 800f200:	0800f245 	.word	0x0800f245
 800f204:	0800f255 	.word	0x0800f255
 800f208:	0800f255 	.word	0x0800f255
 800f20c:	0800f255 	.word	0x0800f255
 800f210:	0800f255 	.word	0x0800f255
 800f214:	0800f255 	.word	0x0800f255
 800f218:	0800f255 	.word	0x0800f255
 800f21c:	0800f255 	.word	0x0800f255
 800f220:	0800f24d 	.word	0x0800f24d
 800f224:	2301      	movs	r3, #1
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22a:	e0d6      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f22c:	2304      	movs	r3, #4
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f232:	e0d2      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f234:	2308      	movs	r3, #8
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f23a:	e0ce      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f23c:	2310      	movs	r3, #16
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f242:	e0ca      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f244:	2320      	movs	r3, #32
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24a:	e0c6      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f24c:	2340      	movs	r3, #64	@ 0x40
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f252:	e0c2      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f254:	2380      	movs	r3, #128	@ 0x80
 800f256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f25a:	e0be      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f25c:	40011400 	.word	0x40011400
 800f260:	58024400 	.word	0x58024400
 800f264:	40007800 	.word	0x40007800
 800f268:	40007c00 	.word	0x40007c00
 800f26c:	40011800 	.word	0x40011800
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4aad      	ldr	r2, [pc, #692]	@ (800f52c <UART_SetConfig+0x900>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d176      	bne.n	800f368 <UART_SetConfig+0x73c>
 800f27a:	4bad      	ldr	r3, [pc, #692]	@ (800f530 <UART_SetConfig+0x904>)
 800f27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f27e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f282:	2b28      	cmp	r3, #40	@ 0x28
 800f284:	d86c      	bhi.n	800f360 <UART_SetConfig+0x734>
 800f286:	a201      	add	r2, pc, #4	@ (adr r2, 800f28c <UART_SetConfig+0x660>)
 800f288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28c:	0800f331 	.word	0x0800f331
 800f290:	0800f361 	.word	0x0800f361
 800f294:	0800f361 	.word	0x0800f361
 800f298:	0800f361 	.word	0x0800f361
 800f29c:	0800f361 	.word	0x0800f361
 800f2a0:	0800f361 	.word	0x0800f361
 800f2a4:	0800f361 	.word	0x0800f361
 800f2a8:	0800f361 	.word	0x0800f361
 800f2ac:	0800f339 	.word	0x0800f339
 800f2b0:	0800f361 	.word	0x0800f361
 800f2b4:	0800f361 	.word	0x0800f361
 800f2b8:	0800f361 	.word	0x0800f361
 800f2bc:	0800f361 	.word	0x0800f361
 800f2c0:	0800f361 	.word	0x0800f361
 800f2c4:	0800f361 	.word	0x0800f361
 800f2c8:	0800f361 	.word	0x0800f361
 800f2cc:	0800f341 	.word	0x0800f341
 800f2d0:	0800f361 	.word	0x0800f361
 800f2d4:	0800f361 	.word	0x0800f361
 800f2d8:	0800f361 	.word	0x0800f361
 800f2dc:	0800f361 	.word	0x0800f361
 800f2e0:	0800f361 	.word	0x0800f361
 800f2e4:	0800f361 	.word	0x0800f361
 800f2e8:	0800f361 	.word	0x0800f361
 800f2ec:	0800f349 	.word	0x0800f349
 800f2f0:	0800f361 	.word	0x0800f361
 800f2f4:	0800f361 	.word	0x0800f361
 800f2f8:	0800f361 	.word	0x0800f361
 800f2fc:	0800f361 	.word	0x0800f361
 800f300:	0800f361 	.word	0x0800f361
 800f304:	0800f361 	.word	0x0800f361
 800f308:	0800f361 	.word	0x0800f361
 800f30c:	0800f351 	.word	0x0800f351
 800f310:	0800f361 	.word	0x0800f361
 800f314:	0800f361 	.word	0x0800f361
 800f318:	0800f361 	.word	0x0800f361
 800f31c:	0800f361 	.word	0x0800f361
 800f320:	0800f361 	.word	0x0800f361
 800f324:	0800f361 	.word	0x0800f361
 800f328:	0800f361 	.word	0x0800f361
 800f32c:	0800f359 	.word	0x0800f359
 800f330:	2301      	movs	r3, #1
 800f332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f336:	e050      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f338:	2304      	movs	r3, #4
 800f33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f33e:	e04c      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f340:	2308      	movs	r3, #8
 800f342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f346:	e048      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f348:	2310      	movs	r3, #16
 800f34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f34e:	e044      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f350:	2320      	movs	r3, #32
 800f352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f356:	e040      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f358:	2340      	movs	r3, #64	@ 0x40
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f35e:	e03c      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f360:	2380      	movs	r3, #128	@ 0x80
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f366:	e038      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a71      	ldr	r2, [pc, #452]	@ (800f534 <UART_SetConfig+0x908>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d130      	bne.n	800f3d4 <UART_SetConfig+0x7a8>
 800f372:	4b6f      	ldr	r3, [pc, #444]	@ (800f530 <UART_SetConfig+0x904>)
 800f374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f376:	f003 0307 	and.w	r3, r3, #7
 800f37a:	2b05      	cmp	r3, #5
 800f37c:	d826      	bhi.n	800f3cc <UART_SetConfig+0x7a0>
 800f37e:	a201      	add	r2, pc, #4	@ (adr r2, 800f384 <UART_SetConfig+0x758>)
 800f380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f384:	0800f39d 	.word	0x0800f39d
 800f388:	0800f3a5 	.word	0x0800f3a5
 800f38c:	0800f3ad 	.word	0x0800f3ad
 800f390:	0800f3b5 	.word	0x0800f3b5
 800f394:	0800f3bd 	.word	0x0800f3bd
 800f398:	0800f3c5 	.word	0x0800f3c5
 800f39c:	2302      	movs	r3, #2
 800f39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3a2:	e01a      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f3a4:	2304      	movs	r3, #4
 800f3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3aa:	e016      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f3ac:	2308      	movs	r3, #8
 800f3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3b2:	e012      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f3b4:	2310      	movs	r3, #16
 800f3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ba:	e00e      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f3bc:	2320      	movs	r3, #32
 800f3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3c2:	e00a      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f3c4:	2340      	movs	r3, #64	@ 0x40
 800f3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ca:	e006      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f3cc:	2380      	movs	r3, #128	@ 0x80
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3d2:	e002      	b.n	800f3da <UART_SetConfig+0x7ae>
 800f3d4:	2380      	movs	r3, #128	@ 0x80
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4a55      	ldr	r2, [pc, #340]	@ (800f534 <UART_SetConfig+0x908>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	f040 80f8 	bne.w	800f5d6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f3ea:	2b20      	cmp	r3, #32
 800f3ec:	dc46      	bgt.n	800f47c <UART_SetConfig+0x850>
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	db75      	blt.n	800f4de <UART_SetConfig+0x8b2>
 800f3f2:	3b02      	subs	r3, #2
 800f3f4:	2b1e      	cmp	r3, #30
 800f3f6:	d872      	bhi.n	800f4de <UART_SetConfig+0x8b2>
 800f3f8:	a201      	add	r2, pc, #4	@ (adr r2, 800f400 <UART_SetConfig+0x7d4>)
 800f3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3fe:	bf00      	nop
 800f400:	0800f483 	.word	0x0800f483
 800f404:	0800f4df 	.word	0x0800f4df
 800f408:	0800f48b 	.word	0x0800f48b
 800f40c:	0800f4df 	.word	0x0800f4df
 800f410:	0800f4df 	.word	0x0800f4df
 800f414:	0800f4df 	.word	0x0800f4df
 800f418:	0800f49b 	.word	0x0800f49b
 800f41c:	0800f4df 	.word	0x0800f4df
 800f420:	0800f4df 	.word	0x0800f4df
 800f424:	0800f4df 	.word	0x0800f4df
 800f428:	0800f4df 	.word	0x0800f4df
 800f42c:	0800f4df 	.word	0x0800f4df
 800f430:	0800f4df 	.word	0x0800f4df
 800f434:	0800f4df 	.word	0x0800f4df
 800f438:	0800f4ab 	.word	0x0800f4ab
 800f43c:	0800f4df 	.word	0x0800f4df
 800f440:	0800f4df 	.word	0x0800f4df
 800f444:	0800f4df 	.word	0x0800f4df
 800f448:	0800f4df 	.word	0x0800f4df
 800f44c:	0800f4df 	.word	0x0800f4df
 800f450:	0800f4df 	.word	0x0800f4df
 800f454:	0800f4df 	.word	0x0800f4df
 800f458:	0800f4df 	.word	0x0800f4df
 800f45c:	0800f4df 	.word	0x0800f4df
 800f460:	0800f4df 	.word	0x0800f4df
 800f464:	0800f4df 	.word	0x0800f4df
 800f468:	0800f4df 	.word	0x0800f4df
 800f46c:	0800f4df 	.word	0x0800f4df
 800f470:	0800f4df 	.word	0x0800f4df
 800f474:	0800f4df 	.word	0x0800f4df
 800f478:	0800f4d1 	.word	0x0800f4d1
 800f47c:	2b40      	cmp	r3, #64	@ 0x40
 800f47e:	d02a      	beq.n	800f4d6 <UART_SetConfig+0x8aa>
 800f480:	e02d      	b.n	800f4de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f482:	f7fb ff37 	bl	800b2f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f486:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f488:	e02f      	b.n	800f4ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f48a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f48e:	4618      	mov	r0, r3
 800f490:	f7fb ff46 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f498:	e027      	b.n	800f4ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f49a:	f107 0318 	add.w	r3, r7, #24
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fc f892 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4a8:	e01f      	b.n	800f4ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4aa:	4b21      	ldr	r3, [pc, #132]	@ (800f530 <UART_SetConfig+0x904>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f003 0320 	and.w	r3, r3, #32
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d009      	beq.n	800f4ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4b6:	4b1e      	ldr	r3, [pc, #120]	@ (800f530 <UART_SetConfig+0x904>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	08db      	lsrs	r3, r3, #3
 800f4bc:	f003 0303 	and.w	r3, r3, #3
 800f4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800f538 <UART_SetConfig+0x90c>)
 800f4c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4c8:	e00f      	b.n	800f4ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800f538 <UART_SetConfig+0x90c>)
 800f4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4ce:	e00c      	b.n	800f4ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800f53c <UART_SetConfig+0x910>)
 800f4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4d4:	e009      	b.n	800f4ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4dc:	e005      	b.n	800f4ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f4e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f000 81ee 	beq.w	800f8ce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4f6:	4a12      	ldr	r2, [pc, #72]	@ (800f540 <UART_SetConfig+0x914>)
 800f4f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f500:	fbb3 f3f2 	udiv	r3, r3, r2
 800f504:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	4613      	mov	r3, r2
 800f50c:	005b      	lsls	r3, r3, #1
 800f50e:	4413      	add	r3, r2
 800f510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f512:	429a      	cmp	r2, r3
 800f514:	d305      	bcc.n	800f522 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f51c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f51e:	429a      	cmp	r2, r3
 800f520:	d910      	bls.n	800f544 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f522:	2301      	movs	r3, #1
 800f524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f528:	e1d1      	b.n	800f8ce <UART_SetConfig+0xca2>
 800f52a:	bf00      	nop
 800f52c:	40011c00 	.word	0x40011c00
 800f530:	58024400 	.word	0x58024400
 800f534:	58000c00 	.word	0x58000c00
 800f538:	03d09000 	.word	0x03d09000
 800f53c:	003d0900 	.word	0x003d0900
 800f540:	08012aa8 	.word	0x08012aa8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f546:	2200      	movs	r2, #0
 800f548:	60bb      	str	r3, [r7, #8]
 800f54a:	60fa      	str	r2, [r7, #12]
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f550:	4ac0      	ldr	r2, [pc, #768]	@ (800f854 <UART_SetConfig+0xc28>)
 800f552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f556:	b29b      	uxth	r3, r3
 800f558:	2200      	movs	r2, #0
 800f55a:	603b      	str	r3, [r7, #0]
 800f55c:	607a      	str	r2, [r7, #4]
 800f55e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f566:	f7f0 ff2b 	bl	80003c0 <__aeabi_uldivmod>
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	4610      	mov	r0, r2
 800f570:	4619      	mov	r1, r3
 800f572:	f04f 0200 	mov.w	r2, #0
 800f576:	f04f 0300 	mov.w	r3, #0
 800f57a:	020b      	lsls	r3, r1, #8
 800f57c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f580:	0202      	lsls	r2, r0, #8
 800f582:	6979      	ldr	r1, [r7, #20]
 800f584:	6849      	ldr	r1, [r1, #4]
 800f586:	0849      	lsrs	r1, r1, #1
 800f588:	2000      	movs	r0, #0
 800f58a:	460c      	mov	r4, r1
 800f58c:	4605      	mov	r5, r0
 800f58e:	eb12 0804 	adds.w	r8, r2, r4
 800f592:	eb43 0905 	adc.w	r9, r3, r5
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	469a      	mov	sl, r3
 800f59e:	4693      	mov	fp, r2
 800f5a0:	4652      	mov	r2, sl
 800f5a2:	465b      	mov	r3, fp
 800f5a4:	4640      	mov	r0, r8
 800f5a6:	4649      	mov	r1, r9
 800f5a8:	f7f0 ff0a 	bl	80003c0 <__aeabi_uldivmod>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f5ba:	d308      	bcc.n	800f5ce <UART_SetConfig+0x9a2>
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5c2:	d204      	bcs.n	800f5ce <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5ca:	60da      	str	r2, [r3, #12]
 800f5cc:	e17f      	b.n	800f8ce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f5d4:	e17b      	b.n	800f8ce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	69db      	ldr	r3, [r3, #28]
 800f5da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f5de:	f040 80bd 	bne.w	800f75c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f5e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f5e6:	2b20      	cmp	r3, #32
 800f5e8:	dc48      	bgt.n	800f67c <UART_SetConfig+0xa50>
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	db7b      	blt.n	800f6e6 <UART_SetConfig+0xaba>
 800f5ee:	2b20      	cmp	r3, #32
 800f5f0:	d879      	bhi.n	800f6e6 <UART_SetConfig+0xaba>
 800f5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f8 <UART_SetConfig+0x9cc>)
 800f5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f8:	0800f683 	.word	0x0800f683
 800f5fc:	0800f68b 	.word	0x0800f68b
 800f600:	0800f6e7 	.word	0x0800f6e7
 800f604:	0800f6e7 	.word	0x0800f6e7
 800f608:	0800f693 	.word	0x0800f693
 800f60c:	0800f6e7 	.word	0x0800f6e7
 800f610:	0800f6e7 	.word	0x0800f6e7
 800f614:	0800f6e7 	.word	0x0800f6e7
 800f618:	0800f6a3 	.word	0x0800f6a3
 800f61c:	0800f6e7 	.word	0x0800f6e7
 800f620:	0800f6e7 	.word	0x0800f6e7
 800f624:	0800f6e7 	.word	0x0800f6e7
 800f628:	0800f6e7 	.word	0x0800f6e7
 800f62c:	0800f6e7 	.word	0x0800f6e7
 800f630:	0800f6e7 	.word	0x0800f6e7
 800f634:	0800f6e7 	.word	0x0800f6e7
 800f638:	0800f6b3 	.word	0x0800f6b3
 800f63c:	0800f6e7 	.word	0x0800f6e7
 800f640:	0800f6e7 	.word	0x0800f6e7
 800f644:	0800f6e7 	.word	0x0800f6e7
 800f648:	0800f6e7 	.word	0x0800f6e7
 800f64c:	0800f6e7 	.word	0x0800f6e7
 800f650:	0800f6e7 	.word	0x0800f6e7
 800f654:	0800f6e7 	.word	0x0800f6e7
 800f658:	0800f6e7 	.word	0x0800f6e7
 800f65c:	0800f6e7 	.word	0x0800f6e7
 800f660:	0800f6e7 	.word	0x0800f6e7
 800f664:	0800f6e7 	.word	0x0800f6e7
 800f668:	0800f6e7 	.word	0x0800f6e7
 800f66c:	0800f6e7 	.word	0x0800f6e7
 800f670:	0800f6e7 	.word	0x0800f6e7
 800f674:	0800f6e7 	.word	0x0800f6e7
 800f678:	0800f6d9 	.word	0x0800f6d9
 800f67c:	2b40      	cmp	r3, #64	@ 0x40
 800f67e:	d02e      	beq.n	800f6de <UART_SetConfig+0xab2>
 800f680:	e031      	b.n	800f6e6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f682:	f7f9 ff99 	bl	80095b8 <HAL_RCC_GetPCLK1Freq>
 800f686:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f688:	e033      	b.n	800f6f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f68a:	f7f9 ffab 	bl	80095e4 <HAL_RCC_GetPCLK2Freq>
 800f68e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f690:	e02f      	b.n	800f6f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f696:	4618      	mov	r0, r3
 800f698:	f7fb fe42 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a0:	e027      	b.n	800f6f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6a2:	f107 0318 	add.w	r3, r7, #24
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fb ff8e 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6b0:	e01f      	b.n	800f6f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6b2:	4b69      	ldr	r3, [pc, #420]	@ (800f858 <UART_SetConfig+0xc2c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f003 0320 	and.w	r3, r3, #32
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d009      	beq.n	800f6d2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6be:	4b66      	ldr	r3, [pc, #408]	@ (800f858 <UART_SetConfig+0xc2c>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	08db      	lsrs	r3, r3, #3
 800f6c4:	f003 0303 	and.w	r3, r3, #3
 800f6c8:	4a64      	ldr	r2, [pc, #400]	@ (800f85c <UART_SetConfig+0xc30>)
 800f6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6d0:	e00f      	b.n	800f6f2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f6d2:	4b62      	ldr	r3, [pc, #392]	@ (800f85c <UART_SetConfig+0xc30>)
 800f6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6d6:	e00c      	b.n	800f6f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6d8:	4b61      	ldr	r3, [pc, #388]	@ (800f860 <UART_SetConfig+0xc34>)
 800f6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6dc:	e009      	b.n	800f6f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e4:	e005      	b.n	800f6f2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f6f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f000 80ea 	beq.w	800f8ce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6fe:	4a55      	ldr	r2, [pc, #340]	@ (800f854 <UART_SetConfig+0xc28>)
 800f700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f704:	461a      	mov	r2, r3
 800f706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f708:	fbb3 f3f2 	udiv	r3, r3, r2
 800f70c:	005a      	lsls	r2, r3, #1
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	085b      	lsrs	r3, r3, #1
 800f714:	441a      	add	r2, r3
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f71e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f722:	2b0f      	cmp	r3, #15
 800f724:	d916      	bls.n	800f754 <UART_SetConfig+0xb28>
 800f726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f72c:	d212      	bcs.n	800f754 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f730:	b29b      	uxth	r3, r3
 800f732:	f023 030f 	bic.w	r3, r3, #15
 800f736:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f73a:	085b      	lsrs	r3, r3, #1
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	f003 0307 	and.w	r3, r3, #7
 800f742:	b29a      	uxth	r2, r3
 800f744:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f746:	4313      	orrs	r3, r2
 800f748:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f750:	60da      	str	r2, [r3, #12]
 800f752:	e0bc      	b.n	800f8ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f754:	2301      	movs	r3, #1
 800f756:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f75a:	e0b8      	b.n	800f8ce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f75c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f760:	2b20      	cmp	r3, #32
 800f762:	dc4b      	bgt.n	800f7fc <UART_SetConfig+0xbd0>
 800f764:	2b00      	cmp	r3, #0
 800f766:	f2c0 8087 	blt.w	800f878 <UART_SetConfig+0xc4c>
 800f76a:	2b20      	cmp	r3, #32
 800f76c:	f200 8084 	bhi.w	800f878 <UART_SetConfig+0xc4c>
 800f770:	a201      	add	r2, pc, #4	@ (adr r2, 800f778 <UART_SetConfig+0xb4c>)
 800f772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f776:	bf00      	nop
 800f778:	0800f803 	.word	0x0800f803
 800f77c:	0800f80b 	.word	0x0800f80b
 800f780:	0800f879 	.word	0x0800f879
 800f784:	0800f879 	.word	0x0800f879
 800f788:	0800f813 	.word	0x0800f813
 800f78c:	0800f879 	.word	0x0800f879
 800f790:	0800f879 	.word	0x0800f879
 800f794:	0800f879 	.word	0x0800f879
 800f798:	0800f823 	.word	0x0800f823
 800f79c:	0800f879 	.word	0x0800f879
 800f7a0:	0800f879 	.word	0x0800f879
 800f7a4:	0800f879 	.word	0x0800f879
 800f7a8:	0800f879 	.word	0x0800f879
 800f7ac:	0800f879 	.word	0x0800f879
 800f7b0:	0800f879 	.word	0x0800f879
 800f7b4:	0800f879 	.word	0x0800f879
 800f7b8:	0800f833 	.word	0x0800f833
 800f7bc:	0800f879 	.word	0x0800f879
 800f7c0:	0800f879 	.word	0x0800f879
 800f7c4:	0800f879 	.word	0x0800f879
 800f7c8:	0800f879 	.word	0x0800f879
 800f7cc:	0800f879 	.word	0x0800f879
 800f7d0:	0800f879 	.word	0x0800f879
 800f7d4:	0800f879 	.word	0x0800f879
 800f7d8:	0800f879 	.word	0x0800f879
 800f7dc:	0800f879 	.word	0x0800f879
 800f7e0:	0800f879 	.word	0x0800f879
 800f7e4:	0800f879 	.word	0x0800f879
 800f7e8:	0800f879 	.word	0x0800f879
 800f7ec:	0800f879 	.word	0x0800f879
 800f7f0:	0800f879 	.word	0x0800f879
 800f7f4:	0800f879 	.word	0x0800f879
 800f7f8:	0800f86b 	.word	0x0800f86b
 800f7fc:	2b40      	cmp	r3, #64	@ 0x40
 800f7fe:	d037      	beq.n	800f870 <UART_SetConfig+0xc44>
 800f800:	e03a      	b.n	800f878 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f802:	f7f9 fed9 	bl	80095b8 <HAL_RCC_GetPCLK1Freq>
 800f806:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f808:	e03c      	b.n	800f884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f80a:	f7f9 feeb 	bl	80095e4 <HAL_RCC_GetPCLK2Freq>
 800f80e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f810:	e038      	b.n	800f884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f816:	4618      	mov	r0, r3
 800f818:	f7fb fd82 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f820:	e030      	b.n	800f884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f822:	f107 0318 	add.w	r3, r7, #24
 800f826:	4618      	mov	r0, r3
 800f828:	f7fb fece 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f830:	e028      	b.n	800f884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f832:	4b09      	ldr	r3, [pc, #36]	@ (800f858 <UART_SetConfig+0xc2c>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f003 0320 	and.w	r3, r3, #32
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d012      	beq.n	800f864 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f83e:	4b06      	ldr	r3, [pc, #24]	@ (800f858 <UART_SetConfig+0xc2c>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	08db      	lsrs	r3, r3, #3
 800f844:	f003 0303 	and.w	r3, r3, #3
 800f848:	4a04      	ldr	r2, [pc, #16]	@ (800f85c <UART_SetConfig+0xc30>)
 800f84a:	fa22 f303 	lsr.w	r3, r2, r3
 800f84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f850:	e018      	b.n	800f884 <UART_SetConfig+0xc58>
 800f852:	bf00      	nop
 800f854:	08012aa8 	.word	0x08012aa8
 800f858:	58024400 	.word	0x58024400
 800f85c:	03d09000 	.word	0x03d09000
 800f860:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f864:	4b24      	ldr	r3, [pc, #144]	@ (800f8f8 <UART_SetConfig+0xccc>)
 800f866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f868:	e00c      	b.n	800f884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f86a:	4b24      	ldr	r3, [pc, #144]	@ (800f8fc <UART_SetConfig+0xcd0>)
 800f86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f86e:	e009      	b.n	800f884 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f876:	e005      	b.n	800f884 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f878:	2300      	movs	r3, #0
 800f87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f882:	bf00      	nop
    }

    if (pclk != 0U)
 800f884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f886:	2b00      	cmp	r3, #0
 800f888:	d021      	beq.n	800f8ce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f88e:	4a1c      	ldr	r2, [pc, #112]	@ (800f900 <UART_SetConfig+0xcd4>)
 800f890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f894:	461a      	mov	r2, r3
 800f896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f898:	fbb3 f2f2 	udiv	r2, r3, r2
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	085b      	lsrs	r3, r3, #1
 800f8a2:	441a      	add	r2, r3
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b0:	2b0f      	cmp	r3, #15
 800f8b2:	d909      	bls.n	800f8c8 <UART_SetConfig+0xc9c>
 800f8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8ba:	d205      	bcs.n	800f8c8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	60da      	str	r2, [r3, #12]
 800f8c6:	e002      	b.n	800f8ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f8ea:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3748      	adds	r7, #72	@ 0x48
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f8f8:	03d09000 	.word	0x03d09000
 800f8fc:	003d0900 	.word	0x003d0900
 800f900:	08012aa8 	.word	0x08012aa8

0800f904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f910:	f003 0308 	and.w	r3, r3, #8
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00a      	beq.n	800f92e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	430a      	orrs	r2, r1
 800f92c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f932:	f003 0301 	and.w	r3, r3, #1
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00a      	beq.n	800f950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	430a      	orrs	r2, r1
 800f94e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f954:	f003 0302 	and.w	r3, r3, #2
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00a      	beq.n	800f972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	430a      	orrs	r2, r1
 800f970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f976:	f003 0304 	and.w	r3, r3, #4
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00a      	beq.n	800f994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	430a      	orrs	r2, r1
 800f992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f998:	f003 0310 	and.w	r3, r3, #16
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00a      	beq.n	800f9b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	430a      	orrs	r2, r1
 800f9b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ba:	f003 0320 	and.w	r3, r3, #32
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00a      	beq.n	800f9d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	689b      	ldr	r3, [r3, #8]
 800f9c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	430a      	orrs	r2, r1
 800f9d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d01a      	beq.n	800fa1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	430a      	orrs	r2, r1
 800f9f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa02:	d10a      	bne.n	800fa1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	430a      	orrs	r2, r1
 800fa18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00a      	beq.n	800fa3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	430a      	orrs	r2, r1
 800fa3a:	605a      	str	r2, [r3, #4]
  }
}
 800fa3c:	bf00      	nop
 800fa3e:	370c      	adds	r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b098      	sub	sp, #96	@ 0x60
 800fa4c:	af02      	add	r7, sp, #8
 800fa4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa58:	f7f2 ffa2 	bl	80029a0 <HAL_GetTick>
 800fa5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f003 0308 	and.w	r3, r3, #8
 800fa68:	2b08      	cmp	r3, #8
 800fa6a:	d12f      	bne.n	800facc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa74:	2200      	movs	r2, #0
 800fa76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f000 f88e 	bl	800fb9c <UART_WaitOnFlagUntilTimeout>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d022      	beq.n	800facc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8e:	e853 3f00 	ldrex	r3, [r3]
 800fa92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	461a      	mov	r2, r3
 800faa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800faa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800faa6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800faaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800faac:	e841 2300 	strex	r3, r2, [r1]
 800fab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d1e6      	bne.n	800fa86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2220      	movs	r2, #32
 800fabc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fac8:	2303      	movs	r3, #3
 800faca:	e063      	b.n	800fb94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f003 0304 	and.w	r3, r3, #4
 800fad6:	2b04      	cmp	r3, #4
 800fad8:	d149      	bne.n	800fb6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fada:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fade:	9300      	str	r3, [sp, #0]
 800fae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fae2:	2200      	movs	r2, #0
 800fae4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f857 	bl	800fb9c <UART_WaitOnFlagUntilTimeout>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d03c      	beq.n	800fb6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fafc:	e853 3f00 	ldrex	r3, [r3]
 800fb00:	623b      	str	r3, [r7, #32]
   return(result);
 800fb02:	6a3b      	ldr	r3, [r7, #32]
 800fb04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	461a      	mov	r2, r3
 800fb10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb12:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb1a:	e841 2300 	strex	r3, r2, [r1]
 800fb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1e6      	bne.n	800faf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	3308      	adds	r3, #8
 800fb2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	e853 3f00 	ldrex	r3, [r3]
 800fb34:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f023 0301 	bic.w	r3, r3, #1
 800fb3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3308      	adds	r3, #8
 800fb44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb46:	61fa      	str	r2, [r7, #28]
 800fb48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4a:	69b9      	ldr	r1, [r7, #24]
 800fb4c:	69fa      	ldr	r2, [r7, #28]
 800fb4e:	e841 2300 	strex	r3, r2, [r1]
 800fb52:	617b      	str	r3, [r7, #20]
   return(result);
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1e5      	bne.n	800fb26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2220      	movs	r2, #32
 800fb5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	e012      	b.n	800fb94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2220      	movs	r2, #32
 800fb72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2220      	movs	r2, #32
 800fb7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3758      	adds	r7, #88	@ 0x58
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	603b      	str	r3, [r7, #0]
 800fba8:	4613      	mov	r3, r2
 800fbaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbac:	e04f      	b.n	800fc4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb4:	d04b      	beq.n	800fc4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbb6:	f7f2 fef3 	bl	80029a0 <HAL_GetTick>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	69ba      	ldr	r2, [r7, #24]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d302      	bcc.n	800fbcc <UART_WaitOnFlagUntilTimeout+0x30>
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d101      	bne.n	800fbd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fbcc:	2303      	movs	r3, #3
 800fbce:	e04e      	b.n	800fc6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f003 0304 	and.w	r3, r3, #4
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d037      	beq.n	800fc4e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	2b80      	cmp	r3, #128	@ 0x80
 800fbe2:	d034      	beq.n	800fc4e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2b40      	cmp	r3, #64	@ 0x40
 800fbe8:	d031      	beq.n	800fc4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	69db      	ldr	r3, [r3, #28]
 800fbf0:	f003 0308 	and.w	r3, r3, #8
 800fbf4:	2b08      	cmp	r3, #8
 800fbf6:	d110      	bne.n	800fc1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2208      	movs	r2, #8
 800fbfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f000 f839 	bl	800fc78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2208      	movs	r2, #8
 800fc0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fc16:	2301      	movs	r3, #1
 800fc18:	e029      	b.n	800fc6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	69db      	ldr	r3, [r3, #28]
 800fc20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc28:	d111      	bne.n	800fc4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f000 f81f 	bl	800fc78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2220      	movs	r2, #32
 800fc3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fc4a:	2303      	movs	r3, #3
 800fc4c:	e00f      	b.n	800fc6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	69da      	ldr	r2, [r3, #28]
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	4013      	ands	r3, r2
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	bf0c      	ite	eq
 800fc5e:	2301      	moveq	r3, #1
 800fc60:	2300      	movne	r3, #0
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	461a      	mov	r2, r3
 800fc66:	79fb      	ldrb	r3, [r7, #7]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d0a0      	beq.n	800fbae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
	...

0800fc78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b095      	sub	sp, #84	@ 0x54
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc88:	e853 3f00 	ldrex	r3, [r3]
 800fc8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800fca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fca6:	e841 2300 	strex	r3, r2, [r1]
 800fcaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1e6      	bne.n	800fc80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	3308      	adds	r3, #8
 800fcb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcba:	6a3b      	ldr	r3, [r7, #32]
 800fcbc:	e853 3f00 	ldrex	r3, [r3]
 800fcc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcc2:	69fa      	ldr	r2, [r7, #28]
 800fcc4:	4b1e      	ldr	r3, [pc, #120]	@ (800fd40 <UART_EndRxTransfer+0xc8>)
 800fcc6:	4013      	ands	r3, r2
 800fcc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	3308      	adds	r3, #8
 800fcd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fcd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fcd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcda:	e841 2300 	strex	r3, r2, [r1]
 800fcde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1e5      	bne.n	800fcb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d118      	bne.n	800fd20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	e853 3f00 	ldrex	r3, [r3]
 800fcfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	f023 0310 	bic.w	r3, r3, #16
 800fd02:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	461a      	mov	r2, r3
 800fd0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd0c:	61bb      	str	r3, [r7, #24]
 800fd0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd10:	6979      	ldr	r1, [r7, #20]
 800fd12:	69ba      	ldr	r2, [r7, #24]
 800fd14:	e841 2300 	strex	r3, r2, [r1]
 800fd18:	613b      	str	r3, [r7, #16]
   return(result);
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1e6      	bne.n	800fcee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2220      	movs	r2, #32
 800fd24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fd34:	bf00      	nop
 800fd36:	3754      	adds	r7, #84	@ 0x54
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr
 800fd40:	effffffe 	.word	0xeffffffe

0800fd44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d101      	bne.n	800fd5a <HAL_UARTEx_DisableFifoMode+0x16>
 800fd56:	2302      	movs	r3, #2
 800fd58:	e027      	b.n	800fdaa <HAL_UARTEx_DisableFifoMode+0x66>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2224      	movs	r2, #36	@ 0x24
 800fd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	681a      	ldr	r2, [r3, #0]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f022 0201 	bic.w	r2, r2, #1
 800fd80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fd88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2220      	movs	r2, #32
 800fd9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr

0800fdb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b084      	sub	sp, #16
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
 800fdbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d101      	bne.n	800fdce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fdca:	2302      	movs	r3, #2
 800fdcc:	e02d      	b.n	800fe2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2224      	movs	r2, #36	@ 0x24
 800fdda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f022 0201 	bic.w	r2, r2, #1
 800fdf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	683a      	ldr	r2, [r7, #0]
 800fe06:	430a      	orrs	r2, r1
 800fe08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 f850 	bl	800feb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2220      	movs	r2, #32
 800fe1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe28:	2300      	movs	r3, #0
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b084      	sub	sp, #16
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d101      	bne.n	800fe4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe46:	2302      	movs	r3, #2
 800fe48:	e02d      	b.n	800fea6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2224      	movs	r2, #36	@ 0x24
 800fe56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f022 0201 	bic.w	r2, r2, #1
 800fe70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	683a      	ldr	r2, [r7, #0]
 800fe82:	430a      	orrs	r2, r1
 800fe84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 f812 	bl	800feb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2220      	movs	r2, #32
 800fe98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fea4:	2300      	movs	r3, #0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
	...

0800feb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b085      	sub	sp, #20
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800febc:	2b00      	cmp	r3, #0
 800febe:	d108      	bne.n	800fed2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2201      	movs	r2, #1
 800fec4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2201      	movs	r2, #1
 800fecc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fed0:	e031      	b.n	800ff36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fed2:	2310      	movs	r3, #16
 800fed4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fed6:	2310      	movs	r3, #16
 800fed8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	0e5b      	lsrs	r3, r3, #25
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	f003 0307 	and.w	r3, r3, #7
 800fee8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	0f5b      	lsrs	r3, r3, #29
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	f003 0307 	and.w	r3, r3, #7
 800fef8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fefa:	7bbb      	ldrb	r3, [r7, #14]
 800fefc:	7b3a      	ldrb	r2, [r7, #12]
 800fefe:	4911      	ldr	r1, [pc, #68]	@ (800ff44 <UARTEx_SetNbDataToProcess+0x94>)
 800ff00:	5c8a      	ldrb	r2, [r1, r2]
 800ff02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff06:	7b3a      	ldrb	r2, [r7, #12]
 800ff08:	490f      	ldr	r1, [pc, #60]	@ (800ff48 <UARTEx_SetNbDataToProcess+0x98>)
 800ff0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff18:	7bfb      	ldrb	r3, [r7, #15]
 800ff1a:	7b7a      	ldrb	r2, [r7, #13]
 800ff1c:	4909      	ldr	r1, [pc, #36]	@ (800ff44 <UARTEx_SetNbDataToProcess+0x94>)
 800ff1e:	5c8a      	ldrb	r2, [r1, r2]
 800ff20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff24:	7b7a      	ldrb	r2, [r7, #13]
 800ff26:	4908      	ldr	r1, [pc, #32]	@ (800ff48 <UARTEx_SetNbDataToProcess+0x98>)
 800ff28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff2e:	b29a      	uxth	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ff36:	bf00      	nop
 800ff38:	3714      	adds	r7, #20
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	08012ac0 	.word	0x08012ac0
 800ff48:	08012ac8 	.word	0x08012ac8

0800ff4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ff4c:	b084      	sub	sp, #16
 800ff4e:	b480      	push	{r7}
 800ff50:	b085      	sub	sp, #20
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
 800ff56:	f107 001c 	add.w	r0, r7, #28
 800ff5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ff62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ff64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ff66:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ff68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ff6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ff6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ff6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ff70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800ff72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	4313      	orrs	r3, r2
 800ff78:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	685a      	ldr	r2, [r3, #4]
 800ff7e:	4b07      	ldr	r3, [pc, #28]	@ (800ff9c <SDMMC_Init+0x50>)
 800ff80:	4013      	ands	r3, r2
 800ff82:	68fa      	ldr	r2, [r7, #12]
 800ff84:	431a      	orrs	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	b004      	add	sp, #16
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	ffc02c00 	.word	0xffc02c00

0800ffa0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	370c      	adds	r7, #12
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr

0800ffba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ffba:	b480      	push	{r7}
 800ffbc:	b083      	sub	sp, #12
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
 800ffc2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	681a      	ldr	r2, [r3, #0]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f043 0203 	orr.w	r2, r3, #3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fff0:	2300      	movs	r3, #0
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	370c      	adds	r7, #12
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr

0800fffe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800fffe:	b480      	push	{r7}
 8010000:	b083      	sub	sp, #12
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f003 0303 	and.w	r3, r3, #3
}
 801000e:	4618      	mov	r0, r3
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr
	...

0801001c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010026:	2300      	movs	r3, #0
 8010028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	681a      	ldr	r2, [r3, #0]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801003a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010040:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010046:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010048:	68fa      	ldr	r2, [r7, #12]
 801004a:	4313      	orrs	r3, r2
 801004c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	68da      	ldr	r2, [r3, #12]
 8010052:	4b06      	ldr	r3, [pc, #24]	@ (801006c <SDMMC_SendCommand+0x50>)
 8010054:	4013      	ands	r3, r2
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	431a      	orrs	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr
 801006c:	fffee0c0 	.word	0xfffee0c0

08010070 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	691b      	ldr	r3, [r3, #16]
 801007c:	b2db      	uxtb	r3, r3
}
 801007e:	4618      	mov	r0, r3
 8010080:	370c      	adds	r7, #12
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr

0801008a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801008a:	b480      	push	{r7}
 801008c:	b085      	sub	sp, #20
 801008e:	af00      	add	r7, sp, #0
 8010090:	6078      	str	r0, [r7, #4]
 8010092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	3314      	adds	r3, #20
 8010098:	461a      	mov	r2, r3
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	4413      	add	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3714      	adds	r7, #20
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b085      	sub	sp, #20
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	685a      	ldr	r2, [r3, #4]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100d6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80100dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80100e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100e4:	68fa      	ldr	r2, [r7, #12]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	431a      	orrs	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80100fa:	2300      	movs	r3, #0

}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3714      	adds	r7, #20
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b088      	sub	sp, #32
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010116:	2310      	movs	r3, #16
 8010118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801011a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801011e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010120:	2300      	movs	r3, #0
 8010122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010128:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801012a:	f107 0308 	add.w	r3, r7, #8
 801012e:	4619      	mov	r1, r3
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff ff73 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010136:	f241 3288 	movw	r2, #5000	@ 0x1388
 801013a:	2110      	movs	r1, #16
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 fa5f 	bl	8010600 <SDMMC_GetCmdResp1>
 8010142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010144:	69fb      	ldr	r3, [r7, #28]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3720      	adds	r7, #32
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b088      	sub	sp, #32
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801015c:	2311      	movs	r3, #17
 801015e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010166:	2300      	movs	r3, #0
 8010168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801016a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801016e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010170:	f107 0308 	add.w	r3, r7, #8
 8010174:	4619      	mov	r1, r3
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7ff ff50 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801017c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010180:	2111      	movs	r1, #17
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fa3c 	bl	8010600 <SDMMC_GetCmdResp1>
 8010188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801018a:	69fb      	ldr	r3, [r7, #28]
}
 801018c:	4618      	mov	r0, r3
 801018e:	3720      	adds	r7, #32
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b088      	sub	sp, #32
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80101a2:	2312      	movs	r3, #18
 80101a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101ac:	2300      	movs	r3, #0
 80101ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101b6:	f107 0308 	add.w	r3, r7, #8
 80101ba:	4619      	mov	r1, r3
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f7ff ff2d 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80101c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101c6:	2112      	movs	r1, #18
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 fa19 	bl	8010600 <SDMMC_GetCmdResp1>
 80101ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101d0:	69fb      	ldr	r3, [r7, #28]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3720      	adds	r7, #32
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b088      	sub	sp, #32
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
 80101e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80101e8:	2318      	movs	r3, #24
 80101ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101f2:	2300      	movs	r3, #0
 80101f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101fc:	f107 0308 	add.w	r3, r7, #8
 8010200:	4619      	mov	r1, r3
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7ff ff0a 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010208:	f241 3288 	movw	r2, #5000	@ 0x1388
 801020c:	2118      	movs	r1, #24
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 f9f6 	bl	8010600 <SDMMC_GetCmdResp1>
 8010214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010216:	69fb      	ldr	r3, [r7, #28]
}
 8010218:	4618      	mov	r0, r3
 801021a:	3720      	adds	r7, #32
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b088      	sub	sp, #32
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801022e:	2319      	movs	r3, #25
 8010230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010238:	2300      	movs	r3, #0
 801023a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801023c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010240:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010242:	f107 0308 	add.w	r3, r7, #8
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7ff fee7 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801024e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010252:	2119      	movs	r1, #25
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 f9d3 	bl	8010600 <SDMMC_GetCmdResp1>
 801025a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801025c:	69fb      	ldr	r3, [r7, #28]
}
 801025e:	4618      	mov	r0, r3
 8010260:	3720      	adds	r7, #32
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
	...

08010268 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b088      	sub	sp, #32
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010270:	2300      	movs	r3, #0
 8010272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010274:	230c      	movs	r3, #12
 8010276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801027c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801027e:	2300      	movs	r3, #0
 8010280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010286:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102a0:	f107 0308 	add.w	r3, r7, #8
 80102a4:	4619      	mov	r1, r3
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f7ff feb8 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80102ac:	4a0b      	ldr	r2, [pc, #44]	@ (80102dc <SDMMC_CmdStopTransfer+0x74>)
 80102ae:	210c      	movs	r1, #12
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 f9a5 	bl	8010600 <SDMMC_GetCmdResp1>
 80102b6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102ca:	d101      	bne.n	80102d0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80102cc:	2300      	movs	r3, #0
 80102ce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80102d0:	69fb      	ldr	r3, [r7, #28]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3720      	adds	r7, #32
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	05f5e100 	.word	0x05f5e100

080102e0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b088      	sub	sp, #32
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80102ee:	2307      	movs	r3, #7
 80102f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102f8:	2300      	movs	r3, #0
 80102fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010302:	f107 0308 	add.w	r3, r7, #8
 8010306:	4619      	mov	r1, r3
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7ff fe87 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801030e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010312:	2107      	movs	r1, #7
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 f973 	bl	8010600 <SDMMC_GetCmdResp1>
 801031a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801031c:	69fb      	ldr	r3, [r7, #28]
}
 801031e:	4618      	mov	r0, r3
 8010320:	3720      	adds	r7, #32
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b088      	sub	sp, #32
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801032e:	2300      	movs	r3, #0
 8010330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010332:	2300      	movs	r3, #0
 8010334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010336:	2300      	movs	r3, #0
 8010338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801033a:	2300      	movs	r3, #0
 801033c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801033e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010344:	f107 0308 	add.w	r3, r7, #8
 8010348:	4619      	mov	r1, r3
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f7ff fe66 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f000 fb97 	bl	8010a84 <SDMMC_GetCmdError>
 8010356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010358:	69fb      	ldr	r3, [r7, #28]
}
 801035a:	4618      	mov	r0, r3
 801035c:	3720      	adds	r7, #32
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}

08010362 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010362:	b580      	push	{r7, lr}
 8010364:	b088      	sub	sp, #32
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801036a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801036e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010370:	2308      	movs	r3, #8
 8010372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801037a:	2300      	movs	r3, #0
 801037c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801037e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010382:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010384:	f107 0308 	add.w	r3, r7, #8
 8010388:	4619      	mov	r1, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7ff fe46 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 fb29 	bl	80109e8 <SDMMC_GetCmdResp7>
 8010396:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010398:	69fb      	ldr	r3, [r7, #28]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3720      	adds	r7, #32
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b088      	sub	sp, #32
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	6078      	str	r0, [r7, #4]
 80103aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80103b0:	2337      	movs	r3, #55	@ 0x37
 80103b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103ba:	2300      	movs	r3, #0
 80103bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103c4:	f107 0308 	add.w	r3, r7, #8
 80103c8:	4619      	mov	r1, r3
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f7ff fe26 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80103d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103d4:	2137      	movs	r1, #55	@ 0x37
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f912 	bl	8010600 <SDMMC_GetCmdResp1>
 80103dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103de:	69fb      	ldr	r3, [r7, #28]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3720      	adds	r7, #32
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b088      	sub	sp, #32
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80103f6:	2329      	movs	r3, #41	@ 0x29
 80103f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010400:	2300      	movs	r3, #0
 8010402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801040a:	f107 0308 	add.w	r3, r7, #8
 801040e:	4619      	mov	r1, r3
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7ff fe03 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fa2e 	bl	8010878 <SDMMC_GetCmdResp3>
 801041c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801041e:	69fb      	ldr	r3, [r7, #28]
}
 8010420:	4618      	mov	r0, r3
 8010422:	3720      	adds	r7, #32
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010436:	2306      	movs	r3, #6
 8010438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801043a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801043e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010440:	2300      	movs	r3, #0
 8010442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801044a:	f107 0308 	add.w	r3, r7, #8
 801044e:	4619      	mov	r1, r3
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff fde3 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010456:	f241 3288 	movw	r2, #5000	@ 0x1388
 801045a:	2106      	movs	r1, #6
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f000 f8cf 	bl	8010600 <SDMMC_GetCmdResp1>
 8010462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010464:	69fb      	ldr	r3, [r7, #28]
}
 8010466:	4618      	mov	r0, r3
 8010468:	3720      	adds	r7, #32
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801046e:	b580      	push	{r7, lr}
 8010470:	b088      	sub	sp, #32
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010476:	2300      	movs	r3, #0
 8010478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801047a:	2333      	movs	r3, #51	@ 0x33
 801047c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801047e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010484:	2300      	movs	r3, #0
 8010486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010488:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801048c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801048e:	f107 0308 	add.w	r3, r7, #8
 8010492:	4619      	mov	r1, r3
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7ff fdc1 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801049a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801049e:	2133      	movs	r1, #51	@ 0x33
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 f8ad 	bl	8010600 <SDMMC_GetCmdResp1>
 80104a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104a8:	69fb      	ldr	r3, [r7, #28]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3720      	adds	r7, #32
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b088      	sub	sp, #32
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80104ba:	2300      	movs	r3, #0
 80104bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80104be:	2302      	movs	r3, #2
 80104c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80104c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80104c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104c8:	2300      	movs	r3, #0
 80104ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104d2:	f107 0308 	add.w	r3, r7, #8
 80104d6:	4619      	mov	r1, r3
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7ff fd9f 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 f980 	bl	80107e4 <SDMMC_GetCmdResp2>
 80104e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104e6:	69fb      	ldr	r3, [r7, #28]
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3720      	adds	r7, #32
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b088      	sub	sp, #32
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80104fe:	2309      	movs	r3, #9
 8010500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010502:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010508:	2300      	movs	r3, #0
 801050a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801050c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010510:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010512:	f107 0308 	add.w	r3, r7, #8
 8010516:	4619      	mov	r1, r3
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f7ff fd7f 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f960 	bl	80107e4 <SDMMC_GetCmdResp2>
 8010524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010526:	69fb      	ldr	r3, [r7, #28]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3720      	adds	r7, #32
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b088      	sub	sp, #32
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801053a:	2300      	movs	r3, #0
 801053c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801053e:	2303      	movs	r3, #3
 8010540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010542:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010548:	2300      	movs	r3, #0
 801054a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801054c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010550:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010552:	f107 0308 	add.w	r3, r7, #8
 8010556:	4619      	mov	r1, r3
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7ff fd5f 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801055e:	683a      	ldr	r2, [r7, #0]
 8010560:	2103      	movs	r1, #3
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 f9c8 	bl	80108f8 <SDMMC_GetCmdResp6>
 8010568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801056a:	69fb      	ldr	r3, [r7, #28]
}
 801056c:	4618      	mov	r0, r3
 801056e:	3720      	adds	r7, #32
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b088      	sub	sp, #32
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010582:	230d      	movs	r3, #13
 8010584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801058a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801058c:	2300      	movs	r3, #0
 801058e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010594:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010596:	f107 0308 	add.w	r3, r7, #8
 801059a:	4619      	mov	r1, r3
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f7ff fd3d 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80105a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105a6:	210d      	movs	r1, #13
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 f829 	bl	8010600 <SDMMC_GetCmdResp1>
 80105ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105b0:	69fb      	ldr	r3, [r7, #28]
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3720      	adds	r7, #32
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b088      	sub	sp, #32
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80105c2:	2300      	movs	r3, #0
 80105c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80105c6:	230d      	movs	r3, #13
 80105c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105d0:	2300      	movs	r3, #0
 80105d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105da:	f107 0308 	add.w	r3, r7, #8
 80105de:	4619      	mov	r1, r3
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff fd1b 	bl	801001c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80105e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105ea:	210d      	movs	r1, #13
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f807 	bl	8010600 <SDMMC_GetCmdResp1>
 80105f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105f4:	69fb      	ldr	r3, [r7, #28]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3720      	adds	r7, #32
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
	...

08010600 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b088      	sub	sp, #32
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	460b      	mov	r3, r1
 801060a:	607a      	str	r2, [r7, #4]
 801060c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801060e:	4b70      	ldr	r3, [pc, #448]	@ (80107d0 <SDMMC_GetCmdResp1+0x1d0>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	4a70      	ldr	r2, [pc, #448]	@ (80107d4 <SDMMC_GetCmdResp1+0x1d4>)
 8010614:	fba2 2303 	umull	r2, r3, r2, r3
 8010618:	0a5a      	lsrs	r2, r3, #9
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	fb02 f303 	mul.w	r3, r2, r3
 8010620:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	1e5a      	subs	r2, r3, #1
 8010626:	61fa      	str	r2, [r7, #28]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d102      	bne.n	8010632 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801062c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010630:	e0c9      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010636:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010638:	69ba      	ldr	r2, [r7, #24]
 801063a:	4b67      	ldr	r3, [pc, #412]	@ (80107d8 <SDMMC_GetCmdResp1+0x1d8>)
 801063c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801063e:	2b00      	cmp	r3, #0
 8010640:	d0ef      	beq.n	8010622 <SDMMC_GetCmdResp1+0x22>
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1ea      	bne.n	8010622 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010650:	f003 0304 	and.w	r3, r3, #4
 8010654:	2b00      	cmp	r3, #0
 8010656:	d004      	beq.n	8010662 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2204      	movs	r2, #4
 801065c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801065e:	2304      	movs	r3, #4
 8010660:	e0b1      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010666:	f003 0301 	and.w	r3, r3, #1
 801066a:	2b00      	cmp	r3, #0
 801066c:	d004      	beq.n	8010678 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2201      	movs	r2, #1
 8010672:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010674:	2301      	movs	r3, #1
 8010676:	e0a6      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	4a58      	ldr	r2, [pc, #352]	@ (80107dc <SDMMC_GetCmdResp1+0x1dc>)
 801067c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f7ff fcf6 	bl	8010070 <SDMMC_GetCommandResponse>
 8010684:	4603      	mov	r3, r0
 8010686:	461a      	mov	r2, r3
 8010688:	7afb      	ldrb	r3, [r7, #11]
 801068a:	4293      	cmp	r3, r2
 801068c:	d001      	beq.n	8010692 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801068e:	2301      	movs	r3, #1
 8010690:	e099      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010692:	2100      	movs	r1, #0
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f7ff fcf8 	bl	801008a <SDMMC_GetResponse>
 801069a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	4b50      	ldr	r3, [pc, #320]	@ (80107e0 <SDMMC_GetCmdResp1+0x1e0>)
 80106a0:	4013      	ands	r3, r2
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d101      	bne.n	80106aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80106a6:	2300      	movs	r3, #0
 80106a8:	e08d      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	da02      	bge.n	80106b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80106b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80106b4:	e087      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80106c0:	2340      	movs	r3, #64	@ 0x40
 80106c2:	e080      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d001      	beq.n	80106d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80106ce:	2380      	movs	r3, #128	@ 0x80
 80106d0:	e079      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d002      	beq.n	80106e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80106dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80106e0:	e071      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d002      	beq.n	80106f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80106ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106f0:	e069      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80106fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010700:	e061      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801070c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010710:	e059      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010718:	2b00      	cmp	r3, #0
 801071a:	d002      	beq.n	8010722 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801071c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010720:	e051      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801072c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010730:	e049      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010738:	2b00      	cmp	r3, #0
 801073a:	d002      	beq.n	8010742 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801073c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010740:	e041      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010748:	2b00      	cmp	r3, #0
 801074a:	d002      	beq.n	8010752 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801074c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010750:	e039      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801075c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010760:	e031      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010768:	2b00      	cmp	r3, #0
 801076a:	d002      	beq.n	8010772 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801076c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010770:	e029      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801077c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010780:	e021      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801078c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010790:	e019      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010798:	2b00      	cmp	r3, #0
 801079a:	d002      	beq.n	80107a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801079c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80107a0:	e011      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d002      	beq.n	80107b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80107ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80107b0:	e009      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	f003 0308 	and.w	r3, r3, #8
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d002      	beq.n	80107c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80107bc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80107c0:	e001      	b.n	80107c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3720      	adds	r7, #32
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	2400000c 	.word	0x2400000c
 80107d4:	10624dd3 	.word	0x10624dd3
 80107d8:	00200045 	.word	0x00200045
 80107dc:	002000c5 	.word	0x002000c5
 80107e0:	fdffe008 	.word	0xfdffe008

080107e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b085      	sub	sp, #20
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80107ec:	4b1f      	ldr	r3, [pc, #124]	@ (801086c <SDMMC_GetCmdResp2+0x88>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4a1f      	ldr	r2, [pc, #124]	@ (8010870 <SDMMC_GetCmdResp2+0x8c>)
 80107f2:	fba2 2303 	umull	r2, r3, r2, r3
 80107f6:	0a5b      	lsrs	r3, r3, #9
 80107f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107fc:	fb02 f303 	mul.w	r3, r2, r3
 8010800:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	1e5a      	subs	r2, r3, #1
 8010806:	60fa      	str	r2, [r7, #12]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801080c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010810:	e026      	b.n	8010860 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010816:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801081e:	2b00      	cmp	r3, #0
 8010820:	d0ef      	beq.n	8010802 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1ea      	bne.n	8010802 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010830:	f003 0304 	and.w	r3, r3, #4
 8010834:	2b00      	cmp	r3, #0
 8010836:	d004      	beq.n	8010842 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2204      	movs	r2, #4
 801083c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801083e:	2304      	movs	r3, #4
 8010840:	e00e      	b.n	8010860 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010846:	f003 0301 	and.w	r3, r3, #1
 801084a:	2b00      	cmp	r3, #0
 801084c:	d004      	beq.n	8010858 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2201      	movs	r2, #1
 8010852:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010854:	2301      	movs	r3, #1
 8010856:	e003      	b.n	8010860 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4a06      	ldr	r2, [pc, #24]	@ (8010874 <SDMMC_GetCmdResp2+0x90>)
 801085c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3714      	adds	r7, #20
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr
 801086c:	2400000c 	.word	0x2400000c
 8010870:	10624dd3 	.word	0x10624dd3
 8010874:	002000c5 	.word	0x002000c5

08010878 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010880:	4b1a      	ldr	r3, [pc, #104]	@ (80108ec <SDMMC_GetCmdResp3+0x74>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a1a      	ldr	r2, [pc, #104]	@ (80108f0 <SDMMC_GetCmdResp3+0x78>)
 8010886:	fba2 2303 	umull	r2, r3, r2, r3
 801088a:	0a5b      	lsrs	r3, r3, #9
 801088c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010890:	fb02 f303 	mul.w	r3, r2, r3
 8010894:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	1e5a      	subs	r2, r3, #1
 801089a:	60fa      	str	r2, [r7, #12]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d102      	bne.n	80108a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80108a4:	e01b      	b.n	80108de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d0ef      	beq.n	8010896 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1ea      	bne.n	8010896 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108c4:	f003 0304 	and.w	r3, r3, #4
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d004      	beq.n	80108d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2204      	movs	r2, #4
 80108d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108d2:	2304      	movs	r3, #4
 80108d4:	e003      	b.n	80108de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	4a06      	ldr	r2, [pc, #24]	@ (80108f4 <SDMMC_GetCmdResp3+0x7c>)
 80108da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80108dc:	2300      	movs	r3, #0
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3714      	adds	r7, #20
 80108e2:	46bd      	mov	sp, r7
 80108e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e8:	4770      	bx	lr
 80108ea:	bf00      	nop
 80108ec:	2400000c 	.word	0x2400000c
 80108f0:	10624dd3 	.word	0x10624dd3
 80108f4:	002000c5 	.word	0x002000c5

080108f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b088      	sub	sp, #32
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	460b      	mov	r3, r1
 8010902:	607a      	str	r2, [r7, #4]
 8010904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010906:	4b35      	ldr	r3, [pc, #212]	@ (80109dc <SDMMC_GetCmdResp6+0xe4>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4a35      	ldr	r2, [pc, #212]	@ (80109e0 <SDMMC_GetCmdResp6+0xe8>)
 801090c:	fba2 2303 	umull	r2, r3, r2, r3
 8010910:	0a5b      	lsrs	r3, r3, #9
 8010912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010916:	fb02 f303 	mul.w	r3, r2, r3
 801091a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	1e5a      	subs	r2, r3, #1
 8010920:	61fa      	str	r2, [r7, #28]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d102      	bne.n	801092c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010926:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801092a:	e052      	b.n	80109d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010930:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010938:	2b00      	cmp	r3, #0
 801093a:	d0ef      	beq.n	801091c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801093c:	69bb      	ldr	r3, [r7, #24]
 801093e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010942:	2b00      	cmp	r3, #0
 8010944:	d1ea      	bne.n	801091c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801094a:	f003 0304 	and.w	r3, r3, #4
 801094e:	2b00      	cmp	r3, #0
 8010950:	d004      	beq.n	801095c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2204      	movs	r2, #4
 8010956:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010958:	2304      	movs	r3, #4
 801095a:	e03a      	b.n	80109d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010960:	f003 0301 	and.w	r3, r3, #1
 8010964:	2b00      	cmp	r3, #0
 8010966:	d004      	beq.n	8010972 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	2201      	movs	r2, #1
 801096c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801096e:	2301      	movs	r3, #1
 8010970:	e02f      	b.n	80109d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f7ff fb7c 	bl	8010070 <SDMMC_GetCommandResponse>
 8010978:	4603      	mov	r3, r0
 801097a:	461a      	mov	r2, r3
 801097c:	7afb      	ldrb	r3, [r7, #11]
 801097e:	4293      	cmp	r3, r2
 8010980:	d001      	beq.n	8010986 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010982:	2301      	movs	r3, #1
 8010984:	e025      	b.n	80109d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	4a16      	ldr	r2, [pc, #88]	@ (80109e4 <SDMMC_GetCmdResp6+0xec>)
 801098a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801098c:	2100      	movs	r1, #0
 801098e:	68f8      	ldr	r0, [r7, #12]
 8010990:	f7ff fb7b 	bl	801008a <SDMMC_GetResponse>
 8010994:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801099c:	2b00      	cmp	r3, #0
 801099e:	d106      	bne.n	80109ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	0c1b      	lsrs	r3, r3, #16
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80109aa:	2300      	movs	r3, #0
 80109ac:	e011      	b.n	80109d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d002      	beq.n	80109be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80109bc:	e009      	b.n	80109d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d002      	beq.n	80109ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80109c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109cc:	e001      	b.n	80109d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3720      	adds	r7, #32
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	2400000c 	.word	0x2400000c
 80109e0:	10624dd3 	.word	0x10624dd3
 80109e4:	002000c5 	.word	0x002000c5

080109e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109f0:	4b22      	ldr	r3, [pc, #136]	@ (8010a7c <SDMMC_GetCmdResp7+0x94>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4a22      	ldr	r2, [pc, #136]	@ (8010a80 <SDMMC_GetCmdResp7+0x98>)
 80109f6:	fba2 2303 	umull	r2, r3, r2, r3
 80109fa:	0a5b      	lsrs	r3, r3, #9
 80109fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a00:	fb02 f303 	mul.w	r3, r2, r3
 8010a04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	1e5a      	subs	r2, r3, #1
 8010a0a:	60fa      	str	r2, [r7, #12]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d102      	bne.n	8010a16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a14:	e02c      	b.n	8010a70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a1a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d0ef      	beq.n	8010a06 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d1ea      	bne.n	8010a06 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a34:	f003 0304 	and.w	r3, r3, #4
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d004      	beq.n	8010a46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2204      	movs	r2, #4
 8010a40:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a42:	2304      	movs	r3, #4
 8010a44:	e014      	b.n	8010a70 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a4a:	f003 0301 	and.w	r3, r3, #1
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d004      	beq.n	8010a5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e009      	b.n	8010a70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d002      	beq.n	8010a6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2240      	movs	r2, #64	@ 0x40
 8010a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a6e:	2300      	movs	r3, #0

}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3714      	adds	r7, #20
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr
 8010a7c:	2400000c 	.word	0x2400000c
 8010a80:	10624dd3 	.word	0x10624dd3

08010a84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a8c:	4b11      	ldr	r3, [pc, #68]	@ (8010ad4 <SDMMC_GetCmdError+0x50>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4a11      	ldr	r2, [pc, #68]	@ (8010ad8 <SDMMC_GetCmdError+0x54>)
 8010a92:	fba2 2303 	umull	r2, r3, r2, r3
 8010a96:	0a5b      	lsrs	r3, r3, #9
 8010a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a9c:	fb02 f303 	mul.w	r3, r2, r3
 8010aa0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	1e5a      	subs	r2, r3, #1
 8010aa6:	60fa      	str	r2, [r7, #12]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d102      	bne.n	8010ab2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010aac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ab0:	e009      	b.n	8010ac6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d0f1      	beq.n	8010aa2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4a06      	ldr	r2, [pc, #24]	@ (8010adc <SDMMC_GetCmdError+0x58>)
 8010ac2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010ac4:	2300      	movs	r3, #0
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3714      	adds	r7, #20
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr
 8010ad2:	bf00      	nop
 8010ad4:	2400000c 	.word	0x2400000c
 8010ad8:	10624dd3 	.word	0x10624dd3
 8010adc:	002000c5 	.word	0x002000c5

08010ae0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010ae4:	4904      	ldr	r1, [pc, #16]	@ (8010af8 <MX_FATFS_Init+0x18>)
 8010ae6:	4805      	ldr	r0, [pc, #20]	@ (8010afc <MX_FATFS_Init+0x1c>)
 8010ae8:	f001 f908 	bl	8011cfc <FATFS_LinkDriver>
 8010aec:	4603      	mov	r3, r0
 8010aee:	461a      	mov	r2, r3
 8010af0:	4b03      	ldr	r3, [pc, #12]	@ (8010b00 <MX_FATFS_Init+0x20>)
 8010af2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010af4:	bf00      	nop
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	24001824 	.word	0x24001824
 8010afc:	08012ad0 	.word	0x08012ad0
 8010b00:	24001820 	.word	0x24001820

08010b04 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010b0e:	f000 f885 	bl	8010c1c <BSP_SD_IsDetected>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d001      	beq.n	8010b1c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010b18:	2302      	movs	r3, #2
 8010b1a:	e012      	b.n	8010b42 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010b1c:	480b      	ldr	r0, [pc, #44]	@ (8010b4c <BSP_SD_Init+0x48>)
 8010b1e:	f7fb f95d 	bl	800bddc <HAL_SD_Init>
 8010b22:	4603      	mov	r3, r0
 8010b24:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010b26:	79fb      	ldrb	r3, [r7, #7]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d109      	bne.n	8010b40 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010b2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010b30:	4806      	ldr	r0, [pc, #24]	@ (8010b4c <BSP_SD_Init+0x48>)
 8010b32:	f7fc f813 	bl	800cb5c <HAL_SD_ConfigWideBusOperation>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d001      	beq.n	8010b40 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010b40:	79fb      	ldrb	r3, [r7, #7]
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	2400032c 	.word	0x2400032c

08010b50 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b086      	sub	sp, #24
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	60f8      	str	r0, [r7, #12]
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	68ba      	ldr	r2, [r7, #8]
 8010b64:	68f9      	ldr	r1, [r7, #12]
 8010b66:	4806      	ldr	r0, [pc, #24]	@ (8010b80 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010b68:	f7fb fa58 	bl	800c01c <HAL_SD_ReadBlocks_DMA>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d001      	beq.n	8010b76 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3718      	adds	r7, #24
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	2400032c 	.word	0x2400032c

08010b84 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b90:	2300      	movs	r3, #0
 8010b92:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	68ba      	ldr	r2, [r7, #8]
 8010b98:	68f9      	ldr	r1, [r7, #12]
 8010b9a:	4806      	ldr	r0, [pc, #24]	@ (8010bb4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010b9c:	f7fb fae6 	bl	800c16c <HAL_SD_WriteBlocks_DMA>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d001      	beq.n	8010baa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3718      	adds	r7, #24
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	2400032c 	.word	0x2400032c

08010bb8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010bbc:	4805      	ldr	r0, [pc, #20]	@ (8010bd4 <BSP_SD_GetCardState+0x1c>)
 8010bbe:	f7fc f8df 	bl	800cd80 <HAL_SD_GetCardState>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2b04      	cmp	r3, #4
 8010bc6:	bf14      	ite	ne
 8010bc8:	2301      	movne	r3, #1
 8010bca:	2300      	moveq	r3, #0
 8010bcc:	b2db      	uxtb	r3, r3
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	2400032c 	.word	0x2400032c

08010bd8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010be0:	6879      	ldr	r1, [r7, #4]
 8010be2:	4803      	ldr	r0, [pc, #12]	@ (8010bf0 <BSP_SD_GetCardInfo+0x18>)
 8010be4:	f7fb ff8e 	bl	800cb04 <HAL_SD_GetCardInfo>
}
 8010be8:	bf00      	nop
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	2400032c 	.word	0x2400032c

08010bf4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010bfc:	f000 f9a0 	bl	8010f40 <BSP_SD_WriteCpltCallback>
}
 8010c00:	bf00      	nop
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010c10:	f000 f9a2 	bl	8010f58 <BSP_SD_ReadCpltCallback>
}
 8010c14:	bf00      	nop
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010c22:	2301      	movs	r3, #1
 8010c24:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010c26:	f000 f80b 	bl	8010c40 <BSP_PlatformIsDetected>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d101      	bne.n	8010c34 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010c30:	2300      	movs	r3, #0
 8010c32:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	b2db      	uxtb	r3, r3
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010c46:	2301      	movs	r3, #1
 8010c48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010c4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010c4e:	4806      	ldr	r0, [pc, #24]	@ (8010c68 <BSP_PlatformIsDetected+0x28>)
 8010c50:	f7f7 fd0c 	bl	800866c <HAL_GPIO_ReadPin>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d001      	beq.n	8010c5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	58021400 	.word	0x58021400

08010c6c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010c74:	f7f1 fe94 	bl	80029a0 <HAL_GetTick>
 8010c78:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010c7a:	e006      	b.n	8010c8a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c7c:	f7ff ff9c 	bl	8010bb8 <BSP_SD_GetCardState>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d101      	bne.n	8010c8a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010c86:	2300      	movs	r3, #0
 8010c88:	e009      	b.n	8010c9e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010c8a:	f7f1 fe89 	bl	80029a0 <HAL_GetTick>
 8010c8e:	4602      	mov	r2, r0
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d8f0      	bhi.n	8010c7c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
	...

08010ca8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	4603      	mov	r3, r0
 8010cb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ce0 <SD_CheckStatus+0x38>)
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010cb8:	f7ff ff7e 	bl	8010bb8 <BSP_SD_GetCardState>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d107      	bne.n	8010cd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010cc2:	4b07      	ldr	r3, [pc, #28]	@ (8010ce0 <SD_CheckStatus+0x38>)
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	f023 0301 	bic.w	r3, r3, #1
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	4b04      	ldr	r3, [pc, #16]	@ (8010ce0 <SD_CheckStatus+0x38>)
 8010cd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010cd2:	4b03      	ldr	r3, [pc, #12]	@ (8010ce0 <SD_CheckStatus+0x38>)
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	b2db      	uxtb	r3, r3
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	24000019 	.word	0x24000019

08010ce4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010cee:	f7ff ff09 	bl	8010b04 <BSP_SD_Init>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d107      	bne.n	8010d08 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010cf8:	79fb      	ldrb	r3, [r7, #7]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7ff ffd4 	bl	8010ca8 <SD_CheckStatus>
 8010d00:	4603      	mov	r3, r0
 8010d02:	461a      	mov	r2, r3
 8010d04:	4b04      	ldr	r3, [pc, #16]	@ (8010d18 <SD_initialize+0x34>)
 8010d06:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010d08:	4b03      	ldr	r3, [pc, #12]	@ (8010d18 <SD_initialize+0x34>)
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	b2db      	uxtb	r3, r3
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	24000019 	.word	0x24000019

08010d1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	4603      	mov	r3, r0
 8010d24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010d26:	79fb      	ldrb	r3, [r7, #7]
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7ff ffbd 	bl	8010ca8 <SD_CheckStatus>
 8010d2e:	4603      	mov	r3, r0
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b086      	sub	sp, #24
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60b9      	str	r1, [r7, #8]
 8010d40:	607a      	str	r2, [r7, #4]
 8010d42:	603b      	str	r3, [r7, #0]
 8010d44:	4603      	mov	r3, r0
 8010d46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d4c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010d50:	f7ff ff8c 	bl	8010c6c <SD_CheckStatusWithTimeout>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	da01      	bge.n	8010d5e <SD_read+0x26>
  {
    return res;
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	e03b      	b.n	8010dd6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010d5e:	683a      	ldr	r2, [r7, #0]
 8010d60:	6879      	ldr	r1, [r7, #4]
 8010d62:	68b8      	ldr	r0, [r7, #8]
 8010d64:	f7ff fef4 	bl	8010b50 <BSP_SD_ReadBlocks_DMA>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d132      	bne.n	8010dd4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8010de0 <SD_read+0xa8>)
 8010d70:	2200      	movs	r2, #0
 8010d72:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010d74:	f7f1 fe14 	bl	80029a0 <HAL_GetTick>
 8010d78:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d7a:	bf00      	nop
 8010d7c:	4b18      	ldr	r3, [pc, #96]	@ (8010de0 <SD_read+0xa8>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d108      	bne.n	8010d96 <SD_read+0x5e>
 8010d84:	f7f1 fe0c 	bl	80029a0 <HAL_GetTick>
 8010d88:	4602      	mov	r2, r0
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d9f2      	bls.n	8010d7c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010d96:	4b12      	ldr	r3, [pc, #72]	@ (8010de0 <SD_read+0xa8>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d102      	bne.n	8010da4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010d9e:	2301      	movs	r3, #1
 8010da0:	75fb      	strb	r3, [r7, #23]
 8010da2:	e017      	b.n	8010dd4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010da4:	4b0e      	ldr	r3, [pc, #56]	@ (8010de0 <SD_read+0xa8>)
 8010da6:	2200      	movs	r2, #0
 8010da8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010daa:	f7f1 fdf9 	bl	80029a0 <HAL_GetTick>
 8010dae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010db0:	e007      	b.n	8010dc2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010db2:	f7ff ff01 	bl	8010bb8 <BSP_SD_GetCardState>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <SD_read+0x8a>
          {
            res = RES_OK;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010dc0:	e008      	b.n	8010dd4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010dc2:	f7f1 fded 	bl	80029a0 <HAL_GetTick>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	1ad3      	subs	r3, r2, r3
 8010dcc:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d9ee      	bls.n	8010db2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3718      	adds	r7, #24
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	24001830 	.word	0x24001830

08010de4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b086      	sub	sp, #24
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60b9      	str	r1, [r7, #8]
 8010dec:	607a      	str	r2, [r7, #4]
 8010dee:	603b      	str	r3, [r7, #0]
 8010df0:	4603      	mov	r3, r0
 8010df2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010df4:	2301      	movs	r3, #1
 8010df6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010df8:	4b24      	ldr	r3, [pc, #144]	@ (8010e8c <SD_write+0xa8>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010dfe:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010e02:	f7ff ff33 	bl	8010c6c <SD_CheckStatusWithTimeout>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	da01      	bge.n	8010e10 <SD_write+0x2c>
  {
    return res;
 8010e0c:	7dfb      	ldrb	r3, [r7, #23]
 8010e0e:	e038      	b.n	8010e82 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010e10:	683a      	ldr	r2, [r7, #0]
 8010e12:	6879      	ldr	r1, [r7, #4]
 8010e14:	68b8      	ldr	r0, [r7, #8]
 8010e16:	f7ff feb5 	bl	8010b84 <BSP_SD_WriteBlocks_DMA>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d12f      	bne.n	8010e80 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010e20:	f7f1 fdbe 	bl	80029a0 <HAL_GetTick>
 8010e24:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010e26:	bf00      	nop
 8010e28:	4b18      	ldr	r3, [pc, #96]	@ (8010e8c <SD_write+0xa8>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d108      	bne.n	8010e42 <SD_write+0x5e>
 8010e30:	f7f1 fdb6 	bl	80029a0 <HAL_GetTick>
 8010e34:	4602      	mov	r2, r0
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d9f2      	bls.n	8010e28 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010e42:	4b12      	ldr	r3, [pc, #72]	@ (8010e8c <SD_write+0xa8>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d102      	bne.n	8010e50 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	75fb      	strb	r3, [r7, #23]
 8010e4e:	e017      	b.n	8010e80 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010e50:	4b0e      	ldr	r3, [pc, #56]	@ (8010e8c <SD_write+0xa8>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010e56:	f7f1 fda3 	bl	80029a0 <HAL_GetTick>
 8010e5a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e5c:	e007      	b.n	8010e6e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e5e:	f7ff feab 	bl	8010bb8 <BSP_SD_GetCardState>
 8010e62:	4603      	mov	r3, r0
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d102      	bne.n	8010e6e <SD_write+0x8a>
          {
            res = RES_OK;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	75fb      	strb	r3, [r7, #23]
            break;
 8010e6c:	e008      	b.n	8010e80 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e6e:	f7f1 fd97 	bl	80029a0 <HAL_GetTick>
 8010e72:	4602      	mov	r2, r0
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d9ee      	bls.n	8010e5e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3718      	adds	r7, #24
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	2400182c 	.word	0x2400182c

08010e90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b08c      	sub	sp, #48	@ 0x30
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	4603      	mov	r3, r0
 8010e98:	603a      	str	r2, [r7, #0]
 8010e9a:	71fb      	strb	r3, [r7, #7]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010ea6:	4b25      	ldr	r3, [pc, #148]	@ (8010f3c <SD_ioctl+0xac>)
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	f003 0301 	and.w	r3, r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d001      	beq.n	8010eb8 <SD_ioctl+0x28>
 8010eb4:	2303      	movs	r3, #3
 8010eb6:	e03c      	b.n	8010f32 <SD_ioctl+0xa2>

  switch (cmd)
 8010eb8:	79bb      	ldrb	r3, [r7, #6]
 8010eba:	2b03      	cmp	r3, #3
 8010ebc:	d834      	bhi.n	8010f28 <SD_ioctl+0x98>
 8010ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8010ec4 <SD_ioctl+0x34>)
 8010ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec4:	08010ed5 	.word	0x08010ed5
 8010ec8:	08010edd 	.word	0x08010edd
 8010ecc:	08010ef5 	.word	0x08010ef5
 8010ed0:	08010f0f 	.word	0x08010f0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010eda:	e028      	b.n	8010f2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010edc:	f107 0308 	add.w	r3, r7, #8
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fe79 	bl	8010bd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010ee6:	6a3a      	ldr	r2, [r7, #32]
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010eec:	2300      	movs	r3, #0
 8010eee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ef2:	e01c      	b.n	8010f2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ef4:	f107 0308 	add.w	r3, r7, #8
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7ff fe6d 	bl	8010bd8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010f06:	2300      	movs	r3, #0
 8010f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010f0c:	e00f      	b.n	8010f2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f0e:	f107 0308 	add.w	r3, r7, #8
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7ff fe60 	bl	8010bd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f1a:	0a5a      	lsrs	r2, r3, #9
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010f20:	2300      	movs	r3, #0
 8010f22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010f26:	e002      	b.n	8010f2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010f28:	2304      	movs	r3, #4
 8010f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3730      	adds	r7, #48	@ 0x30
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	24000019 	.word	0x24000019

08010f40 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010f40:	b480      	push	{r7}
 8010f42:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010f44:	4b03      	ldr	r3, [pc, #12]	@ (8010f54 <BSP_SD_WriteCpltCallback+0x14>)
 8010f46:	2201      	movs	r2, #1
 8010f48:	601a      	str	r2, [r3, #0]
}
 8010f4a:	bf00      	nop
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	2400182c 	.word	0x2400182c

08010f58 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010f5c:	4b03      	ldr	r3, [pc, #12]	@ (8010f6c <BSP_SD_ReadCpltCallback+0x14>)
 8010f5e:	2201      	movs	r2, #1
 8010f60:	601a      	str	r2, [r3, #0]
}
 8010f62:	bf00      	nop
 8010f64:	46bd      	mov	sp, r7
 8010f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6a:	4770      	bx	lr
 8010f6c:	24001830 	.word	0x24001830

08010f70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	4603      	mov	r3, r0
 8010f78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010f7a:	79fb      	ldrb	r3, [r7, #7]
 8010f7c:	4a08      	ldr	r2, [pc, #32]	@ (8010fa0 <disk_status+0x30>)
 8010f7e:	009b      	lsls	r3, r3, #2
 8010f80:	4413      	add	r3, r2
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	79fa      	ldrb	r2, [r7, #7]
 8010f88:	4905      	ldr	r1, [pc, #20]	@ (8010fa0 <disk_status+0x30>)
 8010f8a:	440a      	add	r2, r1
 8010f8c:	7a12      	ldrb	r2, [r2, #8]
 8010f8e:	4610      	mov	r0, r2
 8010f90:	4798      	blx	r3
 8010f92:	4603      	mov	r3, r0
 8010f94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3710      	adds	r7, #16
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	24001a5c 	.word	0x24001a5c

08010fa4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010fb2:	79fb      	ldrb	r3, [r7, #7]
 8010fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8010ff0 <disk_initialize+0x4c>)
 8010fb6:	5cd3      	ldrb	r3, [r2, r3]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d114      	bne.n	8010fe6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010fbc:	79fb      	ldrb	r3, [r7, #7]
 8010fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8010ff0 <disk_initialize+0x4c>)
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	79fa      	ldrb	r2, [r7, #7]
 8010fca:	4909      	ldr	r1, [pc, #36]	@ (8010ff0 <disk_initialize+0x4c>)
 8010fcc:	440a      	add	r2, r1
 8010fce:	7a12      	ldrb	r2, [r2, #8]
 8010fd0:	4610      	mov	r0, r2
 8010fd2:	4798      	blx	r3
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010fd8:	7bfb      	ldrb	r3, [r7, #15]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d103      	bne.n	8010fe6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010fde:	79fb      	ldrb	r3, [r7, #7]
 8010fe0:	4a03      	ldr	r2, [pc, #12]	@ (8010ff0 <disk_initialize+0x4c>)
 8010fe2:	2101      	movs	r1, #1
 8010fe4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3710      	adds	r7, #16
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	24001a5c 	.word	0x24001a5c

08010ff4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010ff4:	b590      	push	{r4, r7, lr}
 8010ff6:	b087      	sub	sp, #28
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60b9      	str	r1, [r7, #8]
 8010ffc:	607a      	str	r2, [r7, #4]
 8010ffe:	603b      	str	r3, [r7, #0]
 8011000:	4603      	mov	r3, r0
 8011002:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011004:	7bfb      	ldrb	r3, [r7, #15]
 8011006:	4a0a      	ldr	r2, [pc, #40]	@ (8011030 <disk_read+0x3c>)
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	4413      	add	r3, r2
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	689c      	ldr	r4, [r3, #8]
 8011010:	7bfb      	ldrb	r3, [r7, #15]
 8011012:	4a07      	ldr	r2, [pc, #28]	@ (8011030 <disk_read+0x3c>)
 8011014:	4413      	add	r3, r2
 8011016:	7a18      	ldrb	r0, [r3, #8]
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	68b9      	ldr	r1, [r7, #8]
 801101e:	47a0      	blx	r4
 8011020:	4603      	mov	r3, r0
 8011022:	75fb      	strb	r3, [r7, #23]
  return res;
 8011024:	7dfb      	ldrb	r3, [r7, #23]
}
 8011026:	4618      	mov	r0, r3
 8011028:	371c      	adds	r7, #28
 801102a:	46bd      	mov	sp, r7
 801102c:	bd90      	pop	{r4, r7, pc}
 801102e:	bf00      	nop
 8011030:	24001a5c 	.word	0x24001a5c

08011034 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011034:	b590      	push	{r4, r7, lr}
 8011036:	b087      	sub	sp, #28
 8011038:	af00      	add	r7, sp, #0
 801103a:	60b9      	str	r1, [r7, #8]
 801103c:	607a      	str	r2, [r7, #4]
 801103e:	603b      	str	r3, [r7, #0]
 8011040:	4603      	mov	r3, r0
 8011042:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011044:	7bfb      	ldrb	r3, [r7, #15]
 8011046:	4a0a      	ldr	r2, [pc, #40]	@ (8011070 <disk_write+0x3c>)
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	4413      	add	r3, r2
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	68dc      	ldr	r4, [r3, #12]
 8011050:	7bfb      	ldrb	r3, [r7, #15]
 8011052:	4a07      	ldr	r2, [pc, #28]	@ (8011070 <disk_write+0x3c>)
 8011054:	4413      	add	r3, r2
 8011056:	7a18      	ldrb	r0, [r3, #8]
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	68b9      	ldr	r1, [r7, #8]
 801105e:	47a0      	blx	r4
 8011060:	4603      	mov	r3, r0
 8011062:	75fb      	strb	r3, [r7, #23]
  return res;
 8011064:	7dfb      	ldrb	r3, [r7, #23]
}
 8011066:	4618      	mov	r0, r3
 8011068:	371c      	adds	r7, #28
 801106a:	46bd      	mov	sp, r7
 801106c:	bd90      	pop	{r4, r7, pc}
 801106e:	bf00      	nop
 8011070:	24001a5c 	.word	0x24001a5c

08011074 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	4603      	mov	r3, r0
 801107c:	603a      	str	r2, [r7, #0]
 801107e:	71fb      	strb	r3, [r7, #7]
 8011080:	460b      	mov	r3, r1
 8011082:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011084:	79fb      	ldrb	r3, [r7, #7]
 8011086:	4a09      	ldr	r2, [pc, #36]	@ (80110ac <disk_ioctl+0x38>)
 8011088:	009b      	lsls	r3, r3, #2
 801108a:	4413      	add	r3, r2
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	691b      	ldr	r3, [r3, #16]
 8011090:	79fa      	ldrb	r2, [r7, #7]
 8011092:	4906      	ldr	r1, [pc, #24]	@ (80110ac <disk_ioctl+0x38>)
 8011094:	440a      	add	r2, r1
 8011096:	7a10      	ldrb	r0, [r2, #8]
 8011098:	79b9      	ldrb	r1, [r7, #6]
 801109a:	683a      	ldr	r2, [r7, #0]
 801109c:	4798      	blx	r3
 801109e:	4603      	mov	r3, r0
 80110a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80110a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3710      	adds	r7, #16
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	24001a5c 	.word	0x24001a5c

080110b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80110b0:	b480      	push	{r7}
 80110b2:	b085      	sub	sp, #20
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	3301      	adds	r3, #1
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80110c0:	89fb      	ldrh	r3, [r7, #14]
 80110c2:	021b      	lsls	r3, r3, #8
 80110c4:	b21a      	sxth	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	b21b      	sxth	r3, r3
 80110cc:	4313      	orrs	r3, r2
 80110ce:	b21b      	sxth	r3, r3
 80110d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80110d2:	89fb      	ldrh	r3, [r7, #14]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3714      	adds	r7, #20
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr

080110e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80110e0:	b480      	push	{r7}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	3303      	adds	r3, #3
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	021b      	lsls	r3, r3, #8
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	3202      	adds	r2, #2
 80110f8:	7812      	ldrb	r2, [r2, #0]
 80110fa:	4313      	orrs	r3, r2
 80110fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	021b      	lsls	r3, r3, #8
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	3201      	adds	r2, #1
 8011106:	7812      	ldrb	r2, [r2, #0]
 8011108:	4313      	orrs	r3, r2
 801110a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	021b      	lsls	r3, r3, #8
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	7812      	ldrb	r2, [r2, #0]
 8011114:	4313      	orrs	r3, r2
 8011116:	60fb      	str	r3, [r7, #12]
	return rv;
 8011118:	68fb      	ldr	r3, [r7, #12]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
	...

08011128 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011130:	2300      	movs	r3, #0
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	e010      	b.n	8011158 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011136:	4a0d      	ldr	r2, [pc, #52]	@ (801116c <clear_lock+0x44>)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	011b      	lsls	r3, r3, #4
 801113c:	4413      	add	r3, r2
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d105      	bne.n	8011152 <clear_lock+0x2a>
 8011146:	4a09      	ldr	r2, [pc, #36]	@ (801116c <clear_lock+0x44>)
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	011b      	lsls	r3, r3, #4
 801114c:	4413      	add	r3, r2
 801114e:	2200      	movs	r2, #0
 8011150:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3301      	adds	r3, #1
 8011156:	60fb      	str	r3, [r7, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d9eb      	bls.n	8011136 <clear_lock+0xe>
	}
}
 801115e:	bf00      	nop
 8011160:	bf00      	nop
 8011162:	3714      	adds	r7, #20
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr
 801116c:	2400183c 	.word	0x2400183c

08011170 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b086      	sub	sp, #24
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011178:	2300      	movs	r3, #0
 801117a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	78db      	ldrb	r3, [r3, #3]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d034      	beq.n	80111ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011188:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	7858      	ldrb	r0, [r3, #1]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011194:	2301      	movs	r3, #1
 8011196:	697a      	ldr	r2, [r7, #20]
 8011198:	f7ff ff4c 	bl	8011034 <disk_write>
 801119c:	4603      	mov	r3, r0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d002      	beq.n	80111a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80111a2:	2301      	movs	r3, #1
 80111a4:	73fb      	strb	r3, [r7, #15]
 80111a6:	e022      	b.n	80111ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111b2:	697a      	ldr	r2, [r7, #20]
 80111b4:	1ad2      	subs	r2, r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a1b      	ldr	r3, [r3, #32]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d217      	bcs.n	80111ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	789b      	ldrb	r3, [r3, #2]
 80111c2:	613b      	str	r3, [r7, #16]
 80111c4:	e010      	b.n	80111e8 <sync_window+0x78>
					wsect += fs->fsize;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6a1b      	ldr	r3, [r3, #32]
 80111ca:	697a      	ldr	r2, [r7, #20]
 80111cc:	4413      	add	r3, r2
 80111ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	7858      	ldrb	r0, [r3, #1]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80111da:	2301      	movs	r3, #1
 80111dc:	697a      	ldr	r2, [r7, #20]
 80111de:	f7ff ff29 	bl	8011034 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	3b01      	subs	r3, #1
 80111e6:	613b      	str	r3, [r7, #16]
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d8eb      	bhi.n	80111c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80111ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3718      	adds	r7, #24
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	429a      	cmp	r2, r3
 801120e:	d01b      	beq.n	8011248 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7ff ffad 	bl	8011170 <sync_window>
 8011216:	4603      	mov	r3, r0
 8011218:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801121a:	7bfb      	ldrb	r3, [r7, #15]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d113      	bne.n	8011248 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7858      	ldrb	r0, [r3, #1]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801122a:	2301      	movs	r3, #1
 801122c:	683a      	ldr	r2, [r7, #0]
 801122e:	f7ff fee1 	bl	8010ff4 <disk_read>
 8011232:	4603      	mov	r3, r0
 8011234:	2b00      	cmp	r3, #0
 8011236:	d004      	beq.n	8011242 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011238:	f04f 33ff 	mov.w	r3, #4294967295
 801123c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801123e:	2301      	movs	r3, #1
 8011240:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	683a      	ldr	r2, [r7, #0]
 8011246:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8011248:	7bfb      	ldrb	r3, [r7, #15]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3710      	adds	r7, #16
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}

08011252 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011252:	b580      	push	{r7, lr}
 8011254:	b086      	sub	sp, #24
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
 801125a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	2b01      	cmp	r3, #1
 8011266:	d904      	bls.n	8011272 <get_fat+0x20>
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	69db      	ldr	r3, [r3, #28]
 801126c:	683a      	ldr	r2, [r7, #0]
 801126e:	429a      	cmp	r2, r3
 8011270:	d302      	bcc.n	8011278 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011272:	2301      	movs	r3, #1
 8011274:	617b      	str	r3, [r7, #20]
 8011276:	e0ba      	b.n	80113ee <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011278:	f04f 33ff 	mov.w	r3, #4294967295
 801127c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	2b03      	cmp	r3, #3
 8011284:	f000 8082 	beq.w	801138c <get_fat+0x13a>
 8011288:	2b03      	cmp	r3, #3
 801128a:	f300 80a6 	bgt.w	80113da <get_fat+0x188>
 801128e:	2b01      	cmp	r3, #1
 8011290:	d002      	beq.n	8011298 <get_fat+0x46>
 8011292:	2b02      	cmp	r3, #2
 8011294:	d055      	beq.n	8011342 <get_fat+0xf0>
 8011296:	e0a0      	b.n	80113da <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	60fb      	str	r3, [r7, #12]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	085b      	lsrs	r3, r3, #1
 80112a0:	68fa      	ldr	r2, [r7, #12]
 80112a2:	4413      	add	r3, r2
 80112a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	899b      	ldrh	r3, [r3, #12]
 80112ae:	4619      	mov	r1, r3
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80112b6:	4413      	add	r3, r2
 80112b8:	4619      	mov	r1, r3
 80112ba:	6938      	ldr	r0, [r7, #16]
 80112bc:	f7ff ff9c 	bl	80111f8 <move_window>
 80112c0:	4603      	mov	r3, r0
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f040 808c 	bne.w	80113e0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	1c5a      	adds	r2, r3, #1
 80112cc:	60fa      	str	r2, [r7, #12]
 80112ce:	693a      	ldr	r2, [r7, #16]
 80112d0:	8992      	ldrh	r2, [r2, #12]
 80112d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80112d6:	fb01 f202 	mul.w	r2, r1, r2
 80112da:	1a9b      	subs	r3, r3, r2
 80112dc:	693a      	ldr	r2, [r7, #16]
 80112de:	4413      	add	r3, r2
 80112e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80112e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	899b      	ldrh	r3, [r3, #12]
 80112ee:	4619      	mov	r1, r3
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80112f6:	4413      	add	r3, r2
 80112f8:	4619      	mov	r1, r3
 80112fa:	6938      	ldr	r0, [r7, #16]
 80112fc:	f7ff ff7c 	bl	80111f8 <move_window>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d16e      	bne.n	80113e4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	899b      	ldrh	r3, [r3, #12]
 801130a:	461a      	mov	r2, r3
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011312:	fb01 f202 	mul.w	r2, r1, r2
 8011316:	1a9b      	subs	r3, r3, r2
 8011318:	693a      	ldr	r2, [r7, #16]
 801131a:	4413      	add	r3, r2
 801131c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011320:	021b      	lsls	r3, r3, #8
 8011322:	68ba      	ldr	r2, [r7, #8]
 8011324:	4313      	orrs	r3, r2
 8011326:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	f003 0301 	and.w	r3, r3, #1
 801132e:	2b00      	cmp	r3, #0
 8011330:	d002      	beq.n	8011338 <get_fat+0xe6>
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	091b      	lsrs	r3, r3, #4
 8011336:	e002      	b.n	801133e <get_fat+0xec>
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801133e:	617b      	str	r3, [r7, #20]
			break;
 8011340:	e055      	b.n	80113ee <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	899b      	ldrh	r3, [r3, #12]
 801134a:	085b      	lsrs	r3, r3, #1
 801134c:	b29b      	uxth	r3, r3
 801134e:	4619      	mov	r1, r3
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	fbb3 f3f1 	udiv	r3, r3, r1
 8011356:	4413      	add	r3, r2
 8011358:	4619      	mov	r1, r3
 801135a:	6938      	ldr	r0, [r7, #16]
 801135c:	f7ff ff4c 	bl	80111f8 <move_window>
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d140      	bne.n	80113e8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	005b      	lsls	r3, r3, #1
 8011370:	693a      	ldr	r2, [r7, #16]
 8011372:	8992      	ldrh	r2, [r2, #12]
 8011374:	fbb3 f0f2 	udiv	r0, r3, r2
 8011378:	fb00 f202 	mul.w	r2, r0, r2
 801137c:	1a9b      	subs	r3, r3, r2
 801137e:	440b      	add	r3, r1
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fe95 	bl	80110b0 <ld_word>
 8011386:	4603      	mov	r3, r0
 8011388:	617b      	str	r3, [r7, #20]
			break;
 801138a:	e030      	b.n	80113ee <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	899b      	ldrh	r3, [r3, #12]
 8011394:	089b      	lsrs	r3, r3, #2
 8011396:	b29b      	uxth	r3, r3
 8011398:	4619      	mov	r1, r3
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	fbb3 f3f1 	udiv	r3, r3, r1
 80113a0:	4413      	add	r3, r2
 80113a2:	4619      	mov	r1, r3
 80113a4:	6938      	ldr	r0, [r7, #16]
 80113a6:	f7ff ff27 	bl	80111f8 <move_window>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d11d      	bne.n	80113ec <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	693a      	ldr	r2, [r7, #16]
 80113bc:	8992      	ldrh	r2, [r2, #12]
 80113be:	fbb3 f0f2 	udiv	r0, r3, r2
 80113c2:	fb00 f202 	mul.w	r2, r0, r2
 80113c6:	1a9b      	subs	r3, r3, r2
 80113c8:	440b      	add	r3, r1
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff fe88 	bl	80110e0 <ld_dword>
 80113d0:	4603      	mov	r3, r0
 80113d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80113d6:	617b      	str	r3, [r7, #20]
			break;
 80113d8:	e009      	b.n	80113ee <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80113da:	2301      	movs	r3, #1
 80113dc:	617b      	str	r3, [r7, #20]
 80113de:	e006      	b.n	80113ee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113e0:	bf00      	nop
 80113e2:	e004      	b.n	80113ee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113e4:	bf00      	nop
 80113e6:	e002      	b.n	80113ee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80113e8:	bf00      	nop
 80113ea:	e000      	b.n	80113ee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80113ec:	bf00      	nop
		}
	}

	return val;
 80113ee:	697b      	ldr	r3, [r7, #20]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3718      	adds	r7, #24
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b087      	sub	sp, #28
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011400:	f04f 33ff 	mov.w	r3, #4294967295
 8011404:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d031      	beq.n	8011472 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	617b      	str	r3, [r7, #20]
 8011414:	e002      	b.n	801141c <get_ldnumber+0x24>
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	3301      	adds	r3, #1
 801141a:	617b      	str	r3, [r7, #20]
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2b1f      	cmp	r3, #31
 8011422:	d903      	bls.n	801142c <get_ldnumber+0x34>
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	2b3a      	cmp	r3, #58	@ 0x3a
 801142a:	d1f4      	bne.n	8011416 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b3a      	cmp	r3, #58	@ 0x3a
 8011432:	d11c      	bne.n	801146e <get_ldnumber+0x76>
			tp = *path;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	1c5a      	adds	r2, r3, #1
 801143e:	60fa      	str	r2, [r7, #12]
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	3b30      	subs	r3, #48	@ 0x30
 8011444:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	2b09      	cmp	r3, #9
 801144a:	d80e      	bhi.n	801146a <get_ldnumber+0x72>
 801144c:	68fa      	ldr	r2, [r7, #12]
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	429a      	cmp	r2, r3
 8011452:	d10a      	bne.n	801146a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d107      	bne.n	801146a <get_ldnumber+0x72>
					vol = (int)i;
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	3301      	adds	r3, #1
 8011462:	617b      	str	r3, [r7, #20]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	697a      	ldr	r2, [r7, #20]
 8011468:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	e002      	b.n	8011474 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801146e:	2300      	movs	r3, #0
 8011470:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011472:	693b      	ldr	r3, [r7, #16]
}
 8011474:	4618      	mov	r0, r3
 8011476:	371c      	adds	r7, #28
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr

08011480 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2200      	movs	r2, #0
 801148e:	70da      	strb	r2, [r3, #3]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f04f 32ff 	mov.w	r2, #4294967295
 8011496:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011498:	6839      	ldr	r1, [r7, #0]
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f7ff feac 	bl	80111f8 <move_window>
 80114a0:	4603      	mov	r3, r0
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d001      	beq.n	80114aa <check_fs+0x2a>
 80114a6:	2304      	movs	r3, #4
 80114a8:	e038      	b.n	801151c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	3338      	adds	r3, #56	@ 0x38
 80114ae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7ff fdfc 	bl	80110b0 <ld_word>
 80114b8:	4603      	mov	r3, r0
 80114ba:	461a      	mov	r2, r3
 80114bc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d001      	beq.n	80114c8 <check_fs+0x48>
 80114c4:	2303      	movs	r3, #3
 80114c6:	e029      	b.n	801151c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80114ce:	2be9      	cmp	r3, #233	@ 0xe9
 80114d0:	d009      	beq.n	80114e6 <check_fs+0x66>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80114d8:	2beb      	cmp	r3, #235	@ 0xeb
 80114da:	d11e      	bne.n	801151a <check_fs+0x9a>
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80114e2:	2b90      	cmp	r3, #144	@ 0x90
 80114e4:	d119      	bne.n	801151a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	3338      	adds	r3, #56	@ 0x38
 80114ea:	3336      	adds	r3, #54	@ 0x36
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7ff fdf7 	bl	80110e0 <ld_dword>
 80114f2:	4603      	mov	r3, r0
 80114f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80114f8:	4a0a      	ldr	r2, [pc, #40]	@ (8011524 <check_fs+0xa4>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d101      	bne.n	8011502 <check_fs+0x82>
 80114fe:	2300      	movs	r3, #0
 8011500:	e00c      	b.n	801151c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	3338      	adds	r3, #56	@ 0x38
 8011506:	3352      	adds	r3, #82	@ 0x52
 8011508:	4618      	mov	r0, r3
 801150a:	f7ff fde9 	bl	80110e0 <ld_dword>
 801150e:	4603      	mov	r3, r0
 8011510:	4a05      	ldr	r2, [pc, #20]	@ (8011528 <check_fs+0xa8>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d101      	bne.n	801151a <check_fs+0x9a>
 8011516:	2300      	movs	r3, #0
 8011518:	e000      	b.n	801151c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801151a:	2302      	movs	r3, #2
}
 801151c:	4618      	mov	r0, r3
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	00544146 	.word	0x00544146
 8011528:	33544146 	.word	0x33544146

0801152c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b096      	sub	sp, #88	@ 0x58
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	4613      	mov	r3, r2
 8011538:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	2200      	movs	r2, #0
 801153e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7ff ff59 	bl	80113f8 <get_ldnumber>
 8011546:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801154a:	2b00      	cmp	r3, #0
 801154c:	da01      	bge.n	8011552 <find_volume+0x26>
 801154e:	230b      	movs	r3, #11
 8011550:	e27f      	b.n	8011a52 <find_volume+0x526>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011552:	4a9e      	ldr	r2, [pc, #632]	@ (80117cc <find_volume+0x2a0>)
 8011554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801155a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801155c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801155e:	2b00      	cmp	r3, #0
 8011560:	d101      	bne.n	8011566 <find_volume+0x3a>
 8011562:	230c      	movs	r3, #12
 8011564:	e275      	b.n	8011a52 <find_volume+0x526>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801156a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801156c:	79fb      	ldrb	r3, [r7, #7]
 801156e:	f023 0301 	bic.w	r3, r3, #1
 8011572:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d01a      	beq.n	80115b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801157c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801157e:	785b      	ldrb	r3, [r3, #1]
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fcf5 	bl	8010f70 <disk_status>
 8011586:	4603      	mov	r3, r0
 8011588:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801158c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011590:	f003 0301 	and.w	r3, r3, #1
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10c      	bne.n	80115b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011598:	79fb      	ldrb	r3, [r7, #7]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d007      	beq.n	80115ae <find_volume+0x82>
 801159e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115a2:	f003 0304 	and.w	r3, r3, #4
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d001      	beq.n	80115ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80115aa:	230a      	movs	r3, #10
 80115ac:	e251      	b.n	8011a52 <find_volume+0x526>
			}
			return FR_OK;				/* The file system object is valid */
 80115ae:	2300      	movs	r3, #0
 80115b0:	e24f      	b.n	8011a52 <find_volume+0x526>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80115b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115b4:	2200      	movs	r2, #0
 80115b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80115b8:	4a85      	ldr	r2, [pc, #532]	@ (80117d0 <find_volume+0x2a4>)
 80115ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115bc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80115c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80115c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c6:	785b      	ldrb	r3, [r3, #1]
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7ff fceb 	bl	8010fa4 <disk_initialize>
 80115ce:	4603      	mov	r3, r0
 80115d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80115d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115d8:	f003 0301 	and.w	r3, r3, #1
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d001      	beq.n	80115e4 <find_volume+0xb8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80115e0:	2303      	movs	r3, #3
 80115e2:	e236      	b.n	8011a52 <find_volume+0x526>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80115e4:	79fb      	ldrb	r3, [r7, #7]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d007      	beq.n	80115fa <find_volume+0xce>
 80115ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115ee:	f003 0304 	and.w	r3, r3, #4
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <find_volume+0xce>
		return FR_WRITE_PROTECTED;
 80115f6:	230a      	movs	r3, #10
 80115f8:	e22b      	b.n	8011a52 <find_volume+0x526>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80115fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115fc:	7858      	ldrb	r0, [r3, #1]
 80115fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011600:	330c      	adds	r3, #12
 8011602:	461a      	mov	r2, r3
 8011604:	2102      	movs	r1, #2
 8011606:	f7ff fd35 	bl	8011074 <disk_ioctl>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d001      	beq.n	8011614 <find_volume+0xe8>
 8011610:	2301      	movs	r3, #1
 8011612:	e21e      	b.n	8011a52 <find_volume+0x526>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011616:	899b      	ldrh	r3, [r3, #12]
 8011618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801161c:	d80d      	bhi.n	801163a <find_volume+0x10e>
 801161e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011620:	899b      	ldrh	r3, [r3, #12]
 8011622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011626:	d308      	bcc.n	801163a <find_volume+0x10e>
 8011628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801162a:	899b      	ldrh	r3, [r3, #12]
 801162c:	461a      	mov	r2, r3
 801162e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011630:	899b      	ldrh	r3, [r3, #12]
 8011632:	3b01      	subs	r3, #1
 8011634:	4013      	ands	r3, r2
 8011636:	2b00      	cmp	r3, #0
 8011638:	d001      	beq.n	801163e <find_volume+0x112>
 801163a:	2301      	movs	r3, #1
 801163c:	e209      	b.n	8011a52 <find_volume+0x526>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011642:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011644:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011646:	f7ff ff1b 	bl	8011480 <check_fs>
 801164a:	4603      	mov	r3, r0
 801164c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011650:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011654:	2b02      	cmp	r3, #2
 8011656:	d00a      	beq.n	801166e <find_volume+0x142>
 8011658:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801165c:	2b01      	cmp	r3, #1
 801165e:	d85b      	bhi.n	8011718 <find_volume+0x1ec>
 8011660:	4a5b      	ldr	r2, [pc, #364]	@ (80117d0 <find_volume+0x2a4>)
 8011662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011664:	005b      	lsls	r3, r3, #1
 8011666:	4413      	add	r3, r2
 8011668:	785b      	ldrb	r3, [r3, #1]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d054      	beq.n	8011718 <find_volume+0x1ec>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801166e:	2300      	movs	r3, #0
 8011670:	643b      	str	r3, [r7, #64]	@ 0x40
 8011672:	e01e      	b.n	80116b2 <find_volume+0x186>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011676:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801167a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801167c:	011b      	lsls	r3, r3, #4
 801167e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011682:	4413      	add	r3, r2
 8011684:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011688:	3304      	adds	r3, #4
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d006      	beq.n	801169e <find_volume+0x172>
 8011690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011692:	3308      	adds	r3, #8
 8011694:	4618      	mov	r0, r3
 8011696:	f7ff fd23 	bl	80110e0 <ld_dword>
 801169a:	4602      	mov	r2, r0
 801169c:	e000      	b.n	80116a0 <find_volume+0x174>
 801169e:	2200      	movs	r2, #0
 80116a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	3358      	adds	r3, #88	@ 0x58
 80116a6:	443b      	add	r3, r7
 80116a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80116ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116ae:	3301      	adds	r3, #1
 80116b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80116b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116b4:	2b03      	cmp	r3, #3
 80116b6:	d9dd      	bls.n	8011674 <find_volume+0x148>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80116b8:	4a45      	ldr	r2, [pc, #276]	@ (80117d0 <find_volume+0x2a4>)
 80116ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116bc:	005b      	lsls	r3, r3, #1
 80116be:	4413      	add	r3, r2
 80116c0:	785b      	ldrb	r3, [r3, #1]
 80116c2:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80116c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d002      	beq.n	80116d0 <find_volume+0x1a4>
 80116ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116cc:	3b01      	subs	r3, #1
 80116ce:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80116d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	3358      	adds	r3, #88	@ 0x58
 80116d6:	443b      	add	r3, r7
 80116d8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80116dc:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80116de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d005      	beq.n	80116f0 <find_volume+0x1c4>
 80116e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80116e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80116e8:	f7ff feca 	bl	8011480 <check_fs>
 80116ec:	4603      	mov	r3, r0
 80116ee:	e000      	b.n	80116f2 <find_volume+0x1c6>
 80116f0:	2303      	movs	r3, #3
 80116f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80116f6:	4a36      	ldr	r2, [pc, #216]	@ (80117d0 <find_volume+0x2a4>)
 80116f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116fa:	005b      	lsls	r3, r3, #1
 80116fc:	4413      	add	r3, r2
 80116fe:	785b      	ldrb	r3, [r3, #1]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d109      	bne.n	8011718 <find_volume+0x1ec>
 8011704:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011708:	2b01      	cmp	r3, #1
 801170a:	d905      	bls.n	8011718 <find_volume+0x1ec>
 801170c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801170e:	3301      	adds	r3, #1
 8011710:	643b      	str	r3, [r7, #64]	@ 0x40
 8011712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011714:	2b03      	cmp	r3, #3
 8011716:	d9db      	bls.n	80116d0 <find_volume+0x1a4>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801171c:	2b04      	cmp	r3, #4
 801171e:	d101      	bne.n	8011724 <find_volume+0x1f8>
 8011720:	2301      	movs	r3, #1
 8011722:	e196      	b.n	8011a52 <find_volume+0x526>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011724:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011728:	2b01      	cmp	r3, #1
 801172a:	d901      	bls.n	8011730 <find_volume+0x204>
 801172c:	230d      	movs	r3, #13
 801172e:	e190      	b.n	8011a52 <find_volume+0x526>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011732:	3338      	adds	r3, #56	@ 0x38
 8011734:	330b      	adds	r3, #11
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff fcba 	bl	80110b0 <ld_word>
 801173c:	4603      	mov	r3, r0
 801173e:	461a      	mov	r2, r3
 8011740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011742:	899b      	ldrh	r3, [r3, #12]
 8011744:	429a      	cmp	r2, r3
 8011746:	d001      	beq.n	801174c <find_volume+0x220>
 8011748:	230d      	movs	r3, #13
 801174a:	e182      	b.n	8011a52 <find_volume+0x526>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801174c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174e:	3338      	adds	r3, #56	@ 0x38
 8011750:	3316      	adds	r3, #22
 8011752:	4618      	mov	r0, r3
 8011754:	f7ff fcac 	bl	80110b0 <ld_word>
 8011758:	4603      	mov	r3, r0
 801175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801175c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801175e:	2b00      	cmp	r3, #0
 8011760:	d106      	bne.n	8011770 <find_volume+0x244>
 8011762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011764:	3338      	adds	r3, #56	@ 0x38
 8011766:	3324      	adds	r3, #36	@ 0x24
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff fcb9 	bl	80110e0 <ld_dword>
 801176e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011772:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011774:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011778:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801177c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801177e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011782:	789b      	ldrb	r3, [r3, #2]
 8011784:	2b01      	cmp	r3, #1
 8011786:	d005      	beq.n	8011794 <find_volume+0x268>
 8011788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178a:	789b      	ldrb	r3, [r3, #2]
 801178c:	2b02      	cmp	r3, #2
 801178e:	d001      	beq.n	8011794 <find_volume+0x268>
 8011790:	230d      	movs	r3, #13
 8011792:	e15e      	b.n	8011a52 <find_volume+0x526>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011796:	789b      	ldrb	r3, [r3, #2]
 8011798:	461a      	mov	r2, r3
 801179a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801179c:	fb02 f303 	mul.w	r3, r2, r3
 80117a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80117a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80117a8:	461a      	mov	r2, r3
 80117aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80117ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b0:	895b      	ldrh	r3, [r3, #10]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d008      	beq.n	80117c8 <find_volume+0x29c>
 80117b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b8:	895b      	ldrh	r3, [r3, #10]
 80117ba:	461a      	mov	r2, r3
 80117bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117be:	895b      	ldrh	r3, [r3, #10]
 80117c0:	3b01      	subs	r3, #1
 80117c2:	4013      	ands	r3, r2
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d005      	beq.n	80117d4 <find_volume+0x2a8>
 80117c8:	230d      	movs	r3, #13
 80117ca:	e142      	b.n	8011a52 <find_volume+0x526>
 80117cc:	24001834 	.word	0x24001834
 80117d0:	24001828 	.word	0x24001828

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80117d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d6:	3338      	adds	r3, #56	@ 0x38
 80117d8:	3311      	adds	r3, #17
 80117da:	4618      	mov	r0, r3
 80117dc:	f7ff fc68 	bl	80110b0 <ld_word>
 80117e0:	4603      	mov	r3, r0
 80117e2:	461a      	mov	r2, r3
 80117e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80117e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ea:	891b      	ldrh	r3, [r3, #8]
 80117ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117ee:	8992      	ldrh	r2, [r2, #12]
 80117f0:	0952      	lsrs	r2, r2, #5
 80117f2:	b292      	uxth	r2, r2
 80117f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80117f8:	fb01 f202 	mul.w	r2, r1, r2
 80117fc:	1a9b      	subs	r3, r3, r2
 80117fe:	b29b      	uxth	r3, r3
 8011800:	2b00      	cmp	r3, #0
 8011802:	d001      	beq.n	8011808 <find_volume+0x2dc>
 8011804:	230d      	movs	r3, #13
 8011806:	e124      	b.n	8011a52 <find_volume+0x526>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801180a:	3338      	adds	r3, #56	@ 0x38
 801180c:	3313      	adds	r3, #19
 801180e:	4618      	mov	r0, r3
 8011810:	f7ff fc4e 	bl	80110b0 <ld_word>
 8011814:	4603      	mov	r3, r0
 8011816:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801181a:	2b00      	cmp	r3, #0
 801181c:	d106      	bne.n	801182c <find_volume+0x300>
 801181e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011820:	3338      	adds	r3, #56	@ 0x38
 8011822:	3320      	adds	r3, #32
 8011824:	4618      	mov	r0, r3
 8011826:	f7ff fc5b 	bl	80110e0 <ld_dword>
 801182a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801182c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801182e:	3338      	adds	r3, #56	@ 0x38
 8011830:	330e      	adds	r3, #14
 8011832:	4618      	mov	r0, r3
 8011834:	f7ff fc3c 	bl	80110b0 <ld_word>
 8011838:	4603      	mov	r3, r0
 801183a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801183c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801183e:	2b00      	cmp	r3, #0
 8011840:	d101      	bne.n	8011846 <find_volume+0x31a>
 8011842:	230d      	movs	r3, #13
 8011844:	e105      	b.n	8011a52 <find_volume+0x526>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011846:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801184a:	4413      	add	r3, r2
 801184c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801184e:	8911      	ldrh	r1, [r2, #8]
 8011850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011852:	8992      	ldrh	r2, [r2, #12]
 8011854:	0952      	lsrs	r2, r2, #5
 8011856:	b292      	uxth	r2, r2
 8011858:	fbb1 f2f2 	udiv	r2, r1, r2
 801185c:	b292      	uxth	r2, r2
 801185e:	4413      	add	r3, r2
 8011860:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011866:	429a      	cmp	r2, r3
 8011868:	d201      	bcs.n	801186e <find_volume+0x342>
 801186a:	230d      	movs	r3, #13
 801186c:	e0f1      	b.n	8011a52 <find_volume+0x526>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801186e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011876:	8952      	ldrh	r2, [r2, #10]
 8011878:	fbb3 f3f2 	udiv	r3, r3, r2
 801187c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011880:	2b00      	cmp	r3, #0
 8011882:	d101      	bne.n	8011888 <find_volume+0x35c>
 8011884:	230d      	movs	r3, #13
 8011886:	e0e4      	b.n	8011a52 <find_volume+0x526>
		fmt = FS_FAT32;
 8011888:	2303      	movs	r3, #3
 801188a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011890:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011894:	4293      	cmp	r3, r2
 8011896:	d802      	bhi.n	801189e <find_volume+0x372>
 8011898:	2302      	movs	r3, #2
 801189a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d802      	bhi.n	80118ae <find_volume+0x382>
 80118a8:	2301      	movs	r3, #1
 80118aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80118ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b0:	1c9a      	adds	r2, r3, #2
 80118b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80118b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80118ba:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80118bc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80118be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118c0:	441a      	add	r2, r3
 80118c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80118c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80118c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ca:	441a      	add	r2, r3
 80118cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ce:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80118d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118d4:	2b03      	cmp	r3, #3
 80118d6:	d11e      	bne.n	8011916 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80118d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118da:	3338      	adds	r3, #56	@ 0x38
 80118dc:	332a      	adds	r3, #42	@ 0x2a
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ff fbe6 	bl	80110b0 <ld_word>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d001      	beq.n	80118ee <find_volume+0x3c2>
 80118ea:	230d      	movs	r3, #13
 80118ec:	e0b1      	b.n	8011a52 <find_volume+0x526>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80118ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f0:	891b      	ldrh	r3, [r3, #8]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d001      	beq.n	80118fa <find_volume+0x3ce>
 80118f6:	230d      	movs	r3, #13
 80118f8:	e0ab      	b.n	8011a52 <find_volume+0x526>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80118fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118fc:	3338      	adds	r3, #56	@ 0x38
 80118fe:	332c      	adds	r3, #44	@ 0x2c
 8011900:	4618      	mov	r0, r3
 8011902:	f7ff fbed 	bl	80110e0 <ld_dword>
 8011906:	4602      	mov	r2, r0
 8011908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801190a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801190c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801190e:	69db      	ldr	r3, [r3, #28]
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	647b      	str	r3, [r7, #68]	@ 0x44
 8011914:	e01f      	b.n	8011956 <find_volume+0x42a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011918:	891b      	ldrh	r3, [r3, #8]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d101      	bne.n	8011922 <find_volume+0x3f6>
 801191e:	230d      	movs	r3, #13
 8011920:	e097      	b.n	8011a52 <find_volume+0x526>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011928:	441a      	add	r2, r3
 801192a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801192e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011932:	2b02      	cmp	r3, #2
 8011934:	d103      	bne.n	801193e <find_volume+0x412>
 8011936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011938:	69db      	ldr	r3, [r3, #28]
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	e00a      	b.n	8011954 <find_volume+0x428>
 801193e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011940:	69da      	ldr	r2, [r3, #28]
 8011942:	4613      	mov	r3, r2
 8011944:	005b      	lsls	r3, r3, #1
 8011946:	4413      	add	r3, r2
 8011948:	085a      	lsrs	r2, r3, #1
 801194a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801194c:	69db      	ldr	r3, [r3, #28]
 801194e:	f003 0301 	and.w	r3, r3, #1
 8011952:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011954:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011958:	6a1a      	ldr	r2, [r3, #32]
 801195a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801195c:	899b      	ldrh	r3, [r3, #12]
 801195e:	4619      	mov	r1, r3
 8011960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011962:	440b      	add	r3, r1
 8011964:	3b01      	subs	r3, #1
 8011966:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011968:	8989      	ldrh	r1, [r1, #12]
 801196a:	fbb3 f3f1 	udiv	r3, r3, r1
 801196e:	429a      	cmp	r2, r3
 8011970:	d201      	bcs.n	8011976 <find_volume+0x44a>
 8011972:	230d      	movs	r3, #13
 8011974:	e06d      	b.n	8011a52 <find_volume+0x526>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011978:	f04f 32ff 	mov.w	r2, #4294967295
 801197c:	619a      	str	r2, [r3, #24]
 801197e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011980:	699a      	ldr	r2, [r3, #24]
 8011982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011984:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8011986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011988:	2280      	movs	r2, #128	@ 0x80
 801198a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801198c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011990:	2b03      	cmp	r3, #3
 8011992:	d149      	bne.n	8011a28 <find_volume+0x4fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011996:	3338      	adds	r3, #56	@ 0x38
 8011998:	3330      	adds	r3, #48	@ 0x30
 801199a:	4618      	mov	r0, r3
 801199c:	f7ff fb88 	bl	80110b0 <ld_word>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d140      	bne.n	8011a28 <find_volume+0x4fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80119a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119a8:	3301      	adds	r3, #1
 80119aa:	4619      	mov	r1, r3
 80119ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80119ae:	f7ff fc23 	bl	80111f8 <move_window>
 80119b2:	4603      	mov	r3, r0
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d137      	bne.n	8011a28 <find_volume+0x4fc>
		{
			fs->fsi_flag = 0;
 80119b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ba:	2200      	movs	r2, #0
 80119bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80119be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c0:	3338      	adds	r3, #56	@ 0x38
 80119c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff fb72 	bl	80110b0 <ld_word>
 80119cc:	4603      	mov	r3, r0
 80119ce:	461a      	mov	r2, r3
 80119d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d127      	bne.n	8011a28 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80119d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119da:	3338      	adds	r3, #56	@ 0x38
 80119dc:	4618      	mov	r0, r3
 80119de:	f7ff fb7f 	bl	80110e0 <ld_dword>
 80119e2:	4603      	mov	r3, r0
 80119e4:	4a1d      	ldr	r2, [pc, #116]	@ (8011a5c <find_volume+0x530>)
 80119e6:	4293      	cmp	r3, r2
 80119e8:	d11e      	bne.n	8011a28 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80119ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ec:	3338      	adds	r3, #56	@ 0x38
 80119ee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7ff fb74 	bl	80110e0 <ld_dword>
 80119f8:	4603      	mov	r3, r0
 80119fa:	4a19      	ldr	r2, [pc, #100]	@ (8011a60 <find_volume+0x534>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d113      	bne.n	8011a28 <find_volume+0x4fc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a02:	3338      	adds	r3, #56	@ 0x38
 8011a04:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7ff fb69 	bl	80110e0 <ld_dword>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a12:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a16:	3338      	adds	r3, #56	@ 0x38
 8011a18:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7ff fb5f 	bl	80110e0 <ld_dword>
 8011a22:	4602      	mov	r2, r0
 8011a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a26:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a2a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011a2e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011a30:	4b0c      	ldr	r3, [pc, #48]	@ (8011a64 <find_volume+0x538>)
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	3301      	adds	r3, #1
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	4b0a      	ldr	r3, [pc, #40]	@ (8011a64 <find_volume+0x538>)
 8011a3a:	801a      	strh	r2, [r3, #0]
 8011a3c:	4b09      	ldr	r3, [pc, #36]	@ (8011a64 <find_volume+0x538>)
 8011a3e:	881a      	ldrh	r2, [r3, #0]
 8011a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a42:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a46:	4a08      	ldr	r2, [pc, #32]	@ (8011a68 <find_volume+0x53c>)
 8011a48:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011a4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011a4c:	f7ff fb6c 	bl	8011128 <clear_lock>
#endif
	return FR_OK;
 8011a50:	2300      	movs	r3, #0
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3758      	adds	r7, #88	@ 0x58
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	41615252 	.word	0x41615252
 8011a60:	61417272 	.word	0x61417272
 8011a64:	24001838 	.word	0x24001838
 8011a68:	2400185c 	.word	0x2400185c

08011a6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b088      	sub	sp, #32
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	4613      	mov	r3, r2
 8011a78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011a7e:	f107 0310 	add.w	r3, r7, #16
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7ff fcb8 	bl	80113f8 <get_ldnumber>
 8011a88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	da01      	bge.n	8011a94 <f_mount+0x28>
 8011a90:	230b      	movs	r3, #11
 8011a92:	e02b      	b.n	8011aec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011a94:	4a17      	ldr	r2, [pc, #92]	@ (8011af4 <f_mount+0x88>)
 8011a96:	69fb      	ldr	r3, [r7, #28]
 8011a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d005      	beq.n	8011ab0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011aa4:	69b8      	ldr	r0, [r7, #24]
 8011aa6:	f7ff fb3f 	bl	8011128 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	2200      	movs	r2, #0
 8011aae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d002      	beq.n	8011abc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011abc:	68fa      	ldr	r2, [r7, #12]
 8011abe:	490d      	ldr	r1, [pc, #52]	@ (8011af4 <f_mount+0x88>)
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d002      	beq.n	8011ad2 <f_mount+0x66>
 8011acc:	79fb      	ldrb	r3, [r7, #7]
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d001      	beq.n	8011ad6 <f_mount+0x6a>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e00a      	b.n	8011aec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011ad6:	f107 010c 	add.w	r1, r7, #12
 8011ada:	f107 0308 	add.w	r3, r7, #8
 8011ade:	2200      	movs	r2, #0
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7ff fd23 	bl	801152c <find_volume>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3720      	adds	r7, #32
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	24001834 	.word	0x24001834

08011af8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b092      	sub	sp, #72	@ 0x48
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	60b9      	str	r1, [r7, #8]
 8011b02:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011b04:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011b08:	f107 030c 	add.w	r3, r7, #12
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7ff fd0c 	bl	801152c <find_volume>
 8011b14:	4603      	mov	r3, r0
 8011b16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8011b1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	f040 8099 	bne.w	8011c56 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8011b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8011b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b2c:	699a      	ldr	r2, [r3, #24]
 8011b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b30:	69db      	ldr	r3, [r3, #28]
 8011b32:	3b02      	subs	r3, #2
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d804      	bhi.n	8011b42 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b3a:	699a      	ldr	r2, [r3, #24]
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	601a      	str	r2, [r3, #0]
 8011b40:	e089      	b.n	8011c56 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8011b42:	2300      	movs	r3, #0
 8011b44:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8011b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	d128      	bne.n	8011ba0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8011b4e:	2302      	movs	r3, #2
 8011b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b54:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8011b56:	f107 0314 	add.w	r3, r7, #20
 8011b5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f7ff fb78 	bl	8011252 <get_fat>
 8011b62:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8011b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b6a:	d103      	bne.n	8011b74 <f_getfree+0x7c>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011b72:	e063      	b.n	8011c3c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b76:	2b01      	cmp	r3, #1
 8011b78:	d103      	bne.n	8011b82 <f_getfree+0x8a>
 8011b7a:	2302      	movs	r3, #2
 8011b7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011b80:	e05c      	b.n	8011c3c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8011b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d102      	bne.n	8011b8e <f_getfree+0x96>
 8011b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8011b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b90:	3301      	adds	r3, #1
 8011b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b96:	69db      	ldr	r3, [r3, #28]
 8011b98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d3db      	bcc.n	8011b56 <f_getfree+0x5e>
 8011b9e:	e04d      	b.n	8011c3c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba2:	69db      	ldr	r3, [r3, #28]
 8011ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011baa:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8011bac:	2300      	movs	r3, #0
 8011bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8011bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d113      	bne.n	8011be2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8011bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bbe:	1c5a      	adds	r2, r3, #1
 8011bc0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	f7ff fb18 	bl	80111f8 <move_window>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8011bce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d131      	bne.n	8011c3a <f_getfree+0x142>
							p = fs->win;
 8011bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd8:	3338      	adds	r3, #56	@ 0x38
 8011bda:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8011bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bde:	899b      	ldrh	r3, [r3, #12]
 8011be0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8011be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	2b02      	cmp	r3, #2
 8011be8:	d10f      	bne.n	8011c0a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8011bea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bec:	f7ff fa60 	bl	80110b0 <ld_word>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d102      	bne.n	8011bfc <f_getfree+0x104>
 8011bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8011bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bfe:	3302      	adds	r3, #2
 8011c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c04:	3b02      	subs	r3, #2
 8011c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c08:	e010      	b.n	8011c2c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011c0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c0c:	f7ff fa68 	bl	80110e0 <ld_dword>
 8011c10:	4603      	mov	r3, r0
 8011c12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d102      	bne.n	8011c20 <f_getfree+0x128>
 8011c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8011c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c22:	3304      	adds	r3, #4
 8011c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c28:	3b04      	subs	r3, #4
 8011c2a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8011c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d1bd      	bne.n	8011bb4 <f_getfree+0xbc>
 8011c38:	e000      	b.n	8011c3c <f_getfree+0x144>
							if (res != FR_OK) break;
 8011c3a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c40:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8011c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c46:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c4a:	791a      	ldrb	r2, [r3, #4]
 8011c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c4e:	f042 0201 	orr.w	r2, r2, #1
 8011c52:	b2d2      	uxtb	r2, r2
 8011c54:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011c56:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3748      	adds	r7, #72	@ 0x48
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
	...

08011c64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011c64:	b480      	push	{r7}
 8011c66:	b087      	sub	sp, #28
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	4613      	mov	r3, r2
 8011c70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011c72:	2301      	movs	r3, #1
 8011c74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011c76:	2300      	movs	r3, #0
 8011c78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011c7c:	7a5b      	ldrb	r3, [r3, #9]
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d131      	bne.n	8011ce8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011c84:	4b1c      	ldr	r3, [pc, #112]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011c86:	7a5b      	ldrb	r3, [r3, #9]
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011c8e:	2100      	movs	r1, #0
 8011c90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011c92:	4b19      	ldr	r3, [pc, #100]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011c94:	7a5b      	ldrb	r3, [r3, #9]
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	4a17      	ldr	r2, [pc, #92]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	4413      	add	r3, r2
 8011c9e:	68fa      	ldr	r2, [r7, #12]
 8011ca0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011ca2:	4b15      	ldr	r3, [pc, #84]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011ca4:	7a5b      	ldrb	r3, [r3, #9]
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	461a      	mov	r2, r3
 8011caa:	4b13      	ldr	r3, [pc, #76]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011cac:	4413      	add	r3, r2
 8011cae:	79fa      	ldrb	r2, [r7, #7]
 8011cb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011cb2:	4b11      	ldr	r3, [pc, #68]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011cb4:	7a5b      	ldrb	r3, [r3, #9]
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	1c5a      	adds	r2, r3, #1
 8011cba:	b2d1      	uxtb	r1, r2
 8011cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8011cf8 <FATFS_LinkDriverEx+0x94>)
 8011cbe:	7251      	strb	r1, [r2, #9]
 8011cc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011cc2:	7dbb      	ldrb	r3, [r7, #22]
 8011cc4:	3330      	adds	r3, #48	@ 0x30
 8011cc6:	b2da      	uxtb	r2, r3
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	223a      	movs	r2, #58	@ 0x3a
 8011cd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	3302      	adds	r3, #2
 8011cd8:	222f      	movs	r2, #47	@ 0x2f
 8011cda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	3303      	adds	r3, #3
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	371c      	adds	r7, #28
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr
 8011cf6:	bf00      	nop
 8011cf8:	24001a5c 	.word	0x24001a5c

08011cfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011d06:	2200      	movs	r2, #0
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f7ff ffaa 	bl	8011c64 <FATFS_LinkDriverEx>
 8011d10:	4603      	mov	r3, r0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
	...

08011d1c <siprintf>:
 8011d1c:	b40e      	push	{r1, r2, r3}
 8011d1e:	b500      	push	{lr}
 8011d20:	b09c      	sub	sp, #112	@ 0x70
 8011d22:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d24:	9002      	str	r0, [sp, #8]
 8011d26:	9006      	str	r0, [sp, #24]
 8011d28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d2c:	4809      	ldr	r0, [pc, #36]	@ (8011d54 <siprintf+0x38>)
 8011d2e:	9107      	str	r1, [sp, #28]
 8011d30:	9104      	str	r1, [sp, #16]
 8011d32:	4909      	ldr	r1, [pc, #36]	@ (8011d58 <siprintf+0x3c>)
 8011d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d38:	9105      	str	r1, [sp, #20]
 8011d3a:	6800      	ldr	r0, [r0, #0]
 8011d3c:	9301      	str	r3, [sp, #4]
 8011d3e:	a902      	add	r1, sp, #8
 8011d40:	f000 f9a2 	bl	8012088 <_svfiprintf_r>
 8011d44:	9b02      	ldr	r3, [sp, #8]
 8011d46:	2200      	movs	r2, #0
 8011d48:	701a      	strb	r2, [r3, #0]
 8011d4a:	b01c      	add	sp, #112	@ 0x70
 8011d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d50:	b003      	add	sp, #12
 8011d52:	4770      	bx	lr
 8011d54:	2400001c 	.word	0x2400001c
 8011d58:	ffff0208 	.word	0xffff0208

08011d5c <memset>:
 8011d5c:	4402      	add	r2, r0
 8011d5e:	4603      	mov	r3, r0
 8011d60:	4293      	cmp	r3, r2
 8011d62:	d100      	bne.n	8011d66 <memset+0xa>
 8011d64:	4770      	bx	lr
 8011d66:	f803 1b01 	strb.w	r1, [r3], #1
 8011d6a:	e7f9      	b.n	8011d60 <memset+0x4>

08011d6c <__errno>:
 8011d6c:	4b01      	ldr	r3, [pc, #4]	@ (8011d74 <__errno+0x8>)
 8011d6e:	6818      	ldr	r0, [r3, #0]
 8011d70:	4770      	bx	lr
 8011d72:	bf00      	nop
 8011d74:	2400001c 	.word	0x2400001c

08011d78 <__libc_init_array>:
 8011d78:	b570      	push	{r4, r5, r6, lr}
 8011d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8011db0 <__libc_init_array+0x38>)
 8011d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8011db4 <__libc_init_array+0x3c>)
 8011d7e:	1b64      	subs	r4, r4, r5
 8011d80:	10a4      	asrs	r4, r4, #2
 8011d82:	2600      	movs	r6, #0
 8011d84:	42a6      	cmp	r6, r4
 8011d86:	d109      	bne.n	8011d9c <__libc_init_array+0x24>
 8011d88:	4d0b      	ldr	r5, [pc, #44]	@ (8011db8 <__libc_init_array+0x40>)
 8011d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8011dbc <__libc_init_array+0x44>)
 8011d8c:	f000 fc66 	bl	801265c <_init>
 8011d90:	1b64      	subs	r4, r4, r5
 8011d92:	10a4      	asrs	r4, r4, #2
 8011d94:	2600      	movs	r6, #0
 8011d96:	42a6      	cmp	r6, r4
 8011d98:	d105      	bne.n	8011da6 <__libc_init_array+0x2e>
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}
 8011d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011da0:	4798      	blx	r3
 8011da2:	3601      	adds	r6, #1
 8011da4:	e7ee      	b.n	8011d84 <__libc_init_array+0xc>
 8011da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011daa:	4798      	blx	r3
 8011dac:	3601      	adds	r6, #1
 8011dae:	e7f2      	b.n	8011d96 <__libc_init_array+0x1e>
 8011db0:	08012b20 	.word	0x08012b20
 8011db4:	08012b20 	.word	0x08012b20
 8011db8:	08012b20 	.word	0x08012b20
 8011dbc:	08012b24 	.word	0x08012b24

08011dc0 <__retarget_lock_acquire_recursive>:
 8011dc0:	4770      	bx	lr

08011dc2 <__retarget_lock_release_recursive>:
 8011dc2:	4770      	bx	lr

08011dc4 <memcpy>:
 8011dc4:	440a      	add	r2, r1
 8011dc6:	4291      	cmp	r1, r2
 8011dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011dcc:	d100      	bne.n	8011dd0 <memcpy+0xc>
 8011dce:	4770      	bx	lr
 8011dd0:	b510      	push	{r4, lr}
 8011dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011dda:	4291      	cmp	r1, r2
 8011ddc:	d1f9      	bne.n	8011dd2 <memcpy+0xe>
 8011dde:	bd10      	pop	{r4, pc}

08011de0 <_free_r>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	4605      	mov	r5, r0
 8011de4:	2900      	cmp	r1, #0
 8011de6:	d041      	beq.n	8011e6c <_free_r+0x8c>
 8011de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dec:	1f0c      	subs	r4, r1, #4
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	bfb8      	it	lt
 8011df2:	18e4      	addlt	r4, r4, r3
 8011df4:	f000 f8e0 	bl	8011fb8 <__malloc_lock>
 8011df8:	4a1d      	ldr	r2, [pc, #116]	@ (8011e70 <_free_r+0x90>)
 8011dfa:	6813      	ldr	r3, [r2, #0]
 8011dfc:	b933      	cbnz	r3, 8011e0c <_free_r+0x2c>
 8011dfe:	6063      	str	r3, [r4, #4]
 8011e00:	6014      	str	r4, [r2, #0]
 8011e02:	4628      	mov	r0, r5
 8011e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e08:	f000 b8dc 	b.w	8011fc4 <__malloc_unlock>
 8011e0c:	42a3      	cmp	r3, r4
 8011e0e:	d908      	bls.n	8011e22 <_free_r+0x42>
 8011e10:	6820      	ldr	r0, [r4, #0]
 8011e12:	1821      	adds	r1, r4, r0
 8011e14:	428b      	cmp	r3, r1
 8011e16:	bf01      	itttt	eq
 8011e18:	6819      	ldreq	r1, [r3, #0]
 8011e1a:	685b      	ldreq	r3, [r3, #4]
 8011e1c:	1809      	addeq	r1, r1, r0
 8011e1e:	6021      	streq	r1, [r4, #0]
 8011e20:	e7ed      	b.n	8011dfe <_free_r+0x1e>
 8011e22:	461a      	mov	r2, r3
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	b10b      	cbz	r3, 8011e2c <_free_r+0x4c>
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	d9fa      	bls.n	8011e22 <_free_r+0x42>
 8011e2c:	6811      	ldr	r1, [r2, #0]
 8011e2e:	1850      	adds	r0, r2, r1
 8011e30:	42a0      	cmp	r0, r4
 8011e32:	d10b      	bne.n	8011e4c <_free_r+0x6c>
 8011e34:	6820      	ldr	r0, [r4, #0]
 8011e36:	4401      	add	r1, r0
 8011e38:	1850      	adds	r0, r2, r1
 8011e3a:	4283      	cmp	r3, r0
 8011e3c:	6011      	str	r1, [r2, #0]
 8011e3e:	d1e0      	bne.n	8011e02 <_free_r+0x22>
 8011e40:	6818      	ldr	r0, [r3, #0]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	6053      	str	r3, [r2, #4]
 8011e46:	4408      	add	r0, r1
 8011e48:	6010      	str	r0, [r2, #0]
 8011e4a:	e7da      	b.n	8011e02 <_free_r+0x22>
 8011e4c:	d902      	bls.n	8011e54 <_free_r+0x74>
 8011e4e:	230c      	movs	r3, #12
 8011e50:	602b      	str	r3, [r5, #0]
 8011e52:	e7d6      	b.n	8011e02 <_free_r+0x22>
 8011e54:	6820      	ldr	r0, [r4, #0]
 8011e56:	1821      	adds	r1, r4, r0
 8011e58:	428b      	cmp	r3, r1
 8011e5a:	bf04      	itt	eq
 8011e5c:	6819      	ldreq	r1, [r3, #0]
 8011e5e:	685b      	ldreq	r3, [r3, #4]
 8011e60:	6063      	str	r3, [r4, #4]
 8011e62:	bf04      	itt	eq
 8011e64:	1809      	addeq	r1, r1, r0
 8011e66:	6021      	streq	r1, [r4, #0]
 8011e68:	6054      	str	r4, [r2, #4]
 8011e6a:	e7ca      	b.n	8011e02 <_free_r+0x22>
 8011e6c:	bd38      	pop	{r3, r4, r5, pc}
 8011e6e:	bf00      	nop
 8011e70:	24001bac 	.word	0x24001bac

08011e74 <sbrk_aligned>:
 8011e74:	b570      	push	{r4, r5, r6, lr}
 8011e76:	4e0f      	ldr	r6, [pc, #60]	@ (8011eb4 <sbrk_aligned+0x40>)
 8011e78:	460c      	mov	r4, r1
 8011e7a:	6831      	ldr	r1, [r6, #0]
 8011e7c:	4605      	mov	r5, r0
 8011e7e:	b911      	cbnz	r1, 8011e86 <sbrk_aligned+0x12>
 8011e80:	f000 fba6 	bl	80125d0 <_sbrk_r>
 8011e84:	6030      	str	r0, [r6, #0]
 8011e86:	4621      	mov	r1, r4
 8011e88:	4628      	mov	r0, r5
 8011e8a:	f000 fba1 	bl	80125d0 <_sbrk_r>
 8011e8e:	1c43      	adds	r3, r0, #1
 8011e90:	d103      	bne.n	8011e9a <sbrk_aligned+0x26>
 8011e92:	f04f 34ff 	mov.w	r4, #4294967295
 8011e96:	4620      	mov	r0, r4
 8011e98:	bd70      	pop	{r4, r5, r6, pc}
 8011e9a:	1cc4      	adds	r4, r0, #3
 8011e9c:	f024 0403 	bic.w	r4, r4, #3
 8011ea0:	42a0      	cmp	r0, r4
 8011ea2:	d0f8      	beq.n	8011e96 <sbrk_aligned+0x22>
 8011ea4:	1a21      	subs	r1, r4, r0
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f000 fb92 	bl	80125d0 <_sbrk_r>
 8011eac:	3001      	adds	r0, #1
 8011eae:	d1f2      	bne.n	8011e96 <sbrk_aligned+0x22>
 8011eb0:	e7ef      	b.n	8011e92 <sbrk_aligned+0x1e>
 8011eb2:	bf00      	nop
 8011eb4:	24001ba8 	.word	0x24001ba8

08011eb8 <_malloc_r>:
 8011eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ebc:	1ccd      	adds	r5, r1, #3
 8011ebe:	f025 0503 	bic.w	r5, r5, #3
 8011ec2:	3508      	adds	r5, #8
 8011ec4:	2d0c      	cmp	r5, #12
 8011ec6:	bf38      	it	cc
 8011ec8:	250c      	movcc	r5, #12
 8011eca:	2d00      	cmp	r5, #0
 8011ecc:	4606      	mov	r6, r0
 8011ece:	db01      	blt.n	8011ed4 <_malloc_r+0x1c>
 8011ed0:	42a9      	cmp	r1, r5
 8011ed2:	d904      	bls.n	8011ede <_malloc_r+0x26>
 8011ed4:	230c      	movs	r3, #12
 8011ed6:	6033      	str	r3, [r6, #0]
 8011ed8:	2000      	movs	r0, #0
 8011eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011fb4 <_malloc_r+0xfc>
 8011ee2:	f000 f869 	bl	8011fb8 <__malloc_lock>
 8011ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8011eea:	461c      	mov	r4, r3
 8011eec:	bb44      	cbnz	r4, 8011f40 <_malloc_r+0x88>
 8011eee:	4629      	mov	r1, r5
 8011ef0:	4630      	mov	r0, r6
 8011ef2:	f7ff ffbf 	bl	8011e74 <sbrk_aligned>
 8011ef6:	1c43      	adds	r3, r0, #1
 8011ef8:	4604      	mov	r4, r0
 8011efa:	d158      	bne.n	8011fae <_malloc_r+0xf6>
 8011efc:	f8d8 4000 	ldr.w	r4, [r8]
 8011f00:	4627      	mov	r7, r4
 8011f02:	2f00      	cmp	r7, #0
 8011f04:	d143      	bne.n	8011f8e <_malloc_r+0xd6>
 8011f06:	2c00      	cmp	r4, #0
 8011f08:	d04b      	beq.n	8011fa2 <_malloc_r+0xea>
 8011f0a:	6823      	ldr	r3, [r4, #0]
 8011f0c:	4639      	mov	r1, r7
 8011f0e:	4630      	mov	r0, r6
 8011f10:	eb04 0903 	add.w	r9, r4, r3
 8011f14:	f000 fb5c 	bl	80125d0 <_sbrk_r>
 8011f18:	4581      	cmp	r9, r0
 8011f1a:	d142      	bne.n	8011fa2 <_malloc_r+0xea>
 8011f1c:	6821      	ldr	r1, [r4, #0]
 8011f1e:	1a6d      	subs	r5, r5, r1
 8011f20:	4629      	mov	r1, r5
 8011f22:	4630      	mov	r0, r6
 8011f24:	f7ff ffa6 	bl	8011e74 <sbrk_aligned>
 8011f28:	3001      	adds	r0, #1
 8011f2a:	d03a      	beq.n	8011fa2 <_malloc_r+0xea>
 8011f2c:	6823      	ldr	r3, [r4, #0]
 8011f2e:	442b      	add	r3, r5
 8011f30:	6023      	str	r3, [r4, #0]
 8011f32:	f8d8 3000 	ldr.w	r3, [r8]
 8011f36:	685a      	ldr	r2, [r3, #4]
 8011f38:	bb62      	cbnz	r2, 8011f94 <_malloc_r+0xdc>
 8011f3a:	f8c8 7000 	str.w	r7, [r8]
 8011f3e:	e00f      	b.n	8011f60 <_malloc_r+0xa8>
 8011f40:	6822      	ldr	r2, [r4, #0]
 8011f42:	1b52      	subs	r2, r2, r5
 8011f44:	d420      	bmi.n	8011f88 <_malloc_r+0xd0>
 8011f46:	2a0b      	cmp	r2, #11
 8011f48:	d917      	bls.n	8011f7a <_malloc_r+0xc2>
 8011f4a:	1961      	adds	r1, r4, r5
 8011f4c:	42a3      	cmp	r3, r4
 8011f4e:	6025      	str	r5, [r4, #0]
 8011f50:	bf18      	it	ne
 8011f52:	6059      	strne	r1, [r3, #4]
 8011f54:	6863      	ldr	r3, [r4, #4]
 8011f56:	bf08      	it	eq
 8011f58:	f8c8 1000 	streq.w	r1, [r8]
 8011f5c:	5162      	str	r2, [r4, r5]
 8011f5e:	604b      	str	r3, [r1, #4]
 8011f60:	4630      	mov	r0, r6
 8011f62:	f000 f82f 	bl	8011fc4 <__malloc_unlock>
 8011f66:	f104 000b 	add.w	r0, r4, #11
 8011f6a:	1d23      	adds	r3, r4, #4
 8011f6c:	f020 0007 	bic.w	r0, r0, #7
 8011f70:	1ac2      	subs	r2, r0, r3
 8011f72:	bf1c      	itt	ne
 8011f74:	1a1b      	subne	r3, r3, r0
 8011f76:	50a3      	strne	r3, [r4, r2]
 8011f78:	e7af      	b.n	8011eda <_malloc_r+0x22>
 8011f7a:	6862      	ldr	r2, [r4, #4]
 8011f7c:	42a3      	cmp	r3, r4
 8011f7e:	bf0c      	ite	eq
 8011f80:	f8c8 2000 	streq.w	r2, [r8]
 8011f84:	605a      	strne	r2, [r3, #4]
 8011f86:	e7eb      	b.n	8011f60 <_malloc_r+0xa8>
 8011f88:	4623      	mov	r3, r4
 8011f8a:	6864      	ldr	r4, [r4, #4]
 8011f8c:	e7ae      	b.n	8011eec <_malloc_r+0x34>
 8011f8e:	463c      	mov	r4, r7
 8011f90:	687f      	ldr	r7, [r7, #4]
 8011f92:	e7b6      	b.n	8011f02 <_malloc_r+0x4a>
 8011f94:	461a      	mov	r2, r3
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	42a3      	cmp	r3, r4
 8011f9a:	d1fb      	bne.n	8011f94 <_malloc_r+0xdc>
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	6053      	str	r3, [r2, #4]
 8011fa0:	e7de      	b.n	8011f60 <_malloc_r+0xa8>
 8011fa2:	230c      	movs	r3, #12
 8011fa4:	6033      	str	r3, [r6, #0]
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	f000 f80c 	bl	8011fc4 <__malloc_unlock>
 8011fac:	e794      	b.n	8011ed8 <_malloc_r+0x20>
 8011fae:	6005      	str	r5, [r0, #0]
 8011fb0:	e7d6      	b.n	8011f60 <_malloc_r+0xa8>
 8011fb2:	bf00      	nop
 8011fb4:	24001bac 	.word	0x24001bac

08011fb8 <__malloc_lock>:
 8011fb8:	4801      	ldr	r0, [pc, #4]	@ (8011fc0 <__malloc_lock+0x8>)
 8011fba:	f7ff bf01 	b.w	8011dc0 <__retarget_lock_acquire_recursive>
 8011fbe:	bf00      	nop
 8011fc0:	24001ba4 	.word	0x24001ba4

08011fc4 <__malloc_unlock>:
 8011fc4:	4801      	ldr	r0, [pc, #4]	@ (8011fcc <__malloc_unlock+0x8>)
 8011fc6:	f7ff befc 	b.w	8011dc2 <__retarget_lock_release_recursive>
 8011fca:	bf00      	nop
 8011fcc:	24001ba4 	.word	0x24001ba4

08011fd0 <__ssputs_r>:
 8011fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fd4:	688e      	ldr	r6, [r1, #8]
 8011fd6:	461f      	mov	r7, r3
 8011fd8:	42be      	cmp	r6, r7
 8011fda:	680b      	ldr	r3, [r1, #0]
 8011fdc:	4682      	mov	sl, r0
 8011fde:	460c      	mov	r4, r1
 8011fe0:	4690      	mov	r8, r2
 8011fe2:	d82d      	bhi.n	8012040 <__ssputs_r+0x70>
 8011fe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011fe8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011fec:	d026      	beq.n	801203c <__ssputs_r+0x6c>
 8011fee:	6965      	ldr	r5, [r4, #20]
 8011ff0:	6909      	ldr	r1, [r1, #16]
 8011ff2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ff6:	eba3 0901 	sub.w	r9, r3, r1
 8011ffa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ffe:	1c7b      	adds	r3, r7, #1
 8012000:	444b      	add	r3, r9
 8012002:	106d      	asrs	r5, r5, #1
 8012004:	429d      	cmp	r5, r3
 8012006:	bf38      	it	cc
 8012008:	461d      	movcc	r5, r3
 801200a:	0553      	lsls	r3, r2, #21
 801200c:	d527      	bpl.n	801205e <__ssputs_r+0x8e>
 801200e:	4629      	mov	r1, r5
 8012010:	f7ff ff52 	bl	8011eb8 <_malloc_r>
 8012014:	4606      	mov	r6, r0
 8012016:	b360      	cbz	r0, 8012072 <__ssputs_r+0xa2>
 8012018:	6921      	ldr	r1, [r4, #16]
 801201a:	464a      	mov	r2, r9
 801201c:	f7ff fed2 	bl	8011dc4 <memcpy>
 8012020:	89a3      	ldrh	r3, [r4, #12]
 8012022:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801202a:	81a3      	strh	r3, [r4, #12]
 801202c:	6126      	str	r6, [r4, #16]
 801202e:	6165      	str	r5, [r4, #20]
 8012030:	444e      	add	r6, r9
 8012032:	eba5 0509 	sub.w	r5, r5, r9
 8012036:	6026      	str	r6, [r4, #0]
 8012038:	60a5      	str	r5, [r4, #8]
 801203a:	463e      	mov	r6, r7
 801203c:	42be      	cmp	r6, r7
 801203e:	d900      	bls.n	8012042 <__ssputs_r+0x72>
 8012040:	463e      	mov	r6, r7
 8012042:	6820      	ldr	r0, [r4, #0]
 8012044:	4632      	mov	r2, r6
 8012046:	4641      	mov	r1, r8
 8012048:	f000 faa8 	bl	801259c <memmove>
 801204c:	68a3      	ldr	r3, [r4, #8]
 801204e:	1b9b      	subs	r3, r3, r6
 8012050:	60a3      	str	r3, [r4, #8]
 8012052:	6823      	ldr	r3, [r4, #0]
 8012054:	4433      	add	r3, r6
 8012056:	6023      	str	r3, [r4, #0]
 8012058:	2000      	movs	r0, #0
 801205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801205e:	462a      	mov	r2, r5
 8012060:	f000 fac6 	bl	80125f0 <_realloc_r>
 8012064:	4606      	mov	r6, r0
 8012066:	2800      	cmp	r0, #0
 8012068:	d1e0      	bne.n	801202c <__ssputs_r+0x5c>
 801206a:	6921      	ldr	r1, [r4, #16]
 801206c:	4650      	mov	r0, sl
 801206e:	f7ff feb7 	bl	8011de0 <_free_r>
 8012072:	230c      	movs	r3, #12
 8012074:	f8ca 3000 	str.w	r3, [sl]
 8012078:	89a3      	ldrh	r3, [r4, #12]
 801207a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801207e:	81a3      	strh	r3, [r4, #12]
 8012080:	f04f 30ff 	mov.w	r0, #4294967295
 8012084:	e7e9      	b.n	801205a <__ssputs_r+0x8a>
	...

08012088 <_svfiprintf_r>:
 8012088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208c:	4698      	mov	r8, r3
 801208e:	898b      	ldrh	r3, [r1, #12]
 8012090:	061b      	lsls	r3, r3, #24
 8012092:	b09d      	sub	sp, #116	@ 0x74
 8012094:	4607      	mov	r7, r0
 8012096:	460d      	mov	r5, r1
 8012098:	4614      	mov	r4, r2
 801209a:	d510      	bpl.n	80120be <_svfiprintf_r+0x36>
 801209c:	690b      	ldr	r3, [r1, #16]
 801209e:	b973      	cbnz	r3, 80120be <_svfiprintf_r+0x36>
 80120a0:	2140      	movs	r1, #64	@ 0x40
 80120a2:	f7ff ff09 	bl	8011eb8 <_malloc_r>
 80120a6:	6028      	str	r0, [r5, #0]
 80120a8:	6128      	str	r0, [r5, #16]
 80120aa:	b930      	cbnz	r0, 80120ba <_svfiprintf_r+0x32>
 80120ac:	230c      	movs	r3, #12
 80120ae:	603b      	str	r3, [r7, #0]
 80120b0:	f04f 30ff 	mov.w	r0, #4294967295
 80120b4:	b01d      	add	sp, #116	@ 0x74
 80120b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ba:	2340      	movs	r3, #64	@ 0x40
 80120bc:	616b      	str	r3, [r5, #20]
 80120be:	2300      	movs	r3, #0
 80120c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80120c2:	2320      	movs	r3, #32
 80120c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80120cc:	2330      	movs	r3, #48	@ 0x30
 80120ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801226c <_svfiprintf_r+0x1e4>
 80120d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120d6:	f04f 0901 	mov.w	r9, #1
 80120da:	4623      	mov	r3, r4
 80120dc:	469a      	mov	sl, r3
 80120de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120e2:	b10a      	cbz	r2, 80120e8 <_svfiprintf_r+0x60>
 80120e4:	2a25      	cmp	r2, #37	@ 0x25
 80120e6:	d1f9      	bne.n	80120dc <_svfiprintf_r+0x54>
 80120e8:	ebba 0b04 	subs.w	fp, sl, r4
 80120ec:	d00b      	beq.n	8012106 <_svfiprintf_r+0x7e>
 80120ee:	465b      	mov	r3, fp
 80120f0:	4622      	mov	r2, r4
 80120f2:	4629      	mov	r1, r5
 80120f4:	4638      	mov	r0, r7
 80120f6:	f7ff ff6b 	bl	8011fd0 <__ssputs_r>
 80120fa:	3001      	adds	r0, #1
 80120fc:	f000 80a7 	beq.w	801224e <_svfiprintf_r+0x1c6>
 8012100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012102:	445a      	add	r2, fp
 8012104:	9209      	str	r2, [sp, #36]	@ 0x24
 8012106:	f89a 3000 	ldrb.w	r3, [sl]
 801210a:	2b00      	cmp	r3, #0
 801210c:	f000 809f 	beq.w	801224e <_svfiprintf_r+0x1c6>
 8012110:	2300      	movs	r3, #0
 8012112:	f04f 32ff 	mov.w	r2, #4294967295
 8012116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801211a:	f10a 0a01 	add.w	sl, sl, #1
 801211e:	9304      	str	r3, [sp, #16]
 8012120:	9307      	str	r3, [sp, #28]
 8012122:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012126:	931a      	str	r3, [sp, #104]	@ 0x68
 8012128:	4654      	mov	r4, sl
 801212a:	2205      	movs	r2, #5
 801212c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012130:	484e      	ldr	r0, [pc, #312]	@ (801226c <_svfiprintf_r+0x1e4>)
 8012132:	f7ee f8f5 	bl	8000320 <memchr>
 8012136:	9a04      	ldr	r2, [sp, #16]
 8012138:	b9d8      	cbnz	r0, 8012172 <_svfiprintf_r+0xea>
 801213a:	06d0      	lsls	r0, r2, #27
 801213c:	bf44      	itt	mi
 801213e:	2320      	movmi	r3, #32
 8012140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012144:	0711      	lsls	r1, r2, #28
 8012146:	bf44      	itt	mi
 8012148:	232b      	movmi	r3, #43	@ 0x2b
 801214a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801214e:	f89a 3000 	ldrb.w	r3, [sl]
 8012152:	2b2a      	cmp	r3, #42	@ 0x2a
 8012154:	d015      	beq.n	8012182 <_svfiprintf_r+0xfa>
 8012156:	9a07      	ldr	r2, [sp, #28]
 8012158:	4654      	mov	r4, sl
 801215a:	2000      	movs	r0, #0
 801215c:	f04f 0c0a 	mov.w	ip, #10
 8012160:	4621      	mov	r1, r4
 8012162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012166:	3b30      	subs	r3, #48	@ 0x30
 8012168:	2b09      	cmp	r3, #9
 801216a:	d94b      	bls.n	8012204 <_svfiprintf_r+0x17c>
 801216c:	b1b0      	cbz	r0, 801219c <_svfiprintf_r+0x114>
 801216e:	9207      	str	r2, [sp, #28]
 8012170:	e014      	b.n	801219c <_svfiprintf_r+0x114>
 8012172:	eba0 0308 	sub.w	r3, r0, r8
 8012176:	fa09 f303 	lsl.w	r3, r9, r3
 801217a:	4313      	orrs	r3, r2
 801217c:	9304      	str	r3, [sp, #16]
 801217e:	46a2      	mov	sl, r4
 8012180:	e7d2      	b.n	8012128 <_svfiprintf_r+0xa0>
 8012182:	9b03      	ldr	r3, [sp, #12]
 8012184:	1d19      	adds	r1, r3, #4
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	9103      	str	r1, [sp, #12]
 801218a:	2b00      	cmp	r3, #0
 801218c:	bfbb      	ittet	lt
 801218e:	425b      	neglt	r3, r3
 8012190:	f042 0202 	orrlt.w	r2, r2, #2
 8012194:	9307      	strge	r3, [sp, #28]
 8012196:	9307      	strlt	r3, [sp, #28]
 8012198:	bfb8      	it	lt
 801219a:	9204      	strlt	r2, [sp, #16]
 801219c:	7823      	ldrb	r3, [r4, #0]
 801219e:	2b2e      	cmp	r3, #46	@ 0x2e
 80121a0:	d10a      	bne.n	80121b8 <_svfiprintf_r+0x130>
 80121a2:	7863      	ldrb	r3, [r4, #1]
 80121a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80121a6:	d132      	bne.n	801220e <_svfiprintf_r+0x186>
 80121a8:	9b03      	ldr	r3, [sp, #12]
 80121aa:	1d1a      	adds	r2, r3, #4
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	9203      	str	r2, [sp, #12]
 80121b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121b4:	3402      	adds	r4, #2
 80121b6:	9305      	str	r3, [sp, #20]
 80121b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801227c <_svfiprintf_r+0x1f4>
 80121bc:	7821      	ldrb	r1, [r4, #0]
 80121be:	2203      	movs	r2, #3
 80121c0:	4650      	mov	r0, sl
 80121c2:	f7ee f8ad 	bl	8000320 <memchr>
 80121c6:	b138      	cbz	r0, 80121d8 <_svfiprintf_r+0x150>
 80121c8:	9b04      	ldr	r3, [sp, #16]
 80121ca:	eba0 000a 	sub.w	r0, r0, sl
 80121ce:	2240      	movs	r2, #64	@ 0x40
 80121d0:	4082      	lsls	r2, r0
 80121d2:	4313      	orrs	r3, r2
 80121d4:	3401      	adds	r4, #1
 80121d6:	9304      	str	r3, [sp, #16]
 80121d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121dc:	4824      	ldr	r0, [pc, #144]	@ (8012270 <_svfiprintf_r+0x1e8>)
 80121de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121e2:	2206      	movs	r2, #6
 80121e4:	f7ee f89c 	bl	8000320 <memchr>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d036      	beq.n	801225a <_svfiprintf_r+0x1d2>
 80121ec:	4b21      	ldr	r3, [pc, #132]	@ (8012274 <_svfiprintf_r+0x1ec>)
 80121ee:	bb1b      	cbnz	r3, 8012238 <_svfiprintf_r+0x1b0>
 80121f0:	9b03      	ldr	r3, [sp, #12]
 80121f2:	3307      	adds	r3, #7
 80121f4:	f023 0307 	bic.w	r3, r3, #7
 80121f8:	3308      	adds	r3, #8
 80121fa:	9303      	str	r3, [sp, #12]
 80121fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121fe:	4433      	add	r3, r6
 8012200:	9309      	str	r3, [sp, #36]	@ 0x24
 8012202:	e76a      	b.n	80120da <_svfiprintf_r+0x52>
 8012204:	fb0c 3202 	mla	r2, ip, r2, r3
 8012208:	460c      	mov	r4, r1
 801220a:	2001      	movs	r0, #1
 801220c:	e7a8      	b.n	8012160 <_svfiprintf_r+0xd8>
 801220e:	2300      	movs	r3, #0
 8012210:	3401      	adds	r4, #1
 8012212:	9305      	str	r3, [sp, #20]
 8012214:	4619      	mov	r1, r3
 8012216:	f04f 0c0a 	mov.w	ip, #10
 801221a:	4620      	mov	r0, r4
 801221c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012220:	3a30      	subs	r2, #48	@ 0x30
 8012222:	2a09      	cmp	r2, #9
 8012224:	d903      	bls.n	801222e <_svfiprintf_r+0x1a6>
 8012226:	2b00      	cmp	r3, #0
 8012228:	d0c6      	beq.n	80121b8 <_svfiprintf_r+0x130>
 801222a:	9105      	str	r1, [sp, #20]
 801222c:	e7c4      	b.n	80121b8 <_svfiprintf_r+0x130>
 801222e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012232:	4604      	mov	r4, r0
 8012234:	2301      	movs	r3, #1
 8012236:	e7f0      	b.n	801221a <_svfiprintf_r+0x192>
 8012238:	ab03      	add	r3, sp, #12
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	462a      	mov	r2, r5
 801223e:	4b0e      	ldr	r3, [pc, #56]	@ (8012278 <_svfiprintf_r+0x1f0>)
 8012240:	a904      	add	r1, sp, #16
 8012242:	4638      	mov	r0, r7
 8012244:	f3af 8000 	nop.w
 8012248:	1c42      	adds	r2, r0, #1
 801224a:	4606      	mov	r6, r0
 801224c:	d1d6      	bne.n	80121fc <_svfiprintf_r+0x174>
 801224e:	89ab      	ldrh	r3, [r5, #12]
 8012250:	065b      	lsls	r3, r3, #25
 8012252:	f53f af2d 	bmi.w	80120b0 <_svfiprintf_r+0x28>
 8012256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012258:	e72c      	b.n	80120b4 <_svfiprintf_r+0x2c>
 801225a:	ab03      	add	r3, sp, #12
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	462a      	mov	r2, r5
 8012260:	4b05      	ldr	r3, [pc, #20]	@ (8012278 <_svfiprintf_r+0x1f0>)
 8012262:	a904      	add	r1, sp, #16
 8012264:	4638      	mov	r0, r7
 8012266:	f000 f879 	bl	801235c <_printf_i>
 801226a:	e7ed      	b.n	8012248 <_svfiprintf_r+0x1c0>
 801226c:	08012ae4 	.word	0x08012ae4
 8012270:	08012aee 	.word	0x08012aee
 8012274:	00000000 	.word	0x00000000
 8012278:	08011fd1 	.word	0x08011fd1
 801227c:	08012aea 	.word	0x08012aea

08012280 <_printf_common>:
 8012280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012284:	4616      	mov	r6, r2
 8012286:	4698      	mov	r8, r3
 8012288:	688a      	ldr	r2, [r1, #8]
 801228a:	690b      	ldr	r3, [r1, #16]
 801228c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012290:	4293      	cmp	r3, r2
 8012292:	bfb8      	it	lt
 8012294:	4613      	movlt	r3, r2
 8012296:	6033      	str	r3, [r6, #0]
 8012298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801229c:	4607      	mov	r7, r0
 801229e:	460c      	mov	r4, r1
 80122a0:	b10a      	cbz	r2, 80122a6 <_printf_common+0x26>
 80122a2:	3301      	adds	r3, #1
 80122a4:	6033      	str	r3, [r6, #0]
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	0699      	lsls	r1, r3, #26
 80122aa:	bf42      	ittt	mi
 80122ac:	6833      	ldrmi	r3, [r6, #0]
 80122ae:	3302      	addmi	r3, #2
 80122b0:	6033      	strmi	r3, [r6, #0]
 80122b2:	6825      	ldr	r5, [r4, #0]
 80122b4:	f015 0506 	ands.w	r5, r5, #6
 80122b8:	d106      	bne.n	80122c8 <_printf_common+0x48>
 80122ba:	f104 0a19 	add.w	sl, r4, #25
 80122be:	68e3      	ldr	r3, [r4, #12]
 80122c0:	6832      	ldr	r2, [r6, #0]
 80122c2:	1a9b      	subs	r3, r3, r2
 80122c4:	42ab      	cmp	r3, r5
 80122c6:	dc26      	bgt.n	8012316 <_printf_common+0x96>
 80122c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80122cc:	6822      	ldr	r2, [r4, #0]
 80122ce:	3b00      	subs	r3, #0
 80122d0:	bf18      	it	ne
 80122d2:	2301      	movne	r3, #1
 80122d4:	0692      	lsls	r2, r2, #26
 80122d6:	d42b      	bmi.n	8012330 <_printf_common+0xb0>
 80122d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80122dc:	4641      	mov	r1, r8
 80122de:	4638      	mov	r0, r7
 80122e0:	47c8      	blx	r9
 80122e2:	3001      	adds	r0, #1
 80122e4:	d01e      	beq.n	8012324 <_printf_common+0xa4>
 80122e6:	6823      	ldr	r3, [r4, #0]
 80122e8:	6922      	ldr	r2, [r4, #16]
 80122ea:	f003 0306 	and.w	r3, r3, #6
 80122ee:	2b04      	cmp	r3, #4
 80122f0:	bf02      	ittt	eq
 80122f2:	68e5      	ldreq	r5, [r4, #12]
 80122f4:	6833      	ldreq	r3, [r6, #0]
 80122f6:	1aed      	subeq	r5, r5, r3
 80122f8:	68a3      	ldr	r3, [r4, #8]
 80122fa:	bf0c      	ite	eq
 80122fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012300:	2500      	movne	r5, #0
 8012302:	4293      	cmp	r3, r2
 8012304:	bfc4      	itt	gt
 8012306:	1a9b      	subgt	r3, r3, r2
 8012308:	18ed      	addgt	r5, r5, r3
 801230a:	2600      	movs	r6, #0
 801230c:	341a      	adds	r4, #26
 801230e:	42b5      	cmp	r5, r6
 8012310:	d11a      	bne.n	8012348 <_printf_common+0xc8>
 8012312:	2000      	movs	r0, #0
 8012314:	e008      	b.n	8012328 <_printf_common+0xa8>
 8012316:	2301      	movs	r3, #1
 8012318:	4652      	mov	r2, sl
 801231a:	4641      	mov	r1, r8
 801231c:	4638      	mov	r0, r7
 801231e:	47c8      	blx	r9
 8012320:	3001      	adds	r0, #1
 8012322:	d103      	bne.n	801232c <_printf_common+0xac>
 8012324:	f04f 30ff 	mov.w	r0, #4294967295
 8012328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801232c:	3501      	adds	r5, #1
 801232e:	e7c6      	b.n	80122be <_printf_common+0x3e>
 8012330:	18e1      	adds	r1, r4, r3
 8012332:	1c5a      	adds	r2, r3, #1
 8012334:	2030      	movs	r0, #48	@ 0x30
 8012336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801233a:	4422      	add	r2, r4
 801233c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012344:	3302      	adds	r3, #2
 8012346:	e7c7      	b.n	80122d8 <_printf_common+0x58>
 8012348:	2301      	movs	r3, #1
 801234a:	4622      	mov	r2, r4
 801234c:	4641      	mov	r1, r8
 801234e:	4638      	mov	r0, r7
 8012350:	47c8      	blx	r9
 8012352:	3001      	adds	r0, #1
 8012354:	d0e6      	beq.n	8012324 <_printf_common+0xa4>
 8012356:	3601      	adds	r6, #1
 8012358:	e7d9      	b.n	801230e <_printf_common+0x8e>
	...

0801235c <_printf_i>:
 801235c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012360:	7e0f      	ldrb	r7, [r1, #24]
 8012362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012364:	2f78      	cmp	r7, #120	@ 0x78
 8012366:	4691      	mov	r9, r2
 8012368:	4680      	mov	r8, r0
 801236a:	460c      	mov	r4, r1
 801236c:	469a      	mov	sl, r3
 801236e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012372:	d807      	bhi.n	8012384 <_printf_i+0x28>
 8012374:	2f62      	cmp	r7, #98	@ 0x62
 8012376:	d80a      	bhi.n	801238e <_printf_i+0x32>
 8012378:	2f00      	cmp	r7, #0
 801237a:	f000 80d2 	beq.w	8012522 <_printf_i+0x1c6>
 801237e:	2f58      	cmp	r7, #88	@ 0x58
 8012380:	f000 80b9 	beq.w	80124f6 <_printf_i+0x19a>
 8012384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801238c:	e03a      	b.n	8012404 <_printf_i+0xa8>
 801238e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012392:	2b15      	cmp	r3, #21
 8012394:	d8f6      	bhi.n	8012384 <_printf_i+0x28>
 8012396:	a101      	add	r1, pc, #4	@ (adr r1, 801239c <_printf_i+0x40>)
 8012398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801239c:	080123f5 	.word	0x080123f5
 80123a0:	08012409 	.word	0x08012409
 80123a4:	08012385 	.word	0x08012385
 80123a8:	08012385 	.word	0x08012385
 80123ac:	08012385 	.word	0x08012385
 80123b0:	08012385 	.word	0x08012385
 80123b4:	08012409 	.word	0x08012409
 80123b8:	08012385 	.word	0x08012385
 80123bc:	08012385 	.word	0x08012385
 80123c0:	08012385 	.word	0x08012385
 80123c4:	08012385 	.word	0x08012385
 80123c8:	08012509 	.word	0x08012509
 80123cc:	08012433 	.word	0x08012433
 80123d0:	080124c3 	.word	0x080124c3
 80123d4:	08012385 	.word	0x08012385
 80123d8:	08012385 	.word	0x08012385
 80123dc:	0801252b 	.word	0x0801252b
 80123e0:	08012385 	.word	0x08012385
 80123e4:	08012433 	.word	0x08012433
 80123e8:	08012385 	.word	0x08012385
 80123ec:	08012385 	.word	0x08012385
 80123f0:	080124cb 	.word	0x080124cb
 80123f4:	6833      	ldr	r3, [r6, #0]
 80123f6:	1d1a      	adds	r2, r3, #4
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	6032      	str	r2, [r6, #0]
 80123fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012404:	2301      	movs	r3, #1
 8012406:	e09d      	b.n	8012544 <_printf_i+0x1e8>
 8012408:	6833      	ldr	r3, [r6, #0]
 801240a:	6820      	ldr	r0, [r4, #0]
 801240c:	1d19      	adds	r1, r3, #4
 801240e:	6031      	str	r1, [r6, #0]
 8012410:	0606      	lsls	r6, r0, #24
 8012412:	d501      	bpl.n	8012418 <_printf_i+0xbc>
 8012414:	681d      	ldr	r5, [r3, #0]
 8012416:	e003      	b.n	8012420 <_printf_i+0xc4>
 8012418:	0645      	lsls	r5, r0, #25
 801241a:	d5fb      	bpl.n	8012414 <_printf_i+0xb8>
 801241c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012420:	2d00      	cmp	r5, #0
 8012422:	da03      	bge.n	801242c <_printf_i+0xd0>
 8012424:	232d      	movs	r3, #45	@ 0x2d
 8012426:	426d      	negs	r5, r5
 8012428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801242c:	4859      	ldr	r0, [pc, #356]	@ (8012594 <_printf_i+0x238>)
 801242e:	230a      	movs	r3, #10
 8012430:	e011      	b.n	8012456 <_printf_i+0xfa>
 8012432:	6821      	ldr	r1, [r4, #0]
 8012434:	6833      	ldr	r3, [r6, #0]
 8012436:	0608      	lsls	r0, r1, #24
 8012438:	f853 5b04 	ldr.w	r5, [r3], #4
 801243c:	d402      	bmi.n	8012444 <_printf_i+0xe8>
 801243e:	0649      	lsls	r1, r1, #25
 8012440:	bf48      	it	mi
 8012442:	b2ad      	uxthmi	r5, r5
 8012444:	2f6f      	cmp	r7, #111	@ 0x6f
 8012446:	4853      	ldr	r0, [pc, #332]	@ (8012594 <_printf_i+0x238>)
 8012448:	6033      	str	r3, [r6, #0]
 801244a:	bf14      	ite	ne
 801244c:	230a      	movne	r3, #10
 801244e:	2308      	moveq	r3, #8
 8012450:	2100      	movs	r1, #0
 8012452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012456:	6866      	ldr	r6, [r4, #4]
 8012458:	60a6      	str	r6, [r4, #8]
 801245a:	2e00      	cmp	r6, #0
 801245c:	bfa2      	ittt	ge
 801245e:	6821      	ldrge	r1, [r4, #0]
 8012460:	f021 0104 	bicge.w	r1, r1, #4
 8012464:	6021      	strge	r1, [r4, #0]
 8012466:	b90d      	cbnz	r5, 801246c <_printf_i+0x110>
 8012468:	2e00      	cmp	r6, #0
 801246a:	d04b      	beq.n	8012504 <_printf_i+0x1a8>
 801246c:	4616      	mov	r6, r2
 801246e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012472:	fb03 5711 	mls	r7, r3, r1, r5
 8012476:	5dc7      	ldrb	r7, [r0, r7]
 8012478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801247c:	462f      	mov	r7, r5
 801247e:	42bb      	cmp	r3, r7
 8012480:	460d      	mov	r5, r1
 8012482:	d9f4      	bls.n	801246e <_printf_i+0x112>
 8012484:	2b08      	cmp	r3, #8
 8012486:	d10b      	bne.n	80124a0 <_printf_i+0x144>
 8012488:	6823      	ldr	r3, [r4, #0]
 801248a:	07df      	lsls	r7, r3, #31
 801248c:	d508      	bpl.n	80124a0 <_printf_i+0x144>
 801248e:	6923      	ldr	r3, [r4, #16]
 8012490:	6861      	ldr	r1, [r4, #4]
 8012492:	4299      	cmp	r1, r3
 8012494:	bfde      	ittt	le
 8012496:	2330      	movle	r3, #48	@ 0x30
 8012498:	f806 3c01 	strble.w	r3, [r6, #-1]
 801249c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80124a0:	1b92      	subs	r2, r2, r6
 80124a2:	6122      	str	r2, [r4, #16]
 80124a4:	f8cd a000 	str.w	sl, [sp]
 80124a8:	464b      	mov	r3, r9
 80124aa:	aa03      	add	r2, sp, #12
 80124ac:	4621      	mov	r1, r4
 80124ae:	4640      	mov	r0, r8
 80124b0:	f7ff fee6 	bl	8012280 <_printf_common>
 80124b4:	3001      	adds	r0, #1
 80124b6:	d14a      	bne.n	801254e <_printf_i+0x1f2>
 80124b8:	f04f 30ff 	mov.w	r0, #4294967295
 80124bc:	b004      	add	sp, #16
 80124be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124c2:	6823      	ldr	r3, [r4, #0]
 80124c4:	f043 0320 	orr.w	r3, r3, #32
 80124c8:	6023      	str	r3, [r4, #0]
 80124ca:	4833      	ldr	r0, [pc, #204]	@ (8012598 <_printf_i+0x23c>)
 80124cc:	2778      	movs	r7, #120	@ 0x78
 80124ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80124d2:	6823      	ldr	r3, [r4, #0]
 80124d4:	6831      	ldr	r1, [r6, #0]
 80124d6:	061f      	lsls	r7, r3, #24
 80124d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80124dc:	d402      	bmi.n	80124e4 <_printf_i+0x188>
 80124de:	065f      	lsls	r7, r3, #25
 80124e0:	bf48      	it	mi
 80124e2:	b2ad      	uxthmi	r5, r5
 80124e4:	6031      	str	r1, [r6, #0]
 80124e6:	07d9      	lsls	r1, r3, #31
 80124e8:	bf44      	itt	mi
 80124ea:	f043 0320 	orrmi.w	r3, r3, #32
 80124ee:	6023      	strmi	r3, [r4, #0]
 80124f0:	b11d      	cbz	r5, 80124fa <_printf_i+0x19e>
 80124f2:	2310      	movs	r3, #16
 80124f4:	e7ac      	b.n	8012450 <_printf_i+0xf4>
 80124f6:	4827      	ldr	r0, [pc, #156]	@ (8012594 <_printf_i+0x238>)
 80124f8:	e7e9      	b.n	80124ce <_printf_i+0x172>
 80124fa:	6823      	ldr	r3, [r4, #0]
 80124fc:	f023 0320 	bic.w	r3, r3, #32
 8012500:	6023      	str	r3, [r4, #0]
 8012502:	e7f6      	b.n	80124f2 <_printf_i+0x196>
 8012504:	4616      	mov	r6, r2
 8012506:	e7bd      	b.n	8012484 <_printf_i+0x128>
 8012508:	6833      	ldr	r3, [r6, #0]
 801250a:	6825      	ldr	r5, [r4, #0]
 801250c:	6961      	ldr	r1, [r4, #20]
 801250e:	1d18      	adds	r0, r3, #4
 8012510:	6030      	str	r0, [r6, #0]
 8012512:	062e      	lsls	r6, r5, #24
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	d501      	bpl.n	801251c <_printf_i+0x1c0>
 8012518:	6019      	str	r1, [r3, #0]
 801251a:	e002      	b.n	8012522 <_printf_i+0x1c6>
 801251c:	0668      	lsls	r0, r5, #25
 801251e:	d5fb      	bpl.n	8012518 <_printf_i+0x1bc>
 8012520:	8019      	strh	r1, [r3, #0]
 8012522:	2300      	movs	r3, #0
 8012524:	6123      	str	r3, [r4, #16]
 8012526:	4616      	mov	r6, r2
 8012528:	e7bc      	b.n	80124a4 <_printf_i+0x148>
 801252a:	6833      	ldr	r3, [r6, #0]
 801252c:	1d1a      	adds	r2, r3, #4
 801252e:	6032      	str	r2, [r6, #0]
 8012530:	681e      	ldr	r6, [r3, #0]
 8012532:	6862      	ldr	r2, [r4, #4]
 8012534:	2100      	movs	r1, #0
 8012536:	4630      	mov	r0, r6
 8012538:	f7ed fef2 	bl	8000320 <memchr>
 801253c:	b108      	cbz	r0, 8012542 <_printf_i+0x1e6>
 801253e:	1b80      	subs	r0, r0, r6
 8012540:	6060      	str	r0, [r4, #4]
 8012542:	6863      	ldr	r3, [r4, #4]
 8012544:	6123      	str	r3, [r4, #16]
 8012546:	2300      	movs	r3, #0
 8012548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801254c:	e7aa      	b.n	80124a4 <_printf_i+0x148>
 801254e:	6923      	ldr	r3, [r4, #16]
 8012550:	4632      	mov	r2, r6
 8012552:	4649      	mov	r1, r9
 8012554:	4640      	mov	r0, r8
 8012556:	47d0      	blx	sl
 8012558:	3001      	adds	r0, #1
 801255a:	d0ad      	beq.n	80124b8 <_printf_i+0x15c>
 801255c:	6823      	ldr	r3, [r4, #0]
 801255e:	079b      	lsls	r3, r3, #30
 8012560:	d413      	bmi.n	801258a <_printf_i+0x22e>
 8012562:	68e0      	ldr	r0, [r4, #12]
 8012564:	9b03      	ldr	r3, [sp, #12]
 8012566:	4298      	cmp	r0, r3
 8012568:	bfb8      	it	lt
 801256a:	4618      	movlt	r0, r3
 801256c:	e7a6      	b.n	80124bc <_printf_i+0x160>
 801256e:	2301      	movs	r3, #1
 8012570:	4632      	mov	r2, r6
 8012572:	4649      	mov	r1, r9
 8012574:	4640      	mov	r0, r8
 8012576:	47d0      	blx	sl
 8012578:	3001      	adds	r0, #1
 801257a:	d09d      	beq.n	80124b8 <_printf_i+0x15c>
 801257c:	3501      	adds	r5, #1
 801257e:	68e3      	ldr	r3, [r4, #12]
 8012580:	9903      	ldr	r1, [sp, #12]
 8012582:	1a5b      	subs	r3, r3, r1
 8012584:	42ab      	cmp	r3, r5
 8012586:	dcf2      	bgt.n	801256e <_printf_i+0x212>
 8012588:	e7eb      	b.n	8012562 <_printf_i+0x206>
 801258a:	2500      	movs	r5, #0
 801258c:	f104 0619 	add.w	r6, r4, #25
 8012590:	e7f5      	b.n	801257e <_printf_i+0x222>
 8012592:	bf00      	nop
 8012594:	08012af5 	.word	0x08012af5
 8012598:	08012b06 	.word	0x08012b06

0801259c <memmove>:
 801259c:	4288      	cmp	r0, r1
 801259e:	b510      	push	{r4, lr}
 80125a0:	eb01 0402 	add.w	r4, r1, r2
 80125a4:	d902      	bls.n	80125ac <memmove+0x10>
 80125a6:	4284      	cmp	r4, r0
 80125a8:	4623      	mov	r3, r4
 80125aa:	d807      	bhi.n	80125bc <memmove+0x20>
 80125ac:	1e43      	subs	r3, r0, #1
 80125ae:	42a1      	cmp	r1, r4
 80125b0:	d008      	beq.n	80125c4 <memmove+0x28>
 80125b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125ba:	e7f8      	b.n	80125ae <memmove+0x12>
 80125bc:	4402      	add	r2, r0
 80125be:	4601      	mov	r1, r0
 80125c0:	428a      	cmp	r2, r1
 80125c2:	d100      	bne.n	80125c6 <memmove+0x2a>
 80125c4:	bd10      	pop	{r4, pc}
 80125c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125ce:	e7f7      	b.n	80125c0 <memmove+0x24>

080125d0 <_sbrk_r>:
 80125d0:	b538      	push	{r3, r4, r5, lr}
 80125d2:	4d06      	ldr	r5, [pc, #24]	@ (80125ec <_sbrk_r+0x1c>)
 80125d4:	2300      	movs	r3, #0
 80125d6:	4604      	mov	r4, r0
 80125d8:	4608      	mov	r0, r1
 80125da:	602b      	str	r3, [r5, #0]
 80125dc:	f7f0 f882 	bl	80026e4 <_sbrk>
 80125e0:	1c43      	adds	r3, r0, #1
 80125e2:	d102      	bne.n	80125ea <_sbrk_r+0x1a>
 80125e4:	682b      	ldr	r3, [r5, #0]
 80125e6:	b103      	cbz	r3, 80125ea <_sbrk_r+0x1a>
 80125e8:	6023      	str	r3, [r4, #0]
 80125ea:	bd38      	pop	{r3, r4, r5, pc}
 80125ec:	24001ba0 	.word	0x24001ba0

080125f0 <_realloc_r>:
 80125f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125f4:	4680      	mov	r8, r0
 80125f6:	4615      	mov	r5, r2
 80125f8:	460c      	mov	r4, r1
 80125fa:	b921      	cbnz	r1, 8012606 <_realloc_r+0x16>
 80125fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012600:	4611      	mov	r1, r2
 8012602:	f7ff bc59 	b.w	8011eb8 <_malloc_r>
 8012606:	b92a      	cbnz	r2, 8012614 <_realloc_r+0x24>
 8012608:	f7ff fbea 	bl	8011de0 <_free_r>
 801260c:	2400      	movs	r4, #0
 801260e:	4620      	mov	r0, r4
 8012610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012614:	f000 f81a 	bl	801264c <_malloc_usable_size_r>
 8012618:	4285      	cmp	r5, r0
 801261a:	4606      	mov	r6, r0
 801261c:	d802      	bhi.n	8012624 <_realloc_r+0x34>
 801261e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012622:	d8f4      	bhi.n	801260e <_realloc_r+0x1e>
 8012624:	4629      	mov	r1, r5
 8012626:	4640      	mov	r0, r8
 8012628:	f7ff fc46 	bl	8011eb8 <_malloc_r>
 801262c:	4607      	mov	r7, r0
 801262e:	2800      	cmp	r0, #0
 8012630:	d0ec      	beq.n	801260c <_realloc_r+0x1c>
 8012632:	42b5      	cmp	r5, r6
 8012634:	462a      	mov	r2, r5
 8012636:	4621      	mov	r1, r4
 8012638:	bf28      	it	cs
 801263a:	4632      	movcs	r2, r6
 801263c:	f7ff fbc2 	bl	8011dc4 <memcpy>
 8012640:	4621      	mov	r1, r4
 8012642:	4640      	mov	r0, r8
 8012644:	f7ff fbcc 	bl	8011de0 <_free_r>
 8012648:	463c      	mov	r4, r7
 801264a:	e7e0      	b.n	801260e <_realloc_r+0x1e>

0801264c <_malloc_usable_size_r>:
 801264c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012650:	1f18      	subs	r0, r3, #4
 8012652:	2b00      	cmp	r3, #0
 8012654:	bfbc      	itt	lt
 8012656:	580b      	ldrlt	r3, [r1, r0]
 8012658:	18c0      	addlt	r0, r0, r3
 801265a:	4770      	bx	lr

0801265c <_init>:
 801265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801265e:	bf00      	nop
 8012660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012662:	bc08      	pop	{r3}
 8012664:	469e      	mov	lr, r3
 8012666:	4770      	bx	lr

08012668 <_fini>:
 8012668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801266a:	bf00      	nop
 801266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801266e:	bc08      	pop	{r3}
 8012670:	469e      	mov	lr, r3
 8012672:	4770      	bx	lr
