
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123ac  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0801267c  0801267c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012ae8  08012ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012af0  08012af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012af4  08012af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08012af8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b48  2400006c  08012b64  0001406c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001bb4  08012b64  00014bb4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028904  00000000  00000000  0001409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041fc  00000000  00000000  0003c99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002080  00000000  00000000  00040ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000195a  00000000  00000000  00042c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a603  00000000  00000000  0004457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ba5d  00000000  00000000  0007eb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179aa2  00000000  00000000  000aa5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022407c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092d0  00000000  00000000  002240c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  0022d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012664 	.word	0x08012664

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08012664 	.word	0x08012664

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <LPF_EMA_Init>:
 *      Author: RMG
 */

#include "LPF.h"

void LPF_EMA_Init(LPF_EMA *filt, float alpha){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	ed87 0a00 	vstr	s0, [r7]

	//Set filter coefficient

	LPF_EMA_SetAlpha(filt, alpha);
 80006bc:	ed97 0a00 	vldr	s0, [r7]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f808 	bl	80006d6 <LPF_EMA_SetAlpha>

	//Clear filter output

	filt->output = 0.0f;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <LPF_EMA_SetAlpha>:

void LPF_EMA_SetAlpha(LPF_EMA *filt, float alpha){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	ed87 0a00 	vstr	s0, [r7]

	//Correct filter

	if(alpha > 1.0f){
 80006e2:	edd7 7a00 	vldr	s15, [r7]
 80006e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f2:	dd03      	ble.n	80006fc <LPF_EMA_SetAlpha+0x26>
		alpha = 1.0f;
 80006f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	e009      	b.n	8000710 <LPF_EMA_SetAlpha+0x3a>

	}else if (alpha < 0.0f){
 80006fc:	edd7 7a00 	vldr	s15, [r7]
 8000700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000708:	d502      	bpl.n	8000710 <LPF_EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
	}

	//Set filter coefficient

	filt->alpha = alpha;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <LPF_EMA_Update>:

float LPF_EMA_Update(LPF_EMA *filt, float in){
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	ed87 0a00 	vstr	s0, [r7]

	filt->output = filt->alpha*in + (1-filt->alpha)*filt->output;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	ed93 7a00 	vldr	s14, [r3]
 8000734:	edd7 7a00 	vldr	s15, [r7]
 8000738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000746:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	edc3 7a01 	vstr	s15, [r3, #4]

	return filt->output;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
}
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f002 f890 	bl	800289c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f97e 	bl	8000a7c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000780:	f000 f9ea 	bl	8000b58 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 fdd0 	bl	8001328 <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 fdae 	bl	80012e8 <MX_DMA_Init>
  MX_ADC1_Init();
 800078c:	f000 fa16 	bl	8000bbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000790:	f000 fab0 	bl	8000cf4 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000794:	f000 fb16 	bl	8000dc4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000798:	f000 fb92 	bl	8000ec0 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 800079c:	f000 fc2c 	bl	8000ff8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 fd56 	bl	8001250 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80007a4:	f000 fce0 	bl	8001168 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fd06 	bl	80011b8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80007ac:	f000 fc06 	bl	8000fbc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007b0:	f010 f99a 	bl	8010ae8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	//Inicializar tarjeta microSD
	SDCard_start();
 80007b4:	f001 fa94 	bl	8001ce0 <SDCard_start>
	HAL_Delay(2000);
 80007b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007bc:	f002 f900 	bl	80029c0 <HAL_Delay>

	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer_adc, 3) != HAL_OK) {
 80007c0:	2203      	movs	r2, #3
 80007c2:	4983      	ldr	r1, [pc, #524]	@ (80009d0 <main+0x25c>)
 80007c4:	4883      	ldr	r0, [pc, #524]	@ (80009d4 <main+0x260>)
 80007c6:	f002 fe13 	bl	80033f0 <HAL_ADC_Start_DMA>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0x66>
#if DEBUG
		print("Error al inicializar ADC_DMA");
 80007d0:	4881      	ldr	r0, [pc, #516]	@ (80009d8 <main+0x264>)
 80007d2:	f000 fe8d 	bl	80014f0 <print>
#endif
		Error_Handler();
 80007d6:	f001 fb0e 	bl	8001df6 <Error_Handler>
	}
	//Inicializacion filtro paso bajo
	LPF_EMA_Init(&s1_filt, 0.2f);
 80007da:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 80009dc <main+0x268>
 80007de:	4880      	ldr	r0, [pc, #512]	@ (80009e0 <main+0x26c>)
 80007e0:	f7ff ff66 	bl	80006b0 <LPF_EMA_Init>
	LPF_EMA_Init(&s2_filt, 0.2f);
 80007e4:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 80009dc <main+0x268>
 80007e8:	487e      	ldr	r0, [pc, #504]	@ (80009e4 <main+0x270>)
 80007ea:	f7ff ff61 	bl	80006b0 <LPF_EMA_Init>

	//Inicialización de buses CAN
	//Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80007ee:	487e      	ldr	r0, [pc, #504]	@ (80009e8 <main+0x274>)
 80007f0:	f006 fde0 	bl	80073b4 <HAL_FDCAN_Start>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <main+0x90>
#if DEBUG
		print("Error al inicializar CAN_INV");
 80007fa:	487c      	ldr	r0, [pc, #496]	@ (80009ec <main+0x278>)
 80007fc:	f000 fe78 	bl	80014f0 <print>
#endif
		Error_Handler();
 8000800:	f001 faf9 	bl	8001df6 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4877      	ldr	r0, [pc, #476]	@ (80009e8 <main+0x274>)
 800080a:	f007 f815 	bl	8007838 <HAL_FDCAN_ActivateNotification>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <main+0xaa>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000814:	4876      	ldr	r0, [pc, #472]	@ (80009f0 <main+0x27c>)
 8000816:	f000 fe6b 	bl	80014f0 <print>
#endif
		Error_Handler();
 800081a:	f001 faec 	bl	8001df6 <Error_Handler>
#endif
		Error_Handler();
    }*/

	//Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 800081e:	4875      	ldr	r0, [pc, #468]	@ (80009f4 <main+0x280>)
 8000820:	f006 fdc8 	bl	80073b4 <HAL_FDCAN_Start>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <main+0xc0>

#if DEBUG
		print("Error al inicializar CAN_ACU");
 800082a:	4873      	ldr	r0, [pc, #460]	@ (80009f8 <main+0x284>)
 800082c:	f000 fe60 	bl	80014f0 <print>

#endif
		Error_Handler();
 8000830:	f001 fae1 	bl	8001df6 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	486e      	ldr	r0, [pc, #440]	@ (80009f4 <main+0x280>)
 800083a:	f006 fffd 	bl	8007838 <HAL_FDCAN_ActivateNotification>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d004      	beq.n	800084e <main+0xda>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000844:	486d      	ldr	r0, [pc, #436]	@ (80009fc <main+0x288>)
 8000846:	f000 fe53 	bl	80014f0 <print>
#endif
		Error_Handler();
 800084a:	f001 fad4 	bl	8001df6 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if(DEBUG)
	print("Solicitar tensión inversor");
 800084e:	486c      	ldr	r0, [pc, #432]	@ (8000a00 <main+0x28c>)
 8000850:	f000 fe4e 	bl	80014f0 <print>
#endif
	//Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0) {
 8000854:	e006      	b.n	8000864 <main+0xf0>

		if (config_inv_lectura_v == 1) {
 8000856:	4b6b      	ldr	r3, [pc, #428]	@ (8000a04 <main+0x290>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d102      	bne.n	8000864 <main+0xf0>

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 800085e:	486a      	ldr	r0, [pc, #424]	@ (8000a08 <main+0x294>)
 8000860:	f000 fe46 	bl	80014f0 <print>
	while (config_inv_lectura_v == 0) {
 8000864:	4b67      	ldr	r3, [pc, #412]	@ (8000a04 <main+0x290>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f4      	beq.n	8000856 <main+0xe2>
	}

#if !CALIBRATION

	//Estado STAND BY inversor
	while (state != 3) {
 800086c:	e006      	b.n	800087c <main+0x108>

		if (state == 3) {
 800086e:	4b67      	ldr	r3, [pc, #412]	@ (8000a0c <main+0x298>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d102      	bne.n	800087c <main+0x108>
#if DEBUG
			print("Precarga");
 8000876:	4866      	ldr	r0, [pc, #408]	@ (8000a10 <main+0x29c>)
 8000878:	f000 fe3a 	bl	80014f0 <print>
	while (state != 3) {
 800087c:	4b63      	ldr	r3, [pc, #396]	@ (8000a0c <main+0x298>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d1f4      	bne.n	800086e <main+0xfa>
#endif
		}
	}
	//PRE-CHARGE
	while (precarga_inv == 0) {
 8000884:	e037      	b.n	80008f6 <main+0x182>

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000886:	4b63      	ldr	r3, [pc, #396]	@ (8000a14 <main+0x2a0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4962      	ldr	r1, [pc, #392]	@ (8000a18 <main+0x2a4>)
 800088e:	4863      	ldr	r0, [pc, #396]	@ (8000a1c <main+0x2a8>)
 8000890:	f011 fa48 	bl	8011d24 <siprintf>
		print(TxBuffer);
 8000894:	4861      	ldr	r0, [pc, #388]	@ (8000a1c <main+0x2a8>)
 8000896:	f000 fe2b 	bl	80014f0 <print>
		//printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		//Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800089a:	4b61      	ldr	r3, [pc, #388]	@ (8000a20 <main+0x2ac>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a61      	ldr	r2, [pc, #388]	@ (8000a24 <main+0x2b0>)
 80008a0:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 80008a2:	4b60      	ldr	r3, [pc, #384]	@ (8000a24 <main+0x2b0>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a24 <main+0x2b0>)
 80008aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ae:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008b0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a24 <main+0x2b0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008b6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <main+0x2b0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008bc:	4b55      	ldr	r3, [pc, #340]	@ (8000a14 <main+0x2a0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b59      	ldr	r3, [pc, #356]	@ (8000a28 <main+0x2b4>)
 80008c4:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008c6:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <main+0x2a0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	121b      	asrs	r3, r3, #8
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b56      	ldr	r3, [pc, #344]	@ (8000a28 <main+0x2b4>)
 80008d0:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu)
 80008d2:	4a55      	ldr	r2, [pc, #340]	@ (8000a28 <main+0x2b4>)
 80008d4:	4953      	ldr	r1, [pc, #332]	@ (8000a24 <main+0x2b0>)
 80008d6:	4847      	ldr	r0, [pc, #284]	@ (80009f4 <main+0x280>)
 80008d8:	f006 fd97 	bl	800740a <HAL_FDCAN_AddMessageToTxFifoQ>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <main+0x174>
				== HAL_OK) {
#if DEBUG
			print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 80008e2:	4852      	ldr	r0, [pc, #328]	@ (8000a2c <main+0x2b8>)
 80008e4:	f000 fe04 	bl	80014f0 <print>
#endif
		}

		if (precarga_inv == 1) {
 80008e8:	4b51      	ldr	r3, [pc, #324]	@ (8000a30 <main+0x2bc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d102      	bne.n	80008f6 <main+0x182>
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80008f0:	4850      	ldr	r0, [pc, #320]	@ (8000a34 <main+0x2c0>)
 80008f2:	f000 fdfd 	bl	80014f0 <print>
	while (precarga_inv == 0) {
 80008f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a30 <main+0x2bc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0c3      	beq.n	8000886 <main+0x112>
		}

	}

#if DEBUG
	print("state : stand by");
 80008fe:	484e      	ldr	r0, [pc, #312]	@ (8000a38 <main+0x2c4>)
 8000900:	f000 fdf6 	bl	80014f0 <print>
#endif
	//Estado READY inversor
	TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000904:	4b4d      	ldr	r3, [pc, #308]	@ (8000a3c <main+0x2c8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a4d      	ldr	r2, [pc, #308]	@ (8000a40 <main+0x2cc>)
 800090a:	6013      	str	r3, [r2, #0]
	TxHeader_Inv.DataLength = 3;
 800090c:	4b4c      	ldr	r3, [pc, #304]	@ (8000a40 <main+0x2cc>)
 800090e:	2203      	movs	r2, #3
 8000910:	60da      	str	r2, [r3, #12]
	TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000912:	4b4b      	ldr	r3, [pc, #300]	@ (8000a40 <main+0x2cc>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]

	TxData_Inv[0] = 0x0;
 8000918:	4b4a      	ldr	r3, [pc, #296]	@ (8000a44 <main+0x2d0>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	TxData_Inv[1] = 0x0;
 800091e:	4b49      	ldr	r3, [pc, #292]	@ (8000a44 <main+0x2d0>)
 8000920:	2200      	movs	r2, #0
 8000922:	705a      	strb	r2, [r3, #1]
	TxData_Inv[2] = 0x4;
 8000924:	4b47      	ldr	r3, [pc, #284]	@ (8000a44 <main+0x2d0>)
 8000926:	2204      	movs	r2, #4
 8000928:	709a      	strb	r2, [r3, #2]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800092a:	4a46      	ldr	r2, [pc, #280]	@ (8000a44 <main+0x2d0>)
 800092c:	4944      	ldr	r1, [pc, #272]	@ (8000a40 <main+0x2cc>)
 800092e:	482e      	ldr	r0, [pc, #184]	@ (80009e8 <main+0x274>)
 8000930:	f006 fd6b 	bl	800740a <HAL_FDCAN_AddMessageToTxFifoQ>

	while (state != 4) {
 8000934:	bf00      	nop
 8000936:	4b35      	ldr	r3, [pc, #212]	@ (8000a0c <main+0x298>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d1fb      	bne.n	8000936 <main+0x1c2>

	}

#if DEBUG
	print("state: ready");
 800093e:	4842      	ldr	r0, [pc, #264]	@ (8000a48 <main+0x2d4>)
 8000940:	f000 fdd6 	bl	80014f0 <print>

#endif

#if !CALIBRATION
	//Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0) {
 8000944:	e027      	b.n	8000996 <main+0x222>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	4840      	ldr	r0, [pc, #256]	@ (8000a4c <main+0x2d8>)
 800094a:	f007 fe93 	bl	8008674 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b3f      	ldr	r3, [pc, #252]	@ (8000a50 <main+0x2dc>)
 8000954:	601a      	str	r2, [r3, #0]
		START_BUTTON_Pin);
		if (start_button_act == 1 && start_button_ant == 0) {
 8000956:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <main+0x2dc>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d11b      	bne.n	8000996 <main+0x222>
 800095e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <main+0x2e0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d117      	bne.n	8000996 <main+0x222>

#if DEBUG
			print("Botón Start + Freno:");
 8000966:	483c      	ldr	r0, [pc, #240]	@ (8000a58 <main+0x2e4>)
 8000968:	f000 fdc2 	bl	80014f0 <print>
			printValue(s_freno);
 800096c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a5c <main+0x2e8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fddb 	bl	800152c <printValue>
#endif
			if (s_freno > UMBRAL_FRENO) {
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <main+0x2e8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800097e:	4293      	cmp	r3, r2
 8000980:	dd06      	ble.n	8000990 <main+0x21c>
				boton_arranque = 1;
 8000982:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <main+0x2ec>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000988:	4836      	ldr	r0, [pc, #216]	@ (8000a64 <main+0x2f0>)
 800098a:	f000 fdb1 	bl	80014f0 <print>
 800098e:	e002      	b.n	8000996 <main+0x222>
#endif
			} else {
#if DEBUG
				print("Pulsar freno para arrancar");
 8000990:	4835      	ldr	r0, [pc, #212]	@ (8000a68 <main+0x2f4>)
 8000992:	f000 fdad 	bl	80014f0 <print>
	while (boton_arranque == 0) {
 8000996:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <main+0x2ec>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0d3      	beq.n	8000946 <main+0x1d2>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 800099e:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <main+0x2f8>)
 80009a0:	f000 fda6 	bl	80014f0 <print>
#endif
#if !CALIBRATION

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); //Enciende RTDS
 80009a4:	2201      	movs	r2, #1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4831      	ldr	r0, [pc, #196]	@ (8000a70 <main+0x2fc>)
 80009aa:	f007 fe7b 	bl	80086a4 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80009ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009b2:	f002 f805 	bl	80029c0 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); //Apaga RTDS
 80009b6:	2200      	movs	r2, #0
 80009b8:	2102      	movs	r1, #2
 80009ba:	482d      	ldr	r0, [pc, #180]	@ (8000a70 <main+0x2fc>)
 80009bc:	f007 fe72 	bl	80086a4 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 80009c0:	482c      	ldr	r0, [pc, #176]	@ (8000a74 <main+0x300>)
 80009c2:	f000 fd95 	bl	80014f0 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * prescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80009c6:	482c      	ldr	r0, [pc, #176]	@ (8000a78 <main+0x304>)
 80009c8:	f00c fec8 	bl	800d75c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <main+0x258>
 80009d0:	2400166c 	.word	0x2400166c
 80009d4:	24000094 	.word	0x24000094
 80009d8:	0801267c 	.word	0x0801267c
 80009dc:	3e4ccccd 	.word	0x3e4ccccd
 80009e0:	24001684 	.word	0x24001684
 80009e4:	2400168c 	.word	0x2400168c
 80009e8:	240001ec 	.word	0x240001ec
 80009ec:	0801269c 	.word	0x0801269c
 80009f0:	080126bc 	.word	0x080126bc
 80009f4:	2400028c 	.word	0x2400028c
 80009f8:	080126e4 	.word	0x080126e4
 80009fc:	08012704 	.word	0x08012704
 8000a00:	0801272c 	.word	0x0801272c
 8000a04:	2400008c 	.word	0x2400008c
 8000a08:	08012748 	.word	0x08012748
 8000a0c:	240016a2 	.word	0x240016a2
 8000a10:	0801277c 	.word	0x0801277c
 8000a14:	24001660 	.word	0x24001660
 8000a18:	08012788 	.word	0x08012788
 8000a1c:	24001714 	.word	0x24001714
 8000a20:	24000004 	.word	0x24000004
 8000a24:	240005b4 	.word	0x240005b4
 8000a28:	24000610 	.word	0x24000610
 8000a2c:	080127a0 	.word	0x080127a0
 8000a30:	24000088 	.word	0x24000088
 8000a34:	080127c8 	.word	0x080127c8
 8000a38:	080127e4 	.word	0x080127e4
 8000a3c:	24000000 	.word	0x24000000
 8000a40:	24000568 	.word	0x24000568
 8000a44:	24000600 	.word	0x24000600
 8000a48:	080127f8 	.word	0x080127f8
 8000a4c:	58021800 	.word	0x58021800
 8000a50:	24001658 	.word	0x24001658
 8000a54:	2400165c 	.word	0x2400165c
 8000a58:	08012808 	.word	0x08012808
 8000a5c:	24001694 	.word	0x24001694
 8000a60:	24000090 	.word	0x24000090
 8000a64:	08012820 	.word	0x08012820
 8000a68:	08012840 	.word	0x08012840
 8000a6c:	0801285c 	.word	0x0801285c
 8000a70:	58020800 	.word	0x58020800
 8000a74:	0801286c 	.word	0x0801286c
 8000a78:	240003f4 	.word	0x240003f4

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09c      	sub	sp, #112	@ 0x70
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	224c      	movs	r2, #76	@ 0x4c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f011 f96a 	bl	8011d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2220      	movs	r2, #32
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f011 f964 	bl	8011d64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f007 fe1b 	bl	80086d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000aac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b28      	ldr	r3, [pc, #160]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000abe:	bf00      	nop
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000acc:	d1f8      	bne.n	8000ac0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000adc:	2302      	movs	r3, #2
 8000ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000ae4:	232c      	movs	r3, #44	@ 0x2c
 8000ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000af4:	230c      	movs	r3, #12
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fe21 	bl	800874c <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b10:	f001 f971 	bl	8001df6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	233f      	movs	r3, #63	@ 0x3f
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b20:	2308      	movs	r3, #8
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b24:	2340      	movs	r3, #64	@ 0x40
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b28:	2340      	movs	r3, #64	@ 0x40
 8000b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b32:	2340      	movs	r3, #64	@ 0x40
 8000b34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2103      	movs	r1, #3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f008 f9e0 	bl	8008f00 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b46:	f001 f956 	bl	8001df6 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3770      	adds	r7, #112	@ 0x70
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	58024800 	.word	0x58024800

08000b58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	22b8      	movs	r2, #184	@ 0xb8
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f011 f8fd 	bl	8011d64 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000b6a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b6e:	f04f 0300 	mov.w	r3, #0
 8000b72:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b8a:	23c0      	movs	r3, #192	@ 0xc0
 8000b8c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 fd37 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000bb0:	f001 f921 	bl	8001df6 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	37b8      	adds	r7, #184	@ 0xb8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2224      	movs	r2, #36	@ 0x24
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f011 f8c5 	bl	8011d64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bda:	4b41      	ldr	r3, [pc, #260]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bdc:	4a41      	ldr	r2, [pc, #260]	@ (8000ce4 <MX_ADC1_Init+0x128>)
 8000bde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000be0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000be2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bea:	2208      	movs	r2, #8
 8000bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c00:	4b37      	ldr	r3, [pc, #220]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c08:	2203      	movs	r2, #3
 8000c0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c14:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c40:	4827      	ldr	r0, [pc, #156]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c42:	f002 f9cd 	bl	8002fe0 <HAL_ADC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c4c:	f001 f8d3 	bl	8001df6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4821      	ldr	r0, [pc, #132]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c5c:	f003 fe90 	bl	8004980 <HAL_ADCEx_MultiModeConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c66:	f001 f8c6 	bl	8001df6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6e:	2306      	movs	r3, #6
 8000c70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c72:	2305      	movs	r3, #5
 8000c74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c76:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4814      	ldr	r0, [pc, #80]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c90:	f002 fee2 	bl	8003a58 <HAL_ADC_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000c9a:	f001 f8ac 	bl	8001df6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_ADC1_Init+0x130>)
 8000ca0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000cac:	f002 fed4 	bl	8003a58 <HAL_ADC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000cb6:	f001 f89e 	bl	8001df6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <MX_ADC1_Init+0x134>)
 8000cbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cbe:	2312      	movs	r3, #18
 8000cc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000cc8:	f002 fec6 	bl	8003a58 <HAL_ADC_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000cd2:	f001 f890 	bl	8001df6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	@ 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000094 	.word	0x24000094
 8000ce4:	40022000 	.word	0x40022000
 8000ce8:	10c00010 	.word	0x10c00010
 8000cec:	14f00020 	.word	0x14f00020
 8000cf0:	08600004 	.word	0x08600004

08000cf4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2224      	movs	r2, #36	@ 0x24
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f011 f82f 	bl	8011d64 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d08:	4a2c      	ldr	r2, [pc, #176]	@ (8000dbc <MX_ADC2_Init+0xc8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d0e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d20:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d22:	2204      	movs	r2, #4
 8000d24:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d52:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d6c:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d6e:	f002 f937 	bl	8002fe0 <HAL_ADC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000d78:	f001 f83d 	bl	8001df6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_ADC2_Init+0xcc>)
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d80:	2306      	movs	r3, #6
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d88:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000da2:	f002 fe59 	bl	8003a58 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000dac:	f001 f823 	bl	8001df6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	@ 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000104 	.word	0x24000104
 8000dbc:	40022100 	.word	0x40022100
 8000dc0:	25b00200 	.word	0x25b00200

08000dc4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8000ebc <MX_FDCAN1_Init+0xf8>)
 8000dce:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dd0:	4b39      	ldr	r3, [pc, #228]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dd6:	4b38      	ldr	r3, [pc, #224]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000ddc:	4b36      	ldr	r3, [pc, #216]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000de2:	4b35      	ldr	r3, [pc, #212]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000de8:	4b33      	ldr	r3, [pc, #204]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000dee:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000df0:	2206      	movs	r2, #6
 8000df2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000df4:	4b30      	ldr	r3, [pc, #192]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e00:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e02:	2205      	movs	r2, #5
 8000e04:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e06:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e12:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e32:	2220      	movs	r2, #32
 8000e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e62:	2220      	movs	r2, #32
 8000e64:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e6e:	2204      	movs	r2, #4
 8000e70:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e72:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e74:	f006 f84a 	bl	8006f0c <HAL_FDCAN_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000e7e:	f000 ffba 	bl	8001df6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000ea0:	f006 fa12 	bl	80072c8 <HAL_FDCAN_ConfigFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_FDCAN1_Init+0xea>
		Error_Handler();
 8000eaa:	f000 ffa4 	bl	8001df6 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240001ec 	.word	0x240001ec
 8000ebc:	4000a000 	.word	0x4000a000

08000ec0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb8 <MX_FDCAN2_Init+0xf8>)
 8000eca:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ecc:	4b39      	ldr	r3, [pc, #228]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ed2:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ede:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000eea:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000eec:	2206      	movs	r2, #6
 8000eee:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ef8:	220a      	movs	r2, #10
 8000efa:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000efe:	2205      	movs	r2, #5
 8000f00:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f02:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f2e:	2210      	movs	r2, #16
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f34:	2204      	movs	r2, #4
 8000f36:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f6e:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f70:	f005 ffcc 	bl	8006f0c <HAL_FDCAN_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000f7a:	f000 ff3c 	bl	8001df6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f82:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f9e:	f006 f993 	bl	80072c8 <HAL_FDCAN_ConfigFilter>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_FDCAN2_Init+0xec>
		Error_Handler();
 8000fa8:	f000 ff25 	bl	8001df6 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2400028c 	.word	0x2400028c
 8000fb8:	4000a400 	.word	0x4000a400

08000fbc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <MX_SDMMC1_SD_Init+0x38>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fd4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	2400032c 	.word	0x2400032c
 8000ff4:	52007000 	.word	0x52007000

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09c      	sub	sp, #112	@ 0x70
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2234      	movs	r2, #52	@ 0x34
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f010 fe96 	bl	8011d64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <MX_TIM1_Init+0x168>)
 800103a:	4a4a      	ldr	r2, [pc, #296]	@ (8001164 <MX_TIM1_Init+0x16c>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800103e:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800104a:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <MX_TIM1_Init+0x168>)
 800104c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b43      	ldr	r3, [pc, #268]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001058:	4b41      	ldr	r3, [pc, #260]	@ (8001160 <MX_TIM1_Init+0x168>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800105e:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001064:	483e      	ldr	r0, [pc, #248]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001066:	f00c fb21 	bl	800d6ac <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001070:	f000 fec1 	bl	8001df6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800107e:	4619      	mov	r1, r3
 8001080:	4837      	ldr	r0, [pc, #220]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001082:	f00c fe6d 	bl	800dd60 <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800108c:	f000 feb3 	bl	8001df6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001090:	4833      	ldr	r0, [pc, #204]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001092:	f00c fbe9 	bl	800d868 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800109c:	f000 feab 	bl	8001df6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b0:	4619      	mov	r1, r3
 80010b2:	482b      	ldr	r0, [pc, #172]	@ (8001160 <MX_TIM1_Init+0x168>)
 80010b4:	f00d fb9a 	bl	800e7ec <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010be:	f000 fe9a 	bl	8001df6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
 80010c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	481e      	ldr	r0, [pc, #120]	@ (8001160 <MX_TIM1_Init+0x168>)
 80010e8:	f00c fd26 	bl	800db38 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010f2:	f000 fe80 	bl	8001df6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4818      	ldr	r0, [pc, #96]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001100:	f00c fd1a 	bl	800db38 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800110a:	f000 fe74 	bl	8001df6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001122:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001126:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001144:	f00d fbee 	bl	800e924 <HAL_TIMEx_ConfigBreakDeadTime>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800114e:	f000 fe52 	bl	8001df6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001154:	f001 f966 	bl	8002424 <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3770      	adds	r7, #112	@ 0x70
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	240003a8 	.word	0x240003a8
 8001164:	40010000 	.word	0x40010000

08001168 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800116e:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <MX_TIM16_Init+0x4c>)
 8001170:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001174:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001178:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001182:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001186:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800119c:	f00c fa86 	bl	800d6ac <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80011a6:	f000 fe26 	bl	8001df6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240003f4 	.word	0x240003f4
 80011b4:	40014400 	.word	0x40014400

080011b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <MX_USART1_UART_Init+0x94>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001202:	f00d fc39 	bl	800ea78 <HAL_UART_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800120c:	f000 fdf3 	bl	8001df6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001214:	f00e fdd3 	bl	800fdbe <HAL_UARTEx_SetTxFifoThreshold>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800121e:	f000 fdea 	bl	8001df6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001226:	f00e fe08 	bl	800fe3a <HAL_UARTEx_SetRxFifoThreshold>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001230:	f000 fde1 	bl	8001df6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001236:	f00e fd89 	bl	800fd4c <HAL_UARTEx_DisableFifoMode>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 fdd9 	bl	8001df6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	24000440 	.word	0x24000440
 800124c:	40011000 	.word	0x40011000

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001256:	4a23      	ldr	r2, [pc, #140]	@ (80012e4 <MX_USART2_UART_Init+0x94>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800128c:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001292:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001298:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800129a:	f00d fbed 	bl	800ea78 <HAL_UART_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012a4:	f000 fda7 	bl	8001df6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ac:	f00e fd87 	bl	800fdbe <HAL_UARTEx_SetTxFifoThreshold>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012b6:	f000 fd9e 	bl	8001df6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012be:	f00e fdbc 	bl	800fe3a <HAL_UARTEx_SetRxFifoThreshold>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012c8:	f000 fd95 	bl	8001df6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ce:	f00e fd3d 	bl	800fd4c <HAL_UARTEx_DisableFifoMode>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012d8:	f000 fd8d 	bl	8001df6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	240004d4 	.word	0x240004d4
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <MX_DMA_Init+0x3c>)
 80012f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <MX_DMA_Init+0x3c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_DMA_Init+0x3c>)
 8001300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	200b      	movs	r0, #11
 8001312:	f003 fcf2 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001316:	200b      	movs	r0, #11
 8001318:	f003 fd09 	bl	8004d2e <HAL_NVIC_EnableIRQ>

}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58024400 	.word	0x58024400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	@ 0x38
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	4a65      	ldr	r2, [pc, #404]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134e:	4b63      	ldr	r3, [pc, #396]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001362:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136c:	4b5b      	ldr	r3, [pc, #364]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	4a56      	ldr	r2, [pc, #344]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138a:	4b54      	ldr	r3, [pc, #336]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b50      	ldr	r3, [pc, #320]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	4a4f      	ldr	r2, [pc, #316]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a8:	4b4c      	ldr	r3, [pc, #304]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013bc:	4a47      	ldr	r2, [pc, #284]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c6:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d4:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013da:	4a40      	ldr	r2, [pc, #256]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e4:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f2:	4b3a      	ldr	r3, [pc, #232]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f8:	4a38      	ldr	r2, [pc, #224]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001402:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001410:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001416:	4a31      	ldr	r2, [pc, #196]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2103      	movs	r1, #3
 8001432:	482b      	ldr	r0, [pc, #172]	@ (80014e0 <MX_GPIO_Init+0x1b8>)
 8001434:	f007 f936 	bl	80086a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143e:	4829      	ldr	r0, [pc, #164]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001440:	f007 f930 	bl	80086a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001444:	2303      	movs	r3, #3
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	4821      	ldr	r0, [pc, #132]	@ (80014e0 <MX_GPIO_Init+0x1b8>)
 800145c:	f006 ff62 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	@ (80014e8 <MX_GPIO_Init+0x1c0>)
 8001476:	f006 ff55 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 800147a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001494:	f006 ff46 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4810      	ldr	r0, [pc, #64]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80014ac:	f006 ff3a 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80014c2:	2302      	movs	r3, #2
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80014ce:	f006 ff29 	bl	8008324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	@ 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020800 	.word	0x58020800
 80014e4:	58021000 	.word	0x58021000
 80014e8:	58021400 	.word	0x58021400
 80014ec:	58021800 	.word	0x58021800

080014f0 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4909      	ldr	r1, [pc, #36]	@ (8001520 <print+0x30>)
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <print+0x34>)
 80014fe:	f010 fc11 	bl	8011d24 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 8001502:	4808      	ldr	r0, [pc, #32]	@ (8001524 <print+0x34>)
 8001504:	f7fe ff04 	bl	8000310 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	4904      	ldr	r1, [pc, #16]	@ (8001524 <print+0x34>)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <print+0x38>)
 8001514:	f00d fb00 	bl	800eb18 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	0801287c 	.word	0x0801287c
 8001524:	240016b0 	.word	0x240016b0
 8001528:	240004d4 	.word	0x240004d4

0800152c <printValue>:

void printValue(int value) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4909      	ldr	r1, [pc, #36]	@ (800155c <printValue+0x30>)
 8001538:	4809      	ldr	r0, [pc, #36]	@ (8001560 <printValue+0x34>)
 800153a:	f010 fbf3 	bl	8011d24 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 800153e:	4808      	ldr	r0, [pc, #32]	@ (8001560 <printValue+0x34>)
 8001540:	f7fe fee6 	bl	8000310 <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	4904      	ldr	r1, [pc, #16]	@ (8001560 <printValue+0x34>)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <printValue+0x38>)
 8001550:	f00d fae2 	bl	800eb18 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	08012884 	.word	0x08012884
 8001560:	240016b0 	.word	0x240016b0
 8001564:	240004d4 	.word	0x240004d4

08001568 <HAL_ADC_ConvCpltCallback>:
	sprintf(uart_msg, "0x%02X \n\r", value);
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
	HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	s1_aceleracion = buffer_adc[0];
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001578:	601a      	str	r2, [r3, #0]
	s2_aceleracion = buffer_adc[1];
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	461a      	mov	r2, r3
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001582:	601a      	str	r2, [r3, #0]
	s_freno = buffer_adc[2];
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	461a      	mov	r2, r3
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <HAL_ADC_ConvCpltCallback+0x40>)
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2400166c 	.word	0x2400166c
 80015a0:	24001674 	.word	0x24001674
 80015a4:	24001678 	.word	0x24001678
 80015a8:	24001694 	.word	0x24001694

080015ac <HAL_FDCAN_RxFifo0Callback>:
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80ba 	beq.w	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
		/* Retreive Rx messages from RX FIFO0 */
		if (hfdcan->Instance == FDCAN1) {
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x194>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	f040 8081 	bne.w	80016d0 <HAL_FDCAN_RxFifo0Callback+0x124>
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80015ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80015d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001748 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80015d2:	2140      	movs	r1, #64	@ 0x40
 80015d4:	485d      	ldr	r0, [pc, #372]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 80015d6:	f005 ff73 	bl	80074c0 <HAL_FDCAN_GetRxMessage>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 80aa 	bne.w	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					RxData_Inv) == HAL_OK) {
				switch (RxHeader_Inv.Identifier) {
 80015e2:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f240 4266 	movw	r2, #1126	@ 0x466
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d037      	beq.n	800165e <HAL_FDCAN_RxFifo0Callback+0xb2>
 80015ee:	f240 4266 	movw	r2, #1126	@ 0x466
 80015f2:	4293      	cmp	r3, r2
 80015f4:	f200 809f 	bhi.w	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
 80015f8:	f240 4262 	movw	r2, #1122	@ 0x462
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_FDCAN_RxFifo0Callback+0x5e>
 8001600:	f240 4263 	movw	r2, #1123	@ 0x463
 8001604:	4293      	cmp	r3, r2
 8001606:	d010      	beq.n	800162a <HAL_FDCAN_RxFifo0Callback+0x7e>
			}

		}

	}
}
 8001608:	e095      	b.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					state = RxData_Inv[2] >> 0x1;
 800160a:	4b4e      	ldr	r3, [pc, #312]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b4f      	ldr	r3, [pc, #316]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001614:	701a      	strb	r2, [r3, #0]
					if (state == 10) {
 8001616:	4b4e      	ldr	r3, [pc, #312]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b0a      	cmp	r3, #10
 800161c:	f040 8084 	bne.w	8001728 <HAL_FDCAN_RxFifo0Callback+0x17c>
						error = RxData_Inv[0];
 8001620:	4b48      	ldr	r3, [pc, #288]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	4b4b      	ldr	r3, [pc, #300]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8001626:	701a      	strb	r2, [r3, #0]
					break;
 8001628:	e07e      	b.n	8001728 <HAL_FDCAN_RxFifo0Callback+0x17c>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 800162a:	4b46      	ldr	r3, [pc, #280]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800162c:	79db      	ldrb	r3, [r3, #7]
 800162e:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
							| RxData_Inv[8] << 8 | RxData_Inv[5];
 8001632:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001634:	7a1b      	ldrb	r3, [r3, #8]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	4313      	orrs	r3, r2
 800163a:	4a42      	ldr	r2, [pc, #264]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800163c:	7952      	ldrb	r2, [r2, #5]
 800163e:	4313      	orrs	r3, r2
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 8001640:	4a45      	ldr	r2, [pc, #276]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001642:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000) {
 8001644:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d06d      	beq.n	800172c <HAL_FDCAN_RxFifo0Callback+0x180>
						e_machine_rpm |= 0xFFF0000;
 8001650:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b41      	ldr	r3, [pc, #260]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001656:	4313      	orrs	r3, r2
 8001658:	4a3f      	ldr	r2, [pc, #252]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800165a:	6013      	str	r3, [r2, #0]
					break;
 800165c:	e066      	b.n	800172c <HAL_FDCAN_RxFifo0Callback+0x180>
					if (RxHeader_Inv.DataLength == 6) {
 800165e:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d164      	bne.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x184>
						if (config_inv_lectura_v == 0) {
 8001666:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <HAL_FDCAN_RxFifo0Callback+0xca>
							config_inv_lectura_v = 1;
 800166e:	4b3c      	ldr	r3, [pc, #240]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
					break;
 8001674:	e05c      	b.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x184>
						} else if (config_inv_lectura_v == 1) {
 8001676:	4b3a      	ldr	r3, [pc, #232]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d158      	bne.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x184>
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 800167e:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[0];
 8001684:	4a2f      	ldr	r2, [pc, #188]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	4313      	orrs	r3, r2
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 800168a:	4a36      	ldr	r2, [pc, #216]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800168c:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001690:	789b      	ldrb	r3, [r3, #2]
 8001692:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[1];
 8001694:	4a2b      	ldr	r2, [pc, #172]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001696:	7852      	ldrb	r2, [r2, #1]
 8001698:	4313      	orrs	r3, r2
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 800169a:	4a33      	ldr	r2, [pc, #204]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800169c:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power >> 2;//Bits 10 to 16
 800169e:	4b32      	ldr	r3, [pc, #200]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	109b      	asrs	r3, r3, #2
 80016a4:	4a30      	ldr	r2, [pc, #192]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016a6:	6013      	str	r3, [r2, #0]
							if (inv_dc_bus_power & 0x2000) {//Check for bit signing
 80016a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_FDCAN_RxFifo0Callback+0x114>
								inv_dc_bus_power |= 0xC000;
 80016b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016be:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power * 32767; //Scale factor
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	4a27      	ldr	r2, [pc, #156]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016cc:	6013      	str	r3, [r2, #0]
					break;
 80016ce:	e02f      	b.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x184>
		} else if (hfdcan->Instance == FDCAN2) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a25      	ldr	r2, [pc, #148]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d12d      	bne.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80016da:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016dc:	4a25      	ldr	r2, [pc, #148]	@ (8001774 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80016de:	2140      	movs	r1, #64	@ 0x40
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f005 feed 	bl	80074c0 <HAL_FDCAN_GetRxMessage>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d124      	bne.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
				switch (RxHeader_Acu.Identifier) {
 80016ec:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d003      	beq.n	80016fc <HAL_FDCAN_RxFifo0Callback+0x150>
 80016f4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80016f8:	d008      	beq.n	800170c <HAL_FDCAN_RxFifo0Callback+0x160>
}
 80016fa:	e01c      	b.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					if (RxData_Acu[0] == 0) {
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d117      	bne.n	8001734 <HAL_FDCAN_RxFifo0Callback+0x188>
						precarga_inv = 1;
 8001704:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]
					break;
 800170a:	e013      	b.n	8001734 <HAL_FDCAN_RxFifo0Callback+0x188>
					v_celda_min = (int) (RxData_Acu[0] << 8 | RxData_Acu[1]);
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001714:	7852      	ldrb	r2, [r2, #1]
 8001716:	4313      	orrs	r3, r2
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001722:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001726:	e006      	b.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001728:	bf00      	nop
 800172a:	e004      	b.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 800172c:	bf00      	nop
 800172e:	e002      	b.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001730:	bf00      	nop
 8001732:	e000      	b.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001734:	bf00      	nop
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	4000a000 	.word	0x4000a000
 8001744:	24000608 	.word	0x24000608
 8001748:	2400058c 	.word	0x2400058c
 800174c:	240001ec 	.word	0x240001ec
 8001750:	240016a2 	.word	0x240016a2
 8001754:	2400180e 	.word	0x2400180e
 8001758:	24001668 	.word	0x24001668
 800175c:	0fff0000 	.word	0x0fff0000
 8001760:	2400008c 	.word	0x2400008c
 8001764:	24001660 	.word	0x24001660
 8001768:	24001664 	.word	0x24001664
 800176c:	4000a400 	.word	0x4000a400
 8001770:	24000618 	.word	0x24000618
 8001774:	240005d8 	.word	0x240005d8
 8001778:	24000088 	.word	0x24000088
 800177c:	24000008 	.word	0x24000008

08001780 <setTorque>:
		sum += lecturas[i];
	}
	return sum / N_LECTURAS;
}

uint16_t setTorque() {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
	// Leemos sensores de posición del pedal de acelaración

	int s1_aceleracion_filtr = LPF_EMA_Update(&s1_filt, s1_aceleracion);
 8001786:	4ba6      	ldr	r3, [pc, #664]	@ (8001a20 <setTorque+0x2a0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	48a3      	ldr	r0, [pc, #652]	@ (8001a24 <setTorque+0x2a4>)
 8001798:	f7fe ffc3 	bl	8000722 <LPF_EMA_Update>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
 80017a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a4:	ee17 3a90 	vmov	r3, s15
 80017a8:	60fb      	str	r3, [r7, #12]
	int s2_aceleracion_filtr = LPF_EMA_Update(&s2_filt, s2_aceleracion);
 80017aa:	4b9f      	ldr	r3, [pc, #636]	@ (8001a28 <setTorque+0x2a8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ba:	489c      	ldr	r0, [pc, #624]	@ (8001a2c <setTorque+0x2ac>)
 80017bc:	f7fe ffb1 	bl	8000722 <LPF_EMA_Update>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c8:	ee17 3a90 	vmov	r3, s15
 80017cc:	60bb      	str	r3, [r7, #8]
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion_filtr - 1886) / (29.4 - 18.86);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f2a3 735e 	subw	r3, r3, #1886	@ 0x75e
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017dc:	ed9f 5b84 	vldr	d5, [pc, #528]	@ 80019f0 <setTorque+0x270>
 80017e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80017e8:	ee17 2a90 	vmov	r2, s15
 80017ec:	4b90      	ldr	r3, [pc, #576]	@ (8001a30 <setTorque+0x2b0>)
 80017ee:	601a      	str	r2, [r3, #0]
	if (s1_aceleracion_aux < 0) {
 80017f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a30 <setTorque+0x2b0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da03      	bge.n	8001800 <setTorque+0x80>
		s1_aceleracion_aux = 0;
 80017f8:	4b8d      	ldr	r3, [pc, #564]	@ (8001a30 <setTorque+0x2b0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e006      	b.n	800180e <setTorque+0x8e>
	} else if (s1_aceleracion_aux > 100) {
 8001800:	4b8b      	ldr	r3, [pc, #556]	@ (8001a30 <setTorque+0x2b0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b64      	cmp	r3, #100	@ 0x64
 8001806:	dd02      	ble.n	800180e <setTorque+0x8e>
		s1_aceleracion_aux = 100;
 8001808:	4b89      	ldr	r3, [pc, #548]	@ (8001a30 <setTorque+0x2b0>)
 800180a:	2264      	movs	r2, #100	@ 0x64
 800180c:	601a      	str	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion_filtr - 1780) / (25.27 - 17.8);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800181c:	ed9f 5b76 	vldr	d5, [pc, #472]	@ 80019f8 <setTorque+0x278>
 8001820:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001824:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001828:	ee17 2a90 	vmov	r2, s15
 800182c:	4b81      	ldr	r3, [pc, #516]	@ (8001a34 <setTorque+0x2b4>)
 800182e:	601a      	str	r2, [r3, #0]
	if (s2_aceleracion_aux < 0) {
 8001830:	4b80      	ldr	r3, [pc, #512]	@ (8001a34 <setTorque+0x2b4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da03      	bge.n	8001840 <setTorque+0xc0>
		s2_aceleracion_aux = 0;
 8001838:	4b7e      	ldr	r3, [pc, #504]	@ (8001a34 <setTorque+0x2b4>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e006      	b.n	800184e <setTorque+0xce>
	} else if (s2_aceleracion_aux > 100) {
 8001840:	4b7c      	ldr	r3, [pc, #496]	@ (8001a34 <setTorque+0x2b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b64      	cmp	r3, #100	@ 0x64
 8001846:	dd02      	ble.n	800184e <setTorque+0xce>
		s2_aceleracion_aux = 100;
 8001848:	4b7a      	ldr	r3, [pc, #488]	@ (8001a34 <setTorque+0x2b4>)
 800184a:	2264      	movs	r2, #100	@ 0x64
 800184c:	601a      	str	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if(s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8){
 800184e:	4b78      	ldr	r3, [pc, #480]	@ (8001a30 <setTorque+0x2b0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b08      	cmp	r3, #8
 8001854:	dd10      	ble.n	8001878 <setTorque+0xf8>
 8001856:	4b77      	ldr	r3, [pc, #476]	@ (8001a34 <setTorque+0x2b4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b08      	cmp	r3, #8
 800185c:	dd0c      	ble.n	8001878 <setTorque+0xf8>
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 800185e:	4b74      	ldr	r3, [pc, #464]	@ (8001a30 <setTorque+0x2b0>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b74      	ldr	r3, [pc, #464]	@ (8001a34 <setTorque+0x2b4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	da00      	bge.n	800186e <setTorque+0xee>
 800186c:	3301      	adds	r3, #1
 800186e:	105b      	asrs	r3, r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b71      	ldr	r3, [pc, #452]	@ (8001a38 <setTorque+0x2b8>)
 8001874:	801a      	strh	r2, [r3, #0]
 8001876:	e002      	b.n	800187e <setTorque+0xfe>
	}
	else{
		torque_total = 0;
 8001878:	4b6f      	ldr	r3, [pc, #444]	@ (8001a38 <setTorque+0x2b8>)
 800187a:	2200      	movs	r2, #0
 800187c:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10) {
 800187e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a38 <setTorque+0x2b8>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	2b09      	cmp	r3, #9
 8001884:	d803      	bhi.n	800188e <setTorque+0x10e>
		torque_total = 0;
 8001886:	4b6c      	ldr	r3, [pc, #432]	@ (8001a38 <setTorque+0x2b8>)
 8001888:	2200      	movs	r2, #0
 800188a:	801a      	strh	r2, [r3, #0]
 800188c:	e006      	b.n	800189c <setTorque+0x11c>
	} else if (torque_total > 90) {
 800188e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a38 <setTorque+0x2b8>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2b5a      	cmp	r3, #90	@ 0x5a
 8001894:	d902      	bls.n	800189c <setTorque+0x11c>
		torque_total = 100;
 8001896:	4b68      	ldr	r3, [pc, #416]	@ (8001a38 <setTorque+0x2b8>)
 8001898:	2264      	movs	r2, #100	@ 0x64
 800189a:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25) {
 800189c:	4b67      	ldr	r3, [pc, #412]	@ (8001a3c <setTorque+0x2bc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80018a4:	4293      	cmp	r3, r2
 80018a6:	dd0a      	ble.n	80018be <setTorque+0x13e>
 80018a8:	4b63      	ldr	r3, [pc, #396]	@ (8001a38 <setTorque+0x2b8>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b19      	cmp	r3, #25
 80018ae:	d906      	bls.n	80018be <setTorque+0x13e>
		print("EV_2_3");
 80018b0:	4863      	ldr	r0, [pc, #396]	@ (8001a40 <setTorque+0x2c0>)
 80018b2:	f7ff fe1d 	bl	80014f0 <print>
		flag_EV_2_3 = 1;
 80018b6:	4b63      	ldr	r3, [pc, #396]	@ (8001a44 <setTorque+0x2c4>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e00c      	b.n	80018d8 <setTorque+0x158>
	} else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5) {
 80018be:	4b5f      	ldr	r3, [pc, #380]	@ (8001a3c <setTorque+0x2bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80018c6:	4293      	cmp	r3, r2
 80018c8:	dc06      	bgt.n	80018d8 <setTorque+0x158>
 80018ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001a38 <setTorque+0x2b8>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d802      	bhi.n	80018d8 <setTorque+0x158>
		flag_EV_2_3 = 0;
 80018d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a44 <setTorque+0x2c4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10) {
 80018d8:	4b55      	ldr	r3, [pc, #340]	@ (8001a30 <setTorque+0x2b0>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b55      	ldr	r3, [pc, #340]	@ (8001a34 <setTorque+0x2b4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bfb8      	it	lt
 80018e6:	425b      	neglt	r3, r3
 80018e8:	2b0a      	cmp	r3, #10
 80018ea:	dd06      	ble.n	80018fa <setTorque+0x17a>

		//if (HAL_GetTick() - last_time_t_11_8 > 100) {
			print("T11.8.9");
 80018ec:	4856      	ldr	r0, [pc, #344]	@ (8001a48 <setTorque+0x2c8>)
 80018ee:	f7ff fdff 	bl	80014f0 <print>
			flag_T11_8_9 = 1;
 80018f2:	4b56      	ldr	r3, [pc, #344]	@ (8001a4c <setTorque+0x2cc>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e007      	b.n	800190a <setTorque+0x18a>
		//}

	} else {
		last_time_t_11_8 = HAL_GetTick();
 80018fa:	f001 f855 	bl	80029a8 <HAL_GetTick>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a53      	ldr	r2, [pc, #332]	@ (8001a50 <setTorque+0x2d0>)
 8001902:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001904:	4b51      	ldr	r3, [pc, #324]	@ (8001a4c <setTorque+0x2cc>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9) {
 800190a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a44 <setTorque+0x2c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500) {
 8001910:	4b50      	ldr	r3, [pc, #320]	@ (8001a54 <setTorque+0x2d4>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001a58 <setTorque+0x2d8>
 800191a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d53a      	bpl.n	800199a <setTorque+0x21a>
		if (v_celda_min > 2800) {
 8001924:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <setTorque+0x2d4>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001a5c <setTorque+0x2dc>
 800192e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	dd1f      	ble.n	8001978 <setTorque+0x1f8>
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 8001938:	4b3f      	ldr	r3, [pc, #252]	@ (8001a38 <setTorque+0x2b8>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001944:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <setTorque+0x2d4>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800194e:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001a00 <setTorque+0x280>
 8001952:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001956:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001a08 <setTorque+0x288>
 800195a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800195e:	ee26 6b07 	vmul.f64	d6, d6, d7
					/ 1000;
 8001962:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8001a10 <setTorque+0x290>
 8001966:	ee86 7b05 	vdiv.f64	d7, d6, d5
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 800196a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800196e:	ee17 2a90 	vmov	r2, s15
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <setTorque+0x2e0>)
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e015      	b.n	80019a4 <setTorque+0x224>
		} else {
			torque_limitado = torque_total * 0.05;
 8001978:	4b2f      	ldr	r3, [pc, #188]	@ (8001a38 <setTorque+0x2b8>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001984:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001a18 <setTorque+0x298>
 8001988:	ee27 7b06 	vmul.f64	d7, d7, d6
 800198c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001990:	ee17 2a90 	vmov	r2, s15
 8001994:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <setTorque+0x2e0>)
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e004      	b.n	80019a4 <setTorque+0x224>
		}
	} else {
		torque_limitado = torque_total;
 800199a:	4b27      	ldr	r3, [pc, #156]	@ (8001a38 <setTorque+0x2b8>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <setTorque+0x2e0>)
 80019a2:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	//torque_total = torque_total * 240 / 100;
	if(torque_total >= 10){
 80019a4:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <setTorque+0x2b8>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	2b09      	cmp	r3, #9
 80019aa:	d912      	bls.n	80019d2 <setTorque+0x252>
		torque_total = (torque_total*240/90 - 2400/90)*(100/100);
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <setTorque+0x2b8>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001a64 <setTorque+0x2e4>)
 80019bc:	fb82 1203 	smull	r1, r2, r2, r3
 80019c0:	441a      	add	r2, r3
 80019c2:	1192      	asrs	r2, r2, #6
 80019c4:	17db      	asrs	r3, r3, #31
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b1a      	subs	r3, #26
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <setTorque+0x2b8>)
 80019d0:	801a      	strh	r2, [r3, #0]
		torque_total = 0;
	}*/


	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <setTorque+0x2b8>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	3301      	adds	r3, #1
 80019de:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 80019e0:	88bb      	ldrh	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	f3af 8000 	nop.w
 80019f0:	e147ae14 	.word	0xe147ae14
 80019f4:	4025147a 	.word	0x4025147a
 80019f8:	ae147ae0 	.word	0xae147ae0
 80019fc:	401de147 	.word	0x401de147
 8001a00:	a1cac083 	.word	0xa1cac083
 8001a04:	3ff5b645 	.word	0x3ff5b645
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40ad4c00 	.word	0x40ad4c00
 8001a10:	00000000 	.word	0x00000000
 8001a14:	408f4000 	.word	0x408f4000
 8001a18:	9999999a 	.word	0x9999999a
 8001a1c:	3fa99999 	.word	0x3fa99999
 8001a20:	24001674 	.word	0x24001674
 8001a24:	24001684 	.word	0x24001684
 8001a28:	24001678 	.word	0x24001678
 8001a2c:	2400168c 	.word	0x2400168c
 8001a30:	2400167c 	.word	0x2400167c
 8001a34:	24001680 	.word	0x24001680
 8001a38:	24001698 	.word	0x24001698
 8001a3c:	24001694 	.word	0x24001694
 8001a40:	08012898 	.word	0x08012898
 8001a44:	240016a8 	.word	0x240016a8
 8001a48:	080128a0 	.word	0x080128a0
 8001a4c:	240016ac 	.word	0x240016ac
 8001a50:	240016a4 	.word	0x240016a4
 8001a54:	24000008 	.word	0x24000008
 8001a58:	455ac000 	.word	0x455ac000
 8001a5c:	452f0000 	.word	0x452f0000
 8001a60:	2400169c 	.word	0x2400169c
 8001a64:	b60b60b7 	.word	0xb60b60b7

08001a68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a88      	ldr	r2, [pc, #544]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	f040 8109 	bne.w	8001c8c <HAL_TIM_PeriodElapsedCallback+0x224>
#if !CALIBRATION

		// ---------- CONTROL DEL INVERSOR ----------

		//Estado TORQUE
if(flag_react == 0){//Si no hay que reactivar el coche manda siempre torque
 8001a7a:	4b87      	ldr	r3, [pc, #540]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d150      	bne.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0xbc>
		if (flag_undervoltage == 0){
 8001a82:	4b86      	ldr	r3, [pc, #536]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_TIM_PeriodElapsedCallback+0x54>
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001a8a:	4b85      	ldr	r3, [pc, #532]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001a90:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001a92:	4b84      	ldr	r3, [pc, #528]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001a94:	2203      	movs	r2, #3
 8001a96:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001a98:	4b82      	ldr	r3, [pc, #520]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001a9e:	4b82      	ldr	r3, [pc, #520]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001aa4:	4b80      	ldr	r3, [pc, #512]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001aac:	2206      	movs	r2, #6
 8001aae:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ab0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001ab2:	497c      	ldr	r1, [pc, #496]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001ab4:	487d      	ldr	r0, [pc, #500]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001ab6:	f005 fca8 	bl	800740a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001aba:	e033      	b.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0xbc>
		}
		else{
			if (s_freno > UMBRAL_FRENO){
 8001abc:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	dd0f      	ble.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0x80>

				if (rtds_count == 0){
 8001ac8:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d129      	bne.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0xbc>
					HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	4878      	ldr	r0, [pc, #480]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ad6:	f006 fde5 	bl	80086a4 <HAL_GPIO_WritePin>
					rtds_count += 1;
 8001ada:	4b76      	ldr	r3, [pc, #472]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b74      	ldr	r3, [pc, #464]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0xbc>
				}

			}
			else{
				if (rtds_count <= 100 && rtds_count != 0){
 8001ae8:	4b72      	ldr	r3, [pc, #456]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b64      	cmp	r3, #100	@ 0x64
 8001aee:	d80a      	bhi.n	8001b06 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001af0:	4b70      	ldr	r3, [pc, #448]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_TIM_PeriodElapsedCallback+0x9e>
					rtds_count += 1;
 8001af8:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e00e      	b.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0xbc>
				}
				else if (rtds_count > 100){
 8001b06:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b64      	cmp	r3, #100	@ 0x64
 8001b0c:	d90a      	bls.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0xbc>
					HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2102      	movs	r1, #2
 8001b12:	4869      	ldr	r0, [pc, #420]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b14:	f006 fdc6 	bl	80086a4 <HAL_GPIO_WritePin>
					flag_undervoltage = 0;
 8001b18:	4b60      	ldr	r3, [pc, #384]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
					rtds_count = 0;
 8001b1e:	4b65      	ldr	r3, [pc, #404]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]


}


		switch (state) {
 8001b24:	4b65      	ldr	r3, [pc, #404]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	2b07      	cmp	r3, #7
 8001b2c:	f200 80ae 	bhi.w	8001c8c <HAL_TIM_PeriodElapsedCallback+0x224>
 8001b30:	a201      	add	r2, pc, #4	@ (adr r2, 8001b38 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b36:	bf00      	nop
 8001b38:	08001b59 	.word	0x08001b59
 8001b3c:	08001b8f 	.word	0x08001b8f
 8001b40:	08001c8d 	.word	0x08001c8d
 8001b44:	08001bd7 	.word	0x08001bd7
 8001b48:	08001c8d 	.word	0x08001c8d
 8001b4c:	08001c8d 	.word	0x08001c8d
 8001b50:	08001c8d 	.word	0x08001c8d
 8001b54:	08001c37 	.word	0x08001c37
		case 3:
#if DEBUG
			print("state: standby");
 8001b58:	4859      	ldr	r0, [pc, #356]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b5a:	f7ff fcc9 	bl	80014f0 <print>
#endif
			//Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b5e:	4b50      	ldr	r3, [pc, #320]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a50      	ldr	r2, [pc, #320]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b64:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001b66:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b68:	2203      	movs	r2, #3
 8001b6a:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001b72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b80:	2204      	movs	r2, #4
 8001b82:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b84:	4a48      	ldr	r2, [pc, #288]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b86:	4947      	ldr	r1, [pc, #284]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b88:	4848      	ldr	r0, [pc, #288]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001b8a:	f005 fc3e 	bl	800740a <HAL_FDCAN_AddMessageToTxFifoQ>


		case 4:

#if DEBUG
	print("state: ready");
 8001b8e:	484d      	ldr	r0, [pc, #308]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001b90:	f7ff fcae 	bl	80014f0 <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001b94:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b96:	f240 3262 	movw	r2, #866	@ 0x362
 8001b9a:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001ba2:	4b49      	ldr	r3, [pc, #292]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001bae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001bb4:	4b44      	ldr	r3, [pc, #272]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001bbc:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bc4:	4a38      	ldr	r2, [pc, #224]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001bc6:	4937      	ldr	r1, [pc, #220]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001bc8:	4838      	ldr	r0, [pc, #224]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001bca:	f005 fc1e 	bl	800740a <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; //Reactivado
 8001bce:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]


			break;
 8001bd4:	e05a      	b.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0x224>

			//Request TORQUE inversor

			//flag_react = 1;

			real_torque = setTorque();
 8001bd6:	f7ff fdd3 	bl	8001780 <setTorque>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001be0:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001be2:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001be4:	f240 3262 	movw	r2, #866	@ 0x362
 8001be8:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001bea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001bec:	2204      	movs	r2, #4
 8001bee:	60da      	str	r2, [r3, #12]

			//real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001bf0:	4b35      	ldr	r3, [pc, #212]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b35      	ldr	r3, [pc, #212]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001bf8:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001bfa:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c06:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001c0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c1a:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c22:	70da      	strb	r2, [r3, #3]
			//TxData_Inv[2] = 0xFE;
			//TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv) ;
 8001c24:	4a20      	ldr	r2, [pc, #128]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c26:	491f      	ldr	r1, [pc, #124]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001c28:	4820      	ldr	r0, [pc, #128]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001c2a:	f005 fbee 	bl	800740a <HAL_FDCAN_AddMessageToTxFifoQ>
 			CAN_bus_off_check_reset(&hfdcan1);
 8001c2e:	481f      	ldr	r0, [pc, #124]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001c30:	f000 f8c8 	bl	8001dc4 <CAN_bus_off_check_reset>

			break;
 8001c34:	e02a      	b.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0x224>

		case 10:
			print("state: soft fault");
 8001c36:	4827      	ldr	r0, [pc, #156]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c38:	f7ff fc5a 	bl	80014f0 <print>
			printValue(error);
 8001c3c:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fc73 	bl	800152c <printValue>

			//Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c46:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001c4c:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001c50:	2203      	movs	r2, #3
 8001c52:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c54:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x3;
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c68:	2203      	movs	r2, #3
 8001c6a:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c6e:	490d      	ldr	r1, [pc, #52]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001c70:	480e      	ldr	r0, [pc, #56]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001c72:	f005 fbca 	bl	800740a <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 1;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
			case 3:
				print("Error: Overtemperature");
				break;
			}*/

			if (inv_dc_bus_voltage < 60) {
 8001c7c:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c82:	dc02      	bgt.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x222>
				flag_undervoltage = 1;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
					TxData_Inv[2] = 0x3;
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,TxData_Inv);
				}
			}*/

			break;
 8001c8a:	bf00      	nop
		}
#endif
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	240003f4 	.word	0x240003f4
 8001c98:	2400180f 	.word	0x2400180f
 8001c9c:	24001810 	.word	0x24001810
 8001ca0:	24000000 	.word	0x24000000
 8001ca4:	24000568 	.word	0x24000568
 8001ca8:	24000600 	.word	0x24000600
 8001cac:	240001ec 	.word	0x240001ec
 8001cb0:	24001694 	.word	0x24001694
 8001cb4:	24001811 	.word	0x24001811
 8001cb8:	58020800 	.word	0x58020800
 8001cbc:	240016a2 	.word	0x240016a2
 8001cc0:	080128a8 	.word	0x080128a8
 8001cc4:	080127f8 	.word	0x080127f8
 8001cc8:	240016a0 	.word	0x240016a0
 8001ccc:	2400169a 	.word	0x2400169a
 8001cd0:	2400169b 	.word	0x2400169b
 8001cd4:	080128b8 	.word	0x080128b8
 8001cd8:	2400180e 	.word	0x2400180e
 8001cdc:	24001660 	.word	0x24001660

08001ce0 <SDCard_start>:

void SDCard_start(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
	FATFS *FS_Ptr;
	DWORD FreeClusters;
	uint32_t TotalSize, FreeSpace;
	do {
		//------------------[ Mount The SD Card ]--------------------
		FR_Status = f_mount(&FatFs, SDPath, 1);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	492e      	ldr	r1, [pc, #184]	@ (8001da4 <SDCard_start+0xc4>)
 8001cea:	482f      	ldr	r0, [pc, #188]	@ (8001da8 <SDCard_start+0xc8>)
 8001cec:	f00f fec2 	bl	8011a74 <f_mount>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	75fb      	strb	r3, [r7, #23]
		if (FR_Status != FR_OK) {
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <SDCard_start+0x2e>
			sprintf(TxBuffer, "Error! Error Code: (%i)\r\n", FR_Status);
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	492b      	ldr	r1, [pc, #172]	@ (8001dac <SDCard_start+0xcc>)
 8001d00:	482b      	ldr	r0, [pc, #172]	@ (8001db0 <SDCard_start+0xd0>)
 8001d02:	f010 f80f 	bl	8011d24 <siprintf>
			print(TxBuffer);
 8001d06:	482a      	ldr	r0, [pc, #168]	@ (8001db0 <SDCard_start+0xd0>)
 8001d08:	f7ff fbf2 	bl	80014f0 <print>
			break;
 8001d0c:	e045      	b.n	8001d9a <SDCard_start+0xba>
		}
		sprintf(TxBuffer, "SD montada correctamente \r\n\n");
 8001d0e:	4929      	ldr	r1, [pc, #164]	@ (8001db4 <SDCard_start+0xd4>)
 8001d10:	4827      	ldr	r0, [pc, #156]	@ (8001db0 <SDCard_start+0xd0>)
 8001d12:	f010 f807 	bl	8011d24 <siprintf>
		print(TxBuffer);
 8001d16:	4826      	ldr	r0, [pc, #152]	@ (8001db0 <SDCard_start+0xd0>)
 8001d18:	f7ff fbea 	bl	80014f0 <print>
		//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8001d1c:	f107 0208 	add.w	r2, r7, #8
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4824      	ldr	r0, [pc, #144]	@ (8001db8 <SDCard_start+0xd8>)
 8001d26:	f00f feeb 	bl	8011b00 <f_getfree>
		TotalSize = (uint32_t) ((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	3b02      	subs	r3, #2
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	8952      	ldrh	r2, [r2, #10]
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d40:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d4c:	ee17 3a90 	vmov	r3, s15
 8001d50:	613b      	str	r3, [r7, #16]
		FreeSpace = (uint32_t) (FreeClusters * FS_Ptr->csize * 0.5);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	895b      	ldrh	r3, [r3, #10]
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d66:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d72:	ee17 3a90 	vmov	r3, s15
 8001d76:	60fb      	str	r3, [r7, #12]
		sprintf(TxBuffer, "Espacio total: %lu Bytes\r\n", TotalSize);
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4910      	ldr	r1, [pc, #64]	@ (8001dbc <SDCard_start+0xdc>)
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <SDCard_start+0xd0>)
 8001d7e:	f00f ffd1 	bl	8011d24 <siprintf>
		print(TxBuffer);
 8001d82:	480b      	ldr	r0, [pc, #44]	@ (8001db0 <SDCard_start+0xd0>)
 8001d84:	f7ff fbb4 	bl	80014f0 <print>
		sprintf(TxBuffer, "Espacio libre: %lu Bytes\r\n\n", FreeSpace);
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	490d      	ldr	r1, [pc, #52]	@ (8001dc0 <SDCard_start+0xe0>)
 8001d8c:	4808      	ldr	r0, [pc, #32]	@ (8001db0 <SDCard_start+0xd0>)
 8001d8e:	f00f ffc9 	bl	8011d24 <siprintf>
		print(TxBuffer);
 8001d92:	4807      	ldr	r0, [pc, #28]	@ (8001db0 <SDCard_start+0xd0>)
 8001d94:	f7ff fbac 	bl	80014f0 <print>
	} while (0);

}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24001828 	.word	0x24001828
 8001da8:	24000620 	.word	0x24000620
 8001dac:	080128cc 	.word	0x080128cc
 8001db0:	24001714 	.word	0x24001714
 8001db4:	080128e8 	.word	0x080128e8
 8001db8:	08012908 	.word	0x08012908
 8001dbc:	0801290c 	.word	0x0801290c
 8001dc0:	08012928 	.word	0x08012928

08001dc4 <CAN_bus_off_check_reset>:

void CAN_bus_off_check_reset(FDCAN_HandleTypeDef *hfdcan){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08e      	sub	sp, #56	@ 0x38
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	FDCAN_ProtocolStatusTypeDef protocolStatus;
	HAL_FDCAN_GetProtocolStatus(hfdcan, &protocolStatus);
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f005 fce0 	bl	8007798 <HAL_FDCAN_GetProtocolStatus>
	if(protocolStatus.BusOff){
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <CAN_bus_off_check_reset+0x2a>
		CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	619a      	str	r2, [r3, #24]
	}
}
 8001dee:	bf00      	nop
 8001df0:	3738      	adds	r7, #56	@ 0x38
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfa:	b672      	cpsid	i
}
 8001dfc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dfe:	bf00      	nop
 8001e00:	e7fd      	b.n	8001dfe <Error_Handler+0x8>
	...

08001e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_MspInit+0x30>)
 8001e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e10:	4a08      	ldr	r2, [pc, #32]	@ (8001e34 <HAL_MspInit+0x30>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_MspInit+0x30>)
 8001e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	58024400 	.word	0x58024400

08001e38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b090      	sub	sp, #64	@ 0x40
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a90      	ldr	r2, [pc, #576]	@ (8002098 <HAL_ADC_MspInit+0x260>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	f040 80a3 	bne.w	8001fa2 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800209c <HAL_ADC_MspInit+0x264>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	4a8e      	ldr	r2, [pc, #568]	@ (800209c <HAL_ADC_MspInit+0x264>)
 8001e64:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e66:	4b8d      	ldr	r3, [pc, #564]	@ (800209c <HAL_ADC_MspInit+0x264>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10e      	bne.n	8001e8c <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e6e:	4b8c      	ldr	r3, [pc, #560]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e74:	4a8a      	ldr	r2, [pc, #552]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e7e:	4b88      	ldr	r3, [pc, #544]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8c:	4b84      	ldr	r3, [pc, #528]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e92:	4a83      	ldr	r2, [pc, #524]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e9c:	4b80      	ldr	r3, [pc, #512]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb0:	4a7b      	ldr	r2, [pc, #492]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001eb2:	f043 0302 	orr.w	r3, r3, #2
 8001eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eba:	4b79      	ldr	r3, [pc, #484]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec8:	4b75      	ldr	r3, [pc, #468]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ece:	4a74      	ldr	r2, [pc, #464]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001ed0:	f043 0320 	orr.w	r3, r3, #32
 8001ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed8:	4b71      	ldr	r3, [pc, #452]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001ee6:	2330      	movs	r3, #48	@ 0x30
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eea:	2303      	movs	r3, #3
 8001eec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	486a      	ldr	r0, [pc, #424]	@ (80020a4 <HAL_ADC_MspInit+0x26c>)
 8001efa:	f006 fa13 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001efe:	2303      	movs	r3, #3
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f02:	2303      	movs	r3, #3
 8001f04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4865      	ldr	r0, [pc, #404]	@ (80020a8 <HAL_ADC_MspInit+0x270>)
 8001f12:	f006 fa07 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001f16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4860      	ldr	r0, [pc, #384]	@ (80020ac <HAL_ADC_MspInit+0x274>)
 8001f2c:	f006 f9fa 	bl	8008324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f30:	4b5f      	ldr	r3, [pc, #380]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f32:	4a60      	ldr	r2, [pc, #384]	@ (80020b4 <HAL_ADC_MspInit+0x27c>)
 8001f34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f36:	4b5e      	ldr	r3, [pc, #376]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f38:	2209      	movs	r2, #9
 8001f3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f42:	4b5b      	ldr	r3, [pc, #364]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f48:	4b59      	ldr	r3, [pc, #356]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f50:	4b57      	ldr	r3, [pc, #348]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f58:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f60:	4b53      	ldr	r3, [pc, #332]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f68:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f6e:	4b50      	ldr	r3, [pc, #320]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f74:	484e      	ldr	r0, [pc, #312]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f76:	f002 fef5 	bl	8004d64 <HAL_DMA_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001f80:	f7ff ff39 	bl	8001df6 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a4a      	ldr	r2, [pc, #296]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f88:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f8a:	4a49      	ldr	r2, [pc, #292]	@ (80020b0 <HAL_ADC_MspInit+0x278>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2012      	movs	r0, #18
 8001f96:	f002 feb0 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f9a:	2012      	movs	r0, #18
 8001f9c:	f002 fec7 	bl	8004d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001fa0:	e076      	b.n	8002090 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a44      	ldr	r2, [pc, #272]	@ (80020b8 <HAL_ADC_MspInit+0x280>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d171      	bne.n	8002090 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fac:	4b3b      	ldr	r3, [pc, #236]	@ (800209c <HAL_ADC_MspInit+0x264>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <HAL_ADC_MspInit+0x264>)
 8001fb4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fb6:	4b39      	ldr	r3, [pc, #228]	@ (800209c <HAL_ADC_MspInit+0x264>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10e      	bne.n	8001fdc <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fbe:	4b38      	ldr	r3, [pc, #224]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fc4:	4a36      	ldr	r2, [pc, #216]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001fc6:	f043 0320 	orr.w	r3, r3, #32
 8001fca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fce:	4b34      	ldr	r3, [pc, #208]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001fd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fdc:	4b30      	ldr	r3, [pc, #192]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fec:	4b2c      	ldr	r3, [pc, #176]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	4b29      	ldr	r3, [pc, #164]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002000:	4a27      	ldr	r2, [pc, #156]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800200a:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 800200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002018:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201e:	4a20      	ldr	r2, [pc, #128]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 8002020:	f043 0320 	orr.w	r3, r3, #32
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_ADC_MspInit+0x268>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8002036:	2320      	movs	r3, #32
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203a:	2303      	movs	r3, #3
 800203c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002046:	4619      	mov	r1, r3
 8002048:	4816      	ldr	r0, [pc, #88]	@ (80020a4 <HAL_ADC_MspInit+0x26c>)
 800204a:	f006 f96b 	bl	8008324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 800204e:	2301      	movs	r3, #1
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002052:	2303      	movs	r3, #3
 8002054:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	4811      	ldr	r0, [pc, #68]	@ (80020a8 <HAL_ADC_MspInit+0x270>)
 8002062:	f006 f95f 	bl	8008324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 8002066:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206c:	2303      	movs	r3, #3
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002078:	4619      	mov	r1, r3
 800207a:	480c      	ldr	r0, [pc, #48]	@ (80020ac <HAL_ADC_MspInit+0x274>)
 800207c:	f006 f952 	bl	8008324 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	2012      	movs	r0, #18
 8002086:	f002 fe38 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800208a:	2012      	movs	r0, #18
 800208c:	f002 fe4f 	bl	8004d2e <HAL_NVIC_EnableIRQ>
}
 8002090:	bf00      	nop
 8002092:	3740      	adds	r7, #64	@ 0x40
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40022000 	.word	0x40022000
 800209c:	24001814 	.word	0x24001814
 80020a0:	58024400 	.word	0x58024400
 80020a4:	58020800 	.word	0x58020800
 80020a8:	58020400 	.word	0x58020400
 80020ac:	58021400 	.word	0x58021400
 80020b0:	24000174 	.word	0x24000174
 80020b4:	40020010 	.word	0x40020010
 80020b8:	40022100 	.word	0x40022100

080020bc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0ba      	sub	sp, #232	@ 0xe8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	22b8      	movs	r2, #184	@ 0xb8
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f00f fe41 	bl	8011d64 <memset>
  if(hfdcan->Instance==FDCAN1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002260 <HAL_FDCAN_MspInit+0x1a4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d157      	bne.n	800219c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fe:	f107 0318 	add.w	r3, r7, #24
 8002102:	4618      	mov	r0, r3
 8002104:	f007 fa88 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800210e:	f7ff fe72 	bl	8001df6 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002112:	4b54      	ldr	r3, [pc, #336]	@ (8002264 <HAL_FDCAN_MspInit+0x1a8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	4a52      	ldr	r2, [pc, #328]	@ (8002264 <HAL_FDCAN_MspInit+0x1a8>)
 800211a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800211c:	4b51      	ldr	r3, [pc, #324]	@ (8002264 <HAL_FDCAN_MspInit+0x1a8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10e      	bne.n	8002142 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002124:	4b50      	ldr	r3, [pc, #320]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 8002126:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800212a:	4a4f      	ldr	r2, [pc, #316]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002130:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002134:	4b4c      	ldr	r3, [pc, #304]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 8002136:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800213a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	4b49      	ldr	r3, [pc, #292]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002148:	4a47      	ldr	r2, [pc, #284]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002152:	4b45      	ldr	r3, [pc, #276]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002160:	2303      	movs	r3, #3
 8002162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002178:	2309      	movs	r3, #9
 800217a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002182:	4619      	mov	r1, r3
 8002184:	4839      	ldr	r0, [pc, #228]	@ (800226c <HAL_FDCAN_MspInit+0x1b0>)
 8002186:	f006 f8cd 	bl	8008324 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2101      	movs	r1, #1
 800218e:	2013      	movs	r0, #19
 8002190:	f002 fdb3 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002194:	2013      	movs	r0, #19
 8002196:	f002 fdca 	bl	8004d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800219a:	e05c      	b.n	8002256 <HAL_FDCAN_MspInit+0x19a>
  else if(hfdcan->Instance==FDCAN2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a33      	ldr	r2, [pc, #204]	@ (8002270 <HAL_FDCAN_MspInit+0x1b4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d157      	bne.n	8002256 <HAL_FDCAN_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	4618      	mov	r0, r3
 80021be:	f007 fa2b 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80021c8:	f7ff fe15 	bl	8001df6 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021cc:	4b25      	ldr	r3, [pc, #148]	@ (8002264 <HAL_FDCAN_MspInit+0x1a8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <HAL_FDCAN_MspInit+0x1a8>)
 80021d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021d6:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_FDCAN_MspInit+0x1a8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10e      	bne.n	80021fc <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021de:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 80021e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021e4:	4a20      	ldr	r2, [pc, #128]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ea:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 80021f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002202:	4a19      	ldr	r2, [pc, #100]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800220c:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <HAL_FDCAN_MspInit+0x1ac>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800221a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800221e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002234:	2309      	movs	r3, #9
 8002236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800223e:	4619      	mov	r1, r3
 8002240:	480c      	ldr	r0, [pc, #48]	@ (8002274 <HAL_FDCAN_MspInit+0x1b8>)
 8002242:	f006 f86f 	bl	8008324 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2102      	movs	r1, #2
 800224a:	2014      	movs	r0, #20
 800224c:	f002 fd55 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002250:	2014      	movs	r0, #20
 8002252:	f002 fd6c 	bl	8004d2e <HAL_NVIC_EnableIRQ>
}
 8002256:	bf00      	nop
 8002258:	37e8      	adds	r7, #232	@ 0xe8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	4000a000 	.word	0x4000a000
 8002264:	24001818 	.word	0x24001818
 8002268:	58024400 	.word	0x58024400
 800226c:	58020c00 	.word	0x58020c00
 8002270:	4000a400 	.word	0x4000a400
 8002274:	58020400 	.word	0x58020400

08002278 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	@ 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3e      	ldr	r2, [pc, #248]	@ (8002390 <HAL_SD_MspInit+0x118>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d175      	bne.n	8002386 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800229a:	4b3e      	ldr	r3, [pc, #248]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 800229c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80022aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b8:	4b36      	ldr	r3, [pc, #216]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022be:	4a35      	ldr	r2, [pc, #212]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c8:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fa:	4a26      	ldr	r2, [pc, #152]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002304:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <HAL_SD_MspInit+0x11c>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002312:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002316:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002324:	230c      	movs	r3, #12
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	481a      	ldr	r0, [pc, #104]	@ (8002398 <HAL_SD_MspInit+0x120>)
 8002330:	f005 fff8 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002334:	2304      	movs	r3, #4
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002344:	230c      	movs	r3, #12
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	4619      	mov	r1, r3
 800234e:	4813      	ldr	r0, [pc, #76]	@ (800239c <HAL_SD_MspInit+0x124>)
 8002350:	f005 ffe8 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8002366:	2307      	movs	r3, #7
 8002368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	480b      	ldr	r0, [pc, #44]	@ (80023a0 <HAL_SD_MspInit+0x128>)
 8002372:	f005 ffd7 	bl	8008324 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2031      	movs	r0, #49	@ 0x31
 800237c:	f002 fcbd 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002380:	2031      	movs	r0, #49	@ 0x31
 8002382:	f002 fcd4 	bl	8004d2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002386:	bf00      	nop
 8002388:	3730      	adds	r7, #48	@ 0x30
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	52007000 	.word	0x52007000
 8002394:	58024400 	.word	0x58024400
 8002398:	58020800 	.word	0x58020800
 800239c:	58020c00 	.word	0x58020c00
 80023a0:	58020400 	.word	0x58020400

080023a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_TIM_Base_MspInit+0x74>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10f      	bne.n	80023d6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_TIM_Base_MspInit+0x78>)
 80023b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <HAL_TIM_Base_MspInit+0x78>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_TIM_Base_MspInit+0x78>)
 80023c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80023d4:	e01b      	b.n	800240e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a11      	ldr	r2, [pc, #68]	@ (8002420 <HAL_TIM_Base_MspInit+0x7c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d116      	bne.n	800240e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <HAL_TIM_Base_MspInit+0x78>)
 80023e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e6:	4a0d      	ldr	r2, [pc, #52]	@ (800241c <HAL_TIM_Base_MspInit+0x78>)
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_TIM_Base_MspInit+0x78>)
 80023f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	2075      	movs	r0, #117	@ 0x75
 8002404:	f002 fc79 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002408:	2075      	movs	r0, #117	@ 0x75
 800240a:	f002 fc90 	bl	8004d2e <HAL_NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40010000 	.word	0x40010000
 800241c:	58024400 	.word	0x58024400
 8002420:	40014400 	.word	0x40014400

08002424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a13      	ldr	r2, [pc, #76]	@ (8002490 <HAL_TIM_MspPostInit+0x6c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11f      	bne.n	8002486 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002446:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <HAL_TIM_MspPostInit+0x70>)
 8002448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244c:	4a11      	ldr	r2, [pc, #68]	@ (8002494 <HAL_TIM_MspPostInit+0x70>)
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002456:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <HAL_TIM_MspPostInit+0x70>)
 8002458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002464:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002468:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002476:	2301      	movs	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	@ (8002498 <HAL_TIM_MspPostInit+0x74>)
 8002482:	f005 ff4f 	bl	8008324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002486:	bf00      	nop
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40010000 	.word	0x40010000
 8002494:	58024400 	.word	0x58024400
 8002498:	58021000 	.word	0x58021000

0800249c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0ba      	sub	sp, #232	@ 0xe8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b4:	f107 0318 	add.w	r3, r7, #24
 80024b8:	22b8      	movs	r2, #184	@ 0xb8
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f00f fc51 	bl	8011d64 <memset>
  if(huart->Instance==USART1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a4d      	ldr	r2, [pc, #308]	@ (80025fc <HAL_UART_MspInit+0x160>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d147      	bne.n	800255c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024cc:	f04f 0201 	mov.w	r2, #1
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024de:	f107 0318 	add.w	r3, r7, #24
 80024e2:	4618      	mov	r0, r3
 80024e4:	f007 f898 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024ee:	f7ff fc82 	bl	8001df6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f2:	4b43      	ldr	r3, [pc, #268]	@ (8002600 <HAL_UART_MspInit+0x164>)
 80024f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024f8:	4a41      	ldr	r2, [pc, #260]	@ (8002600 <HAL_UART_MspInit+0x164>)
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002502:	4b3f      	ldr	r3, [pc, #252]	@ (8002600 <HAL_UART_MspInit+0x164>)
 8002504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b3b      	ldr	r3, [pc, #236]	@ (8002600 <HAL_UART_MspInit+0x164>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	4a3a      	ldr	r2, [pc, #232]	@ (8002600 <HAL_UART_MspInit+0x164>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002520:	4b37      	ldr	r3, [pc, #220]	@ (8002600 <HAL_UART_MspInit+0x164>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 800252e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002532:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002548:	2307      	movs	r3, #7
 800254a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002552:	4619      	mov	r1, r3
 8002554:	482b      	ldr	r0, [pc, #172]	@ (8002604 <HAL_UART_MspInit+0x168>)
 8002556:	f005 fee5 	bl	8008324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800255a:	e04a      	b.n	80025f2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a29      	ldr	r2, [pc, #164]	@ (8002608 <HAL_UART_MspInit+0x16c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d145      	bne.n	80025f2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002566:	f04f 0202 	mov.w	r2, #2
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002578:	f107 0318 	add.w	r3, r7, #24
 800257c:	4618      	mov	r0, r3
 800257e:	f007 f84b 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002588:	f7ff fc35 	bl	8001df6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800258c:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <HAL_UART_MspInit+0x164>)
 800258e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002592:	4a1b      	ldr	r2, [pc, #108]	@ (8002600 <HAL_UART_MspInit+0x164>)
 8002594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002598:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800259c:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_UART_MspInit+0x164>)
 800259e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <HAL_UART_MspInit+0x164>)
 80025ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b0:	4a13      	ldr	r2, [pc, #76]	@ (8002600 <HAL_UART_MspInit+0x164>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <HAL_UART_MspInit+0x164>)
 80025bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c8:	230c      	movs	r3, #12
 80025ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e0:	2307      	movs	r3, #7
 80025e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025ea:	4619      	mov	r1, r3
 80025ec:	4805      	ldr	r0, [pc, #20]	@ (8002604 <HAL_UART_MspInit+0x168>)
 80025ee:	f005 fe99 	bl	8008324 <HAL_GPIO_Init>
}
 80025f2:	bf00      	nop
 80025f4:	37e8      	adds	r7, #232	@ 0xe8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40011000 	.word	0x40011000
 8002600:	58024400 	.word	0x58024400
 8002604:	58020000 	.word	0x58020000
 8002608:	40004400 	.word	0x40004400

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <NMI_Handler+0x4>

08002614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <MemManage_Handler+0x4>

08002624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <BusFault_Handler+0x4>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <UsageFault_Handler+0x4>

08002634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002662:	f000 f98d 	bl	8002980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002670:	4802      	ldr	r0, [pc, #8]	@ (800267c <DMA1_Stream0_IRQHandler+0x10>)
 8002672:	f003 f939 	bl	80058e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24000174 	.word	0x24000174

08002680 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002684:	4803      	ldr	r0, [pc, #12]	@ (8002694 <ADC_IRQHandler+0x14>)
 8002686:	f000 ff8f 	bl	80035a8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800268a:	4803      	ldr	r0, [pc, #12]	@ (8002698 <ADC_IRQHandler+0x18>)
 800268c:	f000 ff8c 	bl	80035a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	24000094 	.word	0x24000094
 8002698:	24000104 	.word	0x24000104

0800269c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80026a0:	4802      	ldr	r0, [pc, #8]	@ (80026ac <FDCAN1_IT0_IRQHandler+0x10>)
 80026a2:	f005 f943 	bl	800792c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	240001ec 	.word	0x240001ec

080026b0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80026b4:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <FDCAN2_IT0_IRQHandler+0x10>)
 80026b6:	f005 f939 	bl	800792c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2400028c 	.word	0x2400028c

080026c4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80026c8:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <SDMMC1_IRQHandler+0x10>)
 80026ca:	f009 fdfb 	bl	800c2c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2400032c 	.word	0x2400032c

080026d8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <TIM16_IRQHandler+0x10>)
 80026de:	f00b f924 	bl	800d92a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	240003f4 	.word	0x240003f4

080026ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <_sbrk+0x5c>)
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <_sbrk+0x60>)
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <_sbrk+0x64>)
 800270a:	4a12      	ldr	r2, [pc, #72]	@ (8002754 <_sbrk+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d207      	bcs.n	800272c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800271c:	f00f fb2a 	bl	8011d74 <__errno>
 8002720:	4603      	mov	r3, r0
 8002722:	220c      	movs	r2, #12
 8002724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e009      	b.n	8002740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <_sbrk+0x64>)
 800273c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	24050000 	.word	0x24050000
 800274c:	00000400 	.word	0x00000400
 8002750:	2400181c 	.word	0x2400181c
 8002754:	24001bb8 	.word	0x24001bb8

08002758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800275c:	4b32      	ldr	r3, [pc, #200]	@ (8002828 <SystemInit+0xd0>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	4a31      	ldr	r2, [pc, #196]	@ (8002828 <SystemInit+0xd0>)
 8002764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800276c:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <SystemInit+0xd4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	2b06      	cmp	r3, #6
 8002776:	d807      	bhi.n	8002788 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002778:	4b2c      	ldr	r3, [pc, #176]	@ (800282c <SystemInit+0xd4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 030f 	bic.w	r3, r3, #15
 8002780:	4a2a      	ldr	r2, [pc, #168]	@ (800282c <SystemInit+0xd4>)
 8002782:	f043 0307 	orr.w	r3, r3, #7
 8002786:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002788:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <SystemInit+0xd8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a28      	ldr	r2, [pc, #160]	@ (8002830 <SystemInit+0xd8>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002794:	4b26      	ldr	r3, [pc, #152]	@ (8002830 <SystemInit+0xd8>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800279a:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <SystemInit+0xd8>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4924      	ldr	r1, [pc, #144]	@ (8002830 <SystemInit+0xd8>)
 80027a0:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <SystemInit+0xdc>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027a6:	4b21      	ldr	r3, [pc, #132]	@ (800282c <SystemInit+0xd4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <SystemInit+0xd4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 030f 	bic.w	r3, r3, #15
 80027ba:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <SystemInit+0xd4>)
 80027bc:	f043 0307 	orr.w	r3, r3, #7
 80027c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <SystemInit+0xd8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027c8:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <SystemInit+0xd8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027ce:	4b18      	ldr	r3, [pc, #96]	@ (8002830 <SystemInit+0xd8>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027d4:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <SystemInit+0xd8>)
 80027d6:	4a18      	ldr	r2, [pc, #96]	@ (8002838 <SystemInit+0xe0>)
 80027d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <SystemInit+0xd8>)
 80027dc:	4a17      	ldr	r2, [pc, #92]	@ (800283c <SystemInit+0xe4>)
 80027de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027e0:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <SystemInit+0xd8>)
 80027e2:	4a17      	ldr	r2, [pc, #92]	@ (8002840 <SystemInit+0xe8>)
 80027e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <SystemInit+0xd8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027ec:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <SystemInit+0xd8>)
 80027ee:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <SystemInit+0xe8>)
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <SystemInit+0xd8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <SystemInit+0xd8>)
 80027fa:	4a11      	ldr	r2, [pc, #68]	@ (8002840 <SystemInit+0xe8>)
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <SystemInit+0xd8>)
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <SystemInit+0xd8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <SystemInit+0xd8>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <SystemInit+0xd8>)
 8002812:	2200      	movs	r2, #0
 8002814:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <SystemInit+0xec>)
 8002818:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800281c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00
 800282c:	52002000 	.word	0x52002000
 8002830:	58024400 	.word	0x58024400
 8002834:	eaf6ed7f 	.word	0xeaf6ed7f
 8002838:	02020200 	.word	0x02020200
 800283c:	01ff0000 	.word	0x01ff0000
 8002840:	01010280 	.word	0x01010280
 8002844:	52004000 	.word	0x52004000

08002848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800284c:	f7ff ff84 	bl	8002758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002852:	490d      	ldr	r1, [pc, #52]	@ (8002888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002868:	4c0a      	ldr	r4, [pc, #40]	@ (8002894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002876:	f00f fa83 	bl	8011d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287a:	f7fd ff7b 	bl	8000774 <main>
  bx  lr
 800287e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002880:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002884:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002888:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800288c:	08012af8 	.word	0x08012af8
  ldr r2, =_sbss
 8002890:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002894:	24001bb4 	.word	0x24001bb4

08002898 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <ADC3_IRQHandler>
	...

0800289c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a2:	2003      	movs	r0, #3
 80028a4:	f002 fa1e 	bl	8004ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028a8:	f006 fce0 	bl	800926c <HAL_RCC_GetSysClockFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_Init+0x68>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	4913      	ldr	r1, [pc, #76]	@ (8002908 <HAL_Init+0x6c>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HAL_Init+0x68>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <HAL_Init+0x6c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	4a0b      	ldr	r2, [pc, #44]	@ (800290c <HAL_Init+0x70>)
 80028de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002910 <HAL_Init+0x74>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e6:	200f      	movs	r0, #15
 80028e8:	f000 f814 	bl	8002914 <HAL_InitTick>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e002      	b.n	80028fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028f6:	f7ff fa85 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	58024400 	.word	0x58024400
 8002908:	08012a50 	.word	0x08012a50
 800290c:	24000010 	.word	0x24000010
 8002910:	2400000c 	.word	0x2400000c

08002914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800291c:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_InitTick+0x60>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e021      	b.n	800296c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <HAL_InitTick+0x64>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_InitTick+0x60>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002936:	fbb3 f3f1 	udiv	r3, r3, r1
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fa03 	bl	8004d4a <HAL_SYSTICK_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e00e      	b.n	800296c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b0f      	cmp	r3, #15
 8002952:	d80a      	bhi.n	800296a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002954:	2200      	movs	r2, #0
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f002 f9cd 	bl	8004cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002960:	4a06      	ldr	r2, [pc, #24]	@ (800297c <HAL_InitTick+0x68>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	24000018 	.word	0x24000018
 8002978:	2400000c 	.word	0x2400000c
 800297c:	24000014 	.word	0x24000014

08002980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_IncTick+0x20>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_IncTick+0x24>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4413      	add	r3, r2
 8002990:	4a04      	ldr	r2, [pc, #16]	@ (80029a4 <HAL_IncTick+0x24>)
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	24000018 	.word	0x24000018
 80029a4:	24001820 	.word	0x24001820

080029a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b03      	ldr	r3, [pc, #12]	@ (80029bc <HAL_GetTick+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	24001820 	.word	0x24001820

080029c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff ffee 	bl	80029a8 <HAL_GetTick>
 80029cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d005      	beq.n	80029e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_Delay+0x44>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029e6:	bf00      	nop
 80029e8:	f7ff ffde 	bl	80029a8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d8f7      	bhi.n	80029e8 <HAL_Delay+0x28>
  {
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	24000018 	.word	0x24000018

08002a08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3360      	adds	r3, #96	@ 0x60
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a10      	ldr	r2, [pc, #64]	@ (8002ad0 <LL_ADC_SetOffset+0x60>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10b      	bne.n	8002aac <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002aaa:	e00b      	b.n	8002ac4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	58026000 	.word	0x58026000

08002ad4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3360      	adds	r3, #96	@ 0x60
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	611a      	str	r2, [r3, #16]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00e      	beq.n	8002b66 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3360      	adds	r3, #96	@ 0x60
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	601a      	str	r2, [r3, #0]
  }
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	58026000 	.word	0x58026000

08002b78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb8 <LL_ADC_SetOffsetSaturation+0x40>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10e      	bne.n	8002baa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3360      	adds	r3, #96	@ 0x60
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	58026000 	.word	0x58026000

08002bbc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <LL_ADC_SetOffsetSign+0x40>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10e      	bne.n	8002bee <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3360      	adds	r3, #96	@ 0x60
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	58026000 	.word	0x58026000

08002c00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3360      	adds	r3, #96	@ 0x60
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c50 <LL_ADC_SetOffsetState+0x50>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d108      	bne.n	8002c34 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002c32:	e007      	b.n	8002c44 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	58026000 	.word	0x58026000

08002c54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b087      	sub	sp, #28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3330      	adds	r3, #48	@ 0x30
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	211f      	movs	r1, #31
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 011f 	and.w	r1, r3, #31
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f023 0203 	bic.w	r2, r3, #3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	60da      	str	r2, [r3, #12]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d107      	bne.n	8002d3a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60da      	str	r2, [r3, #12]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	58026000 	.word	0x58026000

08002d4c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d58:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3314      	adds	r3, #20
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	0e5b      	lsrs	r3, r3, #25
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	4413      	add	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	0d1b      	lsrs	r3, r3, #20
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2107      	movs	r1, #7
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	401a      	ands	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	0d1b      	lsrs	r3, r3, #20
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	431a      	orrs	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e40 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d115      	bne.n	8002e08 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0318 	and.w	r3, r3, #24
 8002df2:	4914      	ldr	r1, [pc, #80]	@ (8002e44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002df4:	40d9      	lsrs	r1, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	400b      	ands	r3, r1
 8002dfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e06:	e014      	b.n	8002e32 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e14:	43db      	mvns	r3, r3
 8002e16:	401a      	ands	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0318 	and.w	r3, r3, #24
 8002e1e:	4909      	ldr	r1, [pc, #36]	@ (8002e44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e20:	40d9      	lsrs	r1, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	400b      	ands	r3, r1
 8002e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	58026000 	.word	0x58026000
 8002e44:	000fffff 	.word	0x000fffff

08002e48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 031f 	and.w	r3, r3, #31
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6093      	str	r3, [r2, #8]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	5fffffc0 	.word	0x5fffffc0

08002ea4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb8:	d101      	bne.n	8002ebe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	6fffffc0 	.word	0x6fffffc0

08002ef4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f08:	d101      	bne.n	8002f0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <LL_ADC_Enable+0x24>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	7fffffc0 	.word	0x7fffffc0

08002f44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <LL_ADC_IsEnabled+0x18>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <LL_ADC_IsEnabled+0x1a>
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <LL_ADC_REG_StartConversion+0x24>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	f043 0204 	orr.w	r2, r3, #4
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	7fffffc0 	.word	0x7fffffc0

08002f94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d101      	bne.n	8002fac <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d101      	bne.n	8002fd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b089      	sub	sp, #36	@ 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1ee      	b.n	80033d8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fe ff15 	bl	8001e38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff3f 	bl	8002ea4 <LL_ADC_IsDeepPowerDownEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff25 	bl	8002e80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff5a 	bl	8002ef4 <LL_ADC_IsInternalRegulatorEnabled>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d114      	bne.n	8003070 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff3e 	bl	8002ecc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003050:	4b8e      	ldr	r3, [pc, #568]	@ (800328c <HAL_ADC_Init+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	4a8e      	ldr	r2, [pc, #568]	@ (8003290 <HAL_ADC_Init+0x2b0>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	3301      	adds	r3, #1
 8003060:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003062:	e002      	b.n	800306a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3b01      	subs	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f9      	bne.n	8003064 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff3d 	bl	8002ef4 <LL_ADC_IsInternalRegulatorEnabled>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff77 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 80030a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 8188 	bne.w	80033c6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 8184 	bne.w	80033c6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030c6:	f043 0202 	orr.w	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff36 	bl	8002f44 <LL_ADC_IsEnabled>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d136      	bne.n	800314c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6c      	ldr	r2, [pc, #432]	@ (8003294 <HAL_ADC_Init+0x2b4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_ADC_Init+0x112>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003298 <HAL_ADC_Init+0x2b8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10e      	bne.n	8003110 <HAL_ADC_Init+0x130>
 80030f2:	4868      	ldr	r0, [pc, #416]	@ (8003294 <HAL_ADC_Init+0x2b4>)
 80030f4:	f7ff ff26 	bl	8002f44 <LL_ADC_IsEnabled>
 80030f8:	4604      	mov	r4, r0
 80030fa:	4867      	ldr	r0, [pc, #412]	@ (8003298 <HAL_ADC_Init+0x2b8>)
 80030fc:	f7ff ff22 	bl	8002f44 <LL_ADC_IsEnabled>
 8003100:	4603      	mov	r3, r0
 8003102:	4323      	orrs	r3, r4
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e008      	b.n	8003122 <HAL_ADC_Init+0x142>
 8003110:	4862      	ldr	r0, [pc, #392]	@ (800329c <HAL_ADC_Init+0x2bc>)
 8003112:	f7ff ff17 	bl	8002f44 <LL_ADC_IsEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5a      	ldr	r2, [pc, #360]	@ (8003294 <HAL_ADC_Init+0x2b4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_ADC_Init+0x15a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a58      	ldr	r2, [pc, #352]	@ (8003298 <HAL_ADC_Init+0x2b8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_ADC_Init+0x15e>
 800313a:	4a59      	ldr	r2, [pc, #356]	@ (80032a0 <HAL_ADC_Init+0x2c0>)
 800313c:	e000      	b.n	8003140 <HAL_ADC_Init+0x160>
 800313e:	4a59      	ldr	r2, [pc, #356]	@ (80032a4 <HAL_ADC_Init+0x2c4>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f7ff fc5e 	bl	8002a08 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a52      	ldr	r2, [pc, #328]	@ (800329c <HAL_ADC_Init+0x2bc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d129      	bne.n	80031aa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7e5b      	ldrb	r3, [r3, #25]
 800315a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003160:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003166:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d013      	beq.n	8003198 <HAL_ADC_Init+0x1b8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d00d      	beq.n	8003194 <HAL_ADC_Init+0x1b4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b1c      	cmp	r3, #28
 800317e:	d007      	beq.n	8003190 <HAL_ADC_Init+0x1b0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b18      	cmp	r3, #24
 8003186:	d101      	bne.n	800318c <HAL_ADC_Init+0x1ac>
 8003188:	2318      	movs	r3, #24
 800318a:	e006      	b.n	800319a <HAL_ADC_Init+0x1ba>
 800318c:	2300      	movs	r3, #0
 800318e:	e004      	b.n	800319a <HAL_ADC_Init+0x1ba>
 8003190:	2310      	movs	r3, #16
 8003192:	e002      	b.n	800319a <HAL_ADC_Init+0x1ba>
 8003194:	2308      	movs	r3, #8
 8003196:	e000      	b.n	800319a <HAL_ADC_Init+0x1ba>
 8003198:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800319a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e00e      	b.n	80031c8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7e5b      	ldrb	r3, [r3, #25]
 80031ae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031b4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d106      	bne.n	80031e0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	3b01      	subs	r3, #1
 80031d8:	045b      	lsls	r3, r3, #17
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a26      	ldr	r2, [pc, #152]	@ (800329c <HAL_ADC_Init+0x2bc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d115      	bne.n	8003232 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <HAL_ADC_Init+0x2c8>)
 800320e:	4013      	ands	r3, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	69b9      	ldr	r1, [r7, #24]
 8003216:	430b      	orrs	r3, r1
 8003218:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	611a      	str	r2, [r3, #16]
 8003230:	e009      	b.n	8003246 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <HAL_ADC_Init+0x2cc>)
 800323a:	4013      	ands	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	69b9      	ldr	r1, [r7, #24]
 8003242:	430b      	orrs	r3, r1
 8003244:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fea2 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 8003250:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff feaf 	bl	8002fba <LL_ADC_INJ_IsConversionOngoing>
 800325c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 808e 	bne.w	8003382 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 808a 	bne.w	8003382 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <HAL_ADC_Init+0x2bc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d11b      	bne.n	80032b0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7e1b      	ldrb	r3, [r3, #24]
 800327c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003284:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	e018      	b.n	80032be <HAL_ADC_Init+0x2de>
 800328c:	2400000c 	.word	0x2400000c
 8003290:	053e2d63 	.word	0x053e2d63
 8003294:	40022000 	.word	0x40022000
 8003298:	40022100 	.word	0x40022100
 800329c:	58026000 	.word	0x58026000
 80032a0:	40022300 	.word	0x40022300
 80032a4:	58026300 	.word	0x58026300
 80032a8:	fff04007 	.word	0xfff04007
 80032ac:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7e1b      	ldrb	r3, [r3, #24]
 80032b4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4b46      	ldr	r3, [pc, #280]	@ (80033e0 <HAL_ADC_Init+0x400>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	430b      	orrs	r3, r1
 80032d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d137      	bne.n	800334c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3f      	ldr	r2, [pc, #252]	@ (80033e4 <HAL_ADC_Init+0x404>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d116      	bne.n	800331a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	4b3d      	ldr	r3, [pc, #244]	@ (80033e8 <HAL_ADC_Init+0x408>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003304:	4311      	orrs	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800330a:	430a      	orrs	r2, r1
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	611a      	str	r2, [r3, #16]
 8003318:	e020      	b.n	800335c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	4b32      	ldr	r3, [pc, #200]	@ (80033ec <HAL_ADC_Init+0x40c>)
 8003322:	4013      	ands	r3, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003328:	3a01      	subs	r2, #1
 800332a:	0411      	lsls	r1, r2, #16
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800333c:	430a      	orrs	r2, r1
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	611a      	str	r2, [r3, #16]
 800334a:	e007      	b.n	800335c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	@ (80033e4 <HAL_ADC_Init+0x404>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d002      	beq.n	8003382 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f001 f9b9 	bl	80046f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10c      	bne.n	80033a4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	f023 010f 	bic.w	r1, r3, #15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80033a2:	e007      	b.n	80033b4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 020f 	bic.w	r2, r2, #15
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b8:	f023 0303 	bic.w	r3, r3, #3
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	661a      	str	r2, [r3, #96]	@ 0x60
 80033c4:	e007      	b.n	80033d6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3724      	adds	r7, #36	@ 0x24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd90      	pop	{r4, r7, pc}
 80033e0:	ffffbffc 	.word	0xffffbffc
 80033e4:	58026000 	.word	0x58026000
 80033e8:	fc00f81f 	.word	0xfc00f81f
 80033ec:	fc00f81e 	.word	0xfc00f81e

080033f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a60      	ldr	r2, [pc, #384]	@ (8003584 <HAL_ADC_Start_DMA+0x194>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_ADC_Start_DMA+0x20>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a5f      	ldr	r2, [pc, #380]	@ (8003588 <HAL_ADC_Start_DMA+0x198>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_ADC_Start_DMA+0x24>
 8003410:	4b5e      	ldr	r3, [pc, #376]	@ (800358c <HAL_ADC_Start_DMA+0x19c>)
 8003412:	e000      	b.n	8003416 <HAL_ADC_Start_DMA+0x26>
 8003414:	4b5e      	ldr	r3, [pc, #376]	@ (8003590 <HAL_ADC_Start_DMA+0x1a0>)
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fd16 	bl	8002e48 <LL_ADC_GetMultimode>
 800341c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fdb6 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 80a2 	bne.w	8003574 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADC_Start_DMA+0x4e>
 800343a:	2302      	movs	r3, #2
 800343c:	e09d      	b.n	800357a <HAL_ADC_Start_DMA+0x18a>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d003      	beq.n	800345a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b09      	cmp	r3, #9
 8003456:	f040 8086 	bne.w	8003566 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f001 f82c 	bl	80044b8 <ADC_Enable>
 8003460:	4603      	mov	r3, r0
 8003462:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d178      	bne.n	800355c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800346e:	4b49      	ldr	r3, [pc, #292]	@ (8003594 <HAL_ADC_Start_DMA+0x1a4>)
 8003470:	4013      	ands	r3, r2
 8003472:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a42      	ldr	r2, [pc, #264]	@ (8003588 <HAL_ADC_Start_DMA+0x198>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d002      	beq.n	800348a <HAL_ADC_Start_DMA+0x9a>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	e000      	b.n	800348c <HAL_ADC_Start_DMA+0x9c>
 800348a:	4b3e      	ldr	r3, [pc, #248]	@ (8003584 <HAL_ADC_Start_DMA+0x194>)
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	4293      	cmp	r3, r2
 8003492:	d002      	beq.n	800349a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034b6:	f023 0206 	bic.w	r2, r3, #6
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	665a      	str	r2, [r3, #100]	@ 0x64
 80034be:	e002      	b.n	80034c6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	4a33      	ldr	r2, [pc, #204]	@ (8003598 <HAL_ADC_Start_DMA+0x1a8>)
 80034cc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	4a32      	ldr	r2, [pc, #200]	@ (800359c <HAL_ADC_Start_DMA+0x1ac>)
 80034d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	4a31      	ldr	r2, [pc, #196]	@ (80035a0 <HAL_ADC_Start_DMA+0x1b0>)
 80034dc:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	221c      	movs	r2, #28
 80034e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0210 	orr.w	r2, r2, #16
 80034fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a28      	ldr	r2, [pc, #160]	@ (80035a4 <HAL_ADC_Start_DMA+0x1b4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10f      	bne.n	8003528 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f7ff fbfe 	bl	8002d18 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fbe9 	bl	8002cf8 <LL_ADC_EnableDMAReq>
 8003526:	e007      	b.n	8003538 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7ff fbcd 	bl	8002cd2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3340      	adds	r3, #64	@ 0x40
 8003542:	4619      	mov	r1, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f001 ff64 	bl	8005414 <HAL_DMA_Start_IT>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fd09 	bl	8002f6c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800355a:	e00d      	b.n	8003578 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003564:	e008      	b.n	8003578 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003572:	e001      	b.n	8003578 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003574:	2302      	movs	r3, #2
 8003576:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003578:	7dfb      	ldrb	r3, [r7, #23]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40022000 	.word	0x40022000
 8003588:	40022100 	.word	0x40022100
 800358c:	40022300 	.word	0x40022300
 8003590:	58026300 	.word	0x58026300
 8003594:	fffff0fe 	.word	0xfffff0fe
 8003598:	080045cd 	.word	0x080045cd
 800359c:	080046a5 	.word	0x080046a5
 80035a0:	080046c1 	.word	0x080046c1
 80035a4:	58026000 	.word	0x58026000

080035a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	@ 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035b0:	2300      	movs	r3, #0
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a87      	ldr	r2, [pc, #540]	@ (80037e8 <HAL_ADC_IRQHandler+0x240>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x30>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a86      	ldr	r2, [pc, #536]	@ (80037ec <HAL_ADC_IRQHandler+0x244>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_IRQHandler+0x34>
 80035d8:	4b85      	ldr	r3, [pc, #532]	@ (80037f0 <HAL_ADC_IRQHandler+0x248>)
 80035da:	e000      	b.n	80035de <HAL_ADC_IRQHandler+0x36>
 80035dc:	4b85      	ldr	r3, [pc, #532]	@ (80037f4 <HAL_ADC_IRQHandler+0x24c>)
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fc32 	bl	8002e48 <LL_ADC_GetMultimode>
 80035e4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d017      	beq.n	8003620 <HAL_ADC_IRQHandler+0x78>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d012      	beq.n	8003620 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d105      	bne.n	8003612 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f001 f9aa 	bl	800496c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2202      	movs	r2, #2
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <HAL_ADC_IRQHandler+0x8c>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8083 	beq.w	8003746 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d07d      	beq.n	8003746 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d105      	bne.n	8003662 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff faf4 	bl	8002c54 <LL_ADC_REG_IsTriggerSourceSWStart>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d062      	beq.n	8003738 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5d      	ldr	r2, [pc, #372]	@ (80037ec <HAL_ADC_IRQHandler+0x244>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d002      	beq.n	8003682 <HAL_ADC_IRQHandler+0xda>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	e000      	b.n	8003684 <HAL_ADC_IRQHandler+0xdc>
 8003682:	4b59      	ldr	r3, [pc, #356]	@ (80037e8 <HAL_ADC_IRQHandler+0x240>)
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	4293      	cmp	r3, r2
 800368a:	d008      	beq.n	800369e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d002      	beq.n	800369e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b09      	cmp	r3, #9
 800369c:	d104      	bne.n	80036a8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	623b      	str	r3, [r7, #32]
 80036a6:	e00c      	b.n	80036c2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a4f      	ldr	r2, [pc, #316]	@ (80037ec <HAL_ADC_IRQHandler+0x244>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d002      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x110>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	e000      	b.n	80036ba <HAL_ADC_IRQHandler+0x112>
 80036b8:	4b4b      	ldr	r3, [pc, #300]	@ (80037e8 <HAL_ADC_IRQHandler+0x240>)
 80036ba:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d135      	bne.n	8003738 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d12e      	bne.n	8003738 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fc58 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11a      	bne.n	8003720 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 020c 	bic.w	r2, r2, #12
 80036f8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d112      	bne.n	8003738 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	661a      	str	r2, [r3, #96]	@ 0x60
 800371e:	e00b      	b.n	8003738 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003724:	f043 0210 	orr.w	r2, r3, #16
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fd ff15 	bl	8001568 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	220c      	movs	r2, #12
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_ADC_IRQHandler+0x1b2>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a0 	beq.w	80038a6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 809a 	beq.w	80038a6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003782:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fadc 	bl	8002d4c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003794:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fa5a 	bl	8002c54 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037a0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a11      	ldr	r2, [pc, #68]	@ (80037ec <HAL_ADC_IRQHandler+0x244>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d002      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x20a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	e000      	b.n	80037b4 <HAL_ADC_IRQHandler+0x20c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <HAL_ADC_IRQHandler+0x240>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d008      	beq.n	80037ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b06      	cmp	r3, #6
 80037c6:	d002      	beq.n	80037ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b07      	cmp	r3, #7
 80037cc:	d104      	bne.n	80037d8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	e014      	b.n	8003802 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a03      	ldr	r2, [pc, #12]	@ (80037ec <HAL_ADC_IRQHandler+0x244>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00a      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x250>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	e008      	b.n	80037fa <HAL_ADC_IRQHandler+0x252>
 80037e8:	40022000 	.word	0x40022000
 80037ec:	40022100 	.word	0x40022100
 80037f0:	40022300 	.word	0x40022300
 80037f4:	58026300 	.word	0x58026300
 80037f8:	4b84      	ldr	r3, [pc, #528]	@ (8003a0c <HAL_ADC_IRQHandler+0x464>)
 80037fa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d047      	beq.n	8003898 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_ADC_IRQHandler+0x27a>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03f      	beq.n	8003898 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800381e:	2b00      	cmp	r3, #0
 8003820:	d13a      	bne.n	8003898 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382c:	2b40      	cmp	r3, #64	@ 0x40
 800382e:	d133      	bne.n	8003898 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d12e      	bne.n	8003898 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fbbb 	bl	8002fba <LL_ADC_INJ_IsConversionOngoing>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11a      	bne.n	8003880 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003858:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d112      	bne.n	8003898 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	661a      	str	r2, [r3, #96]	@ 0x60
 800387e:	e00b      	b.n	8003898 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003884:	f043 0210 	orr.w	r2, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f001 f83f 	bl	800491c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2260      	movs	r2, #96	@ 0x60
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d011      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x32c>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8b2 	bl	8003a30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2280      	movs	r2, #128	@ 0x80
 80038d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d012      	beq.n	8003904 <HAL_ADC_IRQHandler+0x35c>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f001 f825 	bl	8004944 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003902:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390a:	2b00      	cmp	r3, #0
 800390c:	d012      	beq.n	8003934 <HAL_ADC_IRQHandler+0x38c>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f001 f817 	bl	8004958 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003932:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d043      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x41e>
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d03e      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003950:	2301      	movs	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
 8003954:	e021      	b.n	800399a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2a      	ldr	r2, [pc, #168]	@ (8003a0c <HAL_ADC_IRQHandler+0x464>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_ADC_IRQHandler+0x3c8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a29      	ldr	r2, [pc, #164]	@ (8003a10 <HAL_ADC_IRQHandler+0x468>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_ADC_IRQHandler+0x3cc>
 8003970:	4b28      	ldr	r3, [pc, #160]	@ (8003a14 <HAL_ADC_IRQHandler+0x46c>)
 8003972:	e000      	b.n	8003976 <HAL_ADC_IRQHandler+0x3ce>
 8003974:	4b28      	ldr	r3, [pc, #160]	@ (8003a18 <HAL_ADC_IRQHandler+0x470>)
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fa74 	bl	8002e64 <LL_ADC_GetMultiDMATransfer>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003982:	2301      	movs	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
 8003986:	e008      	b.n	800399a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003996:	2301      	movs	r3, #1
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10e      	bne.n	80039be <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b0:	f043 0202 	orr.w	r2, r3, #2
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f843 	bl	8003a44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2210      	movs	r2, #16
 80039c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d018      	beq.n	8003a02 <HAL_ADC_IRQHandler+0x45a>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d013      	beq.n	8003a02 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039de:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 ff97 	bl	8004930 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a02:	bf00      	nop
 8003a04:	3728      	adds	r7, #40	@ 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40022100 	.word	0x40022100
 8003a14:	40022300 	.word	0x40022300
 8003a18:	58026300 	.word	0x58026300

08003a1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b0b9      	sub	sp, #228	@ 0xe4
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a72:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4aab      	ldr	r2, [pc, #684]	@ (8003d28 <HAL_ADC_ConfigChannel+0x2d0>)
 8003a7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x34>
 8003a86:	2302      	movs	r3, #2
 8003a88:	f000 bcfe 	b.w	8004488 <HAL_ADC_ConfigChannel+0xa30>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fa7b 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f040 84e2 	bne.w	800446a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db38      	blt.n	8003b20 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a9e      	ldr	r2, [pc, #632]	@ (8003d2c <HAL_ADC_ConfigChannel+0x2d4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d033      	beq.n	8003b20 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x7e>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2201      	movs	r2, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	e01d      	b.n	8003b12 <HAL_ADC_ConfigChannel+0xba>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003aea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003af2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003afa:	2320      	movs	r3, #32
 8003afc:	e004      	b.n	8003b08 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	69d1      	ldr	r1, [r2, #28]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f7ff f8a4 	bl	8002c7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fa2c 	bl	8002f94 <LL_ADC_REG_IsConversionOngoing>
 8003b3c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fa38 	bl	8002fba <LL_ADC_INJ_IsConversionOngoing>
 8003b4a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 8270 	bne.w	8004038 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f040 826b 	bne.w	8004038 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f7ff f8ff 	bl	8002d72 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6c      	ldr	r2, [pc, #432]	@ (8003d2c <HAL_ADC_ConfigChannel+0x2d4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10d      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b98:	e032      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b9a:	4b65      	ldr	r3, [pc, #404]	@ (8003d30 <HAL_ADC_ConfigChannel+0x2d8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x168>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	e01d      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x1a4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x18e>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	e00a      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x1a4>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d048      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6919      	ldr	r1, [r3, #16]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c18:	f7fe ff2a 	bl	8002a70 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a42      	ldr	r2, [pc, #264]	@ (8003d2c <HAL_ADC_ConfigChannel+0x2d4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d119      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f7fe ffc2 	bl	8002bbc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6919      	ldr	r1, [r3, #16]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x1f8>
 8003c4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c4e:	e000      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x1fa>
 8003c50:	2300      	movs	r3, #0
 8003c52:	461a      	mov	r2, r3
 8003c54:	f7fe ff90 	bl	8002b78 <LL_ADC_SetOffsetSaturation>
 8003c58:	e1ee      	b.n	8004038 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6919      	ldr	r1, [r3, #16]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d102      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x21a>
 8003c6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c70:	e000      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x21c>
 8003c72:	2300      	movs	r3, #0
 8003c74:	461a      	mov	r2, r3
 8003c76:	f7fe ff5d 	bl	8002b34 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6919      	ldr	r1, [r3, #16]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	7e1b      	ldrb	r3, [r3, #24]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x238>
 8003c8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c8e:	e000      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x23a>
 8003c90:	2300      	movs	r3, #0
 8003c92:	461a      	mov	r2, r3
 8003c94:	f7fe ff34 	bl	8002b00 <LL_ADC_SetDataRightShift>
 8003c98:	e1ce      	b.n	8004038 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <HAL_ADC_ConfigChannel+0x2d4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	f040 8181 	bne.w	8003fa8 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe ff11 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x27a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe ff06 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	0e9b      	lsrs	r3, r3, #26
 8003ccc:	f003 021f 	and.w	r2, r3, #31
 8003cd0:	e01e      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2b8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fefb 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ce8:	fa93 f3a3 	rbit	r3, r3
 8003cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003cf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	e004      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003d04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d08:	fab3 f383 	clz	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x2dc>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0e9b      	lsrs	r3, r3, #26
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	e01e      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x30e>
 8003d28:	47ff0000 	.word	0x47ff0000
 8003d2c:	58026000 	.word	0x58026000
 8003d30:	5c001000 	.word	0x5c001000
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	e004      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003d5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d106      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe ff44 	bl	8002c00 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fea8 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x34c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe fe9d 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	0e9b      	lsrs	r3, r3, #26
 8003d9e:	f003 021f 	and.w	r2, r3, #31
 8003da2:	e01e      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x38a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fe92 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	e004      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003dd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x3a2>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	e018      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x3d4>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e06:	fa93 f3a3 	rbit	r3, r3
 8003e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003e1e:	2320      	movs	r3, #32
 8003e20:	e004      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d106      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fee1 	bl	8002c00 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2102      	movs	r1, #2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fe fe45 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x412>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fe3a 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003e60:	4603      	mov	r3, r0
 8003e62:	0e9b      	lsrs	r3, r3, #26
 8003e64:	f003 021f 	and.w	r2, r3, #31
 8003e68:	e01e      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x450>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe fe2f 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003e98:	2320      	movs	r3, #32
 8003e9a:	e004      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x468>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0e9b      	lsrs	r3, r3, #26
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	e014      	b.n	8003eea <HAL_ADC_ConfigChannel+0x492>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ec8:	fa93 f3a3 	rbit	r3, r3
 8003ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ed0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e004      	b.n	8003eea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d106      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fe82 	bl	8002c00 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2103      	movs	r1, #3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fde6 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x4d0>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2103      	movs	r1, #3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fddb 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	f003 021f 	and.w	r2, r3, #31
 8003f26:	e017      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x500>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2103      	movs	r1, #3
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fdd0 	bl	8002ad4 <LL_ADC_GetOffsetChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f42:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003f44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	e003      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x518>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	e011      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x53c>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f80:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003f82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003f88:	2320      	movs	r3, #32
 8003f8a:	e003      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003f8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d14f      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fe2d 	bl	8002c00 <LL_ADC_SetOffsetState>
 8003fa6:	e047      	b.n	8004038 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	069b      	lsls	r3, r3, #26
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d107      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fca:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	069b      	lsls	r3, r3, #26
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fee:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ff6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	069b      	lsls	r3, r3, #26
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004012:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800401a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	069b      	lsls	r3, r3, #26
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004036:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe ff81 	bl	8002f44 <LL_ADC_IsEnabled>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	f040 8219 	bne.w	800447c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	461a      	mov	r2, r3
 8004058:	f7fe feb6 	bl	8002dc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4aa1      	ldr	r2, [pc, #644]	@ (80042e8 <HAL_ADC_ConfigChannel+0x890>)
 8004062:	4293      	cmp	r3, r2
 8004064:	f040 812e 	bne.w	80042c4 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x638>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	3301      	adds	r3, #1
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2b09      	cmp	r3, #9
 8004086:	bf94      	ite	ls
 8004088:	2301      	movls	r3, #1
 800408a:	2300      	movhi	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e019      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x66c>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800409e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80040a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e003      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80040ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2b09      	cmp	r3, #9
 80040bc:	bf94      	ite	ls
 80040be:	2301      	movls	r3, #1
 80040c0:	2300      	movhi	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d079      	beq.n	80041bc <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x68c>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	0e9b      	lsrs	r3, r3, #26
 80040da:	3301      	adds	r3, #1
 80040dc:	069b      	lsls	r3, r3, #26
 80040de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e2:	e015      	b.n	8004110 <HAL_ADC_ConfigChannel+0x6b8>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ec:	fa93 f3a3 	rbit	r3, r3
 80040f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80040f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80040f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80040fc:	2320      	movs	r3, #32
 80040fe:	e003      	b.n	8004108 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004102:	fab3 f383 	clz	r3, r3
 8004106:	b2db      	uxtb	r3, r3
 8004108:	3301      	adds	r3, #1
 800410a:	069b      	lsls	r3, r3, #26
 800410c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x6d8>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	3301      	adds	r3, #1
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	e017      	b.n	8004160 <HAL_ADC_ConfigChannel+0x708>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800413e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004140:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e003      	b.n	8004154 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800414c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	ea42 0103 	orr.w	r1, r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x72e>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0e9b      	lsrs	r3, r3, #26
 8004176:	3301      	adds	r3, #1
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4613      	mov	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4413      	add	r3, r2
 8004182:	051b      	lsls	r3, r3, #20
 8004184:	e018      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x760>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800419e:	2320      	movs	r3, #32
 80041a0:	e003      	b.n	80041aa <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80041a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	3301      	adds	r3, #1
 80041ac:	f003 021f 	and.w	r2, r3, #31
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b8:	430b      	orrs	r3, r1
 80041ba:	e07e      	b.n	80042ba <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x780>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0e9b      	lsrs	r3, r3, #26
 80041ce:	3301      	adds	r3, #1
 80041d0:	069b      	lsls	r3, r3, #26
 80041d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041d6:	e015      	b.n	8004204 <HAL_ADC_ConfigChannel+0x7ac>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80041f0:	2320      	movs	r3, #32
 80041f2:	e003      	b.n	80041fc <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80041f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	3301      	adds	r3, #1
 80041fe:	069b      	lsls	r3, r3, #26
 8004200:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x7cc>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0e9b      	lsrs	r3, r3, #26
 8004216:	3301      	adds	r3, #1
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	2101      	movs	r1, #1
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	e017      	b.n	8004254 <HAL_ADC_ConfigChannel+0x7fc>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	61bb      	str	r3, [r7, #24]
  return result;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800423c:	2320      	movs	r3, #32
 800423e:	e003      	b.n	8004248 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	3301      	adds	r3, #1
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	2101      	movs	r1, #1
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	ea42 0103 	orr.w	r1, r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x828>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	0e9b      	lsrs	r3, r3, #26
 800426a:	3301      	adds	r3, #1
 800426c:	f003 021f 	and.w	r2, r3, #31
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	3b1e      	subs	r3, #30
 8004278:	051b      	lsls	r3, r3, #20
 800427a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800427e:	e01b      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x860>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	60fb      	str	r3, [r7, #12]
  return result;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004298:	2320      	movs	r3, #32
 800429a:	e003      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	f003 021f 	and.w	r2, r3, #31
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	3b1e      	subs	r3, #30
 80042b2:	051b      	lsls	r3, r3, #20
 80042b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b8:	430b      	orrs	r3, r1
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	6892      	ldr	r2, [r2, #8]
 80042be:	4619      	mov	r1, r3
 80042c0:	f7fe fd57 	bl	8002d72 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f280 80d7 	bge.w	800447c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a06      	ldr	r2, [pc, #24]	@ (80042ec <HAL_ADC_ConfigChannel+0x894>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_ADC_ConfigChannel+0x88a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a04      	ldr	r2, [pc, #16]	@ (80042f0 <HAL_ADC_ConfigChannel+0x898>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10a      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x8a0>
 80042e2:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <HAL_ADC_ConfigChannel+0x89c>)
 80042e4:	e009      	b.n	80042fa <HAL_ADC_ConfigChannel+0x8a2>
 80042e6:	bf00      	nop
 80042e8:	47ff0000 	.word	0x47ff0000
 80042ec:	40022000 	.word	0x40022000
 80042f0:	40022100 	.word	0x40022100
 80042f4:	40022300 	.word	0x40022300
 80042f8:	4b65      	ldr	r3, [pc, #404]	@ (8004490 <HAL_ADC_ConfigChannel+0xa38>)
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fbaa 	bl	8002a54 <LL_ADC_GetCommonPathInternalCh>
 8004300:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a62      	ldr	r2, [pc, #392]	@ (8004494 <HAL_ADC_ConfigChannel+0xa3c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_ADC_ConfigChannel+0x8c0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a61      	ldr	r2, [pc, #388]	@ (8004498 <HAL_ADC_ConfigChannel+0xa40>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10e      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x8de>
 8004318:	485e      	ldr	r0, [pc, #376]	@ (8004494 <HAL_ADC_ConfigChannel+0xa3c>)
 800431a:	f7fe fe13 	bl	8002f44 <LL_ADC_IsEnabled>
 800431e:	4604      	mov	r4, r0
 8004320:	485d      	ldr	r0, [pc, #372]	@ (8004498 <HAL_ADC_ConfigChannel+0xa40>)
 8004322:	f7fe fe0f 	bl	8002f44 <LL_ADC_IsEnabled>
 8004326:	4603      	mov	r3, r0
 8004328:	4323      	orrs	r3, r4
 800432a:	2b00      	cmp	r3, #0
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	e008      	b.n	8004348 <HAL_ADC_ConfigChannel+0x8f0>
 8004336:	4859      	ldr	r0, [pc, #356]	@ (800449c <HAL_ADC_ConfigChannel+0xa44>)
 8004338:	f7fe fe04 	bl	8002f44 <LL_ADC_IsEnabled>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8084 	beq.w	8004456 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a53      	ldr	r2, [pc, #332]	@ (80044a0 <HAL_ADC_ConfigChannel+0xa48>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d132      	bne.n	80043be <HAL_ADC_ConfigChannel+0x966>
 8004358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800435c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d12c      	bne.n	80043be <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a4c      	ldr	r2, [pc, #304]	@ (800449c <HAL_ADC_ConfigChannel+0xa44>)
 800436a:	4293      	cmp	r3, r2
 800436c:	f040 8086 	bne.w	800447c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a47      	ldr	r2, [pc, #284]	@ (8004494 <HAL_ADC_ConfigChannel+0xa3c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_ADC_ConfigChannel+0x92c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <HAL_ADC_ConfigChannel+0xa40>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x930>
 8004384:	4a47      	ldr	r2, [pc, #284]	@ (80044a4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004386:	e000      	b.n	800438a <HAL_ADC_ConfigChannel+0x932>
 8004388:	4a41      	ldr	r2, [pc, #260]	@ (8004490 <HAL_ADC_ConfigChannel+0xa38>)
 800438a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800438e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7fe fb4a 	bl	8002a2e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800439a:	4b43      	ldr	r3, [pc, #268]	@ (80044a8 <HAL_ADC_ConfigChannel+0xa50>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	4a42      	ldr	r2, [pc, #264]	@ (80044ac <HAL_ADC_ConfigChannel+0xa54>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	3301      	adds	r3, #1
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043ae:	e002      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f9      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043bc:	e05e      	b.n	800447c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3b      	ldr	r2, [pc, #236]	@ (80044b0 <HAL_ADC_ConfigChannel+0xa58>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d120      	bne.n	800440a <HAL_ADC_ConfigChannel+0x9b2>
 80043c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11a      	bne.n	800440a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a30      	ldr	r2, [pc, #192]	@ (800449c <HAL_ADC_ConfigChannel+0xa44>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d14e      	bne.n	800447c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004494 <HAL_ADC_ConfigChannel+0xa3c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_ConfigChannel+0x99a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004498 <HAL_ADC_ConfigChannel+0xa40>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x99e>
 80043f2:	4a2c      	ldr	r2, [pc, #176]	@ (80044a4 <HAL_ADC_ConfigChannel+0xa4c>)
 80043f4:	e000      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x9a0>
 80043f6:	4a26      	ldr	r2, [pc, #152]	@ (8004490 <HAL_ADC_ConfigChannel+0xa38>)
 80043f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f7fe fb13 	bl	8002a2e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004408:	e038      	b.n	800447c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a29      	ldr	r2, [pc, #164]	@ (80044b4 <HAL_ADC_ConfigChannel+0xa5c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d133      	bne.n	800447c <HAL_ADC_ConfigChannel+0xa24>
 8004414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d12d      	bne.n	800447c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1d      	ldr	r2, [pc, #116]	@ (800449c <HAL_ADC_ConfigChannel+0xa44>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d128      	bne.n	800447c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a19      	ldr	r2, [pc, #100]	@ (8004494 <HAL_ADC_ConfigChannel+0xa3c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_ADC_ConfigChannel+0x9e6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a17      	ldr	r2, [pc, #92]	@ (8004498 <HAL_ADC_ConfigChannel+0xa40>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x9ea>
 800443e:	4a19      	ldr	r2, [pc, #100]	@ (80044a4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004440:	e000      	b.n	8004444 <HAL_ADC_ConfigChannel+0x9ec>
 8004442:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <HAL_ADC_ConfigChannel+0xa38>)
 8004444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f7fe faed 	bl	8002a2e <LL_ADC_SetCommonPathInternalCh>
 8004454:	e012      	b.n	800447c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004468:	e008      	b.n	800447c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446e:	f043 0220 	orr.w	r2, r3, #32
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004484:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004488:	4618      	mov	r0, r3
 800448a:	37e4      	adds	r7, #228	@ 0xe4
 800448c:	46bd      	mov	sp, r7
 800448e:	bd90      	pop	{r4, r7, pc}
 8004490:	58026300 	.word	0x58026300
 8004494:	40022000 	.word	0x40022000
 8004498:	40022100 	.word	0x40022100
 800449c:	58026000 	.word	0x58026000
 80044a0:	c7520000 	.word	0xc7520000
 80044a4:	40022300 	.word	0x40022300
 80044a8:	2400000c 	.word	0x2400000c
 80044ac:	053e2d63 	.word	0x053e2d63
 80044b0:	c3210000 	.word	0xc3210000
 80044b4:	cb840000 	.word	0xcb840000

080044b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe fd3d 	bl	8002f44 <LL_ADC_IsEnabled>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d16e      	bne.n	80045ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	4b38      	ldr	r3, [pc, #224]	@ (80045b8 <ADC_Enable+0x100>)
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0210 	orr.w	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ee:	f043 0201 	orr.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e05a      	b.n	80045b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fd0c 	bl	8002f1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004504:	f7fe fa50 	bl	80029a8 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2b      	ldr	r2, [pc, #172]	@ (80045bc <ADC_Enable+0x104>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <ADC_Enable+0x66>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a29      	ldr	r2, [pc, #164]	@ (80045c0 <ADC_Enable+0x108>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <ADC_Enable+0x6a>
 800451e:	4b29      	ldr	r3, [pc, #164]	@ (80045c4 <ADC_Enable+0x10c>)
 8004520:	e000      	b.n	8004524 <ADC_Enable+0x6c>
 8004522:	4b29      	ldr	r3, [pc, #164]	@ (80045c8 <ADC_Enable+0x110>)
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe fc8f 	bl	8002e48 <LL_ADC_GetMultimode>
 800452a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a23      	ldr	r2, [pc, #140]	@ (80045c0 <ADC_Enable+0x108>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d002      	beq.n	800453c <ADC_Enable+0x84>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	e000      	b.n	800453e <ADC_Enable+0x86>
 800453c:	4b1f      	ldr	r3, [pc, #124]	@ (80045bc <ADC_Enable+0x104>)
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	4293      	cmp	r3, r2
 8004544:	d02c      	beq.n	80045a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d130      	bne.n	80045ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800454c:	e028      	b.n	80045a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fcf6 	bl	8002f44 <LL_ADC_IsEnabled>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fcda 	bl	8002f1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004568:	f7fe fa1e 	bl	80029a8 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d914      	bls.n	80045a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d00d      	beq.n	80045a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e007      	b.n	80045b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d1cf      	bne.n	800454e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	8000003f 	.word	0x8000003f
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40022100 	.word	0x40022100
 80045c4:	40022300 	.word	0x40022300
 80045c8:	58026300 	.word	0x58026300

080045cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d14b      	bne.n	800467e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d021      	beq.n	8004644 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe fb25 	bl	8002c54 <LL_ADC_REG_IsTriggerSourceSWStart>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d032      	beq.n	8004676 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d12b      	bne.n	8004676 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004622:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d11f      	bne.n	8004676 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	661a      	str	r2, [r3, #96]	@ 0x60
 8004642:	e018      	b.n	8004676 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d111      	bne.n	8004676 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004656:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466e:	f043 0201 	orr.w	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7fc ff76 	bl	8001568 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800467c:	e00e      	b.n	800469c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff f9da 	bl	8003a44 <HAL_ADC_ErrorCallback>
}
 8004690:	e004      	b.n	800469c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff f9b2 	bl	8003a1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff f9ac 	bl	8003a44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6c      	ldr	r2, [pc, #432]	@ (80048b4 <ADC_ConfigureBoostMode+0x1c0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <ADC_ConfigureBoostMode+0x1c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a6b      	ldr	r2, [pc, #428]	@ (80048b8 <ADC_ConfigureBoostMode+0x1c4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d109      	bne.n	8004724 <ADC_ConfigureBoostMode+0x30>
 8004710:	4b6a      	ldr	r3, [pc, #424]	@ (80048bc <ADC_ConfigureBoostMode+0x1c8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e008      	b.n	8004736 <ADC_ConfigureBoostMode+0x42>
 8004724:	4b66      	ldr	r3, [pc, #408]	@ (80048c0 <ADC_ConfigureBoostMode+0x1cc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800472c:	2b00      	cmp	r3, #0
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01c      	beq.n	8004774 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800473a:	f004 ff11 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 800473e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004748:	d010      	beq.n	800476c <ADC_ConfigureBoostMode+0x78>
 800474a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800474e:	d873      	bhi.n	8004838 <ADC_ConfigureBoostMode+0x144>
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004754:	d002      	beq.n	800475c <ADC_ConfigureBoostMode+0x68>
 8004756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800475a:	d16d      	bne.n	8004838 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	60fb      	str	r3, [r7, #12]
        break;
 800476a:	e068      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	60fb      	str	r3, [r7, #12]
        break;
 8004772:	e064      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004774:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	f006 f8ec 	bl	800a958 <HAL_RCCEx_GetPeriphCLKFreq>
 8004780:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800478a:	d051      	beq.n	8004830 <ADC_ConfigureBoostMode+0x13c>
 800478c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004790:	d854      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 8004792:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004796:	d047      	beq.n	8004828 <ADC_ConfigureBoostMode+0x134>
 8004798:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800479c:	d84e      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 800479e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047a2:	d03d      	beq.n	8004820 <ADC_ConfigureBoostMode+0x12c>
 80047a4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047a8:	d848      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 80047aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ae:	d033      	beq.n	8004818 <ADC_ConfigureBoostMode+0x124>
 80047b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047b4:	d842      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 80047b6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047ba:	d029      	beq.n	8004810 <ADC_ConfigureBoostMode+0x11c>
 80047bc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047c0:	d83c      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 80047c2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047c6:	d01a      	beq.n	80047fe <ADC_ConfigureBoostMode+0x10a>
 80047c8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047cc:	d836      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 80047ce:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047d2:	d014      	beq.n	80047fe <ADC_ConfigureBoostMode+0x10a>
 80047d4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047d8:	d830      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 80047da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047de:	d00e      	beq.n	80047fe <ADC_ConfigureBoostMode+0x10a>
 80047e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047e4:	d82a      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 80047e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047ea:	d008      	beq.n	80047fe <ADC_ConfigureBoostMode+0x10a>
 80047ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047f0:	d824      	bhi.n	800483c <ADC_ConfigureBoostMode+0x148>
 80047f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047f6:	d002      	beq.n	80047fe <ADC_ConfigureBoostMode+0x10a>
 80047f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047fc:	d11e      	bne.n	800483c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	0c9b      	lsrs	r3, r3, #18
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	60fb      	str	r3, [r7, #12]
        break;
 800480e:	e016      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	60fb      	str	r3, [r7, #12]
        break;
 8004816:	e012      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	60fb      	str	r3, [r7, #12]
        break;
 800481e:	e00e      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	60fb      	str	r3, [r7, #12]
        break;
 8004826:	e00a      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	09db      	lsrs	r3, r3, #7
 800482c:	60fb      	str	r3, [r7, #12]
        break;
 800482e:	e006      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	60fb      	str	r3, [r7, #12]
        break;
 8004836:	e002      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800483c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a1f      	ldr	r2, [pc, #124]	@ (80048c4 <ADC_ConfigureBoostMode+0x1d0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d808      	bhi.n	800485e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800485a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800485c:	e025      	b.n	80048aa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a19      	ldr	r2, [pc, #100]	@ (80048c8 <ADC_ConfigureBoostMode+0x1d4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d80a      	bhi.n	800487c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	e016      	b.n	80048aa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a13      	ldr	r2, [pc, #76]	@ (80048cc <ADC_ConfigureBoostMode+0x1d8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d80a      	bhi.n	800489a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	e007      	b.n	80048aa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80048a8:	609a      	str	r2, [r3, #8]
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40022000 	.word	0x40022000
 80048b8:	40022100 	.word	0x40022100
 80048bc:	40022300 	.word	0x40022300
 80048c0:	58026300 	.word	0x58026300
 80048c4:	005f5e10 	.word	0x005f5e10
 80048c8:	00bebc20 	.word	0x00bebc20
 80048cc:	017d7840 	.word	0x017d7840

080048d0 <LL_ADC_IsEnabled>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <LL_ADC_IsEnabled+0x18>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <LL_ADC_IsEnabled+0x1a>
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d101      	bne.n	800490e <LL_ADC_REG_IsConversionOngoing+0x18>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b0a3      	sub	sp, #140	@ 0x8c
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800499a:	2302      	movs	r3, #2
 800499c:	e0c1      	b.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80049a6:	2300      	movs	r3, #0
 80049a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d102      	bne.n	80049be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049b8:	4b5d      	ldr	r3, [pc, #372]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e001      	b.n	80049c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10b      	bne.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0a0      	b.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff ff87 	bl	80048f6 <LL_ADC_REG_IsConversionOngoing>
 80049e8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff80 	bl	80048f6 <LL_ADC_REG_IsConversionOngoing>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8081 	bne.w	8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d17c      	bne.n	8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a48      	ldr	r2, [pc, #288]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a46      	ldr	r2, [pc, #280]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a1a:	4b46      	ldr	r3, [pc, #280]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a1c:	e000      	b.n	8004a20 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004a1e:	4b46      	ldr	r3, [pc, #280]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a20:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d039      	beq.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a3a      	ldr	r2, [pc, #232]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a39      	ldr	r2, [pc, #228]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10e      	bne.n	8004a6e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a50:	4836      	ldr	r0, [pc, #216]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a52:	f7ff ff3d 	bl	80048d0 <LL_ADC_IsEnabled>
 8004a56:	4604      	mov	r4, r0
 8004a58:	4835      	ldr	r0, [pc, #212]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a5a:	f7ff ff39 	bl	80048d0 <LL_ADC_IsEnabled>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4323      	orrs	r3, r4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf0c      	ite	eq
 8004a66:	2301      	moveq	r3, #1
 8004a68:	2300      	movne	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	e008      	b.n	8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a6e:	4833      	ldr	r0, [pc, #204]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a70:	f7ff ff2e 	bl	80048d0 <LL_ADC_IsEnabled>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf0c      	ite	eq
 8004a7a:	2301      	moveq	r3, #1
 8004a7c:	2300      	movne	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d047      	beq.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	4b2d      	ldr	r3, [pc, #180]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	6811      	ldr	r1, [r2, #0]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	6892      	ldr	r2, [r2, #8]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	431a      	orrs	r2, r3
 8004a98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a9a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a9c:	e03a      	b.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004aa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10e      	bne.n	8004adc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004abe:	481b      	ldr	r0, [pc, #108]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ac0:	f7ff ff06 	bl	80048d0 <LL_ADC_IsEnabled>
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	481a      	ldr	r0, [pc, #104]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ac8:	f7ff ff02 	bl	80048d0 <LL_ADC_IsEnabled>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4323      	orrs	r3, r4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e008      	b.n	8004aee <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004adc:	4817      	ldr	r0, [pc, #92]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ade:	f7ff fef7 	bl	80048d0 <LL_ADC_IsEnabled>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d010      	beq.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004af2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004afc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004afe:	e009      	b.n	8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b04:	f043 0220 	orr.w	r2, r3, #32
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004b12:	e000      	b.n	8004b16 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b1e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	378c      	adds	r7, #140	@ 0x8c
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd90      	pop	{r4, r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40022100 	.word	0x40022100
 8004b34:	40022300 	.word	0x40022300
 8004b38:	58026300 	.word	0x58026300
 8004b3c:	58026000 	.word	0x58026000
 8004b40:	fffff0e0 	.word	0xfffff0e0

08004b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <__NVIC_SetPriorityGrouping+0x40>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b72:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <__NVIC_SetPriorityGrouping+0x40>)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	60d3      	str	r3, [r2, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00
 8004b88:	05fa0000 	.word	0x05fa0000

08004b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b90:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 0307 	and.w	r3, r3, #7
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db0b      	blt.n	8004bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	f003 021f 	and.w	r2, r3, #31
 8004bc0:	4907      	ldr	r1, [pc, #28]	@ (8004be0 <__NVIC_EnableIRQ+0x38>)
 8004bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2001      	movs	r0, #1
 8004bca:	fa00 f202 	lsl.w	r2, r0, r2
 8004bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e100 	.word	0xe000e100

08004be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	6039      	str	r1, [r7, #0]
 8004bee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	db0a      	blt.n	8004c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	490c      	ldr	r1, [pc, #48]	@ (8004c30 <__NVIC_SetPriority+0x4c>)
 8004bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c02:	0112      	lsls	r2, r2, #4
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	440b      	add	r3, r1
 8004c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c0c:	e00a      	b.n	8004c24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4908      	ldr	r1, [pc, #32]	@ (8004c34 <__NVIC_SetPriority+0x50>)
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	3b04      	subs	r3, #4
 8004c1c:	0112      	lsls	r2, r2, #4
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	440b      	add	r3, r1
 8004c22:	761a      	strb	r2, [r3, #24]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000e100 	.word	0xe000e100
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	@ 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f1c3 0307 	rsb	r3, r3, #7
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	bf28      	it	cs
 8004c56:	2304      	movcs	r3, #4
 8004c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d902      	bls.n	8004c68 <NVIC_EncodePriority+0x30>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3b03      	subs	r3, #3
 8004c66:	e000      	b.n	8004c6a <NVIC_EncodePriority+0x32>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43da      	mvns	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c80:	f04f 31ff 	mov.w	r1, #4294967295
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8a:	43d9      	mvns	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	4313      	orrs	r3, r2
         );
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3724      	adds	r7, #36	@ 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cb0:	d301      	bcc.n	8004cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e00f      	b.n	8004cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cbe:	210f      	movs	r1, #15
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	f7ff ff8e 	bl	8004be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc8:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010

08004ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff29 	bl	8004b44 <__NVIC_SetPriorityGrouping>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d08:	f7ff ff40 	bl	8004b8c <__NVIC_GetPriorityGrouping>
 8004d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	6978      	ldr	r0, [r7, #20]
 8004d14:	f7ff ff90 	bl	8004c38 <NVIC_EncodePriority>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff5f 	bl	8004be4 <__NVIC_SetPriority>
}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	4603      	mov	r3, r0
 8004d36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ff33 	bl	8004ba8 <__NVIC_EnableIRQ>
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff ffa4 	bl	8004ca0 <SysTick_Config>
 8004d58:	4603      	mov	r3, r0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d6c:	f7fd fe1c 	bl	80029a8 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e312      	b.n	80053a2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a66      	ldr	r2, [pc, #408]	@ (8004f1c <HAL_DMA_Init+0x1b8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d04a      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a65      	ldr	r2, [pc, #404]	@ (8004f20 <HAL_DMA_Init+0x1bc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d045      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a63      	ldr	r2, [pc, #396]	@ (8004f24 <HAL_DMA_Init+0x1c0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d040      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a62      	ldr	r2, [pc, #392]	@ (8004f28 <HAL_DMA_Init+0x1c4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d03b      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a60      	ldr	r2, [pc, #384]	@ (8004f2c <HAL_DMA_Init+0x1c8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d036      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a5f      	ldr	r2, [pc, #380]	@ (8004f30 <HAL_DMA_Init+0x1cc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d031      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8004f34 <HAL_DMA_Init+0x1d0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d02c      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8004f38 <HAL_DMA_Init+0x1d4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d027      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f3c <HAL_DMA_Init+0x1d8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d022      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a59      	ldr	r2, [pc, #356]	@ (8004f40 <HAL_DMA_Init+0x1dc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d01d      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a57      	ldr	r2, [pc, #348]	@ (8004f44 <HAL_DMA_Init+0x1e0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d018      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a56      	ldr	r2, [pc, #344]	@ (8004f48 <HAL_DMA_Init+0x1e4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a54      	ldr	r2, [pc, #336]	@ (8004f4c <HAL_DMA_Init+0x1e8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00e      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a53      	ldr	r2, [pc, #332]	@ (8004f50 <HAL_DMA_Init+0x1ec>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d009      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a51      	ldr	r2, [pc, #324]	@ (8004f54 <HAL_DMA_Init+0x1f0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <HAL_DMA_Init+0xb8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a50      	ldr	r2, [pc, #320]	@ (8004f58 <HAL_DMA_Init+0x1f4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA_Init+0xbc>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_DMA_Init+0xbe>
 8004e20:	2300      	movs	r3, #0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 813c 	beq.w	80050a0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a37      	ldr	r2, [pc, #220]	@ (8004f1c <HAL_DMA_Init+0x1b8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d04a      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a36      	ldr	r2, [pc, #216]	@ (8004f20 <HAL_DMA_Init+0x1bc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d045      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a34      	ldr	r2, [pc, #208]	@ (8004f24 <HAL_DMA_Init+0x1c0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d040      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a33      	ldr	r2, [pc, #204]	@ (8004f28 <HAL_DMA_Init+0x1c4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d03b      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a31      	ldr	r2, [pc, #196]	@ (8004f2c <HAL_DMA_Init+0x1c8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d036      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a30      	ldr	r2, [pc, #192]	@ (8004f30 <HAL_DMA_Init+0x1cc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d031      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2e      	ldr	r2, [pc, #184]	@ (8004f34 <HAL_DMA_Init+0x1d0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d02c      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2d      	ldr	r2, [pc, #180]	@ (8004f38 <HAL_DMA_Init+0x1d4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d027      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f3c <HAL_DMA_Init+0x1d8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d022      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a2a      	ldr	r2, [pc, #168]	@ (8004f40 <HAL_DMA_Init+0x1dc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d01d      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a28      	ldr	r2, [pc, #160]	@ (8004f44 <HAL_DMA_Init+0x1e0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d018      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a27      	ldr	r2, [pc, #156]	@ (8004f48 <HAL_DMA_Init+0x1e4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a25      	ldr	r2, [pc, #148]	@ (8004f4c <HAL_DMA_Init+0x1e8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00e      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a24      	ldr	r2, [pc, #144]	@ (8004f50 <HAL_DMA_Init+0x1ec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d009      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a22      	ldr	r2, [pc, #136]	@ (8004f54 <HAL_DMA_Init+0x1f0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_DMA_Init+0x174>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a21      	ldr	r2, [pc, #132]	@ (8004f58 <HAL_DMA_Init+0x1f4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d108      	bne.n	8004eea <HAL_DMA_Init+0x186>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e007      	b.n	8004efa <HAL_DMA_Init+0x196>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004efa:	e02f      	b.n	8004f5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004efc:	f7fd fd54 	bl	80029a8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d928      	bls.n	8004f5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2203      	movs	r2, #3
 8004f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e242      	b.n	80053a2 <HAL_DMA_Init+0x63e>
 8004f1c:	40020010 	.word	0x40020010
 8004f20:	40020028 	.word	0x40020028
 8004f24:	40020040 	.word	0x40020040
 8004f28:	40020058 	.word	0x40020058
 8004f2c:	40020070 	.word	0x40020070
 8004f30:	40020088 	.word	0x40020088
 8004f34:	400200a0 	.word	0x400200a0
 8004f38:	400200b8 	.word	0x400200b8
 8004f3c:	40020410 	.word	0x40020410
 8004f40:	40020428 	.word	0x40020428
 8004f44:	40020440 	.word	0x40020440
 8004f48:	40020458 	.word	0x40020458
 8004f4c:	40020470 	.word	0x40020470
 8004f50:	40020488 	.word	0x40020488
 8004f54:	400204a0 	.word	0x400204a0
 8004f58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1c8      	bne.n	8004efc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4b83      	ldr	r3, [pc, #524]	@ (8005184 <HAL_DMA_Init+0x420>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d107      	bne.n	8004fc0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b28      	cmp	r3, #40	@ 0x28
 8004fc6:	d903      	bls.n	8004fd0 <HAL_DMA_Init+0x26c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fce:	d91f      	bls.n	8005010 <HAL_DMA_Init+0x2ac>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fd6:	d903      	bls.n	8004fe0 <HAL_DMA_Init+0x27c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b42      	cmp	r3, #66	@ 0x42
 8004fde:	d917      	bls.n	8005010 <HAL_DMA_Init+0x2ac>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b46      	cmp	r3, #70	@ 0x46
 8004fe6:	d903      	bls.n	8004ff0 <HAL_DMA_Init+0x28c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b48      	cmp	r3, #72	@ 0x48
 8004fee:	d90f      	bls.n	8005010 <HAL_DMA_Init+0x2ac>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ff6:	d903      	bls.n	8005000 <HAL_DMA_Init+0x29c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b52      	cmp	r3, #82	@ 0x52
 8004ffe:	d907      	bls.n	8005010 <HAL_DMA_Init+0x2ac>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b73      	cmp	r3, #115	@ 0x73
 8005006:	d905      	bls.n	8005014 <HAL_DMA_Init+0x2b0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b77      	cmp	r3, #119	@ 0x77
 800500e:	d801      	bhi.n	8005014 <HAL_DMA_Init+0x2b0>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <HAL_DMA_Init+0x2b2>
 8005014:	2300      	movs	r3, #0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005020:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f023 0307 	bic.w	r3, r3, #7
 8005038:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	2b04      	cmp	r3, #4
 800504a:	d117      	bne.n	800507c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00e      	beq.n	800507c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f001 fdca 	bl	8006bf8 <DMA_CheckFifoParam>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2240      	movs	r2, #64	@ 0x40
 800506e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e192      	b.n	80053a2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f001 fd05 	bl	8006a94 <DMA_CalcBaseAndBitshift>
 800508a:	4603      	mov	r3, r0
 800508c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	223f      	movs	r2, #63	@ 0x3f
 8005098:	409a      	lsls	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	609a      	str	r2, [r3, #8]
 800509e:	e0c8      	b.n	8005232 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a38      	ldr	r2, [pc, #224]	@ (8005188 <HAL_DMA_Init+0x424>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d022      	beq.n	80050f0 <HAL_DMA_Init+0x38c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a37      	ldr	r2, [pc, #220]	@ (800518c <HAL_DMA_Init+0x428>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d01d      	beq.n	80050f0 <HAL_DMA_Init+0x38c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a35      	ldr	r2, [pc, #212]	@ (8005190 <HAL_DMA_Init+0x42c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d018      	beq.n	80050f0 <HAL_DMA_Init+0x38c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a34      	ldr	r2, [pc, #208]	@ (8005194 <HAL_DMA_Init+0x430>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <HAL_DMA_Init+0x38c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a32      	ldr	r2, [pc, #200]	@ (8005198 <HAL_DMA_Init+0x434>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <HAL_DMA_Init+0x38c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a31      	ldr	r2, [pc, #196]	@ (800519c <HAL_DMA_Init+0x438>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_DMA_Init+0x38c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2f      	ldr	r2, [pc, #188]	@ (80051a0 <HAL_DMA_Init+0x43c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_DMA_Init+0x38c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2e      	ldr	r2, [pc, #184]	@ (80051a4 <HAL_DMA_Init+0x440>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d101      	bne.n	80050f4 <HAL_DMA_Init+0x390>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <HAL_DMA_Init+0x392>
 80050f4:	2300      	movs	r3, #0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8092 	beq.w	8005220 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a21      	ldr	r2, [pc, #132]	@ (8005188 <HAL_DMA_Init+0x424>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d021      	beq.n	800514a <HAL_DMA_Init+0x3e6>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a20      	ldr	r2, [pc, #128]	@ (800518c <HAL_DMA_Init+0x428>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01c      	beq.n	800514a <HAL_DMA_Init+0x3e6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1e      	ldr	r2, [pc, #120]	@ (8005190 <HAL_DMA_Init+0x42c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d017      	beq.n	800514a <HAL_DMA_Init+0x3e6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1d      	ldr	r2, [pc, #116]	@ (8005194 <HAL_DMA_Init+0x430>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d012      	beq.n	800514a <HAL_DMA_Init+0x3e6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <HAL_DMA_Init+0x434>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00d      	beq.n	800514a <HAL_DMA_Init+0x3e6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1a      	ldr	r2, [pc, #104]	@ (800519c <HAL_DMA_Init+0x438>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d008      	beq.n	800514a <HAL_DMA_Init+0x3e6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <HAL_DMA_Init+0x43c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <HAL_DMA_Init+0x3e6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a17      	ldr	r2, [pc, #92]	@ (80051a4 <HAL_DMA_Init+0x440>)
 8005148:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <HAL_DMA_Init+0x444>)
 8005166:	4013      	ands	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b40      	cmp	r3, #64	@ 0x40
 8005170:	d01c      	beq.n	80051ac <HAL_DMA_Init+0x448>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b80      	cmp	r3, #128	@ 0x80
 8005178:	d102      	bne.n	8005180 <HAL_DMA_Init+0x41c>
 800517a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800517e:	e016      	b.n	80051ae <HAL_DMA_Init+0x44a>
 8005180:	2300      	movs	r3, #0
 8005182:	e014      	b.n	80051ae <HAL_DMA_Init+0x44a>
 8005184:	fe10803f 	.word	0xfe10803f
 8005188:	58025408 	.word	0x58025408
 800518c:	5802541c 	.word	0x5802541c
 8005190:	58025430 	.word	0x58025430
 8005194:	58025444 	.word	0x58025444
 8005198:	58025458 	.word	0x58025458
 800519c:	5802546c 	.word	0x5802546c
 80051a0:	58025480 	.word	0x58025480
 80051a4:	58025494 	.word	0x58025494
 80051a8:	fffe000f 	.word	0xfffe000f
 80051ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68d2      	ldr	r2, [r2, #12]
 80051b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b6e      	ldr	r3, [pc, #440]	@ (80053ac <HAL_DMA_Init+0x648>)
 80051f4:	4413      	add	r3, r2
 80051f6:	4a6e      	ldr	r2, [pc, #440]	@ (80053b0 <HAL_DMA_Init+0x64c>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	009a      	lsls	r2, r3, #2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f001 fc45 	bl	8006a94 <DMA_CalcBaseAndBitshift>
 800520a:	4603      	mov	r3, r0
 800520c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	2201      	movs	r2, #1
 8005218:	409a      	lsls	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	e008      	b.n	8005232 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2240      	movs	r2, #64	@ 0x40
 8005224:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2203      	movs	r2, #3
 800522a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0b7      	b.n	80053a2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a5f      	ldr	r2, [pc, #380]	@ (80053b4 <HAL_DMA_Init+0x650>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d072      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a5d      	ldr	r2, [pc, #372]	@ (80053b8 <HAL_DMA_Init+0x654>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d06d      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a5c      	ldr	r2, [pc, #368]	@ (80053bc <HAL_DMA_Init+0x658>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d068      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5a      	ldr	r2, [pc, #360]	@ (80053c0 <HAL_DMA_Init+0x65c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d063      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a59      	ldr	r2, [pc, #356]	@ (80053c4 <HAL_DMA_Init+0x660>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d05e      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a57      	ldr	r2, [pc, #348]	@ (80053c8 <HAL_DMA_Init+0x664>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d059      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a56      	ldr	r2, [pc, #344]	@ (80053cc <HAL_DMA_Init+0x668>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d054      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a54      	ldr	r2, [pc, #336]	@ (80053d0 <HAL_DMA_Init+0x66c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d04f      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a53      	ldr	r2, [pc, #332]	@ (80053d4 <HAL_DMA_Init+0x670>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d04a      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a51      	ldr	r2, [pc, #324]	@ (80053d8 <HAL_DMA_Init+0x674>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d045      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a50      	ldr	r2, [pc, #320]	@ (80053dc <HAL_DMA_Init+0x678>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d040      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a4e      	ldr	r2, [pc, #312]	@ (80053e0 <HAL_DMA_Init+0x67c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d03b      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4d      	ldr	r2, [pc, #308]	@ (80053e4 <HAL_DMA_Init+0x680>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d036      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a4b      	ldr	r2, [pc, #300]	@ (80053e8 <HAL_DMA_Init+0x684>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d031      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a4a      	ldr	r2, [pc, #296]	@ (80053ec <HAL_DMA_Init+0x688>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d02c      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a48      	ldr	r2, [pc, #288]	@ (80053f0 <HAL_DMA_Init+0x68c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d027      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a47      	ldr	r2, [pc, #284]	@ (80053f4 <HAL_DMA_Init+0x690>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d022      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a45      	ldr	r2, [pc, #276]	@ (80053f8 <HAL_DMA_Init+0x694>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d01d      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a44      	ldr	r2, [pc, #272]	@ (80053fc <HAL_DMA_Init+0x698>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d018      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a42      	ldr	r2, [pc, #264]	@ (8005400 <HAL_DMA_Init+0x69c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d013      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a41      	ldr	r2, [pc, #260]	@ (8005404 <HAL_DMA_Init+0x6a0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00e      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3f      	ldr	r2, [pc, #252]	@ (8005408 <HAL_DMA_Init+0x6a4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d009      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3e      	ldr	r2, [pc, #248]	@ (800540c <HAL_DMA_Init+0x6a8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d004      	beq.n	8005322 <HAL_DMA_Init+0x5be>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3c      	ldr	r2, [pc, #240]	@ (8005410 <HAL_DMA_Init+0x6ac>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d101      	bne.n	8005326 <HAL_DMA_Init+0x5c2>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_DMA_Init+0x5c4>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d032      	beq.n	8005392 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f001 fcdf 	bl	8006cf0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	2b80      	cmp	r3, #128	@ 0x80
 8005338:	d102      	bne.n	8005340 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005354:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d010      	beq.n	8005380 <HAL_DMA_Init+0x61c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b08      	cmp	r3, #8
 8005364:	d80c      	bhi.n	8005380 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 fd5c 	bl	8006e24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	e008      	b.n	8005392 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	a7fdabf8 	.word	0xa7fdabf8
 80053b0:	cccccccd 	.word	0xcccccccd
 80053b4:	40020010 	.word	0x40020010
 80053b8:	40020028 	.word	0x40020028
 80053bc:	40020040 	.word	0x40020040
 80053c0:	40020058 	.word	0x40020058
 80053c4:	40020070 	.word	0x40020070
 80053c8:	40020088 	.word	0x40020088
 80053cc:	400200a0 	.word	0x400200a0
 80053d0:	400200b8 	.word	0x400200b8
 80053d4:	40020410 	.word	0x40020410
 80053d8:	40020428 	.word	0x40020428
 80053dc:	40020440 	.word	0x40020440
 80053e0:	40020458 	.word	0x40020458
 80053e4:	40020470 	.word	0x40020470
 80053e8:	40020488 	.word	0x40020488
 80053ec:	400204a0 	.word	0x400204a0
 80053f0:	400204b8 	.word	0x400204b8
 80053f4:	58025408 	.word	0x58025408
 80053f8:	5802541c 	.word	0x5802541c
 80053fc:	58025430 	.word	0x58025430
 8005400:	58025444 	.word	0x58025444
 8005404:	58025458 	.word	0x58025458
 8005408:	5802546c 	.word	0x5802546c
 800540c:	58025480 	.word	0x58025480
 8005410:	58025494 	.word	0x58025494

08005414 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e226      	b.n	800587e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_DMA_Start_IT+0x2a>
 800543a:	2302      	movs	r3, #2
 800543c:	e21f      	b.n	800587e <HAL_DMA_Start_IT+0x46a>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b01      	cmp	r3, #1
 8005450:	f040 820a 	bne.w	8005868 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a68      	ldr	r2, [pc, #416]	@ (8005608 <HAL_DMA_Start_IT+0x1f4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d04a      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a66      	ldr	r2, [pc, #408]	@ (800560c <HAL_DMA_Start_IT+0x1f8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d045      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a65      	ldr	r2, [pc, #404]	@ (8005610 <HAL_DMA_Start_IT+0x1fc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d040      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a63      	ldr	r2, [pc, #396]	@ (8005614 <HAL_DMA_Start_IT+0x200>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d03b      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a62      	ldr	r2, [pc, #392]	@ (8005618 <HAL_DMA_Start_IT+0x204>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d036      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a60      	ldr	r2, [pc, #384]	@ (800561c <HAL_DMA_Start_IT+0x208>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d031      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5f      	ldr	r2, [pc, #380]	@ (8005620 <HAL_DMA_Start_IT+0x20c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d02c      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005624 <HAL_DMA_Start_IT+0x210>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d027      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005628 <HAL_DMA_Start_IT+0x214>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d022      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a5a      	ldr	r2, [pc, #360]	@ (800562c <HAL_DMA_Start_IT+0x218>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01d      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a59      	ldr	r2, [pc, #356]	@ (8005630 <HAL_DMA_Start_IT+0x21c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d018      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a57      	ldr	r2, [pc, #348]	@ (8005634 <HAL_DMA_Start_IT+0x220>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d013      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a56      	ldr	r2, [pc, #344]	@ (8005638 <HAL_DMA_Start_IT+0x224>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00e      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a54      	ldr	r2, [pc, #336]	@ (800563c <HAL_DMA_Start_IT+0x228>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d009      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a53      	ldr	r2, [pc, #332]	@ (8005640 <HAL_DMA_Start_IT+0x22c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d004      	beq.n	8005502 <HAL_DMA_Start_IT+0xee>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a51      	ldr	r2, [pc, #324]	@ (8005644 <HAL_DMA_Start_IT+0x230>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <HAL_DMA_Start_IT+0x100>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e007      	b.n	8005524 <HAL_DMA_Start_IT+0x110>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f001 f906 	bl	800673c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a34      	ldr	r2, [pc, #208]	@ (8005608 <HAL_DMA_Start_IT+0x1f4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d04a      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a33      	ldr	r2, [pc, #204]	@ (800560c <HAL_DMA_Start_IT+0x1f8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d045      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a31      	ldr	r2, [pc, #196]	@ (8005610 <HAL_DMA_Start_IT+0x1fc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d040      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a30      	ldr	r2, [pc, #192]	@ (8005614 <HAL_DMA_Start_IT+0x200>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d03b      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2e      	ldr	r2, [pc, #184]	@ (8005618 <HAL_DMA_Start_IT+0x204>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d036      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2d      	ldr	r2, [pc, #180]	@ (800561c <HAL_DMA_Start_IT+0x208>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d031      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2b      	ldr	r2, [pc, #172]	@ (8005620 <HAL_DMA_Start_IT+0x20c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d02c      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2a      	ldr	r2, [pc, #168]	@ (8005624 <HAL_DMA_Start_IT+0x210>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d027      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a28      	ldr	r2, [pc, #160]	@ (8005628 <HAL_DMA_Start_IT+0x214>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d022      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a27      	ldr	r2, [pc, #156]	@ (800562c <HAL_DMA_Start_IT+0x218>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d01d      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a25      	ldr	r2, [pc, #148]	@ (8005630 <HAL_DMA_Start_IT+0x21c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d018      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a24      	ldr	r2, [pc, #144]	@ (8005634 <HAL_DMA_Start_IT+0x220>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a22      	ldr	r2, [pc, #136]	@ (8005638 <HAL_DMA_Start_IT+0x224>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00e      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a21      	ldr	r2, [pc, #132]	@ (800563c <HAL_DMA_Start_IT+0x228>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005640 <HAL_DMA_Start_IT+0x22c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_DMA_Start_IT+0x1bc>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005644 <HAL_DMA_Start_IT+0x230>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <HAL_DMA_Start_IT+0x1c0>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_DMA_Start_IT+0x1c2>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d036      	beq.n	8005648 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f023 021e 	bic.w	r2, r3, #30
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0216 	orr.w	r2, r2, #22
 80055ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d03e      	beq.n	8005674 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0208 	orr.w	r2, r2, #8
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e035      	b.n	8005674 <HAL_DMA_Start_IT+0x260>
 8005608:	40020010 	.word	0x40020010
 800560c:	40020028 	.word	0x40020028
 8005610:	40020040 	.word	0x40020040
 8005614:	40020058 	.word	0x40020058
 8005618:	40020070 	.word	0x40020070
 800561c:	40020088 	.word	0x40020088
 8005620:	400200a0 	.word	0x400200a0
 8005624:	400200b8 	.word	0x400200b8
 8005628:	40020410 	.word	0x40020410
 800562c:	40020428 	.word	0x40020428
 8005630:	40020440 	.word	0x40020440
 8005634:	40020458 	.word	0x40020458
 8005638:	40020470 	.word	0x40020470
 800563c:	40020488 	.word	0x40020488
 8005640:	400204a0 	.word	0x400204a0
 8005644:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 020e 	bic.w	r2, r3, #14
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 020a 	orr.w	r2, r2, #10
 800565a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0204 	orr.w	r2, r2, #4
 8005672:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a83      	ldr	r2, [pc, #524]	@ (8005888 <HAL_DMA_Start_IT+0x474>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d072      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a82      	ldr	r2, [pc, #520]	@ (800588c <HAL_DMA_Start_IT+0x478>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d06d      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a80      	ldr	r2, [pc, #512]	@ (8005890 <HAL_DMA_Start_IT+0x47c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d068      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a7f      	ldr	r2, [pc, #508]	@ (8005894 <HAL_DMA_Start_IT+0x480>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d063      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a7d      	ldr	r2, [pc, #500]	@ (8005898 <HAL_DMA_Start_IT+0x484>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d05e      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a7c      	ldr	r2, [pc, #496]	@ (800589c <HAL_DMA_Start_IT+0x488>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d059      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a7a      	ldr	r2, [pc, #488]	@ (80058a0 <HAL_DMA_Start_IT+0x48c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d054      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a79      	ldr	r2, [pc, #484]	@ (80058a4 <HAL_DMA_Start_IT+0x490>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d04f      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a77      	ldr	r2, [pc, #476]	@ (80058a8 <HAL_DMA_Start_IT+0x494>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d04a      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a76      	ldr	r2, [pc, #472]	@ (80058ac <HAL_DMA_Start_IT+0x498>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d045      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a74      	ldr	r2, [pc, #464]	@ (80058b0 <HAL_DMA_Start_IT+0x49c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d040      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a73      	ldr	r2, [pc, #460]	@ (80058b4 <HAL_DMA_Start_IT+0x4a0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d03b      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a71      	ldr	r2, [pc, #452]	@ (80058b8 <HAL_DMA_Start_IT+0x4a4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d036      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a70      	ldr	r2, [pc, #448]	@ (80058bc <HAL_DMA_Start_IT+0x4a8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d031      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a6e      	ldr	r2, [pc, #440]	@ (80058c0 <HAL_DMA_Start_IT+0x4ac>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d02c      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a6d      	ldr	r2, [pc, #436]	@ (80058c4 <HAL_DMA_Start_IT+0x4b0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d027      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6b      	ldr	r2, [pc, #428]	@ (80058c8 <HAL_DMA_Start_IT+0x4b4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d022      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a6a      	ldr	r2, [pc, #424]	@ (80058cc <HAL_DMA_Start_IT+0x4b8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d01d      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a68      	ldr	r2, [pc, #416]	@ (80058d0 <HAL_DMA_Start_IT+0x4bc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d018      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a67      	ldr	r2, [pc, #412]	@ (80058d4 <HAL_DMA_Start_IT+0x4c0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d013      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a65      	ldr	r2, [pc, #404]	@ (80058d8 <HAL_DMA_Start_IT+0x4c4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00e      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a64      	ldr	r2, [pc, #400]	@ (80058dc <HAL_DMA_Start_IT+0x4c8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d009      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a62      	ldr	r2, [pc, #392]	@ (80058e0 <HAL_DMA_Start_IT+0x4cc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d004      	beq.n	8005764 <HAL_DMA_Start_IT+0x350>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a61      	ldr	r2, [pc, #388]	@ (80058e4 <HAL_DMA_Start_IT+0x4d0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d101      	bne.n	8005768 <HAL_DMA_Start_IT+0x354>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_DMA_Start_IT+0x356>
 8005768:	2300      	movs	r3, #0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01a      	beq.n	80057a4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800578a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d007      	beq.n	80057a4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800579e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a37      	ldr	r2, [pc, #220]	@ (8005888 <HAL_DMA_Start_IT+0x474>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d04a      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a36      	ldr	r2, [pc, #216]	@ (800588c <HAL_DMA_Start_IT+0x478>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d045      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a34      	ldr	r2, [pc, #208]	@ (8005890 <HAL_DMA_Start_IT+0x47c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d040      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a33      	ldr	r2, [pc, #204]	@ (8005894 <HAL_DMA_Start_IT+0x480>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d03b      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a31      	ldr	r2, [pc, #196]	@ (8005898 <HAL_DMA_Start_IT+0x484>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d036      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a30      	ldr	r2, [pc, #192]	@ (800589c <HAL_DMA_Start_IT+0x488>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d031      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2e      	ldr	r2, [pc, #184]	@ (80058a0 <HAL_DMA_Start_IT+0x48c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d02c      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2d      	ldr	r2, [pc, #180]	@ (80058a4 <HAL_DMA_Start_IT+0x490>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d027      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2b      	ldr	r2, [pc, #172]	@ (80058a8 <HAL_DMA_Start_IT+0x494>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d022      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2a      	ldr	r2, [pc, #168]	@ (80058ac <HAL_DMA_Start_IT+0x498>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d01d      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a28      	ldr	r2, [pc, #160]	@ (80058b0 <HAL_DMA_Start_IT+0x49c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d018      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a27      	ldr	r2, [pc, #156]	@ (80058b4 <HAL_DMA_Start_IT+0x4a0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a25      	ldr	r2, [pc, #148]	@ (80058b8 <HAL_DMA_Start_IT+0x4a4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00e      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a24      	ldr	r2, [pc, #144]	@ (80058bc <HAL_DMA_Start_IT+0x4a8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a22      	ldr	r2, [pc, #136]	@ (80058c0 <HAL_DMA_Start_IT+0x4ac>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_DMA_Start_IT+0x430>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a21      	ldr	r2, [pc, #132]	@ (80058c4 <HAL_DMA_Start_IT+0x4b0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <HAL_DMA_Start_IT+0x442>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e012      	b.n	800587c <HAL_DMA_Start_IT+0x468>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e009      	b.n	800587c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800587c:	7dfb      	ldrb	r3, [r7, #23]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40020010 	.word	0x40020010
 800588c:	40020028 	.word	0x40020028
 8005890:	40020040 	.word	0x40020040
 8005894:	40020058 	.word	0x40020058
 8005898:	40020070 	.word	0x40020070
 800589c:	40020088 	.word	0x40020088
 80058a0:	400200a0 	.word	0x400200a0
 80058a4:	400200b8 	.word	0x400200b8
 80058a8:	40020410 	.word	0x40020410
 80058ac:	40020428 	.word	0x40020428
 80058b0:	40020440 	.word	0x40020440
 80058b4:	40020458 	.word	0x40020458
 80058b8:	40020470 	.word	0x40020470
 80058bc:	40020488 	.word	0x40020488
 80058c0:	400204a0 	.word	0x400204a0
 80058c4:	400204b8 	.word	0x400204b8
 80058c8:	58025408 	.word	0x58025408
 80058cc:	5802541c 	.word	0x5802541c
 80058d0:	58025430 	.word	0x58025430
 80058d4:	58025444 	.word	0x58025444
 80058d8:	58025458 	.word	0x58025458
 80058dc:	5802546c 	.word	0x5802546c
 80058e0:	58025480 	.word	0x58025480
 80058e4:	58025494 	.word	0x58025494

080058e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	@ 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058f4:	4b67      	ldr	r3, [pc, #412]	@ (8005a94 <HAL_DMA_IRQHandler+0x1ac>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a67      	ldr	r2, [pc, #412]	@ (8005a98 <HAL_DMA_IRQHandler+0x1b0>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	0a9b      	lsrs	r3, r3, #10
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005906:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a5f      	ldr	r2, [pc, #380]	@ (8005a9c <HAL_DMA_IRQHandler+0x1b4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d04a      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa0 <HAL_DMA_IRQHandler+0x1b8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d045      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a5c      	ldr	r2, [pc, #368]	@ (8005aa4 <HAL_DMA_IRQHandler+0x1bc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d040      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a5a      	ldr	r2, [pc, #360]	@ (8005aa8 <HAL_DMA_IRQHandler+0x1c0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d03b      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a59      	ldr	r2, [pc, #356]	@ (8005aac <HAL_DMA_IRQHandler+0x1c4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d036      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a57      	ldr	r2, [pc, #348]	@ (8005ab0 <HAL_DMA_IRQHandler+0x1c8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d031      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a56      	ldr	r2, [pc, #344]	@ (8005ab4 <HAL_DMA_IRQHandler+0x1cc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d02c      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a54      	ldr	r2, [pc, #336]	@ (8005ab8 <HAL_DMA_IRQHandler+0x1d0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d027      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a53      	ldr	r2, [pc, #332]	@ (8005abc <HAL_DMA_IRQHandler+0x1d4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d022      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a51      	ldr	r2, [pc, #324]	@ (8005ac0 <HAL_DMA_IRQHandler+0x1d8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a50      	ldr	r2, [pc, #320]	@ (8005ac4 <HAL_DMA_IRQHandler+0x1dc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d018      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a4e      	ldr	r2, [pc, #312]	@ (8005ac8 <HAL_DMA_IRQHandler+0x1e0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a4d      	ldr	r2, [pc, #308]	@ (8005acc <HAL_DMA_IRQHandler+0x1e4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ad0 <HAL_DMA_IRQHandler+0x1e8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a4a      	ldr	r2, [pc, #296]	@ (8005ad4 <HAL_DMA_IRQHandler+0x1ec>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_DMA_IRQHandler+0xd2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a48      	ldr	r2, [pc, #288]	@ (8005ad8 <HAL_DMA_IRQHandler+0x1f0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <HAL_DMA_IRQHandler+0xd6>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <HAL_DMA_IRQHandler+0xd8>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 842b 	beq.w	800621c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	2208      	movs	r2, #8
 80059d0:	409a      	lsls	r2, r3
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80a2 	beq.w	8005b20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a9c <HAL_DMA_IRQHandler+0x1b4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d04a      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa0 <HAL_DMA_IRQHandler+0x1b8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d045      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa4 <HAL_DMA_IRQHandler+0x1bc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d040      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa8 <HAL_DMA_IRQHandler+0x1c0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d03b      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a28      	ldr	r2, [pc, #160]	@ (8005aac <HAL_DMA_IRQHandler+0x1c4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d036      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a27      	ldr	r2, [pc, #156]	@ (8005ab0 <HAL_DMA_IRQHandler+0x1c8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d031      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a25      	ldr	r2, [pc, #148]	@ (8005ab4 <HAL_DMA_IRQHandler+0x1cc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d02c      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a24      	ldr	r2, [pc, #144]	@ (8005ab8 <HAL_DMA_IRQHandler+0x1d0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d027      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a22      	ldr	r2, [pc, #136]	@ (8005abc <HAL_DMA_IRQHandler+0x1d4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d022      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a21      	ldr	r2, [pc, #132]	@ (8005ac0 <HAL_DMA_IRQHandler+0x1d8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d01d      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac4 <HAL_DMA_IRQHandler+0x1dc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac8 <HAL_DMA_IRQHandler+0x1e0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1c      	ldr	r2, [pc, #112]	@ (8005acc <HAL_DMA_IRQHandler+0x1e4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <HAL_DMA_IRQHandler+0x1e8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a19      	ldr	r2, [pc, #100]	@ (8005ad4 <HAL_DMA_IRQHandler+0x1ec>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x194>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a18      	ldr	r2, [pc, #96]	@ (8005ad8 <HAL_DMA_IRQHandler+0x1f0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d12f      	bne.n	8005adc <HAL_DMA_IRQHandler+0x1f4>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e02e      	b.n	8005af0 <HAL_DMA_IRQHandler+0x208>
 8005a92:	bf00      	nop
 8005a94:	2400000c 	.word	0x2400000c
 8005a98:	1b4e81b5 	.word	0x1b4e81b5
 8005a9c:	40020010 	.word	0x40020010
 8005aa0:	40020028 	.word	0x40020028
 8005aa4:	40020040 	.word	0x40020040
 8005aa8:	40020058 	.word	0x40020058
 8005aac:	40020070 	.word	0x40020070
 8005ab0:	40020088 	.word	0x40020088
 8005ab4:	400200a0 	.word	0x400200a0
 8005ab8:	400200b8 	.word	0x400200b8
 8005abc:	40020410 	.word	0x40020410
 8005ac0:	40020428 	.word	0x40020428
 8005ac4:	40020440 	.word	0x40020440
 8005ac8:	40020458 	.word	0x40020458
 8005acc:	40020470 	.word	0x40020470
 8005ad0:	40020488 	.word	0x40020488
 8005ad4:	400204a0 	.word	0x400204a0
 8005ad8:	400204b8 	.word	0x400204b8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0204 	bic.w	r2, r2, #4
 8005b02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	409a      	lsls	r2, r3
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b18:	f043 0201 	orr.w	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d06e      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a69      	ldr	r2, [pc, #420]	@ (8005ce0 <HAL_DMA_IRQHandler+0x3f8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d04a      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a67      	ldr	r2, [pc, #412]	@ (8005ce4 <HAL_DMA_IRQHandler+0x3fc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d045      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a66      	ldr	r2, [pc, #408]	@ (8005ce8 <HAL_DMA_IRQHandler+0x400>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d040      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a64      	ldr	r2, [pc, #400]	@ (8005cec <HAL_DMA_IRQHandler+0x404>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d03b      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a63      	ldr	r2, [pc, #396]	@ (8005cf0 <HAL_DMA_IRQHandler+0x408>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d036      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a61      	ldr	r2, [pc, #388]	@ (8005cf4 <HAL_DMA_IRQHandler+0x40c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d031      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a60      	ldr	r2, [pc, #384]	@ (8005cf8 <HAL_DMA_IRQHandler+0x410>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d02c      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a5e      	ldr	r2, [pc, #376]	@ (8005cfc <HAL_DMA_IRQHandler+0x414>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d027      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a5d      	ldr	r2, [pc, #372]	@ (8005d00 <HAL_DMA_IRQHandler+0x418>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d022      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a5b      	ldr	r2, [pc, #364]	@ (8005d04 <HAL_DMA_IRQHandler+0x41c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01d      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8005d08 <HAL_DMA_IRQHandler+0x420>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a58      	ldr	r2, [pc, #352]	@ (8005d0c <HAL_DMA_IRQHandler+0x424>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a57      	ldr	r2, [pc, #348]	@ (8005d10 <HAL_DMA_IRQHandler+0x428>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a55      	ldr	r2, [pc, #340]	@ (8005d14 <HAL_DMA_IRQHandler+0x42c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a54      	ldr	r2, [pc, #336]	@ (8005d18 <HAL_DMA_IRQHandler+0x430>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2ee>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a52      	ldr	r2, [pc, #328]	@ (8005d1c <HAL_DMA_IRQHandler+0x434>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d10a      	bne.n	8005bec <HAL_DMA_IRQHandler+0x304>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	e003      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x30c>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2201      	movs	r2, #1
 8005c02:	409a      	lsls	r2, r3
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0c:	f043 0202 	orr.w	r2, r3, #2
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 808f 	beq.w	8005d48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce0 <HAL_DMA_IRQHandler+0x3f8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d04a      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce4 <HAL_DMA_IRQHandler+0x3fc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d045      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a29      	ldr	r2, [pc, #164]	@ (8005ce8 <HAL_DMA_IRQHandler+0x400>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d040      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	@ (8005cec <HAL_DMA_IRQHandler+0x404>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d03b      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a26      	ldr	r2, [pc, #152]	@ (8005cf0 <HAL_DMA_IRQHandler+0x408>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d036      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a24      	ldr	r2, [pc, #144]	@ (8005cf4 <HAL_DMA_IRQHandler+0x40c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d031      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a23      	ldr	r2, [pc, #140]	@ (8005cf8 <HAL_DMA_IRQHandler+0x410>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d02c      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a21      	ldr	r2, [pc, #132]	@ (8005cfc <HAL_DMA_IRQHandler+0x414>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d027      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a20      	ldr	r2, [pc, #128]	@ (8005d00 <HAL_DMA_IRQHandler+0x418>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1e      	ldr	r2, [pc, #120]	@ (8005d04 <HAL_DMA_IRQHandler+0x41c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01d      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1d      	ldr	r2, [pc, #116]	@ (8005d08 <HAL_DMA_IRQHandler+0x420>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d018      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d0c <HAL_DMA_IRQHandler+0x424>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d10 <HAL_DMA_IRQHandler+0x428>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00e      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a18      	ldr	r2, [pc, #96]	@ (8005d14 <HAL_DMA_IRQHandler+0x42c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a17      	ldr	r2, [pc, #92]	@ (8005d18 <HAL_DMA_IRQHandler+0x430>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_DMA_IRQHandler+0x3e2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	@ (8005d1c <HAL_DMA_IRQHandler+0x434>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d12a      	bne.n	8005d20 <HAL_DMA_IRQHandler+0x438>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e023      	b.n	8005d28 <HAL_DMA_IRQHandler+0x440>
 8005ce0:	40020010 	.word	0x40020010
 8005ce4:	40020028 	.word	0x40020028
 8005ce8:	40020040 	.word	0x40020040
 8005cec:	40020058 	.word	0x40020058
 8005cf0:	40020070 	.word	0x40020070
 8005cf4:	40020088 	.word	0x40020088
 8005cf8:	400200a0 	.word	0x400200a0
 8005cfc:	400200b8 	.word	0x400200b8
 8005d00:	40020410 	.word	0x40020410
 8005d04:	40020428 	.word	0x40020428
 8005d08:	40020440 	.word	0x40020440
 8005d0c:	40020458 	.word	0x40020458
 8005d10:	40020470 	.word	0x40020470
 8005d14:	40020488 	.word	0x40020488
 8005d18:	400204a0 	.word	0x400204a0
 8005d1c:	400204b8 	.word	0x400204b8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2204      	movs	r2, #4
 8005d36:	409a      	lsls	r2, r3
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d40:	f043 0204 	orr.w	r2, r3, #4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4c:	f003 031f 	and.w	r3, r3, #31
 8005d50:	2210      	movs	r2, #16
 8005d52:	409a      	lsls	r2, r3
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80a6 	beq.w	8005eaa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a85      	ldr	r2, [pc, #532]	@ (8005f78 <HAL_DMA_IRQHandler+0x690>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d04a      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a83      	ldr	r2, [pc, #524]	@ (8005f7c <HAL_DMA_IRQHandler+0x694>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d045      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a82      	ldr	r2, [pc, #520]	@ (8005f80 <HAL_DMA_IRQHandler+0x698>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d040      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a80      	ldr	r2, [pc, #512]	@ (8005f84 <HAL_DMA_IRQHandler+0x69c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d03b      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a7f      	ldr	r2, [pc, #508]	@ (8005f88 <HAL_DMA_IRQHandler+0x6a0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d036      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a7d      	ldr	r2, [pc, #500]	@ (8005f8c <HAL_DMA_IRQHandler+0x6a4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d031      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005f90 <HAL_DMA_IRQHandler+0x6a8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d02c      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a7a      	ldr	r2, [pc, #488]	@ (8005f94 <HAL_DMA_IRQHandler+0x6ac>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d027      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a79      	ldr	r2, [pc, #484]	@ (8005f98 <HAL_DMA_IRQHandler+0x6b0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d022      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a77      	ldr	r2, [pc, #476]	@ (8005f9c <HAL_DMA_IRQHandler+0x6b4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01d      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a76      	ldr	r2, [pc, #472]	@ (8005fa0 <HAL_DMA_IRQHandler+0x6b8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d018      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a74      	ldr	r2, [pc, #464]	@ (8005fa4 <HAL_DMA_IRQHandler+0x6bc>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a73      	ldr	r2, [pc, #460]	@ (8005fa8 <HAL_DMA_IRQHandler+0x6c0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00e      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a71      	ldr	r2, [pc, #452]	@ (8005fac <HAL_DMA_IRQHandler+0x6c4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d009      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a70      	ldr	r2, [pc, #448]	@ (8005fb0 <HAL_DMA_IRQHandler+0x6c8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d004      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x516>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a6e      	ldr	r2, [pc, #440]	@ (8005fb4 <HAL_DMA_IRQHandler+0x6cc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10a      	bne.n	8005e14 <HAL_DMA_IRQHandler+0x52c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf14      	ite	ne
 8005e0c:	2301      	movne	r3, #1
 8005e0e:	2300      	moveq	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e009      	b.n	8005e28 <HAL_DMA_IRQHandler+0x540>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf14      	ite	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	2300      	moveq	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d03e      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	2210      	movs	r2, #16
 8005e36:	409a      	lsls	r2, r3
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d018      	beq.n	8005e7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d108      	bne.n	8005e6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d024      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
 8005e68:	e01f      	b.n	8005eaa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01b      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
 8005e7a:	e016      	b.n	8005eaa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d107      	bne.n	8005e9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0208 	bic.w	r2, r2, #8
 8005e98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	409a      	lsls	r2, r3
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8110 	beq.w	80060e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f78 <HAL_DMA_IRQHandler+0x690>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d04a      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2b      	ldr	r2, [pc, #172]	@ (8005f7c <HAL_DMA_IRQHandler+0x694>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d045      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a29      	ldr	r2, [pc, #164]	@ (8005f80 <HAL_DMA_IRQHandler+0x698>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d040      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a28      	ldr	r2, [pc, #160]	@ (8005f84 <HAL_DMA_IRQHandler+0x69c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d03b      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a26      	ldr	r2, [pc, #152]	@ (8005f88 <HAL_DMA_IRQHandler+0x6a0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d036      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a25      	ldr	r2, [pc, #148]	@ (8005f8c <HAL_DMA_IRQHandler+0x6a4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d031      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a23      	ldr	r2, [pc, #140]	@ (8005f90 <HAL_DMA_IRQHandler+0x6a8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d02c      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a22      	ldr	r2, [pc, #136]	@ (8005f94 <HAL_DMA_IRQHandler+0x6ac>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d027      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a20      	ldr	r2, [pc, #128]	@ (8005f98 <HAL_DMA_IRQHandler+0x6b0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d022      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f9c <HAL_DMA_IRQHandler+0x6b4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d01d      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa0 <HAL_DMA_IRQHandler+0x6b8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d018      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa4 <HAL_DMA_IRQHandler+0x6bc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d013      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa8 <HAL_DMA_IRQHandler+0x6c0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00e      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a19      	ldr	r2, [pc, #100]	@ (8005fac <HAL_DMA_IRQHandler+0x6c4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d009      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a17      	ldr	r2, [pc, #92]	@ (8005fb0 <HAL_DMA_IRQHandler+0x6c8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x678>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a16      	ldr	r2, [pc, #88]	@ (8005fb4 <HAL_DMA_IRQHandler+0x6cc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d12b      	bne.n	8005fb8 <HAL_DMA_IRQHandler+0x6d0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bf14      	ite	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	2300      	moveq	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	e02a      	b.n	8005fcc <HAL_DMA_IRQHandler+0x6e4>
 8005f76:	bf00      	nop
 8005f78:	40020010 	.word	0x40020010
 8005f7c:	40020028 	.word	0x40020028
 8005f80:	40020040 	.word	0x40020040
 8005f84:	40020058 	.word	0x40020058
 8005f88:	40020070 	.word	0x40020070
 8005f8c:	40020088 	.word	0x40020088
 8005f90:	400200a0 	.word	0x400200a0
 8005f94:	400200b8 	.word	0x400200b8
 8005f98:	40020410 	.word	0x40020410
 8005f9c:	40020428 	.word	0x40020428
 8005fa0:	40020440 	.word	0x40020440
 8005fa4:	40020458 	.word	0x40020458
 8005fa8:	40020470 	.word	0x40020470
 8005fac:	40020488 	.word	0x40020488
 8005fb0:	400204a0 	.word	0x400204a0
 8005fb4:	400204b8 	.word	0x400204b8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bf14      	ite	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	2300      	moveq	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8087 	beq.w	80060e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2220      	movs	r2, #32
 8005fdc:	409a      	lsls	r2, r3
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d139      	bne.n	8006062 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0216 	bic.w	r2, r2, #22
 8005ffc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800600c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <HAL_DMA_IRQHandler+0x736>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0208 	bic.w	r2, r2, #8
 800602c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	223f      	movs	r2, #63	@ 0x3f
 8006038:	409a      	lsls	r2, r3
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 834a 	beq.w	80066ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
          }
          return;
 8006060:	e344      	b.n	80066ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d018      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d108      	bne.n	8006090 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006082:	2b00      	cmp	r3, #0
 8006084:	d02c      	beq.n	80060e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
 800608e:	e027      	b.n	80060e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d023      	beq.n	80060e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
 80060a0:	e01e      	b.n	80060e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0210 	bic.w	r2, r2, #16
 80060be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8306 	beq.w	80066f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 8088 	beq.w	8006208 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2204      	movs	r2, #4
 80060fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a7a      	ldr	r2, [pc, #488]	@ (80062f0 <HAL_DMA_IRQHandler+0xa08>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d04a      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a79      	ldr	r2, [pc, #484]	@ (80062f4 <HAL_DMA_IRQHandler+0xa0c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d045      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a77      	ldr	r2, [pc, #476]	@ (80062f8 <HAL_DMA_IRQHandler+0xa10>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d040      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a76      	ldr	r2, [pc, #472]	@ (80062fc <HAL_DMA_IRQHandler+0xa14>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d03b      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a74      	ldr	r2, [pc, #464]	@ (8006300 <HAL_DMA_IRQHandler+0xa18>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d036      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a73      	ldr	r2, [pc, #460]	@ (8006304 <HAL_DMA_IRQHandler+0xa1c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d031      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a71      	ldr	r2, [pc, #452]	@ (8006308 <HAL_DMA_IRQHandler+0xa20>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02c      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a70      	ldr	r2, [pc, #448]	@ (800630c <HAL_DMA_IRQHandler+0xa24>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d027      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a6e      	ldr	r2, [pc, #440]	@ (8006310 <HAL_DMA_IRQHandler+0xa28>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d022      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a6d      	ldr	r2, [pc, #436]	@ (8006314 <HAL_DMA_IRQHandler+0xa2c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d01d      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a6b      	ldr	r2, [pc, #428]	@ (8006318 <HAL_DMA_IRQHandler+0xa30>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d018      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6a      	ldr	r2, [pc, #424]	@ (800631c <HAL_DMA_IRQHandler+0xa34>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a68      	ldr	r2, [pc, #416]	@ (8006320 <HAL_DMA_IRQHandler+0xa38>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00e      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a67      	ldr	r2, [pc, #412]	@ (8006324 <HAL_DMA_IRQHandler+0xa3c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a65      	ldr	r2, [pc, #404]	@ (8006328 <HAL_DMA_IRQHandler+0xa40>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x8b8>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a64      	ldr	r2, [pc, #400]	@ (800632c <HAL_DMA_IRQHandler+0xa44>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d108      	bne.n	80061b2 <HAL_DMA_IRQHandler+0x8ca>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e007      	b.n	80061c2 <HAL_DMA_IRQHandler+0x8da>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d307      	bcc.n	80061de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f2      	bne.n	80061c2 <HAL_DMA_IRQHandler+0x8da>
 80061dc:	e000      	b.n	80061e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80061de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d004      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2203      	movs	r2, #3
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80061f6:	e003      	b.n	8006200 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8272 	beq.w	80066f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
 800621a:	e26c      	b.n	80066f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a43      	ldr	r2, [pc, #268]	@ (8006330 <HAL_DMA_IRQHandler+0xa48>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d022      	beq.n	800626c <HAL_DMA_IRQHandler+0x984>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a42      	ldr	r2, [pc, #264]	@ (8006334 <HAL_DMA_IRQHandler+0xa4c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d01d      	beq.n	800626c <HAL_DMA_IRQHandler+0x984>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a40      	ldr	r2, [pc, #256]	@ (8006338 <HAL_DMA_IRQHandler+0xa50>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <HAL_DMA_IRQHandler+0x984>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a3f      	ldr	r2, [pc, #252]	@ (800633c <HAL_DMA_IRQHandler+0xa54>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_DMA_IRQHandler+0x984>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a3d      	ldr	r2, [pc, #244]	@ (8006340 <HAL_DMA_IRQHandler+0xa58>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <HAL_DMA_IRQHandler+0x984>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a3c      	ldr	r2, [pc, #240]	@ (8006344 <HAL_DMA_IRQHandler+0xa5c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <HAL_DMA_IRQHandler+0x984>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3a      	ldr	r2, [pc, #232]	@ (8006348 <HAL_DMA_IRQHandler+0xa60>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <HAL_DMA_IRQHandler+0x984>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a39      	ldr	r2, [pc, #228]	@ (800634c <HAL_DMA_IRQHandler+0xa64>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d101      	bne.n	8006270 <HAL_DMA_IRQHandler+0x988>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_DMA_IRQHandler+0x98a>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 823f 	beq.w	80066f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	2204      	movs	r2, #4
 800628a:	409a      	lsls	r2, r3
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	4013      	ands	r3, r2
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80cd 	beq.w	8006430 <HAL_DMA_IRQHandler+0xb48>
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80c7 	beq.w	8006430 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	2204      	movs	r2, #4
 80062ac:	409a      	lsls	r2, r3
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d049      	beq.n	8006350 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8210 	beq.w	80066f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062d8:	e20a      	b.n	80066f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8206 	beq.w	80066f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062ec:	e200      	b.n	80066f0 <HAL_DMA_IRQHandler+0xe08>
 80062ee:	bf00      	nop
 80062f0:	40020010 	.word	0x40020010
 80062f4:	40020028 	.word	0x40020028
 80062f8:	40020040 	.word	0x40020040
 80062fc:	40020058 	.word	0x40020058
 8006300:	40020070 	.word	0x40020070
 8006304:	40020088 	.word	0x40020088
 8006308:	400200a0 	.word	0x400200a0
 800630c:	400200b8 	.word	0x400200b8
 8006310:	40020410 	.word	0x40020410
 8006314:	40020428 	.word	0x40020428
 8006318:	40020440 	.word	0x40020440
 800631c:	40020458 	.word	0x40020458
 8006320:	40020470 	.word	0x40020470
 8006324:	40020488 	.word	0x40020488
 8006328:	400204a0 	.word	0x400204a0
 800632c:	400204b8 	.word	0x400204b8
 8006330:	58025408 	.word	0x58025408
 8006334:	5802541c 	.word	0x5802541c
 8006338:	58025430 	.word	0x58025430
 800633c:	58025444 	.word	0x58025444
 8006340:	58025458 	.word	0x58025458
 8006344:	5802546c 	.word	0x5802546c
 8006348:	58025480 	.word	0x58025480
 800634c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d160      	bne.n	800641c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a7f      	ldr	r2, [pc, #508]	@ (800655c <HAL_DMA_IRQHandler+0xc74>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d04a      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a7d      	ldr	r2, [pc, #500]	@ (8006560 <HAL_DMA_IRQHandler+0xc78>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d045      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a7c      	ldr	r2, [pc, #496]	@ (8006564 <HAL_DMA_IRQHandler+0xc7c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d040      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7a      	ldr	r2, [pc, #488]	@ (8006568 <HAL_DMA_IRQHandler+0xc80>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d03b      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a79      	ldr	r2, [pc, #484]	@ (800656c <HAL_DMA_IRQHandler+0xc84>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d036      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a77      	ldr	r2, [pc, #476]	@ (8006570 <HAL_DMA_IRQHandler+0xc88>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d031      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a76      	ldr	r2, [pc, #472]	@ (8006574 <HAL_DMA_IRQHandler+0xc8c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d02c      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a74      	ldr	r2, [pc, #464]	@ (8006578 <HAL_DMA_IRQHandler+0xc90>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d027      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a73      	ldr	r2, [pc, #460]	@ (800657c <HAL_DMA_IRQHandler+0xc94>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d022      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a71      	ldr	r2, [pc, #452]	@ (8006580 <HAL_DMA_IRQHandler+0xc98>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01d      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a70      	ldr	r2, [pc, #448]	@ (8006584 <HAL_DMA_IRQHandler+0xc9c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d018      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6e      	ldr	r2, [pc, #440]	@ (8006588 <HAL_DMA_IRQHandler+0xca0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a6d      	ldr	r2, [pc, #436]	@ (800658c <HAL_DMA_IRQHandler+0xca4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00e      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a6b      	ldr	r2, [pc, #428]	@ (8006590 <HAL_DMA_IRQHandler+0xca8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d009      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a6a      	ldr	r2, [pc, #424]	@ (8006594 <HAL_DMA_IRQHandler+0xcac>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d004      	beq.n	80063fa <HAL_DMA_IRQHandler+0xb12>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a68      	ldr	r2, [pc, #416]	@ (8006598 <HAL_DMA_IRQHandler+0xcb0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d108      	bne.n	800640c <HAL_DMA_IRQHandler+0xb24>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0208 	bic.w	r2, r2, #8
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e007      	b.n	800641c <HAL_DMA_IRQHandler+0xb34>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0204 	bic.w	r2, r2, #4
 800641a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8165 	beq.w	80066f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800642e:	e15f      	b.n	80066f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2202      	movs	r2, #2
 800643a:	409a      	lsls	r2, r3
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4013      	ands	r3, r2
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80c5 	beq.w	80065d0 <HAL_DMA_IRQHandler+0xce8>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80bf 	beq.w	80065d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	2202      	movs	r2, #2
 800645c:	409a      	lsls	r2, r3
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d018      	beq.n	800649e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 813a 	beq.w	80066f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006488:	e134      	b.n	80066f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8130 	beq.w	80066f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800649c:	e12a      	b.n	80066f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f040 8089 	bne.w	80065bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2b      	ldr	r2, [pc, #172]	@ (800655c <HAL_DMA_IRQHandler+0xc74>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d04a      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a29      	ldr	r2, [pc, #164]	@ (8006560 <HAL_DMA_IRQHandler+0xc78>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d045      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a28      	ldr	r2, [pc, #160]	@ (8006564 <HAL_DMA_IRQHandler+0xc7c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d040      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a26      	ldr	r2, [pc, #152]	@ (8006568 <HAL_DMA_IRQHandler+0xc80>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d03b      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a25      	ldr	r2, [pc, #148]	@ (800656c <HAL_DMA_IRQHandler+0xc84>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d036      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a23      	ldr	r2, [pc, #140]	@ (8006570 <HAL_DMA_IRQHandler+0xc88>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d031      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a22      	ldr	r2, [pc, #136]	@ (8006574 <HAL_DMA_IRQHandler+0xc8c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02c      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a20      	ldr	r2, [pc, #128]	@ (8006578 <HAL_DMA_IRQHandler+0xc90>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d027      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1f      	ldr	r2, [pc, #124]	@ (800657c <HAL_DMA_IRQHandler+0xc94>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1d      	ldr	r2, [pc, #116]	@ (8006580 <HAL_DMA_IRQHandler+0xc98>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01d      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1c      	ldr	r2, [pc, #112]	@ (8006584 <HAL_DMA_IRQHandler+0xc9c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1a      	ldr	r2, [pc, #104]	@ (8006588 <HAL_DMA_IRQHandler+0xca0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a19      	ldr	r2, [pc, #100]	@ (800658c <HAL_DMA_IRQHandler+0xca4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a17      	ldr	r2, [pc, #92]	@ (8006590 <HAL_DMA_IRQHandler+0xca8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a16      	ldr	r2, [pc, #88]	@ (8006594 <HAL_DMA_IRQHandler+0xcac>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_DMA_IRQHandler+0xc62>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a14      	ldr	r2, [pc, #80]	@ (8006598 <HAL_DMA_IRQHandler+0xcb0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d128      	bne.n	800659c <HAL_DMA_IRQHandler+0xcb4>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0214 	bic.w	r2, r2, #20
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e027      	b.n	80065ac <HAL_DMA_IRQHandler+0xcc4>
 800655c:	40020010 	.word	0x40020010
 8006560:	40020028 	.word	0x40020028
 8006564:	40020040 	.word	0x40020040
 8006568:	40020058 	.word	0x40020058
 800656c:	40020070 	.word	0x40020070
 8006570:	40020088 	.word	0x40020088
 8006574:	400200a0 	.word	0x400200a0
 8006578:	400200b8 	.word	0x400200b8
 800657c:	40020410 	.word	0x40020410
 8006580:	40020428 	.word	0x40020428
 8006584:	40020440 	.word	0x40020440
 8006588:	40020458 	.word	0x40020458
 800658c:	40020470 	.word	0x40020470
 8006590:	40020488 	.word	0x40020488
 8006594:	400204a0 	.word	0x400204a0
 8006598:	400204b8 	.word	0x400204b8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 020a 	bic.w	r2, r2, #10
 80065aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8097 	beq.w	80066f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065ce:	e091      	b.n	80066f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2208      	movs	r2, #8
 80065da:	409a      	lsls	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 8088 	beq.w	80066f6 <HAL_DMA_IRQHandler+0xe0e>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8082 	beq.w	80066f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a41      	ldr	r2, [pc, #260]	@ (80066fc <HAL_DMA_IRQHandler+0xe14>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d04a      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a3f      	ldr	r2, [pc, #252]	@ (8006700 <HAL_DMA_IRQHandler+0xe18>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d045      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a3e      	ldr	r2, [pc, #248]	@ (8006704 <HAL_DMA_IRQHandler+0xe1c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d040      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a3c      	ldr	r2, [pc, #240]	@ (8006708 <HAL_DMA_IRQHandler+0xe20>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d03b      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a3b      	ldr	r2, [pc, #236]	@ (800670c <HAL_DMA_IRQHandler+0xe24>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d036      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a39      	ldr	r2, [pc, #228]	@ (8006710 <HAL_DMA_IRQHandler+0xe28>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d031      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a38      	ldr	r2, [pc, #224]	@ (8006714 <HAL_DMA_IRQHandler+0xe2c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d02c      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a36      	ldr	r2, [pc, #216]	@ (8006718 <HAL_DMA_IRQHandler+0xe30>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d027      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a35      	ldr	r2, [pc, #212]	@ (800671c <HAL_DMA_IRQHandler+0xe34>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a33      	ldr	r2, [pc, #204]	@ (8006720 <HAL_DMA_IRQHandler+0xe38>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01d      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a32      	ldr	r2, [pc, #200]	@ (8006724 <HAL_DMA_IRQHandler+0xe3c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a30      	ldr	r2, [pc, #192]	@ (8006728 <HAL_DMA_IRQHandler+0xe40>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2f      	ldr	r2, [pc, #188]	@ (800672c <HAL_DMA_IRQHandler+0xe44>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a2d      	ldr	r2, [pc, #180]	@ (8006730 <HAL_DMA_IRQHandler+0xe48>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2c      	ldr	r2, [pc, #176]	@ (8006734 <HAL_DMA_IRQHandler+0xe4c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_DMA_IRQHandler+0xdaa>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <HAL_DMA_IRQHandler+0xe50>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d108      	bne.n	80066a4 <HAL_DMA_IRQHandler+0xdbc>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 021c 	bic.w	r2, r2, #28
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e007      	b.n	80066b4 <HAL_DMA_IRQHandler+0xdcc>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 020e 	bic.w	r2, r2, #14
 80066b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2201      	movs	r2, #1
 80066be:	409a      	lsls	r2, r3
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	e004      	b.n	80066f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066f6:	3728      	adds	r7, #40	@ 0x28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40020010 	.word	0x40020010
 8006700:	40020028 	.word	0x40020028
 8006704:	40020040 	.word	0x40020040
 8006708:	40020058 	.word	0x40020058
 800670c:	40020070 	.word	0x40020070
 8006710:	40020088 	.word	0x40020088
 8006714:	400200a0 	.word	0x400200a0
 8006718:	400200b8 	.word	0x400200b8
 800671c:	40020410 	.word	0x40020410
 8006720:	40020428 	.word	0x40020428
 8006724:	40020440 	.word	0x40020440
 8006728:	40020458 	.word	0x40020458
 800672c:	40020470 	.word	0x40020470
 8006730:	40020488 	.word	0x40020488
 8006734:	400204a0 	.word	0x400204a0
 8006738:	400204b8 	.word	0x400204b8

0800673c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006754:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a7f      	ldr	r2, [pc, #508]	@ (8006958 <DMA_SetConfig+0x21c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d072      	beq.n	8006846 <DMA_SetConfig+0x10a>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a7d      	ldr	r2, [pc, #500]	@ (800695c <DMA_SetConfig+0x220>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d06d      	beq.n	8006846 <DMA_SetConfig+0x10a>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a7c      	ldr	r2, [pc, #496]	@ (8006960 <DMA_SetConfig+0x224>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d068      	beq.n	8006846 <DMA_SetConfig+0x10a>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a7a      	ldr	r2, [pc, #488]	@ (8006964 <DMA_SetConfig+0x228>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d063      	beq.n	8006846 <DMA_SetConfig+0x10a>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a79      	ldr	r2, [pc, #484]	@ (8006968 <DMA_SetConfig+0x22c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d05e      	beq.n	8006846 <DMA_SetConfig+0x10a>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a77      	ldr	r2, [pc, #476]	@ (800696c <DMA_SetConfig+0x230>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d059      	beq.n	8006846 <DMA_SetConfig+0x10a>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a76      	ldr	r2, [pc, #472]	@ (8006970 <DMA_SetConfig+0x234>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d054      	beq.n	8006846 <DMA_SetConfig+0x10a>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a74      	ldr	r2, [pc, #464]	@ (8006974 <DMA_SetConfig+0x238>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d04f      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a73      	ldr	r2, [pc, #460]	@ (8006978 <DMA_SetConfig+0x23c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d04a      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a71      	ldr	r2, [pc, #452]	@ (800697c <DMA_SetConfig+0x240>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d045      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a70      	ldr	r2, [pc, #448]	@ (8006980 <DMA_SetConfig+0x244>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d040      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a6e      	ldr	r2, [pc, #440]	@ (8006984 <DMA_SetConfig+0x248>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d03b      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a6d      	ldr	r2, [pc, #436]	@ (8006988 <DMA_SetConfig+0x24c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d036      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6b      	ldr	r2, [pc, #428]	@ (800698c <DMA_SetConfig+0x250>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d031      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a6a      	ldr	r2, [pc, #424]	@ (8006990 <DMA_SetConfig+0x254>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d02c      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a68      	ldr	r2, [pc, #416]	@ (8006994 <DMA_SetConfig+0x258>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d027      	beq.n	8006846 <DMA_SetConfig+0x10a>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a67      	ldr	r2, [pc, #412]	@ (8006998 <DMA_SetConfig+0x25c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d022      	beq.n	8006846 <DMA_SetConfig+0x10a>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a65      	ldr	r2, [pc, #404]	@ (800699c <DMA_SetConfig+0x260>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01d      	beq.n	8006846 <DMA_SetConfig+0x10a>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a64      	ldr	r2, [pc, #400]	@ (80069a0 <DMA_SetConfig+0x264>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <DMA_SetConfig+0x10a>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a62      	ldr	r2, [pc, #392]	@ (80069a4 <DMA_SetConfig+0x268>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <DMA_SetConfig+0x10a>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a61      	ldr	r2, [pc, #388]	@ (80069a8 <DMA_SetConfig+0x26c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <DMA_SetConfig+0x10a>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5f      	ldr	r2, [pc, #380]	@ (80069ac <DMA_SetConfig+0x270>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <DMA_SetConfig+0x10a>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a5e      	ldr	r2, [pc, #376]	@ (80069b0 <DMA_SetConfig+0x274>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <DMA_SetConfig+0x10a>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a5c      	ldr	r2, [pc, #368]	@ (80069b4 <DMA_SetConfig+0x278>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <DMA_SetConfig+0x10e>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <DMA_SetConfig+0x110>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00d      	beq.n	800686c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006858:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800686a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a39      	ldr	r2, [pc, #228]	@ (8006958 <DMA_SetConfig+0x21c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d04a      	beq.n	800690c <DMA_SetConfig+0x1d0>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a38      	ldr	r2, [pc, #224]	@ (800695c <DMA_SetConfig+0x220>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d045      	beq.n	800690c <DMA_SetConfig+0x1d0>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a36      	ldr	r2, [pc, #216]	@ (8006960 <DMA_SetConfig+0x224>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d040      	beq.n	800690c <DMA_SetConfig+0x1d0>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a35      	ldr	r2, [pc, #212]	@ (8006964 <DMA_SetConfig+0x228>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d03b      	beq.n	800690c <DMA_SetConfig+0x1d0>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a33      	ldr	r2, [pc, #204]	@ (8006968 <DMA_SetConfig+0x22c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d036      	beq.n	800690c <DMA_SetConfig+0x1d0>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a32      	ldr	r2, [pc, #200]	@ (800696c <DMA_SetConfig+0x230>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d031      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a30      	ldr	r2, [pc, #192]	@ (8006970 <DMA_SetConfig+0x234>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d02c      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006974 <DMA_SetConfig+0x238>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d027      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006978 <DMA_SetConfig+0x23c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d022      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a2c      	ldr	r2, [pc, #176]	@ (800697c <DMA_SetConfig+0x240>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d01d      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006980 <DMA_SetConfig+0x244>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a29      	ldr	r2, [pc, #164]	@ (8006984 <DMA_SetConfig+0x248>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a27      	ldr	r2, [pc, #156]	@ (8006988 <DMA_SetConfig+0x24c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a26      	ldr	r2, [pc, #152]	@ (800698c <DMA_SetConfig+0x250>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <DMA_SetConfig+0x1d0>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a24      	ldr	r2, [pc, #144]	@ (8006990 <DMA_SetConfig+0x254>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <DMA_SetConfig+0x1d0>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a23      	ldr	r2, [pc, #140]	@ (8006994 <DMA_SetConfig+0x258>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d101      	bne.n	8006910 <DMA_SetConfig+0x1d4>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <DMA_SetConfig+0x1d6>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d059      	beq.n	80069ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	223f      	movs	r2, #63	@ 0x3f
 8006920:	409a      	lsls	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006934:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	d138      	bne.n	80069b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006956:	e086      	b.n	8006a66 <DMA_SetConfig+0x32a>
 8006958:	40020010 	.word	0x40020010
 800695c:	40020028 	.word	0x40020028
 8006960:	40020040 	.word	0x40020040
 8006964:	40020058 	.word	0x40020058
 8006968:	40020070 	.word	0x40020070
 800696c:	40020088 	.word	0x40020088
 8006970:	400200a0 	.word	0x400200a0
 8006974:	400200b8 	.word	0x400200b8
 8006978:	40020410 	.word	0x40020410
 800697c:	40020428 	.word	0x40020428
 8006980:	40020440 	.word	0x40020440
 8006984:	40020458 	.word	0x40020458
 8006988:	40020470 	.word	0x40020470
 800698c:	40020488 	.word	0x40020488
 8006990:	400204a0 	.word	0x400204a0
 8006994:	400204b8 	.word	0x400204b8
 8006998:	58025408 	.word	0x58025408
 800699c:	5802541c 	.word	0x5802541c
 80069a0:	58025430 	.word	0x58025430
 80069a4:	58025444 	.word	0x58025444
 80069a8:	58025458 	.word	0x58025458
 80069ac:	5802546c 	.word	0x5802546c
 80069b0:	58025480 	.word	0x58025480
 80069b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	60da      	str	r2, [r3, #12]
}
 80069c8:	e04d      	b.n	8006a66 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a29      	ldr	r2, [pc, #164]	@ (8006a74 <DMA_SetConfig+0x338>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d022      	beq.n	8006a1a <DMA_SetConfig+0x2de>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a27      	ldr	r2, [pc, #156]	@ (8006a78 <DMA_SetConfig+0x33c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01d      	beq.n	8006a1a <DMA_SetConfig+0x2de>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a26      	ldr	r2, [pc, #152]	@ (8006a7c <DMA_SetConfig+0x340>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <DMA_SetConfig+0x2de>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a24      	ldr	r2, [pc, #144]	@ (8006a80 <DMA_SetConfig+0x344>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <DMA_SetConfig+0x2de>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a23      	ldr	r2, [pc, #140]	@ (8006a84 <DMA_SetConfig+0x348>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <DMA_SetConfig+0x2de>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a21      	ldr	r2, [pc, #132]	@ (8006a88 <DMA_SetConfig+0x34c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <DMA_SetConfig+0x2de>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a20      	ldr	r2, [pc, #128]	@ (8006a8c <DMA_SetConfig+0x350>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <DMA_SetConfig+0x2de>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1e      	ldr	r2, [pc, #120]	@ (8006a90 <DMA_SetConfig+0x354>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d101      	bne.n	8006a1e <DMA_SetConfig+0x2e2>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <DMA_SetConfig+0x2e4>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d020      	beq.n	8006a66 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b40      	cmp	r3, #64	@ 0x40
 8006a42:	d108      	bne.n	8006a56 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	60da      	str	r2, [r3, #12]
}
 8006a54:	e007      	b.n	8006a66 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	60da      	str	r2, [r3, #12]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	58025408 	.word	0x58025408
 8006a78:	5802541c 	.word	0x5802541c
 8006a7c:	58025430 	.word	0x58025430
 8006a80:	58025444 	.word	0x58025444
 8006a84:	58025458 	.word	0x58025458
 8006a88:	5802546c 	.word	0x5802546c
 8006a8c:	58025480 	.word	0x58025480
 8006a90:	58025494 	.word	0x58025494

08006a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a42      	ldr	r2, [pc, #264]	@ (8006bac <DMA_CalcBaseAndBitshift+0x118>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d04a      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a41      	ldr	r2, [pc, #260]	@ (8006bb0 <DMA_CalcBaseAndBitshift+0x11c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d045      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8006bb4 <DMA_CalcBaseAndBitshift+0x120>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d040      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a3e      	ldr	r2, [pc, #248]	@ (8006bb8 <DMA_CalcBaseAndBitshift+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d03b      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bbc <DMA_CalcBaseAndBitshift+0x128>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d036      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a3b      	ldr	r2, [pc, #236]	@ (8006bc0 <DMA_CalcBaseAndBitshift+0x12c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d031      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a39      	ldr	r2, [pc, #228]	@ (8006bc4 <DMA_CalcBaseAndBitshift+0x130>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d02c      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a38      	ldr	r2, [pc, #224]	@ (8006bc8 <DMA_CalcBaseAndBitshift+0x134>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d027      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a36      	ldr	r2, [pc, #216]	@ (8006bcc <DMA_CalcBaseAndBitshift+0x138>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d022      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a35      	ldr	r2, [pc, #212]	@ (8006bd0 <DMA_CalcBaseAndBitshift+0x13c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d01d      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a33      	ldr	r2, [pc, #204]	@ (8006bd4 <DMA_CalcBaseAndBitshift+0x140>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d018      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a32      	ldr	r2, [pc, #200]	@ (8006bd8 <DMA_CalcBaseAndBitshift+0x144>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d013      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a30      	ldr	r2, [pc, #192]	@ (8006bdc <DMA_CalcBaseAndBitshift+0x148>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00e      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2f      	ldr	r2, [pc, #188]	@ (8006be0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d009      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2d      	ldr	r2, [pc, #180]	@ (8006be4 <DMA_CalcBaseAndBitshift+0x150>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xa8>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2c      	ldr	r2, [pc, #176]	@ (8006be8 <DMA_CalcBaseAndBitshift+0x154>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d101      	bne.n	8006b40 <DMA_CalcBaseAndBitshift+0xac>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <DMA_CalcBaseAndBitshift+0xae>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d024      	beq.n	8006b90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	3b10      	subs	r3, #16
 8006b4e:	4a27      	ldr	r2, [pc, #156]	@ (8006bec <DMA_CalcBaseAndBitshift+0x158>)
 8006b50:	fba2 2303 	umull	r2, r3, r2, r3
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	4a24      	ldr	r2, [pc, #144]	@ (8006bf0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006b60:	5cd3      	ldrb	r3, [r2, r3]
 8006b62:	461a      	mov	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d908      	bls.n	8006b80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf4 <DMA_CalcBaseAndBitshift+0x160>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	1d1a      	adds	r2, r3, #4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b7e:	e00d      	b.n	8006b9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf4 <DMA_CalcBaseAndBitshift+0x160>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b8e:	e005      	b.n	8006b9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	40020010 	.word	0x40020010
 8006bb0:	40020028 	.word	0x40020028
 8006bb4:	40020040 	.word	0x40020040
 8006bb8:	40020058 	.word	0x40020058
 8006bbc:	40020070 	.word	0x40020070
 8006bc0:	40020088 	.word	0x40020088
 8006bc4:	400200a0 	.word	0x400200a0
 8006bc8:	400200b8 	.word	0x400200b8
 8006bcc:	40020410 	.word	0x40020410
 8006bd0:	40020428 	.word	0x40020428
 8006bd4:	40020440 	.word	0x40020440
 8006bd8:	40020458 	.word	0x40020458
 8006bdc:	40020470 	.word	0x40020470
 8006be0:	40020488 	.word	0x40020488
 8006be4:	400204a0 	.word	0x400204a0
 8006be8:	400204b8 	.word	0x400204b8
 8006bec:	aaaaaaab 	.word	0xaaaaaaab
 8006bf0:	08012a60 	.word	0x08012a60
 8006bf4:	fffffc00 	.word	0xfffffc00

08006bf8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d120      	bne.n	8006c4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d858      	bhi.n	8006cc6 <DMA_CheckFifoParam+0xce>
 8006c14:	a201      	add	r2, pc, #4	@ (adr r2, 8006c1c <DMA_CheckFifoParam+0x24>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c2d 	.word	0x08006c2d
 8006c20:	08006c3f 	.word	0x08006c3f
 8006c24:	08006c2d 	.word	0x08006c2d
 8006c28:	08006cc7 	.word	0x08006cc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d048      	beq.n	8006cca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c3c:	e045      	b.n	8006cca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c46:	d142      	bne.n	8006cce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c4c:	e03f      	b.n	8006cce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c56:	d123      	bne.n	8006ca0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d838      	bhi.n	8006cd2 <DMA_CheckFifoParam+0xda>
 8006c60:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <DMA_CheckFifoParam+0x70>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c79 	.word	0x08006c79
 8006c6c:	08006c7f 	.word	0x08006c7f
 8006c70:	08006c79 	.word	0x08006c79
 8006c74:	08006c91 	.word	0x08006c91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]
        break;
 8006c7c:	e030      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d025      	beq.n	8006cd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c8e:	e022      	b.n	8006cd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c98:	d11f      	bne.n	8006cda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c9e:	e01c      	b.n	8006cda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d902      	bls.n	8006cae <DMA_CheckFifoParam+0xb6>
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d003      	beq.n	8006cb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006cac:	e018      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8006cb2:	e015      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00e      	beq.n	8006cde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc4:	e00b      	b.n	8006cde <DMA_CheckFifoParam+0xe6>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e00a      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e008      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e006      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>
        break;
 8006cd2:	bf00      	nop
 8006cd4:	e004      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>
        break;
 8006cd6:	bf00      	nop
 8006cd8:	e002      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>
        break;
 8006cda:	bf00      	nop
 8006cdc:	e000      	b.n	8006ce0 <DMA_CheckFifoParam+0xe8>
    break;
 8006cde:	bf00      	nop
    }
  }

  return status;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop

08006cf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a38      	ldr	r2, [pc, #224]	@ (8006de4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a36      	ldr	r2, [pc, #216]	@ (8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a35      	ldr	r2, [pc, #212]	@ (8006dec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a33      	ldr	r2, [pc, #204]	@ (8006df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a32      	ldr	r2, [pc, #200]	@ (8006df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a30      	ldr	r2, [pc, #192]	@ (8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8006dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a2d      	ldr	r2, [pc, #180]	@ (8006e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01a      	beq.n	8006d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	3b08      	subs	r3, #8
 8006d60:	4a28      	ldr	r2, [pc, #160]	@ (8006e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	091b      	lsrs	r3, r3, #4
 8006d68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4b26      	ldr	r3, [pc, #152]	@ (8006e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a24      	ldr	r2, [pc, #144]	@ (8006e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	2201      	movs	r2, #1
 8006d86:	409a      	lsls	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d8c:	e024      	b.n	8006dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	3b10      	subs	r3, #16
 8006d96:	4a1e      	ldr	r2, [pc, #120]	@ (8006e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	091b      	lsrs	r3, r3, #4
 8006d9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d806      	bhi.n	8006db6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4a1b      	ldr	r2, [pc, #108]	@ (8006e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d902      	bls.n	8006db6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3308      	adds	r3, #8
 8006db4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4b18      	ldr	r3, [pc, #96]	@ (8006e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a16      	ldr	r2, [pc, #88]	@ (8006e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006dc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dd8:	bf00      	nop
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	58025408 	.word	0x58025408
 8006de8:	5802541c 	.word	0x5802541c
 8006dec:	58025430 	.word	0x58025430
 8006df0:	58025444 	.word	0x58025444
 8006df4:	58025458 	.word	0x58025458
 8006df8:	5802546c 	.word	0x5802546c
 8006dfc:	58025480 	.word	0x58025480
 8006e00:	58025494 	.word	0x58025494
 8006e04:	cccccccd 	.word	0xcccccccd
 8006e08:	16009600 	.word	0x16009600
 8006e0c:	58025880 	.word	0x58025880
 8006e10:	aaaaaaab 	.word	0xaaaaaaab
 8006e14:	400204b8 	.word	0x400204b8
 8006e18:	4002040f 	.word	0x4002040f
 8006e1c:	10008200 	.word	0x10008200
 8006e20:	40020880 	.word	0x40020880

08006e24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04a      	beq.n	8006ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d847      	bhi.n	8006ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a25      	ldr	r2, [pc, #148]	@ (8006edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d022      	beq.n	8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a24      	ldr	r2, [pc, #144]	@ (8006ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d01d      	beq.n	8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a22      	ldr	r2, [pc, #136]	@ (8006ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d018      	beq.n	8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a21      	ldr	r2, [pc, #132]	@ (8006ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d013      	beq.n	8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00e      	beq.n	8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d101      	bne.n	8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e94:	2300      	movs	r3, #0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4b17      	ldr	r3, [pc, #92]	@ (8006efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a15      	ldr	r2, [pc, #84]	@ (8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006eac:	671a      	str	r2, [r3, #112]	@ 0x70
 8006eae:	e009      	b.n	8006ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4b14      	ldr	r3, [pc, #80]	@ (8006f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a11      	ldr	r2, [pc, #68]	@ (8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006ec2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	2201      	movs	r2, #1
 8006eca:	409a      	lsls	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	58025408 	.word	0x58025408
 8006ee0:	5802541c 	.word	0x5802541c
 8006ee4:	58025430 	.word	0x58025430
 8006ee8:	58025444 	.word	0x58025444
 8006eec:	58025458 	.word	0x58025458
 8006ef0:	5802546c 	.word	0x5802546c
 8006ef4:	58025480 	.word	0x58025480
 8006ef8:	58025494 	.word	0x58025494
 8006efc:	1600963f 	.word	0x1600963f
 8006f00:	58025940 	.word	0x58025940
 8006f04:	1000823f 	.word	0x1000823f
 8006f08:	40020940 	.word	0x40020940

08006f0c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b098      	sub	sp, #96	@ 0x60
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006f14:	4a84      	ldr	r2, [pc, #528]	@ (8007128 <HAL_FDCAN_Init+0x21c>)
 8006f16:	f107 030c 	add.w	r3, r7, #12
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	224c      	movs	r2, #76	@ 0x4c
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f00a ff54 	bl	8011dcc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e1c6      	b.n	80072bc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a7e      	ldr	r2, [pc, #504]	@ (800712c <HAL_FDCAN_Init+0x220>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d106      	bne.n	8006f46 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f40:	461a      	mov	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fb f8ae 	bl	80020bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0210 	bic.w	r2, r2, #16
 8006f6e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f70:	f7fb fd1a 	bl	80029a8 <HAL_GetTick>
 8006f74:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006f76:	e014      	b.n	8006fa2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006f78:	f7fb fd16 	bl	80029a8 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b0a      	cmp	r3, #10
 8006f84:	d90d      	bls.n	8006fa2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f8c:	f043 0201 	orr.w	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2203      	movs	r2, #3
 8006f9a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e18c      	b.n	80072bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d0e3      	beq.n	8006f78 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fc0:	f7fb fcf2 	bl	80029a8 <HAL_GetTick>
 8006fc4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006fc6:	e014      	b.n	8006ff2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006fc8:	f7fb fcee 	bl	80029a8 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b0a      	cmp	r3, #10
 8006fd4:	d90d      	bls.n	8006ff2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fdc:	f043 0201 	orr.w	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2203      	movs	r2, #3
 8006fea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e164      	b.n	80072bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0e3      	beq.n	8006fc8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0202 	orr.w	r2, r2, #2
 800700e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7c1b      	ldrb	r3, [r3, #16]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d108      	bne.n	800702a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007026:	619a      	str	r2, [r3, #24]
 8007028:	e007      	b.n	800703a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	699a      	ldr	r2, [r3, #24]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007038:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7c5b      	ldrb	r3, [r3, #17]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d108      	bne.n	8007054 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007050:	619a      	str	r2, [r3, #24]
 8007052:	e007      	b.n	8007064 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007062:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	7c9b      	ldrb	r3, [r3, #18]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d108      	bne.n	800707e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800707a:	619a      	str	r2, [r3, #24]
 800707c:	e007      	b.n	800708e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800708c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80070b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0210 	bic.w	r2, r2, #16
 80070c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d108      	bne.n	80070de <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0204 	orr.w	r2, r2, #4
 80070da:	619a      	str	r2, [r3, #24]
 80070dc:	e030      	b.n	8007140 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d02c      	beq.n	8007140 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d020      	beq.n	8007130 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80070fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0210 	orr.w	r2, r2, #16
 800710c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b03      	cmp	r3, #3
 8007114:	d114      	bne.n	8007140 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f042 0220 	orr.w	r2, r2, #32
 8007124:	619a      	str	r2, [r3, #24]
 8007126:	e00b      	b.n	8007140 <HAL_FDCAN_Init+0x234>
 8007128:	08012a04 	.word	0x08012a04
 800712c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0220 	orr.w	r2, r2, #32
 800713e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	3b01      	subs	r3, #1
 8007146:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	3b01      	subs	r3, #1
 800714e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007150:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007158:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	3b01      	subs	r3, #1
 8007162:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007168:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800716a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007174:	d115      	bne.n	80071a2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	3b01      	subs	r3, #1
 8007182:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007184:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718a:	3b01      	subs	r3, #1
 800718c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800718e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	3b01      	subs	r3, #1
 8007198:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800719e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071a0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c8:	4413      	add	r3, r2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d011      	beq.n	80071f2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80071d6:	f023 0107 	bic.w	r1, r3, #7
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	3360      	adds	r3, #96	@ 0x60
 80071e2:	443b      	add	r3, r7
 80071e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d011      	beq.n	800721e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007202:	f023 0107 	bic.w	r1, r3, #7
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	3360      	adds	r3, #96	@ 0x60
 800720e:	443b      	add	r3, r7
 8007210:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007222:	2b00      	cmp	r3, #0
 8007224:	d012      	beq.n	800724c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800722e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	3360      	adds	r3, #96	@ 0x60
 800723a:	443b      	add	r3, r7
 800723c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007240:	011a      	lsls	r2, r3, #4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007250:	2b00      	cmp	r3, #0
 8007252:	d012      	beq.n	800727a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800725c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	3360      	adds	r3, #96	@ 0x60
 8007268:	443b      	add	r3, r7
 800726a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800726e:	021a      	lsls	r2, r3, #8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a11      	ldr	r2, [pc, #68]	@ (80072c4 <HAL_FDCAN_Init+0x3b8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d107      	bne.n	8007294 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f022 0203 	bic.w	r2, r2, #3
 8007292:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fe35 	bl	8007f1c <FDCAN_CalcultateRamBlockAddresses>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80072b8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3760      	adds	r7, #96	@ 0x60
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	4000a000 	.word	0x4000a000

080072c8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072d8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d002      	beq.n	80072e6 <HAL_FDCAN_ConfigFilter+0x1e>
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d157      	bne.n	8007396 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d12b      	bne.n	8007346 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b07      	cmp	r3, #7
 80072f4:	d10d      	bne.n	8007312 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007302:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007308:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800730a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	e00e      	b.n	8007330 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800731e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007326:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e025      	b.n	8007392 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	075a      	lsls	r2, r3, #29
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b07      	cmp	r3, #7
 800735a:	d103      	bne.n	8007364 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	e006      	b.n	8007372 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	079a      	lsls	r2, r3, #30
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3304      	adds	r3, #4
 800738a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	e008      	b.n	80073a8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800739c:	f043 0202 	orr.w	r2, r3, #2
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
  }
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d111      	bne.n	80073ec <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e008      	b.n	80073fe <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073f2:	f043 0204 	orr.w	r2, r3, #4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
  }
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d141      	bne.n	80074a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800742a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007438:	f043 0220 	orr.w	r2, r3, #32
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e038      	b.n	80074b8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800744e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d009      	beq.n	800746a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800745c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e026      	b.n	80074b8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007472:	0c1b      	lsrs	r3, r3, #16
 8007474:	f003 031f 	and.w	r3, r3, #31
 8007478:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fed1 	bl	8008228 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2101      	movs	r1, #1
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	fa01 f202 	lsl.w	r2, r1, r2
 8007492:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007496:	2201      	movs	r2, #1
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	409a      	lsls	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e008      	b.n	80074b8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074ac:	f043 0208 	orr.w	r2, r3, #8
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
  }
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b08b      	sub	sp, #44	@ 0x2c
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074d8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80074da:	7efb      	ldrb	r3, [r7, #27]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	f040 8149 	bne.w	8007774 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b40      	cmp	r3, #64	@ 0x40
 80074e6:	d14c      	bne.n	8007582 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d109      	bne.n	800750c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074fe:	f043 0220 	orr.w	r2, r3, #32
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e13c      	b.n	8007786 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007522:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e12a      	b.n	8007786 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007538:	0e1b      	lsrs	r3, r3, #24
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b01      	cmp	r3, #1
 8007540:	d10a      	bne.n	8007558 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800754a:	0fdb      	lsrs	r3, r3, #31
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007554:	2301      	movs	r3, #1
 8007556:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007574:	69f9      	ldr	r1, [r7, #28]
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007580:	e068      	b.n	8007654 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b41      	cmp	r3, #65	@ 0x41
 8007586:	d14c      	bne.n	8007622 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007590:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d109      	bne.n	80075ac <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800759e:	f043 0220 	orr.w	r2, r3, #32
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0ec      	b.n	8007786 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0da      	b.n	8007786 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075d8:	0e1b      	lsrs	r3, r3, #24
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d10a      	bne.n	80075f8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075ea:	0fdb      	lsrs	r3, r3, #31
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80075f4:	2301      	movs	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007600:	0a1b      	lsrs	r3, r3, #8
 8007602:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007614:	69f9      	ldr	r1, [r7, #28]
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007620:	e018      	b.n	8007654 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	429a      	cmp	r2, r3
 800762a:	d309      	bcc.n	8007640 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007632:	f043 0220 	orr.w	r2, r3, #32
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e0a2      	b.n	8007786 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	fb01 f303 	mul.w	r3, r1, r3
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d107      	bne.n	8007678 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	0c9b      	lsrs	r3, r3, #18
 800766e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e005      	b.n	8007684 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	3304      	adds	r3, #4
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80076ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	0c1b      	lsrs	r3, r3, #16
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	0e1b      	lsrs	r3, r3, #24
 80076d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	0fda      	lsrs	r2, r3, #31
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	3304      	adds	r3, #4
 80076ee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80076f4:	2300      	movs	r3, #0
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	e00a      	b.n	8007710 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	441a      	add	r2, r3
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	440b      	add	r3, r1
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	3301      	adds	r3, #1
 800770e:	623b      	str	r3, [r7, #32]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	4a1f      	ldr	r2, [pc, #124]	@ (8007794 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8007716:	5cd3      	ldrb	r3, [r2, r3]
 8007718:	461a      	mov	r2, r3
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	4293      	cmp	r3, r2
 800771e:	d3ec      	bcc.n	80076fa <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b40      	cmp	r3, #64	@ 0x40
 8007724:	d105      	bne.n	8007732 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007730:	e01e      	b.n	8007770 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b41      	cmp	r3, #65	@ 0x41
 8007736:	d105      	bne.n	8007744 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007742:	e015      	b.n	8007770 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b1f      	cmp	r3, #31
 8007748:	d808      	bhi.n	800775c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2101      	movs	r1, #1
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	fa01 f202 	lsl.w	r2, r1, r2
 8007756:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800775a:	e009      	b.n	8007770 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f003 021f 	and.w	r2, r3, #31
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2101      	movs	r1, #1
 8007768:	fa01 f202 	lsl.w	r2, r1, r2
 800776c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e008      	b.n	8007786 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800777a:	f043 0208 	orr.w	r2, r3, #8
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	372c      	adds	r7, #44	@ 0x2c
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	08012a68 	.word	0x08012a68

08007798 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f003 0207 	and.w	r2, r3, #7
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	0a1b      	lsrs	r3, r3, #8
 80077b8:	f003 0207 	and.w	r2, r3, #7
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f003 0218 	and.w	r2, r3, #24
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	095b      	lsrs	r3, r3, #5
 80077ce:	f003 0201 	and.w	r2, r3, #1
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	099b      	lsrs	r3, r3, #6
 80077da:	f003 0201 	and.w	r2, r3, #1
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	09db      	lsrs	r3, r3, #7
 80077e6:	f003 0201 	and.w	r2, r3, #1
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	0adb      	lsrs	r3, r3, #11
 80077f2:	f003 0201 	and.w	r2, r3, #1
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	0b1b      	lsrs	r3, r3, #12
 80077fe:	f003 0201 	and.w	r2, r3, #1
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	0b5b      	lsrs	r3, r3, #13
 800780a:	f003 0201 	and.w	r2, r3, #1
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	0b9b      	lsrs	r3, r3, #14
 8007816:	f003 0201 	and.w	r2, r3, #1
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	0c1b      	lsrs	r3, r3, #16
 8007822:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800784a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d002      	beq.n	8007858 <HAL_FDCAN_ActivateNotification+0x20>
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d155      	bne.n	8007904 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d108      	bne.n	8007878 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0201 	orr.w	r2, r2, #1
 8007874:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007876:	e014      	b.n	80078a2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	4013      	ands	r3, r2
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	429a      	cmp	r2, r3
 8007886:	d108      	bne.n	800789a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0202 	orr.w	r2, r2, #2
 8007896:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007898:	e003      	b.n	80078a2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2203      	movs	r2, #3
 80078a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	430a      	orrs	r2, r1
 80078da:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007924 <HAL_FDCAN_ActivateNotification+0xec>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	430b      	orrs	r3, r1
 80078f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <HAL_FDCAN_ActivateNotification+0xf0>)
 80078f4:	695a      	ldr	r2, [r3, #20]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	0f9b      	lsrs	r3, r3, #30
 80078fa:	490b      	ldr	r1, [pc, #44]	@ (8007928 <HAL_FDCAN_ActivateNotification+0xf0>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	e008      	b.n	8007916 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800790a:	f043 0202 	orr.w	r2, r3, #2
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
  }
}
 8007916:	4618      	mov	r0, r3
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	3fcfffff 	.word	0x3fcfffff
 8007928:	4000a800 	.word	0x4000a800

0800792c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b096      	sub	sp, #88	@ 0x58
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007934:	4b95      	ldr	r3, [pc, #596]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	079b      	lsls	r3, r3, #30
 800793a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800793c:	4b93      	ldr	r3, [pc, #588]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	079b      	lsls	r3, r3, #30
 8007942:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007944:	4013      	ands	r3, r2
 8007946:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007952:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800795c:	4013      	ands	r3, r2
 800795e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007974:	4013      	ands	r3, r2
 8007976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007982:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800798c:	4013      	ands	r3, r2
 800798e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007996:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800799a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079a4:	4013      	ands	r3, r2
 80079a6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ae:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80079b2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079bc:	4013      	ands	r3, r2
 80079be:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80079d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00f      	beq.n	80079fa <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80079da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80079ee:	4b67      	ldr	r3, [pc, #412]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa44 	bl	8007e82 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80079fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01c      	beq.n	8007a3e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d017      	beq.n	8007a3e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a16:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a22:	4013      	ands	r3, r2
 8007a24:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a30:	4b56      	ldr	r3, [pc, #344]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007a36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f9f9 	bl	8007e30 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00d      	beq.n	8007a60 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a4a:	4b51      	ldr	r3, [pc, #324]	@ (8007b90 <HAL_FDCAN_IRQHandler+0x264>)
 8007a4c:	400b      	ands	r3, r1
 8007a4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a50:	4a4e      	ldr	r2, [pc, #312]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a54:	0f9b      	lsrs	r3, r3, #30
 8007a56:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007a58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f9b2 	bl	8007dc4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a6c:	4b48      	ldr	r3, [pc, #288]	@ (8007b90 <HAL_FDCAN_IRQHandler+0x264>)
 8007a6e:	400b      	ands	r3, r1
 8007a70:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a72:	4a46      	ldr	r2, [pc, #280]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a76:	0f9b      	lsrs	r3, r3, #30
 8007a78:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007a7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9ac 	bl	8007dda <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00d      	beq.n	8007aa4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a8e:	4b40      	ldr	r3, [pc, #256]	@ (8007b90 <HAL_FDCAN_IRQHandler+0x264>)
 8007a90:	400b      	ands	r3, r1
 8007a92:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a94:	4a3d      	ldr	r2, [pc, #244]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a98:	0f9b      	lsrs	r3, r3, #30
 8007a9a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007a9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7f9 fd84 	bl	80015ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007aa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00d      	beq.n	8007ac6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007ab0:	4b37      	ldr	r3, [pc, #220]	@ (8007b90 <HAL_FDCAN_IRQHandler+0x264>)
 8007ab2:	400b      	ands	r3, r1
 8007ab4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ab6:	4a35      	ldr	r2, [pc, #212]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aba:	0f9b      	lsrs	r3, r3, #30
 8007abc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007abe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f995 	bl	8007df0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00f      	beq.n	8007af0 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ae2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007ae4:	4b29      	ldr	r3, [pc, #164]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f98b 	bl	8007e06 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01c      	beq.n	8007b34 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d017      	beq.n	8007b34 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b0c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b18:	4013      	ands	r3, r2
 8007b1a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b24:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b26:	4b19      	ldr	r3, [pc, #100]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007b2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f973 	bl	8007e1a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00f      	beq.n	8007b5e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007b50:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b52:	4b0e      	ldr	r3, [pc, #56]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f974 	bl	8007e46 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d015      	beq.n	8007b94 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d010      	beq.n	8007b94 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007b7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b7c:	4b03      	ldr	r3, [pc, #12]	@ (8007b8c <HAL_FDCAN_IRQHandler+0x260>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f969 	bl	8007e5a <HAL_FDCAN_TimestampWraparoundCallback>
 8007b88:	e004      	b.n	8007b94 <HAL_FDCAN_IRQHandler+0x268>
 8007b8a:	bf00      	nop
 8007b8c:	4000a800 	.word	0x4000a800
 8007b90:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007bb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bb2:	4b81      	ldr	r3, [pc, #516]	@ (8007db8 <HAL_FDCAN_IRQHandler+0x48c>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f958 	bl	8007e6e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d014      	beq.n	8007bf2 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00f      	beq.n	8007bf2 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007bda:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bdc:	4b76      	ldr	r3, [pc, #472]	@ (8007db8 <HAL_FDCAN_IRQHandler+0x48c>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007be8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00d      	beq.n	8007c14 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8007dbc <HAL_FDCAN_IRQHandler+0x490>)
 8007c00:	400b      	ands	r3, r1
 8007c02:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c04:	4a6c      	ldr	r2, [pc, #432]	@ (8007db8 <HAL_FDCAN_IRQHandler+0x48c>)
 8007c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c08:	0f9b      	lsrs	r3, r3, #30
 8007c0a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f94b 	bl	8007eaa <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d011      	beq.n	8007c3e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c20:	4b66      	ldr	r3, [pc, #408]	@ (8007dbc <HAL_FDCAN_IRQHandler+0x490>)
 8007c22:	400b      	ands	r3, r1
 8007c24:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c26:	4a64      	ldr	r2, [pc, #400]	@ (8007db8 <HAL_FDCAN_IRQHandler+0x48c>)
 8007c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2a:	0f9b      	lsrs	r3, r3, #30
 8007c2c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a5f      	ldr	r2, [pc, #380]	@ (8007dc0 <HAL_FDCAN_IRQHandler+0x494>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	f040 80aa 	bne.w	8007d9e <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0303 	and.w	r3, r3, #3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80a2 	beq.w	8007d9e <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c6e:	4013      	ands	r3, r2
 8007c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c86:	4013      	ands	r3, r2
 8007c88:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007c94:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007cac:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	6a3a      	ldr	r2, [r7, #32]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007cc4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d007      	beq.n	8007cf8 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cee:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007cf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f8e4 	bl	8007ec0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d04:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8e4 	bl	8007ed6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d019      	beq.n	8007d4c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d014      	beq.n	8007d4c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d28:	0c1b      	lsrs	r3, r3, #16
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d38:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2240      	movs	r2, #64	@ 0x40
 8007d40:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	6939      	ldr	r1, [r7, #16]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f8d0 	bl	8007eec <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d58:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007d5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8d1 	bl	8007f04 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	6a3a      	ldr	r2, [r7, #32]
 8007d6e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00b      	beq.n	8007d9e <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f874 	bl	8007e96 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007dae:	bf00      	nop
 8007db0:	3758      	adds	r7, #88	@ 0x58
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	4000a800 	.word	0x4000a800
 8007dbc:	3fcfffff 	.word	0x3fcfffff
 8007dc0:	4000a000 	.word	0x4000a000

08007dc4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
	...

08007f1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007f32:	4ba7      	ldr	r3, [pc, #668]	@ (80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	0091      	lsls	r1, r2, #2
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f4c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f54:	041a      	lsls	r2, r3, #16
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4413      	add	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f72:	4b97      	ldr	r3, [pc, #604]	@ (80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	0091      	lsls	r1, r2, #2
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f8c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f94:	041a      	lsls	r2, r3, #16
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007fb4:	4b86      	ldr	r3, [pc, #536]	@ (80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	0091      	lsls	r1, r2, #2
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fce:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd6:	041a      	lsls	r2, r3, #16
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007ffc:	4b74      	ldr	r3, [pc, #464]	@ (80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	0091      	lsls	r1, r2, #2
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6812      	ldr	r2, [r2, #0]
 8008008:	430b      	orrs	r3, r1
 800800a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008016:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800801e:	041a      	lsls	r2, r3, #16
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008032:	fb02 f303 	mul.w	r3, r2, r3
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4413      	add	r3, r2
 800803a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008044:	4b62      	ldr	r3, [pc, #392]	@ (80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008046:	4013      	ands	r3, r2
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	0091      	lsls	r1, r2, #2
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	430b      	orrs	r3, r1
 8008052:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800805e:	fb02 f303 	mul.w	r3, r2, r3
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	4413      	add	r3, r2
 8008066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008070:	4b57      	ldr	r3, [pc, #348]	@ (80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008072:	4013      	ands	r3, r2
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	0091      	lsls	r1, r2, #2
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	430b      	orrs	r3, r1
 800807e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800808a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008092:	041a      	lsls	r2, r3, #16
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	4413      	add	r3, r2
 80080a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80080b2:	4b47      	ldr	r3, [pc, #284]	@ (80081d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	0091      	lsls	r1, r2, #2
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	430b      	orrs	r3, r1
 80080c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080cc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080d4:	041a      	lsls	r2, r3, #16
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080e8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f0:	061a      	lsls	r2, r3, #24
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008100:	4b34      	ldr	r3, [pc, #208]	@ (80081d4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008102:	4413      	add	r3, r2
 8008104:	009a      	lsls	r2, r3, #2
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	441a      	add	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	441a      	add	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008136:	fb01 f303 	mul.w	r3, r1, r3
 800813a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800813c:	441a      	add	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008154:	441a      	add	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008166:	fb01 f303 	mul.w	r3, r1, r3
 800816a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800816c:	441a      	add	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	441a      	add	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008196:	fb01 f303 	mul.w	r3, r1, r3
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80081b2:	fb01 f303 	mul.w	r3, r1, r3
 80081b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80081b8:	441a      	add	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c6:	4a04      	ldr	r2, [pc, #16]	@ (80081d8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d915      	bls.n	80081f8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80081cc:	e006      	b.n	80081dc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80081ce:	bf00      	nop
 80081d0:	ffff0003 	.word	0xffff0003
 80081d4:	10002b00 	.word	0x10002b00
 80081d8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081e2:	f043 0220 	orr.w	r2, r3, #32
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2203      	movs	r2, #3
 80081f0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e010      	b.n	800821a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	e005      	b.n	800820c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3304      	adds	r3, #4
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	429a      	cmp	r2, r3
 8008216:	d3f3      	bcc.n	8008200 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008228:	b480      	push	{r7}
 800822a:	b089      	sub	sp, #36	@ 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008246:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800824e:	4313      	orrs	r3, r2
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	e00a      	b.n	800826a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800825c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008262:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008264:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008268:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008274:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800827a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008280:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008288:	4313      	orrs	r3, r2
 800828a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	fb01 f303 	mul.w	r3, r1, r3
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	3304      	adds	r3, #4
 80082ac:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	3304      	adds	r3, #4
 80082b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80082ba:	2300      	movs	r3, #0
 80082bc:	617b      	str	r3, [r7, #20]
 80082be:	e020      	b.n	8008302 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	3303      	adds	r3, #3
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4413      	add	r3, r2
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	3302      	adds	r3, #2
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	440b      	add	r3, r1
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082d8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	3301      	adds	r3, #1
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	440b      	add	r3, r1
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80082e6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	440a      	add	r2, r1
 80082ee:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80082f0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	3304      	adds	r3, #4
 80082fa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	3304      	adds	r3, #4
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	4a06      	ldr	r2, [pc, #24]	@ (8008320 <FDCAN_CopyMessageToRAM+0xf8>)
 8008308:	5cd3      	ldrb	r3, [r2, r3]
 800830a:	461a      	mov	r2, r3
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	4293      	cmp	r3, r2
 8008310:	d3d6      	bcc.n	80082c0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	3724      	adds	r7, #36	@ 0x24
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	08012a68 	.word	0x08012a68

08008324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008324:	b480      	push	{r7}
 8008326:	b089      	sub	sp, #36	@ 0x24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800832e:	2300      	movs	r3, #0
 8008330:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008332:	4b86      	ldr	r3, [pc, #536]	@ (800854c <HAL_GPIO_Init+0x228>)
 8008334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008336:	e18c      	b.n	8008652 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	2101      	movs	r1, #1
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	fa01 f303 	lsl.w	r3, r1, r3
 8008344:	4013      	ands	r3, r2
 8008346:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 817e 	beq.w	800864c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	2b01      	cmp	r3, #1
 800835a:	d005      	beq.n	8008368 <HAL_GPIO_Init+0x44>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f003 0303 	and.w	r3, r3, #3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d130      	bne.n	80083ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	2203      	movs	r2, #3
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	43db      	mvns	r3, r3
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	4013      	ands	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	4313      	orrs	r3, r2
 8008390:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800839e:	2201      	movs	r2, #1
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	fa02 f303 	lsl.w	r3, r2, r3
 80083a6:	43db      	mvns	r3, r3
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	4013      	ands	r3, r2
 80083ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	091b      	lsrs	r3, r3, #4
 80083b4:	f003 0201 	and.w	r2, r3, #1
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	fa02 f303 	lsl.w	r3, r2, r3
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d017      	beq.n	8008406 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	2203      	movs	r2, #3
 80083e2:	fa02 f303 	lsl.w	r3, r2, r3
 80083e6:	43db      	mvns	r3, r3
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	4013      	ands	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d123      	bne.n	800845a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	08da      	lsrs	r2, r3, #3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3208      	adds	r2, #8
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	220f      	movs	r2, #15
 800842a:	fa02 f303 	lsl.w	r3, r2, r3
 800842e:	43db      	mvns	r3, r3
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	4013      	ands	r3, r2
 8008434:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	fa02 f303 	lsl.w	r3, r2, r3
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	4313      	orrs	r3, r2
 800844a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	08da      	lsrs	r2, r3, #3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3208      	adds	r2, #8
 8008454:	69b9      	ldr	r1, [r7, #24]
 8008456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	2203      	movs	r2, #3
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	43db      	mvns	r3, r3
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	4013      	ands	r3, r2
 8008470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f003 0203 	and.w	r2, r3, #3
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	4313      	orrs	r3, r2
 8008486:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 80d8 	beq.w	800864c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800849c:	4b2c      	ldr	r3, [pc, #176]	@ (8008550 <HAL_GPIO_Init+0x22c>)
 800849e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084a2:	4a2b      	ldr	r2, [pc, #172]	@ (8008550 <HAL_GPIO_Init+0x22c>)
 80084a4:	f043 0302 	orr.w	r3, r3, #2
 80084a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80084ac:	4b28      	ldr	r3, [pc, #160]	@ (8008550 <HAL_GPIO_Init+0x22c>)
 80084ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084ba:	4a26      	ldr	r2, [pc, #152]	@ (8008554 <HAL_GPIO_Init+0x230>)
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	089b      	lsrs	r3, r3, #2
 80084c0:	3302      	adds	r3, #2
 80084c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	220f      	movs	r2, #15
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	43db      	mvns	r3, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	4013      	ands	r3, r2
 80084dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008558 <HAL_GPIO_Init+0x234>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d04a      	beq.n	800857c <HAL_GPIO_Init+0x258>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1c      	ldr	r2, [pc, #112]	@ (800855c <HAL_GPIO_Init+0x238>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d02b      	beq.n	8008546 <HAL_GPIO_Init+0x222>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008560 <HAL_GPIO_Init+0x23c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d025      	beq.n	8008542 <HAL_GPIO_Init+0x21e>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008564 <HAL_GPIO_Init+0x240>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d01f      	beq.n	800853e <HAL_GPIO_Init+0x21a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a19      	ldr	r2, [pc, #100]	@ (8008568 <HAL_GPIO_Init+0x244>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d019      	beq.n	800853a <HAL_GPIO_Init+0x216>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a18      	ldr	r2, [pc, #96]	@ (800856c <HAL_GPIO_Init+0x248>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d013      	beq.n	8008536 <HAL_GPIO_Init+0x212>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a17      	ldr	r2, [pc, #92]	@ (8008570 <HAL_GPIO_Init+0x24c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00d      	beq.n	8008532 <HAL_GPIO_Init+0x20e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a16      	ldr	r2, [pc, #88]	@ (8008574 <HAL_GPIO_Init+0x250>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d007      	beq.n	800852e <HAL_GPIO_Init+0x20a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a15      	ldr	r2, [pc, #84]	@ (8008578 <HAL_GPIO_Init+0x254>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d101      	bne.n	800852a <HAL_GPIO_Init+0x206>
 8008526:	2309      	movs	r3, #9
 8008528:	e029      	b.n	800857e <HAL_GPIO_Init+0x25a>
 800852a:	230a      	movs	r3, #10
 800852c:	e027      	b.n	800857e <HAL_GPIO_Init+0x25a>
 800852e:	2307      	movs	r3, #7
 8008530:	e025      	b.n	800857e <HAL_GPIO_Init+0x25a>
 8008532:	2306      	movs	r3, #6
 8008534:	e023      	b.n	800857e <HAL_GPIO_Init+0x25a>
 8008536:	2305      	movs	r3, #5
 8008538:	e021      	b.n	800857e <HAL_GPIO_Init+0x25a>
 800853a:	2304      	movs	r3, #4
 800853c:	e01f      	b.n	800857e <HAL_GPIO_Init+0x25a>
 800853e:	2303      	movs	r3, #3
 8008540:	e01d      	b.n	800857e <HAL_GPIO_Init+0x25a>
 8008542:	2302      	movs	r3, #2
 8008544:	e01b      	b.n	800857e <HAL_GPIO_Init+0x25a>
 8008546:	2301      	movs	r3, #1
 8008548:	e019      	b.n	800857e <HAL_GPIO_Init+0x25a>
 800854a:	bf00      	nop
 800854c:	58000080 	.word	0x58000080
 8008550:	58024400 	.word	0x58024400
 8008554:	58000400 	.word	0x58000400
 8008558:	58020000 	.word	0x58020000
 800855c:	58020400 	.word	0x58020400
 8008560:	58020800 	.word	0x58020800
 8008564:	58020c00 	.word	0x58020c00
 8008568:	58021000 	.word	0x58021000
 800856c:	58021400 	.word	0x58021400
 8008570:	58021800 	.word	0x58021800
 8008574:	58021c00 	.word	0x58021c00
 8008578:	58022400 	.word	0x58022400
 800857c:	2300      	movs	r3, #0
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	f002 0203 	and.w	r2, r2, #3
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	4093      	lsls	r3, r2
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	4313      	orrs	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800858e:	4938      	ldr	r1, [pc, #224]	@ (8008670 <HAL_GPIO_Init+0x34c>)
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	089b      	lsrs	r3, r3, #2
 8008594:	3302      	adds	r3, #2
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800859c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	43db      	mvns	r3, r3
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	4013      	ands	r3, r2
 80085ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80085c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80085ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	43db      	mvns	r3, r3
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	4013      	ands	r3, r2
 80085da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80085f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	43db      	mvns	r3, r3
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	4013      	ands	r3, r2
 8008606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	43db      	mvns	r3, r3
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	4013      	ands	r3, r2
 8008630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4313      	orrs	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	3301      	adds	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	fa22 f303 	lsr.w	r3, r2, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	f47f ae6b 	bne.w	8008338 <HAL_GPIO_Init+0x14>
  }
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	3724      	adds	r7, #36	@ 0x24
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	58000400 	.word	0x58000400

08008674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	887b      	ldrh	r3, [r7, #2]
 8008686:	4013      	ands	r3, r2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800868c:	2301      	movs	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]
 8008690:	e001      	b.n	8008696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	807b      	strh	r3, [r7, #2]
 80086b0:	4613      	mov	r3, r2
 80086b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086b4:	787b      	ldrb	r3, [r7, #1]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086ba:	887a      	ldrh	r2, [r7, #2]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80086c0:	e003      	b.n	80086ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80086c2:	887b      	ldrh	r3, [r7, #2]
 80086c4:	041a      	lsls	r2, r3, #16
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	619a      	str	r2, [r3, #24]
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
	...

080086d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086e0:	4b19      	ldr	r3, [pc, #100]	@ (8008748 <HAL_PWREx_ConfigSupply+0x70>)
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d00a      	beq.n	8008702 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086ec:	4b16      	ldr	r3, [pc, #88]	@ (8008748 <HAL_PWREx_ConfigSupply+0x70>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f003 0307 	and.w	r3, r3, #7
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d001      	beq.n	80086fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e01f      	b.n	800873e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	e01d      	b.n	800873e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008702:	4b11      	ldr	r3, [pc, #68]	@ (8008748 <HAL_PWREx_ConfigSupply+0x70>)
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f023 0207 	bic.w	r2, r3, #7
 800870a:	490f      	ldr	r1, [pc, #60]	@ (8008748 <HAL_PWREx_ConfigSupply+0x70>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4313      	orrs	r3, r2
 8008710:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008712:	f7fa f949 	bl	80029a8 <HAL_GetTick>
 8008716:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008718:	e009      	b.n	800872e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800871a:	f7fa f945 	bl	80029a8 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008728:	d901      	bls.n	800872e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e007      	b.n	800873e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800872e:	4b06      	ldr	r3, [pc, #24]	@ (8008748 <HAL_PWREx_ConfigSupply+0x70>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800873a:	d1ee      	bne.n	800871a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	58024800 	.word	0x58024800

0800874c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08c      	sub	sp, #48	@ 0x30
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e3c8      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 8087 	beq.w	800887a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800876c:	4b88      	ldr	r3, [pc, #544]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008776:	4b86      	ldr	r3, [pc, #536]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877e:	2b10      	cmp	r3, #16
 8008780:	d007      	beq.n	8008792 <HAL_RCC_OscConfig+0x46>
 8008782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008784:	2b18      	cmp	r3, #24
 8008786:	d110      	bne.n	80087aa <HAL_RCC_OscConfig+0x5e>
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d10b      	bne.n	80087aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008792:	4b7f      	ldr	r3, [pc, #508]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d06c      	beq.n	8008878 <HAL_RCC_OscConfig+0x12c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d168      	bne.n	8008878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e3a2      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b2:	d106      	bne.n	80087c2 <HAL_RCC_OscConfig+0x76>
 80087b4:	4b76      	ldr	r3, [pc, #472]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a75      	ldr	r2, [pc, #468]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	e02e      	b.n	8008820 <HAL_RCC_OscConfig+0xd4>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10c      	bne.n	80087e4 <HAL_RCC_OscConfig+0x98>
 80087ca:	4b71      	ldr	r3, [pc, #452]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a70      	ldr	r2, [pc, #448]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	4b6e      	ldr	r3, [pc, #440]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a6d      	ldr	r2, [pc, #436]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	e01d      	b.n	8008820 <HAL_RCC_OscConfig+0xd4>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087ec:	d10c      	bne.n	8008808 <HAL_RCC_OscConfig+0xbc>
 80087ee:	4b68      	ldr	r3, [pc, #416]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a67      	ldr	r2, [pc, #412]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	4b65      	ldr	r3, [pc, #404]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a64      	ldr	r2, [pc, #400]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	e00b      	b.n	8008820 <HAL_RCC_OscConfig+0xd4>
 8008808:	4b61      	ldr	r3, [pc, #388]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a60      	ldr	r2, [pc, #384]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800880e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	4b5e      	ldr	r3, [pc, #376]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a5d      	ldr	r2, [pc, #372]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800881a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800881e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d013      	beq.n	8008850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7fa f8be 	bl	80029a8 <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008830:	f7fa f8ba 	bl	80029a8 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b64      	cmp	r3, #100	@ 0x64
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e356      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008842:	4b53      	ldr	r3, [pc, #332]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0f0      	beq.n	8008830 <HAL_RCC_OscConfig+0xe4>
 800884e:	e014      	b.n	800887a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fa f8aa 	bl	80029a8 <HAL_GetTick>
 8008854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008858:	f7fa f8a6 	bl	80029a8 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b64      	cmp	r3, #100	@ 0x64
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e342      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800886a:	4b49      	ldr	r3, [pc, #292]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1f0      	bne.n	8008858 <HAL_RCC_OscConfig+0x10c>
 8008876:	e000      	b.n	800887a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 808c 	beq.w	80089a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008888:	4b41      	ldr	r3, [pc, #260]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008890:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008892:	4b3f      	ldr	r3, [pc, #252]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008896:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <HAL_RCC_OscConfig+0x162>
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	2b18      	cmp	r3, #24
 80088a2:	d137      	bne.n	8008914 <HAL_RCC_OscConfig+0x1c8>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d132      	bne.n	8008914 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088ae:	4b38      	ldr	r3, [pc, #224]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <HAL_RCC_OscConfig+0x17a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e314      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088c6:	4b32      	ldr	r3, [pc, #200]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f023 0219 	bic.w	r2, r3, #25
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	492f      	ldr	r1, [pc, #188]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d8:	f7fa f866 	bl	80029a8 <HAL_GetTick>
 80088dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088de:	e008      	b.n	80088f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088e0:	f7fa f862 	bl	80029a8 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e2fe      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088f2:	4b27      	ldr	r3, [pc, #156]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f0      	beq.n	80088e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088fe:	4b24      	ldr	r3, [pc, #144]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	061b      	lsls	r3, r3, #24
 800890c:	4920      	ldr	r1, [pc, #128]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800890e:	4313      	orrs	r3, r2
 8008910:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008912:	e045      	b.n	80089a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d026      	beq.n	800896a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800891c:	4b1c      	ldr	r3, [pc, #112]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f023 0219 	bic.w	r2, r3, #25
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	4919      	ldr	r1, [pc, #100]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800892a:	4313      	orrs	r3, r2
 800892c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800892e:	f7fa f83b 	bl	80029a8 <HAL_GetTick>
 8008932:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008934:	e008      	b.n	8008948 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008936:	f7fa f837 	bl	80029a8 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e2d3      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008948:	4b11      	ldr	r3, [pc, #68]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0f0      	beq.n	8008936 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008954:	4b0e      	ldr	r3, [pc, #56]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	061b      	lsls	r3, r3, #24
 8008962:	490b      	ldr	r1, [pc, #44]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008964:	4313      	orrs	r3, r2
 8008966:	604b      	str	r3, [r1, #4]
 8008968:	e01a      	b.n	80089a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800896a:	4b09      	ldr	r3, [pc, #36]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a08      	ldr	r2, [pc, #32]	@ (8008990 <HAL_RCC_OscConfig+0x244>)
 8008970:	f023 0301 	bic.w	r3, r3, #1
 8008974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008976:	f7fa f817 	bl	80029a8 <HAL_GetTick>
 800897a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800897c:	e00a      	b.n	8008994 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800897e:	f7fa f813 	bl	80029a8 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d903      	bls.n	8008994 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e2af      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
 8008990:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008994:	4b96      	ldr	r3, [pc, #600]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1ee      	bne.n	800897e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d06a      	beq.n	8008a82 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089ac:	4b90      	ldr	r3, [pc, #576]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089b6:	4b8e      	ldr	r3, [pc, #568]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d007      	beq.n	80089d2 <HAL_RCC_OscConfig+0x286>
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b18      	cmp	r3, #24
 80089c6:	d11b      	bne.n	8008a00 <HAL_RCC_OscConfig+0x2b4>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d116      	bne.n	8008a00 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089d2:	4b87      	ldr	r3, [pc, #540]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <HAL_RCC_OscConfig+0x29e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	2b80      	cmp	r3, #128	@ 0x80
 80089e4:	d001      	beq.n	80089ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e282      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089ea:	4b81      	ldr	r3, [pc, #516]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	061b      	lsls	r3, r3, #24
 80089f8:	497d      	ldr	r1, [pc, #500]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089fe:	e040      	b.n	8008a82 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d023      	beq.n	8008a50 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a08:	4b79      	ldr	r3, [pc, #484]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a78      	ldr	r2, [pc, #480]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a14:	f7f9 ffc8 	bl	80029a8 <HAL_GetTick>
 8008a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a1a:	e008      	b.n	8008a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a1c:	f7f9 ffc4 	bl	80029a8 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e260      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a2e:	4b70      	ldr	r3, [pc, #448]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0f0      	beq.n	8008a1c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a3a:	4b6d      	ldr	r3, [pc, #436]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	061b      	lsls	r3, r3, #24
 8008a48:	4969      	ldr	r1, [pc, #420]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60cb      	str	r3, [r1, #12]
 8008a4e:	e018      	b.n	8008a82 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a50:	4b67      	ldr	r3, [pc, #412]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a66      	ldr	r2, [pc, #408]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5c:	f7f9 ffa4 	bl	80029a8 <HAL_GetTick>
 8008a60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a64:	f7f9 ffa0 	bl	80029a8 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e23c      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a76:	4b5e      	ldr	r3, [pc, #376]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f0      	bne.n	8008a64 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d036      	beq.n	8008afc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d019      	beq.n	8008aca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a96:	4b56      	ldr	r3, [pc, #344]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a9a:	4a55      	ldr	r2, [pc, #340]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008a9c:	f043 0301 	orr.w	r3, r3, #1
 8008aa0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa2:	f7f9 ff81 	bl	80029a8 <HAL_GetTick>
 8008aa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aaa:	f7f9 ff7d 	bl	80029a8 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e219      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008abc:	4b4c      	ldr	r3, [pc, #304]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0f0      	beq.n	8008aaa <HAL_RCC_OscConfig+0x35e>
 8008ac8:	e018      	b.n	8008afc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008aca:	4b49      	ldr	r3, [pc, #292]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ace:	4a48      	ldr	r2, [pc, #288]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008ad0:	f023 0301 	bic.w	r3, r3, #1
 8008ad4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad6:	f7f9 ff67 	bl	80029a8 <HAL_GetTick>
 8008ada:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008adc:	e008      	b.n	8008af0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ade:	f7f9 ff63 	bl	80029a8 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e1ff      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008af0:	4b3f      	ldr	r3, [pc, #252]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f0      	bne.n	8008ade <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d036      	beq.n	8008b76 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d019      	beq.n	8008b44 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b10:	4b37      	ldr	r3, [pc, #220]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a36      	ldr	r2, [pc, #216]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008b16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008b1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b1c:	f7f9 ff44 	bl	80029a8 <HAL_GetTick>
 8008b20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b24:	f7f9 ff40 	bl	80029a8 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e1dc      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b36:	4b2e      	ldr	r3, [pc, #184]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f0      	beq.n	8008b24 <HAL_RCC_OscConfig+0x3d8>
 8008b42:	e018      	b.n	8008b76 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b44:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a29      	ldr	r2, [pc, #164]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b50:	f7f9 ff2a 	bl	80029a8 <HAL_GetTick>
 8008b54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b58:	f7f9 ff26 	bl	80029a8 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e1c2      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b6a:	4b21      	ldr	r3, [pc, #132]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1f0      	bne.n	8008b58 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 8086 	beq.w	8008c90 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b84:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf4 <HAL_RCC_OscConfig+0x4a8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a1a      	ldr	r2, [pc, #104]	@ (8008bf4 <HAL_RCC_OscConfig+0x4a8>)
 8008b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b90:	f7f9 ff0a 	bl	80029a8 <HAL_GetTick>
 8008b94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b96:	e008      	b.n	8008baa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b98:	f7f9 ff06 	bl	80029a8 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b64      	cmp	r3, #100	@ 0x64
 8008ba4:	d901      	bls.n	8008baa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e1a2      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008baa:	4b12      	ldr	r3, [pc, #72]	@ (8008bf4 <HAL_RCC_OscConfig+0x4a8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0f0      	beq.n	8008b98 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d106      	bne.n	8008bcc <HAL_RCC_OscConfig+0x480>
 8008bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008bc4:	f043 0301 	orr.w	r3, r3, #1
 8008bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bca:	e032      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e6>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d111      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4ac>
 8008bd4:	4b06      	ldr	r3, [pc, #24]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd8:	4a05      	ldr	r2, [pc, #20]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008bda:	f023 0301 	bic.w	r3, r3, #1
 8008bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8008be0:	4b03      	ldr	r3, [pc, #12]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008be4:	4a02      	ldr	r2, [pc, #8]	@ (8008bf0 <HAL_RCC_OscConfig+0x4a4>)
 8008be6:	f023 0304 	bic.w	r3, r3, #4
 8008bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bec:	e021      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e6>
 8008bee:	bf00      	nop
 8008bf0:	58024400 	.word	0x58024400
 8008bf4:	58024800 	.word	0x58024800
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	2b05      	cmp	r3, #5
 8008bfe:	d10c      	bne.n	8008c1a <HAL_RCC_OscConfig+0x4ce>
 8008c00:	4b83      	ldr	r3, [pc, #524]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c04:	4a82      	ldr	r2, [pc, #520]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c06:	f043 0304 	orr.w	r3, r3, #4
 8008c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c0c:	4b80      	ldr	r3, [pc, #512]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c10:	4a7f      	ldr	r2, [pc, #508]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c12:	f043 0301 	orr.w	r3, r3, #1
 8008c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c18:	e00b      	b.n	8008c32 <HAL_RCC_OscConfig+0x4e6>
 8008c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c20:	f023 0301 	bic.w	r3, r3, #1
 8008c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c26:	4b7a      	ldr	r3, [pc, #488]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c2a:	4a79      	ldr	r2, [pc, #484]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c2c:	f023 0304 	bic.w	r3, r3, #4
 8008c30:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d015      	beq.n	8008c66 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c3a:	f7f9 feb5 	bl	80029a8 <HAL_GetTick>
 8008c3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c40:	e00a      	b.n	8008c58 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c42:	f7f9 feb1 	bl	80029a8 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d901      	bls.n	8008c58 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e14b      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c58:	4b6d      	ldr	r3, [pc, #436]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0ee      	beq.n	8008c42 <HAL_RCC_OscConfig+0x4f6>
 8008c64:	e014      	b.n	8008c90 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c66:	f7f9 fe9f 	bl	80029a8 <HAL_GetTick>
 8008c6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c6c:	e00a      	b.n	8008c84 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c6e:	f7f9 fe9b 	bl	80029a8 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d901      	bls.n	8008c84 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e135      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c84:	4b62      	ldr	r3, [pc, #392]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1ee      	bne.n	8008c6e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 812a 	beq.w	8008eee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ca2:	2b18      	cmp	r3, #24
 8008ca4:	f000 80ba 	beq.w	8008e1c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	f040 8095 	bne.w	8008ddc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cb2:	4b57      	ldr	r3, [pc, #348]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a56      	ldr	r2, [pc, #344]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008cb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cbe:	f7f9 fe73 	bl	80029a8 <HAL_GetTick>
 8008cc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cc4:	e008      	b.n	8008cd8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cc6:	f7f9 fe6f 	bl	80029a8 <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d901      	bls.n	8008cd8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e10b      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1f0      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008ce6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8008e14 <HAL_RCC_OscConfig+0x6c8>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008cf4:	0112      	lsls	r2, r2, #4
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	4945      	ldr	r1, [pc, #276]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	628b      	str	r3, [r1, #40]	@ 0x28
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d02:	3b01      	subs	r3, #1
 8008d04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	025b      	lsls	r3, r3, #9
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	431a      	orrs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	041b      	lsls	r3, r3, #16
 8008d1c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d26:	3b01      	subs	r3, #1
 8008d28:	061b      	lsls	r3, r3, #24
 8008d2a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d2e:	4938      	ldr	r1, [pc, #224]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d34:	4b36      	ldr	r3, [pc, #216]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	4a35      	ldr	r2, [pc, #212]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d3a:	f023 0301 	bic.w	r3, r3, #1
 8008d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d40:	4b33      	ldr	r3, [pc, #204]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d44:	4b34      	ldr	r3, [pc, #208]	@ (8008e18 <HAL_RCC_OscConfig+0x6cc>)
 8008d46:	4013      	ands	r3, r2
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d4c:	00d2      	lsls	r2, r2, #3
 8008d4e:	4930      	ldr	r1, [pc, #192]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d54:	4b2e      	ldr	r3, [pc, #184]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d58:	f023 020c 	bic.w	r2, r3, #12
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d60:	492b      	ldr	r1, [pc, #172]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d66:	4b2a      	ldr	r3, [pc, #168]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6a:	f023 0202 	bic.w	r2, r3, #2
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d72:	4927      	ldr	r1, [pc, #156]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d74:	4313      	orrs	r3, r2
 8008d76:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d78:	4b25      	ldr	r3, [pc, #148]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7c:	4a24      	ldr	r2, [pc, #144]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d84:	4b22      	ldr	r3, [pc, #136]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	4a21      	ldr	r2, [pc, #132]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d90:	4b1f      	ldr	r3, [pc, #124]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	4a1e      	ldr	r2, [pc, #120]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008da2:	f043 0301 	orr.w	r3, r3, #1
 8008da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008da8:	4b19      	ldr	r3, [pc, #100]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a18      	ldr	r2, [pc, #96]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db4:	f7f9 fdf8 	bl	80029a8 <HAL_GetTick>
 8008db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dbc:	f7f9 fdf4 	bl	80029a8 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e090      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dce:	4b10      	ldr	r3, [pc, #64]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0f0      	beq.n	8008dbc <HAL_RCC_OscConfig+0x670>
 8008dda:	e088      	b.n	8008eee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0b      	ldr	r2, [pc, #44]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7f9 fdde 	bl	80029a8 <HAL_GetTick>
 8008dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008df0:	f7f9 fdda 	bl	80029a8 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e076      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e02:	4b03      	ldr	r3, [pc, #12]	@ (8008e10 <HAL_RCC_OscConfig+0x6c4>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1f0      	bne.n	8008df0 <HAL_RCC_OscConfig+0x6a4>
 8008e0e:	e06e      	b.n	8008eee <HAL_RCC_OscConfig+0x7a2>
 8008e10:	58024400 	.word	0x58024400
 8008e14:	fffffc0c 	.word	0xfffffc0c
 8008e18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e1c:	4b36      	ldr	r3, [pc, #216]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e22:	4b35      	ldr	r3, [pc, #212]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d031      	beq.n	8008e94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f003 0203 	and.w	r2, r3, #3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d12a      	bne.n	8008e94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	091b      	lsrs	r3, r3, #4
 8008e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d122      	bne.n	8008e94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d11a      	bne.n	8008e94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	0a5b      	lsrs	r3, r3, #9
 8008e62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d111      	bne.n	8008e94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	0c1b      	lsrs	r3, r3, #16
 8008e74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d108      	bne.n	8008e94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	0e1b      	lsrs	r3, r3, #24
 8008e86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d001      	beq.n	8008e98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e02b      	b.n	8008ef0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e98:	4b17      	ldr	r3, [pc, #92]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9c:	08db      	lsrs	r3, r3, #3
 8008e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ea2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d01f      	beq.n	8008eee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008eae:	4b12      	ldr	r3, [pc, #72]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb2:	4a11      	ldr	r2, [pc, #68]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008eba:	f7f9 fd75 	bl	80029a8 <HAL_GetTick>
 8008ebe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008ec0:	bf00      	nop
 8008ec2:	f7f9 fd71 	bl	80029a8 <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d0f9      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ece:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <HAL_RCC_OscConfig+0x7b0>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008eda:	00d2      	lsls	r2, r2, #3
 8008edc:	4906      	ldr	r1, [pc, #24]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008ee2:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee6:	4a04      	ldr	r2, [pc, #16]	@ (8008ef8 <HAL_RCC_OscConfig+0x7ac>)
 8008ee8:	f043 0301 	orr.w	r3, r3, #1
 8008eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3730      	adds	r7, #48	@ 0x30
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	ffff0007 	.word	0xffff0007

08008f00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e19c      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f14:	4b8a      	ldr	r3, [pc, #552]	@ (8009140 <HAL_RCC_ClockConfig+0x240>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d910      	bls.n	8008f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f22:	4b87      	ldr	r3, [pc, #540]	@ (8009140 <HAL_RCC_ClockConfig+0x240>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f023 020f 	bic.w	r2, r3, #15
 8008f2a:	4985      	ldr	r1, [pc, #532]	@ (8009140 <HAL_RCC_ClockConfig+0x240>)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f32:	4b83      	ldr	r3, [pc, #524]	@ (8009140 <HAL_RCC_ClockConfig+0x240>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d001      	beq.n	8008f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e184      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d010      	beq.n	8008f72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	4b7b      	ldr	r3, [pc, #492]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d908      	bls.n	8008f72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f60:	4b78      	ldr	r3, [pc, #480]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	4975      	ldr	r1, [pc, #468]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0308 	and.w	r3, r3, #8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d010      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	695a      	ldr	r2, [r3, #20]
 8008f82:	4b70      	ldr	r3, [pc, #448]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d908      	bls.n	8008fa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	496a      	ldr	r1, [pc, #424]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d010      	beq.n	8008fce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699a      	ldr	r2, [r3, #24]
 8008fb0:	4b64      	ldr	r3, [pc, #400]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d908      	bls.n	8008fce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fbc:	4b61      	ldr	r3, [pc, #388]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	495e      	ldr	r1, [pc, #376]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d010      	beq.n	8008ffc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69da      	ldr	r2, [r3, #28]
 8008fde:	4b59      	ldr	r3, [pc, #356]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d908      	bls.n	8008ffc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fea:	4b56      	ldr	r3, [pc, #344]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	4953      	ldr	r1, [pc, #332]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d010      	beq.n	800902a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	4b4d      	ldr	r3, [pc, #308]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f003 030f 	and.w	r3, r3, #15
 8009014:	429a      	cmp	r2, r3
 8009016:	d908      	bls.n	800902a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009018:	4b4a      	ldr	r3, [pc, #296]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f023 020f 	bic.w	r2, r3, #15
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4947      	ldr	r1, [pc, #284]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009026:	4313      	orrs	r3, r2
 8009028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d055      	beq.n	80090e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009036:	4b43      	ldr	r3, [pc, #268]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	4940      	ldr	r1, [pc, #256]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009044:	4313      	orrs	r3, r2
 8009046:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d107      	bne.n	8009060 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009050:	4b3c      	ldr	r3, [pc, #240]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d121      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e0f6      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	2b03      	cmp	r3, #3
 8009066:	d107      	bne.n	8009078 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009068:	4b36      	ldr	r3, [pc, #216]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d115      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e0ea      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d107      	bne.n	8009090 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009080:	4b30      	ldr	r3, [pc, #192]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	d109      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e0de      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009090:	4b2c      	ldr	r3, [pc, #176]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e0d6      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090a0:	4b28      	ldr	r3, [pc, #160]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f023 0207 	bic.w	r2, r3, #7
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4925      	ldr	r1, [pc, #148]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090b2:	f7f9 fc79 	bl	80029a8 <HAL_GetTick>
 80090b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b8:	e00a      	b.n	80090d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ba:	f7f9 fc75 	bl	80029a8 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d901      	bls.n	80090d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e0be      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	00db      	lsls	r3, r3, #3
 80090de:	429a      	cmp	r2, r3
 80090e0:	d1eb      	bne.n	80090ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d010      	beq.n	8009110 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	4b14      	ldr	r3, [pc, #80]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	f003 030f 	and.w	r3, r3, #15
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d208      	bcs.n	8009110 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090fe:	4b11      	ldr	r3, [pc, #68]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f023 020f 	bic.w	r2, r3, #15
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	490e      	ldr	r1, [pc, #56]	@ (8009144 <HAL_RCC_ClockConfig+0x244>)
 800910c:	4313      	orrs	r3, r2
 800910e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009110:	4b0b      	ldr	r3, [pc, #44]	@ (8009140 <HAL_RCC_ClockConfig+0x240>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d214      	bcs.n	8009148 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800911e:	4b08      	ldr	r3, [pc, #32]	@ (8009140 <HAL_RCC_ClockConfig+0x240>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f023 020f 	bic.w	r2, r3, #15
 8009126:	4906      	ldr	r1, [pc, #24]	@ (8009140 <HAL_RCC_ClockConfig+0x240>)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	4313      	orrs	r3, r2
 800912c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800912e:	4b04      	ldr	r3, [pc, #16]	@ (8009140 <HAL_RCC_ClockConfig+0x240>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d005      	beq.n	8009148 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e086      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
 8009140:	52002000 	.word	0x52002000
 8009144:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d010      	beq.n	8009176 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	4b3f      	ldr	r3, [pc, #252]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009160:	429a      	cmp	r2, r3
 8009162:	d208      	bcs.n	8009176 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009164:	4b3c      	ldr	r3, [pc, #240]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	4939      	ldr	r1, [pc, #228]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009172:	4313      	orrs	r3, r2
 8009174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d010      	beq.n	80091a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695a      	ldr	r2, [r3, #20]
 8009186:	4b34      	ldr	r3, [pc, #208]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800918e:	429a      	cmp	r2, r3
 8009190:	d208      	bcs.n	80091a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009192:	4b31      	ldr	r3, [pc, #196]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	492e      	ldr	r1, [pc, #184]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d010      	beq.n	80091d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	699a      	ldr	r2, [r3, #24]
 80091b4:	4b28      	ldr	r3, [pc, #160]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80091bc:	429a      	cmp	r2, r3
 80091be:	d208      	bcs.n	80091d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091c0:	4b25      	ldr	r3, [pc, #148]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	4922      	ldr	r1, [pc, #136]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d010      	beq.n	8009200 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	69da      	ldr	r2, [r3, #28]
 80091e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d208      	bcs.n	8009200 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	4917      	ldr	r1, [pc, #92]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009200:	f000 f834 	bl	800926c <HAL_RCC_GetSysClockFreq>
 8009204:	4602      	mov	r2, r0
 8009206:	4b14      	ldr	r3, [pc, #80]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	4912      	ldr	r1, [pc, #72]	@ (800925c <HAL_RCC_ClockConfig+0x35c>)
 8009212:	5ccb      	ldrb	r3, [r1, r3]
 8009214:	f003 031f 	and.w	r3, r3, #31
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
 800921c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800921e:	4b0e      	ldr	r3, [pc, #56]	@ (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	4a0d      	ldr	r2, [pc, #52]	@ (800925c <HAL_RCC_ClockConfig+0x35c>)
 8009228:	5cd3      	ldrb	r3, [r2, r3]
 800922a:	f003 031f 	and.w	r3, r3, #31
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	fa22 f303 	lsr.w	r3, r2, r3
 8009234:	4a0a      	ldr	r2, [pc, #40]	@ (8009260 <HAL_RCC_ClockConfig+0x360>)
 8009236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009238:	4a0a      	ldr	r2, [pc, #40]	@ (8009264 <HAL_RCC_ClockConfig+0x364>)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800923e:	4b0a      	ldr	r3, [pc, #40]	@ (8009268 <HAL_RCC_ClockConfig+0x368>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4618      	mov	r0, r3
 8009244:	f7f9 fb66 	bl	8002914 <HAL_InitTick>
 8009248:	4603      	mov	r3, r0
 800924a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	58024400 	.word	0x58024400
 800925c:	08012a50 	.word	0x08012a50
 8009260:	24000010 	.word	0x24000010
 8009264:	2400000c 	.word	0x2400000c
 8009268:	24000014 	.word	0x24000014

0800926c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800926c:	b480      	push	{r7}
 800926e:	b089      	sub	sp, #36	@ 0x24
 8009270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009272:	4bb3      	ldr	r3, [pc, #716]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800927a:	2b18      	cmp	r3, #24
 800927c:	f200 8155 	bhi.w	800952a <HAL_RCC_GetSysClockFreq+0x2be>
 8009280:	a201      	add	r2, pc, #4	@ (adr r2, 8009288 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	080092ed 	.word	0x080092ed
 800928c:	0800952b 	.word	0x0800952b
 8009290:	0800952b 	.word	0x0800952b
 8009294:	0800952b 	.word	0x0800952b
 8009298:	0800952b 	.word	0x0800952b
 800929c:	0800952b 	.word	0x0800952b
 80092a0:	0800952b 	.word	0x0800952b
 80092a4:	0800952b 	.word	0x0800952b
 80092a8:	08009313 	.word	0x08009313
 80092ac:	0800952b 	.word	0x0800952b
 80092b0:	0800952b 	.word	0x0800952b
 80092b4:	0800952b 	.word	0x0800952b
 80092b8:	0800952b 	.word	0x0800952b
 80092bc:	0800952b 	.word	0x0800952b
 80092c0:	0800952b 	.word	0x0800952b
 80092c4:	0800952b 	.word	0x0800952b
 80092c8:	08009319 	.word	0x08009319
 80092cc:	0800952b 	.word	0x0800952b
 80092d0:	0800952b 	.word	0x0800952b
 80092d4:	0800952b 	.word	0x0800952b
 80092d8:	0800952b 	.word	0x0800952b
 80092dc:	0800952b 	.word	0x0800952b
 80092e0:	0800952b 	.word	0x0800952b
 80092e4:	0800952b 	.word	0x0800952b
 80092e8:	0800931f 	.word	0x0800931f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ec:	4b94      	ldr	r3, [pc, #592]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d009      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092f8:	4b91      	ldr	r3, [pc, #580]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	08db      	lsrs	r3, r3, #3
 80092fe:	f003 0303 	and.w	r3, r3, #3
 8009302:	4a90      	ldr	r2, [pc, #576]	@ (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800930a:	e111      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800930c:	4b8d      	ldr	r3, [pc, #564]	@ (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800930e:	61bb      	str	r3, [r7, #24]
      break;
 8009310:	e10e      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009312:	4b8d      	ldr	r3, [pc, #564]	@ (8009548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009314:	61bb      	str	r3, [r7, #24]
      break;
 8009316:	e10b      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009318:	4b8c      	ldr	r3, [pc, #560]	@ (800954c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800931a:	61bb      	str	r3, [r7, #24]
      break;
 800931c:	e108      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800931e:	4b88      	ldr	r3, [pc, #544]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009322:	f003 0303 	and.w	r3, r3, #3
 8009326:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009328:	4b85      	ldr	r3, [pc, #532]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932c:	091b      	lsrs	r3, r3, #4
 800932e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009332:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009334:	4b82      	ldr	r3, [pc, #520]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800933e:	4b80      	ldr	r3, [pc, #512]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009342:	08db      	lsrs	r3, r3, #3
 8009344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	fb02 f303 	mul.w	r3, r2, r3
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009356:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80e1 	beq.w	8009524 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b02      	cmp	r3, #2
 8009366:	f000 8083 	beq.w	8009470 <HAL_RCC_GetSysClockFreq+0x204>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b02      	cmp	r3, #2
 800936e:	f200 80a1 	bhi.w	80094b4 <HAL_RCC_GetSysClockFreq+0x248>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <HAL_RCC_GetSysClockFreq+0x114>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d056      	beq.n	800942c <HAL_RCC_GetSysClockFreq+0x1c0>
 800937e:	e099      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009380:	4b6f      	ldr	r3, [pc, #444]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d02d      	beq.n	80093e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800938c:	4b6c      	ldr	r3, [pc, #432]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	08db      	lsrs	r3, r3, #3
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	4a6b      	ldr	r2, [pc, #428]	@ (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b6:	4b62      	ldr	r3, [pc, #392]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80093e6:	e087      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009554 <HAL_RCC_GetSysClockFreq+0x2e8>
 80093f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fa:	4b51      	ldr	r3, [pc, #324]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940a:	ed97 6a02 	vldr	s12, [r7, #8]
 800940e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800942a:	e065      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009436:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800943a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943e:	4b40      	ldr	r3, [pc, #256]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009452:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800946e:	e043      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800955c <HAL_RCC_GetSysClockFreq+0x2f0>
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b2f      	ldr	r3, [pc, #188]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009492:	ed97 6a02 	vldr	s12, [r7, #8]
 8009496:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094b2:	e021      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009558 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80094f8:	4b11      	ldr	r3, [pc, #68]	@ (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094fc:	0a5b      	lsrs	r3, r3, #9
 80094fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009502:	3301      	adds	r3, #1
 8009504:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	ee07 3a90 	vmov	s15, r3
 800950c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009510:	edd7 6a07 	vldr	s13, [r7, #28]
 8009514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951c:	ee17 3a90 	vmov	r3, s15
 8009520:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009522:	e005      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	61bb      	str	r3, [r7, #24]
      break;
 8009528:	e002      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800952a:	4b07      	ldr	r3, [pc, #28]	@ (8009548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800952c:	61bb      	str	r3, [r7, #24]
      break;
 800952e:	bf00      	nop
  }

  return sysclockfreq;
 8009530:	69bb      	ldr	r3, [r7, #24]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3724      	adds	r7, #36	@ 0x24
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	58024400 	.word	0x58024400
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	016e3600 	.word	0x016e3600
 8009550:	46000000 	.word	0x46000000
 8009554:	4c742400 	.word	0x4c742400
 8009558:	4a742400 	.word	0x4a742400
 800955c:	4bb71b00 	.word	0x4bb71b00

08009560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009566:	f7ff fe81 	bl	800926c <HAL_RCC_GetSysClockFreq>
 800956a:	4602      	mov	r2, r0
 800956c:	4b10      	ldr	r3, [pc, #64]	@ (80095b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	0a1b      	lsrs	r3, r3, #8
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	490f      	ldr	r1, [pc, #60]	@ (80095b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009578:	5ccb      	ldrb	r3, [r1, r3]
 800957a:	f003 031f 	and.w	r3, r3, #31
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009584:	4b0a      	ldr	r3, [pc, #40]	@ (80095b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	4a09      	ldr	r2, [pc, #36]	@ (80095b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800958e:	5cd3      	ldrb	r3, [r2, r3]
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	fa22 f303 	lsr.w	r3, r2, r3
 800959a:	4a07      	ldr	r2, [pc, #28]	@ (80095b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800959c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800959e:	4a07      	ldr	r2, [pc, #28]	@ (80095bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095a4:	4b04      	ldr	r3, [pc, #16]	@ (80095b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	58024400 	.word	0x58024400
 80095b4:	08012a50 	.word	0x08012a50
 80095b8:	24000010 	.word	0x24000010
 80095bc:	2400000c 	.word	0x2400000c

080095c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095c4:	f7ff ffcc 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 80095c8:	4602      	mov	r2, r0
 80095ca:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	091b      	lsrs	r3, r3, #4
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	4904      	ldr	r1, [pc, #16]	@ (80095e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095d6:	5ccb      	ldrb	r3, [r1, r3]
 80095d8:	f003 031f 	and.w	r3, r3, #31
 80095dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	58024400 	.word	0x58024400
 80095e8:	08012a50 	.word	0x08012a50

080095ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095f0:	f7ff ffb6 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 80095f4:	4602      	mov	r2, r0
 80095f6:	4b06      	ldr	r3, [pc, #24]	@ (8009610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	0a1b      	lsrs	r3, r3, #8
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	4904      	ldr	r1, [pc, #16]	@ (8009614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009602:	5ccb      	ldrb	r3, [r1, r3]
 8009604:	f003 031f 	and.w	r3, r3, #31
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800960c:	4618      	mov	r0, r3
 800960e:	bd80      	pop	{r7, pc}
 8009610:	58024400 	.word	0x58024400
 8009614:	08012a50 	.word	0x08012a50

08009618 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800961c:	b0c6      	sub	sp, #280	@ 0x118
 800961e:	af00      	add	r7, sp, #0
 8009620:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009624:	2300      	movs	r3, #0
 8009626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800962a:	2300      	movs	r3, #0
 800962c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800963c:	2500      	movs	r5, #0
 800963e:	ea54 0305 	orrs.w	r3, r4, r5
 8009642:	d049      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800964e:	d02f      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009650:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009654:	d828      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009656:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800965a:	d01a      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800965c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009660:	d822      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800966a:	d007      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800966c:	e01c      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800966e:	4bab      	ldr	r3, [pc, #684]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009672:	4aaa      	ldr	r2, [pc, #680]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800967a:	e01a      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800967c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009680:	3308      	adds	r3, #8
 8009682:	2102      	movs	r1, #2
 8009684:	4618      	mov	r0, r3
 8009686:	f002 fa49 	bl	800bb1c <RCCEx_PLL2_Config>
 800968a:	4603      	mov	r3, r0
 800968c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009690:	e00f      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009696:	3328      	adds	r3, #40	@ 0x28
 8009698:	2102      	movs	r1, #2
 800969a:	4618      	mov	r0, r3
 800969c:	f002 faf0 	bl	800bc80 <RCCEx_PLL3_Config>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096a6:	e004      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096ae:	e000      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80096b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80096ba:	4b98      	ldr	r3, [pc, #608]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80096c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096c8:	4a94      	ldr	r2, [pc, #592]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096ca:	430b      	orrs	r3, r1
 80096cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80096ce:	e003      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80096e4:	f04f 0900 	mov.w	r9, #0
 80096e8:	ea58 0309 	orrs.w	r3, r8, r9
 80096ec:	d047      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80096ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d82a      	bhi.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80096f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009700 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	08009715 	.word	0x08009715
 8009704:	08009723 	.word	0x08009723
 8009708:	08009739 	.word	0x08009739
 800970c:	08009757 	.word	0x08009757
 8009710:	08009757 	.word	0x08009757
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009714:	4b81      	ldr	r3, [pc, #516]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009718:	4a80      	ldr	r2, [pc, #512]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800971a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800971e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009720:	e01a      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009726:	3308      	adds	r3, #8
 8009728:	2100      	movs	r1, #0
 800972a:	4618      	mov	r0, r3
 800972c:	f002 f9f6 	bl	800bb1c <RCCEx_PLL2_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009736:	e00f      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973c:	3328      	adds	r3, #40	@ 0x28
 800973e:	2100      	movs	r1, #0
 8009740:	4618      	mov	r0, r3
 8009742:	f002 fa9d 	bl	800bc80 <RCCEx_PLL3_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800974c:	e004      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009754:	e000      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009760:	4b6e      	ldr	r3, [pc, #440]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009764:	f023 0107 	bic.w	r1, r3, #7
 8009768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800976e:	4a6b      	ldr	r2, [pc, #428]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009770:	430b      	orrs	r3, r1
 8009772:	6513      	str	r3, [r2, #80]	@ 0x50
 8009774:	e003      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800977a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800977e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800978a:	f04f 0b00 	mov.w	fp, #0
 800978e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009792:	d05b      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800979c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80097a0:	d03b      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80097a2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80097a6:	d834      	bhi.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097ac:	d037      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80097ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097b2:	d82e      	bhi.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097b8:	d033      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80097ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097be:	d828      	bhi.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097c4:	d01a      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80097c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097ca:	d822      	bhi.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80097d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097d4:	d007      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80097d6:	e01c      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d8:	4b50      	ldr	r3, [pc, #320]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097dc:	4a4f      	ldr	r2, [pc, #316]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097e4:	e01e      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ea:	3308      	adds	r3, #8
 80097ec:	2100      	movs	r1, #0
 80097ee:	4618      	mov	r0, r3
 80097f0:	f002 f994 	bl	800bb1c <RCCEx_PLL2_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097fa:	e013      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009800:	3328      	adds	r3, #40	@ 0x28
 8009802:	2100      	movs	r1, #0
 8009804:	4618      	mov	r0, r3
 8009806:	f002 fa3b 	bl	800bc80 <RCCEx_PLL3_Config>
 800980a:	4603      	mov	r3, r0
 800980c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009810:	e008      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009818:	e004      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800981a:	bf00      	nop
 800981c:	e002      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800981e:	bf00      	nop
 8009820:	e000      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10b      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800982c:	4b3b      	ldr	r3, [pc, #236]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800982e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009830:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009838:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800983c:	4a37      	ldr	r2, [pc, #220]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800983e:	430b      	orrs	r3, r1
 8009840:	6593      	str	r3, [r2, #88]	@ 0x58
 8009842:	e003      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009848:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800984c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800985c:	2300      	movs	r3, #0
 800985e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009862:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009866:	460b      	mov	r3, r1
 8009868:	4313      	orrs	r3, r2
 800986a:	d05d      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800986c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009870:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009874:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009878:	d03b      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800987a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800987e:	d834      	bhi.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009884:	d037      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009886:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800988a:	d82e      	bhi.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800988c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009890:	d033      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009892:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009896:	d828      	bhi.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800989c:	d01a      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800989e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098a2:	d822      	bhi.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80098a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098ac:	d007      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80098ae:	e01c      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b0:	4b1a      	ldr	r3, [pc, #104]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b4:	4a19      	ldr	r2, [pc, #100]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098bc:	e01e      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c2:	3308      	adds	r3, #8
 80098c4:	2100      	movs	r1, #0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f002 f928 	bl	800bb1c <RCCEx_PLL2_Config>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098d2:	e013      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d8:	3328      	adds	r3, #40	@ 0x28
 80098da:	2100      	movs	r1, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f002 f9cf 	bl	800bc80 <RCCEx_PLL3_Config>
 80098e2:	4603      	mov	r3, r0
 80098e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098e8:	e008      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098f0:	e004      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098f2:	bf00      	nop
 80098f4:	e002      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098f6:	bf00      	nop
 80098f8:	e000      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10d      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009904:	4b05      	ldr	r3, [pc, #20]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009908:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800990c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009910:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009914:	4a01      	ldr	r2, [pc, #4]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009916:	430b      	orrs	r3, r1
 8009918:	6593      	str	r3, [r2, #88]	@ 0x58
 800991a:	e005      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800991c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009934:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009938:	2300      	movs	r3, #0
 800993a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800993e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009942:	460b      	mov	r3, r1
 8009944:	4313      	orrs	r3, r2
 8009946:	d03a      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800994e:	2b30      	cmp	r3, #48	@ 0x30
 8009950:	d01f      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009952:	2b30      	cmp	r3, #48	@ 0x30
 8009954:	d819      	bhi.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009956:	2b20      	cmp	r3, #32
 8009958:	d00c      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800995a:	2b20      	cmp	r3, #32
 800995c:	d815      	bhi.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d019      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009962:	2b10      	cmp	r3, #16
 8009964:	d111      	bne.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009966:	4baa      	ldr	r3, [pc, #680]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996a:	4aa9      	ldr	r2, [pc, #676]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800996c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009972:	e011      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009978:	3308      	adds	r3, #8
 800997a:	2102      	movs	r1, #2
 800997c:	4618      	mov	r0, r3
 800997e:	f002 f8cd 	bl	800bb1c <RCCEx_PLL2_Config>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009988:	e006      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009990:	e002      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009992:	bf00      	nop
 8009994:	e000      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80099a0:	4b9b      	ldr	r3, [pc, #620]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099ae:	4a98      	ldr	r2, [pc, #608]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099b0:	430b      	orrs	r3, r1
 80099b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099b4:	e003      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80099ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099ce:	2300      	movs	r3, #0
 80099d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80099d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80099d8:	460b      	mov	r3, r1
 80099da:	4313      	orrs	r3, r2
 80099dc:	d051      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80099de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099e8:	d035      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80099ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099ee:	d82e      	bhi.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099f4:	d031      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80099f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099fa:	d828      	bhi.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a00:	d01a      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a06:	d822      	bhi.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a10:	d007      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009a12:	e01c      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a14:	4b7e      	ldr	r3, [pc, #504]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a18:	4a7d      	ldr	r2, [pc, #500]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a20:	e01c      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a26:	3308      	adds	r3, #8
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f002 f876 	bl	800bb1c <RCCEx_PLL2_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a36:	e011      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3c:	3328      	adds	r3, #40	@ 0x28
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f002 f91d 	bl	800bc80 <RCCEx_PLL3_Config>
 8009a46:	4603      	mov	r3, r0
 8009a48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a4c:	e006      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a54:	e002      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a56:	bf00      	nop
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a64:	4b6a      	ldr	r3, [pc, #424]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a68:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a72:	4a67      	ldr	r2, [pc, #412]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a78:	e003      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009a8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a92:	2300      	movs	r3, #0
 8009a94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a98:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	d053      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009aac:	d033      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009aae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009ab2:	d82c      	bhi.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ab4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ab8:	d02f      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009aba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009abe:	d826      	bhi.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ac4:	d02b      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009ac6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009aca:	d820      	bhi.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ad0:	d012      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009ad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ad6:	d81a      	bhi.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d022      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ae0:	d115      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	2101      	movs	r1, #1
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 f816 	bl	800bb1c <RCCEx_PLL2_Config>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009af6:	e015      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afc:	3328      	adds	r3, #40	@ 0x28
 8009afe:	2101      	movs	r1, #1
 8009b00:	4618      	mov	r0, r3
 8009b02:	f002 f8bd 	bl	800bc80 <RCCEx_PLL3_Config>
 8009b06:	4603      	mov	r3, r0
 8009b08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b0c:	e00a      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b14:	e006      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b16:	bf00      	nop
 8009b18:	e004      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b1a:	bf00      	nop
 8009b1c:	e002      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b1e:	bf00      	nop
 8009b20:	e000      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b2c:	4b38      	ldr	r3, [pc, #224]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b3a:	4a35      	ldr	r2, [pc, #212]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b40:	e003      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009b56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b60:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b64:	460b      	mov	r3, r1
 8009b66:	4313      	orrs	r3, r2
 8009b68:	d058      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b76:	d033      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b7c:	d82c      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b82:	d02f      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b88:	d826      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b8e:	d02b      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009b90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b94:	d820      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b9a:	d012      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ba0:	d81a      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d022      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009baa:	d115      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 ffb1 	bl	800bb1c <RCCEx_PLL2_Config>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bc0:	e015      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc6:	3328      	adds	r3, #40	@ 0x28
 8009bc8:	2101      	movs	r1, #1
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f002 f858 	bl	800bc80 <RCCEx_PLL3_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bd6:	e00a      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bde:	e006      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009be0:	bf00      	nop
 8009be2:	e004      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009be4:	bf00      	nop
 8009be6:	e002      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009be8:	bf00      	nop
 8009bea:	e000      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10e      	bne.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bf6:	4b06      	ldr	r3, [pc, #24]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bfa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009c06:	4a02      	ldr	r2, [pc, #8]	@ (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c0c:	e006      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009c0e:	bf00      	nop
 8009c10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009c28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009c32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	d037      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c46:	d00e      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c4c:	d816      	bhi.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d018      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c56:	d111      	bne.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c58:	4bc4      	ldr	r3, [pc, #784]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5c:	4ac3      	ldr	r2, [pc, #780]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c64:	e00f      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f001 ff54 	bl	800bb1c <RCCEx_PLL2_Config>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c7a:	e004      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c82:	e000      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10a      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c8e:	4bb7      	ldr	r3, [pc, #732]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c9c:	4ab3      	ldr	r2, [pc, #716]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c9e:	430b      	orrs	r3, r1
 8009ca0:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ca2:	e003      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	d039      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d81c      	bhi.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009d19 	.word	0x08009d19
 8009ce0:	08009ced 	.word	0x08009ced
 8009ce4:	08009cfb 	.word	0x08009cfb
 8009ce8:	08009d19 	.word	0x08009d19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cec:	4b9f      	ldr	r3, [pc, #636]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf0:	4a9e      	ldr	r2, [pc, #632]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cf8:	e00f      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfe:	3308      	adds	r3, #8
 8009d00:	2102      	movs	r1, #2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f001 ff0a 	bl	800bb1c <RCCEx_PLL2_Config>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d0e:	e004      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d16:	e000      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10a      	bne.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d22:	4b92      	ldr	r3, [pc, #584]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d26:	f023 0103 	bic.w	r1, r3, #3
 8009d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d30:	4a8e      	ldr	r2, [pc, #568]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d32:	430b      	orrs	r3, r1
 8009d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d36:	e003      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d50:	2300      	movs	r3, #0
 8009d52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	f000 8099 	beq.w	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d62:	4b83      	ldr	r3, [pc, #524]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a82      	ldr	r2, [pc, #520]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d6e:	f7f8 fe1b 	bl	80029a8 <HAL_GetTick>
 8009d72:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d76:	e00b      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d78:	f7f8 fe16 	bl	80029a8 <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	2b64      	cmp	r3, #100	@ 0x64
 8009d86:	d903      	bls.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d8e:	e005      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d90:	4b77      	ldr	r3, [pc, #476]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0ed      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d173      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009da4:	4b71      	ldr	r3, [pc, #452]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009da6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009db0:	4053      	eors	r3, r2
 8009db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d015      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dba:	4b6c      	ldr	r3, [pc, #432]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dc6:	4b69      	ldr	r3, [pc, #420]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dca:	4a68      	ldr	r2, [pc, #416]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009dd2:	4b66      	ldr	r3, [pc, #408]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dd6:	4a65      	ldr	r2, [pc, #404]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ddc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009dde:	4a63      	ldr	r2, [pc, #396]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009de4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009df2:	d118      	bne.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df4:	f7f8 fdd8 	bl	80029a8 <HAL_GetTick>
 8009df8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dfc:	e00d      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dfe:	f7f8 fdd3 	bl	80029a8 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009e08:	1ad2      	subs	r2, r2, r3
 8009e0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d903      	bls.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009e18:	e005      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e1a:	4b54      	ldr	r3, [pc, #336]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0eb      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d129      	bne.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e3e:	d10e      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009e40:	4b4a      	ldr	r3, [pc, #296]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e50:	091a      	lsrs	r2, r3, #4
 8009e52:	4b48      	ldr	r3, [pc, #288]	@ (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009e54:	4013      	ands	r3, r2
 8009e56:	4a45      	ldr	r2, [pc, #276]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e58:	430b      	orrs	r3, r1
 8009e5a:	6113      	str	r3, [r2, #16]
 8009e5c:	e005      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009e5e:	4b43      	ldr	r3, [pc, #268]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	4a42      	ldr	r2, [pc, #264]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e68:	6113      	str	r3, [r2, #16]
 8009e6a:	4b40      	ldr	r3, [pc, #256]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e7a:	4a3c      	ldr	r2, [pc, #240]	@ (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e80:	e008      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009e8a:	e003      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f002 0301 	and.w	r3, r2, #1
 8009ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009eaa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	f000 808f 	beq.w	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ebc:	2b28      	cmp	r3, #40	@ 0x28
 8009ebe:	d871      	bhi.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec6:	bf00      	nop
 8009ec8:	08009fad 	.word	0x08009fad
 8009ecc:	08009fa5 	.word	0x08009fa5
 8009ed0:	08009fa5 	.word	0x08009fa5
 8009ed4:	08009fa5 	.word	0x08009fa5
 8009ed8:	08009fa5 	.word	0x08009fa5
 8009edc:	08009fa5 	.word	0x08009fa5
 8009ee0:	08009fa5 	.word	0x08009fa5
 8009ee4:	08009fa5 	.word	0x08009fa5
 8009ee8:	08009f79 	.word	0x08009f79
 8009eec:	08009fa5 	.word	0x08009fa5
 8009ef0:	08009fa5 	.word	0x08009fa5
 8009ef4:	08009fa5 	.word	0x08009fa5
 8009ef8:	08009fa5 	.word	0x08009fa5
 8009efc:	08009fa5 	.word	0x08009fa5
 8009f00:	08009fa5 	.word	0x08009fa5
 8009f04:	08009fa5 	.word	0x08009fa5
 8009f08:	08009f8f 	.word	0x08009f8f
 8009f0c:	08009fa5 	.word	0x08009fa5
 8009f10:	08009fa5 	.word	0x08009fa5
 8009f14:	08009fa5 	.word	0x08009fa5
 8009f18:	08009fa5 	.word	0x08009fa5
 8009f1c:	08009fa5 	.word	0x08009fa5
 8009f20:	08009fa5 	.word	0x08009fa5
 8009f24:	08009fa5 	.word	0x08009fa5
 8009f28:	08009fad 	.word	0x08009fad
 8009f2c:	08009fa5 	.word	0x08009fa5
 8009f30:	08009fa5 	.word	0x08009fa5
 8009f34:	08009fa5 	.word	0x08009fa5
 8009f38:	08009fa5 	.word	0x08009fa5
 8009f3c:	08009fa5 	.word	0x08009fa5
 8009f40:	08009fa5 	.word	0x08009fa5
 8009f44:	08009fa5 	.word	0x08009fa5
 8009f48:	08009fad 	.word	0x08009fad
 8009f4c:	08009fa5 	.word	0x08009fa5
 8009f50:	08009fa5 	.word	0x08009fa5
 8009f54:	08009fa5 	.word	0x08009fa5
 8009f58:	08009fa5 	.word	0x08009fa5
 8009f5c:	08009fa5 	.word	0x08009fa5
 8009f60:	08009fa5 	.word	0x08009fa5
 8009f64:	08009fa5 	.word	0x08009fa5
 8009f68:	08009fad 	.word	0x08009fad
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	58024800 	.word	0x58024800
 8009f74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	2101      	movs	r1, #1
 8009f80:	4618      	mov	r0, r3
 8009f82:	f001 fdcb 	bl	800bb1c <RCCEx_PLL2_Config>
 8009f86:	4603      	mov	r3, r0
 8009f88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f8c:	e00f      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f92:	3328      	adds	r3, #40	@ 0x28
 8009f94:	2101      	movs	r1, #1
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 fe72 	bl	800bc80 <RCCEx_PLL3_Config>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fa2:	e004      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009faa:	e000      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10a      	bne.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fb6:	4bbf      	ldr	r3, [pc, #764]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fc4:	4abb      	ldr	r2, [pc, #748]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fc6:	430b      	orrs	r3, r1
 8009fc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fca:	e003      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f002 0302 	and.w	r3, r2, #2
 8009fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	d041      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ffa:	2b05      	cmp	r3, #5
 8009ffc:	d824      	bhi.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009ffe:	a201      	add	r2, pc, #4	@ (adr r2, 800a004 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a051 	.word	0x0800a051
 800a008:	0800a01d 	.word	0x0800a01d
 800a00c:	0800a033 	.word	0x0800a033
 800a010:	0800a051 	.word	0x0800a051
 800a014:	0800a051 	.word	0x0800a051
 800a018:	0800a051 	.word	0x0800a051
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a020:	3308      	adds	r3, #8
 800a022:	2101      	movs	r1, #1
 800a024:	4618      	mov	r0, r3
 800a026:	f001 fd79 	bl	800bb1c <RCCEx_PLL2_Config>
 800a02a:	4603      	mov	r3, r0
 800a02c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a030:	e00f      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a036:	3328      	adds	r3, #40	@ 0x28
 800a038:	2101      	movs	r1, #1
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 fe20 	bl	800bc80 <RCCEx_PLL3_Config>
 800a040:	4603      	mov	r3, r0
 800a042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a046:	e004      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a04e:	e000      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a050:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10a      	bne.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a05a:	4b96      	ldr	r3, [pc, #600]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a05e:	f023 0107 	bic.w	r1, r3, #7
 800a062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a068:	4a92      	ldr	r2, [pc, #584]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a06a:	430b      	orrs	r3, r1
 800a06c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a06e:	e003      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f002 0304 	and.w	r3, r2, #4
 800a084:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a08e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a092:	460b      	mov	r3, r1
 800a094:	4313      	orrs	r3, r2
 800a096:	d044      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0a0:	2b05      	cmp	r3, #5
 800a0a2:	d825      	bhi.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a0f9 	.word	0x0800a0f9
 800a0b0:	0800a0c5 	.word	0x0800a0c5
 800a0b4:	0800a0db 	.word	0x0800a0db
 800a0b8:	0800a0f9 	.word	0x0800a0f9
 800a0bc:	0800a0f9 	.word	0x0800a0f9
 800a0c0:	0800a0f9 	.word	0x0800a0f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c8:	3308      	adds	r3, #8
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 fd25 	bl	800bb1c <RCCEx_PLL2_Config>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0d8:	e00f      	b.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0de:	3328      	adds	r3, #40	@ 0x28
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 fdcc 	bl	800bc80 <RCCEx_PLL3_Config>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0ee:	e004      	b.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0f6:	e000      	b.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a0f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10b      	bne.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a102:	4b6c      	ldr	r3, [pc, #432]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a106:	f023 0107 	bic.w	r1, r3, #7
 800a10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a112:	4a68      	ldr	r2, [pc, #416]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a114:	430b      	orrs	r3, r1
 800a116:	6593      	str	r3, [r2, #88]	@ 0x58
 800a118:	e003      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a11a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a11e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	f002 0320 	and.w	r3, r2, #32
 800a12e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a132:	2300      	movs	r3, #0
 800a134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a138:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4313      	orrs	r3, r2
 800a140:	d055      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a14a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a14e:	d033      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a154:	d82c      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a15a:	d02f      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a15c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a160:	d826      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a166:	d02b      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a16c:	d820      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a16e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a172:	d012      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a178:	d81a      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d022      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a17e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a182:	d115      	bne.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a188:	3308      	adds	r3, #8
 800a18a:	2100      	movs	r1, #0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f001 fcc5 	bl	800bb1c <RCCEx_PLL2_Config>
 800a192:	4603      	mov	r3, r0
 800a194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a198:	e015      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19e:	3328      	adds	r3, #40	@ 0x28
 800a1a0:	2102      	movs	r1, #2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 fd6c 	bl	800bc80 <RCCEx_PLL3_Config>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1ae:	e00a      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1b6:	e006      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1b8:	bf00      	nop
 800a1ba:	e004      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1bc:	bf00      	nop
 800a1be:	e002      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1c0:	bf00      	nop
 800a1c2:	e000      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10b      	bne.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1ce:	4b39      	ldr	r3, [pc, #228]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1de:	4a35      	ldr	r2, [pc, #212]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1e4:	e003      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a1fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1fe:	2300      	movs	r3, #0
 800a200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a204:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a208:	460b      	mov	r3, r1
 800a20a:	4313      	orrs	r3, r2
 800a20c:	d058      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a212:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a216:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a21a:	d033      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a21c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a220:	d82c      	bhi.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a226:	d02f      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a22c:	d826      	bhi.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a22e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a232:	d02b      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a234:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a238:	d820      	bhi.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a23a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a23e:	d012      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a244:	d81a      	bhi.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a246:	2b00      	cmp	r3, #0
 800a248:	d022      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a24a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a24e:	d115      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a254:	3308      	adds	r3, #8
 800a256:	2100      	movs	r1, #0
 800a258:	4618      	mov	r0, r3
 800a25a:	f001 fc5f 	bl	800bb1c <RCCEx_PLL2_Config>
 800a25e:	4603      	mov	r3, r0
 800a260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a264:	e015      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a26a:	3328      	adds	r3, #40	@ 0x28
 800a26c:	2102      	movs	r1, #2
 800a26e:	4618      	mov	r0, r3
 800a270:	f001 fd06 	bl	800bc80 <RCCEx_PLL3_Config>
 800a274:	4603      	mov	r3, r0
 800a276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a27a:	e00a      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a282:	e006      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a284:	bf00      	nop
 800a286:	e004      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a288:	bf00      	nop
 800a28a:	e002      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a28c:	bf00      	nop
 800a28e:	e000      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10e      	bne.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a29a:	4b06      	ldr	r3, [pc, #24]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a29e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2aa:	4a02      	ldr	r2, [pc, #8]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2b0:	e006      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a2b2:	bf00      	nop
 800a2b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a2cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	d055      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2ec:	d033      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a2ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2f2:	d82c      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2f8:	d02f      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a2fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2fe:	d826      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a300:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a304:	d02b      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a306:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a30a:	d820      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a30c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a310:	d012      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a316:	d81a      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d022      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a31c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a320:	d115      	bne.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a326:	3308      	adds	r3, #8
 800a328:	2100      	movs	r1, #0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 fbf6 	bl	800bb1c <RCCEx_PLL2_Config>
 800a330:	4603      	mov	r3, r0
 800a332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a336:	e015      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a33c:	3328      	adds	r3, #40	@ 0x28
 800a33e:	2102      	movs	r1, #2
 800a340:	4618      	mov	r0, r3
 800a342:	f001 fc9d 	bl	800bc80 <RCCEx_PLL3_Config>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a34c:	e00a      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a354:	e006      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a356:	bf00      	nop
 800a358:	e004      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a35a:	bf00      	nop
 800a35c:	e002      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a35e:	bf00      	nop
 800a360:	e000      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a362:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10b      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a36c:	4ba0      	ldr	r3, [pc, #640]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a36e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a370:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a378:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a37c:	4a9c      	ldr	r2, [pc, #624]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a37e:	430b      	orrs	r3, r1
 800a380:	6593      	str	r3, [r2, #88]	@ 0x58
 800a382:	e003      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f002 0308 	and.w	r3, r2, #8
 800a398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a39c:	2300      	movs	r3, #0
 800a39e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a3a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	d01e      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3b8:	d10c      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3be:	3328      	adds	r3, #40	@ 0x28
 800a3c0:	2102      	movs	r1, #2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f001 fc5c 	bl	800bc80 <RCCEx_PLL3_Config>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a3d4:	4b86      	ldr	r3, [pc, #536]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e4:	4a82      	ldr	r2, [pc, #520]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3e6:	430b      	orrs	r3, r1
 800a3e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	f002 0310 	and.w	r3, r2, #16
 800a3f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a400:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a404:	460b      	mov	r3, r1
 800a406:	4313      	orrs	r3, r2
 800a408:	d01e      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a416:	d10c      	bne.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a41c:	3328      	adds	r3, #40	@ 0x28
 800a41e:	2102      	movs	r1, #2
 800a420:	4618      	mov	r0, r3
 800a422:	f001 fc2d 	bl	800bc80 <RCCEx_PLL3_Config>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a432:	4b6f      	ldr	r3, [pc, #444]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a436:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a43e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a442:	4a6b      	ldr	r2, [pc, #428]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a444:	430b      	orrs	r3, r1
 800a446:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a454:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a456:	2300      	movs	r3, #0
 800a458:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a45a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a45e:	460b      	mov	r3, r1
 800a460:	4313      	orrs	r3, r2
 800a462:	d03e      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a468:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a46c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a470:	d022      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a476:	d81b      	bhi.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a47c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a480:	d00b      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a482:	e015      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a488:	3308      	adds	r3, #8
 800a48a:	2100      	movs	r1, #0
 800a48c:	4618      	mov	r0, r3
 800a48e:	f001 fb45 	bl	800bb1c <RCCEx_PLL2_Config>
 800a492:	4603      	mov	r3, r0
 800a494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a498:	e00f      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a49e:	3328      	adds	r3, #40	@ 0x28
 800a4a0:	2102      	movs	r1, #2
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f001 fbec 	bl	800bc80 <RCCEx_PLL3_Config>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4ae:	e004      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4b6:	e000      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a4b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10b      	bne.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4c2:	4b4b      	ldr	r3, [pc, #300]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4d2:	4a47      	ldr	r2, [pc, #284]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4d4:	430b      	orrs	r3, r1
 800a4d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4d8:	e003      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a4ee:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a4f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	d03b      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a506:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a50a:	d01f      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a50c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a510:	d818      	bhi.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a516:	d003      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a51c:	d007      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a51e:	e011      	b.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a520:	4b33      	ldr	r3, [pc, #204]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a524:	4a32      	ldr	r2, [pc, #200]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a52a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a52c:	e00f      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a532:	3328      	adds	r3, #40	@ 0x28
 800a534:	2101      	movs	r1, #1
 800a536:	4618      	mov	r0, r3
 800a538:	f001 fba2 	bl	800bc80 <RCCEx_PLL3_Config>
 800a53c:	4603      	mov	r3, r0
 800a53e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a542:	e004      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a54a:	e000      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a54c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a54e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10b      	bne.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a556:	4b26      	ldr	r3, [pc, #152]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a55a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a566:	4a22      	ldr	r2, [pc, #136]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a568:	430b      	orrs	r3, r1
 800a56a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a56c:	e003      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a572:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a582:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a584:	2300      	movs	r3, #0
 800a586:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a588:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a58c:	460b      	mov	r3, r1
 800a58e:	4313      	orrs	r3, r2
 800a590:	d034      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a59c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5a0:	d007      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a5a2:	e011      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a4:	4b12      	ldr	r3, [pc, #72]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a8:	4a11      	ldr	r2, [pc, #68]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5b0:	e00e      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	2102      	movs	r1, #2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f001 faae 	bl	800bb1c <RCCEx_PLL2_Config>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5c6:	e003      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10d      	bne.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5d8:	4b05      	ldr	r3, [pc, #20]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e6:	4a02      	ldr	r2, [pc, #8]	@ (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5e8:	430b      	orrs	r3, r1
 800a5ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5ec:	e006      	b.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a5ee:	bf00      	nop
 800a5f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a608:	663b      	str	r3, [r7, #96]	@ 0x60
 800a60a:	2300      	movs	r3, #0
 800a60c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a60e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a612:	460b      	mov	r3, r1
 800a614:	4313      	orrs	r3, r2
 800a616:	d00c      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61c:	3328      	adds	r3, #40	@ 0x28
 800a61e:	2102      	movs	r1, #2
 800a620:	4618      	mov	r0, r3
 800a622:	f001 fb2d 	bl	800bc80 <RCCEx_PLL3_Config>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a63e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a640:	2300      	movs	r3, #0
 800a642:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a644:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a648:	460b      	mov	r3, r1
 800a64a:	4313      	orrs	r3, r2
 800a64c:	d036      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a658:	d018      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a65a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a65e:	d811      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a664:	d014      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a66a:	d80b      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d011      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a674:	d106      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a676:	4bb7      	ldr	r3, [pc, #732]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67a:	4ab6      	ldr	r2, [pc, #728]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a67c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a680:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a682:	e008      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a68a:	e004      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a68c:	bf00      	nop
 800a68e:	e002      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a690:	bf00      	nop
 800a692:	e000      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a69e:	4bad      	ldr	r3, [pc, #692]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6ac:	4aa9      	ldr	r2, [pc, #676]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6ae:	430b      	orrs	r3, r1
 800a6b0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6b2:	e003      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a6c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	d009      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6d8:	4b9e      	ldr	r3, [pc, #632]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6e6:	4a9b      	ldr	r2, [pc, #620]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6e8:	430b      	orrs	r3, r1
 800a6ea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a6f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a702:	460b      	mov	r3, r1
 800a704:	4313      	orrs	r3, r2
 800a706:	d009      	beq.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a708:	4b92      	ldr	r3, [pc, #584]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a70c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a716:	4a8f      	ldr	r2, [pc, #572]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a718:	430b      	orrs	r3, r1
 800a71a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a728:	643b      	str	r3, [r7, #64]	@ 0x40
 800a72a:	2300      	movs	r3, #0
 800a72c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a72e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a732:	460b      	mov	r3, r1
 800a734:	4313      	orrs	r3, r2
 800a736:	d00e      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a738:	4b86      	ldr	r3, [pc, #536]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	4a85      	ldr	r2, [pc, #532]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a73e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a742:	6113      	str	r3, [r2, #16]
 800a744:	4b83      	ldr	r3, [pc, #524]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a746:	6919      	ldr	r1, [r3, #16]
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a750:	4a80      	ldr	r2, [pc, #512]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a752:	430b      	orrs	r3, r1
 800a754:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a762:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a764:	2300      	movs	r3, #0
 800a766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a768:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a76c:	460b      	mov	r3, r1
 800a76e:	4313      	orrs	r3, r2
 800a770:	d009      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a772:	4b78      	ldr	r3, [pc, #480]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a776:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a77e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a780:	4a74      	ldr	r2, [pc, #464]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a782:	430b      	orrs	r3, r1
 800a784:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a792:	633b      	str	r3, [r7, #48]	@ 0x30
 800a794:	2300      	movs	r3, #0
 800a796:	637b      	str	r3, [r7, #52]	@ 0x34
 800a798:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a79c:	460b      	mov	r3, r1
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	d00a      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a7a2:	4b6c      	ldr	r3, [pc, #432]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7a6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7b2:	4a68      	ldr	r2, [pc, #416]	@ (800a954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7b4:	430b      	orrs	r3, r1
 800a7b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	d011      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d8:	3308      	adds	r3, #8
 800a7da:	2100      	movs	r1, #0
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f001 f99d 	bl	800bb1c <RCCEx_PLL2_Config>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a7e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d003      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	2100      	movs	r1, #0
 800a802:	6239      	str	r1, [r7, #32]
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	627b      	str	r3, [r7, #36]	@ 0x24
 800a80a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a80e:	460b      	mov	r3, r1
 800a810:	4313      	orrs	r3, r2
 800a812:	d011      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a818:	3308      	adds	r3, #8
 800a81a:	2101      	movs	r1, #1
 800a81c:	4618      	mov	r0, r3
 800a81e:	f001 f97d 	bl	800bb1c <RCCEx_PLL2_Config>
 800a822:	4603      	mov	r3, r0
 800a824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	2100      	movs	r1, #0
 800a842:	61b9      	str	r1, [r7, #24]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	61fb      	str	r3, [r7, #28]
 800a84a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a84e:	460b      	mov	r3, r1
 800a850:	4313      	orrs	r3, r2
 800a852:	d011      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a858:	3308      	adds	r3, #8
 800a85a:	2102      	movs	r1, #2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 f95d 	bl	800bb1c <RCCEx_PLL2_Config>
 800a862:	4603      	mov	r3, r0
 800a864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	2100      	movs	r1, #0
 800a882:	6139      	str	r1, [r7, #16]
 800a884:	f003 0308 	and.w	r3, r3, #8
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a88e:	460b      	mov	r3, r1
 800a890:	4313      	orrs	r3, r2
 800a892:	d011      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a898:	3328      	adds	r3, #40	@ 0x28
 800a89a:	2100      	movs	r1, #0
 800a89c:	4618      	mov	r0, r3
 800a89e:	f001 f9ef 	bl	800bc80 <RCCEx_PLL3_Config>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a8a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d003      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	60b9      	str	r1, [r7, #8]
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	d011      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d8:	3328      	adds	r3, #40	@ 0x28
 800a8da:	2101      	movs	r1, #1
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f001 f9cf 	bl	800bc80 <RCCEx_PLL3_Config>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a8e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	2100      	movs	r1, #0
 800a902:	6039      	str	r1, [r7, #0]
 800a904:	f003 0320 	and.w	r3, r3, #32
 800a908:	607b      	str	r3, [r7, #4]
 800a90a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a90e:	460b      	mov	r3, r1
 800a910:	4313      	orrs	r3, r2
 800a912:	d011      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a918:	3328      	adds	r3, #40	@ 0x28
 800a91a:	2102      	movs	r1, #2
 800a91c:	4618      	mov	r0, r3
 800a91e:	f001 f9af 	bl	800bc80 <RCCEx_PLL3_Config>
 800a922:	4603      	mov	r3, r0
 800a924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a934:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a938:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	e000      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
}
 800a946:	4618      	mov	r0, r3
 800a948:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a94c:	46bd      	mov	sp, r7
 800a94e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a952:	bf00      	nop
 800a954:	58024400 	.word	0x58024400

0800a958 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b090      	sub	sp, #64	@ 0x40
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a966:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a96a:	430b      	orrs	r3, r1
 800a96c:	f040 8094 	bne.w	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a970:	4b9b      	ldr	r3, [pc, #620]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a974:	f003 0307 	and.w	r3, r3, #7
 800a978:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	f200 8087 	bhi.w	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a982:	a201      	add	r2, pc, #4	@ (adr r2, 800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800a99d 	.word	0x0800a99d
 800a98c:	0800a9c5 	.word	0x0800a9c5
 800a990:	0800a9ed 	.word	0x0800a9ed
 800a994:	0800aa89 	.word	0x0800aa89
 800a998:	0800aa15 	.word	0x0800aa15
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a99c:	4b90      	ldr	r3, [pc, #576]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9a8:	d108      	bne.n	800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 ff62 	bl	800b878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b8:	f000 bc93 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c0:	f000 bc8f 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9c4:	4b86      	ldr	r3, [pc, #536]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9d0:	d108      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d2:	f107 0318 	add.w	r3, r7, #24
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 fca6 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e0:	f000 bc7f 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e8:	f000 bc7b 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ec:	4b7c      	ldr	r3, [pc, #496]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9f8:	d108      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9fa:	f107 030c 	add.w	r3, r7, #12
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 fde6 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa08:	f000 bc6b 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa10:	f000 bc67 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa14:	4b72      	ldr	r3, [pc, #456]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa1c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa1e:	4b70      	ldr	r3, [pc, #448]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	d10c      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d109      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa30:	4b6b      	ldr	r3, [pc, #428]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	08db      	lsrs	r3, r3, #3
 800aa36:	f003 0303 	and.w	r3, r3, #3
 800aa3a:	4a6a      	ldr	r2, [pc, #424]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aa3c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa42:	e01f      	b.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa44:	4b66      	ldr	r3, [pc, #408]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa50:	d106      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aa52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa58:	d102      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa5a:	4b63      	ldr	r3, [pc, #396]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa5e:	e011      	b.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa60:	4b5f      	ldr	r3, [pc, #380]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa6c:	d106      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa74:	d102      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa76:	4b5d      	ldr	r3, [pc, #372]	@ (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa7a:	e003      	b.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa80:	f000 bc2f 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa84:	f000 bc2d 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa88:	4b59      	ldr	r3, [pc, #356]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8c:	f000 bc29 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa94:	f000 bc25 	b.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aa98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa9c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800aaa0:	430b      	orrs	r3, r1
 800aaa2:	f040 80a7 	bne.w	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aaa6:	4b4e      	ldr	r3, [pc, #312]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aaa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaaa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800aaae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aab6:	d054      	beq.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800aab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aabe:	f200 808b 	bhi.w	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aac8:	f000 8083 	beq.w	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800aacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aace:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aad2:	f200 8081 	bhi.w	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aadc:	d02f      	beq.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aae4:	d878      	bhi.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d004      	beq.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800aaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aaf2:	d012      	beq.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800aaf4:	e070      	b.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaf6:	4b3a      	ldr	r3, [pc, #232]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aafe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab02:	d107      	bne.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 feb5 	bl	800b878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab12:	e3e6      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab18:	e3e3      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab1a:	4b31      	ldr	r3, [pc, #196]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab26:	d107      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab28:	f107 0318 	add.w	r3, r7, #24
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fbfb 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab36:	e3d4      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab3c:	e3d1      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab3e:	4b28      	ldr	r3, [pc, #160]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab4a:	d107      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab4c:	f107 030c 	add.w	r3, r7, #12
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 fd3d 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab5a:	e3c2      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab60:	e3bf      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab62:	4b1f      	ldr	r3, [pc, #124]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab6c:	4b1c      	ldr	r3, [pc, #112]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	d10c      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d109      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab7e:	4b18      	ldr	r3, [pc, #96]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	08db      	lsrs	r3, r3, #3
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	4a16      	ldr	r2, [pc, #88]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ab8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab90:	e01e      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab92:	4b13      	ldr	r3, [pc, #76]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab9e:	d106      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800aba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aba6:	d102      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aba8:	4b0f      	ldr	r3, [pc, #60]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abac:	e010      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abae:	4b0c      	ldr	r3, [pc, #48]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abba:	d106      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800abbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abc2:	d102      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abc4:	4b09      	ldr	r3, [pc, #36]	@ (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abc8:	e002      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800abce:	e388      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abd0:	e387      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abd2:	4b07      	ldr	r3, [pc, #28]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800abd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd6:	e384      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abdc:	e381      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abde:	bf00      	nop
 800abe0:	58024400 	.word	0x58024400
 800abe4:	03d09000 	.word	0x03d09000
 800abe8:	003d0900 	.word	0x003d0900
 800abec:	016e3600 	.word	0x016e3600
 800abf0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800abf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800abfc:	430b      	orrs	r3, r1
 800abfe:	f040 809c 	bne.w	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ac02:	4b9e      	ldr	r3, [pc, #632]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac06:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ac0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac12:	d054      	beq.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ac14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac1a:	f200 808b 	bhi.w	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ac24:	f000 8083 	beq.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ac28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ac2e:	f200 8081 	bhi.w	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac38:	d02f      	beq.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac40:	d878      	bhi.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d004      	beq.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ac48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac4e:	d012      	beq.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ac50:	e070      	b.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac52:	4b8a      	ldr	r3, [pc, #552]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac5e:	d107      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fe07 	bl	800b878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6e:	e338      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac74:	e335      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac76:	4b81      	ldr	r3, [pc, #516]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac82:	d107      	bne.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac84:	f107 0318 	add.w	r3, r7, #24
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 fb4d 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac92:	e326      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac98:	e323      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac9a:	4b78      	ldr	r3, [pc, #480]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aca6:	d107      	bne.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aca8:	f107 030c 	add.w	r3, r7, #12
 800acac:	4618      	mov	r0, r3
 800acae:	f000 fc8f 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb6:	e314      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acbc:	e311      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acbe:	4b6f      	ldr	r3, [pc, #444]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acc6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acc8:	4b6c      	ldr	r3, [pc, #432]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d10c      	bne.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800acd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acda:	4b68      	ldr	r3, [pc, #416]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	08db      	lsrs	r3, r3, #3
 800ace0:	f003 0303 	and.w	r3, r3, #3
 800ace4:	4a66      	ldr	r2, [pc, #408]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ace6:	fa22 f303 	lsr.w	r3, r2, r3
 800acea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acec:	e01e      	b.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acee:	4b63      	ldr	r3, [pc, #396]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acfa:	d106      	bne.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800acfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad02:	d102      	bne.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad04:	4b5f      	ldr	r3, [pc, #380]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ad06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad08:	e010      	b.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad0a:	4b5c      	ldr	r3, [pc, #368]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad16:	d106      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ad18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad1e:	d102      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad20:	4b59      	ldr	r3, [pc, #356]	@ (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad24:	e002      	b.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad2a:	e2da      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad2c:	e2d9      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad2e:	4b57      	ldr	r3, [pc, #348]	@ (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ad30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad32:	e2d6      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad38:	e2d3      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ad3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad3e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ad42:	430b      	orrs	r3, r1
 800ad44:	f040 80a7 	bne.w	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ad48:	4b4c      	ldr	r3, [pc, #304]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ad50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad58:	d055      	beq.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad60:	f200 8096 	bhi.w	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad6a:	f000 8084 	beq.w	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad74:	f200 808c 	bhi.w	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad7e:	d030      	beq.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ad80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad86:	f200 8083 	bhi.w	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad96:	d012      	beq.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ad98:	e07a      	b.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad9a:	4b38      	ldr	r3, [pc, #224]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ada2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ada6:	d107      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ada8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fd63 	bl	800b878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb6:	e294      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adbc:	e291      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adbe:	4b2f      	ldr	r3, [pc, #188]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adca:	d107      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adcc:	f107 0318 	add.w	r3, r7, #24
 800add0:	4618      	mov	r0, r3
 800add2:	f000 faa9 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adda:	e282      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800addc:	2300      	movs	r3, #0
 800adde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade0:	e27f      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ade2:	4b26      	ldr	r3, [pc, #152]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adee:	d107      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adf0:	f107 030c 	add.w	r3, r7, #12
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fbeb 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adfe:	e270      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae04:	e26d      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae06:	4b1d      	ldr	r3, [pc, #116]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae10:	4b1a      	ldr	r3, [pc, #104]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b04      	cmp	r3, #4
 800ae1a:	d10c      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d109      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae22:	4b16      	ldr	r3, [pc, #88]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	08db      	lsrs	r3, r3, #3
 800ae28:	f003 0303 	and.w	r3, r3, #3
 800ae2c:	4a14      	ldr	r2, [pc, #80]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ae2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae34:	e01e      	b.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae36:	4b11      	ldr	r3, [pc, #68]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae42:	d106      	bne.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ae44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae4a:	d102      	bne.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ae4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae50:	e010      	b.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae52:	4b0a      	ldr	r3, [pc, #40]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae5e:	d106      	bne.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ae60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae66:	d102      	bne.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae68:	4b07      	ldr	r3, [pc, #28]	@ (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae6c:	e002      	b.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae72:	e236      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae74:	e235      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae76:	4b05      	ldr	r3, [pc, #20]	@ (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae7a:	e232      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae7c:	58024400 	.word	0x58024400
 800ae80:	03d09000 	.word	0x03d09000
 800ae84:	003d0900 	.word	0x003d0900
 800ae88:	016e3600 	.word	0x016e3600
 800ae8c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae94:	e225      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ae96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae9a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	f040 8085 	bne.w	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aea4:	4b9c      	ldr	r3, [pc, #624]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aeac:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aeb4:	d06b      	beq.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aebc:	d874      	bhi.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aec4:	d056      	beq.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800aec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aecc:	d86c      	bhi.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aed4:	d03b      	beq.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800aed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aedc:	d864      	bhi.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aee4:	d021      	beq.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800aee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeec:	d85c      	bhi.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d004      	beq.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800aef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aefa:	d004      	beq.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800aefc:	e054      	b.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aefe:	f7fe fb5f 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800af02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af04:	e1ed      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af06:	4b84      	ldr	r3, [pc, #528]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af12:	d107      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af14:	f107 0318 	add.w	r3, r7, #24
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 fa05 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af22:	e1de      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af28:	e1db      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af2a:	4b7b      	ldr	r3, [pc, #492]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af36:	d107      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af38:	f107 030c 	add.w	r3, r7, #12
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fb47 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af46:	e1cc      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af4c:	e1c9      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af4e:	4b72      	ldr	r3, [pc, #456]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	2b04      	cmp	r3, #4
 800af58:	d109      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af5a:	4b6f      	ldr	r3, [pc, #444]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	08db      	lsrs	r3, r3, #3
 800af60:	f003 0303 	and.w	r3, r3, #3
 800af64:	4a6d      	ldr	r2, [pc, #436]	@ (800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800af66:	fa22 f303 	lsr.w	r3, r2, r3
 800af6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af6c:	e1b9      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af72:	e1b6      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800af74:	4b68      	ldr	r3, [pc, #416]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af80:	d102      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800af82:	4b67      	ldr	r3, [pc, #412]	@ (800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800af84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af86:	e1ac      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af8c:	e1a9      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af8e:	4b62      	ldr	r3, [pc, #392]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af9a:	d102      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800af9c:	4b61      	ldr	r3, [pc, #388]	@ (800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afa0:	e19f      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa6:	e19c      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afac:	e199      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800afae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800afb6:	430b      	orrs	r3, r1
 800afb8:	d173      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800afba:	4b57      	ldr	r3, [pc, #348]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afc2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800afc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afca:	d02f      	beq.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afd2:	d863      	bhi.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800afd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800afda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afe0:	d012      	beq.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800afe2:	e05b      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afe4:	4b4c      	ldr	r3, [pc, #304]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aff0:	d107      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aff2:	f107 0318 	add.w	r3, r7, #24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 f996 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b000:	e16f      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b006:	e16c      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b008:	4b43      	ldr	r3, [pc, #268]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b014:	d107      	bne.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b016:	f107 030c 	add.w	r3, r7, #12
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 fad8 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b024:	e15d      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b02a:	e15a      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b02c:	4b3a      	ldr	r3, [pc, #232]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b02e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b030:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b034:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b036:	4b38      	ldr	r3, [pc, #224]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d10c      	bne.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b044:	2b00      	cmp	r3, #0
 800b046:	d109      	bne.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b048:	4b33      	ldr	r3, [pc, #204]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	08db      	lsrs	r3, r3, #3
 800b04e:	f003 0303 	and.w	r3, r3, #3
 800b052:	4a32      	ldr	r2, [pc, #200]	@ (800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b054:	fa22 f303 	lsr.w	r3, r2, r3
 800b058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b05a:	e01e      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b05c:	4b2e      	ldr	r3, [pc, #184]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b068:	d106      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b06c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b070:	d102      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b072:	4b2b      	ldr	r3, [pc, #172]	@ (800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b076:	e010      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b078:	4b27      	ldr	r3, [pc, #156]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b084:	d106      	bne.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b08c:	d102      	bne.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b08e:	4b25      	ldr	r3, [pc, #148]	@ (800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b092:	e002      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b098:	e123      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b09a:	e122      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a0:	e11f      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0a6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b0aa:	430b      	orrs	r3, r1
 800b0ac:	d13c      	bne.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0b6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d004      	beq.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0c4:	d012      	beq.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b0c6:	e023      	b.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0c8:	4b13      	ldr	r3, [pc, #76]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0d4:	d107      	bne.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 fbcc 	bl	800b878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0e4:	e0fd      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ea:	e0fa      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0f8:	d107      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0fa:	f107 0318 	add.w	r3, r7, #24
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 f912 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b108:	e0eb      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b10e:	e0e8      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b114:	e0e5      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b116:	bf00      	nop
 800b118:	58024400 	.word	0x58024400
 800b11c:	03d09000 	.word	0x03d09000
 800b120:	003d0900 	.word	0x003d0900
 800b124:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b12c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b130:	430b      	orrs	r3, r1
 800b132:	f040 8085 	bne.w	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b136:	4b6d      	ldr	r3, [pc, #436]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b13a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b13e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b146:	d06b      	beq.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b14e:	d874      	bhi.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b156:	d056      	beq.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b15e:	d86c      	bhi.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b166:	d03b      	beq.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b16e:	d864      	bhi.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b176:	d021      	beq.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b17e:	d85c      	bhi.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b182:	2b00      	cmp	r3, #0
 800b184:	d004      	beq.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b18c:	d004      	beq.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b18e:	e054      	b.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b190:	f000 f8b4 	bl	800b2fc <HAL_RCCEx_GetD3PCLK1Freq>
 800b194:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b196:	e0a4      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b198:	4b54      	ldr	r3, [pc, #336]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1a4:	d107      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1a6:	f107 0318 	add.w	r3, r7, #24
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 f8bc 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1b4:	e095      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ba:	e092      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1bc:	4b4b      	ldr	r3, [pc, #300]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1c8:	d107      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ca:	f107 030c 	add.w	r3, r7, #12
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f9fe 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d8:	e083      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1de:	e080      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1e0:	4b42      	ldr	r3, [pc, #264]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	d109      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1ec:	4b3f      	ldr	r3, [pc, #252]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	08db      	lsrs	r3, r3, #3
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	4a3e      	ldr	r2, [pc, #248]	@ (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1fe:	e070      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b204:	e06d      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b206:	4b39      	ldr	r3, [pc, #228]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b20e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b212:	d102      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b214:	4b37      	ldr	r3, [pc, #220]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b218:	e063      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b21e:	e060      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b220:	4b32      	ldr	r3, [pc, #200]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b22c:	d102      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b22e:	4b32      	ldr	r3, [pc, #200]	@ (800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b232:	e056      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b238:	e053      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b23e:	e050      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b244:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b248:	430b      	orrs	r3, r1
 800b24a:	d148      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b24c:	4b27      	ldr	r3, [pc, #156]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b24e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b250:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b254:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b25c:	d02a      	beq.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b264:	d838      	bhi.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d004      	beq.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b272:	d00d      	beq.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b274:	e030      	b.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b276:	4b1d      	ldr	r3, [pc, #116]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b27e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b282:	d102      	bne.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b284:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b288:	e02b      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b28e:	e028      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b290:	4b16      	ldr	r3, [pc, #88]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b29c:	d107      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b29e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 fae8 	bl	800b878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ac:	e019      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b2:	e016      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2c0:	d107      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c2:	f107 0318 	add.w	r3, r7, #24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 f82e 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d0:	e007      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d6:	e004      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2dc:	e001      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3740      	adds	r7, #64	@ 0x40
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	58024400 	.word	0x58024400
 800b2f0:	03d09000 	.word	0x03d09000
 800b2f4:	003d0900 	.word	0x003d0900
 800b2f8:	016e3600 	.word	0x016e3600

0800b2fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b300:	f7fe f92e 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 800b304:	4602      	mov	r2, r0
 800b306:	4b06      	ldr	r3, [pc, #24]	@ (800b320 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	091b      	lsrs	r3, r3, #4
 800b30c:	f003 0307 	and.w	r3, r3, #7
 800b310:	4904      	ldr	r1, [pc, #16]	@ (800b324 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b312:	5ccb      	ldrb	r3, [r1, r3]
 800b314:	f003 031f 	and.w	r3, r3, #31
 800b318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	58024400 	.word	0x58024400
 800b324:	08012a50 	.word	0x08012a50

0800b328 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b328:	b480      	push	{r7}
 800b32a:	b089      	sub	sp, #36	@ 0x24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b330:	4ba1      	ldr	r3, [pc, #644]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b334:	f003 0303 	and.w	r3, r3, #3
 800b338:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b33a:	4b9f      	ldr	r3, [pc, #636]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b33e:	0b1b      	lsrs	r3, r3, #12
 800b340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b344:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b346:	4b9c      	ldr	r3, [pc, #624]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34a:	091b      	lsrs	r3, r3, #4
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b352:	4b99      	ldr	r3, [pc, #612]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b356:	08db      	lsrs	r3, r3, #3
 800b358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b35c:	693a      	ldr	r2, [r7, #16]
 800b35e:	fb02 f303 	mul.w	r3, r2, r3
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 8111 	beq.w	800b598 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	f000 8083 	beq.w	800b484 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b02      	cmp	r3, #2
 800b382:	f200 80a1 	bhi.w	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d056      	beq.n	800b440 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b392:	e099      	b.n	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b394:	4b88      	ldr	r3, [pc, #544]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0320 	and.w	r3, r3, #32
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d02d      	beq.n	800b3fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3a0:	4b85      	ldr	r3, [pc, #532]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	08db      	lsrs	r3, r3, #3
 800b3a6:	f003 0303 	and.w	r3, r3, #3
 800b3aa:	4a84      	ldr	r2, [pc, #528]	@ (800b5bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b3ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	ee07 3a90 	vmov	s15, r3
 800b3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ca:	4b7b      	ldr	r3, [pc, #492]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d2:	ee07 3a90 	vmov	s15, r3
 800b3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b3fa:	e087      	b.n	800b50c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b406:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40e:	4b6a      	ldr	r3, [pc, #424]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b422:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b43a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b43e:	e065      	b.n	800b50c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	ee07 3a90 	vmov	s15, r3
 800b446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b452:	4b59      	ldr	r3, [pc, #356]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b462:	ed97 6a03 	vldr	s12, [r7, #12]
 800b466:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b482:	e043      	b.n	800b50c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b5cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b496:	4b48      	ldr	r3, [pc, #288]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4c6:	e021      	b.n	800b50c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	ee07 3a90 	vmov	s15, r3
 800b4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4da:	4b37      	ldr	r3, [pc, #220]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b50a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b50c:	4b2a      	ldr	r3, [pc, #168]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b510:	0a5b      	lsrs	r3, r3, #9
 800b512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b522:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b526:	edd7 6a07 	vldr	s13, [r7, #28]
 800b52a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b52e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b532:	ee17 2a90 	vmov	r2, s15
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b53a:	4b1f      	ldr	r3, [pc, #124]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b53e:	0c1b      	lsrs	r3, r3, #16
 800b540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b544:	ee07 3a90 	vmov	s15, r3
 800b548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b550:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b554:	edd7 6a07 	vldr	s13, [r7, #28]
 800b558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b55c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b560:	ee17 2a90 	vmov	r2, s15
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b568:	4b13      	ldr	r3, [pc, #76]	@ (800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56c:	0e1b      	lsrs	r3, r3, #24
 800b56e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b572:	ee07 3a90 	vmov	s15, r3
 800b576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b57a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b57e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b582:	edd7 6a07 	vldr	s13, [r7, #28]
 800b586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b58a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b58e:	ee17 2a90 	vmov	r2, s15
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b596:	e008      	b.n	800b5aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	609a      	str	r2, [r3, #8]
}
 800b5aa:	bf00      	nop
 800b5ac:	3724      	adds	r7, #36	@ 0x24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	58024400 	.word	0x58024400
 800b5bc:	03d09000 	.word	0x03d09000
 800b5c0:	46000000 	.word	0x46000000
 800b5c4:	4c742400 	.word	0x4c742400
 800b5c8:	4a742400 	.word	0x4a742400
 800b5cc:	4bb71b00 	.word	0x4bb71b00

0800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b089      	sub	sp, #36	@ 0x24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5d8:	4ba1      	ldr	r3, [pc, #644]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5dc:	f003 0303 	and.w	r3, r3, #3
 800b5e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b5e2:	4b9f      	ldr	r3, [pc, #636]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e6:	0d1b      	lsrs	r3, r3, #20
 800b5e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b5ee:	4b9c      	ldr	r3, [pc, #624]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f2:	0a1b      	lsrs	r3, r3, #8
 800b5f4:	f003 0301 	and.w	r3, r3, #1
 800b5f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b5fa:	4b99      	ldr	r3, [pc, #612]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5fe:	08db      	lsrs	r3, r3, #3
 800b600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	fb02 f303 	mul.w	r3, r2, r3
 800b60a:	ee07 3a90 	vmov	s15, r3
 800b60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 8111 	beq.w	800b840 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	2b02      	cmp	r3, #2
 800b622:	f000 8083 	beq.w	800b72c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	2b02      	cmp	r3, #2
 800b62a:	f200 80a1 	bhi.w	800b770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d056      	beq.n	800b6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b63a:	e099      	b.n	800b770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b63c:	4b88      	ldr	r3, [pc, #544]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0320 	and.w	r3, r3, #32
 800b644:	2b00      	cmp	r3, #0
 800b646:	d02d      	beq.n	800b6a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b648:	4b85      	ldr	r3, [pc, #532]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	08db      	lsrs	r3, r3, #3
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	4a84      	ldr	r2, [pc, #528]	@ (800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b654:	fa22 f303 	lsr.w	r3, r2, r3
 800b658:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	ee07 3a90 	vmov	s15, r3
 800b660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b672:	4b7b      	ldr	r3, [pc, #492]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67a:	ee07 3a90 	vmov	s15, r3
 800b67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b682:	ed97 6a03 	vldr	s12, [r7, #12]
 800b686:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6a2:	e087      	b.n	800b7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b86c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b6:	4b6a      	ldr	r3, [pc, #424]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6e6:	e065      	b.n	800b7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	ee07 3a90 	vmov	s15, r3
 800b6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6fa:	4b59      	ldr	r3, [pc, #356]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b70e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b71a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b72a:	e043      	b.n	800b7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b736:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b73e:	4b48      	ldr	r3, [pc, #288]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b746:	ee07 3a90 	vmov	s15, r3
 800b74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b752:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b75e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b76a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b76e:	e021      	b.n	800b7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b782:	4b37      	ldr	r3, [pc, #220]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b792:	ed97 6a03 	vldr	s12, [r7, #12]
 800b796:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b7b4:	4b2a      	ldr	r3, [pc, #168]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b8:	0a5b      	lsrs	r3, r3, #9
 800b7ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7be:	ee07 3a90 	vmov	s15, r3
 800b7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7da:	ee17 2a90 	vmov	r2, s15
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b7e2:	4b1f      	ldr	r3, [pc, #124]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7e6:	0c1b      	lsrs	r3, r3, #16
 800b7e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7ec:	ee07 3a90 	vmov	s15, r3
 800b7f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b808:	ee17 2a90 	vmov	r2, s15
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b810:	4b13      	ldr	r3, [pc, #76]	@ (800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b814:	0e1b      	lsrs	r3, r3, #24
 800b816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b822:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b82a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b836:	ee17 2a90 	vmov	r2, s15
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b83e:	e008      	b.n	800b852 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	609a      	str	r2, [r3, #8]
}
 800b852:	bf00      	nop
 800b854:	3724      	adds	r7, #36	@ 0x24
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	58024400 	.word	0x58024400
 800b864:	03d09000 	.word	0x03d09000
 800b868:	46000000 	.word	0x46000000
 800b86c:	4c742400 	.word	0x4c742400
 800b870:	4a742400 	.word	0x4a742400
 800b874:	4bb71b00 	.word	0x4bb71b00

0800b878 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b878:	b480      	push	{r7}
 800b87a:	b089      	sub	sp, #36	@ 0x24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b880:	4ba0      	ldr	r3, [pc, #640]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b884:	f003 0303 	and.w	r3, r3, #3
 800b888:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b88a:	4b9e      	ldr	r3, [pc, #632]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b88e:	091b      	lsrs	r3, r3, #4
 800b890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b894:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b896:	4b9b      	ldr	r3, [pc, #620]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b8a0:	4b98      	ldr	r3, [pc, #608]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8a4:	08db      	lsrs	r3, r3, #3
 800b8a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	fb02 f303 	mul.w	r3, r2, r3
 800b8b0:	ee07 3a90 	vmov	s15, r3
 800b8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f000 8111 	beq.w	800bae6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	f000 8083 	beq.w	800b9d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	f200 80a1 	bhi.w	800ba16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d003      	beq.n	800b8e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d056      	beq.n	800b98e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b8e0:	e099      	b.n	800ba16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8e2:	4b88      	ldr	r3, [pc, #544]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0320 	and.w	r3, r3, #32
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d02d      	beq.n	800b94a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8ee:	4b85      	ldr	r3, [pc, #532]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	08db      	lsrs	r3, r3, #3
 800b8f4:	f003 0303 	and.w	r3, r3, #3
 800b8f8:	4a83      	ldr	r2, [pc, #524]	@ (800bb08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b8fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	ee07 3a90 	vmov	s15, r3
 800b906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	ee07 3a90 	vmov	s15, r3
 800b910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b918:	4b7a      	ldr	r3, [pc, #488]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b920:	ee07 3a90 	vmov	s15, r3
 800b924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b928:	ed97 6a03 	vldr	s12, [r7, #12]
 800b92c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b93c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b940:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b944:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b948:	e087      	b.n	800ba5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	ee07 3a90 	vmov	s15, r3
 800b950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b954:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800bb10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b95c:	4b69      	ldr	r3, [pc, #420]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b964:	ee07 3a90 	vmov	s15, r3
 800b968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b96c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b970:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b97c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b984:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b988:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b98c:	e065      	b.n	800ba5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	ee07 3a90 	vmov	s15, r3
 800b994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b998:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bb14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b99c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9a0:	4b58      	ldr	r3, [pc, #352]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a8:	ee07 3a90 	vmov	s15, r3
 800b9ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9d0:	e043      	b.n	800ba5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	ee07 3a90 	vmov	s15, r3
 800b9d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bb18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b9e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9e4:	4b47      	ldr	r3, [pc, #284]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ec:	ee07 3a90 	vmov	s15, r3
 800b9f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba14:	e021      	b.n	800ba5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba20:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bb10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba28:	4b36      	ldr	r3, [pc, #216]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba38:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba3c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ba5a:	4b2a      	ldr	r3, [pc, #168]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba5e:	0a5b      	lsrs	r3, r3, #9
 800ba60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba64:	ee07 3a90 	vmov	s15, r3
 800ba68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba80:	ee17 2a90 	vmov	r2, s15
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ba88:	4b1e      	ldr	r3, [pc, #120]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba8c:	0c1b      	lsrs	r3, r3, #16
 800ba8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba92:	ee07 3a90 	vmov	s15, r3
 800ba96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800baa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baae:	ee17 2a90 	vmov	r2, s15
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bab6:	4b13      	ldr	r3, [pc, #76]	@ (800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baba:	0e1b      	lsrs	r3, r3, #24
 800babc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bac0:	ee07 3a90 	vmov	s15, r3
 800bac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bacc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bad0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800badc:	ee17 2a90 	vmov	r2, s15
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bae4:	e008      	b.n	800baf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	609a      	str	r2, [r3, #8]
}
 800baf8:	bf00      	nop
 800bafa:	3724      	adds	r7, #36	@ 0x24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	58024400 	.word	0x58024400
 800bb08:	03d09000 	.word	0x03d09000
 800bb0c:	46000000 	.word	0x46000000
 800bb10:	4c742400 	.word	0x4c742400
 800bb14:	4a742400 	.word	0x4a742400
 800bb18:	4bb71b00 	.word	0x4bb71b00

0800bb1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb2a:	4b53      	ldr	r3, [pc, #332]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bb2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb2e:	f003 0303 	and.w	r3, r3, #3
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d101      	bne.n	800bb3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e099      	b.n	800bc6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb3a:	4b4f      	ldr	r3, [pc, #316]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a4e      	ldr	r2, [pc, #312]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bb40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb46:	f7f6 ff2f 	bl	80029a8 <HAL_GetTick>
 800bb4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb4c:	e008      	b.n	800bb60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb4e:	f7f6 ff2b 	bl	80029a8 <HAL_GetTick>
 800bb52:	4602      	mov	r2, r0
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d901      	bls.n	800bb60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e086      	b.n	800bc6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb60:	4b45      	ldr	r3, [pc, #276]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1f0      	bne.n	800bb4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb6c:	4b42      	ldr	r3, [pc, #264]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	031b      	lsls	r3, r3, #12
 800bb7a:	493f      	ldr	r1, [pc, #252]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	025b      	lsls	r3, r3, #9
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	431a      	orrs	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	041b      	lsls	r3, r3, #16
 800bb9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bba2:	431a      	orrs	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	061b      	lsls	r3, r3, #24
 800bbac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bbb0:	4931      	ldr	r1, [pc, #196]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbb6:	4b30      	ldr	r3, [pc, #192]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	492d      	ldr	r1, [pc, #180]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbc8:	4b2b      	ldr	r3, [pc, #172]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbcc:	f023 0220 	bic.w	r2, r3, #32
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	4928      	ldr	r1, [pc, #160]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bbda:	4b27      	ldr	r3, [pc, #156]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbde:	4a26      	ldr	r2, [pc, #152]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbe0:	f023 0310 	bic.w	r3, r3, #16
 800bbe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bbe6:	4b24      	ldr	r3, [pc, #144]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bbea:	4b24      	ldr	r3, [pc, #144]	@ (800bc7c <RCCEx_PLL2_Config+0x160>)
 800bbec:	4013      	ands	r3, r2
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	69d2      	ldr	r2, [r2, #28]
 800bbf2:	00d2      	lsls	r2, r2, #3
 800bbf4:	4920      	ldr	r1, [pc, #128]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bbfa:	4b1f      	ldr	r3, [pc, #124]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfe:	4a1e      	ldr	r2, [pc, #120]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc00:	f043 0310 	orr.w	r3, r3, #16
 800bc04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d106      	bne.n	800bc1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc0c:	4b1a      	ldr	r3, [pc, #104]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc10:	4a19      	ldr	r2, [pc, #100]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc18:	e00f      	b.n	800bc3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d106      	bne.n	800bc2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc20:	4b15      	ldr	r3, [pc, #84]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc24:	4a14      	ldr	r2, [pc, #80]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc2c:	e005      	b.n	800bc3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc2e:	4b12      	ldr	r3, [pc, #72]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc32:	4a11      	ldr	r2, [pc, #68]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bc38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc3a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a0e      	ldr	r2, [pc, #56]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc46:	f7f6 feaf 	bl	80029a8 <HAL_GetTick>
 800bc4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc4c:	e008      	b.n	800bc60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc4e:	f7f6 feab 	bl	80029a8 <HAL_GetTick>
 800bc52:	4602      	mov	r2, r0
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d901      	bls.n	800bc60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e006      	b.n	800bc6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc60:	4b05      	ldr	r3, [pc, #20]	@ (800bc78 <RCCEx_PLL2_Config+0x15c>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d0f0      	beq.n	800bc4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	58024400 	.word	0x58024400
 800bc7c:	ffff0007 	.word	0xffff0007

0800bc80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc8e:	4b53      	ldr	r3, [pc, #332]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc92:	f003 0303 	and.w	r3, r3, #3
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d101      	bne.n	800bc9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e099      	b.n	800bdd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc9e:	4b4f      	ldr	r3, [pc, #316]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a4e      	ldr	r2, [pc, #312]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcaa:	f7f6 fe7d 	bl	80029a8 <HAL_GetTick>
 800bcae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcb0:	e008      	b.n	800bcc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcb2:	f7f6 fe79 	bl	80029a8 <HAL_GetTick>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d901      	bls.n	800bcc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	e086      	b.n	800bdd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcc4:	4b45      	ldr	r3, [pc, #276]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1f0      	bne.n	800bcb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bcd0:	4b42      	ldr	r3, [pc, #264]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	051b      	lsls	r3, r3, #20
 800bcde:	493f      	ldr	r1, [pc, #252]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bce0:	4313      	orrs	r3, r2
 800bce2:	628b      	str	r3, [r1, #40]	@ 0x28
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	3b01      	subs	r3, #1
 800bcea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	025b      	lsls	r3, r3, #9
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	431a      	orrs	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	041b      	lsls	r3, r3, #16
 800bd02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd06:	431a      	orrs	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	061b      	lsls	r3, r3, #24
 800bd10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd14:	4931      	ldr	r1, [pc, #196]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd1a:	4b30      	ldr	r3, [pc, #192]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	492d      	ldr	r1, [pc, #180]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd2c:	4b2b      	ldr	r3, [pc, #172]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	4928      	ldr	r1, [pc, #160]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd3e:	4b27      	ldr	r3, [pc, #156]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd42:	4a26      	ldr	r2, [pc, #152]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd4a:	4b24      	ldr	r3, [pc, #144]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd4e:	4b24      	ldr	r3, [pc, #144]	@ (800bde0 <RCCEx_PLL3_Config+0x160>)
 800bd50:	4013      	ands	r3, r2
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	69d2      	ldr	r2, [r2, #28]
 800bd56:	00d2      	lsls	r2, r2, #3
 800bd58:	4920      	ldr	r1, [pc, #128]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd5e:	4b1f      	ldr	r3, [pc, #124]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd62:	4a1e      	ldr	r2, [pc, #120]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d106      	bne.n	800bd7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd70:	4b1a      	ldr	r3, [pc, #104]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd74:	4a19      	ldr	r2, [pc, #100]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bd7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd7c:	e00f      	b.n	800bd9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d106      	bne.n	800bd92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd84:	4b15      	ldr	r3, [pc, #84]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd88:	4a14      	ldr	r2, [pc, #80]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd90:	e005      	b.n	800bd9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bd92:	4b12      	ldr	r3, [pc, #72]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd96:	4a11      	ldr	r2, [pc, #68]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bd98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd9e:	4b0f      	ldr	r3, [pc, #60]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a0e      	ldr	r2, [pc, #56]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bda4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bda8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdaa:	f7f6 fdfd 	bl	80029a8 <HAL_GetTick>
 800bdae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdb0:	e008      	b.n	800bdc4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bdb2:	f7f6 fdf9 	bl	80029a8 <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d901      	bls.n	800bdc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e006      	b.n	800bdd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdc4:	4b05      	ldr	r3, [pc, #20]	@ (800bddc <RCCEx_PLL3_Config+0x15c>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0f0      	beq.n	800bdb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	58024400 	.word	0x58024400
 800bde0:	ffff0007 	.word	0xffff0007

0800bde4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08a      	sub	sp, #40	@ 0x28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e075      	b.n	800bee2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d105      	bne.n	800be0e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7f6 fa35 	bl	8002278 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2204      	movs	r2, #4
 800be12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f868 	bl	800beec <HAL_SD_InitCard>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e05d      	b.n	800bee2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800be26:	f107 0308 	add.w	r3, r7, #8
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fdaf 	bl	800c990 <HAL_SD_GetCardStatus>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	e052      	b.n	800bee2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800be3c:	7e3b      	ldrb	r3, [r7, #24]
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be42:	7e7b      	ldrb	r3, [r7, #25]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d10a      	bne.n	800be66 <HAL_SD_Init+0x82>
 800be50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be52:	2b00      	cmp	r3, #0
 800be54:	d102      	bne.n	800be5c <HAL_SD_Init+0x78>
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d004      	beq.n	800be66 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be62:	659a      	str	r2, [r3, #88]	@ 0x58
 800be64:	e00b      	b.n	800be7e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d104      	bne.n	800be78 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be74:	659a      	str	r2, [r3, #88]	@ 0x58
 800be76:	e002      	b.n	800be7e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	4619      	mov	r1, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fe6d 	bl	800cb64 <HAL_SD_ConfigWideBusOperation>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	e026      	b.n	800bee2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800be94:	f7f6 fd88 	bl	80029a8 <HAL_GetTick>
 800be98:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800be9a:	e011      	b.n	800bec0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be9c:	f7f6 fd84 	bl	80029a8 <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beaa:	d109      	bne.n	800bec0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800beb2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e010      	b.n	800bee2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 ff61 	bl	800cd88 <HAL_SD_GetCardState>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d1e7      	bne.n	800be9c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3728      	adds	r7, #40	@ 0x28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800beec:	b590      	push	{r4, r7, lr}
 800beee:	b08d      	sub	sp, #52	@ 0x34
 800bef0:	af02      	add	r7, sp, #8
 800bef2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bef8:	2300      	movs	r3, #0
 800befa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800befc:	2300      	movs	r3, #0
 800befe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bf00:	2300      	movs	r3, #0
 800bf02:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bf04:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bf08:	f04f 0100 	mov.w	r1, #0
 800bf0c:	f7fe fd24 	bl	800a958 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf10:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d109      	bne.n	800bf2c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800bf26:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e070      	b.n	800c00e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2e:	0a1b      	lsrs	r3, r3, #8
 800bf30:	4a39      	ldr	r2, [pc, #228]	@ (800c018 <HAL_SD_InitCard+0x12c>)
 800bf32:	fba2 2303 	umull	r2, r3, r2, r3
 800bf36:	091b      	lsrs	r3, r3, #4
 800bf38:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681c      	ldr	r4, [r3, #0]
 800bf3e:	466a      	mov	r2, sp
 800bf40:	f107 0318 	add.w	r3, r7, #24
 800bf44:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf48:	e882 0003 	stmia.w	r2, {r0, r1}
 800bf4c:	f107 030c 	add.w	r3, r7, #12
 800bf50:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf52:	4620      	mov	r0, r4
 800bf54:	f003 fffe 	bl	800ff54 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f004 f841 	bl	800ffe4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d005      	beq.n	800bf74 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	005b      	lsls	r3, r3, #1
 800bf6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf72:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d007      	beq.n	800bf8a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bf7a:	4a28      	ldr	r2, [pc, #160]	@ (800c01c <HAL_SD_InitCard+0x130>)
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf82:	3301      	adds	r3, #1
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7f6 fd1b 	bl	80029c0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 ffea 	bl	800cf64 <SD_PowerON>
 800bf90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00b      	beq.n	800bfb0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	e02e      	b.n	800c00e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 ff09 	bl	800cdc8 <SD_InitCard>
 800bfb6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00b      	beq.n	800bfd6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfca:	6a3b      	ldr	r3, [r7, #32]
 800bfcc:	431a      	orrs	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e01b      	b.n	800c00e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f004 f896 	bl	8010110 <SDMMC_CmdBlockLength>
 800bfe4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfe6:	6a3b      	ldr	r3, [r7, #32]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00f      	beq.n	800c00c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a0b      	ldr	r2, [pc, #44]	@ (800c020 <HAL_SD_InitCard+0x134>)
 800bff2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	431a      	orrs	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	e000      	b.n	800c00e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	372c      	adds	r7, #44	@ 0x2c
 800c012:	46bd      	mov	sp, r7
 800c014:	bd90      	pop	{r4, r7, pc}
 800c016:	bf00      	nop
 800c018:	014f8b59 	.word	0x014f8b59
 800c01c:	00012110 	.word	0x00012110
 800c020:	1fe00fff 	.word	0x1fe00fff

0800c024 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08c      	sub	sp, #48	@ 0x30
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d107      	bne.n	800c04c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c040:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e08d      	b.n	800c168 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c052:	b2db      	uxtb	r3, r3
 800c054:	2b01      	cmp	r3, #1
 800c056:	f040 8086 	bne.w	800c166 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	441a      	add	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d907      	bls.n	800c07e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c072:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e074      	b.n	800c168 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2203      	movs	r2, #3
 800c082:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2200      	movs	r2, #0
 800c08c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	025a      	lsls	r2, r3, #9
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d002      	beq.n	800c0aa <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a6:	025b      	lsls	r3, r3, #9
 800c0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	025b      	lsls	r3, r3, #9
 800c0b4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c0b6:	2390      	movs	r3, #144	@ 0x90
 800c0b8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f107 0210 	add.w	r2, r7, #16
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f003 fff1 	bl	80100b8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68da      	ldr	r2, [r3, #12]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0e4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d90a      	bls.n	800c112 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2282      	movs	r2, #130	@ 0x82
 800c100:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c108:	4618      	mov	r0, r3
 800c10a:	f004 f847 	bl	801019c <SDMMC_CmdReadMultiBlock>
 800c10e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c110:	e009      	b.n	800c126 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2281      	movs	r2, #129	@ 0x81
 800c116:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c11e:	4618      	mov	r0, r3
 800c120:	f004 f819 	bl	8010156 <SDMMC_CmdReadSingleBlock>
 800c124:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d012      	beq.n	800c152 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a0f      	ldr	r2, [pc, #60]	@ (800c170 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c132:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c13a:	431a      	orrs	r2, r3
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	e00a      	b.n	800c168 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c160:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	e000      	b.n	800c168 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c166:	2302      	movs	r3, #2
  }
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3730      	adds	r7, #48	@ 0x30
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	1fe00fff 	.word	0x1fe00fff

0800c174 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08c      	sub	sp, #48	@ 0x30
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
 800c180:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d107      	bne.n	800c19c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c190:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	e08d      	b.n	800c2b8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	f040 8086 	bne.w	800c2b6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c1b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	441a      	add	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d907      	bls.n	800c1ce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1c2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e074      	b.n	800c2b8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2203      	movs	r2, #3
 800c1d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	025a      	lsls	r2, r3, #9
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d002      	beq.n	800c1fa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f6:	025b      	lsls	r3, r3, #9
 800c1f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	025b      	lsls	r3, r3, #9
 800c204:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c206:	2390      	movs	r3, #144	@ 0x90
 800c208:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c20a:	2300      	movs	r3, #0
 800c20c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c20e:	2300      	movs	r3, #0
 800c210:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c212:	2300      	movs	r3, #0
 800c214:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f107 0210 	add.w	r2, r7, #16
 800c21e:	4611      	mov	r1, r2
 800c220:	4618      	mov	r0, r3
 800c222:	f003 ff49 	bl	80100b8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68da      	ldr	r2, [r3, #12]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c234:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2201      	movs	r2, #1
 800c244:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d90a      	bls.n	800c262 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	22a0      	movs	r2, #160	@ 0xa0
 800c250:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c258:	4618      	mov	r0, r3
 800c25a:	f003 ffe5 	bl	8010228 <SDMMC_CmdWriteMultiBlock>
 800c25e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c260:	e009      	b.n	800c276 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2290      	movs	r2, #144	@ 0x90
 800c266:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c26e:	4618      	mov	r0, r3
 800c270:	f003 ffb7 	bl	80101e2 <SDMMC_CmdWriteSingleBlock>
 800c274:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d012      	beq.n	800c2a2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a0f      	ldr	r2, [pc, #60]	@ (800c2c0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c282:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28a:	431a      	orrs	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e00a      	b.n	800c2b8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c2b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	e000      	b.n	800c2b8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c2b6:	2302      	movs	r3, #2
  }
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3730      	adds	r7, #48	@ 0x30
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	1fe00fff 	.word	0x1fe00fff

0800c2c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d008      	beq.n	800c2f2 <HAL_SD_IRQHandler+0x2e>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f003 0308 	and.w	r3, r3, #8
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d003      	beq.n	800c2f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f001 f926 	bl	800d53c <SD_Read_IT>
 800c2f0:	e19a      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 80ac 	beq.w	800c45a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c30a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	4b59      	ldr	r3, [pc, #356]	@ (800c47c <HAL_SD_IRQHandler+0x1b8>)
 800c318:	400b      	ands	r3, r1
 800c31a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c32a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c33a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f003 0308 	and.w	r3, r3, #8
 800c342:	2b00      	cmp	r3, #0
 800c344:	d038      	beq.n	800c3b8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f003 0302 	and.w	r3, r3, #2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d104      	bne.n	800c35a <HAL_SD_IRQHandler+0x96>
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f003 0320 	and.w	r3, r3, #32
 800c356:	2b00      	cmp	r3, #0
 800c358:	d011      	beq.n	800c37e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4618      	mov	r0, r3
 800c360:	f003 ff86 	bl	8010270 <SDMMC_CmdStopTransfer>
 800c364:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d008      	beq.n	800c37e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	431a      	orrs	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f95b 	bl	800c634 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a3f      	ldr	r2, [pc, #252]	@ (800c480 <HAL_SD_IRQHandler+0x1bc>)
 800c384:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d104      	bne.n	800c3a8 <HAL_SD_IRQHandler+0xe4>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f003 0302 	and.w	r3, r3, #2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d003      	beq.n	800c3b0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f004 fc31 	bl	8010c10 <HAL_SD_RxCpltCallback>
 800c3ae:	e13b      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f004 fc23 	bl	8010bfc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c3b6:	e137      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f000 8132 	beq.w	800c628 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f003 0302 	and.w	r3, r3, #2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d104      	bne.n	800c3f0 <HAL_SD_IRQHandler+0x12c>
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f003 0320 	and.w	r3, r3, #32
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d011      	beq.n	800c414 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f003 ff3b 	bl	8010270 <SDMMC_CmdStopTransfer>
 800c3fa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d008      	beq.n	800c414 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	431a      	orrs	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f910 	bl	800c634 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f003 0310 	and.w	r3, r3, #16
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d104      	bne.n	800c436 <HAL_SD_IRQHandler+0x172>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f003 0320 	and.w	r3, r3, #32
 800c432:	2b00      	cmp	r3, #0
 800c434:	d002      	beq.n	800c43c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f004 fbe0 	bl	8010bfc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f003 0301 	and.w	r3, r3, #1
 800c442:	2b00      	cmp	r3, #0
 800c444:	d105      	bne.n	800c452 <HAL_SD_IRQHandler+0x18e>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f003 0302 	and.w	r3, r3, #2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 80eb 	beq.w	800c628 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f004 fbdc 	bl	8010c10 <HAL_SD_RxCpltCallback>
}
 800c458:	e0e6      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00d      	beq.n	800c484 <HAL_SD_IRQHandler+0x1c0>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f003 0308 	and.w	r3, r3, #8
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d008      	beq.n	800c484 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 f8a8 	bl	800d5c8 <SD_Write_IT>
 800c478:	e0d6      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
 800c47a:	bf00      	nop
 800c47c:	ffff3ec5 	.word	0xffff3ec5
 800c480:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c48a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f000 809d 	beq.w	800c5ce <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c49a:	f003 0302 	and.w	r3, r3, #2
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d005      	beq.n	800c4ae <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a6:	f043 0202 	orr.w	r2, r3, #2
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b4:	f003 0308 	and.w	r3, r3, #8
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d005      	beq.n	800c4c8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4c0:	f043 0208 	orr.w	r2, r3, #8
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4ce:	f003 0320 	and.w	r3, r3, #32
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d005      	beq.n	800c4e2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4da:	f043 0220 	orr.w	r2, r3, #32
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e8:	f003 0310 	and.w	r3, r3, #16
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d005      	beq.n	800c4fc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4f4:	f043 0210 	orr.w	r2, r3, #16
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a4b      	ldr	r2, [pc, #300]	@ (800c630 <HAL_SD_IRQHandler+0x36c>)
 800c502:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c512:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68da      	ldr	r2, [r3, #12]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c522:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c532:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68da      	ldr	r2, [r3, #12]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c542:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4618      	mov	r0, r3
 800c54a:	f003 fe91 	bl	8010270 <SDMMC_CmdStopTransfer>
 800c54e:	4602      	mov	r2, r0
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c554:	431a      	orrs	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68da      	ldr	r2, [r3, #12]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c568:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c572:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f003 0308 	and.w	r3, r3, #8
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f851 	bl	800c634 <HAL_SD_ErrorCallback>
}
 800c592:	e049      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d044      	beq.n	800c628 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d040      	beq.n	800c628 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c5b4:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f834 	bl	800c634 <HAL_SD_ErrorCallback>
}
 800c5cc:	e02c      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d025      	beq.n	800c628 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5e4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5ec:	f003 0304 	and.w	r3, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10c      	bne.n	800c60e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f003 0320 	and.w	r3, r3, #32
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d003      	beq.n	800c606 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f001 f84a 	bl	800d698 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c604:	e010      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f001 f832 	bl	800d670 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c60c:	e00c      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f003 0320 	and.w	r3, r3, #32
 800c614:	2b00      	cmp	r3, #0
 800c616:	d003      	beq.n	800c620 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f001 f833 	bl	800d684 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c61e:	e003      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f001 f81b 	bl	800d65c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c626:	e7ff      	b.n	800c628 <HAL_SD_IRQHandler+0x364>
 800c628:	bf00      	nop
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	18000f3a 	.word	0x18000f3a

0800c634 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c656:	0f9b      	lsrs	r3, r3, #30
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c662:	0e9b      	lsrs	r3, r3, #26
 800c664:	b2db      	uxtb	r3, r3
 800c666:	f003 030f 	and.w	r3, r3, #15
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c674:	0e1b      	lsrs	r3, r3, #24
 800c676:	b2db      	uxtb	r3, r3
 800c678:	f003 0303 	and.w	r3, r3, #3
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c686:	0c1b      	lsrs	r3, r3, #16
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c692:	0a1b      	lsrs	r3, r3, #8
 800c694:	b2da      	uxtb	r2, r3
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6a8:	0d1b      	lsrs	r3, r3, #20
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6b4:	0c1b      	lsrs	r3, r3, #16
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	f003 030f 	and.w	r3, r3, #15
 800c6bc:	b2da      	uxtb	r2, r3
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6c6:	0bdb      	lsrs	r3, r3, #15
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6d8:	0b9b      	lsrs	r3, r3, #14
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	b2da      	uxtb	r2, r3
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6ea:	0b5b      	lsrs	r3, r3, #13
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	f003 0301 	and.w	r3, r3, #1
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6fc:	0b1b      	lsrs	r3, r3, #12
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	b2da      	uxtb	r2, r3
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2200      	movs	r2, #0
 800c70e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c714:	2b00      	cmp	r3, #0
 800c716:	d163      	bne.n	800c7e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c71c:	009a      	lsls	r2, r3, #2
 800c71e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c722:	4013      	ands	r3, r2
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c728:	0f92      	lsrs	r2, r2, #30
 800c72a:	431a      	orrs	r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c734:	0edb      	lsrs	r3, r3, #27
 800c736:	b2db      	uxtb	r3, r3
 800c738:	f003 0307 	and.w	r3, r3, #7
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c746:	0e1b      	lsrs	r3, r3, #24
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	f003 0307 	and.w	r3, r3, #7
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c758:	0d5b      	lsrs	r3, r3, #21
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	f003 0307 	and.w	r3, r3, #7
 800c760:	b2da      	uxtb	r2, r3
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c76a:	0c9b      	lsrs	r3, r3, #18
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	f003 0307 	and.w	r3, r3, #7
 800c772:	b2da      	uxtb	r2, r3
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c77c:	0bdb      	lsrs	r3, r3, #15
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	f003 0307 	and.w	r3, r3, #7
 800c784:	b2da      	uxtb	r2, r3
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	7e1b      	ldrb	r3, [r3, #24]
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	3302      	adds	r3, #2
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c7aa:	fb03 f202 	mul.w	r2, r3, r2
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	7a1b      	ldrb	r3, [r3, #8]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	f003 030f 	and.w	r3, r3, #15
 800c7bc:	2201      	movs	r2, #1
 800c7be:	409a      	lsls	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c7cc:	0a52      	lsrs	r2, r2, #9
 800c7ce:	fb03 f202 	mul.w	r2, r3, r2
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7dc:	655a      	str	r2, [r3, #84]	@ 0x54
 800c7de:	e031      	b.n	800c844 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d11d      	bne.n	800c824 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7ec:	041b      	lsls	r3, r3, #16
 800c7ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7f6:	0c1b      	lsrs	r3, r3, #16
 800c7f8:	431a      	orrs	r2, r3
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	3301      	adds	r3, #1
 800c804:	029a      	lsls	r2, r3, #10
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c818:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	655a      	str	r2, [r3, #84]	@ 0x54
 800c822:	e00f      	b.n	800c844 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a58      	ldr	r2, [pc, #352]	@ (800c98c <HAL_SD_GetCardCSD+0x344>)
 800c82a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c830:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e09d      	b.n	800c980 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c848:	0b9b      	lsrs	r3, r3, #14
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	f003 0301 	and.w	r3, r3, #1
 800c850:	b2da      	uxtb	r2, r3
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c85a:	09db      	lsrs	r3, r3, #7
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c862:	b2da      	uxtb	r2, r3
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c872:	b2da      	uxtb	r2, r3
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c87c:	0fdb      	lsrs	r3, r3, #31
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c888:	0f5b      	lsrs	r3, r3, #29
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0303 	and.w	r3, r3, #3
 800c890:	b2da      	uxtb	r2, r3
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c89a:	0e9b      	lsrs	r3, r3, #26
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	f003 0307 	and.w	r3, r3, #7
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8ac:	0d9b      	lsrs	r3, r3, #22
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f003 030f 	and.w	r3, r3, #15
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8be:	0d5b      	lsrs	r3, r3, #21
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8da:	0c1b      	lsrs	r3, r3, #16
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8ee:	0bdb      	lsrs	r3, r3, #15
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	f003 0301 	and.w	r3, r3, #1
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c902:	0b9b      	lsrs	r3, r3, #14
 800c904:	b2db      	uxtb	r3, r3
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c916:	0b5b      	lsrs	r3, r3, #13
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c92a:	0b1b      	lsrs	r3, r3, #12
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	f003 0301 	and.w	r3, r3, #1
 800c932:	b2da      	uxtb	r2, r3
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c93e:	0a9b      	lsrs	r3, r3, #10
 800c940:	b2db      	uxtb	r3, r3
 800c942:	f003 0303 	and.w	r3, r3, #3
 800c946:	b2da      	uxtb	r2, r3
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c952:	0a1b      	lsrs	r3, r3, #8
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f003 0303 	and.w	r3, r3, #3
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c966:	085b      	lsrs	r3, r3, #1
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	1fe00fff 	.word	0x1fe00fff

0800c990 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b094      	sub	sp, #80	@ 0x50
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c99a:	2300      	movs	r3, #0
 800c99c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d101      	bne.n	800c9b0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e0a7      	b.n	800cb00 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c9b0:	f107 0308 	add.w	r3, r7, #8
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fb62 	bl	800d080 <SD_SendSDStatus>
 800c9bc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c9be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d011      	beq.n	800c9e8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a4f      	ldr	r2, [pc, #316]	@ (800cb08 <HAL_SD_GetCardStatus+0x178>)
 800c9ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c9e6:	e070      	b.n	800caca <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	099b      	lsrs	r3, r3, #6
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	f003 0303 	and.w	r3, r3, #3
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	095b      	lsrs	r3, r3, #5
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	f003 0301 	and.w	r3, r3, #1
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	0a1b      	lsrs	r3, r3, #8
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	0e1b      	lsrs	r3, r3, #24
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	061a      	lsls	r2, r3, #24
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca2e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	0a1b      	lsrs	r3, r3, #8
 800ca34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca38:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	0e1b      	lsrs	r3, r3, #24
 800ca3e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	b2da      	uxtb	r2, r3
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	0a1b      	lsrs	r3, r3, #8
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	0d1b      	lsrs	r3, r3, #20
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	f003 030f 	and.w	r3, r3, #15
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	0c1b      	lsrs	r3, r3, #16
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	0a9b      	lsrs	r3, r3, #10
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	0a1b      	lsrs	r3, r3, #8
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	f003 0303 	and.w	r3, r3, #3
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	091b      	lsrs	r3, r3, #4
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f003 030f 	and.w	r3, r3, #15
 800caac:	b2da      	uxtb	r2, r3
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	f003 030f 	and.w	r3, r3, #15
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	0e1b      	lsrs	r3, r3, #24
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cad2:	4618      	mov	r0, r3
 800cad4:	f003 fb1c 	bl	8010110 <SDMMC_CmdBlockLength>
 800cad8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00d      	beq.n	800cafc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a08      	ldr	r2, [pc, #32]	@ (800cb08 <HAL_SD_GetCardStatus+0x178>)
 800cae6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800caec:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2201      	movs	r2, #1
 800caf2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800caf6:	2301      	movs	r3, #1
 800caf8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800cafc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3750      	adds	r7, #80	@ 0x50
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	1fe00fff 	.word	0x1fe00fff

0800cb0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cb64:	b590      	push	{r4, r7, lr}
 800cb66:	b08d      	sub	sp, #52	@ 0x34
 800cb68:	af02      	add	r7, sp, #8
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2203      	movs	r2, #3
 800cb78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d02e      	beq.n	800cbe2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb8a:	d106      	bne.n	800cb9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	635a      	str	r2, [r3, #52]	@ 0x34
 800cb98:	e029      	b.n	800cbee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cba0:	d10a      	bne.n	800cbb8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 fb64 	bl	800d270 <SD_WideBus_Enable>
 800cba8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	431a      	orrs	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbb6:	e01a      	b.n	800cbee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10a      	bne.n	800cbd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fba1 	bl	800d306 <SD_WideBus_Disable>
 800cbc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbca:	6a3b      	ldr	r3, [r7, #32]
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbd2:	e00c      	b.n	800cbee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbd8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbe0:	e005      	b.n	800cbee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbe6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d007      	beq.n	800cc06 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a5f      	ldr	r2, [pc, #380]	@ (800cd78 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cbfc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc04:	e096      	b.n	800cd34 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cc06:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cc0a:	f04f 0100 	mov.w	r1, #0
 800cc0e:	f7fd fea3 	bl	800a958 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc12:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f000 8083 	beq.w	800cd22 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	695a      	ldr	r2, [r3, #20]
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	4950      	ldr	r1, [pc, #320]	@ (800cd7c <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc3a:	fba1 1303 	umull	r1, r3, r1, r3
 800cc3e:	0e1b      	lsrs	r3, r3, #24
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d303      	bcc.n	800cc4c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	61bb      	str	r3, [r7, #24]
 800cc4a:	e05a      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc54:	d103      	bne.n	800cc5e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	61bb      	str	r3, [r7, #24]
 800cc5c:	e051      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc66:	d126      	bne.n	800ccb6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	695b      	ldr	r3, [r3, #20]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10e      	bne.n	800cc8e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	4a43      	ldr	r2, [pc, #268]	@ (800cd80 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d906      	bls.n	800cc86 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	4a40      	ldr	r2, [pc, #256]	@ (800cd7c <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc7c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc80:	0e5b      	lsrs	r3, r3, #25
 800cc82:	61bb      	str	r3, [r7, #24]
 800cc84:	e03d      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	61bb      	str	r3, [r7, #24]
 800cc8c:	e039      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	69fa      	ldr	r2, [r7, #28]
 800cc96:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc9a:	4a39      	ldr	r2, [pc, #228]	@ (800cd80 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d906      	bls.n	800ccae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	4a36      	ldr	r2, [pc, #216]	@ (800cd7c <HAL_SD_ConfigWideBusOperation+0x218>)
 800cca4:	fba2 2303 	umull	r2, r3, r2, r3
 800cca8:	0e5b      	lsrs	r3, r3, #25
 800ccaa:	61bb      	str	r3, [r7, #24]
 800ccac:	e029      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	e025      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	695b      	ldr	r3, [r3, #20]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10e      	bne.n	800ccdc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	4a30      	ldr	r2, [pc, #192]	@ (800cd84 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d906      	bls.n	800ccd4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	4a2c      	ldr	r2, [pc, #176]	@ (800cd7c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccca:	fba2 2303 	umull	r2, r3, r2, r3
 800ccce:	0e1b      	lsrs	r3, r3, #24
 800ccd0:	61bb      	str	r3, [r7, #24]
 800ccd2:	e016      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	61bb      	str	r3, [r7, #24]
 800ccda:	e012      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	695b      	ldr	r3, [r3, #20]
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	69fa      	ldr	r2, [r7, #28]
 800cce4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce8:	4a26      	ldr	r2, [pc, #152]	@ (800cd84 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d906      	bls.n	800ccfc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	4a22      	ldr	r2, [pc, #136]	@ (800cd7c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf6:	0e1b      	lsrs	r3, r3, #24
 800ccf8:	61bb      	str	r3, [r7, #24]
 800ccfa:	e002      	b.n	800cd02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681c      	ldr	r4, [r3, #0]
 800cd06:	466a      	mov	r2, sp
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd10:	e882 0003 	stmia.w	r2, {r0, r1}
 800cd14:	f107 0308 	add.w	r3, r7, #8
 800cd18:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f003 f91a 	bl	800ff54 <SDMMC_Init>
 800cd20:	e008      	b.n	800cd34 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd26:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f003 f9e7 	bl	8010110 <SDMMC_CmdBlockLength>
 800cd42:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00c      	beq.n	800cd64 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a0a      	ldr	r2, [pc, #40]	@ (800cd78 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cd50:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cd6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	372c      	adds	r7, #44	@ 0x2c
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd90      	pop	{r4, r7, pc}
 800cd78:	1fe00fff 	.word	0x1fe00fff
 800cd7c:	55e63b89 	.word	0x55e63b89
 800cd80:	02faf080 	.word	0x02faf080
 800cd84:	017d7840 	.word	0x017d7840

0800cd88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cd94:	f107 030c 	add.w	r3, r7, #12
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fa40 	bl	800d220 <SD_SendStatus>
 800cda0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d005      	beq.n	800cdb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	0a5b      	lsrs	r3, r3, #9
 800cdb8:	f003 030f 	and.w	r3, r3, #15
 800cdbc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cdbe:	693b      	ldr	r3, [r7, #16]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3718      	adds	r7, #24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b090      	sub	sp, #64	@ 0x40
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cdd4:	f7f5 fde8 	bl	80029a8 <HAL_GetTick>
 800cdd8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f003 f911 	bl	8010006 <SDMMC_GetPowerState>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d102      	bne.n	800cdf0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cdea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cdee:	e0b5      	b.n	800cf5c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	d02e      	beq.n	800ce56 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f003 fb5c 	bl	80104ba <SDMMC_CmdSendCID>
 800ce02:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <SD_InitCard+0x46>
    {
      return errorstate;
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0c:	e0a6      	b.n	800cf5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2100      	movs	r1, #0
 800ce14:	4618      	mov	r0, r3
 800ce16:	f003 f93c 	bl	8010092 <SDMMC_GetResponse>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2104      	movs	r1, #4
 800ce26:	4618      	mov	r0, r3
 800ce28:	f003 f933 	bl	8010092 <SDMMC_GetResponse>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2108      	movs	r1, #8
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f003 f92a 	bl	8010092 <SDMMC_GetResponse>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	210c      	movs	r1, #12
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f003 f921 	bl	8010092 <SDMMC_GetResponse>
 800ce50:	4602      	mov	r2, r0
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce5a:	2b03      	cmp	r3, #3
 800ce5c:	d01d      	beq.n	800ce9a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ce5e:	e019      	b.n	800ce94 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f107 020a 	add.w	r2, r7, #10
 800ce68:	4611      	mov	r1, r2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f003 fb64 	bl	8010538 <SDMMC_CmdSetRelAdd>
 800ce70:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ce72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <SD_InitCard+0xb4>
      {
        return errorstate;
 800ce78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7a:	e06f      	b.n	800cf5c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ce7c:	f7f5 fd94 	bl	80029a8 <HAL_GetTick>
 800ce80:	4602      	mov	r2, r0
 800ce82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d902      	bls.n	800ce94 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ce8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce92:	e063      	b.n	800cf5c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ce94:	897b      	ldrh	r3, [r7, #10]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0e2      	beq.n	800ce60 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d036      	beq.n	800cf10 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cea2:	897b      	ldrh	r3, [r7, #10]
 800cea4:	461a      	mov	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceb2:	041b      	lsls	r3, r3, #16
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	f003 fb1e 	bl	80104f8 <SDMMC_CmdSendCSD>
 800cebc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <SD_InitCard+0x100>
    {
      return errorstate;
 800cec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec6:	e049      	b.n	800cf5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2100      	movs	r1, #0
 800cece:	4618      	mov	r0, r3
 800ced0:	f003 f8df 	bl	8010092 <SDMMC_GetResponse>
 800ced4:	4602      	mov	r2, r0
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2104      	movs	r1, #4
 800cee0:	4618      	mov	r0, r3
 800cee2:	f003 f8d6 	bl	8010092 <SDMMC_GetResponse>
 800cee6:	4602      	mov	r2, r0
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2108      	movs	r1, #8
 800cef2:	4618      	mov	r0, r3
 800cef4:	f003 f8cd 	bl	8010092 <SDMMC_GetResponse>
 800cef8:	4602      	mov	r2, r0
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	210c      	movs	r1, #12
 800cf04:	4618      	mov	r0, r3
 800cf06:	f003 f8c4 	bl	8010092 <SDMMC_GetResponse>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2104      	movs	r1, #4
 800cf16:	4618      	mov	r0, r3
 800cf18:	f003 f8bb 	bl	8010092 <SDMMC_GetResponse>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	0d1a      	lsrs	r2, r3, #20
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cf24:	f107 030c 	add.w	r3, r7, #12
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f7ff fb8c 	bl	800c648 <HAL_SD_GetCardCSD>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d002      	beq.n	800cf3c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cf3a:	e00f      	b.n	800cf5c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf44:	041b      	lsls	r3, r3, #16
 800cf46:	4619      	mov	r1, r3
 800cf48:	4610      	mov	r0, r2
 800cf4a:	f003 f9cd 	bl	80102e8 <SDMMC_CmdSelDesel>
 800cf4e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <SD_InitCard+0x192>
  {
    return errorstate;
 800cf56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf58:	e000      	b.n	800cf5c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3740      	adds	r7, #64	@ 0x40
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cf70:	2300      	movs	r3, #0
 800cf72:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cf74:	2300      	movs	r3, #0
 800cf76:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f003 f9d6 	bl	801032e <SDMMC_CmdGoIdleState>
 800cf82:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <SD_PowerON+0x2a>
  {
    return errorstate;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	e072      	b.n	800d074 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f003 f9e9 	bl	801036a <SDMMC_CmdOperCond>
 800cf98:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cfa0:	d10d      	bne.n	800cfbe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f003 f9be 	bl	801032e <SDMMC_CmdGoIdleState>
 800cfb2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d004      	beq.n	800cfc4 <SD_PowerON+0x60>
    {
      return errorstate;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	e05a      	b.n	800d074 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d137      	bne.n	800d03c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f003 f9e9 	bl	80103aa <SDMMC_CmdAppCommand>
 800cfd8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d02d      	beq.n	800d03c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfe0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cfe4:	e046      	b.n	800d074 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2100      	movs	r1, #0
 800cfec:	4618      	mov	r0, r3
 800cfee:	f003 f9dc 	bl	80103aa <SDMMC_CmdAppCommand>
 800cff2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d001      	beq.n	800cffe <SD_PowerON+0x9a>
    {
      return errorstate;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	e03a      	b.n	800d074 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	491e      	ldr	r1, [pc, #120]	@ (800d07c <SD_PowerON+0x118>)
 800d004:	4618      	mov	r0, r3
 800d006:	f003 f9f3 	bl	80103f0 <SDMMC_CmdAppOperCommand>
 800d00a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d012:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d016:	e02d      	b.n	800d074 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2100      	movs	r1, #0
 800d01e:	4618      	mov	r0, r3
 800d020:	f003 f837 	bl	8010092 <SDMMC_GetResponse>
 800d024:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	0fdb      	lsrs	r3, r3, #31
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d101      	bne.n	800d032 <SD_PowerON+0xce>
 800d02e:	2301      	movs	r3, #1
 800d030:	e000      	b.n	800d034 <SD_PowerON+0xd0>
 800d032:	2300      	movs	r3, #0
 800d034:	613b      	str	r3, [r7, #16]

    count++;
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	3301      	adds	r3, #1
 800d03a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d042:	4293      	cmp	r3, r2
 800d044:	d802      	bhi.n	800d04c <SD_PowerON+0xe8>
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d0cc      	beq.n	800cfe6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d052:	4293      	cmp	r3, r2
 800d054:	d902      	bls.n	800d05c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d056:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d05a:	e00b      	b.n	800d074 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d002      	beq.n	800d072 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2201      	movs	r2, #1
 800d070:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	c1100000 	.word	0xc1100000

0800d080 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b08c      	sub	sp, #48	@ 0x30
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d08a:	f7f5 fc8d 	bl	80029a8 <HAL_GetTick>
 800d08e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2100      	movs	r1, #0
 800d09a:	4618      	mov	r0, r3
 800d09c:	f002 fff9 	bl	8010092 <SDMMC_GetResponse>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0aa:	d102      	bne.n	800d0b2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d0ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d0b0:	e0b0      	b.n	800d214 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2140      	movs	r1, #64	@ 0x40
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f003 f829 	bl	8010110 <SDMMC_CmdBlockLength>
 800d0be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d005      	beq.n	800d0d2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	e0a0      	b.n	800d214 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0da:	041b      	lsls	r3, r3, #16
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4610      	mov	r0, r2
 800d0e0:	f003 f963 	bl	80103aa <SDMMC_CmdAppCommand>
 800d0e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d005      	beq.n	800d0f8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	e08d      	b.n	800d214 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0fc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d0fe:	2340      	movs	r3, #64	@ 0x40
 800d100:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d102:	2360      	movs	r3, #96	@ 0x60
 800d104:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d106:	2302      	movs	r3, #2
 800d108:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d10e:	2301      	movs	r3, #1
 800d110:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f107 0208 	add.w	r2, r7, #8
 800d11a:	4611      	mov	r1, r2
 800d11c:	4618      	mov	r0, r3
 800d11e:	f002 ffcb 	bl	80100b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4618      	mov	r0, r3
 800d128:	f003 fa4b 	bl	80105c2 <SDMMC_CmdStatusRegister>
 800d12c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d02b      	beq.n	800d18c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	e069      	b.n	800d214 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d146:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d013      	beq.n	800d176 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d14e:	2300      	movs	r3, #0
 800d150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d152:	e00d      	b.n	800d170 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4618      	mov	r0, r3
 800d15a:	f002 ff25 	bl	800ffa8 <SDMMC_ReadFIFO>
 800d15e:	4602      	mov	r2, r0
 800d160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d162:	601a      	str	r2, [r3, #0]
        pData++;
 800d164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d166:	3304      	adds	r3, #4
 800d168:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16c:	3301      	adds	r3, #1
 800d16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d172:	2b07      	cmp	r3, #7
 800d174:	d9ee      	bls.n	800d154 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d176:	f7f5 fc17 	bl	80029a8 <HAL_GetTick>
 800d17a:	4602      	mov	r2, r0
 800d17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d184:	d102      	bne.n	800d18c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d186:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d18a:	e043      	b.n	800d214 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d192:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d196:	2b00      	cmp	r3, #0
 800d198:	d0d2      	beq.n	800d140 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1a0:	f003 0308 	and.w	r3, r3, #8
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d1a8:	2308      	movs	r3, #8
 800d1aa:	e033      	b.n	800d214 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1b2:	f003 0302 	and.w	r3, r3, #2
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	e02a      	b.n	800d214 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1c4:	f003 0320 	and.w	r3, r3, #32
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d017      	beq.n	800d1fc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d1cc:	2320      	movs	r3, #32
 800d1ce:	e021      	b.n	800d214 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f002 fee7 	bl	800ffa8 <SDMMC_ReadFIFO>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1de:	601a      	str	r2, [r3, #0]
    pData++;
 800d1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1e6:	f7f5 fbdf 	bl	80029a8 <HAL_GetTick>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f4:	d102      	bne.n	800d1fc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d1f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1fa:	e00b      	b.n	800d214 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d202:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1e2      	bne.n	800d1d0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a03      	ldr	r2, [pc, #12]	@ (800d21c <SD_SendSDStatus+0x19c>)
 800d210:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3730      	adds	r7, #48	@ 0x30
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	18000f3a 	.word	0x18000f3a

0800d220 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d102      	bne.n	800d236 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d230:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d234:	e018      	b.n	800d268 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d23e:	041b      	lsls	r3, r3, #16
 800d240:	4619      	mov	r1, r3
 800d242:	4610      	mov	r0, r2
 800d244:	f003 f99a 	bl	801057c <SDMMC_CmdSendStatus>
 800d248:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	e009      	b.n	800d268 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2100      	movs	r1, #0
 800d25a:	4618      	mov	r0, r3
 800d25c:	f002 ff19 	bl	8010092 <SDMMC_GetResponse>
 800d260:	4602      	mov	r2, r0
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d278:	2300      	movs	r3, #0
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	2300      	movs	r3, #0
 800d27e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2100      	movs	r1, #0
 800d286:	4618      	mov	r0, r3
 800d288:	f002 ff03 	bl	8010092 <SDMMC_GetResponse>
 800d28c:	4603      	mov	r3, r0
 800d28e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d292:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d296:	d102      	bne.n	800d29e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d298:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d29c:	e02f      	b.n	800d2fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d29e:	f107 030c 	add.w	r3, r7, #12
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f879 	bl	800d39c <SD_FindSCR>
 800d2aa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	e023      	b.n	800d2fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01c      	beq.n	800d2fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2c8:	041b      	lsls	r3, r3, #16
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	f003 f86c 	bl	80103aa <SDMMC_CmdAppCommand>
 800d2d2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	e00f      	b.n	800d2fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2102      	movs	r1, #2
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f003 f8a3 	bl	8010430 <SDMMC_CmdBusWidth>
 800d2ea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	e003      	b.n	800d2fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	e001      	b.n	800d2fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b086      	sub	sp, #24
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d30e:	2300      	movs	r3, #0
 800d310:	60fb      	str	r3, [r7, #12]
 800d312:	2300      	movs	r3, #0
 800d314:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2100      	movs	r1, #0
 800d31c:	4618      	mov	r0, r3
 800d31e:	f002 feb8 	bl	8010092 <SDMMC_GetResponse>
 800d322:	4603      	mov	r3, r0
 800d324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d32c:	d102      	bne.n	800d334 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d32e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d332:	e02f      	b.n	800d394 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d334:	f107 030c 	add.w	r3, r7, #12
 800d338:	4619      	mov	r1, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f82e 	bl	800d39c <SD_FindSCR>
 800d340:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	e023      	b.n	800d394 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d352:	2b00      	cmp	r3, #0
 800d354:	d01c      	beq.n	800d390 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d35e:	041b      	lsls	r3, r3, #16
 800d360:	4619      	mov	r1, r3
 800d362:	4610      	mov	r0, r2
 800d364:	f003 f821 	bl	80103aa <SDMMC_CmdAppCommand>
 800d368:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	e00f      	b.n	800d394 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2100      	movs	r1, #0
 800d37a:	4618      	mov	r0, r3
 800d37c:	f003 f858 	bl	8010430 <SDMMC_CmdBusWidth>
 800d380:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	e003      	b.n	800d394 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d38c:	2300      	movs	r3, #0
 800d38e:	e001      	b.n	800d394 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d390:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d394:	4618      	mov	r0, r3
 800d396:	3718      	adds	r7, #24
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b08e      	sub	sp, #56	@ 0x38
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d3a6:	f7f5 faff 	bl	80029a8 <HAL_GetTick>
 800d3aa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	60bb      	str	r3, [r7, #8]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2108      	movs	r1, #8
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f002 fea4 	bl	8010110 <SDMMC_CmdBlockLength>
 800d3c8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d001      	beq.n	800d3d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d2:	e0ad      	b.n	800d530 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3dc:	041b      	lsls	r3, r3, #16
 800d3de:	4619      	mov	r1, r3
 800d3e0:	4610      	mov	r0, r2
 800d3e2:	f002 ffe2 	bl	80103aa <SDMMC_CmdAppCommand>
 800d3e6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f0:	e09e      	b.n	800d530 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d3f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d3f8:	2308      	movs	r3, #8
 800d3fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d3fc:	2330      	movs	r3, #48	@ 0x30
 800d3fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d400:	2302      	movs	r3, #2
 800d402:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d404:	2300      	movs	r3, #0
 800d406:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d408:	2301      	movs	r3, #1
 800d40a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f107 0210 	add.w	r2, r7, #16
 800d414:	4611      	mov	r1, r2
 800d416:	4618      	mov	r0, r3
 800d418:	f002 fe4e 	bl	80100b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4618      	mov	r0, r3
 800d422:	f003 f828 	bl	8010476 <SDMMC_CmdSendSCR>
 800d426:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d027      	beq.n	800d47e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d430:	e07e      	b.n	800d530 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d113      	bne.n	800d468 <SD_FindSCR+0xcc>
 800d440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d442:	2b00      	cmp	r3, #0
 800d444:	d110      	bne.n	800d468 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f002 fdac 	bl	800ffa8 <SDMMC_ReadFIFO>
 800d450:	4603      	mov	r3, r0
 800d452:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4618      	mov	r0, r3
 800d45a:	f002 fda5 	bl	800ffa8 <SDMMC_ReadFIFO>
 800d45e:	4603      	mov	r3, r0
 800d460:	60fb      	str	r3, [r7, #12]
      index++;
 800d462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d464:	3301      	adds	r3, #1
 800d466:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d468:	f7f5 fa9e 	bl	80029a8 <HAL_GetTick>
 800d46c:	4602      	mov	r2, r0
 800d46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d476:	d102      	bne.n	800d47e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d478:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d47c:	e058      	b.n	800d530 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d484:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d488:	4013      	ands	r3, r2
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d0d1      	beq.n	800d432 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d494:	f003 0308 	and.w	r3, r3, #8
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d005      	beq.n	800d4a8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2208      	movs	r2, #8
 800d4a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	e043      	b.n	800d530 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d005      	beq.n	800d4c2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d4be:	2302      	movs	r3, #2
 800d4c0:	e036      	b.n	800d530 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4c8:	f003 0320 	and.w	r3, r3, #32
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d005      	beq.n	800d4dc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2220      	movs	r2, #32
 800d4d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d4d8:	2320      	movs	r3, #32
 800d4da:	e029      	b.n	800d530 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a15      	ldr	r2, [pc, #84]	@ (800d538 <SD_FindSCR+0x19c>)
 800d4e2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	061a      	lsls	r2, r3, #24
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	021b      	lsls	r3, r3, #8
 800d4ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d4f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	0a1b      	lsrs	r3, r3, #8
 800d4f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	0e1b      	lsrs	r3, r3, #24
 800d500:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d504:	601a      	str	r2, [r3, #0]
    scr++;
 800d506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d508:	3304      	adds	r3, #4
 800d50a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	061a      	lsls	r2, r3, #24
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	021b      	lsls	r3, r3, #8
 800d514:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d518:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	0a1b      	lsrs	r3, r3, #8
 800d51e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d522:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	0e1b      	lsrs	r3, r3, #24
 800d528:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d52c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3738      	adds	r7, #56	@ 0x38
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	18000f3a 	.word	0x18000f3a

0800d53c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d548:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d54e:	2b1f      	cmp	r3, #31
 800d550:	d936      	bls.n	800d5c0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d552:	2300      	movs	r3, #0
 800d554:	617b      	str	r3, [r7, #20]
 800d556:	e027      	b.n	800d5a8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f002 fd23 	bl	800ffa8 <SDMMC_ReadFIFO>
 800d562:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	b2da      	uxtb	r2, r3
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	3301      	adds	r3, #1
 800d570:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	0a1b      	lsrs	r3, r3, #8
 800d576:	b2da      	uxtb	r2, r3
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	3301      	adds	r3, #1
 800d580:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	0c1b      	lsrs	r3, r3, #16
 800d586:	b2da      	uxtb	r2, r3
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	3301      	adds	r3, #1
 800d590:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	0e1b      	lsrs	r3, r3, #24
 800d596:	b2da      	uxtb	r2, r3
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	617b      	str	r3, [r7, #20]
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	2b07      	cmp	r3, #7
 800d5ac:	d9d4      	bls.n	800d558 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	693a      	ldr	r2, [r7, #16]
 800d5b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b8:	f1a3 0220 	sub.w	r2, r3, #32
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d5c0:	bf00      	nop
 800d5c2:	3718      	adds	r7, #24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b086      	sub	sp, #24
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	69db      	ldr	r3, [r3, #28]
 800d5d4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	2b1f      	cmp	r3, #31
 800d5dc:	d93a      	bls.n	800d654 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d5de:	2300      	movs	r3, #0
 800d5e0:	617b      	str	r3, [r7, #20]
 800d5e2:	e02b      	b.n	800d63c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	021a      	lsls	r2, r3, #8
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	3301      	adds	r3, #1
 800d600:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	041a      	lsls	r2, r3, #16
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	3301      	adds	r3, #1
 800d612:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	061a      	lsls	r2, r3, #24
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	3301      	adds	r3, #1
 800d624:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f107 020c 	add.w	r2, r7, #12
 800d62e:	4611      	mov	r1, r2
 800d630:	4618      	mov	r0, r3
 800d632:	f002 fcc6 	bl	800ffc2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	3301      	adds	r3, #1
 800d63a:	617b      	str	r3, [r7, #20]
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2b07      	cmp	r3, #7
 800d640:	d9d0      	bls.n	800d5e4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	693a      	ldr	r2, [r7, #16]
 800d646:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a1b      	ldr	r3, [r3, #32]
 800d64c:	f1a3 0220 	sub.w	r2, r3, #32
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	621a      	str	r2, [r3, #32]
  }
}
 800d654:	bf00      	nop
 800d656:	3718      	adds	r7, #24
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d678:	bf00      	nop
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e049      	b.n	800d752 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7f4 fe66 	bl	80023a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2202      	movs	r2, #2
 800d6dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	f000 fc58 	bl	800dfa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2201      	movs	r2, #1
 800d724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
	...

0800d75c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d001      	beq.n	800d774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d770:	2301      	movs	r3, #1
 800d772:	e05e      	b.n	800d832 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2202      	movs	r2, #2
 800d778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68da      	ldr	r2, [r3, #12]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f042 0201 	orr.w	r2, r2, #1
 800d78a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a2b      	ldr	r2, [pc, #172]	@ (800d840 <HAL_TIM_Base_Start_IT+0xe4>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d02c      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d79e:	d027      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a27      	ldr	r2, [pc, #156]	@ (800d844 <HAL_TIM_Base_Start_IT+0xe8>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d022      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a26      	ldr	r2, [pc, #152]	@ (800d848 <HAL_TIM_Base_Start_IT+0xec>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d01d      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a24      	ldr	r2, [pc, #144]	@ (800d84c <HAL_TIM_Base_Start_IT+0xf0>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d018      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a23      	ldr	r2, [pc, #140]	@ (800d850 <HAL_TIM_Base_Start_IT+0xf4>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d013      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a21      	ldr	r2, [pc, #132]	@ (800d854 <HAL_TIM_Base_Start_IT+0xf8>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d00e      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a20      	ldr	r2, [pc, #128]	@ (800d858 <HAL_TIM_Base_Start_IT+0xfc>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d009      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a1e      	ldr	r2, [pc, #120]	@ (800d85c <HAL_TIM_Base_Start_IT+0x100>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d004      	beq.n	800d7f0 <HAL_TIM_Base_Start_IT+0x94>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a1d      	ldr	r2, [pc, #116]	@ (800d860 <HAL_TIM_Base_Start_IT+0x104>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d115      	bne.n	800d81c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689a      	ldr	r2, [r3, #8]
 800d7f6:	4b1b      	ldr	r3, [pc, #108]	@ (800d864 <HAL_TIM_Base_Start_IT+0x108>)
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2b06      	cmp	r3, #6
 800d800:	d015      	beq.n	800d82e <HAL_TIM_Base_Start_IT+0xd2>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d808:	d011      	beq.n	800d82e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f042 0201 	orr.w	r2, r2, #1
 800d818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d81a:	e008      	b.n	800d82e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f042 0201 	orr.w	r2, r2, #1
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	e000      	b.n	800d830 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d82e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	40010000 	.word	0x40010000
 800d844:	40000400 	.word	0x40000400
 800d848:	40000800 	.word	0x40000800
 800d84c:	40000c00 	.word	0x40000c00
 800d850:	40010400 	.word	0x40010400
 800d854:	40001800 	.word	0x40001800
 800d858:	40014000 	.word	0x40014000
 800d85c:	4000e000 	.word	0x4000e000
 800d860:	4000e400 	.word	0x4000e400
 800d864:	00010007 	.word	0x00010007

0800d868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e049      	b.n	800d90e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	d106      	bne.n	800d894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f841 	bl	800d916 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2202      	movs	r2, #2
 800d898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3304      	adds	r3, #4
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	f000 fb7a 	bl	800dfa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3708      	adds	r7, #8
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d916:	b480      	push	{r7}
 800d918:	b083      	sub	sp, #12
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d91e:	bf00      	nop
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b084      	sub	sp, #16
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f003 0302 	and.w	r3, r3, #2
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d020      	beq.n	800d98e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f003 0302 	and.w	r3, r3, #2
 800d952:	2b00      	cmp	r3, #0
 800d954:	d01b      	beq.n	800d98e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f06f 0202 	mvn.w	r2, #2
 800d95e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	f003 0303 	and.w	r3, r3, #3
 800d970:	2b00      	cmp	r3, #0
 800d972:	d003      	beq.n	800d97c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 faf5 	bl	800df64 <HAL_TIM_IC_CaptureCallback>
 800d97a:	e005      	b.n	800d988 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 fae7 	bl	800df50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 faf8 	bl	800df78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	f003 0304 	and.w	r3, r3, #4
 800d994:	2b00      	cmp	r3, #0
 800d996:	d020      	beq.n	800d9da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f003 0304 	and.w	r3, r3, #4
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d01b      	beq.n	800d9da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f06f 0204 	mvn.w	r2, #4
 800d9aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2202      	movs	r2, #2
 800d9b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d003      	beq.n	800d9c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 facf 	bl	800df64 <HAL_TIM_IC_CaptureCallback>
 800d9c6:	e005      	b.n	800d9d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 fac1 	bl	800df50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 fad2 	bl	800df78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	f003 0308 	and.w	r3, r3, #8
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d020      	beq.n	800da26 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f003 0308 	and.w	r3, r3, #8
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d01b      	beq.n	800da26 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f06f 0208 	mvn.w	r2, #8
 800d9f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2204      	movs	r2, #4
 800d9fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	69db      	ldr	r3, [r3, #28]
 800da04:	f003 0303 	and.w	r3, r3, #3
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 faa9 	bl	800df64 <HAL_TIM_IC_CaptureCallback>
 800da12:	e005      	b.n	800da20 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 fa9b 	bl	800df50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 faac 	bl	800df78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	f003 0310 	and.w	r3, r3, #16
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d020      	beq.n	800da72 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f003 0310 	and.w	r3, r3, #16
 800da36:	2b00      	cmp	r3, #0
 800da38:	d01b      	beq.n	800da72 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f06f 0210 	mvn.w	r2, #16
 800da42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2208      	movs	r2, #8
 800da48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	69db      	ldr	r3, [r3, #28]
 800da50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da54:	2b00      	cmp	r3, #0
 800da56:	d003      	beq.n	800da60 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 fa83 	bl	800df64 <HAL_TIM_IC_CaptureCallback>
 800da5e:	e005      	b.n	800da6c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fa75 	bl	800df50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fa86 	bl	800df78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2200      	movs	r2, #0
 800da70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00c      	beq.n	800da96 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f003 0301 	and.w	r3, r3, #1
 800da82:	2b00      	cmp	r3, #0
 800da84:	d007      	beq.n	800da96 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f06f 0201 	mvn.w	r2, #1
 800da8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7f3 ffe9 	bl	8001a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d104      	bne.n	800daaa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00c      	beq.n	800dac4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d007      	beq.n	800dac4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 ffc6 	bl	800ea50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00c      	beq.n	800dae8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d007      	beq.n	800dae8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 ffbe 	bl	800ea64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00c      	beq.n	800db0c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d007      	beq.n	800db0c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800db04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fa40 	bl	800df8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	f003 0320 	and.w	r3, r3, #32
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00c      	beq.n	800db30 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f003 0320 	and.w	r3, r3, #32
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d007      	beq.n	800db30 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f06f 0220 	mvn.w	r2, #32
 800db28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 ff86 	bl	800ea3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db30:	bf00      	nop
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db44:	2300      	movs	r3, #0
 800db46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d101      	bne.n	800db56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db52:	2302      	movs	r3, #2
 800db54:	e0ff      	b.n	800dd56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b14      	cmp	r3, #20
 800db62:	f200 80f0 	bhi.w	800dd46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db66:	a201      	add	r2, pc, #4	@ (adr r2, 800db6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6c:	0800dbc1 	.word	0x0800dbc1
 800db70:	0800dd47 	.word	0x0800dd47
 800db74:	0800dd47 	.word	0x0800dd47
 800db78:	0800dd47 	.word	0x0800dd47
 800db7c:	0800dc01 	.word	0x0800dc01
 800db80:	0800dd47 	.word	0x0800dd47
 800db84:	0800dd47 	.word	0x0800dd47
 800db88:	0800dd47 	.word	0x0800dd47
 800db8c:	0800dc43 	.word	0x0800dc43
 800db90:	0800dd47 	.word	0x0800dd47
 800db94:	0800dd47 	.word	0x0800dd47
 800db98:	0800dd47 	.word	0x0800dd47
 800db9c:	0800dc83 	.word	0x0800dc83
 800dba0:	0800dd47 	.word	0x0800dd47
 800dba4:	0800dd47 	.word	0x0800dd47
 800dba8:	0800dd47 	.word	0x0800dd47
 800dbac:	0800dcc5 	.word	0x0800dcc5
 800dbb0:	0800dd47 	.word	0x0800dd47
 800dbb4:	0800dd47 	.word	0x0800dd47
 800dbb8:	0800dd47 	.word	0x0800dd47
 800dbbc:	0800dd05 	.word	0x0800dd05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68b9      	ldr	r1, [r7, #8]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 fa9c 	bl	800e104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	699a      	ldr	r2, [r3, #24]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f042 0208 	orr.w	r2, r2, #8
 800dbda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f022 0204 	bic.w	r2, r2, #4
 800dbea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6999      	ldr	r1, [r3, #24]
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	691a      	ldr	r2, [r3, #16]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	430a      	orrs	r2, r1
 800dbfc:	619a      	str	r2, [r3, #24]
      break;
 800dbfe:	e0a5      	b.n	800dd4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	68b9      	ldr	r1, [r7, #8]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fb0c 	bl	800e224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	699a      	ldr	r2, [r3, #24]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	699a      	ldr	r2, [r3, #24]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6999      	ldr	r1, [r3, #24]
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	021a      	lsls	r2, r3, #8
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	430a      	orrs	r2, r1
 800dc3e:	619a      	str	r2, [r3, #24]
      break;
 800dc40:	e084      	b.n	800dd4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68b9      	ldr	r1, [r7, #8]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 fb75 	bl	800e338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	69da      	ldr	r2, [r3, #28]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f042 0208 	orr.w	r2, r2, #8
 800dc5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	69da      	ldr	r2, [r3, #28]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f022 0204 	bic.w	r2, r2, #4
 800dc6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	69d9      	ldr	r1, [r3, #28]
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	691a      	ldr	r2, [r3, #16]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	430a      	orrs	r2, r1
 800dc7e:	61da      	str	r2, [r3, #28]
      break;
 800dc80:	e064      	b.n	800dd4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68b9      	ldr	r1, [r7, #8]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 fbdd 	bl	800e448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	69da      	ldr	r2, [r3, #28]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	69da      	ldr	r2, [r3, #28]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dcac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	69d9      	ldr	r1, [r3, #28]
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	021a      	lsls	r2, r3, #8
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	430a      	orrs	r2, r1
 800dcc0:	61da      	str	r2, [r3, #28]
      break;
 800dcc2:	e043      	b.n	800dd4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	68b9      	ldr	r1, [r7, #8]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 fc26 	bl	800e51c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f042 0208 	orr.w	r2, r2, #8
 800dcde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f022 0204 	bic.w	r2, r2, #4
 800dcee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	691a      	ldr	r2, [r3, #16]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	430a      	orrs	r2, r1
 800dd00:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd02:	e023      	b.n	800dd4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68b9      	ldr	r1, [r7, #8]
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f000 fc6a 	bl	800e5e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	021a      	lsls	r2, r3, #8
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	430a      	orrs	r2, r1
 800dd42:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd44:	e002      	b.n	800dd4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd46:	2301      	movs	r3, #1
 800dd48:	75fb      	strb	r3, [r7, #23]
      break;
 800dd4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop

0800dd60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d101      	bne.n	800dd7c <HAL_TIM_ConfigClockSource+0x1c>
 800dd78:	2302      	movs	r3, #2
 800dd7a:	e0dc      	b.n	800df36 <HAL_TIM_ConfigClockSource+0x1d6>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2202      	movs	r2, #2
 800dd88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd94:	68ba      	ldr	r2, [r7, #8]
 800dd96:	4b6a      	ldr	r3, [pc, #424]	@ (800df40 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dd98:	4013      	ands	r3, r2
 800dd9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dda2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68ba      	ldr	r2, [r7, #8]
 800ddaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a64      	ldr	r2, [pc, #400]	@ (800df44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	f000 80a9 	beq.w	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800ddb8:	4a62      	ldr	r2, [pc, #392]	@ (800df44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	f200 80ae 	bhi.w	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800ddc0:	4a61      	ldr	r2, [pc, #388]	@ (800df48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	f000 80a1 	beq.w	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800ddc8:	4a5f      	ldr	r2, [pc, #380]	@ (800df48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	f200 80a6 	bhi.w	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800ddd0:	4a5e      	ldr	r2, [pc, #376]	@ (800df4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	f000 8099 	beq.w	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800ddd8:	4a5c      	ldr	r2, [pc, #368]	@ (800df4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	f200 809e 	bhi.w	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800dde0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dde4:	f000 8091 	beq.w	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800dde8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ddec:	f200 8096 	bhi.w	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800ddf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddf4:	f000 8089 	beq.w	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800ddf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddfc:	f200 808e 	bhi.w	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de04:	d03e      	beq.n	800de84 <HAL_TIM_ConfigClockSource+0x124>
 800de06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de0a:	f200 8087 	bhi.w	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de12:	f000 8086 	beq.w	800df22 <HAL_TIM_ConfigClockSource+0x1c2>
 800de16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de1a:	d87f      	bhi.n	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de1c:	2b70      	cmp	r3, #112	@ 0x70
 800de1e:	d01a      	beq.n	800de56 <HAL_TIM_ConfigClockSource+0xf6>
 800de20:	2b70      	cmp	r3, #112	@ 0x70
 800de22:	d87b      	bhi.n	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de24:	2b60      	cmp	r3, #96	@ 0x60
 800de26:	d050      	beq.n	800deca <HAL_TIM_ConfigClockSource+0x16a>
 800de28:	2b60      	cmp	r3, #96	@ 0x60
 800de2a:	d877      	bhi.n	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de2c:	2b50      	cmp	r3, #80	@ 0x50
 800de2e:	d03c      	beq.n	800deaa <HAL_TIM_ConfigClockSource+0x14a>
 800de30:	2b50      	cmp	r3, #80	@ 0x50
 800de32:	d873      	bhi.n	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de34:	2b40      	cmp	r3, #64	@ 0x40
 800de36:	d058      	beq.n	800deea <HAL_TIM_ConfigClockSource+0x18a>
 800de38:	2b40      	cmp	r3, #64	@ 0x40
 800de3a:	d86f      	bhi.n	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de3c:	2b30      	cmp	r3, #48	@ 0x30
 800de3e:	d064      	beq.n	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800de40:	2b30      	cmp	r3, #48	@ 0x30
 800de42:	d86b      	bhi.n	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de44:	2b20      	cmp	r3, #32
 800de46:	d060      	beq.n	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800de48:	2b20      	cmp	r3, #32
 800de4a:	d867      	bhi.n	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d05c      	beq.n	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800de50:	2b10      	cmp	r3, #16
 800de52:	d05a      	beq.n	800df0a <HAL_TIM_ConfigClockSource+0x1aa>
 800de54:	e062      	b.n	800df1c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de66:	f000 fca1 	bl	800e7ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800de78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	609a      	str	r2, [r3, #8]
      break;
 800de82:	e04f      	b.n	800df24 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de94:	f000 fc8a 	bl	800e7ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	689a      	ldr	r2, [r3, #8]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dea6:	609a      	str	r2, [r3, #8]
      break;
 800dea8:	e03c      	b.n	800df24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800deb6:	461a      	mov	r2, r3
 800deb8:	f000 fbfa 	bl	800e6b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2150      	movs	r1, #80	@ 0x50
 800dec2:	4618      	mov	r0, r3
 800dec4:	f000 fc54 	bl	800e770 <TIM_ITRx_SetConfig>
      break;
 800dec8:	e02c      	b.n	800df24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ded6:	461a      	mov	r2, r3
 800ded8:	f000 fc19 	bl	800e70e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2160      	movs	r1, #96	@ 0x60
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 fc44 	bl	800e770 <TIM_ITRx_SetConfig>
      break;
 800dee8:	e01c      	b.n	800df24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800def6:	461a      	mov	r2, r3
 800def8:	f000 fbda 	bl	800e6b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2140      	movs	r1, #64	@ 0x40
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fc34 	bl	800e770 <TIM_ITRx_SetConfig>
      break;
 800df08:	e00c      	b.n	800df24 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4619      	mov	r1, r3
 800df14:	4610      	mov	r0, r2
 800df16:	f000 fc2b 	bl	800e770 <TIM_ITRx_SetConfig>
      break;
 800df1a:	e003      	b.n	800df24 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800df1c:	2301      	movs	r3, #1
 800df1e:	73fb      	strb	r3, [r7, #15]
      break;
 800df20:	e000      	b.n	800df24 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800df22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df34:	7bfb      	ldrb	r3, [r7, #15]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	ffceff88 	.word	0xffceff88
 800df44:	00100040 	.word	0x00100040
 800df48:	00100030 	.word	0x00100030
 800df4c:	00100020 	.word	0x00100020

0800df50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df58:	bf00      	nop
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df6c:	bf00      	nop
 800df6e:	370c      	adds	r7, #12
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df80:	bf00      	nop
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a4a      	ldr	r2, [pc, #296]	@ (800e0dc <TIM_Base_SetConfig+0x13c>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d013      	beq.n	800dfe0 <TIM_Base_SetConfig+0x40>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfbe:	d00f      	beq.n	800dfe0 <TIM_Base_SetConfig+0x40>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a47      	ldr	r2, [pc, #284]	@ (800e0e0 <TIM_Base_SetConfig+0x140>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d00b      	beq.n	800dfe0 <TIM_Base_SetConfig+0x40>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a46      	ldr	r2, [pc, #280]	@ (800e0e4 <TIM_Base_SetConfig+0x144>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d007      	beq.n	800dfe0 <TIM_Base_SetConfig+0x40>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a45      	ldr	r2, [pc, #276]	@ (800e0e8 <TIM_Base_SetConfig+0x148>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d003      	beq.n	800dfe0 <TIM_Base_SetConfig+0x40>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a44      	ldr	r2, [pc, #272]	@ (800e0ec <TIM_Base_SetConfig+0x14c>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d108      	bne.n	800dff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	4313      	orrs	r3, r2
 800dff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	4a39      	ldr	r2, [pc, #228]	@ (800e0dc <TIM_Base_SetConfig+0x13c>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d027      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e000:	d023      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a36      	ldr	r2, [pc, #216]	@ (800e0e0 <TIM_Base_SetConfig+0x140>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d01f      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a35      	ldr	r2, [pc, #212]	@ (800e0e4 <TIM_Base_SetConfig+0x144>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d01b      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a34      	ldr	r2, [pc, #208]	@ (800e0e8 <TIM_Base_SetConfig+0x148>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d017      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a33      	ldr	r2, [pc, #204]	@ (800e0ec <TIM_Base_SetConfig+0x14c>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d013      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a32      	ldr	r2, [pc, #200]	@ (800e0f0 <TIM_Base_SetConfig+0x150>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d00f      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a31      	ldr	r2, [pc, #196]	@ (800e0f4 <TIM_Base_SetConfig+0x154>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d00b      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a30      	ldr	r2, [pc, #192]	@ (800e0f8 <TIM_Base_SetConfig+0x158>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d007      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a2f      	ldr	r2, [pc, #188]	@ (800e0fc <TIM_Base_SetConfig+0x15c>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d003      	beq.n	800e04a <TIM_Base_SetConfig+0xaa>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4a2e      	ldr	r2, [pc, #184]	@ (800e100 <TIM_Base_SetConfig+0x160>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d108      	bne.n	800e05c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	4313      	orrs	r3, r2
 800e05a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	4313      	orrs	r3, r2
 800e068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	689a      	ldr	r2, [r3, #8]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4a16      	ldr	r2, [pc, #88]	@ (800e0dc <TIM_Base_SetConfig+0x13c>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d00f      	beq.n	800e0a8 <TIM_Base_SetConfig+0x108>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a18      	ldr	r2, [pc, #96]	@ (800e0ec <TIM_Base_SetConfig+0x14c>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d00b      	beq.n	800e0a8 <TIM_Base_SetConfig+0x108>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	4a17      	ldr	r2, [pc, #92]	@ (800e0f0 <TIM_Base_SetConfig+0x150>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d007      	beq.n	800e0a8 <TIM_Base_SetConfig+0x108>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	4a16      	ldr	r2, [pc, #88]	@ (800e0f4 <TIM_Base_SetConfig+0x154>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d003      	beq.n	800e0a8 <TIM_Base_SetConfig+0x108>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4a15      	ldr	r2, [pc, #84]	@ (800e0f8 <TIM_Base_SetConfig+0x158>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d103      	bne.n	800e0b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	691a      	ldr	r2, [r3, #16]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	f003 0301 	and.w	r3, r3, #1
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d105      	bne.n	800e0ce <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	f023 0201 	bic.w	r2, r3, #1
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	611a      	str	r2, [r3, #16]
  }
}
 800e0ce:	bf00      	nop
 800e0d0:	3714      	adds	r7, #20
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	40010000 	.word	0x40010000
 800e0e0:	40000400 	.word	0x40000400
 800e0e4:	40000800 	.word	0x40000800
 800e0e8:	40000c00 	.word	0x40000c00
 800e0ec:	40010400 	.word	0x40010400
 800e0f0:	40014000 	.word	0x40014000
 800e0f4:	40014400 	.word	0x40014400
 800e0f8:	40014800 	.word	0x40014800
 800e0fc:	4000e000 	.word	0x4000e000
 800e100:	4000e400 	.word	0x4000e400

0800e104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e104:	b480      	push	{r7}
 800e106:	b087      	sub	sp, #28
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a1b      	ldr	r3, [r3, #32]
 800e118:	f023 0201 	bic.w	r2, r3, #1
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	699b      	ldr	r3, [r3, #24]
 800e12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	4b37      	ldr	r3, [pc, #220]	@ (800e20c <TIM_OC1_SetConfig+0x108>)
 800e130:	4013      	ands	r3, r2
 800e132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f023 0303 	bic.w	r3, r3, #3
 800e13a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	4313      	orrs	r3, r2
 800e144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	f023 0302 	bic.w	r3, r3, #2
 800e14c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	697a      	ldr	r2, [r7, #20]
 800e154:	4313      	orrs	r3, r2
 800e156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4a2d      	ldr	r2, [pc, #180]	@ (800e210 <TIM_OC1_SetConfig+0x10c>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d00f      	beq.n	800e180 <TIM_OC1_SetConfig+0x7c>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4a2c      	ldr	r2, [pc, #176]	@ (800e214 <TIM_OC1_SetConfig+0x110>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d00b      	beq.n	800e180 <TIM_OC1_SetConfig+0x7c>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4a2b      	ldr	r2, [pc, #172]	@ (800e218 <TIM_OC1_SetConfig+0x114>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d007      	beq.n	800e180 <TIM_OC1_SetConfig+0x7c>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a2a      	ldr	r2, [pc, #168]	@ (800e21c <TIM_OC1_SetConfig+0x118>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d003      	beq.n	800e180 <TIM_OC1_SetConfig+0x7c>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	4a29      	ldr	r2, [pc, #164]	@ (800e220 <TIM_OC1_SetConfig+0x11c>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d10c      	bne.n	800e19a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	f023 0308 	bic.w	r3, r3, #8
 800e186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	697a      	ldr	r2, [r7, #20]
 800e18e:	4313      	orrs	r3, r2
 800e190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	f023 0304 	bic.w	r3, r3, #4
 800e198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4a1c      	ldr	r2, [pc, #112]	@ (800e210 <TIM_OC1_SetConfig+0x10c>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d00f      	beq.n	800e1c2 <TIM_OC1_SetConfig+0xbe>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	4a1b      	ldr	r2, [pc, #108]	@ (800e214 <TIM_OC1_SetConfig+0x110>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d00b      	beq.n	800e1c2 <TIM_OC1_SetConfig+0xbe>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4a1a      	ldr	r2, [pc, #104]	@ (800e218 <TIM_OC1_SetConfig+0x114>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d007      	beq.n	800e1c2 <TIM_OC1_SetConfig+0xbe>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4a19      	ldr	r2, [pc, #100]	@ (800e21c <TIM_OC1_SetConfig+0x118>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d003      	beq.n	800e1c2 <TIM_OC1_SetConfig+0xbe>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4a18      	ldr	r2, [pc, #96]	@ (800e220 <TIM_OC1_SetConfig+0x11c>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d111      	bne.n	800e1e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	695b      	ldr	r3, [r3, #20]
 800e1d6:	693a      	ldr	r2, [r7, #16]
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	699b      	ldr	r3, [r3, #24]
 800e1e0:	693a      	ldr	r2, [r7, #16]
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	693a      	ldr	r2, [r7, #16]
 800e1ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	685a      	ldr	r2, [r3, #4]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	697a      	ldr	r2, [r7, #20]
 800e1fe:	621a      	str	r2, [r3, #32]
}
 800e200:	bf00      	nop
 800e202:	371c      	adds	r7, #28
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr
 800e20c:	fffeff8f 	.word	0xfffeff8f
 800e210:	40010000 	.word	0x40010000
 800e214:	40010400 	.word	0x40010400
 800e218:	40014000 	.word	0x40014000
 800e21c:	40014400 	.word	0x40014400
 800e220:	40014800 	.word	0x40014800

0800e224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e224:	b480      	push	{r7}
 800e226:	b087      	sub	sp, #28
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	f023 0210 	bic.w	r2, r3, #16
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	4b34      	ldr	r3, [pc, #208]	@ (800e320 <TIM_OC2_SetConfig+0xfc>)
 800e250:	4013      	ands	r3, r2
 800e252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e25a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	021b      	lsls	r3, r3, #8
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	4313      	orrs	r3, r2
 800e266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	f023 0320 	bic.w	r3, r3, #32
 800e26e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	011b      	lsls	r3, r3, #4
 800e276:	697a      	ldr	r2, [r7, #20]
 800e278:	4313      	orrs	r3, r2
 800e27a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a29      	ldr	r2, [pc, #164]	@ (800e324 <TIM_OC2_SetConfig+0x100>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d003      	beq.n	800e28c <TIM_OC2_SetConfig+0x68>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4a28      	ldr	r2, [pc, #160]	@ (800e328 <TIM_OC2_SetConfig+0x104>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d10d      	bne.n	800e2a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	011b      	lsls	r3, r3, #4
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	4313      	orrs	r3, r2
 800e29e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a1e      	ldr	r2, [pc, #120]	@ (800e324 <TIM_OC2_SetConfig+0x100>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00f      	beq.n	800e2d0 <TIM_OC2_SetConfig+0xac>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a1d      	ldr	r2, [pc, #116]	@ (800e328 <TIM_OC2_SetConfig+0x104>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d00b      	beq.n	800e2d0 <TIM_OC2_SetConfig+0xac>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a1c      	ldr	r2, [pc, #112]	@ (800e32c <TIM_OC2_SetConfig+0x108>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d007      	beq.n	800e2d0 <TIM_OC2_SetConfig+0xac>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a1b      	ldr	r2, [pc, #108]	@ (800e330 <TIM_OC2_SetConfig+0x10c>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d003      	beq.n	800e2d0 <TIM_OC2_SetConfig+0xac>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e334 <TIM_OC2_SetConfig+0x110>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d113      	bne.n	800e2f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	693a      	ldr	r2, [r7, #16]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	699b      	ldr	r3, [r3, #24]
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	693a      	ldr	r2, [r7, #16]
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	685a      	ldr	r2, [r3, #4]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	697a      	ldr	r2, [r7, #20]
 800e310:	621a      	str	r2, [r3, #32]
}
 800e312:	bf00      	nop
 800e314:	371c      	adds	r7, #28
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop
 800e320:	feff8fff 	.word	0xfeff8fff
 800e324:	40010000 	.word	0x40010000
 800e328:	40010400 	.word	0x40010400
 800e32c:	40014000 	.word	0x40014000
 800e330:	40014400 	.word	0x40014400
 800e334:	40014800 	.word	0x40014800

0800e338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e338:	b480      	push	{r7}
 800e33a:	b087      	sub	sp, #28
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a1b      	ldr	r3, [r3, #32]
 800e34c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	4b33      	ldr	r3, [pc, #204]	@ (800e430 <TIM_OC3_SetConfig+0xf8>)
 800e364:	4013      	ands	r3, r2
 800e366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f023 0303 	bic.w	r3, r3, #3
 800e36e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	68fa      	ldr	r2, [r7, #12]
 800e376:	4313      	orrs	r3, r2
 800e378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	021b      	lsls	r3, r3, #8
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	4313      	orrs	r3, r2
 800e38c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4a28      	ldr	r2, [pc, #160]	@ (800e434 <TIM_OC3_SetConfig+0xfc>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d003      	beq.n	800e39e <TIM_OC3_SetConfig+0x66>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a27      	ldr	r2, [pc, #156]	@ (800e438 <TIM_OC3_SetConfig+0x100>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d10d      	bne.n	800e3ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e3a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	021b      	lsls	r3, r3, #8
 800e3ac:	697a      	ldr	r2, [r7, #20]
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e3b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4a1d      	ldr	r2, [pc, #116]	@ (800e434 <TIM_OC3_SetConfig+0xfc>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d00f      	beq.n	800e3e2 <TIM_OC3_SetConfig+0xaa>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e438 <TIM_OC3_SetConfig+0x100>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d00b      	beq.n	800e3e2 <TIM_OC3_SetConfig+0xaa>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4a1b      	ldr	r2, [pc, #108]	@ (800e43c <TIM_OC3_SetConfig+0x104>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d007      	beq.n	800e3e2 <TIM_OC3_SetConfig+0xaa>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4a1a      	ldr	r2, [pc, #104]	@ (800e440 <TIM_OC3_SetConfig+0x108>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d003      	beq.n	800e3e2 <TIM_OC3_SetConfig+0xaa>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a19      	ldr	r2, [pc, #100]	@ (800e444 <TIM_OC3_SetConfig+0x10c>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d113      	bne.n	800e40a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	695b      	ldr	r3, [r3, #20]
 800e3f6:	011b      	lsls	r3, r3, #4
 800e3f8:	693a      	ldr	r2, [r7, #16]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	011b      	lsls	r3, r3, #4
 800e404:	693a      	ldr	r2, [r7, #16]
 800e406:	4313      	orrs	r3, r2
 800e408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	693a      	ldr	r2, [r7, #16]
 800e40e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	685a      	ldr	r2, [r3, #4]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	697a      	ldr	r2, [r7, #20]
 800e422:	621a      	str	r2, [r3, #32]
}
 800e424:	bf00      	nop
 800e426:	371c      	adds	r7, #28
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	fffeff8f 	.word	0xfffeff8f
 800e434:	40010000 	.word	0x40010000
 800e438:	40010400 	.word	0x40010400
 800e43c:	40014000 	.word	0x40014000
 800e440:	40014400 	.word	0x40014400
 800e444:	40014800 	.word	0x40014800

0800e448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e448:	b480      	push	{r7}
 800e44a:	b087      	sub	sp, #28
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a1b      	ldr	r3, [r3, #32]
 800e456:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6a1b      	ldr	r3, [r3, #32]
 800e45c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	4b24      	ldr	r3, [pc, #144]	@ (800e504 <TIM_OC4_SetConfig+0xbc>)
 800e474:	4013      	ands	r3, r2
 800e476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e47e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	021b      	lsls	r3, r3, #8
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	4313      	orrs	r3, r2
 800e48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	031b      	lsls	r3, r3, #12
 800e49a:	693a      	ldr	r2, [r7, #16]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a19      	ldr	r2, [pc, #100]	@ (800e508 <TIM_OC4_SetConfig+0xc0>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d00f      	beq.n	800e4c8 <TIM_OC4_SetConfig+0x80>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a18      	ldr	r2, [pc, #96]	@ (800e50c <TIM_OC4_SetConfig+0xc4>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d00b      	beq.n	800e4c8 <TIM_OC4_SetConfig+0x80>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a17      	ldr	r2, [pc, #92]	@ (800e510 <TIM_OC4_SetConfig+0xc8>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d007      	beq.n	800e4c8 <TIM_OC4_SetConfig+0x80>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a16      	ldr	r2, [pc, #88]	@ (800e514 <TIM_OC4_SetConfig+0xcc>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d003      	beq.n	800e4c8 <TIM_OC4_SetConfig+0x80>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4a15      	ldr	r2, [pc, #84]	@ (800e518 <TIM_OC4_SetConfig+0xd0>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d109      	bne.n	800e4dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e4ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	695b      	ldr	r3, [r3, #20]
 800e4d4:	019b      	lsls	r3, r3, #6
 800e4d6:	697a      	ldr	r2, [r7, #20]
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	697a      	ldr	r2, [r7, #20]
 800e4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	685a      	ldr	r2, [r3, #4]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	693a      	ldr	r2, [r7, #16]
 800e4f4:	621a      	str	r2, [r3, #32]
}
 800e4f6:	bf00      	nop
 800e4f8:	371c      	adds	r7, #28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	feff8fff 	.word	0xfeff8fff
 800e508:	40010000 	.word	0x40010000
 800e50c:	40010400 	.word	0x40010400
 800e510:	40014000 	.word	0x40014000
 800e514:	40014400 	.word	0x40014400
 800e518:	40014800 	.word	0x40014800

0800e51c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b087      	sub	sp, #28
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6a1b      	ldr	r3, [r3, #32]
 800e52a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a1b      	ldr	r3, [r3, #32]
 800e530:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e544:	68fa      	ldr	r2, [r7, #12]
 800e546:	4b21      	ldr	r3, [pc, #132]	@ (800e5cc <TIM_OC5_SetConfig+0xb0>)
 800e548:	4013      	ands	r3, r2
 800e54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	4313      	orrs	r3, r2
 800e554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e55c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	041b      	lsls	r3, r3, #16
 800e564:	693a      	ldr	r2, [r7, #16]
 800e566:	4313      	orrs	r3, r2
 800e568:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a18      	ldr	r2, [pc, #96]	@ (800e5d0 <TIM_OC5_SetConfig+0xb4>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d00f      	beq.n	800e592 <TIM_OC5_SetConfig+0x76>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4a17      	ldr	r2, [pc, #92]	@ (800e5d4 <TIM_OC5_SetConfig+0xb8>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d00b      	beq.n	800e592 <TIM_OC5_SetConfig+0x76>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4a16      	ldr	r2, [pc, #88]	@ (800e5d8 <TIM_OC5_SetConfig+0xbc>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d007      	beq.n	800e592 <TIM_OC5_SetConfig+0x76>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4a15      	ldr	r2, [pc, #84]	@ (800e5dc <TIM_OC5_SetConfig+0xc0>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d003      	beq.n	800e592 <TIM_OC5_SetConfig+0x76>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4a14      	ldr	r2, [pc, #80]	@ (800e5e0 <TIM_OC5_SetConfig+0xc4>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d109      	bne.n	800e5a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e598:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	695b      	ldr	r3, [r3, #20]
 800e59e:	021b      	lsls	r3, r3, #8
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	697a      	ldr	r2, [r7, #20]
 800e5aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	685a      	ldr	r2, [r3, #4]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	693a      	ldr	r2, [r7, #16]
 800e5be:	621a      	str	r2, [r3, #32]
}
 800e5c0:	bf00      	nop
 800e5c2:	371c      	adds	r7, #28
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	fffeff8f 	.word	0xfffeff8f
 800e5d0:	40010000 	.word	0x40010000
 800e5d4:	40010400 	.word	0x40010400
 800e5d8:	40014000 	.word	0x40014000
 800e5dc:	40014400 	.word	0x40014400
 800e5e0:	40014800 	.word	0x40014800

0800e5e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b087      	sub	sp, #28
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a1b      	ldr	r3, [r3, #32]
 800e5f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6a1b      	ldr	r3, [r3, #32]
 800e5f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e60c:	68fa      	ldr	r2, [r7, #12]
 800e60e:	4b22      	ldr	r3, [pc, #136]	@ (800e698 <TIM_OC6_SetConfig+0xb4>)
 800e610:	4013      	ands	r3, r2
 800e612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	021b      	lsls	r3, r3, #8
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	051b      	lsls	r3, r3, #20
 800e62e:	693a      	ldr	r2, [r7, #16]
 800e630:	4313      	orrs	r3, r2
 800e632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a19      	ldr	r2, [pc, #100]	@ (800e69c <TIM_OC6_SetConfig+0xb8>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d00f      	beq.n	800e65c <TIM_OC6_SetConfig+0x78>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a18      	ldr	r2, [pc, #96]	@ (800e6a0 <TIM_OC6_SetConfig+0xbc>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d00b      	beq.n	800e65c <TIM_OC6_SetConfig+0x78>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a17      	ldr	r2, [pc, #92]	@ (800e6a4 <TIM_OC6_SetConfig+0xc0>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d007      	beq.n	800e65c <TIM_OC6_SetConfig+0x78>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a16      	ldr	r2, [pc, #88]	@ (800e6a8 <TIM_OC6_SetConfig+0xc4>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d003      	beq.n	800e65c <TIM_OC6_SetConfig+0x78>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a15      	ldr	r2, [pc, #84]	@ (800e6ac <TIM_OC6_SetConfig+0xc8>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d109      	bne.n	800e670 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e662:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	695b      	ldr	r3, [r3, #20]
 800e668:	029b      	lsls	r3, r3, #10
 800e66a:	697a      	ldr	r2, [r7, #20]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	697a      	ldr	r2, [r7, #20]
 800e674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	685a      	ldr	r2, [r3, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	621a      	str	r2, [r3, #32]
}
 800e68a:	bf00      	nop
 800e68c:	371c      	adds	r7, #28
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	feff8fff 	.word	0xfeff8fff
 800e69c:	40010000 	.word	0x40010000
 800e6a0:	40010400 	.word	0x40010400
 800e6a4:	40014000 	.word	0x40014000
 800e6a8:	40014400 	.word	0x40014400
 800e6ac:	40014800 	.word	0x40014800

0800e6b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6a1b      	ldr	r3, [r3, #32]
 800e6c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6a1b      	ldr	r3, [r3, #32]
 800e6c6:	f023 0201 	bic.w	r2, r3, #1
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	699b      	ldr	r3, [r3, #24]
 800e6d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e6da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	011b      	lsls	r3, r3, #4
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f023 030a 	bic.w	r3, r3, #10
 800e6ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	693a      	ldr	r2, [r7, #16]
 800e6fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	621a      	str	r2, [r3, #32]
}
 800e702:	bf00      	nop
 800e704:	371c      	adds	r7, #28
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e70e:	b480      	push	{r7}
 800e710:	b087      	sub	sp, #28
 800e712:	af00      	add	r7, sp, #0
 800e714:	60f8      	str	r0, [r7, #12]
 800e716:	60b9      	str	r1, [r7, #8]
 800e718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6a1b      	ldr	r3, [r3, #32]
 800e724:	f023 0210 	bic.w	r2, r3, #16
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	031b      	lsls	r3, r3, #12
 800e73e:	693a      	ldr	r2, [r7, #16]
 800e740:	4313      	orrs	r3, r2
 800e742:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e74a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	011b      	lsls	r3, r3, #4
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	4313      	orrs	r3, r2
 800e754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	693a      	ldr	r2, [r7, #16]
 800e75a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	697a      	ldr	r2, [r7, #20]
 800e760:	621a      	str	r2, [r3, #32]
}
 800e762:	bf00      	nop
 800e764:	371c      	adds	r7, #28
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr
	...

0800e770 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	4b09      	ldr	r3, [pc, #36]	@ (800e7a8 <TIM_ITRx_SetConfig+0x38>)
 800e784:	4013      	ands	r3, r2
 800e786:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e788:	683a      	ldr	r2, [r7, #0]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	4313      	orrs	r3, r2
 800e78e:	f043 0307 	orr.w	r3, r3, #7
 800e792:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	609a      	str	r2, [r3, #8]
}
 800e79a:	bf00      	nop
 800e79c:	3714      	adds	r7, #20
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	ffcfff8f 	.word	0xffcfff8f

0800e7ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b087      	sub	sp, #28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e7c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	021a      	lsls	r2, r3, #8
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	431a      	orrs	r2, r3
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	697a      	ldr	r2, [r7, #20]
 800e7de:	609a      	str	r2, [r3, #8]
}
 800e7e0:	bf00      	nop
 800e7e2:	371c      	adds	r7, #28
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr

0800e7ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d101      	bne.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e800:	2302      	movs	r3, #2
 800e802:	e077      	b.n	800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2201      	movs	r2, #1
 800e808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2202      	movs	r2, #2
 800e810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a35      	ldr	r2, [pc, #212]	@ (800e900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d004      	beq.n	800e838 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a34      	ldr	r2, [pc, #208]	@ (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d108      	bne.n	800e84a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e83e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	68fa      	ldr	r2, [r7, #12]
 800e846:	4313      	orrs	r3, r2
 800e848:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e850:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	4313      	orrs	r3, r2
 800e85a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a25      	ldr	r2, [pc, #148]	@ (800e900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d02c      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e876:	d027      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a22      	ldr	r2, [pc, #136]	@ (800e908 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d022      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a21      	ldr	r2, [pc, #132]	@ (800e90c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d01d      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a1f      	ldr	r2, [pc, #124]	@ (800e910 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d018      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a1a      	ldr	r2, [pc, #104]	@ (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d013      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a1b      	ldr	r2, [pc, #108]	@ (800e914 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d00e      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a1a      	ldr	r2, [pc, #104]	@ (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d009      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a18      	ldr	r2, [pc, #96]	@ (800e91c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d004      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4a17      	ldr	r2, [pc, #92]	@ (800e920 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d10c      	bne.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	68ba      	ldr	r2, [r7, #8]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68ba      	ldr	r2, [r7, #8]
 800e8e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	40010000 	.word	0x40010000
 800e904:	40010400 	.word	0x40010400
 800e908:	40000400 	.word	0x40000400
 800e90c:	40000800 	.word	0x40000800
 800e910:	40000c00 	.word	0x40000c00
 800e914:	40001800 	.word	0x40001800
 800e918:	40014000 	.word	0x40014000
 800e91c:	4000e000 	.word	0x4000e000
 800e920:	4000e400 	.word	0x4000e400

0800e924 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e924:	b480      	push	{r7}
 800e926:	b085      	sub	sp, #20
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e92e:	2300      	movs	r3, #0
 800e930:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d101      	bne.n	800e940 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e93c:	2302      	movs	r3, #2
 800e93e:	e073      	b.n	800ea28 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	4313      	orrs	r3, r2
 800e954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	4313      	orrs	r3, r2
 800e962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	4313      	orrs	r3, r2
 800e970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	4313      	orrs	r3, r2
 800e98c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	4313      	orrs	r3, r2
 800e99a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	699b      	ldr	r3, [r3, #24]
 800e9b4:	041b      	lsls	r3, r3, #16
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	69db      	ldr	r3, [r3, #28]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a19      	ldr	r2, [pc, #100]	@ (800ea34 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d004      	beq.n	800e9dc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a18      	ldr	r2, [pc, #96]	@ (800ea38 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d11c      	bne.n	800ea16 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9e6:	051b      	lsls	r3, r3, #20
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	6a1b      	ldr	r3, [r3, #32]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea04:	4313      	orrs	r3, r2
 800ea06:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea12:	4313      	orrs	r3, r2
 800ea14:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3714      	adds	r7, #20
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr
 800ea34:	40010000 	.word	0x40010000
 800ea38:	40010400 	.word	0x40010400

0800ea3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea44:	bf00      	nop
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea58:	bf00      	nop
 800ea5a:	370c      	adds	r7, #12
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea6c:	bf00      	nop
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d101      	bne.n	800ea8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e042      	b.n	800eb10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d106      	bne.n	800eaa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7f3 fcfd 	bl	800249c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2224      	movs	r2, #36	@ 0x24
 800eaa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f022 0201 	bic.w	r2, r2, #1
 800eab8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d002      	beq.n	800eac8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 ff22 	bl	800f90c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 f8b3 	bl	800ec34 <UART_SetConfig>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d101      	bne.n	800ead8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ead4:	2301      	movs	r3, #1
 800ead6:	e01b      	b.n	800eb10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	685a      	ldr	r2, [r3, #4]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800eae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	689a      	ldr	r2, [r3, #8]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800eaf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f042 0201 	orr.w	r2, r2, #1
 800eb06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 ffa1 	bl	800fa50 <UART_CheckIdleState>
 800eb0e:	4603      	mov	r3, r0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08a      	sub	sp, #40	@ 0x28
 800eb1c:	af02      	add	r7, sp, #8
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	603b      	str	r3, [r7, #0]
 800eb24:	4613      	mov	r3, r2
 800eb26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb2e:	2b20      	cmp	r3, #32
 800eb30:	d17b      	bne.n	800ec2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <HAL_UART_Transmit+0x26>
 800eb38:	88fb      	ldrh	r3, [r7, #6]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d101      	bne.n	800eb42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e074      	b.n	800ec2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2200      	movs	r2, #0
 800eb46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2221      	movs	r2, #33	@ 0x21
 800eb4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb52:	f7f3 ff29 	bl	80029a8 <HAL_GetTick>
 800eb56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	88fa      	ldrh	r2, [r7, #6]
 800eb5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	88fa      	ldrh	r2, [r7, #6]
 800eb64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb70:	d108      	bne.n	800eb84 <HAL_UART_Transmit+0x6c>
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d104      	bne.n	800eb84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	61bb      	str	r3, [r7, #24]
 800eb82:	e003      	b.n	800eb8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eb8c:	e030      	b.n	800ebf0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2200      	movs	r2, #0
 800eb96:	2180      	movs	r1, #128	@ 0x80
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f001 f803 	bl	800fba4 <UART_WaitOnFlagUntilTimeout>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d005      	beq.n	800ebb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2220      	movs	r2, #32
 800eba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ebac:	2303      	movs	r3, #3
 800ebae:	e03d      	b.n	800ec2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d10b      	bne.n	800ebce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	881b      	ldrh	r3, [r3, #0]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	3302      	adds	r3, #2
 800ebca:	61bb      	str	r3, [r7, #24]
 800ebcc:	e007      	b.n	800ebde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	781a      	ldrb	r2, [r3, #0]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1c8      	bne.n	800eb8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	2200      	movs	r2, #0
 800ec04:	2140      	movs	r1, #64	@ 0x40
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f000 ffcc 	bl	800fba4 <UART_WaitOnFlagUntilTimeout>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d005      	beq.n	800ec1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2220      	movs	r2, #32
 800ec16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	e006      	b.n	800ec2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2220      	movs	r2, #32
 800ec22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ec26:	2300      	movs	r3, #0
 800ec28:	e000      	b.n	800ec2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ec2a:	2302      	movs	r3, #2
  }
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3720      	adds	r7, #32
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec38:	b092      	sub	sp, #72	@ 0x48
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	689a      	ldr	r2, [r3, #8]
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	431a      	orrs	r2, r3
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	431a      	orrs	r2, r3
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	69db      	ldr	r3, [r3, #28]
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	4bbe      	ldr	r3, [pc, #760]	@ (800ef5c <UART_SetConfig+0x328>)
 800ec64:	4013      	ands	r3, r2
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	6812      	ldr	r2, [r2, #0]
 800ec6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec6c:	430b      	orrs	r3, r1
 800ec6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	68da      	ldr	r2, [r3, #12]
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	430a      	orrs	r2, r1
 800ec84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	699b      	ldr	r3, [r3, #24]
 800ec8a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4ab3      	ldr	r2, [pc, #716]	@ (800ef60 <UART_SetConfig+0x32c>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d004      	beq.n	800eca0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	689a      	ldr	r2, [r3, #8]
 800eca6:	4baf      	ldr	r3, [pc, #700]	@ (800ef64 <UART_SetConfig+0x330>)
 800eca8:	4013      	ands	r3, r2
 800ecaa:	697a      	ldr	r2, [r7, #20]
 800ecac:	6812      	ldr	r2, [r2, #0]
 800ecae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ecb0:	430b      	orrs	r3, r1
 800ecb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecba:	f023 010f 	bic.w	r1, r3, #15
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	430a      	orrs	r2, r1
 800ecc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4aa6      	ldr	r2, [pc, #664]	@ (800ef68 <UART_SetConfig+0x334>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d177      	bne.n	800edc4 <UART_SetConfig+0x190>
 800ecd4:	4ba5      	ldr	r3, [pc, #660]	@ (800ef6c <UART_SetConfig+0x338>)
 800ecd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ecdc:	2b28      	cmp	r3, #40	@ 0x28
 800ecde:	d86d      	bhi.n	800edbc <UART_SetConfig+0x188>
 800ece0:	a201      	add	r2, pc, #4	@ (adr r2, 800ece8 <UART_SetConfig+0xb4>)
 800ece2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece6:	bf00      	nop
 800ece8:	0800ed8d 	.word	0x0800ed8d
 800ecec:	0800edbd 	.word	0x0800edbd
 800ecf0:	0800edbd 	.word	0x0800edbd
 800ecf4:	0800edbd 	.word	0x0800edbd
 800ecf8:	0800edbd 	.word	0x0800edbd
 800ecfc:	0800edbd 	.word	0x0800edbd
 800ed00:	0800edbd 	.word	0x0800edbd
 800ed04:	0800edbd 	.word	0x0800edbd
 800ed08:	0800ed95 	.word	0x0800ed95
 800ed0c:	0800edbd 	.word	0x0800edbd
 800ed10:	0800edbd 	.word	0x0800edbd
 800ed14:	0800edbd 	.word	0x0800edbd
 800ed18:	0800edbd 	.word	0x0800edbd
 800ed1c:	0800edbd 	.word	0x0800edbd
 800ed20:	0800edbd 	.word	0x0800edbd
 800ed24:	0800edbd 	.word	0x0800edbd
 800ed28:	0800ed9d 	.word	0x0800ed9d
 800ed2c:	0800edbd 	.word	0x0800edbd
 800ed30:	0800edbd 	.word	0x0800edbd
 800ed34:	0800edbd 	.word	0x0800edbd
 800ed38:	0800edbd 	.word	0x0800edbd
 800ed3c:	0800edbd 	.word	0x0800edbd
 800ed40:	0800edbd 	.word	0x0800edbd
 800ed44:	0800edbd 	.word	0x0800edbd
 800ed48:	0800eda5 	.word	0x0800eda5
 800ed4c:	0800edbd 	.word	0x0800edbd
 800ed50:	0800edbd 	.word	0x0800edbd
 800ed54:	0800edbd 	.word	0x0800edbd
 800ed58:	0800edbd 	.word	0x0800edbd
 800ed5c:	0800edbd 	.word	0x0800edbd
 800ed60:	0800edbd 	.word	0x0800edbd
 800ed64:	0800edbd 	.word	0x0800edbd
 800ed68:	0800edad 	.word	0x0800edad
 800ed6c:	0800edbd 	.word	0x0800edbd
 800ed70:	0800edbd 	.word	0x0800edbd
 800ed74:	0800edbd 	.word	0x0800edbd
 800ed78:	0800edbd 	.word	0x0800edbd
 800ed7c:	0800edbd 	.word	0x0800edbd
 800ed80:	0800edbd 	.word	0x0800edbd
 800ed84:	0800edbd 	.word	0x0800edbd
 800ed88:	0800edb5 	.word	0x0800edb5
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed92:	e326      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ed94:	2304      	movs	r3, #4
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9a:	e322      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ed9c:	2308      	movs	r3, #8
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda2:	e31e      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800eda4:	2310      	movs	r3, #16
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edaa:	e31a      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800edac:	2320      	movs	r3, #32
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb2:	e316      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800edb4:	2340      	movs	r3, #64	@ 0x40
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edba:	e312      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800edbc:	2380      	movs	r3, #128	@ 0x80
 800edbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edc2:	e30e      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a69      	ldr	r2, [pc, #420]	@ (800ef70 <UART_SetConfig+0x33c>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d130      	bne.n	800ee30 <UART_SetConfig+0x1fc>
 800edce:	4b67      	ldr	r3, [pc, #412]	@ (800ef6c <UART_SetConfig+0x338>)
 800edd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edd2:	f003 0307 	and.w	r3, r3, #7
 800edd6:	2b05      	cmp	r3, #5
 800edd8:	d826      	bhi.n	800ee28 <UART_SetConfig+0x1f4>
 800edda:	a201      	add	r2, pc, #4	@ (adr r2, 800ede0 <UART_SetConfig+0x1ac>)
 800eddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede0:	0800edf9 	.word	0x0800edf9
 800ede4:	0800ee01 	.word	0x0800ee01
 800ede8:	0800ee09 	.word	0x0800ee09
 800edec:	0800ee11 	.word	0x0800ee11
 800edf0:	0800ee19 	.word	0x0800ee19
 800edf4:	0800ee21 	.word	0x0800ee21
 800edf8:	2300      	movs	r3, #0
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfe:	e2f0      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee00:	2304      	movs	r3, #4
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee06:	e2ec      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee08:	2308      	movs	r3, #8
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0e:	e2e8      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee10:	2310      	movs	r3, #16
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee16:	e2e4      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee18:	2320      	movs	r3, #32
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1e:	e2e0      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee20:	2340      	movs	r3, #64	@ 0x40
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee26:	e2dc      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee28:	2380      	movs	r3, #128	@ 0x80
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2e:	e2d8      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a4f      	ldr	r2, [pc, #316]	@ (800ef74 <UART_SetConfig+0x340>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d130      	bne.n	800ee9c <UART_SetConfig+0x268>
 800ee3a:	4b4c      	ldr	r3, [pc, #304]	@ (800ef6c <UART_SetConfig+0x338>)
 800ee3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee3e:	f003 0307 	and.w	r3, r3, #7
 800ee42:	2b05      	cmp	r3, #5
 800ee44:	d826      	bhi.n	800ee94 <UART_SetConfig+0x260>
 800ee46:	a201      	add	r2, pc, #4	@ (adr r2, 800ee4c <UART_SetConfig+0x218>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800ee65 	.word	0x0800ee65
 800ee50:	0800ee6d 	.word	0x0800ee6d
 800ee54:	0800ee75 	.word	0x0800ee75
 800ee58:	0800ee7d 	.word	0x0800ee7d
 800ee5c:	0800ee85 	.word	0x0800ee85
 800ee60:	0800ee8d 	.word	0x0800ee8d
 800ee64:	2300      	movs	r3, #0
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e2ba      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee6c:	2304      	movs	r3, #4
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee72:	e2b6      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee74:	2308      	movs	r3, #8
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7a:	e2b2      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee7c:	2310      	movs	r3, #16
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee82:	e2ae      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee84:	2320      	movs	r3, #32
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8a:	e2aa      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee8c:	2340      	movs	r3, #64	@ 0x40
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee92:	e2a6      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee94:	2380      	movs	r3, #128	@ 0x80
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee9a:	e2a2      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a35      	ldr	r2, [pc, #212]	@ (800ef78 <UART_SetConfig+0x344>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d130      	bne.n	800ef08 <UART_SetConfig+0x2d4>
 800eea6:	4b31      	ldr	r3, [pc, #196]	@ (800ef6c <UART_SetConfig+0x338>)
 800eea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eeaa:	f003 0307 	and.w	r3, r3, #7
 800eeae:	2b05      	cmp	r3, #5
 800eeb0:	d826      	bhi.n	800ef00 <UART_SetConfig+0x2cc>
 800eeb2:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb8 <UART_SetConfig+0x284>)
 800eeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb8:	0800eed1 	.word	0x0800eed1
 800eebc:	0800eed9 	.word	0x0800eed9
 800eec0:	0800eee1 	.word	0x0800eee1
 800eec4:	0800eee9 	.word	0x0800eee9
 800eec8:	0800eef1 	.word	0x0800eef1
 800eecc:	0800eef9 	.word	0x0800eef9
 800eed0:	2300      	movs	r3, #0
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed6:	e284      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800eed8:	2304      	movs	r3, #4
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eede:	e280      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800eee0:	2308      	movs	r3, #8
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eee6:	e27c      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800eee8:	2310      	movs	r3, #16
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeee:	e278      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800eef0:	2320      	movs	r3, #32
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eef6:	e274      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800eef8:	2340      	movs	r3, #64	@ 0x40
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefe:	e270      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef00:	2380      	movs	r3, #128	@ 0x80
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef06:	e26c      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ef7c <UART_SetConfig+0x348>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d142      	bne.n	800ef98 <UART_SetConfig+0x364>
 800ef12:	4b16      	ldr	r3, [pc, #88]	@ (800ef6c <UART_SetConfig+0x338>)
 800ef14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef16:	f003 0307 	and.w	r3, r3, #7
 800ef1a:	2b05      	cmp	r3, #5
 800ef1c:	d838      	bhi.n	800ef90 <UART_SetConfig+0x35c>
 800ef1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef24 <UART_SetConfig+0x2f0>)
 800ef20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef24:	0800ef3d 	.word	0x0800ef3d
 800ef28:	0800ef45 	.word	0x0800ef45
 800ef2c:	0800ef4d 	.word	0x0800ef4d
 800ef30:	0800ef55 	.word	0x0800ef55
 800ef34:	0800ef81 	.word	0x0800ef81
 800ef38:	0800ef89 	.word	0x0800ef89
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef42:	e24e      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef44:	2304      	movs	r3, #4
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4a:	e24a      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef4c:	2308      	movs	r3, #8
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef52:	e246      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef54:	2310      	movs	r3, #16
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5a:	e242      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef5c:	cfff69f3 	.word	0xcfff69f3
 800ef60:	58000c00 	.word	0x58000c00
 800ef64:	11fff4ff 	.word	0x11fff4ff
 800ef68:	40011000 	.word	0x40011000
 800ef6c:	58024400 	.word	0x58024400
 800ef70:	40004400 	.word	0x40004400
 800ef74:	40004800 	.word	0x40004800
 800ef78:	40004c00 	.word	0x40004c00
 800ef7c:	40005000 	.word	0x40005000
 800ef80:	2320      	movs	r3, #32
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e22c      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef88:	2340      	movs	r3, #64	@ 0x40
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8e:	e228      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef90:	2380      	movs	r3, #128	@ 0x80
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef96:	e224      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4ab1      	ldr	r2, [pc, #708]	@ (800f264 <UART_SetConfig+0x630>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d176      	bne.n	800f090 <UART_SetConfig+0x45c>
 800efa2:	4bb1      	ldr	r3, [pc, #708]	@ (800f268 <UART_SetConfig+0x634>)
 800efa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800efaa:	2b28      	cmp	r3, #40	@ 0x28
 800efac:	d86c      	bhi.n	800f088 <UART_SetConfig+0x454>
 800efae:	a201      	add	r2, pc, #4	@ (adr r2, 800efb4 <UART_SetConfig+0x380>)
 800efb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb4:	0800f059 	.word	0x0800f059
 800efb8:	0800f089 	.word	0x0800f089
 800efbc:	0800f089 	.word	0x0800f089
 800efc0:	0800f089 	.word	0x0800f089
 800efc4:	0800f089 	.word	0x0800f089
 800efc8:	0800f089 	.word	0x0800f089
 800efcc:	0800f089 	.word	0x0800f089
 800efd0:	0800f089 	.word	0x0800f089
 800efd4:	0800f061 	.word	0x0800f061
 800efd8:	0800f089 	.word	0x0800f089
 800efdc:	0800f089 	.word	0x0800f089
 800efe0:	0800f089 	.word	0x0800f089
 800efe4:	0800f089 	.word	0x0800f089
 800efe8:	0800f089 	.word	0x0800f089
 800efec:	0800f089 	.word	0x0800f089
 800eff0:	0800f089 	.word	0x0800f089
 800eff4:	0800f069 	.word	0x0800f069
 800eff8:	0800f089 	.word	0x0800f089
 800effc:	0800f089 	.word	0x0800f089
 800f000:	0800f089 	.word	0x0800f089
 800f004:	0800f089 	.word	0x0800f089
 800f008:	0800f089 	.word	0x0800f089
 800f00c:	0800f089 	.word	0x0800f089
 800f010:	0800f089 	.word	0x0800f089
 800f014:	0800f071 	.word	0x0800f071
 800f018:	0800f089 	.word	0x0800f089
 800f01c:	0800f089 	.word	0x0800f089
 800f020:	0800f089 	.word	0x0800f089
 800f024:	0800f089 	.word	0x0800f089
 800f028:	0800f089 	.word	0x0800f089
 800f02c:	0800f089 	.word	0x0800f089
 800f030:	0800f089 	.word	0x0800f089
 800f034:	0800f079 	.word	0x0800f079
 800f038:	0800f089 	.word	0x0800f089
 800f03c:	0800f089 	.word	0x0800f089
 800f040:	0800f089 	.word	0x0800f089
 800f044:	0800f089 	.word	0x0800f089
 800f048:	0800f089 	.word	0x0800f089
 800f04c:	0800f089 	.word	0x0800f089
 800f050:	0800f089 	.word	0x0800f089
 800f054:	0800f081 	.word	0x0800f081
 800f058:	2301      	movs	r3, #1
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05e:	e1c0      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f060:	2304      	movs	r3, #4
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f066:	e1bc      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f068:	2308      	movs	r3, #8
 800f06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f06e:	e1b8      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f070:	2310      	movs	r3, #16
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f076:	e1b4      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f078:	2320      	movs	r3, #32
 800f07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f07e:	e1b0      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f080:	2340      	movs	r3, #64	@ 0x40
 800f082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f086:	e1ac      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f088:	2380      	movs	r3, #128	@ 0x80
 800f08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f08e:	e1a8      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a75      	ldr	r2, [pc, #468]	@ (800f26c <UART_SetConfig+0x638>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d130      	bne.n	800f0fc <UART_SetConfig+0x4c8>
 800f09a:	4b73      	ldr	r3, [pc, #460]	@ (800f268 <UART_SetConfig+0x634>)
 800f09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f09e:	f003 0307 	and.w	r3, r3, #7
 800f0a2:	2b05      	cmp	r3, #5
 800f0a4:	d826      	bhi.n	800f0f4 <UART_SetConfig+0x4c0>
 800f0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f0ac <UART_SetConfig+0x478>)
 800f0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ac:	0800f0c5 	.word	0x0800f0c5
 800f0b0:	0800f0cd 	.word	0x0800f0cd
 800f0b4:	0800f0d5 	.word	0x0800f0d5
 800f0b8:	0800f0dd 	.word	0x0800f0dd
 800f0bc:	0800f0e5 	.word	0x0800f0e5
 800f0c0:	0800f0ed 	.word	0x0800f0ed
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ca:	e18a      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f0cc:	2304      	movs	r3, #4
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0d2:	e186      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f0d4:	2308      	movs	r3, #8
 800f0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0da:	e182      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f0dc:	2310      	movs	r3, #16
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0e2:	e17e      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f0e4:	2320      	movs	r3, #32
 800f0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ea:	e17a      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f0ec:	2340      	movs	r3, #64	@ 0x40
 800f0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0f2:	e176      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f0f4:	2380      	movs	r3, #128	@ 0x80
 800f0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0fa:	e172      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a5b      	ldr	r2, [pc, #364]	@ (800f270 <UART_SetConfig+0x63c>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d130      	bne.n	800f168 <UART_SetConfig+0x534>
 800f106:	4b58      	ldr	r3, [pc, #352]	@ (800f268 <UART_SetConfig+0x634>)
 800f108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f10a:	f003 0307 	and.w	r3, r3, #7
 800f10e:	2b05      	cmp	r3, #5
 800f110:	d826      	bhi.n	800f160 <UART_SetConfig+0x52c>
 800f112:	a201      	add	r2, pc, #4	@ (adr r2, 800f118 <UART_SetConfig+0x4e4>)
 800f114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f118:	0800f131 	.word	0x0800f131
 800f11c:	0800f139 	.word	0x0800f139
 800f120:	0800f141 	.word	0x0800f141
 800f124:	0800f149 	.word	0x0800f149
 800f128:	0800f151 	.word	0x0800f151
 800f12c:	0800f159 	.word	0x0800f159
 800f130:	2300      	movs	r3, #0
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f136:	e154      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f138:	2304      	movs	r3, #4
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f13e:	e150      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f140:	2308      	movs	r3, #8
 800f142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f146:	e14c      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f148:	2310      	movs	r3, #16
 800f14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f14e:	e148      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f150:	2320      	movs	r3, #32
 800f152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f156:	e144      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f158:	2340      	movs	r3, #64	@ 0x40
 800f15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15e:	e140      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f160:	2380      	movs	r3, #128	@ 0x80
 800f162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f166:	e13c      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4a41      	ldr	r2, [pc, #260]	@ (800f274 <UART_SetConfig+0x640>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	f040 8082 	bne.w	800f278 <UART_SetConfig+0x644>
 800f174:	4b3c      	ldr	r3, [pc, #240]	@ (800f268 <UART_SetConfig+0x634>)
 800f176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f178:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f17c:	2b28      	cmp	r3, #40	@ 0x28
 800f17e:	d86d      	bhi.n	800f25c <UART_SetConfig+0x628>
 800f180:	a201      	add	r2, pc, #4	@ (adr r2, 800f188 <UART_SetConfig+0x554>)
 800f182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f186:	bf00      	nop
 800f188:	0800f22d 	.word	0x0800f22d
 800f18c:	0800f25d 	.word	0x0800f25d
 800f190:	0800f25d 	.word	0x0800f25d
 800f194:	0800f25d 	.word	0x0800f25d
 800f198:	0800f25d 	.word	0x0800f25d
 800f19c:	0800f25d 	.word	0x0800f25d
 800f1a0:	0800f25d 	.word	0x0800f25d
 800f1a4:	0800f25d 	.word	0x0800f25d
 800f1a8:	0800f235 	.word	0x0800f235
 800f1ac:	0800f25d 	.word	0x0800f25d
 800f1b0:	0800f25d 	.word	0x0800f25d
 800f1b4:	0800f25d 	.word	0x0800f25d
 800f1b8:	0800f25d 	.word	0x0800f25d
 800f1bc:	0800f25d 	.word	0x0800f25d
 800f1c0:	0800f25d 	.word	0x0800f25d
 800f1c4:	0800f25d 	.word	0x0800f25d
 800f1c8:	0800f23d 	.word	0x0800f23d
 800f1cc:	0800f25d 	.word	0x0800f25d
 800f1d0:	0800f25d 	.word	0x0800f25d
 800f1d4:	0800f25d 	.word	0x0800f25d
 800f1d8:	0800f25d 	.word	0x0800f25d
 800f1dc:	0800f25d 	.word	0x0800f25d
 800f1e0:	0800f25d 	.word	0x0800f25d
 800f1e4:	0800f25d 	.word	0x0800f25d
 800f1e8:	0800f245 	.word	0x0800f245
 800f1ec:	0800f25d 	.word	0x0800f25d
 800f1f0:	0800f25d 	.word	0x0800f25d
 800f1f4:	0800f25d 	.word	0x0800f25d
 800f1f8:	0800f25d 	.word	0x0800f25d
 800f1fc:	0800f25d 	.word	0x0800f25d
 800f200:	0800f25d 	.word	0x0800f25d
 800f204:	0800f25d 	.word	0x0800f25d
 800f208:	0800f24d 	.word	0x0800f24d
 800f20c:	0800f25d 	.word	0x0800f25d
 800f210:	0800f25d 	.word	0x0800f25d
 800f214:	0800f25d 	.word	0x0800f25d
 800f218:	0800f25d 	.word	0x0800f25d
 800f21c:	0800f25d 	.word	0x0800f25d
 800f220:	0800f25d 	.word	0x0800f25d
 800f224:	0800f25d 	.word	0x0800f25d
 800f228:	0800f255 	.word	0x0800f255
 800f22c:	2301      	movs	r3, #1
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f232:	e0d6      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f234:	2304      	movs	r3, #4
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f23a:	e0d2      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f23c:	2308      	movs	r3, #8
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f242:	e0ce      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f244:	2310      	movs	r3, #16
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24a:	e0ca      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f24c:	2320      	movs	r3, #32
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f252:	e0c6      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f254:	2340      	movs	r3, #64	@ 0x40
 800f256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f25a:	e0c2      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f25c:	2380      	movs	r3, #128	@ 0x80
 800f25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f262:	e0be      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f264:	40011400 	.word	0x40011400
 800f268:	58024400 	.word	0x58024400
 800f26c:	40007800 	.word	0x40007800
 800f270:	40007c00 	.word	0x40007c00
 800f274:	40011800 	.word	0x40011800
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4aad      	ldr	r2, [pc, #692]	@ (800f534 <UART_SetConfig+0x900>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d176      	bne.n	800f370 <UART_SetConfig+0x73c>
 800f282:	4bad      	ldr	r3, [pc, #692]	@ (800f538 <UART_SetConfig+0x904>)
 800f284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f286:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f28a:	2b28      	cmp	r3, #40	@ 0x28
 800f28c:	d86c      	bhi.n	800f368 <UART_SetConfig+0x734>
 800f28e:	a201      	add	r2, pc, #4	@ (adr r2, 800f294 <UART_SetConfig+0x660>)
 800f290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f294:	0800f339 	.word	0x0800f339
 800f298:	0800f369 	.word	0x0800f369
 800f29c:	0800f369 	.word	0x0800f369
 800f2a0:	0800f369 	.word	0x0800f369
 800f2a4:	0800f369 	.word	0x0800f369
 800f2a8:	0800f369 	.word	0x0800f369
 800f2ac:	0800f369 	.word	0x0800f369
 800f2b0:	0800f369 	.word	0x0800f369
 800f2b4:	0800f341 	.word	0x0800f341
 800f2b8:	0800f369 	.word	0x0800f369
 800f2bc:	0800f369 	.word	0x0800f369
 800f2c0:	0800f369 	.word	0x0800f369
 800f2c4:	0800f369 	.word	0x0800f369
 800f2c8:	0800f369 	.word	0x0800f369
 800f2cc:	0800f369 	.word	0x0800f369
 800f2d0:	0800f369 	.word	0x0800f369
 800f2d4:	0800f349 	.word	0x0800f349
 800f2d8:	0800f369 	.word	0x0800f369
 800f2dc:	0800f369 	.word	0x0800f369
 800f2e0:	0800f369 	.word	0x0800f369
 800f2e4:	0800f369 	.word	0x0800f369
 800f2e8:	0800f369 	.word	0x0800f369
 800f2ec:	0800f369 	.word	0x0800f369
 800f2f0:	0800f369 	.word	0x0800f369
 800f2f4:	0800f351 	.word	0x0800f351
 800f2f8:	0800f369 	.word	0x0800f369
 800f2fc:	0800f369 	.word	0x0800f369
 800f300:	0800f369 	.word	0x0800f369
 800f304:	0800f369 	.word	0x0800f369
 800f308:	0800f369 	.word	0x0800f369
 800f30c:	0800f369 	.word	0x0800f369
 800f310:	0800f369 	.word	0x0800f369
 800f314:	0800f359 	.word	0x0800f359
 800f318:	0800f369 	.word	0x0800f369
 800f31c:	0800f369 	.word	0x0800f369
 800f320:	0800f369 	.word	0x0800f369
 800f324:	0800f369 	.word	0x0800f369
 800f328:	0800f369 	.word	0x0800f369
 800f32c:	0800f369 	.word	0x0800f369
 800f330:	0800f369 	.word	0x0800f369
 800f334:	0800f361 	.word	0x0800f361
 800f338:	2301      	movs	r3, #1
 800f33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f33e:	e050      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f340:	2304      	movs	r3, #4
 800f342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f346:	e04c      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f348:	2308      	movs	r3, #8
 800f34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f34e:	e048      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f350:	2310      	movs	r3, #16
 800f352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f356:	e044      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f358:	2320      	movs	r3, #32
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f35e:	e040      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f360:	2340      	movs	r3, #64	@ 0x40
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f366:	e03c      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f368:	2380      	movs	r3, #128	@ 0x80
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f36e:	e038      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a71      	ldr	r2, [pc, #452]	@ (800f53c <UART_SetConfig+0x908>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d130      	bne.n	800f3dc <UART_SetConfig+0x7a8>
 800f37a:	4b6f      	ldr	r3, [pc, #444]	@ (800f538 <UART_SetConfig+0x904>)
 800f37c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f37e:	f003 0307 	and.w	r3, r3, #7
 800f382:	2b05      	cmp	r3, #5
 800f384:	d826      	bhi.n	800f3d4 <UART_SetConfig+0x7a0>
 800f386:	a201      	add	r2, pc, #4	@ (adr r2, 800f38c <UART_SetConfig+0x758>)
 800f388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38c:	0800f3a5 	.word	0x0800f3a5
 800f390:	0800f3ad 	.word	0x0800f3ad
 800f394:	0800f3b5 	.word	0x0800f3b5
 800f398:	0800f3bd 	.word	0x0800f3bd
 800f39c:	0800f3c5 	.word	0x0800f3c5
 800f3a0:	0800f3cd 	.word	0x0800f3cd
 800f3a4:	2302      	movs	r3, #2
 800f3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3aa:	e01a      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f3ac:	2304      	movs	r3, #4
 800f3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3b2:	e016      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f3b4:	2308      	movs	r3, #8
 800f3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ba:	e012      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f3bc:	2310      	movs	r3, #16
 800f3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3c2:	e00e      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f3c4:	2320      	movs	r3, #32
 800f3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ca:	e00a      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f3cc:	2340      	movs	r3, #64	@ 0x40
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3d2:	e006      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f3d4:	2380      	movs	r3, #128	@ 0x80
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3da:	e002      	b.n	800f3e2 <UART_SetConfig+0x7ae>
 800f3dc:	2380      	movs	r3, #128	@ 0x80
 800f3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	4a55      	ldr	r2, [pc, #340]	@ (800f53c <UART_SetConfig+0x908>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	f040 80f8 	bne.w	800f5de <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f3f2:	2b20      	cmp	r3, #32
 800f3f4:	dc46      	bgt.n	800f484 <UART_SetConfig+0x850>
 800f3f6:	2b02      	cmp	r3, #2
 800f3f8:	db75      	blt.n	800f4e6 <UART_SetConfig+0x8b2>
 800f3fa:	3b02      	subs	r3, #2
 800f3fc:	2b1e      	cmp	r3, #30
 800f3fe:	d872      	bhi.n	800f4e6 <UART_SetConfig+0x8b2>
 800f400:	a201      	add	r2, pc, #4	@ (adr r2, 800f408 <UART_SetConfig+0x7d4>)
 800f402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f406:	bf00      	nop
 800f408:	0800f48b 	.word	0x0800f48b
 800f40c:	0800f4e7 	.word	0x0800f4e7
 800f410:	0800f493 	.word	0x0800f493
 800f414:	0800f4e7 	.word	0x0800f4e7
 800f418:	0800f4e7 	.word	0x0800f4e7
 800f41c:	0800f4e7 	.word	0x0800f4e7
 800f420:	0800f4a3 	.word	0x0800f4a3
 800f424:	0800f4e7 	.word	0x0800f4e7
 800f428:	0800f4e7 	.word	0x0800f4e7
 800f42c:	0800f4e7 	.word	0x0800f4e7
 800f430:	0800f4e7 	.word	0x0800f4e7
 800f434:	0800f4e7 	.word	0x0800f4e7
 800f438:	0800f4e7 	.word	0x0800f4e7
 800f43c:	0800f4e7 	.word	0x0800f4e7
 800f440:	0800f4b3 	.word	0x0800f4b3
 800f444:	0800f4e7 	.word	0x0800f4e7
 800f448:	0800f4e7 	.word	0x0800f4e7
 800f44c:	0800f4e7 	.word	0x0800f4e7
 800f450:	0800f4e7 	.word	0x0800f4e7
 800f454:	0800f4e7 	.word	0x0800f4e7
 800f458:	0800f4e7 	.word	0x0800f4e7
 800f45c:	0800f4e7 	.word	0x0800f4e7
 800f460:	0800f4e7 	.word	0x0800f4e7
 800f464:	0800f4e7 	.word	0x0800f4e7
 800f468:	0800f4e7 	.word	0x0800f4e7
 800f46c:	0800f4e7 	.word	0x0800f4e7
 800f470:	0800f4e7 	.word	0x0800f4e7
 800f474:	0800f4e7 	.word	0x0800f4e7
 800f478:	0800f4e7 	.word	0x0800f4e7
 800f47c:	0800f4e7 	.word	0x0800f4e7
 800f480:	0800f4d9 	.word	0x0800f4d9
 800f484:	2b40      	cmp	r3, #64	@ 0x40
 800f486:	d02a      	beq.n	800f4de <UART_SetConfig+0x8aa>
 800f488:	e02d      	b.n	800f4e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f48a:	f7fb ff37 	bl	800b2fc <HAL_RCCEx_GetD3PCLK1Freq>
 800f48e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f490:	e02f      	b.n	800f4f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f496:	4618      	mov	r0, r3
 800f498:	f7fb ff46 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4a0:	e027      	b.n	800f4f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4a2:	f107 0318 	add.w	r3, r7, #24
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fc f892 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4b0:	e01f      	b.n	800f4f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4b2:	4b21      	ldr	r3, [pc, #132]	@ (800f538 <UART_SetConfig+0x904>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f003 0320 	and.w	r3, r3, #32
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d009      	beq.n	800f4d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4be:	4b1e      	ldr	r3, [pc, #120]	@ (800f538 <UART_SetConfig+0x904>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	08db      	lsrs	r3, r3, #3
 800f4c4:	f003 0303 	and.w	r3, r3, #3
 800f4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800f540 <UART_SetConfig+0x90c>)
 800f4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4d0:	e00f      	b.n	800f4f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f4d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f540 <UART_SetConfig+0x90c>)
 800f4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4d6:	e00c      	b.n	800f4f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4d8:	4b1a      	ldr	r3, [pc, #104]	@ (800f544 <UART_SetConfig+0x910>)
 800f4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4dc:	e009      	b.n	800f4f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4e4:	e005      	b.n	800f4f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f4f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f000 81ee 	beq.w	800f8d6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4fe:	4a12      	ldr	r2, [pc, #72]	@ (800f548 <UART_SetConfig+0x914>)
 800f500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f504:	461a      	mov	r2, r3
 800f506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f508:	fbb3 f3f2 	udiv	r3, r3, r2
 800f50c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	685a      	ldr	r2, [r3, #4]
 800f512:	4613      	mov	r3, r2
 800f514:	005b      	lsls	r3, r3, #1
 800f516:	4413      	add	r3, r2
 800f518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d305      	bcc.n	800f52a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f526:	429a      	cmp	r2, r3
 800f528:	d910      	bls.n	800f54c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f52a:	2301      	movs	r3, #1
 800f52c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f530:	e1d1      	b.n	800f8d6 <UART_SetConfig+0xca2>
 800f532:	bf00      	nop
 800f534:	40011c00 	.word	0x40011c00
 800f538:	58024400 	.word	0x58024400
 800f53c:	58000c00 	.word	0x58000c00
 800f540:	03d09000 	.word	0x03d09000
 800f544:	003d0900 	.word	0x003d0900
 800f548:	08012a78 	.word	0x08012a78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f54e:	2200      	movs	r2, #0
 800f550:	60bb      	str	r3, [r7, #8]
 800f552:	60fa      	str	r2, [r7, #12]
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f558:	4ac0      	ldr	r2, [pc, #768]	@ (800f85c <UART_SetConfig+0xc28>)
 800f55a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f55e:	b29b      	uxth	r3, r3
 800f560:	2200      	movs	r2, #0
 800f562:	603b      	str	r3, [r7, #0]
 800f564:	607a      	str	r2, [r7, #4]
 800f566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f56a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f56e:	f7f0 ff27 	bl	80003c0 <__aeabi_uldivmod>
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	4610      	mov	r0, r2
 800f578:	4619      	mov	r1, r3
 800f57a:	f04f 0200 	mov.w	r2, #0
 800f57e:	f04f 0300 	mov.w	r3, #0
 800f582:	020b      	lsls	r3, r1, #8
 800f584:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f588:	0202      	lsls	r2, r0, #8
 800f58a:	6979      	ldr	r1, [r7, #20]
 800f58c:	6849      	ldr	r1, [r1, #4]
 800f58e:	0849      	lsrs	r1, r1, #1
 800f590:	2000      	movs	r0, #0
 800f592:	460c      	mov	r4, r1
 800f594:	4605      	mov	r5, r0
 800f596:	eb12 0804 	adds.w	r8, r2, r4
 800f59a:	eb43 0905 	adc.w	r9, r3, r5
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	469a      	mov	sl, r3
 800f5a6:	4693      	mov	fp, r2
 800f5a8:	4652      	mov	r2, sl
 800f5aa:	465b      	mov	r3, fp
 800f5ac:	4640      	mov	r0, r8
 800f5ae:	4649      	mov	r1, r9
 800f5b0:	f7f0 ff06 	bl	80003c0 <__aeabi_uldivmod>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f5c2:	d308      	bcc.n	800f5d6 <UART_SetConfig+0x9a2>
 800f5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5ca:	d204      	bcs.n	800f5d6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5d2:	60da      	str	r2, [r3, #12]
 800f5d4:	e17f      	b.n	800f8d6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f5dc:	e17b      	b.n	800f8d6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	69db      	ldr	r3, [r3, #28]
 800f5e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f5e6:	f040 80bd 	bne.w	800f764 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f5ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f5ee:	2b20      	cmp	r3, #32
 800f5f0:	dc48      	bgt.n	800f684 <UART_SetConfig+0xa50>
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	db7b      	blt.n	800f6ee <UART_SetConfig+0xaba>
 800f5f6:	2b20      	cmp	r3, #32
 800f5f8:	d879      	bhi.n	800f6ee <UART_SetConfig+0xaba>
 800f5fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f600 <UART_SetConfig+0x9cc>)
 800f5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f600:	0800f68b 	.word	0x0800f68b
 800f604:	0800f693 	.word	0x0800f693
 800f608:	0800f6ef 	.word	0x0800f6ef
 800f60c:	0800f6ef 	.word	0x0800f6ef
 800f610:	0800f69b 	.word	0x0800f69b
 800f614:	0800f6ef 	.word	0x0800f6ef
 800f618:	0800f6ef 	.word	0x0800f6ef
 800f61c:	0800f6ef 	.word	0x0800f6ef
 800f620:	0800f6ab 	.word	0x0800f6ab
 800f624:	0800f6ef 	.word	0x0800f6ef
 800f628:	0800f6ef 	.word	0x0800f6ef
 800f62c:	0800f6ef 	.word	0x0800f6ef
 800f630:	0800f6ef 	.word	0x0800f6ef
 800f634:	0800f6ef 	.word	0x0800f6ef
 800f638:	0800f6ef 	.word	0x0800f6ef
 800f63c:	0800f6ef 	.word	0x0800f6ef
 800f640:	0800f6bb 	.word	0x0800f6bb
 800f644:	0800f6ef 	.word	0x0800f6ef
 800f648:	0800f6ef 	.word	0x0800f6ef
 800f64c:	0800f6ef 	.word	0x0800f6ef
 800f650:	0800f6ef 	.word	0x0800f6ef
 800f654:	0800f6ef 	.word	0x0800f6ef
 800f658:	0800f6ef 	.word	0x0800f6ef
 800f65c:	0800f6ef 	.word	0x0800f6ef
 800f660:	0800f6ef 	.word	0x0800f6ef
 800f664:	0800f6ef 	.word	0x0800f6ef
 800f668:	0800f6ef 	.word	0x0800f6ef
 800f66c:	0800f6ef 	.word	0x0800f6ef
 800f670:	0800f6ef 	.word	0x0800f6ef
 800f674:	0800f6ef 	.word	0x0800f6ef
 800f678:	0800f6ef 	.word	0x0800f6ef
 800f67c:	0800f6ef 	.word	0x0800f6ef
 800f680:	0800f6e1 	.word	0x0800f6e1
 800f684:	2b40      	cmp	r3, #64	@ 0x40
 800f686:	d02e      	beq.n	800f6e6 <UART_SetConfig+0xab2>
 800f688:	e031      	b.n	800f6ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f68a:	f7f9 ff99 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800f68e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f690:	e033      	b.n	800f6fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f692:	f7f9 ffab 	bl	80095ec <HAL_RCC_GetPCLK2Freq>
 800f696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f698:	e02f      	b.n	800f6fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f69a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fb fe42 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a8:	e027      	b.n	800f6fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6aa:	f107 0318 	add.w	r3, r7, #24
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fb ff8e 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6b8:	e01f      	b.n	800f6fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6ba:	4b69      	ldr	r3, [pc, #420]	@ (800f860 <UART_SetConfig+0xc2c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f003 0320 	and.w	r3, r3, #32
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d009      	beq.n	800f6da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6c6:	4b66      	ldr	r3, [pc, #408]	@ (800f860 <UART_SetConfig+0xc2c>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	08db      	lsrs	r3, r3, #3
 800f6cc:	f003 0303 	and.w	r3, r3, #3
 800f6d0:	4a64      	ldr	r2, [pc, #400]	@ (800f864 <UART_SetConfig+0xc30>)
 800f6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800f6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6d8:	e00f      	b.n	800f6fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f6da:	4b62      	ldr	r3, [pc, #392]	@ (800f864 <UART_SetConfig+0xc30>)
 800f6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6de:	e00c      	b.n	800f6fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6e0:	4b61      	ldr	r3, [pc, #388]	@ (800f868 <UART_SetConfig+0xc34>)
 800f6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e4:	e009      	b.n	800f6fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6ec:	e005      	b.n	800f6fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f6f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f000 80ea 	beq.w	800f8d6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f706:	4a55      	ldr	r2, [pc, #340]	@ (800f85c <UART_SetConfig+0xc28>)
 800f708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f70c:	461a      	mov	r2, r3
 800f70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f710:	fbb3 f3f2 	udiv	r3, r3, r2
 800f714:	005a      	lsls	r2, r3, #1
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	085b      	lsrs	r3, r3, #1
 800f71c:	441a      	add	r2, r3
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	fbb2 f3f3 	udiv	r3, r2, r3
 800f726:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72a:	2b0f      	cmp	r3, #15
 800f72c:	d916      	bls.n	800f75c <UART_SetConfig+0xb28>
 800f72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f734:	d212      	bcs.n	800f75c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f738:	b29b      	uxth	r3, r3
 800f73a:	f023 030f 	bic.w	r3, r3, #15
 800f73e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f742:	085b      	lsrs	r3, r3, #1
 800f744:	b29b      	uxth	r3, r3
 800f746:	f003 0307 	and.w	r3, r3, #7
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f74e:	4313      	orrs	r3, r2
 800f750:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f758:	60da      	str	r2, [r3, #12]
 800f75a:	e0bc      	b.n	800f8d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f75c:	2301      	movs	r3, #1
 800f75e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f762:	e0b8      	b.n	800f8d6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f764:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f768:	2b20      	cmp	r3, #32
 800f76a:	dc4b      	bgt.n	800f804 <UART_SetConfig+0xbd0>
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f2c0 8087 	blt.w	800f880 <UART_SetConfig+0xc4c>
 800f772:	2b20      	cmp	r3, #32
 800f774:	f200 8084 	bhi.w	800f880 <UART_SetConfig+0xc4c>
 800f778:	a201      	add	r2, pc, #4	@ (adr r2, 800f780 <UART_SetConfig+0xb4c>)
 800f77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f77e:	bf00      	nop
 800f780:	0800f80b 	.word	0x0800f80b
 800f784:	0800f813 	.word	0x0800f813
 800f788:	0800f881 	.word	0x0800f881
 800f78c:	0800f881 	.word	0x0800f881
 800f790:	0800f81b 	.word	0x0800f81b
 800f794:	0800f881 	.word	0x0800f881
 800f798:	0800f881 	.word	0x0800f881
 800f79c:	0800f881 	.word	0x0800f881
 800f7a0:	0800f82b 	.word	0x0800f82b
 800f7a4:	0800f881 	.word	0x0800f881
 800f7a8:	0800f881 	.word	0x0800f881
 800f7ac:	0800f881 	.word	0x0800f881
 800f7b0:	0800f881 	.word	0x0800f881
 800f7b4:	0800f881 	.word	0x0800f881
 800f7b8:	0800f881 	.word	0x0800f881
 800f7bc:	0800f881 	.word	0x0800f881
 800f7c0:	0800f83b 	.word	0x0800f83b
 800f7c4:	0800f881 	.word	0x0800f881
 800f7c8:	0800f881 	.word	0x0800f881
 800f7cc:	0800f881 	.word	0x0800f881
 800f7d0:	0800f881 	.word	0x0800f881
 800f7d4:	0800f881 	.word	0x0800f881
 800f7d8:	0800f881 	.word	0x0800f881
 800f7dc:	0800f881 	.word	0x0800f881
 800f7e0:	0800f881 	.word	0x0800f881
 800f7e4:	0800f881 	.word	0x0800f881
 800f7e8:	0800f881 	.word	0x0800f881
 800f7ec:	0800f881 	.word	0x0800f881
 800f7f0:	0800f881 	.word	0x0800f881
 800f7f4:	0800f881 	.word	0x0800f881
 800f7f8:	0800f881 	.word	0x0800f881
 800f7fc:	0800f881 	.word	0x0800f881
 800f800:	0800f873 	.word	0x0800f873
 800f804:	2b40      	cmp	r3, #64	@ 0x40
 800f806:	d037      	beq.n	800f878 <UART_SetConfig+0xc44>
 800f808:	e03a      	b.n	800f880 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f80a:	f7f9 fed9 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800f80e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f810:	e03c      	b.n	800f88c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f812:	f7f9 feeb 	bl	80095ec <HAL_RCC_GetPCLK2Freq>
 800f816:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f818:	e038      	b.n	800f88c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f81a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fb fd82 	bl	800b328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f828:	e030      	b.n	800f88c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f82a:	f107 0318 	add.w	r3, r7, #24
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fb fece 	bl	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f838:	e028      	b.n	800f88c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f83a:	4b09      	ldr	r3, [pc, #36]	@ (800f860 <UART_SetConfig+0xc2c>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f003 0320 	and.w	r3, r3, #32
 800f842:	2b00      	cmp	r3, #0
 800f844:	d012      	beq.n	800f86c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f846:	4b06      	ldr	r3, [pc, #24]	@ (800f860 <UART_SetConfig+0xc2c>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	08db      	lsrs	r3, r3, #3
 800f84c:	f003 0303 	and.w	r3, r3, #3
 800f850:	4a04      	ldr	r2, [pc, #16]	@ (800f864 <UART_SetConfig+0xc30>)
 800f852:	fa22 f303 	lsr.w	r3, r2, r3
 800f856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f858:	e018      	b.n	800f88c <UART_SetConfig+0xc58>
 800f85a:	bf00      	nop
 800f85c:	08012a78 	.word	0x08012a78
 800f860:	58024400 	.word	0x58024400
 800f864:	03d09000 	.word	0x03d09000
 800f868:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f86c:	4b24      	ldr	r3, [pc, #144]	@ (800f900 <UART_SetConfig+0xccc>)
 800f86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f870:	e00c      	b.n	800f88c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f872:	4b24      	ldr	r3, [pc, #144]	@ (800f904 <UART_SetConfig+0xcd0>)
 800f874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f876:	e009      	b.n	800f88c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f87e:	e005      	b.n	800f88c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f880:	2300      	movs	r3, #0
 800f882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f884:	2301      	movs	r3, #1
 800f886:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f88a:	bf00      	nop
    }

    if (pclk != 0U)
 800f88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d021      	beq.n	800f8d6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f896:	4a1c      	ldr	r2, [pc, #112]	@ (800f908 <UART_SetConfig+0xcd4>)
 800f898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f89c:	461a      	mov	r2, r3
 800f89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8a0:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	085b      	lsrs	r3, r3, #1
 800f8aa:	441a      	add	r2, r3
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b8:	2b0f      	cmp	r3, #15
 800f8ba:	d909      	bls.n	800f8d0 <UART_SetConfig+0xc9c>
 800f8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8c2:	d205      	bcs.n	800f8d0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	60da      	str	r2, [r3, #12]
 800f8ce:	e002      	b.n	800f8d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f8f2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3748      	adds	r7, #72	@ 0x48
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f900:	03d09000 	.word	0x03d09000
 800f904:	003d0900 	.word	0x003d0900
 800f908:	08012a78 	.word	0x08012a78

0800f90c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f918:	f003 0308 	and.w	r3, r3, #8
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00a      	beq.n	800f936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	430a      	orrs	r2, r1
 800f934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f93a:	f003 0301 	and.w	r3, r3, #1
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00a      	beq.n	800f958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	430a      	orrs	r2, r1
 800f956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f95c:	f003 0302 	and.w	r3, r3, #2
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00a      	beq.n	800f97a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	430a      	orrs	r2, r1
 800f978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f97e:	f003 0304 	and.w	r3, r3, #4
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00a      	beq.n	800f99c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	430a      	orrs	r2, r1
 800f99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9a0:	f003 0310 	and.w	r3, r3, #16
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d00a      	beq.n	800f9be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	430a      	orrs	r2, r1
 800f9bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9c2:	f003 0320 	and.w	r3, r3, #32
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d00a      	beq.n	800f9e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	430a      	orrs	r2, r1
 800f9de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d01a      	beq.n	800fa22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	430a      	orrs	r2, r1
 800fa00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa0a:	d10a      	bne.n	800fa22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	430a      	orrs	r2, r1
 800fa20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00a      	beq.n	800fa44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	430a      	orrs	r2, r1
 800fa42:	605a      	str	r2, [r3, #4]
  }
}
 800fa44:	bf00      	nop
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b098      	sub	sp, #96	@ 0x60
 800fa54:	af02      	add	r7, sp, #8
 800fa56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa60:	f7f2 ffa2 	bl	80029a8 <HAL_GetTick>
 800fa64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f003 0308 	and.w	r3, r3, #8
 800fa70:	2b08      	cmp	r3, #8
 800fa72:	d12f      	bne.n	800fad4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f88e 	bl	800fba4 <UART_WaitOnFlagUntilTimeout>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d022      	beq.n	800fad4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa96:	e853 3f00 	ldrex	r3, [r3]
 800fa9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800faa2:	653b      	str	r3, [r7, #80]	@ 0x50
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	461a      	mov	r2, r3
 800faaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800faac:	647b      	str	r3, [r7, #68]	@ 0x44
 800faae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fab4:	e841 2300 	strex	r3, r2, [r1]
 800fab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800faba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d1e6      	bne.n	800fa8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2220      	movs	r2, #32
 800fac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fad0:	2303      	movs	r3, #3
 800fad2:	e063      	b.n	800fb9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f003 0304 	and.w	r3, r3, #4
 800fade:	2b04      	cmp	r3, #4
 800fae0:	d149      	bne.n	800fb76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fae2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faea:	2200      	movs	r2, #0
 800faec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 f857 	bl	800fba4 <UART_WaitOnFlagUntilTimeout>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d03c      	beq.n	800fb76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb04:	e853 3f00 	ldrex	r3, [r3]
 800fb08:	623b      	str	r3, [r7, #32]
   return(result);
 800fb0a:	6a3b      	ldr	r3, [r7, #32]
 800fb0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	461a      	mov	r2, r3
 800fb18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb22:	e841 2300 	strex	r3, r2, [r1]
 800fb26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1e6      	bne.n	800fafc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	3308      	adds	r3, #8
 800fb34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	e853 3f00 	ldrex	r3, [r3]
 800fb3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f023 0301 	bic.w	r3, r3, #1
 800fb44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	3308      	adds	r3, #8
 800fb4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb4e:	61fa      	str	r2, [r7, #28]
 800fb50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb52:	69b9      	ldr	r1, [r7, #24]
 800fb54:	69fa      	ldr	r2, [r7, #28]
 800fb56:	e841 2300 	strex	r3, r2, [r1]
 800fb5a:	617b      	str	r3, [r7, #20]
   return(result);
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d1e5      	bne.n	800fb2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2220      	movs	r2, #32
 800fb66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb72:	2303      	movs	r3, #3
 800fb74:	e012      	b.n	800fb9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2220      	movs	r2, #32
 800fb7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2220      	movs	r2, #32
 800fb82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2200      	movs	r2, #0
 800fb96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb9a:	2300      	movs	r3, #0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3758      	adds	r7, #88	@ 0x58
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	603b      	str	r3, [r7, #0]
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbb4:	e04f      	b.n	800fc56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbbc:	d04b      	beq.n	800fc56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbbe:	f7f2 fef3 	bl	80029a8 <HAL_GetTick>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	69ba      	ldr	r2, [r7, #24]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d302      	bcc.n	800fbd4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fbd4:	2303      	movs	r3, #3
 800fbd6:	e04e      	b.n	800fc76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f003 0304 	and.w	r3, r3, #4
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d037      	beq.n	800fc56 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	2b80      	cmp	r3, #128	@ 0x80
 800fbea:	d034      	beq.n	800fc56 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	2b40      	cmp	r3, #64	@ 0x40
 800fbf0:	d031      	beq.n	800fc56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	69db      	ldr	r3, [r3, #28]
 800fbf8:	f003 0308 	and.w	r3, r3, #8
 800fbfc:	2b08      	cmp	r3, #8
 800fbfe:	d110      	bne.n	800fc22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2208      	movs	r2, #8
 800fc06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f000 f839 	bl	800fc80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	2208      	movs	r2, #8
 800fc12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e029      	b.n	800fc76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	69db      	ldr	r3, [r3, #28]
 800fc28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc30:	d111      	bne.n	800fc56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc3c:	68f8      	ldr	r0, [r7, #12]
 800fc3e:	f000 f81f 	bl	800fc80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2220      	movs	r2, #32
 800fc46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fc52:	2303      	movs	r3, #3
 800fc54:	e00f      	b.n	800fc76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	69da      	ldr	r2, [r3, #28]
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	4013      	ands	r3, r2
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	bf0c      	ite	eq
 800fc66:	2301      	moveq	r3, #1
 800fc68:	2300      	movne	r3, #0
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	79fb      	ldrb	r3, [r7, #7]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d0a0      	beq.n	800fbb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
	...

0800fc80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b095      	sub	sp, #84	@ 0x54
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc90:	e853 3f00 	ldrex	r3, [r3]
 800fc94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	461a      	mov	r2, r3
 800fca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fca6:	643b      	str	r3, [r7, #64]	@ 0x40
 800fca8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fcac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fcae:	e841 2300 	strex	r3, r2, [r1]
 800fcb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1e6      	bne.n	800fc88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	3308      	adds	r3, #8
 800fcc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc2:	6a3b      	ldr	r3, [r7, #32]
 800fcc4:	e853 3f00 	ldrex	r3, [r3]
 800fcc8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcca:	69fa      	ldr	r2, [r7, #28]
 800fccc:	4b1e      	ldr	r3, [pc, #120]	@ (800fd48 <UART_EndRxTransfer+0xc8>)
 800fcce:	4013      	ands	r3, r2
 800fcd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	3308      	adds	r3, #8
 800fcd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fcdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fce2:	e841 2300 	strex	r3, r2, [r1]
 800fce6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d1e5      	bne.n	800fcba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d118      	bne.n	800fd28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	e853 3f00 	ldrex	r3, [r3]
 800fd02:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f023 0310 	bic.w	r3, r3, #16
 800fd0a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	461a      	mov	r2, r3
 800fd12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd14:	61bb      	str	r3, [r7, #24]
 800fd16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd18:	6979      	ldr	r1, [r7, #20]
 800fd1a:	69ba      	ldr	r2, [r7, #24]
 800fd1c:	e841 2300 	strex	r3, r2, [r1]
 800fd20:	613b      	str	r3, [r7, #16]
   return(result);
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e6      	bne.n	800fcf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2220      	movs	r2, #32
 800fd2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fd3c:	bf00      	nop
 800fd3e:	3754      	adds	r7, #84	@ 0x54
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	effffffe 	.word	0xeffffffe

0800fd4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d101      	bne.n	800fd62 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd5e:	2302      	movs	r3, #2
 800fd60:	e027      	b.n	800fdb2 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2201      	movs	r2, #1
 800fd66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2224      	movs	r2, #36	@ 0x24
 800fd6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f022 0201 	bic.w	r2, r2, #1
 800fd88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fd90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2200      	movs	r2, #0
 800fd96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2220      	movs	r2, #32
 800fda4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fdb0:	2300      	movs	r3, #0
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3714      	adds	r7, #20
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr

0800fdbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b084      	sub	sp, #16
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d101      	bne.n	800fdd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fdd2:	2302      	movs	r3, #2
 800fdd4:	e02d      	b.n	800fe32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2224      	movs	r2, #36	@ 0x24
 800fde2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f022 0201 	bic.w	r2, r2, #1
 800fdfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	683a      	ldr	r2, [r7, #0]
 800fe0e:	430a      	orrs	r2, r1
 800fe10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f000 f850 	bl	800feb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2220      	movs	r2, #32
 800fe24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe30:	2300      	movs	r3, #0
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d101      	bne.n	800fe52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe4e:	2302      	movs	r3, #2
 800fe50:	e02d      	b.n	800feae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2201      	movs	r2, #1
 800fe56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2224      	movs	r2, #36	@ 0x24
 800fe5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f022 0201 	bic.w	r2, r2, #1
 800fe78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	683a      	ldr	r2, [r7, #0]
 800fe8a:	430a      	orrs	r2, r1
 800fe8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 f812 	bl	800feb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	68fa      	ldr	r2, [r7, #12]
 800fe9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2220      	movs	r2, #32
 800fea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
	...

0800feb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d108      	bne.n	800feda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2201      	movs	r2, #1
 800fecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fed8:	e031      	b.n	800ff3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800feda:	2310      	movs	r3, #16
 800fedc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fede:	2310      	movs	r3, #16
 800fee0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	689b      	ldr	r3, [r3, #8]
 800fee8:	0e5b      	lsrs	r3, r3, #25
 800feea:	b2db      	uxtb	r3, r3
 800feec:	f003 0307 	and.w	r3, r3, #7
 800fef0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	0f5b      	lsrs	r3, r3, #29
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	f003 0307 	and.w	r3, r3, #7
 800ff00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff02:	7bbb      	ldrb	r3, [r7, #14]
 800ff04:	7b3a      	ldrb	r2, [r7, #12]
 800ff06:	4911      	ldr	r1, [pc, #68]	@ (800ff4c <UARTEx_SetNbDataToProcess+0x94>)
 800ff08:	5c8a      	ldrb	r2, [r1, r2]
 800ff0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff0e:	7b3a      	ldrb	r2, [r7, #12]
 800ff10:	490f      	ldr	r1, [pc, #60]	@ (800ff50 <UARTEx_SetNbDataToProcess+0x98>)
 800ff12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff20:	7bfb      	ldrb	r3, [r7, #15]
 800ff22:	7b7a      	ldrb	r2, [r7, #13]
 800ff24:	4909      	ldr	r1, [pc, #36]	@ (800ff4c <UARTEx_SetNbDataToProcess+0x94>)
 800ff26:	5c8a      	ldrb	r2, [r1, r2]
 800ff28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff2c:	7b7a      	ldrb	r2, [r7, #13]
 800ff2e:	4908      	ldr	r1, [pc, #32]	@ (800ff50 <UARTEx_SetNbDataToProcess+0x98>)
 800ff30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ff3e:	bf00      	nop
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	08012a90 	.word	0x08012a90
 800ff50:	08012a98 	.word	0x08012a98

0800ff54 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ff54:	b084      	sub	sp, #16
 800ff56:	b480      	push	{r7}
 800ff58:	b085      	sub	sp, #20
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
 800ff5e:	f107 001c 	add.w	r0, r7, #28
 800ff62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ff66:	2300      	movs	r3, #0
 800ff68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ff6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ff6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ff6e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ff70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ff72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ff74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ff76:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ff78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800ff7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	4313      	orrs	r3, r2
 800ff80:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685a      	ldr	r2, [r3, #4]
 800ff86:	4b07      	ldr	r3, [pc, #28]	@ (800ffa4 <SDMMC_Init+0x50>)
 800ff88:	4013      	ands	r3, r2
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	431a      	orrs	r2, r3
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff92:	2300      	movs	r3, #0
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3714      	adds	r7, #20
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	b004      	add	sp, #16
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	ffc02c00 	.word	0xffc02c00

0800ffa8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b083      	sub	sp, #12
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	370c      	adds	r7, #12
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr

0800ffc2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ffc2:	b480      	push	{r7}
 800ffc4:	b083      	sub	sp, #12
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
 800ffca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	370c      	adds	r7, #12
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f043 0203 	orr.w	r2, r3, #3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f003 0303 	and.w	r3, r3, #3
}
 8010016:	4618      	mov	r0, r3
 8010018:	370c      	adds	r7, #12
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
	...

08010024 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010024:	b480      	push	{r7}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801002e:	2300      	movs	r3, #0
 8010030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010042:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010048:	431a      	orrs	r2, r3
                       Command->CPSM);
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801004e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	4313      	orrs	r3, r2
 8010054:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68da      	ldr	r2, [r3, #12]
 801005a:	4b06      	ldr	r3, [pc, #24]	@ (8010074 <SDMMC_SendCommand+0x50>)
 801005c:	4013      	ands	r3, r2
 801005e:	68fa      	ldr	r2, [r7, #12]
 8010060:	431a      	orrs	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010066:	2300      	movs	r3, #0
}
 8010068:	4618      	mov	r0, r3
 801006a:	3714      	adds	r7, #20
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr
 8010074:	fffee0c0 	.word	0xfffee0c0

08010078 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010078:	b480      	push	{r7}
 801007a:	b083      	sub	sp, #12
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	691b      	ldr	r3, [r3, #16]
 8010084:	b2db      	uxtb	r3, r3
}
 8010086:	4618      	mov	r0, r3
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010092:	b480      	push	{r7}
 8010094:	b085      	sub	sp, #20
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	3314      	adds	r3, #20
 80100a0:	461a      	mov	r2, r3
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	4413      	add	r3, r2
 80100a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3714      	adds	r7, #20
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80100c2:	2300      	movs	r3, #0
 80100c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	685a      	ldr	r2, [r3, #4]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100de:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80100e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80100ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	4313      	orrs	r3, r2
 80100f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	431a      	orrs	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010102:	2300      	movs	r3, #0

}
 8010104:	4618      	mov	r0, r3
 8010106:	3714      	adds	r7, #20
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b088      	sub	sp, #32
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801011e:	2310      	movs	r3, #16
 8010120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010128:	2300      	movs	r3, #0
 801012a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801012c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010132:	f107 0308 	add.w	r3, r7, #8
 8010136:	4619      	mov	r1, r3
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7ff ff73 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801013e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010142:	2110      	movs	r1, #16
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f000 fa5f 	bl	8010608 <SDMMC_GetCmdResp1>
 801014a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801014c:	69fb      	ldr	r3, [r7, #28]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3720      	adds	r7, #32
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b088      	sub	sp, #32
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010164:	2311      	movs	r3, #17
 8010166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801016c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801016e:	2300      	movs	r3, #0
 8010170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010176:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010178:	f107 0308 	add.w	r3, r7, #8
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7ff ff50 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010188:	2111      	movs	r1, #17
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 fa3c 	bl	8010608 <SDMMC_GetCmdResp1>
 8010190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010192:	69fb      	ldr	r3, [r7, #28]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3720      	adds	r7, #32
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80101aa:	2312      	movs	r3, #18
 80101ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101b4:	2300      	movs	r3, #0
 80101b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101be:	f107 0308 	add.w	r3, r7, #8
 80101c2:	4619      	mov	r1, r3
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7ff ff2d 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80101ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101ce:	2112      	movs	r1, #18
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f000 fa19 	bl	8010608 <SDMMC_GetCmdResp1>
 80101d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101d8:	69fb      	ldr	r3, [r7, #28]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3720      	adds	r7, #32
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b088      	sub	sp, #32
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
 80101ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80101f0:	2318      	movs	r3, #24
 80101f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101fa:	2300      	movs	r3, #0
 80101fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010202:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010204:	f107 0308 	add.w	r3, r7, #8
 8010208:	4619      	mov	r1, r3
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7ff ff0a 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010214:	2118      	movs	r1, #24
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 f9f6 	bl	8010608 <SDMMC_GetCmdResp1>
 801021c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801021e:	69fb      	ldr	r3, [r7, #28]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3720      	adds	r7, #32
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b088      	sub	sp, #32
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010236:	2319      	movs	r3, #25
 8010238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801023a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801023e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010240:	2300      	movs	r3, #0
 8010242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010248:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801024a:	f107 0308 	add.w	r3, r7, #8
 801024e:	4619      	mov	r1, r3
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7ff fee7 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010256:	f241 3288 	movw	r2, #5000	@ 0x1388
 801025a:	2119      	movs	r1, #25
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f000 f9d3 	bl	8010608 <SDMMC_GetCmdResp1>
 8010262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010264:	69fb      	ldr	r3, [r7, #28]
}
 8010266:	4618      	mov	r0, r3
 8010268:	3720      	adds	r7, #32
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
	...

08010270 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b088      	sub	sp, #32
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010278:	2300      	movs	r3, #0
 801027a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801027c:	230c      	movs	r3, #12
 801027e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010286:	2300      	movs	r3, #0
 8010288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801028a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801028e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102a8:	f107 0308 	add.w	r3, r7, #8
 80102ac:	4619      	mov	r1, r3
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7ff feb8 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80102b4:	4a0b      	ldr	r2, [pc, #44]	@ (80102e4 <SDMMC_CmdStopTransfer+0x74>)
 80102b6:	210c      	movs	r1, #12
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 f9a5 	bl	8010608 <SDMMC_GetCmdResp1>
 80102be:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102d2:	d101      	bne.n	80102d8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80102d4:	2300      	movs	r3, #0
 80102d6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80102d8:	69fb      	ldr	r3, [r7, #28]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3720      	adds	r7, #32
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	05f5e100 	.word	0x05f5e100

080102e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b088      	sub	sp, #32
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80102f6:	2307      	movs	r3, #7
 80102f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010300:	2300      	movs	r3, #0
 8010302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801030a:	f107 0308 	add.w	r3, r7, #8
 801030e:	4619      	mov	r1, r3
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff fe87 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010316:	f241 3288 	movw	r2, #5000	@ 0x1388
 801031a:	2107      	movs	r1, #7
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 f973 	bl	8010608 <SDMMC_GetCmdResp1>
 8010322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010324:	69fb      	ldr	r3, [r7, #28]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3720      	adds	r7, #32
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b088      	sub	sp, #32
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010336:	2300      	movs	r3, #0
 8010338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801033a:	2300      	movs	r3, #0
 801033c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801033e:	2300      	movs	r3, #0
 8010340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010342:	2300      	movs	r3, #0
 8010344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010346:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801034a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801034c:	f107 0308 	add.w	r3, r7, #8
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7ff fe66 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f000 fb97 	bl	8010a8c <SDMMC_GetCmdError>
 801035e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010360:	69fb      	ldr	r3, [r7, #28]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3720      	adds	r7, #32
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801036a:	b580      	push	{r7, lr}
 801036c:	b088      	sub	sp, #32
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010372:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010378:	2308      	movs	r3, #8
 801037a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801037c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010382:	2300      	movs	r3, #0
 8010384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801038a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801038c:	f107 0308 	add.w	r3, r7, #8
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f7ff fe46 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 fb29 	bl	80109f0 <SDMMC_GetCmdResp7>
 801039e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103a0:	69fb      	ldr	r3, [r7, #28]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3720      	adds	r7, #32
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b088      	sub	sp, #32
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
 80103b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80103b8:	2337      	movs	r3, #55	@ 0x37
 80103ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103c2:	2300      	movs	r3, #0
 80103c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103cc:	f107 0308 	add.w	r3, r7, #8
 80103d0:	4619      	mov	r1, r3
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f7ff fe26 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80103d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103dc:	2137      	movs	r1, #55	@ 0x37
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 f912 	bl	8010608 <SDMMC_GetCmdResp1>
 80103e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103e6:	69fb      	ldr	r3, [r7, #28]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3720      	adds	r7, #32
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b088      	sub	sp, #32
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80103fe:	2329      	movs	r3, #41	@ 0x29
 8010400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010402:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010408:	2300      	movs	r3, #0
 801040a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801040c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010410:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010412:	f107 0308 	add.w	r3, r7, #8
 8010416:	4619      	mov	r1, r3
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f7ff fe03 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 fa2e 	bl	8010880 <SDMMC_GetCmdResp3>
 8010424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010426:	69fb      	ldr	r3, [r7, #28]
}
 8010428:	4618      	mov	r0, r3
 801042a:	3720      	adds	r7, #32
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801043e:	2306      	movs	r3, #6
 8010440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010448:	2300      	movs	r3, #0
 801044a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801044c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010452:	f107 0308 	add.w	r3, r7, #8
 8010456:	4619      	mov	r1, r3
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7ff fde3 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801045e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010462:	2106      	movs	r1, #6
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 f8cf 	bl	8010608 <SDMMC_GetCmdResp1>
 801046a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801046c:	69fb      	ldr	r3, [r7, #28]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3720      	adds	r7, #32
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b088      	sub	sp, #32
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801047e:	2300      	movs	r3, #0
 8010480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010482:	2333      	movs	r3, #51	@ 0x33
 8010484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010486:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801048a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801048c:	2300      	movs	r3, #0
 801048e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010494:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010496:	f107 0308 	add.w	r3, r7, #8
 801049a:	4619      	mov	r1, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7ff fdc1 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80104a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104a6:	2133      	movs	r1, #51	@ 0x33
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 f8ad 	bl	8010608 <SDMMC_GetCmdResp1>
 80104ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104b0:	69fb      	ldr	r3, [r7, #28]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3720      	adds	r7, #32
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b088      	sub	sp, #32
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80104c2:	2300      	movs	r3, #0
 80104c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80104c6:	2302      	movs	r3, #2
 80104c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80104ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80104ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104d0:	2300      	movs	r3, #0
 80104d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104da:	f107 0308 	add.w	r3, r7, #8
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7ff fd9f 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 f980 	bl	80107ec <SDMMC_GetCmdResp2>
 80104ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ee:	69fb      	ldr	r3, [r7, #28]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3720      	adds	r7, #32
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b088      	sub	sp, #32
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010506:	2309      	movs	r3, #9
 8010508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801050a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801050e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010510:	2300      	movs	r3, #0
 8010512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010518:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801051a:	f107 0308 	add.w	r3, r7, #8
 801051e:	4619      	mov	r1, r3
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff fd7f 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f960 	bl	80107ec <SDMMC_GetCmdResp2>
 801052c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801052e:	69fb      	ldr	r3, [r7, #28]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3720      	adds	r7, #32
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b088      	sub	sp, #32
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010542:	2300      	movs	r3, #0
 8010544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010546:	2303      	movs	r3, #3
 8010548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801054a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801054e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010550:	2300      	movs	r3, #0
 8010552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010558:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801055a:	f107 0308 	add.w	r3, r7, #8
 801055e:	4619      	mov	r1, r3
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f7ff fd5f 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010566:	683a      	ldr	r2, [r7, #0]
 8010568:	2103      	movs	r1, #3
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 f9c8 	bl	8010900 <SDMMC_GetCmdResp6>
 8010570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010572:	69fb      	ldr	r3, [r7, #28]
}
 8010574:	4618      	mov	r0, r3
 8010576:	3720      	adds	r7, #32
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b088      	sub	sp, #32
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801058a:	230d      	movs	r3, #13
 801058c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801058e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010594:	2300      	movs	r3, #0
 8010596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801059c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801059e:	f107 0308 	add.w	r3, r7, #8
 80105a2:	4619      	mov	r1, r3
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f7ff fd3d 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80105aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105ae:	210d      	movs	r1, #13
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f000 f829 	bl	8010608 <SDMMC_GetCmdResp1>
 80105b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105b8:	69fb      	ldr	r3, [r7, #28]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3720      	adds	r7, #32
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}

080105c2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80105c2:	b580      	push	{r7, lr}
 80105c4:	b088      	sub	sp, #32
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80105ca:	2300      	movs	r3, #0
 80105cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80105ce:	230d      	movs	r3, #13
 80105d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105d8:	2300      	movs	r3, #0
 80105da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105e2:	f107 0308 	add.w	r3, r7, #8
 80105e6:	4619      	mov	r1, r3
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7ff fd1b 	bl	8010024 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80105ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105f2:	210d      	movs	r1, #13
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f000 f807 	bl	8010608 <SDMMC_GetCmdResp1>
 80105fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105fc:	69fb      	ldr	r3, [r7, #28]
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3720      	adds	r7, #32
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
	...

08010608 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b088      	sub	sp, #32
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	460b      	mov	r3, r1
 8010612:	607a      	str	r2, [r7, #4]
 8010614:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010616:	4b70      	ldr	r3, [pc, #448]	@ (80107d8 <SDMMC_GetCmdResp1+0x1d0>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4a70      	ldr	r2, [pc, #448]	@ (80107dc <SDMMC_GetCmdResp1+0x1d4>)
 801061c:	fba2 2303 	umull	r2, r3, r2, r3
 8010620:	0a5a      	lsrs	r2, r3, #9
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	fb02 f303 	mul.w	r3, r2, r3
 8010628:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	1e5a      	subs	r2, r3, #1
 801062e:	61fa      	str	r2, [r7, #28]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d102      	bne.n	801063a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010634:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010638:	e0c9      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801063e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010640:	69ba      	ldr	r2, [r7, #24]
 8010642:	4b67      	ldr	r3, [pc, #412]	@ (80107e0 <SDMMC_GetCmdResp1+0x1d8>)
 8010644:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010646:	2b00      	cmp	r3, #0
 8010648:	d0ef      	beq.n	801062a <SDMMC_GetCmdResp1+0x22>
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010650:	2b00      	cmp	r3, #0
 8010652:	d1ea      	bne.n	801062a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010658:	f003 0304 	and.w	r3, r3, #4
 801065c:	2b00      	cmp	r3, #0
 801065e:	d004      	beq.n	801066a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2204      	movs	r2, #4
 8010664:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010666:	2304      	movs	r3, #4
 8010668:	e0b1      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801066e:	f003 0301 	and.w	r3, r3, #1
 8010672:	2b00      	cmp	r3, #0
 8010674:	d004      	beq.n	8010680 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2201      	movs	r2, #1
 801067a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801067c:	2301      	movs	r3, #1
 801067e:	e0a6      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	4a58      	ldr	r2, [pc, #352]	@ (80107e4 <SDMMC_GetCmdResp1+0x1dc>)
 8010684:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010686:	68f8      	ldr	r0, [r7, #12]
 8010688:	f7ff fcf6 	bl	8010078 <SDMMC_GetCommandResponse>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
 8010690:	7afb      	ldrb	r3, [r7, #11]
 8010692:	4293      	cmp	r3, r2
 8010694:	d001      	beq.n	801069a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010696:	2301      	movs	r3, #1
 8010698:	e099      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801069a:	2100      	movs	r1, #0
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f7ff fcf8 	bl	8010092 <SDMMC_GetResponse>
 80106a2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80106a4:	697a      	ldr	r2, [r7, #20]
 80106a6:	4b50      	ldr	r3, [pc, #320]	@ (80107e8 <SDMMC_GetCmdResp1+0x1e0>)
 80106a8:	4013      	ands	r3, r2
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d101      	bne.n	80106b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80106ae:	2300      	movs	r3, #0
 80106b0:	e08d      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	da02      	bge.n	80106be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80106b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80106bc:	e087      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80106c8:	2340      	movs	r3, #64	@ 0x40
 80106ca:	e080      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d001      	beq.n	80106da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80106d6:	2380      	movs	r3, #128	@ 0x80
 80106d8:	e079      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d002      	beq.n	80106ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80106e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80106e8:	e071      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d002      	beq.n	80106fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80106f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106f8:	e069      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010700:	2b00      	cmp	r3, #0
 8010702:	d002      	beq.n	801070a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010708:	e061      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010710:	2b00      	cmp	r3, #0
 8010712:	d002      	beq.n	801071a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010714:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010718:	e059      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010720:	2b00      	cmp	r3, #0
 8010722:	d002      	beq.n	801072a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010728:	e051      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010730:	2b00      	cmp	r3, #0
 8010732:	d002      	beq.n	801073a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010734:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010738:	e049      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010740:	2b00      	cmp	r3, #0
 8010742:	d002      	beq.n	801074a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010744:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010748:	e041      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010750:	2b00      	cmp	r3, #0
 8010752:	d002      	beq.n	801075a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010754:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010758:	e039      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010760:	2b00      	cmp	r3, #0
 8010762:	d002      	beq.n	801076a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010764:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010768:	e031      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010770:	2b00      	cmp	r3, #0
 8010772:	d002      	beq.n	801077a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010774:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010778:	e029      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010780:	2b00      	cmp	r3, #0
 8010782:	d002      	beq.n	801078a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010784:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010788:	e021      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010790:	2b00      	cmp	r3, #0
 8010792:	d002      	beq.n	801079a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010794:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010798:	e019      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d002      	beq.n	80107aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80107a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80107a8:	e011      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d002      	beq.n	80107ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80107b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80107b8:	e009      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	f003 0308 	and.w	r3, r3, #8
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d002      	beq.n	80107ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80107c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80107c8:	e001      	b.n	80107ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3720      	adds	r7, #32
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	2400000c 	.word	0x2400000c
 80107dc:	10624dd3 	.word	0x10624dd3
 80107e0:	00200045 	.word	0x00200045
 80107e4:	002000c5 	.word	0x002000c5
 80107e8:	fdffe008 	.word	0xfdffe008

080107ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b085      	sub	sp, #20
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80107f4:	4b1f      	ldr	r3, [pc, #124]	@ (8010874 <SDMMC_GetCmdResp2+0x88>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4a1f      	ldr	r2, [pc, #124]	@ (8010878 <SDMMC_GetCmdResp2+0x8c>)
 80107fa:	fba2 2303 	umull	r2, r3, r2, r3
 80107fe:	0a5b      	lsrs	r3, r3, #9
 8010800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010804:	fb02 f303 	mul.w	r3, r2, r3
 8010808:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	1e5a      	subs	r2, r3, #1
 801080e:	60fa      	str	r2, [r7, #12]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d102      	bne.n	801081a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010814:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010818:	e026      	b.n	8010868 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801081e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010826:	2b00      	cmp	r3, #0
 8010828:	d0ef      	beq.n	801080a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1ea      	bne.n	801080a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010838:	f003 0304 	and.w	r3, r3, #4
 801083c:	2b00      	cmp	r3, #0
 801083e:	d004      	beq.n	801084a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2204      	movs	r2, #4
 8010844:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010846:	2304      	movs	r3, #4
 8010848:	e00e      	b.n	8010868 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801084e:	f003 0301 	and.w	r3, r3, #1
 8010852:	2b00      	cmp	r3, #0
 8010854:	d004      	beq.n	8010860 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2201      	movs	r2, #1
 801085a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801085c:	2301      	movs	r3, #1
 801085e:	e003      	b.n	8010868 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	4a06      	ldr	r2, [pc, #24]	@ (801087c <SDMMC_GetCmdResp2+0x90>)
 8010864:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3714      	adds	r7, #20
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr
 8010874:	2400000c 	.word	0x2400000c
 8010878:	10624dd3 	.word	0x10624dd3
 801087c:	002000c5 	.word	0x002000c5

08010880 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010880:	b480      	push	{r7}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010888:	4b1a      	ldr	r3, [pc, #104]	@ (80108f4 <SDMMC_GetCmdResp3+0x74>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a1a      	ldr	r2, [pc, #104]	@ (80108f8 <SDMMC_GetCmdResp3+0x78>)
 801088e:	fba2 2303 	umull	r2, r3, r2, r3
 8010892:	0a5b      	lsrs	r3, r3, #9
 8010894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010898:	fb02 f303 	mul.w	r3, r2, r3
 801089c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	1e5a      	subs	r2, r3, #1
 80108a2:	60fa      	str	r2, [r7, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d102      	bne.n	80108ae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80108ac:	e01b      	b.n	80108e6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d0ef      	beq.n	801089e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1ea      	bne.n	801089e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108cc:	f003 0304 	and.w	r3, r3, #4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d004      	beq.n	80108de <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2204      	movs	r2, #4
 80108d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108da:	2304      	movs	r3, #4
 80108dc:	e003      	b.n	80108e6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4a06      	ldr	r2, [pc, #24]	@ (80108fc <SDMMC_GetCmdResp3+0x7c>)
 80108e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3714      	adds	r7, #20
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	2400000c 	.word	0x2400000c
 80108f8:	10624dd3 	.word	0x10624dd3
 80108fc:	002000c5 	.word	0x002000c5

08010900 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b088      	sub	sp, #32
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	460b      	mov	r3, r1
 801090a:	607a      	str	r2, [r7, #4]
 801090c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801090e:	4b35      	ldr	r3, [pc, #212]	@ (80109e4 <SDMMC_GetCmdResp6+0xe4>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4a35      	ldr	r2, [pc, #212]	@ (80109e8 <SDMMC_GetCmdResp6+0xe8>)
 8010914:	fba2 2303 	umull	r2, r3, r2, r3
 8010918:	0a5b      	lsrs	r3, r3, #9
 801091a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801091e:	fb02 f303 	mul.w	r3, r2, r3
 8010922:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	1e5a      	subs	r2, r3, #1
 8010928:	61fa      	str	r2, [r7, #28]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d102      	bne.n	8010934 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801092e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010932:	e052      	b.n	80109da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010938:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010940:	2b00      	cmp	r3, #0
 8010942:	d0ef      	beq.n	8010924 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1ea      	bne.n	8010924 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010952:	f003 0304 	and.w	r3, r3, #4
 8010956:	2b00      	cmp	r3, #0
 8010958:	d004      	beq.n	8010964 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2204      	movs	r2, #4
 801095e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010960:	2304      	movs	r3, #4
 8010962:	e03a      	b.n	80109da <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010968:	f003 0301 	and.w	r3, r3, #1
 801096c:	2b00      	cmp	r3, #0
 801096e:	d004      	beq.n	801097a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2201      	movs	r2, #1
 8010974:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010976:	2301      	movs	r3, #1
 8010978:	e02f      	b.n	80109da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	f7ff fb7c 	bl	8010078 <SDMMC_GetCommandResponse>
 8010980:	4603      	mov	r3, r0
 8010982:	461a      	mov	r2, r3
 8010984:	7afb      	ldrb	r3, [r7, #11]
 8010986:	4293      	cmp	r3, r2
 8010988:	d001      	beq.n	801098e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801098a:	2301      	movs	r3, #1
 801098c:	e025      	b.n	80109da <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	4a16      	ldr	r2, [pc, #88]	@ (80109ec <SDMMC_GetCmdResp6+0xec>)
 8010992:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010994:	2100      	movs	r1, #0
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f7ff fb7b 	bl	8010092 <SDMMC_GetResponse>
 801099c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d106      	bne.n	80109b6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	0c1b      	lsrs	r3, r3, #16
 80109ac:	b29a      	uxth	r2, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80109b2:	2300      	movs	r3, #0
 80109b4:	e011      	b.n	80109da <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80109c4:	e009      	b.n	80109da <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d002      	beq.n	80109d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80109d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109d4:	e001      	b.n	80109da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3720      	adds	r7, #32
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	2400000c 	.word	0x2400000c
 80109e8:	10624dd3 	.word	0x10624dd3
 80109ec:	002000c5 	.word	0x002000c5

080109f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b085      	sub	sp, #20
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109f8:	4b22      	ldr	r3, [pc, #136]	@ (8010a84 <SDMMC_GetCmdResp7+0x94>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	4a22      	ldr	r2, [pc, #136]	@ (8010a88 <SDMMC_GetCmdResp7+0x98>)
 80109fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010a02:	0a5b      	lsrs	r3, r3, #9
 8010a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a08:	fb02 f303 	mul.w	r3, r2, r3
 8010a0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	1e5a      	subs	r2, r3, #1
 8010a12:	60fa      	str	r2, [r7, #12]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d102      	bne.n	8010a1e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a1c:	e02c      	b.n	8010a78 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a22:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d0ef      	beq.n	8010a0e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1ea      	bne.n	8010a0e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a3c:	f003 0304 	and.w	r3, r3, #4
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d004      	beq.n	8010a4e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2204      	movs	r2, #4
 8010a48:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a4a:	2304      	movs	r3, #4
 8010a4c:	e014      	b.n	8010a78 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a52:	f003 0301 	and.w	r3, r3, #1
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d004      	beq.n	8010a64 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a60:	2301      	movs	r3, #1
 8010a62:	e009      	b.n	8010a78 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d002      	beq.n	8010a76 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2240      	movs	r2, #64	@ 0x40
 8010a74:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a76:	2300      	movs	r3, #0

}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3714      	adds	r7, #20
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr
 8010a84:	2400000c 	.word	0x2400000c
 8010a88:	10624dd3 	.word	0x10624dd3

08010a8c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a94:	4b11      	ldr	r3, [pc, #68]	@ (8010adc <SDMMC_GetCmdError+0x50>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4a11      	ldr	r2, [pc, #68]	@ (8010ae0 <SDMMC_GetCmdError+0x54>)
 8010a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a9e:	0a5b      	lsrs	r3, r3, #9
 8010aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010aa4:	fb02 f303 	mul.w	r3, r2, r3
 8010aa8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	1e5a      	subs	r2, r3, #1
 8010aae:	60fa      	str	r2, [r7, #12]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d102      	bne.n	8010aba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ab4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ab8:	e009      	b.n	8010ace <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d0f1      	beq.n	8010aaa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4a06      	ldr	r2, [pc, #24]	@ (8010ae4 <SDMMC_GetCmdError+0x58>)
 8010aca:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3714      	adds	r7, #20
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	2400000c 	.word	0x2400000c
 8010ae0:	10624dd3 	.word	0x10624dd3
 8010ae4:	002000c5 	.word	0x002000c5

08010ae8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010aec:	4904      	ldr	r1, [pc, #16]	@ (8010b00 <MX_FATFS_Init+0x18>)
 8010aee:	4805      	ldr	r0, [pc, #20]	@ (8010b04 <MX_FATFS_Init+0x1c>)
 8010af0:	f001 f908 	bl	8011d04 <FATFS_LinkDriver>
 8010af4:	4603      	mov	r3, r0
 8010af6:	461a      	mov	r2, r3
 8010af8:	4b03      	ldr	r3, [pc, #12]	@ (8010b08 <MX_FATFS_Init+0x20>)
 8010afa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010afc:	bf00      	nop
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	24001828 	.word	0x24001828
 8010b04:	08012aa0 	.word	0x08012aa0
 8010b08:	24001824 	.word	0x24001824

08010b0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010b12:	2300      	movs	r3, #0
 8010b14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010b16:	f000 f885 	bl	8010c24 <BSP_SD_IsDetected>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d001      	beq.n	8010b24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010b20:	2302      	movs	r3, #2
 8010b22:	e012      	b.n	8010b4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010b24:	480b      	ldr	r0, [pc, #44]	@ (8010b54 <BSP_SD_Init+0x48>)
 8010b26:	f7fb f95d 	bl	800bde4 <HAL_SD_Init>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010b2e:	79fb      	ldrb	r3, [r7, #7]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d109      	bne.n	8010b48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010b34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010b38:	4806      	ldr	r0, [pc, #24]	@ (8010b54 <BSP_SD_Init+0x48>)
 8010b3a:	f7fc f813 	bl	800cb64 <HAL_SD_ConfigWideBusOperation>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d001      	beq.n	8010b48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010b44:	2301      	movs	r3, #1
 8010b46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010b48:	79fb      	ldrb	r3, [r7, #7]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3708      	adds	r7, #8
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	2400032c 	.word	0x2400032c

08010b58 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b086      	sub	sp, #24
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	68f9      	ldr	r1, [r7, #12]
 8010b6e:	4806      	ldr	r0, [pc, #24]	@ (8010b88 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010b70:	f7fb fa58 	bl	800c024 <HAL_SD_ReadBlocks_DMA>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3718      	adds	r7, #24
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	2400032c 	.word	0x2400032c

08010b8c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b086      	sub	sp, #24
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	60b9      	str	r1, [r7, #8]
 8010b96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	68ba      	ldr	r2, [r7, #8]
 8010ba0:	68f9      	ldr	r1, [r7, #12]
 8010ba2:	4806      	ldr	r0, [pc, #24]	@ (8010bbc <BSP_SD_WriteBlocks_DMA+0x30>)
 8010ba4:	f7fb fae6 	bl	800c174 <HAL_SD_WriteBlocks_DMA>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d001      	beq.n	8010bb2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3718      	adds	r7, #24
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	2400032c 	.word	0x2400032c

08010bc0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010bc4:	4805      	ldr	r0, [pc, #20]	@ (8010bdc <BSP_SD_GetCardState+0x1c>)
 8010bc6:	f7fc f8df 	bl	800cd88 <HAL_SD_GetCardState>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b04      	cmp	r3, #4
 8010bce:	bf14      	ite	ne
 8010bd0:	2301      	movne	r3, #1
 8010bd2:	2300      	moveq	r3, #0
 8010bd4:	b2db      	uxtb	r3, r3
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	2400032c 	.word	0x2400032c

08010be0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010be8:	6879      	ldr	r1, [r7, #4]
 8010bea:	4803      	ldr	r0, [pc, #12]	@ (8010bf8 <BSP_SD_GetCardInfo+0x18>)
 8010bec:	f7fb ff8e 	bl	800cb0c <HAL_SD_GetCardInfo>
}
 8010bf0:	bf00      	nop
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	2400032c 	.word	0x2400032c

08010bfc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010c04:	f000 f9a0 	bl	8010f48 <BSP_SD_WriteCpltCallback>
}
 8010c08:	bf00      	nop
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010c18:	f000 f9a2 	bl	8010f60 <BSP_SD_ReadCpltCallback>
}
 8010c1c:	bf00      	nop
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010c2e:	f000 f80b 	bl	8010c48 <BSP_PlatformIsDetected>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d101      	bne.n	8010c3c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	b2db      	uxtb	r3, r3
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}

08010c48 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010c4e:	2301      	movs	r3, #1
 8010c50:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010c52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010c56:	4806      	ldr	r0, [pc, #24]	@ (8010c70 <BSP_PlatformIsDetected+0x28>)
 8010c58:	f7f7 fd0c 	bl	8008674 <HAL_GPIO_ReadPin>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010c62:	2300      	movs	r3, #0
 8010c64:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010c66:	79fb      	ldrb	r3, [r7, #7]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	58021400 	.word	0x58021400

08010c74 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010c7c:	f7f1 fe94 	bl	80029a8 <HAL_GetTick>
 8010c80:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010c82:	e006      	b.n	8010c92 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c84:	f7ff ff9c 	bl	8010bc0 <BSP_SD_GetCardState>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d101      	bne.n	8010c92 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	e009      	b.n	8010ca6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010c92:	f7f1 fe89 	bl	80029a8 <HAL_GetTick>
 8010c96:	4602      	mov	r2, r0
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d8f0      	bhi.n	8010c84 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3710      	adds	r7, #16
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
	...

08010cb0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010cba:	4b0b      	ldr	r3, [pc, #44]	@ (8010ce8 <SD_CheckStatus+0x38>)
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010cc0:	f7ff ff7e 	bl	8010bc0 <BSP_SD_GetCardState>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d107      	bne.n	8010cda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010cca:	4b07      	ldr	r3, [pc, #28]	@ (8010ce8 <SD_CheckStatus+0x38>)
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	f023 0301 	bic.w	r3, r3, #1
 8010cd4:	b2da      	uxtb	r2, r3
 8010cd6:	4b04      	ldr	r3, [pc, #16]	@ (8010ce8 <SD_CheckStatus+0x38>)
 8010cd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010cda:	4b03      	ldr	r3, [pc, #12]	@ (8010ce8 <SD_CheckStatus+0x38>)
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	b2db      	uxtb	r3, r3
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	24000019 	.word	0x24000019

08010cec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010cf6:	f7ff ff09 	bl	8010b0c <BSP_SD_Init>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d107      	bne.n	8010d10 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010d00:	79fb      	ldrb	r3, [r7, #7]
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7ff ffd4 	bl	8010cb0 <SD_CheckStatus>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	4b04      	ldr	r3, [pc, #16]	@ (8010d20 <SD_initialize+0x34>)
 8010d0e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010d10:	4b03      	ldr	r3, [pc, #12]	@ (8010d20 <SD_initialize+0x34>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	b2db      	uxtb	r3, r3
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3708      	adds	r7, #8
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	24000019 	.word	0x24000019

08010d24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010d2e:	79fb      	ldrb	r3, [r7, #7]
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7ff ffbd 	bl	8010cb0 <SD_CheckStatus>
 8010d36:	4603      	mov	r3, r0
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b086      	sub	sp, #24
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	60b9      	str	r1, [r7, #8]
 8010d48:	607a      	str	r2, [r7, #4]
 8010d4a:	603b      	str	r3, [r7, #0]
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d50:	2301      	movs	r3, #1
 8010d52:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d54:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010d58:	f7ff ff8c 	bl	8010c74 <SD_CheckStatusWithTimeout>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	da01      	bge.n	8010d66 <SD_read+0x26>
  {
    return res;
 8010d62:	7dfb      	ldrb	r3, [r7, #23]
 8010d64:	e03b      	b.n	8010dde <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010d66:	683a      	ldr	r2, [r7, #0]
 8010d68:	6879      	ldr	r1, [r7, #4]
 8010d6a:	68b8      	ldr	r0, [r7, #8]
 8010d6c:	f7ff fef4 	bl	8010b58 <BSP_SD_ReadBlocks_DMA>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d132      	bne.n	8010ddc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010d76:	4b1c      	ldr	r3, [pc, #112]	@ (8010de8 <SD_read+0xa8>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010d7c:	f7f1 fe14 	bl	80029a8 <HAL_GetTick>
 8010d80:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d82:	bf00      	nop
 8010d84:	4b18      	ldr	r3, [pc, #96]	@ (8010de8 <SD_read+0xa8>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d108      	bne.n	8010d9e <SD_read+0x5e>
 8010d8c:	f7f1 fe0c 	bl	80029a8 <HAL_GetTick>
 8010d90:	4602      	mov	r2, r0
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	1ad3      	subs	r3, r2, r3
 8010d96:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d9f2      	bls.n	8010d84 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010d9e:	4b12      	ldr	r3, [pc, #72]	@ (8010de8 <SD_read+0xa8>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d102      	bne.n	8010dac <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010da6:	2301      	movs	r3, #1
 8010da8:	75fb      	strb	r3, [r7, #23]
 8010daa:	e017      	b.n	8010ddc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010dac:	4b0e      	ldr	r3, [pc, #56]	@ (8010de8 <SD_read+0xa8>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010db2:	f7f1 fdf9 	bl	80029a8 <HAL_GetTick>
 8010db6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010db8:	e007      	b.n	8010dca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010dba:	f7ff ff01 	bl	8010bc0 <BSP_SD_GetCardState>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d102      	bne.n	8010dca <SD_read+0x8a>
          {
            res = RES_OK;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010dc8:	e008      	b.n	8010ddc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010dca:	f7f1 fded 	bl	80029a8 <HAL_GetTick>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d9ee      	bls.n	8010dba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3718      	adds	r7, #24
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	24001834 	.word	0x24001834

08010dec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b086      	sub	sp, #24
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60b9      	str	r1, [r7, #8]
 8010df4:	607a      	str	r2, [r7, #4]
 8010df6:	603b      	str	r3, [r7, #0]
 8010df8:	4603      	mov	r3, r0
 8010dfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010e00:	4b24      	ldr	r3, [pc, #144]	@ (8010e94 <SD_write+0xa8>)
 8010e02:	2200      	movs	r2, #0
 8010e04:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010e06:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010e0a:	f7ff ff33 	bl	8010c74 <SD_CheckStatusWithTimeout>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	da01      	bge.n	8010e18 <SD_write+0x2c>
  {
    return res;
 8010e14:	7dfb      	ldrb	r3, [r7, #23]
 8010e16:	e038      	b.n	8010e8a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010e18:	683a      	ldr	r2, [r7, #0]
 8010e1a:	6879      	ldr	r1, [r7, #4]
 8010e1c:	68b8      	ldr	r0, [r7, #8]
 8010e1e:	f7ff feb5 	bl	8010b8c <BSP_SD_WriteBlocks_DMA>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d12f      	bne.n	8010e88 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010e28:	f7f1 fdbe 	bl	80029a8 <HAL_GetTick>
 8010e2c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010e2e:	bf00      	nop
 8010e30:	4b18      	ldr	r3, [pc, #96]	@ (8010e94 <SD_write+0xa8>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d108      	bne.n	8010e4a <SD_write+0x5e>
 8010e38:	f7f1 fdb6 	bl	80029a8 <HAL_GetTick>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	1ad3      	subs	r3, r2, r3
 8010e42:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d9f2      	bls.n	8010e30 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010e4a:	4b12      	ldr	r3, [pc, #72]	@ (8010e94 <SD_write+0xa8>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d102      	bne.n	8010e58 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010e52:	2301      	movs	r3, #1
 8010e54:	75fb      	strb	r3, [r7, #23]
 8010e56:	e017      	b.n	8010e88 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010e58:	4b0e      	ldr	r3, [pc, #56]	@ (8010e94 <SD_write+0xa8>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010e5e:	f7f1 fda3 	bl	80029a8 <HAL_GetTick>
 8010e62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e64:	e007      	b.n	8010e76 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e66:	f7ff feab 	bl	8010bc0 <BSP_SD_GetCardState>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d102      	bne.n	8010e76 <SD_write+0x8a>
          {
            res = RES_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	75fb      	strb	r3, [r7, #23]
            break;
 8010e74:	e008      	b.n	8010e88 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e76:	f7f1 fd97 	bl	80029a8 <HAL_GetTick>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	1ad3      	subs	r3, r2, r3
 8010e80:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d9ee      	bls.n	8010e66 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3718      	adds	r7, #24
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	bf00      	nop
 8010e94:	24001830 	.word	0x24001830

08010e98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b08c      	sub	sp, #48	@ 0x30
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	603a      	str	r2, [r7, #0]
 8010ea2:	71fb      	strb	r3, [r7, #7]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010eae:	4b25      	ldr	r3, [pc, #148]	@ (8010f44 <SD_ioctl+0xac>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	f003 0301 	and.w	r3, r3, #1
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d001      	beq.n	8010ec0 <SD_ioctl+0x28>
 8010ebc:	2303      	movs	r3, #3
 8010ebe:	e03c      	b.n	8010f3a <SD_ioctl+0xa2>

  switch (cmd)
 8010ec0:	79bb      	ldrb	r3, [r7, #6]
 8010ec2:	2b03      	cmp	r3, #3
 8010ec4:	d834      	bhi.n	8010f30 <SD_ioctl+0x98>
 8010ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8010ecc <SD_ioctl+0x34>)
 8010ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ecc:	08010edd 	.word	0x08010edd
 8010ed0:	08010ee5 	.word	0x08010ee5
 8010ed4:	08010efd 	.word	0x08010efd
 8010ed8:	08010f17 	.word	0x08010f17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010edc:	2300      	movs	r3, #0
 8010ede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ee2:	e028      	b.n	8010f36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ee4:	f107 0308 	add.w	r3, r7, #8
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7ff fe79 	bl	8010be0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010eee:	6a3a      	ldr	r2, [r7, #32]
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010efa:	e01c      	b.n	8010f36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010efc:	f107 0308 	add.w	r3, r7, #8
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff fe6d 	bl	8010be0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f08:	b29a      	uxth	r2, r3
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010f14:	e00f      	b.n	8010f36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f16:	f107 0308 	add.w	r3, r7, #8
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff fe60 	bl	8010be0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f22:	0a5a      	lsrs	r2, r3, #9
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010f2e:	e002      	b.n	8010f36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010f30:	2304      	movs	r3, #4
 8010f32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010f36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3730      	adds	r7, #48	@ 0x30
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	24000019 	.word	0x24000019

08010f48 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010f4c:	4b03      	ldr	r3, [pc, #12]	@ (8010f5c <BSP_SD_WriteCpltCallback+0x14>)
 8010f4e:	2201      	movs	r2, #1
 8010f50:	601a      	str	r2, [r3, #0]
}
 8010f52:	bf00      	nop
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr
 8010f5c:	24001830 	.word	0x24001830

08010f60 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010f60:	b480      	push	{r7}
 8010f62:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010f64:	4b03      	ldr	r3, [pc, #12]	@ (8010f74 <BSP_SD_ReadCpltCallback+0x14>)
 8010f66:	2201      	movs	r2, #1
 8010f68:	601a      	str	r2, [r3, #0]
}
 8010f6a:	bf00      	nop
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	24001834 	.word	0x24001834

08010f78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	4603      	mov	r3, r0
 8010f80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010f82:	79fb      	ldrb	r3, [r7, #7]
 8010f84:	4a08      	ldr	r2, [pc, #32]	@ (8010fa8 <disk_status+0x30>)
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	4413      	add	r3, r2
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	79fa      	ldrb	r2, [r7, #7]
 8010f90:	4905      	ldr	r1, [pc, #20]	@ (8010fa8 <disk_status+0x30>)
 8010f92:	440a      	add	r2, r1
 8010f94:	7a12      	ldrb	r2, [r2, #8]
 8010f96:	4610      	mov	r0, r2
 8010f98:	4798      	blx	r3
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3710      	adds	r7, #16
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	24001a60 	.word	0x24001a60

08010fac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010fba:	79fb      	ldrb	r3, [r7, #7]
 8010fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8010ff8 <disk_initialize+0x4c>)
 8010fbe:	5cd3      	ldrb	r3, [r2, r3]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d114      	bne.n	8010fee <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010fc4:	79fb      	ldrb	r3, [r7, #7]
 8010fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8010ff8 <disk_initialize+0x4c>)
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	4413      	add	r3, r2
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	79fa      	ldrb	r2, [r7, #7]
 8010fd2:	4909      	ldr	r1, [pc, #36]	@ (8010ff8 <disk_initialize+0x4c>)
 8010fd4:	440a      	add	r2, r1
 8010fd6:	7a12      	ldrb	r2, [r2, #8]
 8010fd8:	4610      	mov	r0, r2
 8010fda:	4798      	blx	r3
 8010fdc:	4603      	mov	r3, r0
 8010fde:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010fe0:	7bfb      	ldrb	r3, [r7, #15]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d103      	bne.n	8010fee <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010fe6:	79fb      	ldrb	r3, [r7, #7]
 8010fe8:	4a03      	ldr	r2, [pc, #12]	@ (8010ff8 <disk_initialize+0x4c>)
 8010fea:	2101      	movs	r1, #1
 8010fec:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3710      	adds	r7, #16
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	24001a60 	.word	0x24001a60

08010ffc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010ffc:	b590      	push	{r4, r7, lr}
 8010ffe:	b087      	sub	sp, #28
 8011000:	af00      	add	r7, sp, #0
 8011002:	60b9      	str	r1, [r7, #8]
 8011004:	607a      	str	r2, [r7, #4]
 8011006:	603b      	str	r3, [r7, #0]
 8011008:	4603      	mov	r3, r0
 801100a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801100c:	7bfb      	ldrb	r3, [r7, #15]
 801100e:	4a0a      	ldr	r2, [pc, #40]	@ (8011038 <disk_read+0x3c>)
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	4413      	add	r3, r2
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	689c      	ldr	r4, [r3, #8]
 8011018:	7bfb      	ldrb	r3, [r7, #15]
 801101a:	4a07      	ldr	r2, [pc, #28]	@ (8011038 <disk_read+0x3c>)
 801101c:	4413      	add	r3, r2
 801101e:	7a18      	ldrb	r0, [r3, #8]
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	68b9      	ldr	r1, [r7, #8]
 8011026:	47a0      	blx	r4
 8011028:	4603      	mov	r3, r0
 801102a:	75fb      	strb	r3, [r7, #23]
  return res;
 801102c:	7dfb      	ldrb	r3, [r7, #23]
}
 801102e:	4618      	mov	r0, r3
 8011030:	371c      	adds	r7, #28
 8011032:	46bd      	mov	sp, r7
 8011034:	bd90      	pop	{r4, r7, pc}
 8011036:	bf00      	nop
 8011038:	24001a60 	.word	0x24001a60

0801103c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801103c:	b590      	push	{r4, r7, lr}
 801103e:	b087      	sub	sp, #28
 8011040:	af00      	add	r7, sp, #0
 8011042:	60b9      	str	r1, [r7, #8]
 8011044:	607a      	str	r2, [r7, #4]
 8011046:	603b      	str	r3, [r7, #0]
 8011048:	4603      	mov	r3, r0
 801104a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801104c:	7bfb      	ldrb	r3, [r7, #15]
 801104e:	4a0a      	ldr	r2, [pc, #40]	@ (8011078 <disk_write+0x3c>)
 8011050:	009b      	lsls	r3, r3, #2
 8011052:	4413      	add	r3, r2
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	68dc      	ldr	r4, [r3, #12]
 8011058:	7bfb      	ldrb	r3, [r7, #15]
 801105a:	4a07      	ldr	r2, [pc, #28]	@ (8011078 <disk_write+0x3c>)
 801105c:	4413      	add	r3, r2
 801105e:	7a18      	ldrb	r0, [r3, #8]
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	68b9      	ldr	r1, [r7, #8]
 8011066:	47a0      	blx	r4
 8011068:	4603      	mov	r3, r0
 801106a:	75fb      	strb	r3, [r7, #23]
  return res;
 801106c:	7dfb      	ldrb	r3, [r7, #23]
}
 801106e:	4618      	mov	r0, r3
 8011070:	371c      	adds	r7, #28
 8011072:	46bd      	mov	sp, r7
 8011074:	bd90      	pop	{r4, r7, pc}
 8011076:	bf00      	nop
 8011078:	24001a60 	.word	0x24001a60

0801107c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	4603      	mov	r3, r0
 8011084:	603a      	str	r2, [r7, #0]
 8011086:	71fb      	strb	r3, [r7, #7]
 8011088:	460b      	mov	r3, r1
 801108a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801108c:	79fb      	ldrb	r3, [r7, #7]
 801108e:	4a09      	ldr	r2, [pc, #36]	@ (80110b4 <disk_ioctl+0x38>)
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	4413      	add	r3, r2
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	691b      	ldr	r3, [r3, #16]
 8011098:	79fa      	ldrb	r2, [r7, #7]
 801109a:	4906      	ldr	r1, [pc, #24]	@ (80110b4 <disk_ioctl+0x38>)
 801109c:	440a      	add	r2, r1
 801109e:	7a10      	ldrb	r0, [r2, #8]
 80110a0:	79b9      	ldrb	r1, [r7, #6]
 80110a2:	683a      	ldr	r2, [r7, #0]
 80110a4:	4798      	blx	r3
 80110a6:	4603      	mov	r3, r0
 80110a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80110aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3710      	adds	r7, #16
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	24001a60 	.word	0x24001a60

080110b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80110b8:	b480      	push	{r7}
 80110ba:	b085      	sub	sp, #20
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	3301      	adds	r3, #1
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80110c8:	89fb      	ldrh	r3, [r7, #14]
 80110ca:	021b      	lsls	r3, r3, #8
 80110cc:	b21a      	sxth	r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	b21b      	sxth	r3, r3
 80110d4:	4313      	orrs	r3, r2
 80110d6:	b21b      	sxth	r3, r3
 80110d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80110da:	89fb      	ldrh	r3, [r7, #14]
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3714      	adds	r7, #20
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr

080110e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	3303      	adds	r3, #3
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	021b      	lsls	r3, r3, #8
 80110fc:	687a      	ldr	r2, [r7, #4]
 80110fe:	3202      	adds	r2, #2
 8011100:	7812      	ldrb	r2, [r2, #0]
 8011102:	4313      	orrs	r3, r2
 8011104:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	021b      	lsls	r3, r3, #8
 801110a:	687a      	ldr	r2, [r7, #4]
 801110c:	3201      	adds	r2, #1
 801110e:	7812      	ldrb	r2, [r2, #0]
 8011110:	4313      	orrs	r3, r2
 8011112:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	021b      	lsls	r3, r3, #8
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	7812      	ldrb	r2, [r2, #0]
 801111c:	4313      	orrs	r3, r2
 801111e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011120:	68fb      	ldr	r3, [r7, #12]
}
 8011122:	4618      	mov	r0, r3
 8011124:	3714      	adds	r7, #20
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr
	...

08011130 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011130:	b480      	push	{r7}
 8011132:	b085      	sub	sp, #20
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011138:	2300      	movs	r3, #0
 801113a:	60fb      	str	r3, [r7, #12]
 801113c:	e010      	b.n	8011160 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801113e:	4a0d      	ldr	r2, [pc, #52]	@ (8011174 <clear_lock+0x44>)
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	011b      	lsls	r3, r3, #4
 8011144:	4413      	add	r3, r2
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	429a      	cmp	r2, r3
 801114c:	d105      	bne.n	801115a <clear_lock+0x2a>
 801114e:	4a09      	ldr	r2, [pc, #36]	@ (8011174 <clear_lock+0x44>)
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	011b      	lsls	r3, r3, #4
 8011154:	4413      	add	r3, r2
 8011156:	2200      	movs	r2, #0
 8011158:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	3301      	adds	r3, #1
 801115e:	60fb      	str	r3, [r7, #12]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2b01      	cmp	r3, #1
 8011164:	d9eb      	bls.n	801113e <clear_lock+0xe>
	}
}
 8011166:	bf00      	nop
 8011168:	bf00      	nop
 801116a:	3714      	adds	r7, #20
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr
 8011174:	24001840 	.word	0x24001840

08011178 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b086      	sub	sp, #24
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011180:	2300      	movs	r3, #0
 8011182:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	78db      	ldrb	r3, [r3, #3]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d034      	beq.n	80111f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011190:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	7858      	ldrb	r0, [r3, #1]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801119c:	2301      	movs	r3, #1
 801119e:	697a      	ldr	r2, [r7, #20]
 80111a0:	f7ff ff4c 	bl	801103c <disk_write>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d002      	beq.n	80111b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80111aa:	2301      	movs	r3, #1
 80111ac:	73fb      	strb	r3, [r7, #15]
 80111ae:	e022      	b.n	80111f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2200      	movs	r2, #0
 80111b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111ba:	697a      	ldr	r2, [r7, #20]
 80111bc:	1ad2      	subs	r2, r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6a1b      	ldr	r3, [r3, #32]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d217      	bcs.n	80111f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	789b      	ldrb	r3, [r3, #2]
 80111ca:	613b      	str	r3, [r7, #16]
 80111cc:	e010      	b.n	80111f0 <sync_window+0x78>
					wsect += fs->fsize;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6a1b      	ldr	r3, [r3, #32]
 80111d2:	697a      	ldr	r2, [r7, #20]
 80111d4:	4413      	add	r3, r2
 80111d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7858      	ldrb	r0, [r3, #1]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80111e2:	2301      	movs	r3, #1
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	f7ff ff29 	bl	801103c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	613b      	str	r3, [r7, #16]
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d8eb      	bhi.n	80111ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80111f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3718      	adds	r7, #24
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801120a:	2300      	movs	r3, #0
 801120c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011212:	683a      	ldr	r2, [r7, #0]
 8011214:	429a      	cmp	r2, r3
 8011216:	d01b      	beq.n	8011250 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f7ff ffad 	bl	8011178 <sync_window>
 801121e:	4603      	mov	r3, r0
 8011220:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011222:	7bfb      	ldrb	r3, [r7, #15]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d113      	bne.n	8011250 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7858      	ldrb	r0, [r3, #1]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011232:	2301      	movs	r3, #1
 8011234:	683a      	ldr	r2, [r7, #0]
 8011236:	f7ff fee1 	bl	8010ffc <disk_read>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d004      	beq.n	801124a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011240:	f04f 33ff 	mov.w	r3, #4294967295
 8011244:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011246:	2301      	movs	r3, #1
 8011248:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	683a      	ldr	r2, [r7, #0]
 801124e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8011250:	7bfb      	ldrb	r3, [r7, #15]
}
 8011252:	4618      	mov	r0, r3
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b086      	sub	sp, #24
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
 8011262:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	2b01      	cmp	r3, #1
 801126e:	d904      	bls.n	801127a <get_fat+0x20>
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	69db      	ldr	r3, [r3, #28]
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	429a      	cmp	r2, r3
 8011278:	d302      	bcc.n	8011280 <get_fat+0x26>
		val = 1;	/* Internal error */
 801127a:	2301      	movs	r3, #1
 801127c:	617b      	str	r3, [r7, #20]
 801127e:	e0ba      	b.n	80113f6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011280:	f04f 33ff 	mov.w	r3, #4294967295
 8011284:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b03      	cmp	r3, #3
 801128c:	f000 8082 	beq.w	8011394 <get_fat+0x13a>
 8011290:	2b03      	cmp	r3, #3
 8011292:	f300 80a6 	bgt.w	80113e2 <get_fat+0x188>
 8011296:	2b01      	cmp	r3, #1
 8011298:	d002      	beq.n	80112a0 <get_fat+0x46>
 801129a:	2b02      	cmp	r3, #2
 801129c:	d055      	beq.n	801134a <get_fat+0xf0>
 801129e:	e0a0      	b.n	80113e2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	60fb      	str	r3, [r7, #12]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	085b      	lsrs	r3, r3, #1
 80112a8:	68fa      	ldr	r2, [r7, #12]
 80112aa:	4413      	add	r3, r2
 80112ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	899b      	ldrh	r3, [r3, #12]
 80112b6:	4619      	mov	r1, r3
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80112be:	4413      	add	r3, r2
 80112c0:	4619      	mov	r1, r3
 80112c2:	6938      	ldr	r0, [r7, #16]
 80112c4:	f7ff ff9c 	bl	8011200 <move_window>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f040 808c 	bne.w	80113e8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	1c5a      	adds	r2, r3, #1
 80112d4:	60fa      	str	r2, [r7, #12]
 80112d6:	693a      	ldr	r2, [r7, #16]
 80112d8:	8992      	ldrh	r2, [r2, #12]
 80112da:	fbb3 f1f2 	udiv	r1, r3, r2
 80112de:	fb01 f202 	mul.w	r2, r1, r2
 80112e2:	1a9b      	subs	r3, r3, r2
 80112e4:	693a      	ldr	r2, [r7, #16]
 80112e6:	4413      	add	r3, r2
 80112e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80112ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	899b      	ldrh	r3, [r3, #12]
 80112f6:	4619      	mov	r1, r3
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80112fe:	4413      	add	r3, r2
 8011300:	4619      	mov	r1, r3
 8011302:	6938      	ldr	r0, [r7, #16]
 8011304:	f7ff ff7c 	bl	8011200 <move_window>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d16e      	bne.n	80113ec <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	899b      	ldrh	r3, [r3, #12]
 8011312:	461a      	mov	r2, r3
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	fbb3 f1f2 	udiv	r1, r3, r2
 801131a:	fb01 f202 	mul.w	r2, r1, r2
 801131e:	1a9b      	subs	r3, r3, r2
 8011320:	693a      	ldr	r2, [r7, #16]
 8011322:	4413      	add	r3, r2
 8011324:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011328:	021b      	lsls	r3, r3, #8
 801132a:	68ba      	ldr	r2, [r7, #8]
 801132c:	4313      	orrs	r3, r2
 801132e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	f003 0301 	and.w	r3, r3, #1
 8011336:	2b00      	cmp	r3, #0
 8011338:	d002      	beq.n	8011340 <get_fat+0xe6>
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	091b      	lsrs	r3, r3, #4
 801133e:	e002      	b.n	8011346 <get_fat+0xec>
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011346:	617b      	str	r3, [r7, #20]
			break;
 8011348:	e055      	b.n	80113f6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	899b      	ldrh	r3, [r3, #12]
 8011352:	085b      	lsrs	r3, r3, #1
 8011354:	b29b      	uxth	r3, r3
 8011356:	4619      	mov	r1, r3
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	fbb3 f3f1 	udiv	r3, r3, r1
 801135e:	4413      	add	r3, r2
 8011360:	4619      	mov	r1, r3
 8011362:	6938      	ldr	r0, [r7, #16]
 8011364:	f7ff ff4c 	bl	8011200 <move_window>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d140      	bne.n	80113f0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	005b      	lsls	r3, r3, #1
 8011378:	693a      	ldr	r2, [r7, #16]
 801137a:	8992      	ldrh	r2, [r2, #12]
 801137c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011380:	fb00 f202 	mul.w	r2, r0, r2
 8011384:	1a9b      	subs	r3, r3, r2
 8011386:	440b      	add	r3, r1
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff fe95 	bl	80110b8 <ld_word>
 801138e:	4603      	mov	r3, r0
 8011390:	617b      	str	r3, [r7, #20]
			break;
 8011392:	e030      	b.n	80113f6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	899b      	ldrh	r3, [r3, #12]
 801139c:	089b      	lsrs	r3, r3, #2
 801139e:	b29b      	uxth	r3, r3
 80113a0:	4619      	mov	r1, r3
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80113a8:	4413      	add	r3, r2
 80113aa:	4619      	mov	r1, r3
 80113ac:	6938      	ldr	r0, [r7, #16]
 80113ae:	f7ff ff27 	bl	8011200 <move_window>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d11d      	bne.n	80113f4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80113b8:	693b      	ldr	r3, [r7, #16]
 80113ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	693a      	ldr	r2, [r7, #16]
 80113c4:	8992      	ldrh	r2, [r2, #12]
 80113c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80113ca:	fb00 f202 	mul.w	r2, r0, r2
 80113ce:	1a9b      	subs	r3, r3, r2
 80113d0:	440b      	add	r3, r1
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7ff fe88 	bl	80110e8 <ld_dword>
 80113d8:	4603      	mov	r3, r0
 80113da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80113de:	617b      	str	r3, [r7, #20]
			break;
 80113e0:	e009      	b.n	80113f6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80113e2:	2301      	movs	r3, #1
 80113e4:	617b      	str	r3, [r7, #20]
 80113e6:	e006      	b.n	80113f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113e8:	bf00      	nop
 80113ea:	e004      	b.n	80113f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113ec:	bf00      	nop
 80113ee:	e002      	b.n	80113f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80113f0:	bf00      	nop
 80113f2:	e000      	b.n	80113f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80113f4:	bf00      	nop
		}
	}

	return val;
 80113f6:	697b      	ldr	r3, [r7, #20]
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3718      	adds	r7, #24
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011400:	b480      	push	{r7}
 8011402:	b087      	sub	sp, #28
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011408:	f04f 33ff 	mov.w	r3, #4294967295
 801140c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d031      	beq.n	801147a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	617b      	str	r3, [r7, #20]
 801141c:	e002      	b.n	8011424 <get_ldnumber+0x24>
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	3301      	adds	r3, #1
 8011422:	617b      	str	r3, [r7, #20]
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	2b1f      	cmp	r3, #31
 801142a:	d903      	bls.n	8011434 <get_ldnumber+0x34>
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b3a      	cmp	r3, #58	@ 0x3a
 8011432:	d1f4      	bne.n	801141e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	2b3a      	cmp	r3, #58	@ 0x3a
 801143a:	d11c      	bne.n	8011476 <get_ldnumber+0x76>
			tp = *path;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	1c5a      	adds	r2, r3, #1
 8011446:	60fa      	str	r2, [r7, #12]
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	3b30      	subs	r3, #48	@ 0x30
 801144c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	2b09      	cmp	r3, #9
 8011452:	d80e      	bhi.n	8011472 <get_ldnumber+0x72>
 8011454:	68fa      	ldr	r2, [r7, #12]
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	429a      	cmp	r2, r3
 801145a:	d10a      	bne.n	8011472 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d107      	bne.n	8011472 <get_ldnumber+0x72>
					vol = (int)i;
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	3301      	adds	r3, #1
 801146a:	617b      	str	r3, [r7, #20]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	697a      	ldr	r2, [r7, #20]
 8011470:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	e002      	b.n	801147c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011476:	2300      	movs	r3, #0
 8011478:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801147a:	693b      	ldr	r3, [r7, #16]
}
 801147c:	4618      	mov	r0, r3
 801147e:	371c      	adds	r7, #28
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	70da      	strb	r2, [r3, #3]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f04f 32ff 	mov.w	r2, #4294967295
 801149e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80114a0:	6839      	ldr	r1, [r7, #0]
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f7ff feac 	bl	8011200 <move_window>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d001      	beq.n	80114b2 <check_fs+0x2a>
 80114ae:	2304      	movs	r3, #4
 80114b0:	e038      	b.n	8011524 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	3338      	adds	r3, #56	@ 0x38
 80114b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7ff fdfc 	bl	80110b8 <ld_word>
 80114c0:	4603      	mov	r3, r0
 80114c2:	461a      	mov	r2, r3
 80114c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d001      	beq.n	80114d0 <check_fs+0x48>
 80114cc:	2303      	movs	r3, #3
 80114ce:	e029      	b.n	8011524 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80114d6:	2be9      	cmp	r3, #233	@ 0xe9
 80114d8:	d009      	beq.n	80114ee <check_fs+0x66>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80114e0:	2beb      	cmp	r3, #235	@ 0xeb
 80114e2:	d11e      	bne.n	8011522 <check_fs+0x9a>
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80114ea:	2b90      	cmp	r3, #144	@ 0x90
 80114ec:	d119      	bne.n	8011522 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	3338      	adds	r3, #56	@ 0x38
 80114f2:	3336      	adds	r3, #54	@ 0x36
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7ff fdf7 	bl	80110e8 <ld_dword>
 80114fa:	4603      	mov	r3, r0
 80114fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011500:	4a0a      	ldr	r2, [pc, #40]	@ (801152c <check_fs+0xa4>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d101      	bne.n	801150a <check_fs+0x82>
 8011506:	2300      	movs	r3, #0
 8011508:	e00c      	b.n	8011524 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	3338      	adds	r3, #56	@ 0x38
 801150e:	3352      	adds	r3, #82	@ 0x52
 8011510:	4618      	mov	r0, r3
 8011512:	f7ff fde9 	bl	80110e8 <ld_dword>
 8011516:	4603      	mov	r3, r0
 8011518:	4a05      	ldr	r2, [pc, #20]	@ (8011530 <check_fs+0xa8>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d101      	bne.n	8011522 <check_fs+0x9a>
 801151e:	2300      	movs	r3, #0
 8011520:	e000      	b.n	8011524 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011522:	2302      	movs	r3, #2
}
 8011524:	4618      	mov	r0, r3
 8011526:	3708      	adds	r7, #8
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	00544146 	.word	0x00544146
 8011530:	33544146 	.word	0x33544146

08011534 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b096      	sub	sp, #88	@ 0x58
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	4613      	mov	r3, r2
 8011540:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2200      	movs	r2, #0
 8011546:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f7ff ff59 	bl	8011400 <get_ldnumber>
 801154e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011552:	2b00      	cmp	r3, #0
 8011554:	da01      	bge.n	801155a <find_volume+0x26>
 8011556:	230b      	movs	r3, #11
 8011558:	e27f      	b.n	8011a5a <find_volume+0x526>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801155a:	4a9e      	ldr	r2, [pc, #632]	@ (80117d4 <find_volume+0x2a0>)
 801155c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011562:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <find_volume+0x3a>
 801156a:	230c      	movs	r3, #12
 801156c:	e275      	b.n	8011a5a <find_volume+0x526>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011572:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011574:	79fb      	ldrb	r3, [r7, #7]
 8011576:	f023 0301 	bic.w	r3, r3, #1
 801157a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801157c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d01a      	beq.n	80115ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011586:	785b      	ldrb	r3, [r3, #1]
 8011588:	4618      	mov	r0, r3
 801158a:	f7ff fcf5 	bl	8010f78 <disk_status>
 801158e:	4603      	mov	r3, r0
 8011590:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011594:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011598:	f003 0301 	and.w	r3, r3, #1
 801159c:	2b00      	cmp	r3, #0
 801159e:	d10c      	bne.n	80115ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80115a0:	79fb      	ldrb	r3, [r7, #7]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d007      	beq.n	80115b6 <find_volume+0x82>
 80115a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115aa:	f003 0304 	and.w	r3, r3, #4
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80115b2:	230a      	movs	r3, #10
 80115b4:	e251      	b.n	8011a5a <find_volume+0x526>
			}
			return FR_OK;				/* The file system object is valid */
 80115b6:	2300      	movs	r3, #0
 80115b8:	e24f      	b.n	8011a5a <find_volume+0x526>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80115ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115bc:	2200      	movs	r2, #0
 80115be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80115c0:	4a85      	ldr	r2, [pc, #532]	@ (80117d8 <find_volume+0x2a4>)
 80115c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115c4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80115c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80115cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ce:	785b      	ldrb	r3, [r3, #1]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7ff fceb 	bl	8010fac <disk_initialize>
 80115d6:	4603      	mov	r3, r0
 80115d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80115dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115e0:	f003 0301 	and.w	r3, r3, #1
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d001      	beq.n	80115ec <find_volume+0xb8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80115e8:	2303      	movs	r3, #3
 80115ea:	e236      	b.n	8011a5a <find_volume+0x526>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80115ec:	79fb      	ldrb	r3, [r7, #7]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d007      	beq.n	8011602 <find_volume+0xce>
 80115f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115f6:	f003 0304 	and.w	r3, r3, #4
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d001      	beq.n	8011602 <find_volume+0xce>
		return FR_WRITE_PROTECTED;
 80115fe:	230a      	movs	r3, #10
 8011600:	e22b      	b.n	8011a5a <find_volume+0x526>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011604:	7858      	ldrb	r0, [r3, #1]
 8011606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011608:	330c      	adds	r3, #12
 801160a:	461a      	mov	r2, r3
 801160c:	2102      	movs	r1, #2
 801160e:	f7ff fd35 	bl	801107c <disk_ioctl>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d001      	beq.n	801161c <find_volume+0xe8>
 8011618:	2301      	movs	r3, #1
 801161a:	e21e      	b.n	8011a5a <find_volume+0x526>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801161c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161e:	899b      	ldrh	r3, [r3, #12]
 8011620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011624:	d80d      	bhi.n	8011642 <find_volume+0x10e>
 8011626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011628:	899b      	ldrh	r3, [r3, #12]
 801162a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801162e:	d308      	bcc.n	8011642 <find_volume+0x10e>
 8011630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011632:	899b      	ldrh	r3, [r3, #12]
 8011634:	461a      	mov	r2, r3
 8011636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011638:	899b      	ldrh	r3, [r3, #12]
 801163a:	3b01      	subs	r3, #1
 801163c:	4013      	ands	r3, r2
 801163e:	2b00      	cmp	r3, #0
 8011640:	d001      	beq.n	8011646 <find_volume+0x112>
 8011642:	2301      	movs	r3, #1
 8011644:	e209      	b.n	8011a5a <find_volume+0x526>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011646:	2300      	movs	r3, #0
 8011648:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801164a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801164c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801164e:	f7ff ff1b 	bl	8011488 <check_fs>
 8011652:	4603      	mov	r3, r0
 8011654:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011658:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801165c:	2b02      	cmp	r3, #2
 801165e:	d00a      	beq.n	8011676 <find_volume+0x142>
 8011660:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011664:	2b01      	cmp	r3, #1
 8011666:	d85b      	bhi.n	8011720 <find_volume+0x1ec>
 8011668:	4a5b      	ldr	r2, [pc, #364]	@ (80117d8 <find_volume+0x2a4>)
 801166a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801166c:	005b      	lsls	r3, r3, #1
 801166e:	4413      	add	r3, r2
 8011670:	785b      	ldrb	r3, [r3, #1]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d054      	beq.n	8011720 <find_volume+0x1ec>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011676:	2300      	movs	r3, #0
 8011678:	643b      	str	r3, [r7, #64]	@ 0x40
 801167a:	e01e      	b.n	80116ba <find_volume+0x186>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801167c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801167e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8011682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011684:	011b      	lsls	r3, r3, #4
 8011686:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801168a:	4413      	add	r3, r2
 801168c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801168e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011690:	3304      	adds	r3, #4
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d006      	beq.n	80116a6 <find_volume+0x172>
 8011698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801169a:	3308      	adds	r3, #8
 801169c:	4618      	mov	r0, r3
 801169e:	f7ff fd23 	bl	80110e8 <ld_dword>
 80116a2:	4602      	mov	r2, r0
 80116a4:	e000      	b.n	80116a8 <find_volume+0x174>
 80116a6:	2200      	movs	r2, #0
 80116a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	3358      	adds	r3, #88	@ 0x58
 80116ae:	443b      	add	r3, r7
 80116b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80116b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116b6:	3301      	adds	r3, #1
 80116b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80116ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116bc:	2b03      	cmp	r3, #3
 80116be:	d9dd      	bls.n	801167c <find_volume+0x148>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80116c0:	4a45      	ldr	r2, [pc, #276]	@ (80117d8 <find_volume+0x2a4>)
 80116c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	4413      	add	r3, r2
 80116c8:	785b      	ldrb	r3, [r3, #1]
 80116ca:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80116cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d002      	beq.n	80116d8 <find_volume+0x1a4>
 80116d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116d4:	3b01      	subs	r3, #1
 80116d6:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80116d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116da:	009b      	lsls	r3, r3, #2
 80116dc:	3358      	adds	r3, #88	@ 0x58
 80116de:	443b      	add	r3, r7
 80116e0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80116e4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80116e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d005      	beq.n	80116f8 <find_volume+0x1c4>
 80116ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80116ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80116f0:	f7ff feca 	bl	8011488 <check_fs>
 80116f4:	4603      	mov	r3, r0
 80116f6:	e000      	b.n	80116fa <find_volume+0x1c6>
 80116f8:	2303      	movs	r3, #3
 80116fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80116fe:	4a36      	ldr	r2, [pc, #216]	@ (80117d8 <find_volume+0x2a4>)
 8011700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011702:	005b      	lsls	r3, r3, #1
 8011704:	4413      	add	r3, r2
 8011706:	785b      	ldrb	r3, [r3, #1]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d109      	bne.n	8011720 <find_volume+0x1ec>
 801170c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011710:	2b01      	cmp	r3, #1
 8011712:	d905      	bls.n	8011720 <find_volume+0x1ec>
 8011714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011716:	3301      	adds	r3, #1
 8011718:	643b      	str	r3, [r7, #64]	@ 0x40
 801171a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801171c:	2b03      	cmp	r3, #3
 801171e:	d9db      	bls.n	80116d8 <find_volume+0x1a4>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011720:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011724:	2b04      	cmp	r3, #4
 8011726:	d101      	bne.n	801172c <find_volume+0x1f8>
 8011728:	2301      	movs	r3, #1
 801172a:	e196      	b.n	8011a5a <find_volume+0x526>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801172c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011730:	2b01      	cmp	r3, #1
 8011732:	d901      	bls.n	8011738 <find_volume+0x204>
 8011734:	230d      	movs	r3, #13
 8011736:	e190      	b.n	8011a5a <find_volume+0x526>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801173a:	3338      	adds	r3, #56	@ 0x38
 801173c:	330b      	adds	r3, #11
 801173e:	4618      	mov	r0, r3
 8011740:	f7ff fcba 	bl	80110b8 <ld_word>
 8011744:	4603      	mov	r3, r0
 8011746:	461a      	mov	r2, r3
 8011748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174a:	899b      	ldrh	r3, [r3, #12]
 801174c:	429a      	cmp	r2, r3
 801174e:	d001      	beq.n	8011754 <find_volume+0x220>
 8011750:	230d      	movs	r3, #13
 8011752:	e182      	b.n	8011a5a <find_volume+0x526>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011756:	3338      	adds	r3, #56	@ 0x38
 8011758:	3316      	adds	r3, #22
 801175a:	4618      	mov	r0, r3
 801175c:	f7ff fcac 	bl	80110b8 <ld_word>
 8011760:	4603      	mov	r3, r0
 8011762:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011766:	2b00      	cmp	r3, #0
 8011768:	d106      	bne.n	8011778 <find_volume+0x244>
 801176a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801176c:	3338      	adds	r3, #56	@ 0x38
 801176e:	3324      	adds	r3, #36	@ 0x24
 8011770:	4618      	mov	r0, r3
 8011772:	f7ff fcb9 	bl	80110e8 <ld_dword>
 8011776:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801177a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801177c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801177e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011780:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011786:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178a:	789b      	ldrb	r3, [r3, #2]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d005      	beq.n	801179c <find_volume+0x268>
 8011790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011792:	789b      	ldrb	r3, [r3, #2]
 8011794:	2b02      	cmp	r3, #2
 8011796:	d001      	beq.n	801179c <find_volume+0x268>
 8011798:	230d      	movs	r3, #13
 801179a:	e15e      	b.n	8011a5a <find_volume+0x526>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801179c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801179e:	789b      	ldrb	r3, [r3, #2]
 80117a0:	461a      	mov	r2, r3
 80117a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117a4:	fb02 f303 	mul.w	r3, r2, r3
 80117a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80117aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80117b0:	461a      	mov	r2, r3
 80117b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80117b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b8:	895b      	ldrh	r3, [r3, #10]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d008      	beq.n	80117d0 <find_volume+0x29c>
 80117be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c0:	895b      	ldrh	r3, [r3, #10]
 80117c2:	461a      	mov	r2, r3
 80117c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c6:	895b      	ldrh	r3, [r3, #10]
 80117c8:	3b01      	subs	r3, #1
 80117ca:	4013      	ands	r3, r2
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d005      	beq.n	80117dc <find_volume+0x2a8>
 80117d0:	230d      	movs	r3, #13
 80117d2:	e142      	b.n	8011a5a <find_volume+0x526>
 80117d4:	24001838 	.word	0x24001838
 80117d8:	2400182c 	.word	0x2400182c

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80117dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117de:	3338      	adds	r3, #56	@ 0x38
 80117e0:	3311      	adds	r3, #17
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7ff fc68 	bl	80110b8 <ld_word>
 80117e8:	4603      	mov	r3, r0
 80117ea:	461a      	mov	r2, r3
 80117ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80117f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f2:	891b      	ldrh	r3, [r3, #8]
 80117f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117f6:	8992      	ldrh	r2, [r2, #12]
 80117f8:	0952      	lsrs	r2, r2, #5
 80117fa:	b292      	uxth	r2, r2
 80117fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011800:	fb01 f202 	mul.w	r2, r1, r2
 8011804:	1a9b      	subs	r3, r3, r2
 8011806:	b29b      	uxth	r3, r3
 8011808:	2b00      	cmp	r3, #0
 801180a:	d001      	beq.n	8011810 <find_volume+0x2dc>
 801180c:	230d      	movs	r3, #13
 801180e:	e124      	b.n	8011a5a <find_volume+0x526>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011812:	3338      	adds	r3, #56	@ 0x38
 8011814:	3313      	adds	r3, #19
 8011816:	4618      	mov	r0, r3
 8011818:	f7ff fc4e 	bl	80110b8 <ld_word>
 801181c:	4603      	mov	r3, r0
 801181e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <find_volume+0x300>
 8011826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011828:	3338      	adds	r3, #56	@ 0x38
 801182a:	3320      	adds	r3, #32
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff fc5b 	bl	80110e8 <ld_dword>
 8011832:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011836:	3338      	adds	r3, #56	@ 0x38
 8011838:	330e      	adds	r3, #14
 801183a:	4618      	mov	r0, r3
 801183c:	f7ff fc3c 	bl	80110b8 <ld_word>
 8011840:	4603      	mov	r3, r0
 8011842:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011844:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011846:	2b00      	cmp	r3, #0
 8011848:	d101      	bne.n	801184e <find_volume+0x31a>
 801184a:	230d      	movs	r3, #13
 801184c:	e105      	b.n	8011a5a <find_volume+0x526>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801184e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011852:	4413      	add	r3, r2
 8011854:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011856:	8911      	ldrh	r1, [r2, #8]
 8011858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801185a:	8992      	ldrh	r2, [r2, #12]
 801185c:	0952      	lsrs	r2, r2, #5
 801185e:	b292      	uxth	r2, r2
 8011860:	fbb1 f2f2 	udiv	r2, r1, r2
 8011864:	b292      	uxth	r2, r2
 8011866:	4413      	add	r3, r2
 8011868:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801186a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801186c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801186e:	429a      	cmp	r2, r3
 8011870:	d201      	bcs.n	8011876 <find_volume+0x342>
 8011872:	230d      	movs	r3, #13
 8011874:	e0f1      	b.n	8011a5a <find_volume+0x526>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801187e:	8952      	ldrh	r2, [r2, #10]
 8011880:	fbb3 f3f2 	udiv	r3, r3, r2
 8011884:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011888:	2b00      	cmp	r3, #0
 801188a:	d101      	bne.n	8011890 <find_volume+0x35c>
 801188c:	230d      	movs	r3, #13
 801188e:	e0e4      	b.n	8011a5a <find_volume+0x526>
		fmt = FS_FAT32;
 8011890:	2303      	movs	r3, #3
 8011892:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011898:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801189c:	4293      	cmp	r3, r2
 801189e:	d802      	bhi.n	80118a6 <find_volume+0x372>
 80118a0:	2302      	movs	r3, #2
 80118a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80118a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d802      	bhi.n	80118b6 <find_volume+0x382>
 80118b0:	2301      	movs	r3, #1
 80118b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80118b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b8:	1c9a      	adds	r2, r3, #2
 80118ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118bc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80118be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80118c2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80118c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80118c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118c8:	441a      	add	r2, r3
 80118ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118cc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80118ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80118d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118d2:	441a      	add	r2, r3
 80118d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80118d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118dc:	2b03      	cmp	r3, #3
 80118de:	d11e      	bne.n	801191e <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80118e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118e2:	3338      	adds	r3, #56	@ 0x38
 80118e4:	332a      	adds	r3, #42	@ 0x2a
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7ff fbe6 	bl	80110b8 <ld_word>
 80118ec:	4603      	mov	r3, r0
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d001      	beq.n	80118f6 <find_volume+0x3c2>
 80118f2:	230d      	movs	r3, #13
 80118f4:	e0b1      	b.n	8011a5a <find_volume+0x526>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80118f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f8:	891b      	ldrh	r3, [r3, #8]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d001      	beq.n	8011902 <find_volume+0x3ce>
 80118fe:	230d      	movs	r3, #13
 8011900:	e0ab      	b.n	8011a5a <find_volume+0x526>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011904:	3338      	adds	r3, #56	@ 0x38
 8011906:	332c      	adds	r3, #44	@ 0x2c
 8011908:	4618      	mov	r0, r3
 801190a:	f7ff fbed 	bl	80110e8 <ld_dword>
 801190e:	4602      	mov	r2, r0
 8011910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011912:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011916:	69db      	ldr	r3, [r3, #28]
 8011918:	009b      	lsls	r3, r3, #2
 801191a:	647b      	str	r3, [r7, #68]	@ 0x44
 801191c:	e01f      	b.n	801195e <find_volume+0x42a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011920:	891b      	ldrh	r3, [r3, #8]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d101      	bne.n	801192a <find_volume+0x3f6>
 8011926:	230d      	movs	r3, #13
 8011928:	e097      	b.n	8011a5a <find_volume+0x526>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801192a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801192e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011930:	441a      	add	r2, r3
 8011932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011934:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011936:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801193a:	2b02      	cmp	r3, #2
 801193c:	d103      	bne.n	8011946 <find_volume+0x412>
 801193e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011940:	69db      	ldr	r3, [r3, #28]
 8011942:	005b      	lsls	r3, r3, #1
 8011944:	e00a      	b.n	801195c <find_volume+0x428>
 8011946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011948:	69da      	ldr	r2, [r3, #28]
 801194a:	4613      	mov	r3, r2
 801194c:	005b      	lsls	r3, r3, #1
 801194e:	4413      	add	r3, r2
 8011950:	085a      	lsrs	r2, r3, #1
 8011952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011954:	69db      	ldr	r3, [r3, #28]
 8011956:	f003 0301 	and.w	r3, r3, #1
 801195a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801195c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801195e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011960:	6a1a      	ldr	r2, [r3, #32]
 8011962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011964:	899b      	ldrh	r3, [r3, #12]
 8011966:	4619      	mov	r1, r3
 8011968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801196a:	440b      	add	r3, r1
 801196c:	3b01      	subs	r3, #1
 801196e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011970:	8989      	ldrh	r1, [r1, #12]
 8011972:	fbb3 f3f1 	udiv	r3, r3, r1
 8011976:	429a      	cmp	r2, r3
 8011978:	d201      	bcs.n	801197e <find_volume+0x44a>
 801197a:	230d      	movs	r3, #13
 801197c:	e06d      	b.n	8011a5a <find_volume+0x526>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801197e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011980:	f04f 32ff 	mov.w	r2, #4294967295
 8011984:	619a      	str	r2, [r3, #24]
 8011986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011988:	699a      	ldr	r2, [r3, #24]
 801198a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801198c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801198e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011990:	2280      	movs	r2, #128	@ 0x80
 8011992:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011994:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011998:	2b03      	cmp	r3, #3
 801199a:	d149      	bne.n	8011a30 <find_volume+0x4fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801199c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801199e:	3338      	adds	r3, #56	@ 0x38
 80119a0:	3330      	adds	r3, #48	@ 0x30
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7ff fb88 	bl	80110b8 <ld_word>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d140      	bne.n	8011a30 <find_volume+0x4fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80119ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119b0:	3301      	adds	r3, #1
 80119b2:	4619      	mov	r1, r3
 80119b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80119b6:	f7ff fc23 	bl	8011200 <move_window>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d137      	bne.n	8011a30 <find_volume+0x4fc>
		{
			fs->fsi_flag = 0;
 80119c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c2:	2200      	movs	r2, #0
 80119c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80119c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c8:	3338      	adds	r3, #56	@ 0x38
 80119ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7ff fb72 	bl	80110b8 <ld_word>
 80119d4:	4603      	mov	r3, r0
 80119d6:	461a      	mov	r2, r3
 80119d8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80119dc:	429a      	cmp	r2, r3
 80119de:	d127      	bne.n	8011a30 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80119e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119e2:	3338      	adds	r3, #56	@ 0x38
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7ff fb7f 	bl	80110e8 <ld_dword>
 80119ea:	4603      	mov	r3, r0
 80119ec:	4a1d      	ldr	r2, [pc, #116]	@ (8011a64 <find_volume+0x530>)
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d11e      	bne.n	8011a30 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80119f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119f4:	3338      	adds	r3, #56	@ 0x38
 80119f6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff fb74 	bl	80110e8 <ld_dword>
 8011a00:	4603      	mov	r3, r0
 8011a02:	4a19      	ldr	r2, [pc, #100]	@ (8011a68 <find_volume+0x534>)
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d113      	bne.n	8011a30 <find_volume+0x4fc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a0a:	3338      	adds	r3, #56	@ 0x38
 8011a0c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7ff fb69 	bl	80110e8 <ld_dword>
 8011a16:	4602      	mov	r2, r0
 8011a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a1a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a1e:	3338      	adds	r3, #56	@ 0x38
 8011a20:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7ff fb5f 	bl	80110e8 <ld_dword>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a2e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a32:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011a36:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011a38:	4b0c      	ldr	r3, [pc, #48]	@ (8011a6c <find_volume+0x538>)
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	4b0a      	ldr	r3, [pc, #40]	@ (8011a6c <find_volume+0x538>)
 8011a42:	801a      	strh	r2, [r3, #0]
 8011a44:	4b09      	ldr	r3, [pc, #36]	@ (8011a6c <find_volume+0x538>)
 8011a46:	881a      	ldrh	r2, [r3, #0]
 8011a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a4a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a4e:	4a08      	ldr	r2, [pc, #32]	@ (8011a70 <find_volume+0x53c>)
 8011a50:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011a52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011a54:	f7ff fb6c 	bl	8011130 <clear_lock>
#endif
	return FR_OK;
 8011a58:	2300      	movs	r3, #0
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3758      	adds	r7, #88	@ 0x58
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	41615252 	.word	0x41615252
 8011a68:	61417272 	.word	0x61417272
 8011a6c:	2400183c 	.word	0x2400183c
 8011a70:	24001860 	.word	0x24001860

08011a74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b088      	sub	sp, #32
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	4613      	mov	r3, r2
 8011a80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011a86:	f107 0310 	add.w	r3, r7, #16
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7ff fcb8 	bl	8011400 <get_ldnumber>
 8011a90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	da01      	bge.n	8011a9c <f_mount+0x28>
 8011a98:	230b      	movs	r3, #11
 8011a9a:	e02b      	b.n	8011af4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011a9c:	4a17      	ldr	r2, [pc, #92]	@ (8011afc <f_mount+0x88>)
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011aa4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d005      	beq.n	8011ab8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011aac:	69b8      	ldr	r0, [r7, #24]
 8011aae:	f7ff fb3f 	bl	8011130 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d002      	beq.n	8011ac4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011ac4:	68fa      	ldr	r2, [r7, #12]
 8011ac6:	490d      	ldr	r1, [pc, #52]	@ (8011afc <f_mount+0x88>)
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d002      	beq.n	8011ada <f_mount+0x66>
 8011ad4:	79fb      	ldrb	r3, [r7, #7]
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	d001      	beq.n	8011ade <f_mount+0x6a>
 8011ada:	2300      	movs	r3, #0
 8011adc:	e00a      	b.n	8011af4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011ade:	f107 010c 	add.w	r1, r7, #12
 8011ae2:	f107 0308 	add.w	r3, r7, #8
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7ff fd23 	bl	8011534 <find_volume>
 8011aee:	4603      	mov	r3, r0
 8011af0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3720      	adds	r7, #32
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	24001838 	.word	0x24001838

08011b00 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b092      	sub	sp, #72	@ 0x48
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011b0c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011b10:	f107 030c 	add.w	r3, r7, #12
 8011b14:	2200      	movs	r2, #0
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7ff fd0c 	bl	8011534 <find_volume>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8011b22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f040 8099 	bne.w	8011c5e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8011b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8011b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b34:	699a      	ldr	r2, [r3, #24]
 8011b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b38:	69db      	ldr	r3, [r3, #28]
 8011b3a:	3b02      	subs	r3, #2
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d804      	bhi.n	8011b4a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b42:	699a      	ldr	r2, [r3, #24]
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	601a      	str	r2, [r3, #0]
 8011b48:	e089      	b.n	8011c5e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8011b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d128      	bne.n	8011ba8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8011b56:	2302      	movs	r3, #2
 8011b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b5c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8011b5e:	f107 0314 	add.w	r3, r7, #20
 8011b62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fb78 	bl	801125a <get_fat>
 8011b6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8011b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b72:	d103      	bne.n	8011b7c <f_getfree+0x7c>
 8011b74:	2301      	movs	r3, #1
 8011b76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011b7a:	e063      	b.n	8011c44 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b7e:	2b01      	cmp	r3, #1
 8011b80:	d103      	bne.n	8011b8a <f_getfree+0x8a>
 8011b82:	2302      	movs	r3, #2
 8011b84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011b88:	e05c      	b.n	8011c44 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8011b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d102      	bne.n	8011b96 <f_getfree+0x96>
 8011b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b92:	3301      	adds	r3, #1
 8011b94:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8011b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b98:	3301      	adds	r3, #1
 8011b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b9e:	69db      	ldr	r3, [r3, #28]
 8011ba0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d3db      	bcc.n	8011b5e <f_getfree+0x5e>
 8011ba6:	e04d      	b.n	8011c44 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011baa:	69db      	ldr	r3, [r3, #28]
 8011bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bb8:	2300      	movs	r3, #0
 8011bba:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8011bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d113      	bne.n	8011bea <f_getfree+0xea>
							res = move_window(fs, sect++);
 8011bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc6:	1c5a      	adds	r2, r3, #1
 8011bc8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011bca:	4619      	mov	r1, r3
 8011bcc:	f7ff fb18 	bl	8011200 <move_window>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8011bd6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d131      	bne.n	8011c42 <f_getfree+0x142>
							p = fs->win;
 8011bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be0:	3338      	adds	r3, #56	@ 0x38
 8011be2:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8011be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be6:	899b      	ldrh	r3, [r3, #12]
 8011be8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8011bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	2b02      	cmp	r3, #2
 8011bf0:	d10f      	bne.n	8011c12 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8011bf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bf4:	f7ff fa60 	bl	80110b8 <ld_word>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d102      	bne.n	8011c04 <f_getfree+0x104>
 8011bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c00:	3301      	adds	r3, #1
 8011c02:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8011c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c06:	3302      	adds	r3, #2
 8011c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c0c:	3b02      	subs	r3, #2
 8011c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c10:	e010      	b.n	8011c34 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011c12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c14:	f7ff fa68 	bl	80110e8 <ld_dword>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d102      	bne.n	8011c28 <f_getfree+0x128>
 8011c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c24:	3301      	adds	r3, #1
 8011c26:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8011c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c2a:	3304      	adds	r3, #4
 8011c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c30:	3b04      	subs	r3, #4
 8011c32:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8011c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c36:	3b01      	subs	r3, #1
 8011c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d1bd      	bne.n	8011bbc <f_getfree+0xbc>
 8011c40:	e000      	b.n	8011c44 <f_getfree+0x144>
							if (res != FR_OK) break;
 8011c42:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c48:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8011c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c4e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c52:	791a      	ldrb	r2, [r3, #4]
 8011c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c56:	f042 0201 	orr.w	r2, r2, #1
 8011c5a:	b2d2      	uxtb	r2, r2
 8011c5c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011c5e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3748      	adds	r7, #72	@ 0x48
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
	...

08011c6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b087      	sub	sp, #28
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	4613      	mov	r3, r2
 8011c78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011c82:	4b1f      	ldr	r3, [pc, #124]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011c84:	7a5b      	ldrb	r3, [r3, #9]
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d131      	bne.n	8011cf0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011c8e:	7a5b      	ldrb	r3, [r3, #9]
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	461a      	mov	r2, r3
 8011c94:	4b1a      	ldr	r3, [pc, #104]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011c96:	2100      	movs	r1, #0
 8011c98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011c9a:	4b19      	ldr	r3, [pc, #100]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011c9c:	7a5b      	ldrb	r3, [r3, #9]
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	4a17      	ldr	r2, [pc, #92]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	4413      	add	r3, r2
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011caa:	4b15      	ldr	r3, [pc, #84]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011cac:	7a5b      	ldrb	r3, [r3, #9]
 8011cae:	b2db      	uxtb	r3, r3
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	4b13      	ldr	r3, [pc, #76]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011cb4:	4413      	add	r3, r2
 8011cb6:	79fa      	ldrb	r2, [r7, #7]
 8011cb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011cba:	4b11      	ldr	r3, [pc, #68]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011cbc:	7a5b      	ldrb	r3, [r3, #9]
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	1c5a      	adds	r2, r3, #1
 8011cc2:	b2d1      	uxtb	r1, r2
 8011cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8011d00 <FATFS_LinkDriverEx+0x94>)
 8011cc6:	7251      	strb	r1, [r2, #9]
 8011cc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011cca:	7dbb      	ldrb	r3, [r7, #22]
 8011ccc:	3330      	adds	r3, #48	@ 0x30
 8011cce:	b2da      	uxtb	r2, r3
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	223a      	movs	r2, #58	@ 0x3a
 8011cda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	3302      	adds	r3, #2
 8011ce0:	222f      	movs	r2, #47	@ 0x2f
 8011ce2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	3303      	adds	r3, #3
 8011ce8:	2200      	movs	r2, #0
 8011cea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011cec:	2300      	movs	r3, #0
 8011cee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	371c      	adds	r7, #28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop
 8011d00:	24001a60 	.word	0x24001a60

08011d04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011d0e:	2200      	movs	r2, #0
 8011d10:	6839      	ldr	r1, [r7, #0]
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff ffaa 	bl	8011c6c <FATFS_LinkDriverEx>
 8011d18:	4603      	mov	r3, r0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3708      	adds	r7, #8
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
	...

08011d24 <siprintf>:
 8011d24:	b40e      	push	{r1, r2, r3}
 8011d26:	b500      	push	{lr}
 8011d28:	b09c      	sub	sp, #112	@ 0x70
 8011d2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d2c:	9002      	str	r0, [sp, #8]
 8011d2e:	9006      	str	r0, [sp, #24]
 8011d30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d34:	4809      	ldr	r0, [pc, #36]	@ (8011d5c <siprintf+0x38>)
 8011d36:	9107      	str	r1, [sp, #28]
 8011d38:	9104      	str	r1, [sp, #16]
 8011d3a:	4909      	ldr	r1, [pc, #36]	@ (8011d60 <siprintf+0x3c>)
 8011d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d40:	9105      	str	r1, [sp, #20]
 8011d42:	6800      	ldr	r0, [r0, #0]
 8011d44:	9301      	str	r3, [sp, #4]
 8011d46:	a902      	add	r1, sp, #8
 8011d48:	f000 f9a2 	bl	8012090 <_svfiprintf_r>
 8011d4c:	9b02      	ldr	r3, [sp, #8]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	701a      	strb	r2, [r3, #0]
 8011d52:	b01c      	add	sp, #112	@ 0x70
 8011d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d58:	b003      	add	sp, #12
 8011d5a:	4770      	bx	lr
 8011d5c:	2400001c 	.word	0x2400001c
 8011d60:	ffff0208 	.word	0xffff0208

08011d64 <memset>:
 8011d64:	4402      	add	r2, r0
 8011d66:	4603      	mov	r3, r0
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d100      	bne.n	8011d6e <memset+0xa>
 8011d6c:	4770      	bx	lr
 8011d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8011d72:	e7f9      	b.n	8011d68 <memset+0x4>

08011d74 <__errno>:
 8011d74:	4b01      	ldr	r3, [pc, #4]	@ (8011d7c <__errno+0x8>)
 8011d76:	6818      	ldr	r0, [r3, #0]
 8011d78:	4770      	bx	lr
 8011d7a:	bf00      	nop
 8011d7c:	2400001c 	.word	0x2400001c

08011d80 <__libc_init_array>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	4d0d      	ldr	r5, [pc, #52]	@ (8011db8 <__libc_init_array+0x38>)
 8011d84:	4c0d      	ldr	r4, [pc, #52]	@ (8011dbc <__libc_init_array+0x3c>)
 8011d86:	1b64      	subs	r4, r4, r5
 8011d88:	10a4      	asrs	r4, r4, #2
 8011d8a:	2600      	movs	r6, #0
 8011d8c:	42a6      	cmp	r6, r4
 8011d8e:	d109      	bne.n	8011da4 <__libc_init_array+0x24>
 8011d90:	4d0b      	ldr	r5, [pc, #44]	@ (8011dc0 <__libc_init_array+0x40>)
 8011d92:	4c0c      	ldr	r4, [pc, #48]	@ (8011dc4 <__libc_init_array+0x44>)
 8011d94:	f000 fc66 	bl	8012664 <_init>
 8011d98:	1b64      	subs	r4, r4, r5
 8011d9a:	10a4      	asrs	r4, r4, #2
 8011d9c:	2600      	movs	r6, #0
 8011d9e:	42a6      	cmp	r6, r4
 8011da0:	d105      	bne.n	8011dae <__libc_init_array+0x2e>
 8011da2:	bd70      	pop	{r4, r5, r6, pc}
 8011da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011da8:	4798      	blx	r3
 8011daa:	3601      	adds	r6, #1
 8011dac:	e7ee      	b.n	8011d8c <__libc_init_array+0xc>
 8011dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8011db2:	4798      	blx	r3
 8011db4:	3601      	adds	r6, #1
 8011db6:	e7f2      	b.n	8011d9e <__libc_init_array+0x1e>
 8011db8:	08012af0 	.word	0x08012af0
 8011dbc:	08012af0 	.word	0x08012af0
 8011dc0:	08012af0 	.word	0x08012af0
 8011dc4:	08012af4 	.word	0x08012af4

08011dc8 <__retarget_lock_acquire_recursive>:
 8011dc8:	4770      	bx	lr

08011dca <__retarget_lock_release_recursive>:
 8011dca:	4770      	bx	lr

08011dcc <memcpy>:
 8011dcc:	440a      	add	r2, r1
 8011dce:	4291      	cmp	r1, r2
 8011dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011dd4:	d100      	bne.n	8011dd8 <memcpy+0xc>
 8011dd6:	4770      	bx	lr
 8011dd8:	b510      	push	{r4, lr}
 8011dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011de2:	4291      	cmp	r1, r2
 8011de4:	d1f9      	bne.n	8011dda <memcpy+0xe>
 8011de6:	bd10      	pop	{r4, pc}

08011de8 <_free_r>:
 8011de8:	b538      	push	{r3, r4, r5, lr}
 8011dea:	4605      	mov	r5, r0
 8011dec:	2900      	cmp	r1, #0
 8011dee:	d041      	beq.n	8011e74 <_free_r+0x8c>
 8011df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011df4:	1f0c      	subs	r4, r1, #4
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	bfb8      	it	lt
 8011dfa:	18e4      	addlt	r4, r4, r3
 8011dfc:	f000 f8e0 	bl	8011fc0 <__malloc_lock>
 8011e00:	4a1d      	ldr	r2, [pc, #116]	@ (8011e78 <_free_r+0x90>)
 8011e02:	6813      	ldr	r3, [r2, #0]
 8011e04:	b933      	cbnz	r3, 8011e14 <_free_r+0x2c>
 8011e06:	6063      	str	r3, [r4, #4]
 8011e08:	6014      	str	r4, [r2, #0]
 8011e0a:	4628      	mov	r0, r5
 8011e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e10:	f000 b8dc 	b.w	8011fcc <__malloc_unlock>
 8011e14:	42a3      	cmp	r3, r4
 8011e16:	d908      	bls.n	8011e2a <_free_r+0x42>
 8011e18:	6820      	ldr	r0, [r4, #0]
 8011e1a:	1821      	adds	r1, r4, r0
 8011e1c:	428b      	cmp	r3, r1
 8011e1e:	bf01      	itttt	eq
 8011e20:	6819      	ldreq	r1, [r3, #0]
 8011e22:	685b      	ldreq	r3, [r3, #4]
 8011e24:	1809      	addeq	r1, r1, r0
 8011e26:	6021      	streq	r1, [r4, #0]
 8011e28:	e7ed      	b.n	8011e06 <_free_r+0x1e>
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	b10b      	cbz	r3, 8011e34 <_free_r+0x4c>
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	d9fa      	bls.n	8011e2a <_free_r+0x42>
 8011e34:	6811      	ldr	r1, [r2, #0]
 8011e36:	1850      	adds	r0, r2, r1
 8011e38:	42a0      	cmp	r0, r4
 8011e3a:	d10b      	bne.n	8011e54 <_free_r+0x6c>
 8011e3c:	6820      	ldr	r0, [r4, #0]
 8011e3e:	4401      	add	r1, r0
 8011e40:	1850      	adds	r0, r2, r1
 8011e42:	4283      	cmp	r3, r0
 8011e44:	6011      	str	r1, [r2, #0]
 8011e46:	d1e0      	bne.n	8011e0a <_free_r+0x22>
 8011e48:	6818      	ldr	r0, [r3, #0]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	6053      	str	r3, [r2, #4]
 8011e4e:	4408      	add	r0, r1
 8011e50:	6010      	str	r0, [r2, #0]
 8011e52:	e7da      	b.n	8011e0a <_free_r+0x22>
 8011e54:	d902      	bls.n	8011e5c <_free_r+0x74>
 8011e56:	230c      	movs	r3, #12
 8011e58:	602b      	str	r3, [r5, #0]
 8011e5a:	e7d6      	b.n	8011e0a <_free_r+0x22>
 8011e5c:	6820      	ldr	r0, [r4, #0]
 8011e5e:	1821      	adds	r1, r4, r0
 8011e60:	428b      	cmp	r3, r1
 8011e62:	bf04      	itt	eq
 8011e64:	6819      	ldreq	r1, [r3, #0]
 8011e66:	685b      	ldreq	r3, [r3, #4]
 8011e68:	6063      	str	r3, [r4, #4]
 8011e6a:	bf04      	itt	eq
 8011e6c:	1809      	addeq	r1, r1, r0
 8011e6e:	6021      	streq	r1, [r4, #0]
 8011e70:	6054      	str	r4, [r2, #4]
 8011e72:	e7ca      	b.n	8011e0a <_free_r+0x22>
 8011e74:	bd38      	pop	{r3, r4, r5, pc}
 8011e76:	bf00      	nop
 8011e78:	24001bb0 	.word	0x24001bb0

08011e7c <sbrk_aligned>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8011ebc <sbrk_aligned+0x40>)
 8011e80:	460c      	mov	r4, r1
 8011e82:	6831      	ldr	r1, [r6, #0]
 8011e84:	4605      	mov	r5, r0
 8011e86:	b911      	cbnz	r1, 8011e8e <sbrk_aligned+0x12>
 8011e88:	f000 fba6 	bl	80125d8 <_sbrk_r>
 8011e8c:	6030      	str	r0, [r6, #0]
 8011e8e:	4621      	mov	r1, r4
 8011e90:	4628      	mov	r0, r5
 8011e92:	f000 fba1 	bl	80125d8 <_sbrk_r>
 8011e96:	1c43      	adds	r3, r0, #1
 8011e98:	d103      	bne.n	8011ea2 <sbrk_aligned+0x26>
 8011e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	bd70      	pop	{r4, r5, r6, pc}
 8011ea2:	1cc4      	adds	r4, r0, #3
 8011ea4:	f024 0403 	bic.w	r4, r4, #3
 8011ea8:	42a0      	cmp	r0, r4
 8011eaa:	d0f8      	beq.n	8011e9e <sbrk_aligned+0x22>
 8011eac:	1a21      	subs	r1, r4, r0
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f000 fb92 	bl	80125d8 <_sbrk_r>
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	d1f2      	bne.n	8011e9e <sbrk_aligned+0x22>
 8011eb8:	e7ef      	b.n	8011e9a <sbrk_aligned+0x1e>
 8011eba:	bf00      	nop
 8011ebc:	24001bac 	.word	0x24001bac

08011ec0 <_malloc_r>:
 8011ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ec4:	1ccd      	adds	r5, r1, #3
 8011ec6:	f025 0503 	bic.w	r5, r5, #3
 8011eca:	3508      	adds	r5, #8
 8011ecc:	2d0c      	cmp	r5, #12
 8011ece:	bf38      	it	cc
 8011ed0:	250c      	movcc	r5, #12
 8011ed2:	2d00      	cmp	r5, #0
 8011ed4:	4606      	mov	r6, r0
 8011ed6:	db01      	blt.n	8011edc <_malloc_r+0x1c>
 8011ed8:	42a9      	cmp	r1, r5
 8011eda:	d904      	bls.n	8011ee6 <_malloc_r+0x26>
 8011edc:	230c      	movs	r3, #12
 8011ede:	6033      	str	r3, [r6, #0]
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011fbc <_malloc_r+0xfc>
 8011eea:	f000 f869 	bl	8011fc0 <__malloc_lock>
 8011eee:	f8d8 3000 	ldr.w	r3, [r8]
 8011ef2:	461c      	mov	r4, r3
 8011ef4:	bb44      	cbnz	r4, 8011f48 <_malloc_r+0x88>
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	4630      	mov	r0, r6
 8011efa:	f7ff ffbf 	bl	8011e7c <sbrk_aligned>
 8011efe:	1c43      	adds	r3, r0, #1
 8011f00:	4604      	mov	r4, r0
 8011f02:	d158      	bne.n	8011fb6 <_malloc_r+0xf6>
 8011f04:	f8d8 4000 	ldr.w	r4, [r8]
 8011f08:	4627      	mov	r7, r4
 8011f0a:	2f00      	cmp	r7, #0
 8011f0c:	d143      	bne.n	8011f96 <_malloc_r+0xd6>
 8011f0e:	2c00      	cmp	r4, #0
 8011f10:	d04b      	beq.n	8011faa <_malloc_r+0xea>
 8011f12:	6823      	ldr	r3, [r4, #0]
 8011f14:	4639      	mov	r1, r7
 8011f16:	4630      	mov	r0, r6
 8011f18:	eb04 0903 	add.w	r9, r4, r3
 8011f1c:	f000 fb5c 	bl	80125d8 <_sbrk_r>
 8011f20:	4581      	cmp	r9, r0
 8011f22:	d142      	bne.n	8011faa <_malloc_r+0xea>
 8011f24:	6821      	ldr	r1, [r4, #0]
 8011f26:	1a6d      	subs	r5, r5, r1
 8011f28:	4629      	mov	r1, r5
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	f7ff ffa6 	bl	8011e7c <sbrk_aligned>
 8011f30:	3001      	adds	r0, #1
 8011f32:	d03a      	beq.n	8011faa <_malloc_r+0xea>
 8011f34:	6823      	ldr	r3, [r4, #0]
 8011f36:	442b      	add	r3, r5
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8011f3e:	685a      	ldr	r2, [r3, #4]
 8011f40:	bb62      	cbnz	r2, 8011f9c <_malloc_r+0xdc>
 8011f42:	f8c8 7000 	str.w	r7, [r8]
 8011f46:	e00f      	b.n	8011f68 <_malloc_r+0xa8>
 8011f48:	6822      	ldr	r2, [r4, #0]
 8011f4a:	1b52      	subs	r2, r2, r5
 8011f4c:	d420      	bmi.n	8011f90 <_malloc_r+0xd0>
 8011f4e:	2a0b      	cmp	r2, #11
 8011f50:	d917      	bls.n	8011f82 <_malloc_r+0xc2>
 8011f52:	1961      	adds	r1, r4, r5
 8011f54:	42a3      	cmp	r3, r4
 8011f56:	6025      	str	r5, [r4, #0]
 8011f58:	bf18      	it	ne
 8011f5a:	6059      	strne	r1, [r3, #4]
 8011f5c:	6863      	ldr	r3, [r4, #4]
 8011f5e:	bf08      	it	eq
 8011f60:	f8c8 1000 	streq.w	r1, [r8]
 8011f64:	5162      	str	r2, [r4, r5]
 8011f66:	604b      	str	r3, [r1, #4]
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f000 f82f 	bl	8011fcc <__malloc_unlock>
 8011f6e:	f104 000b 	add.w	r0, r4, #11
 8011f72:	1d23      	adds	r3, r4, #4
 8011f74:	f020 0007 	bic.w	r0, r0, #7
 8011f78:	1ac2      	subs	r2, r0, r3
 8011f7a:	bf1c      	itt	ne
 8011f7c:	1a1b      	subne	r3, r3, r0
 8011f7e:	50a3      	strne	r3, [r4, r2]
 8011f80:	e7af      	b.n	8011ee2 <_malloc_r+0x22>
 8011f82:	6862      	ldr	r2, [r4, #4]
 8011f84:	42a3      	cmp	r3, r4
 8011f86:	bf0c      	ite	eq
 8011f88:	f8c8 2000 	streq.w	r2, [r8]
 8011f8c:	605a      	strne	r2, [r3, #4]
 8011f8e:	e7eb      	b.n	8011f68 <_malloc_r+0xa8>
 8011f90:	4623      	mov	r3, r4
 8011f92:	6864      	ldr	r4, [r4, #4]
 8011f94:	e7ae      	b.n	8011ef4 <_malloc_r+0x34>
 8011f96:	463c      	mov	r4, r7
 8011f98:	687f      	ldr	r7, [r7, #4]
 8011f9a:	e7b6      	b.n	8011f0a <_malloc_r+0x4a>
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	42a3      	cmp	r3, r4
 8011fa2:	d1fb      	bne.n	8011f9c <_malloc_r+0xdc>
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	6053      	str	r3, [r2, #4]
 8011fa8:	e7de      	b.n	8011f68 <_malloc_r+0xa8>
 8011faa:	230c      	movs	r3, #12
 8011fac:	6033      	str	r3, [r6, #0]
 8011fae:	4630      	mov	r0, r6
 8011fb0:	f000 f80c 	bl	8011fcc <__malloc_unlock>
 8011fb4:	e794      	b.n	8011ee0 <_malloc_r+0x20>
 8011fb6:	6005      	str	r5, [r0, #0]
 8011fb8:	e7d6      	b.n	8011f68 <_malloc_r+0xa8>
 8011fba:	bf00      	nop
 8011fbc:	24001bb0 	.word	0x24001bb0

08011fc0 <__malloc_lock>:
 8011fc0:	4801      	ldr	r0, [pc, #4]	@ (8011fc8 <__malloc_lock+0x8>)
 8011fc2:	f7ff bf01 	b.w	8011dc8 <__retarget_lock_acquire_recursive>
 8011fc6:	bf00      	nop
 8011fc8:	24001ba8 	.word	0x24001ba8

08011fcc <__malloc_unlock>:
 8011fcc:	4801      	ldr	r0, [pc, #4]	@ (8011fd4 <__malloc_unlock+0x8>)
 8011fce:	f7ff befc 	b.w	8011dca <__retarget_lock_release_recursive>
 8011fd2:	bf00      	nop
 8011fd4:	24001ba8 	.word	0x24001ba8

08011fd8 <__ssputs_r>:
 8011fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fdc:	688e      	ldr	r6, [r1, #8]
 8011fde:	461f      	mov	r7, r3
 8011fe0:	42be      	cmp	r6, r7
 8011fe2:	680b      	ldr	r3, [r1, #0]
 8011fe4:	4682      	mov	sl, r0
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	4690      	mov	r8, r2
 8011fea:	d82d      	bhi.n	8012048 <__ssputs_r+0x70>
 8011fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ff0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011ff4:	d026      	beq.n	8012044 <__ssputs_r+0x6c>
 8011ff6:	6965      	ldr	r5, [r4, #20]
 8011ff8:	6909      	ldr	r1, [r1, #16]
 8011ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ffe:	eba3 0901 	sub.w	r9, r3, r1
 8012002:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012006:	1c7b      	adds	r3, r7, #1
 8012008:	444b      	add	r3, r9
 801200a:	106d      	asrs	r5, r5, #1
 801200c:	429d      	cmp	r5, r3
 801200e:	bf38      	it	cc
 8012010:	461d      	movcc	r5, r3
 8012012:	0553      	lsls	r3, r2, #21
 8012014:	d527      	bpl.n	8012066 <__ssputs_r+0x8e>
 8012016:	4629      	mov	r1, r5
 8012018:	f7ff ff52 	bl	8011ec0 <_malloc_r>
 801201c:	4606      	mov	r6, r0
 801201e:	b360      	cbz	r0, 801207a <__ssputs_r+0xa2>
 8012020:	6921      	ldr	r1, [r4, #16]
 8012022:	464a      	mov	r2, r9
 8012024:	f7ff fed2 	bl	8011dcc <memcpy>
 8012028:	89a3      	ldrh	r3, [r4, #12]
 801202a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801202e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012032:	81a3      	strh	r3, [r4, #12]
 8012034:	6126      	str	r6, [r4, #16]
 8012036:	6165      	str	r5, [r4, #20]
 8012038:	444e      	add	r6, r9
 801203a:	eba5 0509 	sub.w	r5, r5, r9
 801203e:	6026      	str	r6, [r4, #0]
 8012040:	60a5      	str	r5, [r4, #8]
 8012042:	463e      	mov	r6, r7
 8012044:	42be      	cmp	r6, r7
 8012046:	d900      	bls.n	801204a <__ssputs_r+0x72>
 8012048:	463e      	mov	r6, r7
 801204a:	6820      	ldr	r0, [r4, #0]
 801204c:	4632      	mov	r2, r6
 801204e:	4641      	mov	r1, r8
 8012050:	f000 faa8 	bl	80125a4 <memmove>
 8012054:	68a3      	ldr	r3, [r4, #8]
 8012056:	1b9b      	subs	r3, r3, r6
 8012058:	60a3      	str	r3, [r4, #8]
 801205a:	6823      	ldr	r3, [r4, #0]
 801205c:	4433      	add	r3, r6
 801205e:	6023      	str	r3, [r4, #0]
 8012060:	2000      	movs	r0, #0
 8012062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012066:	462a      	mov	r2, r5
 8012068:	f000 fac6 	bl	80125f8 <_realloc_r>
 801206c:	4606      	mov	r6, r0
 801206e:	2800      	cmp	r0, #0
 8012070:	d1e0      	bne.n	8012034 <__ssputs_r+0x5c>
 8012072:	6921      	ldr	r1, [r4, #16]
 8012074:	4650      	mov	r0, sl
 8012076:	f7ff feb7 	bl	8011de8 <_free_r>
 801207a:	230c      	movs	r3, #12
 801207c:	f8ca 3000 	str.w	r3, [sl]
 8012080:	89a3      	ldrh	r3, [r4, #12]
 8012082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012086:	81a3      	strh	r3, [r4, #12]
 8012088:	f04f 30ff 	mov.w	r0, #4294967295
 801208c:	e7e9      	b.n	8012062 <__ssputs_r+0x8a>
	...

08012090 <_svfiprintf_r>:
 8012090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012094:	4698      	mov	r8, r3
 8012096:	898b      	ldrh	r3, [r1, #12]
 8012098:	061b      	lsls	r3, r3, #24
 801209a:	b09d      	sub	sp, #116	@ 0x74
 801209c:	4607      	mov	r7, r0
 801209e:	460d      	mov	r5, r1
 80120a0:	4614      	mov	r4, r2
 80120a2:	d510      	bpl.n	80120c6 <_svfiprintf_r+0x36>
 80120a4:	690b      	ldr	r3, [r1, #16]
 80120a6:	b973      	cbnz	r3, 80120c6 <_svfiprintf_r+0x36>
 80120a8:	2140      	movs	r1, #64	@ 0x40
 80120aa:	f7ff ff09 	bl	8011ec0 <_malloc_r>
 80120ae:	6028      	str	r0, [r5, #0]
 80120b0:	6128      	str	r0, [r5, #16]
 80120b2:	b930      	cbnz	r0, 80120c2 <_svfiprintf_r+0x32>
 80120b4:	230c      	movs	r3, #12
 80120b6:	603b      	str	r3, [r7, #0]
 80120b8:	f04f 30ff 	mov.w	r0, #4294967295
 80120bc:	b01d      	add	sp, #116	@ 0x74
 80120be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c2:	2340      	movs	r3, #64	@ 0x40
 80120c4:	616b      	str	r3, [r5, #20]
 80120c6:	2300      	movs	r3, #0
 80120c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ca:	2320      	movs	r3, #32
 80120cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80120d4:	2330      	movs	r3, #48	@ 0x30
 80120d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012274 <_svfiprintf_r+0x1e4>
 80120da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120de:	f04f 0901 	mov.w	r9, #1
 80120e2:	4623      	mov	r3, r4
 80120e4:	469a      	mov	sl, r3
 80120e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120ea:	b10a      	cbz	r2, 80120f0 <_svfiprintf_r+0x60>
 80120ec:	2a25      	cmp	r2, #37	@ 0x25
 80120ee:	d1f9      	bne.n	80120e4 <_svfiprintf_r+0x54>
 80120f0:	ebba 0b04 	subs.w	fp, sl, r4
 80120f4:	d00b      	beq.n	801210e <_svfiprintf_r+0x7e>
 80120f6:	465b      	mov	r3, fp
 80120f8:	4622      	mov	r2, r4
 80120fa:	4629      	mov	r1, r5
 80120fc:	4638      	mov	r0, r7
 80120fe:	f7ff ff6b 	bl	8011fd8 <__ssputs_r>
 8012102:	3001      	adds	r0, #1
 8012104:	f000 80a7 	beq.w	8012256 <_svfiprintf_r+0x1c6>
 8012108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801210a:	445a      	add	r2, fp
 801210c:	9209      	str	r2, [sp, #36]	@ 0x24
 801210e:	f89a 3000 	ldrb.w	r3, [sl]
 8012112:	2b00      	cmp	r3, #0
 8012114:	f000 809f 	beq.w	8012256 <_svfiprintf_r+0x1c6>
 8012118:	2300      	movs	r3, #0
 801211a:	f04f 32ff 	mov.w	r2, #4294967295
 801211e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012122:	f10a 0a01 	add.w	sl, sl, #1
 8012126:	9304      	str	r3, [sp, #16]
 8012128:	9307      	str	r3, [sp, #28]
 801212a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801212e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012130:	4654      	mov	r4, sl
 8012132:	2205      	movs	r2, #5
 8012134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012138:	484e      	ldr	r0, [pc, #312]	@ (8012274 <_svfiprintf_r+0x1e4>)
 801213a:	f7ee f8f1 	bl	8000320 <memchr>
 801213e:	9a04      	ldr	r2, [sp, #16]
 8012140:	b9d8      	cbnz	r0, 801217a <_svfiprintf_r+0xea>
 8012142:	06d0      	lsls	r0, r2, #27
 8012144:	bf44      	itt	mi
 8012146:	2320      	movmi	r3, #32
 8012148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801214c:	0711      	lsls	r1, r2, #28
 801214e:	bf44      	itt	mi
 8012150:	232b      	movmi	r3, #43	@ 0x2b
 8012152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012156:	f89a 3000 	ldrb.w	r3, [sl]
 801215a:	2b2a      	cmp	r3, #42	@ 0x2a
 801215c:	d015      	beq.n	801218a <_svfiprintf_r+0xfa>
 801215e:	9a07      	ldr	r2, [sp, #28]
 8012160:	4654      	mov	r4, sl
 8012162:	2000      	movs	r0, #0
 8012164:	f04f 0c0a 	mov.w	ip, #10
 8012168:	4621      	mov	r1, r4
 801216a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801216e:	3b30      	subs	r3, #48	@ 0x30
 8012170:	2b09      	cmp	r3, #9
 8012172:	d94b      	bls.n	801220c <_svfiprintf_r+0x17c>
 8012174:	b1b0      	cbz	r0, 80121a4 <_svfiprintf_r+0x114>
 8012176:	9207      	str	r2, [sp, #28]
 8012178:	e014      	b.n	80121a4 <_svfiprintf_r+0x114>
 801217a:	eba0 0308 	sub.w	r3, r0, r8
 801217e:	fa09 f303 	lsl.w	r3, r9, r3
 8012182:	4313      	orrs	r3, r2
 8012184:	9304      	str	r3, [sp, #16]
 8012186:	46a2      	mov	sl, r4
 8012188:	e7d2      	b.n	8012130 <_svfiprintf_r+0xa0>
 801218a:	9b03      	ldr	r3, [sp, #12]
 801218c:	1d19      	adds	r1, r3, #4
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	9103      	str	r1, [sp, #12]
 8012192:	2b00      	cmp	r3, #0
 8012194:	bfbb      	ittet	lt
 8012196:	425b      	neglt	r3, r3
 8012198:	f042 0202 	orrlt.w	r2, r2, #2
 801219c:	9307      	strge	r3, [sp, #28]
 801219e:	9307      	strlt	r3, [sp, #28]
 80121a0:	bfb8      	it	lt
 80121a2:	9204      	strlt	r2, [sp, #16]
 80121a4:	7823      	ldrb	r3, [r4, #0]
 80121a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80121a8:	d10a      	bne.n	80121c0 <_svfiprintf_r+0x130>
 80121aa:	7863      	ldrb	r3, [r4, #1]
 80121ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80121ae:	d132      	bne.n	8012216 <_svfiprintf_r+0x186>
 80121b0:	9b03      	ldr	r3, [sp, #12]
 80121b2:	1d1a      	adds	r2, r3, #4
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	9203      	str	r2, [sp, #12]
 80121b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121bc:	3402      	adds	r4, #2
 80121be:	9305      	str	r3, [sp, #20]
 80121c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012284 <_svfiprintf_r+0x1f4>
 80121c4:	7821      	ldrb	r1, [r4, #0]
 80121c6:	2203      	movs	r2, #3
 80121c8:	4650      	mov	r0, sl
 80121ca:	f7ee f8a9 	bl	8000320 <memchr>
 80121ce:	b138      	cbz	r0, 80121e0 <_svfiprintf_r+0x150>
 80121d0:	9b04      	ldr	r3, [sp, #16]
 80121d2:	eba0 000a 	sub.w	r0, r0, sl
 80121d6:	2240      	movs	r2, #64	@ 0x40
 80121d8:	4082      	lsls	r2, r0
 80121da:	4313      	orrs	r3, r2
 80121dc:	3401      	adds	r4, #1
 80121de:	9304      	str	r3, [sp, #16]
 80121e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121e4:	4824      	ldr	r0, [pc, #144]	@ (8012278 <_svfiprintf_r+0x1e8>)
 80121e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121ea:	2206      	movs	r2, #6
 80121ec:	f7ee f898 	bl	8000320 <memchr>
 80121f0:	2800      	cmp	r0, #0
 80121f2:	d036      	beq.n	8012262 <_svfiprintf_r+0x1d2>
 80121f4:	4b21      	ldr	r3, [pc, #132]	@ (801227c <_svfiprintf_r+0x1ec>)
 80121f6:	bb1b      	cbnz	r3, 8012240 <_svfiprintf_r+0x1b0>
 80121f8:	9b03      	ldr	r3, [sp, #12]
 80121fa:	3307      	adds	r3, #7
 80121fc:	f023 0307 	bic.w	r3, r3, #7
 8012200:	3308      	adds	r3, #8
 8012202:	9303      	str	r3, [sp, #12]
 8012204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012206:	4433      	add	r3, r6
 8012208:	9309      	str	r3, [sp, #36]	@ 0x24
 801220a:	e76a      	b.n	80120e2 <_svfiprintf_r+0x52>
 801220c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012210:	460c      	mov	r4, r1
 8012212:	2001      	movs	r0, #1
 8012214:	e7a8      	b.n	8012168 <_svfiprintf_r+0xd8>
 8012216:	2300      	movs	r3, #0
 8012218:	3401      	adds	r4, #1
 801221a:	9305      	str	r3, [sp, #20]
 801221c:	4619      	mov	r1, r3
 801221e:	f04f 0c0a 	mov.w	ip, #10
 8012222:	4620      	mov	r0, r4
 8012224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012228:	3a30      	subs	r2, #48	@ 0x30
 801222a:	2a09      	cmp	r2, #9
 801222c:	d903      	bls.n	8012236 <_svfiprintf_r+0x1a6>
 801222e:	2b00      	cmp	r3, #0
 8012230:	d0c6      	beq.n	80121c0 <_svfiprintf_r+0x130>
 8012232:	9105      	str	r1, [sp, #20]
 8012234:	e7c4      	b.n	80121c0 <_svfiprintf_r+0x130>
 8012236:	fb0c 2101 	mla	r1, ip, r1, r2
 801223a:	4604      	mov	r4, r0
 801223c:	2301      	movs	r3, #1
 801223e:	e7f0      	b.n	8012222 <_svfiprintf_r+0x192>
 8012240:	ab03      	add	r3, sp, #12
 8012242:	9300      	str	r3, [sp, #0]
 8012244:	462a      	mov	r2, r5
 8012246:	4b0e      	ldr	r3, [pc, #56]	@ (8012280 <_svfiprintf_r+0x1f0>)
 8012248:	a904      	add	r1, sp, #16
 801224a:	4638      	mov	r0, r7
 801224c:	f3af 8000 	nop.w
 8012250:	1c42      	adds	r2, r0, #1
 8012252:	4606      	mov	r6, r0
 8012254:	d1d6      	bne.n	8012204 <_svfiprintf_r+0x174>
 8012256:	89ab      	ldrh	r3, [r5, #12]
 8012258:	065b      	lsls	r3, r3, #25
 801225a:	f53f af2d 	bmi.w	80120b8 <_svfiprintf_r+0x28>
 801225e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012260:	e72c      	b.n	80120bc <_svfiprintf_r+0x2c>
 8012262:	ab03      	add	r3, sp, #12
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	462a      	mov	r2, r5
 8012268:	4b05      	ldr	r3, [pc, #20]	@ (8012280 <_svfiprintf_r+0x1f0>)
 801226a:	a904      	add	r1, sp, #16
 801226c:	4638      	mov	r0, r7
 801226e:	f000 f879 	bl	8012364 <_printf_i>
 8012272:	e7ed      	b.n	8012250 <_svfiprintf_r+0x1c0>
 8012274:	08012ab4 	.word	0x08012ab4
 8012278:	08012abe 	.word	0x08012abe
 801227c:	00000000 	.word	0x00000000
 8012280:	08011fd9 	.word	0x08011fd9
 8012284:	08012aba 	.word	0x08012aba

08012288 <_printf_common>:
 8012288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801228c:	4616      	mov	r6, r2
 801228e:	4698      	mov	r8, r3
 8012290:	688a      	ldr	r2, [r1, #8]
 8012292:	690b      	ldr	r3, [r1, #16]
 8012294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012298:	4293      	cmp	r3, r2
 801229a:	bfb8      	it	lt
 801229c:	4613      	movlt	r3, r2
 801229e:	6033      	str	r3, [r6, #0]
 80122a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80122a4:	4607      	mov	r7, r0
 80122a6:	460c      	mov	r4, r1
 80122a8:	b10a      	cbz	r2, 80122ae <_printf_common+0x26>
 80122aa:	3301      	adds	r3, #1
 80122ac:	6033      	str	r3, [r6, #0]
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	0699      	lsls	r1, r3, #26
 80122b2:	bf42      	ittt	mi
 80122b4:	6833      	ldrmi	r3, [r6, #0]
 80122b6:	3302      	addmi	r3, #2
 80122b8:	6033      	strmi	r3, [r6, #0]
 80122ba:	6825      	ldr	r5, [r4, #0]
 80122bc:	f015 0506 	ands.w	r5, r5, #6
 80122c0:	d106      	bne.n	80122d0 <_printf_common+0x48>
 80122c2:	f104 0a19 	add.w	sl, r4, #25
 80122c6:	68e3      	ldr	r3, [r4, #12]
 80122c8:	6832      	ldr	r2, [r6, #0]
 80122ca:	1a9b      	subs	r3, r3, r2
 80122cc:	42ab      	cmp	r3, r5
 80122ce:	dc26      	bgt.n	801231e <_printf_common+0x96>
 80122d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80122d4:	6822      	ldr	r2, [r4, #0]
 80122d6:	3b00      	subs	r3, #0
 80122d8:	bf18      	it	ne
 80122da:	2301      	movne	r3, #1
 80122dc:	0692      	lsls	r2, r2, #26
 80122de:	d42b      	bmi.n	8012338 <_printf_common+0xb0>
 80122e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80122e4:	4641      	mov	r1, r8
 80122e6:	4638      	mov	r0, r7
 80122e8:	47c8      	blx	r9
 80122ea:	3001      	adds	r0, #1
 80122ec:	d01e      	beq.n	801232c <_printf_common+0xa4>
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	6922      	ldr	r2, [r4, #16]
 80122f2:	f003 0306 	and.w	r3, r3, #6
 80122f6:	2b04      	cmp	r3, #4
 80122f8:	bf02      	ittt	eq
 80122fa:	68e5      	ldreq	r5, [r4, #12]
 80122fc:	6833      	ldreq	r3, [r6, #0]
 80122fe:	1aed      	subeq	r5, r5, r3
 8012300:	68a3      	ldr	r3, [r4, #8]
 8012302:	bf0c      	ite	eq
 8012304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012308:	2500      	movne	r5, #0
 801230a:	4293      	cmp	r3, r2
 801230c:	bfc4      	itt	gt
 801230e:	1a9b      	subgt	r3, r3, r2
 8012310:	18ed      	addgt	r5, r5, r3
 8012312:	2600      	movs	r6, #0
 8012314:	341a      	adds	r4, #26
 8012316:	42b5      	cmp	r5, r6
 8012318:	d11a      	bne.n	8012350 <_printf_common+0xc8>
 801231a:	2000      	movs	r0, #0
 801231c:	e008      	b.n	8012330 <_printf_common+0xa8>
 801231e:	2301      	movs	r3, #1
 8012320:	4652      	mov	r2, sl
 8012322:	4641      	mov	r1, r8
 8012324:	4638      	mov	r0, r7
 8012326:	47c8      	blx	r9
 8012328:	3001      	adds	r0, #1
 801232a:	d103      	bne.n	8012334 <_printf_common+0xac>
 801232c:	f04f 30ff 	mov.w	r0, #4294967295
 8012330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012334:	3501      	adds	r5, #1
 8012336:	e7c6      	b.n	80122c6 <_printf_common+0x3e>
 8012338:	18e1      	adds	r1, r4, r3
 801233a:	1c5a      	adds	r2, r3, #1
 801233c:	2030      	movs	r0, #48	@ 0x30
 801233e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012342:	4422      	add	r2, r4
 8012344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801234c:	3302      	adds	r3, #2
 801234e:	e7c7      	b.n	80122e0 <_printf_common+0x58>
 8012350:	2301      	movs	r3, #1
 8012352:	4622      	mov	r2, r4
 8012354:	4641      	mov	r1, r8
 8012356:	4638      	mov	r0, r7
 8012358:	47c8      	blx	r9
 801235a:	3001      	adds	r0, #1
 801235c:	d0e6      	beq.n	801232c <_printf_common+0xa4>
 801235e:	3601      	adds	r6, #1
 8012360:	e7d9      	b.n	8012316 <_printf_common+0x8e>
	...

08012364 <_printf_i>:
 8012364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012368:	7e0f      	ldrb	r7, [r1, #24]
 801236a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801236c:	2f78      	cmp	r7, #120	@ 0x78
 801236e:	4691      	mov	r9, r2
 8012370:	4680      	mov	r8, r0
 8012372:	460c      	mov	r4, r1
 8012374:	469a      	mov	sl, r3
 8012376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801237a:	d807      	bhi.n	801238c <_printf_i+0x28>
 801237c:	2f62      	cmp	r7, #98	@ 0x62
 801237e:	d80a      	bhi.n	8012396 <_printf_i+0x32>
 8012380:	2f00      	cmp	r7, #0
 8012382:	f000 80d2 	beq.w	801252a <_printf_i+0x1c6>
 8012386:	2f58      	cmp	r7, #88	@ 0x58
 8012388:	f000 80b9 	beq.w	80124fe <_printf_i+0x19a>
 801238c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012394:	e03a      	b.n	801240c <_printf_i+0xa8>
 8012396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801239a:	2b15      	cmp	r3, #21
 801239c:	d8f6      	bhi.n	801238c <_printf_i+0x28>
 801239e:	a101      	add	r1, pc, #4	@ (adr r1, 80123a4 <_printf_i+0x40>)
 80123a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80123a4:	080123fd 	.word	0x080123fd
 80123a8:	08012411 	.word	0x08012411
 80123ac:	0801238d 	.word	0x0801238d
 80123b0:	0801238d 	.word	0x0801238d
 80123b4:	0801238d 	.word	0x0801238d
 80123b8:	0801238d 	.word	0x0801238d
 80123bc:	08012411 	.word	0x08012411
 80123c0:	0801238d 	.word	0x0801238d
 80123c4:	0801238d 	.word	0x0801238d
 80123c8:	0801238d 	.word	0x0801238d
 80123cc:	0801238d 	.word	0x0801238d
 80123d0:	08012511 	.word	0x08012511
 80123d4:	0801243b 	.word	0x0801243b
 80123d8:	080124cb 	.word	0x080124cb
 80123dc:	0801238d 	.word	0x0801238d
 80123e0:	0801238d 	.word	0x0801238d
 80123e4:	08012533 	.word	0x08012533
 80123e8:	0801238d 	.word	0x0801238d
 80123ec:	0801243b 	.word	0x0801243b
 80123f0:	0801238d 	.word	0x0801238d
 80123f4:	0801238d 	.word	0x0801238d
 80123f8:	080124d3 	.word	0x080124d3
 80123fc:	6833      	ldr	r3, [r6, #0]
 80123fe:	1d1a      	adds	r2, r3, #4
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	6032      	str	r2, [r6, #0]
 8012404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801240c:	2301      	movs	r3, #1
 801240e:	e09d      	b.n	801254c <_printf_i+0x1e8>
 8012410:	6833      	ldr	r3, [r6, #0]
 8012412:	6820      	ldr	r0, [r4, #0]
 8012414:	1d19      	adds	r1, r3, #4
 8012416:	6031      	str	r1, [r6, #0]
 8012418:	0606      	lsls	r6, r0, #24
 801241a:	d501      	bpl.n	8012420 <_printf_i+0xbc>
 801241c:	681d      	ldr	r5, [r3, #0]
 801241e:	e003      	b.n	8012428 <_printf_i+0xc4>
 8012420:	0645      	lsls	r5, r0, #25
 8012422:	d5fb      	bpl.n	801241c <_printf_i+0xb8>
 8012424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012428:	2d00      	cmp	r5, #0
 801242a:	da03      	bge.n	8012434 <_printf_i+0xd0>
 801242c:	232d      	movs	r3, #45	@ 0x2d
 801242e:	426d      	negs	r5, r5
 8012430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012434:	4859      	ldr	r0, [pc, #356]	@ (801259c <_printf_i+0x238>)
 8012436:	230a      	movs	r3, #10
 8012438:	e011      	b.n	801245e <_printf_i+0xfa>
 801243a:	6821      	ldr	r1, [r4, #0]
 801243c:	6833      	ldr	r3, [r6, #0]
 801243e:	0608      	lsls	r0, r1, #24
 8012440:	f853 5b04 	ldr.w	r5, [r3], #4
 8012444:	d402      	bmi.n	801244c <_printf_i+0xe8>
 8012446:	0649      	lsls	r1, r1, #25
 8012448:	bf48      	it	mi
 801244a:	b2ad      	uxthmi	r5, r5
 801244c:	2f6f      	cmp	r7, #111	@ 0x6f
 801244e:	4853      	ldr	r0, [pc, #332]	@ (801259c <_printf_i+0x238>)
 8012450:	6033      	str	r3, [r6, #0]
 8012452:	bf14      	ite	ne
 8012454:	230a      	movne	r3, #10
 8012456:	2308      	moveq	r3, #8
 8012458:	2100      	movs	r1, #0
 801245a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801245e:	6866      	ldr	r6, [r4, #4]
 8012460:	60a6      	str	r6, [r4, #8]
 8012462:	2e00      	cmp	r6, #0
 8012464:	bfa2      	ittt	ge
 8012466:	6821      	ldrge	r1, [r4, #0]
 8012468:	f021 0104 	bicge.w	r1, r1, #4
 801246c:	6021      	strge	r1, [r4, #0]
 801246e:	b90d      	cbnz	r5, 8012474 <_printf_i+0x110>
 8012470:	2e00      	cmp	r6, #0
 8012472:	d04b      	beq.n	801250c <_printf_i+0x1a8>
 8012474:	4616      	mov	r6, r2
 8012476:	fbb5 f1f3 	udiv	r1, r5, r3
 801247a:	fb03 5711 	mls	r7, r3, r1, r5
 801247e:	5dc7      	ldrb	r7, [r0, r7]
 8012480:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012484:	462f      	mov	r7, r5
 8012486:	42bb      	cmp	r3, r7
 8012488:	460d      	mov	r5, r1
 801248a:	d9f4      	bls.n	8012476 <_printf_i+0x112>
 801248c:	2b08      	cmp	r3, #8
 801248e:	d10b      	bne.n	80124a8 <_printf_i+0x144>
 8012490:	6823      	ldr	r3, [r4, #0]
 8012492:	07df      	lsls	r7, r3, #31
 8012494:	d508      	bpl.n	80124a8 <_printf_i+0x144>
 8012496:	6923      	ldr	r3, [r4, #16]
 8012498:	6861      	ldr	r1, [r4, #4]
 801249a:	4299      	cmp	r1, r3
 801249c:	bfde      	ittt	le
 801249e:	2330      	movle	r3, #48	@ 0x30
 80124a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80124a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80124a8:	1b92      	subs	r2, r2, r6
 80124aa:	6122      	str	r2, [r4, #16]
 80124ac:	f8cd a000 	str.w	sl, [sp]
 80124b0:	464b      	mov	r3, r9
 80124b2:	aa03      	add	r2, sp, #12
 80124b4:	4621      	mov	r1, r4
 80124b6:	4640      	mov	r0, r8
 80124b8:	f7ff fee6 	bl	8012288 <_printf_common>
 80124bc:	3001      	adds	r0, #1
 80124be:	d14a      	bne.n	8012556 <_printf_i+0x1f2>
 80124c0:	f04f 30ff 	mov.w	r0, #4294967295
 80124c4:	b004      	add	sp, #16
 80124c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ca:	6823      	ldr	r3, [r4, #0]
 80124cc:	f043 0320 	orr.w	r3, r3, #32
 80124d0:	6023      	str	r3, [r4, #0]
 80124d2:	4833      	ldr	r0, [pc, #204]	@ (80125a0 <_printf_i+0x23c>)
 80124d4:	2778      	movs	r7, #120	@ 0x78
 80124d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80124da:	6823      	ldr	r3, [r4, #0]
 80124dc:	6831      	ldr	r1, [r6, #0]
 80124de:	061f      	lsls	r7, r3, #24
 80124e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80124e4:	d402      	bmi.n	80124ec <_printf_i+0x188>
 80124e6:	065f      	lsls	r7, r3, #25
 80124e8:	bf48      	it	mi
 80124ea:	b2ad      	uxthmi	r5, r5
 80124ec:	6031      	str	r1, [r6, #0]
 80124ee:	07d9      	lsls	r1, r3, #31
 80124f0:	bf44      	itt	mi
 80124f2:	f043 0320 	orrmi.w	r3, r3, #32
 80124f6:	6023      	strmi	r3, [r4, #0]
 80124f8:	b11d      	cbz	r5, 8012502 <_printf_i+0x19e>
 80124fa:	2310      	movs	r3, #16
 80124fc:	e7ac      	b.n	8012458 <_printf_i+0xf4>
 80124fe:	4827      	ldr	r0, [pc, #156]	@ (801259c <_printf_i+0x238>)
 8012500:	e7e9      	b.n	80124d6 <_printf_i+0x172>
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	f023 0320 	bic.w	r3, r3, #32
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	e7f6      	b.n	80124fa <_printf_i+0x196>
 801250c:	4616      	mov	r6, r2
 801250e:	e7bd      	b.n	801248c <_printf_i+0x128>
 8012510:	6833      	ldr	r3, [r6, #0]
 8012512:	6825      	ldr	r5, [r4, #0]
 8012514:	6961      	ldr	r1, [r4, #20]
 8012516:	1d18      	adds	r0, r3, #4
 8012518:	6030      	str	r0, [r6, #0]
 801251a:	062e      	lsls	r6, r5, #24
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	d501      	bpl.n	8012524 <_printf_i+0x1c0>
 8012520:	6019      	str	r1, [r3, #0]
 8012522:	e002      	b.n	801252a <_printf_i+0x1c6>
 8012524:	0668      	lsls	r0, r5, #25
 8012526:	d5fb      	bpl.n	8012520 <_printf_i+0x1bc>
 8012528:	8019      	strh	r1, [r3, #0]
 801252a:	2300      	movs	r3, #0
 801252c:	6123      	str	r3, [r4, #16]
 801252e:	4616      	mov	r6, r2
 8012530:	e7bc      	b.n	80124ac <_printf_i+0x148>
 8012532:	6833      	ldr	r3, [r6, #0]
 8012534:	1d1a      	adds	r2, r3, #4
 8012536:	6032      	str	r2, [r6, #0]
 8012538:	681e      	ldr	r6, [r3, #0]
 801253a:	6862      	ldr	r2, [r4, #4]
 801253c:	2100      	movs	r1, #0
 801253e:	4630      	mov	r0, r6
 8012540:	f7ed feee 	bl	8000320 <memchr>
 8012544:	b108      	cbz	r0, 801254a <_printf_i+0x1e6>
 8012546:	1b80      	subs	r0, r0, r6
 8012548:	6060      	str	r0, [r4, #4]
 801254a:	6863      	ldr	r3, [r4, #4]
 801254c:	6123      	str	r3, [r4, #16]
 801254e:	2300      	movs	r3, #0
 8012550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012554:	e7aa      	b.n	80124ac <_printf_i+0x148>
 8012556:	6923      	ldr	r3, [r4, #16]
 8012558:	4632      	mov	r2, r6
 801255a:	4649      	mov	r1, r9
 801255c:	4640      	mov	r0, r8
 801255e:	47d0      	blx	sl
 8012560:	3001      	adds	r0, #1
 8012562:	d0ad      	beq.n	80124c0 <_printf_i+0x15c>
 8012564:	6823      	ldr	r3, [r4, #0]
 8012566:	079b      	lsls	r3, r3, #30
 8012568:	d413      	bmi.n	8012592 <_printf_i+0x22e>
 801256a:	68e0      	ldr	r0, [r4, #12]
 801256c:	9b03      	ldr	r3, [sp, #12]
 801256e:	4298      	cmp	r0, r3
 8012570:	bfb8      	it	lt
 8012572:	4618      	movlt	r0, r3
 8012574:	e7a6      	b.n	80124c4 <_printf_i+0x160>
 8012576:	2301      	movs	r3, #1
 8012578:	4632      	mov	r2, r6
 801257a:	4649      	mov	r1, r9
 801257c:	4640      	mov	r0, r8
 801257e:	47d0      	blx	sl
 8012580:	3001      	adds	r0, #1
 8012582:	d09d      	beq.n	80124c0 <_printf_i+0x15c>
 8012584:	3501      	adds	r5, #1
 8012586:	68e3      	ldr	r3, [r4, #12]
 8012588:	9903      	ldr	r1, [sp, #12]
 801258a:	1a5b      	subs	r3, r3, r1
 801258c:	42ab      	cmp	r3, r5
 801258e:	dcf2      	bgt.n	8012576 <_printf_i+0x212>
 8012590:	e7eb      	b.n	801256a <_printf_i+0x206>
 8012592:	2500      	movs	r5, #0
 8012594:	f104 0619 	add.w	r6, r4, #25
 8012598:	e7f5      	b.n	8012586 <_printf_i+0x222>
 801259a:	bf00      	nop
 801259c:	08012ac5 	.word	0x08012ac5
 80125a0:	08012ad6 	.word	0x08012ad6

080125a4 <memmove>:
 80125a4:	4288      	cmp	r0, r1
 80125a6:	b510      	push	{r4, lr}
 80125a8:	eb01 0402 	add.w	r4, r1, r2
 80125ac:	d902      	bls.n	80125b4 <memmove+0x10>
 80125ae:	4284      	cmp	r4, r0
 80125b0:	4623      	mov	r3, r4
 80125b2:	d807      	bhi.n	80125c4 <memmove+0x20>
 80125b4:	1e43      	subs	r3, r0, #1
 80125b6:	42a1      	cmp	r1, r4
 80125b8:	d008      	beq.n	80125cc <memmove+0x28>
 80125ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125c2:	e7f8      	b.n	80125b6 <memmove+0x12>
 80125c4:	4402      	add	r2, r0
 80125c6:	4601      	mov	r1, r0
 80125c8:	428a      	cmp	r2, r1
 80125ca:	d100      	bne.n	80125ce <memmove+0x2a>
 80125cc:	bd10      	pop	{r4, pc}
 80125ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125d6:	e7f7      	b.n	80125c8 <memmove+0x24>

080125d8 <_sbrk_r>:
 80125d8:	b538      	push	{r3, r4, r5, lr}
 80125da:	4d06      	ldr	r5, [pc, #24]	@ (80125f4 <_sbrk_r+0x1c>)
 80125dc:	2300      	movs	r3, #0
 80125de:	4604      	mov	r4, r0
 80125e0:	4608      	mov	r0, r1
 80125e2:	602b      	str	r3, [r5, #0]
 80125e4:	f7f0 f882 	bl	80026ec <_sbrk>
 80125e8:	1c43      	adds	r3, r0, #1
 80125ea:	d102      	bne.n	80125f2 <_sbrk_r+0x1a>
 80125ec:	682b      	ldr	r3, [r5, #0]
 80125ee:	b103      	cbz	r3, 80125f2 <_sbrk_r+0x1a>
 80125f0:	6023      	str	r3, [r4, #0]
 80125f2:	bd38      	pop	{r3, r4, r5, pc}
 80125f4:	24001ba4 	.word	0x24001ba4

080125f8 <_realloc_r>:
 80125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125fc:	4680      	mov	r8, r0
 80125fe:	4615      	mov	r5, r2
 8012600:	460c      	mov	r4, r1
 8012602:	b921      	cbnz	r1, 801260e <_realloc_r+0x16>
 8012604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012608:	4611      	mov	r1, r2
 801260a:	f7ff bc59 	b.w	8011ec0 <_malloc_r>
 801260e:	b92a      	cbnz	r2, 801261c <_realloc_r+0x24>
 8012610:	f7ff fbea 	bl	8011de8 <_free_r>
 8012614:	2400      	movs	r4, #0
 8012616:	4620      	mov	r0, r4
 8012618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801261c:	f000 f81a 	bl	8012654 <_malloc_usable_size_r>
 8012620:	4285      	cmp	r5, r0
 8012622:	4606      	mov	r6, r0
 8012624:	d802      	bhi.n	801262c <_realloc_r+0x34>
 8012626:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801262a:	d8f4      	bhi.n	8012616 <_realloc_r+0x1e>
 801262c:	4629      	mov	r1, r5
 801262e:	4640      	mov	r0, r8
 8012630:	f7ff fc46 	bl	8011ec0 <_malloc_r>
 8012634:	4607      	mov	r7, r0
 8012636:	2800      	cmp	r0, #0
 8012638:	d0ec      	beq.n	8012614 <_realloc_r+0x1c>
 801263a:	42b5      	cmp	r5, r6
 801263c:	462a      	mov	r2, r5
 801263e:	4621      	mov	r1, r4
 8012640:	bf28      	it	cs
 8012642:	4632      	movcs	r2, r6
 8012644:	f7ff fbc2 	bl	8011dcc <memcpy>
 8012648:	4621      	mov	r1, r4
 801264a:	4640      	mov	r0, r8
 801264c:	f7ff fbcc 	bl	8011de8 <_free_r>
 8012650:	463c      	mov	r4, r7
 8012652:	e7e0      	b.n	8012616 <_realloc_r+0x1e>

08012654 <_malloc_usable_size_r>:
 8012654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012658:	1f18      	subs	r0, r3, #4
 801265a:	2b00      	cmp	r3, #0
 801265c:	bfbc      	itt	lt
 801265e:	580b      	ldrlt	r3, [r1, r0]
 8012660:	18c0      	addlt	r0, r0, r3
 8012662:	4770      	bx	lr

08012664 <_init>:
 8012664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012666:	bf00      	nop
 8012668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801266a:	bc08      	pop	{r3}
 801266c:	469e      	mov	lr, r3
 801266e:	4770      	bx	lr

08012670 <_fini>:
 8012670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012672:	bf00      	nop
 8012674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012676:	bc08      	pop	{r3}
 8012678:	469e      	mov	lr, r3
 801267a:	4770      	bx	lr
