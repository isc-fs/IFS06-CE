
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012378  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08012648  08012648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012aec  08012aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012af4  08012af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012af8  08012af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08012afc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b44  2400006c  08012b68  0001406c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001bb0  08012b68  00014bb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000288e0  00000000  00000000  0001409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041fc  00000000  00000000  0003c97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002080  00000000  00000000  00040b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000195a  00000000  00000000  00042bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a603  00000000  00000000  00044552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ba26  00000000  00000000  0007eb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179a85  00000000  00000000  000aa57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00224000  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092cc  00000000  00000000  00224044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  0022d310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012630 	.word	0x08012630

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08012630 	.word	0x08012630

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <LPF_EMA_Init>:
 *      Author: RMG
 */

#include "LPF.h"

void LPF_EMA_Init(LPF_EMA *filt, float alpha){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	ed87 0a00 	vstr	s0, [r7]

	//Set filter coefficient

	LPF_EMA_SetAlpha(filt, alpha);
 80006bc:	ed97 0a00 	vldr	s0, [r7]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f808 	bl	80006d6 <LPF_EMA_SetAlpha>

	//Clear filter output

	filt->output = 0.0f;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <LPF_EMA_SetAlpha>:

void LPF_EMA_SetAlpha(LPF_EMA *filt, float alpha){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	ed87 0a00 	vstr	s0, [r7]

	//Correct filter

	if(alpha > 1.0f){
 80006e2:	edd7 7a00 	vldr	s15, [r7]
 80006e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f2:	dd03      	ble.n	80006fc <LPF_EMA_SetAlpha+0x26>
		alpha = 1.0f;
 80006f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	e009      	b.n	8000710 <LPF_EMA_SetAlpha+0x3a>

	}else if (alpha < 0.0f){
 80006fc:	edd7 7a00 	vldr	s15, [r7]
 8000700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000708:	d502      	bpl.n	8000710 <LPF_EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
	}

	//Set filter coefficient

	filt->alpha = alpha;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <LPF_EMA_Update>:

float LPF_EMA_Update(LPF_EMA *filt, float in){
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	ed87 0a00 	vstr	s0, [r7]

	filt->output = filt->alpha*in + (1-filt->alpha)*filt->output;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	ed93 7a00 	vldr	s14, [r3]
 8000734:	edd7 7a00 	vldr	s15, [r7]
 8000738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000746:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	edc3 7a01 	vstr	s15, [r3, #4]

	return filt->output;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
}
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f002 f876 	bl	8002868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f97e 	bl	8000a7c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000780:	f000 f9ea 	bl	8000b58 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 fdd0 	bl	8001328 <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 fdae 	bl	80012e8 <MX_DMA_Init>
  MX_ADC1_Init();
 800078c:	f000 fa16 	bl	8000bbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000790:	f000 fab0 	bl	8000cf4 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000794:	f000 fb16 	bl	8000dc4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000798:	f000 fb92 	bl	8000ec0 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 800079c:	f000 fc2c 	bl	8000ff8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 fd56 	bl	8001250 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80007a4:	f000 fce0 	bl	8001168 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fd06 	bl	80011b8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80007ac:	f000 fc06 	bl	8000fbc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007b0:	f010 f980 	bl	8010ab4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	//Inicializar tarjeta microSD
	SDCard_start();
 80007b4:	f001 fa7a 	bl	8001cac <SDCard_start>
	HAL_Delay(2000);
 80007b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007bc:	f002 f8e6 	bl	800298c <HAL_Delay>

	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer_adc, 3) != HAL_OK) {
 80007c0:	2203      	movs	r2, #3
 80007c2:	4983      	ldr	r1, [pc, #524]	@ (80009d0 <main+0x25c>)
 80007c4:	4883      	ldr	r0, [pc, #524]	@ (80009d4 <main+0x260>)
 80007c6:	f002 fdf9 	bl	80033bc <HAL_ADC_Start_DMA>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0x66>
#if DEBUG
		print("Error al inicializar ADC_DMA");
 80007d0:	4881      	ldr	r0, [pc, #516]	@ (80009d8 <main+0x264>)
 80007d2:	f000 fe8d 	bl	80014f0 <print>
#endif
		Error_Handler();
 80007d6:	f001 faf4 	bl	8001dc2 <Error_Handler>
	}
	//Inicializacion filtro paso bajo
	LPF_EMA_Init(&s1_filt, 0.09f);
 80007da:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 80009dc <main+0x268>
 80007de:	4880      	ldr	r0, [pc, #512]	@ (80009e0 <main+0x26c>)
 80007e0:	f7ff ff66 	bl	80006b0 <LPF_EMA_Init>
	LPF_EMA_Init(&s2_filt, 0.09f);
 80007e4:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 80009dc <main+0x268>
 80007e8:	487e      	ldr	r0, [pc, #504]	@ (80009e4 <main+0x270>)
 80007ea:	f7ff ff61 	bl	80006b0 <LPF_EMA_Init>

	//Inicialización de buses CAN
	//Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80007ee:	487e      	ldr	r0, [pc, #504]	@ (80009e8 <main+0x274>)
 80007f0:	f006 fdc6 	bl	8007380 <HAL_FDCAN_Start>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <main+0x90>
#if DEBUG
		print("Error al inicializar CAN_INV");
 80007fa:	487c      	ldr	r0, [pc, #496]	@ (80009ec <main+0x278>)
 80007fc:	f000 fe78 	bl	80014f0 <print>
#endif
		Error_Handler();
 8000800:	f001 fadf 	bl	8001dc2 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4877      	ldr	r0, [pc, #476]	@ (80009e8 <main+0x274>)
 800080a:	f006 fffb 	bl	8007804 <HAL_FDCAN_ActivateNotification>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <main+0xaa>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000814:	4876      	ldr	r0, [pc, #472]	@ (80009f0 <main+0x27c>)
 8000816:	f000 fe6b 	bl	80014f0 <print>
#endif
		Error_Handler();
 800081a:	f001 fad2 	bl	8001dc2 <Error_Handler>
#endif
		Error_Handler();
    }*/

	//Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 800081e:	4875      	ldr	r0, [pc, #468]	@ (80009f4 <main+0x280>)
 8000820:	f006 fdae 	bl	8007380 <HAL_FDCAN_Start>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <main+0xc0>

#if DEBUG
		print("Error al inicializar CAN_ACU");
 800082a:	4873      	ldr	r0, [pc, #460]	@ (80009f8 <main+0x284>)
 800082c:	f000 fe60 	bl	80014f0 <print>

#endif
		Error_Handler();
 8000830:	f001 fac7 	bl	8001dc2 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	486e      	ldr	r0, [pc, #440]	@ (80009f4 <main+0x280>)
 800083a:	f006 ffe3 	bl	8007804 <HAL_FDCAN_ActivateNotification>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d004      	beq.n	800084e <main+0xda>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000844:	486d      	ldr	r0, [pc, #436]	@ (80009fc <main+0x288>)
 8000846:	f000 fe53 	bl	80014f0 <print>
#endif
		Error_Handler();
 800084a:	f001 faba 	bl	8001dc2 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if(DEBUG)
	print("Solicitar tensión inversor");
 800084e:	486c      	ldr	r0, [pc, #432]	@ (8000a00 <main+0x28c>)
 8000850:	f000 fe4e 	bl	80014f0 <print>
#endif
	//Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0) {
 8000854:	e006      	b.n	8000864 <main+0xf0>

		if (config_inv_lectura_v == 1) {
 8000856:	4b6b      	ldr	r3, [pc, #428]	@ (8000a04 <main+0x290>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d102      	bne.n	8000864 <main+0xf0>

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 800085e:	486a      	ldr	r0, [pc, #424]	@ (8000a08 <main+0x294>)
 8000860:	f000 fe46 	bl	80014f0 <print>
	while (config_inv_lectura_v == 0) {
 8000864:	4b67      	ldr	r3, [pc, #412]	@ (8000a04 <main+0x290>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f4      	beq.n	8000856 <main+0xe2>
	}

#if !CALIBRATION

	//Estado STAND BY inversor
	while (state != 3) {
 800086c:	e006      	b.n	800087c <main+0x108>

		if (state == 3) {
 800086e:	4b67      	ldr	r3, [pc, #412]	@ (8000a0c <main+0x298>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d102      	bne.n	800087c <main+0x108>
#if DEBUG
			print("Precarga");
 8000876:	4866      	ldr	r0, [pc, #408]	@ (8000a10 <main+0x29c>)
 8000878:	f000 fe3a 	bl	80014f0 <print>
	while (state != 3) {
 800087c:	4b63      	ldr	r3, [pc, #396]	@ (8000a0c <main+0x298>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d1f4      	bne.n	800086e <main+0xfa>
#endif
		}
	}
	//PRE-CHARGE
	while (precarga_inv == 0) {
 8000884:	e037      	b.n	80008f6 <main+0x182>

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000886:	4b63      	ldr	r3, [pc, #396]	@ (8000a14 <main+0x2a0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4962      	ldr	r1, [pc, #392]	@ (8000a18 <main+0x2a4>)
 800088e:	4863      	ldr	r0, [pc, #396]	@ (8000a1c <main+0x2a8>)
 8000890:	f011 fa2e 	bl	8011cf0 <siprintf>
		print(TxBuffer);
 8000894:	4861      	ldr	r0, [pc, #388]	@ (8000a1c <main+0x2a8>)
 8000896:	f000 fe2b 	bl	80014f0 <print>
		//printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		//Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800089a:	4b61      	ldr	r3, [pc, #388]	@ (8000a20 <main+0x2ac>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a61      	ldr	r2, [pc, #388]	@ (8000a24 <main+0x2b0>)
 80008a0:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 80008a2:	4b60      	ldr	r3, [pc, #384]	@ (8000a24 <main+0x2b0>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a24 <main+0x2b0>)
 80008aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ae:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008b0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a24 <main+0x2b0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008b6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <main+0x2b0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008bc:	4b55      	ldr	r3, [pc, #340]	@ (8000a14 <main+0x2a0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b59      	ldr	r3, [pc, #356]	@ (8000a28 <main+0x2b4>)
 80008c4:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008c6:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <main+0x2a0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	121b      	asrs	r3, r3, #8
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b56      	ldr	r3, [pc, #344]	@ (8000a28 <main+0x2b4>)
 80008d0:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu)
 80008d2:	4a55      	ldr	r2, [pc, #340]	@ (8000a28 <main+0x2b4>)
 80008d4:	4953      	ldr	r1, [pc, #332]	@ (8000a24 <main+0x2b0>)
 80008d6:	4847      	ldr	r0, [pc, #284]	@ (80009f4 <main+0x280>)
 80008d8:	f006 fd7d 	bl	80073d6 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <main+0x174>
				== HAL_OK) {
#if DEBUG
			print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 80008e2:	4852      	ldr	r0, [pc, #328]	@ (8000a2c <main+0x2b8>)
 80008e4:	f000 fe04 	bl	80014f0 <print>
#endif
		}

		if (precarga_inv == 1) {
 80008e8:	4b51      	ldr	r3, [pc, #324]	@ (8000a30 <main+0x2bc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d102      	bne.n	80008f6 <main+0x182>
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80008f0:	4850      	ldr	r0, [pc, #320]	@ (8000a34 <main+0x2c0>)
 80008f2:	f000 fdfd 	bl	80014f0 <print>
	while (precarga_inv == 0) {
 80008f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a30 <main+0x2bc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0c3      	beq.n	8000886 <main+0x112>
		}

	}

#if DEBUG
	print("state : stand by");
 80008fe:	484e      	ldr	r0, [pc, #312]	@ (8000a38 <main+0x2c4>)
 8000900:	f000 fdf6 	bl	80014f0 <print>
#endif
	//Estado READY inversor
	TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000904:	4b4d      	ldr	r3, [pc, #308]	@ (8000a3c <main+0x2c8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a4d      	ldr	r2, [pc, #308]	@ (8000a40 <main+0x2cc>)
 800090a:	6013      	str	r3, [r2, #0]
	TxHeader_Inv.DataLength = 3;
 800090c:	4b4c      	ldr	r3, [pc, #304]	@ (8000a40 <main+0x2cc>)
 800090e:	2203      	movs	r2, #3
 8000910:	60da      	str	r2, [r3, #12]
	TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000912:	4b4b      	ldr	r3, [pc, #300]	@ (8000a40 <main+0x2cc>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]

	TxData_Inv[0] = 0x0;
 8000918:	4b4a      	ldr	r3, [pc, #296]	@ (8000a44 <main+0x2d0>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	TxData_Inv[1] = 0x0;
 800091e:	4b49      	ldr	r3, [pc, #292]	@ (8000a44 <main+0x2d0>)
 8000920:	2200      	movs	r2, #0
 8000922:	705a      	strb	r2, [r3, #1]
	TxData_Inv[2] = 0x4;
 8000924:	4b47      	ldr	r3, [pc, #284]	@ (8000a44 <main+0x2d0>)
 8000926:	2204      	movs	r2, #4
 8000928:	709a      	strb	r2, [r3, #2]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800092a:	4a46      	ldr	r2, [pc, #280]	@ (8000a44 <main+0x2d0>)
 800092c:	4944      	ldr	r1, [pc, #272]	@ (8000a40 <main+0x2cc>)
 800092e:	482e      	ldr	r0, [pc, #184]	@ (80009e8 <main+0x274>)
 8000930:	f006 fd51 	bl	80073d6 <HAL_FDCAN_AddMessageToTxFifoQ>

	while (state != 4) {
 8000934:	bf00      	nop
 8000936:	4b35      	ldr	r3, [pc, #212]	@ (8000a0c <main+0x298>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d1fb      	bne.n	8000936 <main+0x1c2>

	}

#if DEBUG
	print("state: ready");
 800093e:	4842      	ldr	r0, [pc, #264]	@ (8000a48 <main+0x2d4>)
 8000940:	f000 fdd6 	bl	80014f0 <print>
#endif

#endif

	//Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0) {
 8000944:	e027      	b.n	8000996 <main+0x222>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	4840      	ldr	r0, [pc, #256]	@ (8000a4c <main+0x2d8>)
 800094a:	f007 fe79 	bl	8008640 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b3f      	ldr	r3, [pc, #252]	@ (8000a50 <main+0x2dc>)
 8000954:	601a      	str	r2, [r3, #0]
		START_BUTTON_Pin);
		if (start_button_act == 1 && start_button_ant == 0) {
 8000956:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <main+0x2dc>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d11b      	bne.n	8000996 <main+0x222>
 800095e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <main+0x2e0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d117      	bne.n	8000996 <main+0x222>

#if DEBUG
			print("Botón Start + Freno:");
 8000966:	483c      	ldr	r0, [pc, #240]	@ (8000a58 <main+0x2e4>)
 8000968:	f000 fdc2 	bl	80014f0 <print>
			printValue(s_freno);
 800096c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a5c <main+0x2e8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fddb 	bl	800152c <printValue>
#endif
			if (s_freno > UMBRAL_FRENO) {
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <main+0x2e8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800097e:	4293      	cmp	r3, r2
 8000980:	dd06      	ble.n	8000990 <main+0x21c>
				boton_arranque = 1;
 8000982:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <main+0x2ec>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000988:	4836      	ldr	r0, [pc, #216]	@ (8000a64 <main+0x2f0>)
 800098a:	f000 fdb1 	bl	80014f0 <print>
 800098e:	e002      	b.n	8000996 <main+0x222>
#endif
			} else {
#if DEBUG
				print("Pulsar freno para arrancar");
 8000990:	4835      	ldr	r0, [pc, #212]	@ (8000a68 <main+0x2f4>)
 8000992:	f000 fdad 	bl	80014f0 <print>
	while (boton_arranque == 0) {
 8000996:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <main+0x2ec>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0d3      	beq.n	8000946 <main+0x1d2>
		}
	}

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 800099e:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <main+0x2f8>)
 80009a0:	f000 fda6 	bl	80014f0 <print>
#endif
#if !CALIBRATION

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); //Enciende RTDS
 80009a4:	2201      	movs	r2, #1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4831      	ldr	r0, [pc, #196]	@ (8000a70 <main+0x2fc>)
 80009aa:	f007 fe61 	bl	8008670 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80009ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009b2:	f001 ffeb 	bl	800298c <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); //Apaga RTDS
 80009b6:	2200      	movs	r2, #0
 80009b8:	2102      	movs	r1, #2
 80009ba:	482d      	ldr	r0, [pc, #180]	@ (8000a70 <main+0x2fc>)
 80009bc:	f007 fe58 	bl	8008670 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 80009c0:	482c      	ldr	r0, [pc, #176]	@ (8000a74 <main+0x300>)
 80009c2:	f000 fd95 	bl	80014f0 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * prescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80009c6:	482c      	ldr	r0, [pc, #176]	@ (8000a78 <main+0x304>)
 80009c8:	f00c feae 	bl	800d728 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <main+0x258>
 80009d0:	2400166c 	.word	0x2400166c
 80009d4:	24000094 	.word	0x24000094
 80009d8:	08012648 	.word	0x08012648
 80009dc:	3db851ec 	.word	0x3db851ec
 80009e0:	24001684 	.word	0x24001684
 80009e4:	2400168c 	.word	0x2400168c
 80009e8:	240001ec 	.word	0x240001ec
 80009ec:	08012668 	.word	0x08012668
 80009f0:	08012688 	.word	0x08012688
 80009f4:	2400028c 	.word	0x2400028c
 80009f8:	080126b0 	.word	0x080126b0
 80009fc:	080126d0 	.word	0x080126d0
 8000a00:	080126f8 	.word	0x080126f8
 8000a04:	2400008c 	.word	0x2400008c
 8000a08:	08012714 	.word	0x08012714
 8000a0c:	240016a2 	.word	0x240016a2
 8000a10:	08012748 	.word	0x08012748
 8000a14:	24001660 	.word	0x24001660
 8000a18:	08012754 	.word	0x08012754
 8000a1c:	24001714 	.word	0x24001714
 8000a20:	24000004 	.word	0x24000004
 8000a24:	240005b4 	.word	0x240005b4
 8000a28:	24000610 	.word	0x24000610
 8000a2c:	0801276c 	.word	0x0801276c
 8000a30:	24000088 	.word	0x24000088
 8000a34:	08012794 	.word	0x08012794
 8000a38:	080127b0 	.word	0x080127b0
 8000a3c:	24000000 	.word	0x24000000
 8000a40:	24000568 	.word	0x24000568
 8000a44:	24000600 	.word	0x24000600
 8000a48:	080127c4 	.word	0x080127c4
 8000a4c:	58021800 	.word	0x58021800
 8000a50:	24001658 	.word	0x24001658
 8000a54:	2400165c 	.word	0x2400165c
 8000a58:	080127d4 	.word	0x080127d4
 8000a5c:	24001694 	.word	0x24001694
 8000a60:	24000090 	.word	0x24000090
 8000a64:	080127ec 	.word	0x080127ec
 8000a68:	0801280c 	.word	0x0801280c
 8000a6c:	08012828 	.word	0x08012828
 8000a70:	58020800 	.word	0x58020800
 8000a74:	08012838 	.word	0x08012838
 8000a78:	240003f4 	.word	0x240003f4

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09c      	sub	sp, #112	@ 0x70
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a86:	224c      	movs	r2, #76	@ 0x4c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f011 f950 	bl	8011d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2220      	movs	r2, #32
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f011 f94a 	bl	8011d30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f007 fe01 	bl	80086a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000aac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b28      	ldr	r3, [pc, #160]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000abe:	bf00      	nop
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <SystemClock_Config+0xd8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000acc:	d1f8      	bne.n	8000ac0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000adc:	2302      	movs	r3, #2
 8000ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000ae4:	232c      	movs	r3, #44	@ 0x2c
 8000ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000af4:	230c      	movs	r3, #12
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fe07 	bl	8008718 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b10:	f001 f957 	bl	8001dc2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	233f      	movs	r3, #63	@ 0x3f
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b20:	2308      	movs	r3, #8
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b24:	2340      	movs	r3, #64	@ 0x40
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b28:	2340      	movs	r3, #64	@ 0x40
 8000b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b32:	2340      	movs	r3, #64	@ 0x40
 8000b34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2103      	movs	r1, #3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f008 f9c6 	bl	8008ecc <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b46:	f001 f93c 	bl	8001dc2 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3770      	adds	r7, #112	@ 0x70
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	58024800 	.word	0x58024800

08000b58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	22b8      	movs	r2, #184	@ 0xb8
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f011 f8e3 	bl	8011d30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000b6a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b6e:	f04f 0300 	mov.w	r3, #0
 8000b72:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b8a:	23c0      	movs	r3, #192	@ 0xc0
 8000b8c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 fd1d 	bl	80095e4 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000bb0:	f001 f907 	bl	8001dc2 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	37b8      	adds	r7, #184	@ 0xb8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2224      	movs	r2, #36	@ 0x24
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f011 f8ab 	bl	8011d30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bda:	4b41      	ldr	r3, [pc, #260]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bdc:	4a41      	ldr	r2, [pc, #260]	@ (8000ce4 <MX_ADC1_Init+0x128>)
 8000bde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000be0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000be2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bea:	2208      	movs	r2, #8
 8000bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c00:	4b37      	ldr	r3, [pc, #220]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c08:	2203      	movs	r2, #3
 8000c0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c14:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c40:	4827      	ldr	r0, [pc, #156]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c42:	f002 f9b3 	bl	8002fac <HAL_ADC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c4c:	f001 f8b9 	bl	8001dc2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4821      	ldr	r0, [pc, #132]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c5c:	f003 fe76 	bl	800494c <HAL_ADCEx_MultiModeConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c66:	f001 f8ac 	bl	8001dc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6e:	2306      	movs	r3, #6
 8000c70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c72:	2305      	movs	r3, #5
 8000c74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c76:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4814      	ldr	r0, [pc, #80]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000c90:	f002 fec8 	bl	8003a24 <HAL_ADC_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000c9a:	f001 f892 	bl	8001dc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_ADC1_Init+0x130>)
 8000ca0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000cac:	f002 feba 	bl	8003a24 <HAL_ADC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000cb6:	f001 f884 	bl	8001dc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <MX_ADC1_Init+0x134>)
 8000cbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cbe:	2312      	movs	r3, #18
 8000cc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <MX_ADC1_Init+0x124>)
 8000cc8:	f002 feac 	bl	8003a24 <HAL_ADC_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000cd2:	f001 f876 	bl	8001dc2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	@ 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000094 	.word	0x24000094
 8000ce4:	40022000 	.word	0x40022000
 8000ce8:	10c00010 	.word	0x10c00010
 8000cec:	14f00020 	.word	0x14f00020
 8000cf0:	08600004 	.word	0x08600004

08000cf4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2224      	movs	r2, #36	@ 0x24
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f011 f815 	bl	8011d30 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d08:	4a2c      	ldr	r2, [pc, #176]	@ (8000dbc <MX_ADC2_Init+0xc8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d0e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d20:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d22:	2204      	movs	r2, #4
 8000d24:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d52:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d6c:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000d6e:	f002 f91d 	bl	8002fac <HAL_ADC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000d78:	f001 f823 	bl	8001dc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_ADC2_Init+0xcc>)
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d80:	2306      	movs	r3, #6
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d88:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_ADC2_Init+0xc4>)
 8000da2:	f002 fe3f 	bl	8003a24 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000dac:	f001 f809 	bl	8001dc2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	@ 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000104 	.word	0x24000104
 8000dbc:	40022100 	.word	0x40022100
 8000dc0:	25b00200 	.word	0x25b00200

08000dc4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8000ebc <MX_FDCAN1_Init+0xf8>)
 8000dce:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dd0:	4b39      	ldr	r3, [pc, #228]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dd6:	4b38      	ldr	r3, [pc, #224]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000ddc:	4b36      	ldr	r3, [pc, #216]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000de2:	4b35      	ldr	r3, [pc, #212]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000de8:	4b33      	ldr	r3, [pc, #204]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000dee:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000df0:	2206      	movs	r2, #6
 8000df2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000df4:	4b30      	ldr	r3, [pc, #192]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e00:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e02:	2205      	movs	r2, #5
 8000e04:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e06:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e12:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e32:	2220      	movs	r2, #32
 8000e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e62:	2220      	movs	r2, #32
 8000e64:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e6e:	2204      	movs	r2, #4
 8000e70:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e72:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000e74:	f006 f830 	bl	8006ed8 <HAL_FDCAN_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000e7e:	f000 ffa0 	bl	8001dc2 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_FDCAN1_Init+0xf4>)
 8000ea0:	f006 f9f8 	bl	8007294 <HAL_FDCAN_ConfigFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_FDCAN1_Init+0xea>
		Error_Handler();
 8000eaa:	f000 ff8a 	bl	8001dc2 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240001ec 	.word	0x240001ec
 8000ebc:	4000a000 	.word	0x4000a000

08000ec0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb8 <MX_FDCAN2_Init+0xf8>)
 8000eca:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ecc:	4b39      	ldr	r3, [pc, #228]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ed2:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ede:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000eea:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000eec:	2206      	movs	r2, #6
 8000eee:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000ef8:	220a      	movs	r2, #10
 8000efa:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000efe:	2205      	movs	r2, #5
 8000f00:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f02:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f2e:	2210      	movs	r2, #16
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f34:	2204      	movs	r2, #4
 8000f36:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f6e:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f70:	f005 ffb2 	bl	8006ed8 <HAL_FDCAN_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000f7a:	f000 ff22 	bl	8001dc2 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f82:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_FDCAN2_Init+0xf4>)
 8000f9e:	f006 f979 	bl	8007294 <HAL_FDCAN_ConfigFilter>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_FDCAN2_Init+0xec>
		Error_Handler();
 8000fa8:	f000 ff0b 	bl	8001dc2 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2400028c 	.word	0x2400028c
 8000fb8:	4000a400 	.word	0x4000a400

08000fbc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <MX_SDMMC1_SD_Init+0x38>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fd4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x34>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	2400032c 	.word	0x2400032c
 8000ff4:	52007000 	.word	0x52007000

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09c      	sub	sp, #112	@ 0x70
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2234      	movs	r2, #52	@ 0x34
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f010 fe7c 	bl	8011d30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <MX_TIM1_Init+0x168>)
 800103a:	4a4a      	ldr	r2, [pc, #296]	@ (8001164 <MX_TIM1_Init+0x16c>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800103e:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800104a:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <MX_TIM1_Init+0x168>)
 800104c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b43      	ldr	r3, [pc, #268]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001058:	4b41      	ldr	r3, [pc, #260]	@ (8001160 <MX_TIM1_Init+0x168>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800105e:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001064:	483e      	ldr	r0, [pc, #248]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001066:	f00c fb07 	bl	800d678 <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001070:	f000 fea7 	bl	8001dc2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800107e:	4619      	mov	r1, r3
 8001080:	4837      	ldr	r0, [pc, #220]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001082:	f00c fe53 	bl	800dd2c <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800108c:	f000 fe99 	bl	8001dc2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001090:	4833      	ldr	r0, [pc, #204]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001092:	f00c fbcf 	bl	800d834 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800109c:	f000 fe91 	bl	8001dc2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b0:	4619      	mov	r1, r3
 80010b2:	482b      	ldr	r0, [pc, #172]	@ (8001160 <MX_TIM1_Init+0x168>)
 80010b4:	f00d fb80 	bl	800e7b8 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010be:	f000 fe80 	bl	8001dc2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
 80010c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	481e      	ldr	r0, [pc, #120]	@ (8001160 <MX_TIM1_Init+0x168>)
 80010e8:	f00c fd0c 	bl	800db04 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010f2:	f000 fe66 	bl	8001dc2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4818      	ldr	r0, [pc, #96]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001100:	f00c fd00 	bl	800db04 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800110a:	f000 fe5a 	bl	8001dc2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001122:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001126:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001144:	f00d fbd4 	bl	800e8f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800114e:	f000 fe38 	bl	8001dc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <MX_TIM1_Init+0x168>)
 8001154:	f001 f94c 	bl	80023f0 <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3770      	adds	r7, #112	@ 0x70
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	240003a8 	.word	0x240003a8
 8001164:	40010000 	.word	0x40010000

08001168 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800116e:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <MX_TIM16_Init+0x4c>)
 8001170:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001174:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001178:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001182:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001186:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_TIM16_Init+0x48>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_TIM16_Init+0x48>)
 800119c:	f00c fa6c 	bl	800d678 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80011a6:	f000 fe0c 	bl	8001dc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240003f4 	.word	0x240003f4
 80011b4:	40014400 	.word	0x40014400

080011b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <MX_USART1_UART_Init+0x94>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001202:	f00d fc1f 	bl	800ea44 <HAL_UART_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800120c:	f000 fdd9 	bl	8001dc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001214:	f00e fdb9 	bl	800fd8a <HAL_UARTEx_SetTxFifoThreshold>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800121e:	f000 fdd0 	bl	8001dc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001226:	f00e fdee 	bl	800fe06 <HAL_UARTEx_SetRxFifoThreshold>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001230:	f000 fdc7 	bl	8001dc2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_USART1_UART_Init+0x90>)
 8001236:	f00e fd6f 	bl	800fd18 <HAL_UARTEx_DisableFifoMode>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 fdbf 	bl	8001dc2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	24000440 	.word	0x24000440
 800124c:	40011000 	.word	0x40011000

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001256:	4a23      	ldr	r2, [pc, #140]	@ (80012e4 <MX_USART2_UART_Init+0x94>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800128c:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001292:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001298:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 800129a:	f00d fbd3 	bl	800ea44 <HAL_UART_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012a4:	f000 fd8d 	bl	8001dc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ac:	f00e fd6d 	bl	800fd8a <HAL_UARTEx_SetTxFifoThreshold>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012b6:	f000 fd84 	bl	8001dc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012be:	f00e fda2 	bl	800fe06 <HAL_UARTEx_SetRxFifoThreshold>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012c8:	f000 fd7b 	bl	8001dc2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_USART2_UART_Init+0x90>)
 80012ce:	f00e fd23 	bl	800fd18 <HAL_UARTEx_DisableFifoMode>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012d8:	f000 fd73 	bl	8001dc2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	240004d4 	.word	0x240004d4
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <MX_DMA_Init+0x3c>)
 80012f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <MX_DMA_Init+0x3c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_DMA_Init+0x3c>)
 8001300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	200b      	movs	r0, #11
 8001312:	f003 fcd8 	bl	8004cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001316:	200b      	movs	r0, #11
 8001318:	f003 fcef 	bl	8004cfa <HAL_NVIC_EnableIRQ>

}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58024400 	.word	0x58024400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	@ 0x38
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	4a65      	ldr	r2, [pc, #404]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134e:	4b63      	ldr	r3, [pc, #396]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001362:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136c:	4b5b      	ldr	r3, [pc, #364]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	4a56      	ldr	r2, [pc, #344]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138a:	4b54      	ldr	r3, [pc, #336]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b50      	ldr	r3, [pc, #320]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	4a4f      	ldr	r2, [pc, #316]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a8:	4b4c      	ldr	r3, [pc, #304]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013bc:	4a47      	ldr	r2, [pc, #284]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c6:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d4:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013da:	4a40      	ldr	r2, [pc, #256]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e4:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f2:	4b3a      	ldr	r3, [pc, #232]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f8:	4a38      	ldr	r2, [pc, #224]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 80013fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001402:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001410:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001416:	4a31      	ldr	r2, [pc, #196]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <MX_GPIO_Init+0x1b4>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2103      	movs	r1, #3
 8001432:	482b      	ldr	r0, [pc, #172]	@ (80014e0 <MX_GPIO_Init+0x1b8>)
 8001434:	f007 f91c 	bl	8008670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143e:	4829      	ldr	r0, [pc, #164]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001440:	f007 f916 	bl	8008670 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001444:	2303      	movs	r3, #3
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	4821      	ldr	r0, [pc, #132]	@ (80014e0 <MX_GPIO_Init+0x1b8>)
 800145c:	f006 ff48 	bl	80082f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	@ (80014e8 <MX_GPIO_Init+0x1c0>)
 8001476:	f006 ff3b 	bl	80082f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 800147a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <MX_GPIO_Init+0x1bc>)
 8001494:	f006 ff2c 	bl	80082f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4810      	ldr	r0, [pc, #64]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80014ac:	f006 ff20 	bl	80082f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80014c2:	2302      	movs	r3, #2
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <MX_GPIO_Init+0x1c4>)
 80014ce:	f006 ff0f 	bl	80082f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	@ 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020800 	.word	0x58020800
 80014e4:	58021000 	.word	0x58021000
 80014e8:	58021400 	.word	0x58021400
 80014ec:	58021800 	.word	0x58021800

080014f0 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4909      	ldr	r1, [pc, #36]	@ (8001520 <print+0x30>)
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <print+0x34>)
 80014fe:	f010 fbf7 	bl	8011cf0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 8001502:	4808      	ldr	r0, [pc, #32]	@ (8001524 <print+0x34>)
 8001504:	f7fe ff04 	bl	8000310 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	4904      	ldr	r1, [pc, #16]	@ (8001524 <print+0x34>)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <print+0x38>)
 8001514:	f00d fae6 	bl	800eae4 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08012848 	.word	0x08012848
 8001524:	240016b0 	.word	0x240016b0
 8001528:	240004d4 	.word	0x240004d4

0800152c <printValue>:

void printValue(int value) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4909      	ldr	r1, [pc, #36]	@ (800155c <printValue+0x30>)
 8001538:	4809      	ldr	r0, [pc, #36]	@ (8001560 <printValue+0x34>)
 800153a:	f010 fbd9 	bl	8011cf0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 800153e:	4808      	ldr	r0, [pc, #32]	@ (8001560 <printValue+0x34>)
 8001540:	f7fe fee6 	bl	8000310 <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	4904      	ldr	r1, [pc, #16]	@ (8001560 <printValue+0x34>)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <printValue+0x38>)
 8001550:	f00d fac8 	bl	800eae4 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	08012850 	.word	0x08012850
 8001560:	240016b0 	.word	0x240016b0
 8001564:	240004d4 	.word	0x240004d4

08001568 <HAL_ADC_ConvCpltCallback>:
	sprintf(uart_msg, "0x%02X \n\r", value);
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
	HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	s1_aceleracion = buffer_adc[0];
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001578:	601a      	str	r2, [r3, #0]
	s2_aceleracion = buffer_adc[1];
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	461a      	mov	r2, r3
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001582:	601a      	str	r2, [r3, #0]
	s_freno = buffer_adc[2];
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_ADC_ConvCpltCallback+0x34>)
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	461a      	mov	r2, r3
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <HAL_ADC_ConvCpltCallback+0x40>)
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2400166c 	.word	0x2400166c
 80015a0:	24001674 	.word	0x24001674
 80015a4:	24001678 	.word	0x24001678
 80015a8:	24001694 	.word	0x24001694

080015ac <HAL_FDCAN_RxFifo0Callback>:
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80bf 	beq.w	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1) {
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a60      	ldr	r2, [pc, #384]	@ (8001748 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	f040 8086 	bne.w	80016da <HAL_FDCAN_RxFifo0Callback+0x12e>
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80015ce:	4b5f      	ldr	r3, [pc, #380]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 80015d0:	4a5f      	ldr	r2, [pc, #380]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 80015d2:	2140      	movs	r1, #64	@ 0x40
 80015d4:	485f      	ldr	r0, [pc, #380]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 80015d6:	f005 ff59 	bl	800748c <HAL_FDCAN_GetRxMessage>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 80af 	bne.w	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					RxData_Inv) == HAL_OK) {
				switch (RxHeader_Inv.Identifier) {
 80015e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f240 4266 	movw	r2, #1126	@ 0x466
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d03c      	beq.n	8001668 <HAL_FDCAN_RxFifo0Callback+0xbc>
 80015ee:	f240 4266 	movw	r2, #1126	@ 0x466
 80015f2:	4293      	cmp	r3, r2
 80015f4:	f200 80a4 	bhi.w	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
 80015f8:	f240 4262 	movw	r2, #1122	@ 0x462
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_FDCAN_RxFifo0Callback+0x5e>
 8001600:	f240 4263 	movw	r2, #1123	@ 0x463
 8001604:	4293      	cmp	r3, r2
 8001606:	d015      	beq.n	8001634 <HAL_FDCAN_RxFifo0Callback+0x88>
			}

		}

	}
}
 8001608:	e09a      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					state = RxData_Inv[2] >> 0x1;
 800160a:	4b50      	ldr	r3, [pc, #320]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001614:	701a      	strb	r2, [r3, #0]
					printValue(state);
 8001616:	4b50      	ldr	r3, [pc, #320]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff86 	bl	800152c <printValue>
					if (state == 10) {
 8001620:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b0a      	cmp	r3, #10
 8001626:	f040 8084 	bne.w	8001732 <HAL_FDCAN_RxFifo0Callback+0x186>
						error = RxData_Inv[0];
 800162a:	4b48      	ldr	r3, [pc, #288]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001630:	701a      	strb	r2, [r3, #0]
					break;
 8001632:	e07e      	b.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x186>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 8001634:	4b45      	ldr	r3, [pc, #276]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8001636:	79db      	ldrb	r3, [r3, #7]
 8001638:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
							| RxData_Inv[8] << 8 | RxData_Inv[5];
 800163c:	4b43      	ldr	r3, [pc, #268]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800163e:	7a1b      	ldrb	r3, [r3, #8]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	4313      	orrs	r3, r2
 8001644:	4a41      	ldr	r2, [pc, #260]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8001646:	7952      	ldrb	r2, [r2, #5]
 8001648:	4313      	orrs	r3, r2
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 800164a:	4a45      	ldr	r2, [pc, #276]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 800164c:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000) {
 800164e:	4b44      	ldr	r3, [pc, #272]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d06d      	beq.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
						e_machine_rpm |= 0xFFF0000;
 800165a:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b41      	ldr	r3, [pc, #260]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001660:	4313      	orrs	r3, r2
 8001662:	4a3f      	ldr	r2, [pc, #252]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001664:	6013      	str	r3, [r2, #0]
					break;
 8001666:	e066      	b.n	8001736 <HAL_FDCAN_RxFifo0Callback+0x18a>
					if (RxHeader_Inv.DataLength == 6) {
 8001668:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b06      	cmp	r3, #6
 800166e:	d164      	bne.n	800173a <HAL_FDCAN_RxFifo0Callback+0x18e>
						if (config_inv_lectura_v == 0) {
 8001670:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <HAL_FDCAN_RxFifo0Callback+0xd4>
							config_inv_lectura_v = 1;
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]
					break;
 800167e:	e05c      	b.n	800173a <HAL_FDCAN_RxFifo0Callback+0x18e>
						} else if (config_inv_lectura_v == 1) {
 8001680:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d158      	bne.n	800173a <HAL_FDCAN_RxFifo0Callback+0x18e>
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 8001688:	4b30      	ldr	r3, [pc, #192]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800168a:	785b      	ldrb	r3, [r3, #1]
 800168c:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[0];
 800168e:	4a2f      	ldr	r2, [pc, #188]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	4313      	orrs	r3, r2
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 8001694:	4a35      	ldr	r2, [pc, #212]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001696:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 8001698:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800169a:	789b      	ldrb	r3, [r3, #2]
 800169c:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[1];
 800169e:	4a2b      	ldr	r2, [pc, #172]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 80016a0:	7852      	ldrb	r2, [r2, #1]
 80016a2:	4313      	orrs	r3, r2
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 80016a4:	4a32      	ldr	r2, [pc, #200]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016a6:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power >> 2;//Bits 10 to 16
 80016a8:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	109b      	asrs	r3, r3, #2
 80016ae:	4a30      	ldr	r2, [pc, #192]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016b0:	6013      	str	r3, [r2, #0]
							if (inv_dc_bus_power & 0x2000) {//Check for bit signing
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_FDCAN_RxFifo0Callback+0x11e>
								inv_dc_bus_power |= 0xC000;
 80016be:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016c8:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power * 32767; //Scale factor
 80016ca:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4613      	mov	r3, r2
 80016d0:	03db      	lsls	r3, r3, #15
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016d6:	6013      	str	r3, [r2, #0]
					break;
 80016d8:	e02f      	b.n	800173a <HAL_FDCAN_RxFifo0Callback+0x18e>
		} else if (hfdcan->Instance == FDCAN2) {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a25      	ldr	r2, [pc, #148]	@ (8001774 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d12d      	bne.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80016e6:	4a25      	ldr	r2, [pc, #148]	@ (800177c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80016e8:	2140      	movs	r1, #64	@ 0x40
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f005 fece 	bl	800748c <HAL_FDCAN_GetRxMessage>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d124      	bne.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
				switch (RxHeader_Acu.Identifier) {
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d003      	beq.n	8001706 <HAL_FDCAN_RxFifo0Callback+0x15a>
 80016fe:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001702:	d008      	beq.n	8001716 <HAL_FDCAN_RxFifo0Callback+0x16a>
}
 8001704:	e01c      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					if (RxData_Acu[0] == 0) {
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d117      	bne.n	800173e <HAL_FDCAN_RxFifo0Callback+0x192>
						precarga_inv = 1;
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
					break;
 8001714:	e013      	b.n	800173e <HAL_FDCAN_RxFifo0Callback+0x192>
					v_celda_min = (int) (RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800171e:	7852      	ldrb	r2, [r2, #1]
 8001720:	4313      	orrs	r3, r2
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800172c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001730:	e006      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					break;
 8001732:	bf00      	nop
 8001734:	e004      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					break;
 8001736:	bf00      	nop
 8001738:	e002      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					break;
 800173a:	bf00      	nop
 800173c:	e000      	b.n	8001740 <HAL_FDCAN_RxFifo0Callback+0x194>
					break;
 800173e:	bf00      	nop
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	4000a000 	.word	0x4000a000
 800174c:	24000608 	.word	0x24000608
 8001750:	2400058c 	.word	0x2400058c
 8001754:	240001ec 	.word	0x240001ec
 8001758:	240016a2 	.word	0x240016a2
 800175c:	2400180e 	.word	0x2400180e
 8001760:	24001668 	.word	0x24001668
 8001764:	0fff0000 	.word	0x0fff0000
 8001768:	2400008c 	.word	0x2400008c
 800176c:	24001660 	.word	0x24001660
 8001770:	24001664 	.word	0x24001664
 8001774:	4000a400 	.word	0x4000a400
 8001778:	24000618 	.word	0x24000618
 800177c:	240005d8 	.word	0x240005d8
 8001780:	24000088 	.word	0x24000088
 8001784:	24000008 	.word	0x24000008

08001788 <setTorque>:
		sum += lecturas[i];
	}
	return sum / N_LECTURAS;
}

uint16_t setTorque() {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
	// Leemos sensores de posición del pedal de acelaración

	int s1_aceleracion_filtr = LPF_EMA_Update(&s1_filt, s1_aceleracion);
 800178e:	4bb0      	ldr	r3, [pc, #704]	@ (8001a50 <setTorque+0x2c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	48ad      	ldr	r0, [pc, #692]	@ (8001a54 <setTorque+0x2cc>)
 80017a0:	f7fe ffbf 	bl	8000722 <LPF_EMA_Update>
 80017a4:	eef0 7a40 	vmov.f32	s15, s0
 80017a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ac:	ee17 3a90 	vmov	r3, s15
 80017b0:	60fb      	str	r3, [r7, #12]
	int s2_aceleracion_filtr = LPF_EMA_Update(&s2_filt, s2_aceleracion);
 80017b2:	4ba9      	ldr	r3, [pc, #676]	@ (8001a58 <setTorque+0x2d0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	48a6      	ldr	r0, [pc, #664]	@ (8001a5c <setTorque+0x2d4>)
 80017c4:	f7fe ffad 	bl	8000722 <LPF_EMA_Update>
 80017c8:	eef0 7a40 	vmov.f32	s15, s0
 80017cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d0:	ee17 3a90 	vmov	r3, s15
 80017d4:	60bb      	str	r3, [r7, #8]

#if 1
	print("Sensor 1: ");
 80017d6:	48a2      	ldr	r0, [pc, #648]	@ (8001a60 <setTorque+0x2d8>)
 80017d8:	f7ff fe8a 	bl	80014f0 <print>
	printValue(s1_aceleracion_filtr);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fea5 	bl	800152c <printValue>
	print("");
 80017e2:	48a0      	ldr	r0, [pc, #640]	@ (8001a64 <setTorque+0x2dc>)
 80017e4:	f7ff fe84 	bl	80014f0 <print>
	print("Sensor 2: ");
 80017e8:	489f      	ldr	r0, [pc, #636]	@ (8001a68 <setTorque+0x2e0>)
 80017ea:	f7ff fe81 	bl	80014f0 <print>
	printValue(s2_aceleracion_filtr);
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f7ff fe9c 	bl	800152c <printValue>
	print("");
 80017f4:	489b      	ldr	r0, [pc, #620]	@ (8001a64 <setTorque+0x2dc>)
 80017f6:	f7ff fe7b 	bl	80014f0 <print>
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion_filtr - 1886) / (29.4 - 18.86);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f2a3 735e 	subw	r3, r3, #1886	@ 0x75e
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001808:	ed9f 5b85 	vldr	d5, [pc, #532]	@ 8001a20 <setTorque+0x298>
 800180c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001810:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001814:	ee17 2a90 	vmov	r2, s15
 8001818:	4b94      	ldr	r3, [pc, #592]	@ (8001a6c <setTorque+0x2e4>)
 800181a:	601a      	str	r2, [r3, #0]
	if (s1_aceleracion_aux < 0) {
 800181c:	4b93      	ldr	r3, [pc, #588]	@ (8001a6c <setTorque+0x2e4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	da03      	bge.n	800182c <setTorque+0xa4>
		s1_aceleracion_aux = 0;
 8001824:	4b91      	ldr	r3, [pc, #580]	@ (8001a6c <setTorque+0x2e4>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e006      	b.n	800183a <setTorque+0xb2>
	} else if (s1_aceleracion_aux > 100) {
 800182c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a6c <setTorque+0x2e4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b64      	cmp	r3, #100	@ 0x64
 8001832:	dd02      	ble.n	800183a <setTorque+0xb2>
		s1_aceleracion_aux = 100;
 8001834:	4b8d      	ldr	r3, [pc, #564]	@ (8001a6c <setTorque+0x2e4>)
 8001836:	2264      	movs	r2, #100	@ 0x64
 8001838:	601a      	str	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion_filtr - 1780) / (25.27 - 17.8);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001848:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8001a28 <setTorque+0x2a0>
 800184c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001850:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001854:	ee17 2a90 	vmov	r2, s15
 8001858:	4b85      	ldr	r3, [pc, #532]	@ (8001a70 <setTorque+0x2e8>)
 800185a:	601a      	str	r2, [r3, #0]
	if (s2_aceleracion_aux < 0) {
 800185c:	4b84      	ldr	r3, [pc, #528]	@ (8001a70 <setTorque+0x2e8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	da03      	bge.n	800186c <setTorque+0xe4>
		s2_aceleracion_aux = 0;
 8001864:	4b82      	ldr	r3, [pc, #520]	@ (8001a70 <setTorque+0x2e8>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e006      	b.n	800187a <setTorque+0xf2>
	} else if (s2_aceleracion_aux > 100) {
 800186c:	4b80      	ldr	r3, [pc, #512]	@ (8001a70 <setTorque+0x2e8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b64      	cmp	r3, #100	@ 0x64
 8001872:	dd02      	ble.n	800187a <setTorque+0xf2>
		s2_aceleracion_aux = 100;
 8001874:	4b7e      	ldr	r3, [pc, #504]	@ (8001a70 <setTorque+0x2e8>)
 8001876:	2264      	movs	r2, #100	@ 0x64
 8001878:	601a      	str	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 800187a:	487e      	ldr	r0, [pc, #504]	@ (8001a74 <setTorque+0x2ec>)
 800187c:	f7ff fe38 	bl	80014f0 <print>
	printValue(s1_aceleracion_aux);
 8001880:	4b7a      	ldr	r3, [pc, #488]	@ (8001a6c <setTorque+0x2e4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe51 	bl	800152c <printValue>
	print("");
 800188a:	4876      	ldr	r0, [pc, #472]	@ (8001a64 <setTorque+0x2dc>)
 800188c:	f7ff fe30 	bl	80014f0 <print>
	print("Sensor % 2: ");
 8001890:	4879      	ldr	r0, [pc, #484]	@ (8001a78 <setTorque+0x2f0>)
 8001892:	f7ff fe2d 	bl	80014f0 <print>
	printValue(s2_aceleracion_aux);
 8001896:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <setTorque+0x2e8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fe46 	bl	800152c <printValue>
	print("");
 80018a0:	4870      	ldr	r0, [pc, #448]	@ (8001a64 <setTorque+0x2dc>)
 80018a2:	f7ff fe25 	bl	80014f0 <print>
#endif

	// Torque enviado es la media de los dos sensores
	torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 80018a6:	4b71      	ldr	r3, [pc, #452]	@ (8001a6c <setTorque+0x2e4>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b71      	ldr	r3, [pc, #452]	@ (8001a70 <setTorque+0x2e8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da00      	bge.n	80018b6 <setTorque+0x12e>
 80018b4:	3301      	adds	r3, #1
 80018b6:	105b      	asrs	r3, r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <setTorque+0x2f4>)
 80018bc:	801a      	strh	r2, [r3, #0]

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10) {
 80018be:	4b6f      	ldr	r3, [pc, #444]	@ (8001a7c <setTorque+0x2f4>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d803      	bhi.n	80018ce <setTorque+0x146>
		torque_total = 0;
 80018c6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a7c <setTorque+0x2f4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	801a      	strh	r2, [r3, #0]
 80018cc:	e006      	b.n	80018dc <setTorque+0x154>
	} else if (torque_total > 100) {
 80018ce:	4b6b      	ldr	r3, [pc, #428]	@ (8001a7c <setTorque+0x2f4>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d902      	bls.n	80018dc <setTorque+0x154>
		torque_total = 100;
 80018d6:	4b69      	ldr	r3, [pc, #420]	@ (8001a7c <setTorque+0x2f4>)
 80018d8:	2264      	movs	r2, #100	@ 0x64
 80018da:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25) {
 80018dc:	4b68      	ldr	r3, [pc, #416]	@ (8001a80 <setTorque+0x2f8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80018e4:	4293      	cmp	r3, r2
 80018e6:	dd0a      	ble.n	80018fe <setTorque+0x176>
 80018e8:	4b64      	ldr	r3, [pc, #400]	@ (8001a7c <setTorque+0x2f4>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b19      	cmp	r3, #25
 80018ee:	d906      	bls.n	80018fe <setTorque+0x176>
		print("EV_2_3");
 80018f0:	4864      	ldr	r0, [pc, #400]	@ (8001a84 <setTorque+0x2fc>)
 80018f2:	f7ff fdfd 	bl	80014f0 <print>
		flag_EV_2_3 = 1;
 80018f6:	4b64      	ldr	r3, [pc, #400]	@ (8001a88 <setTorque+0x300>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e00c      	b.n	8001918 <setTorque+0x190>
	} else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5) {
 80018fe:	4b60      	ldr	r3, [pc, #384]	@ (8001a80 <setTorque+0x2f8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001906:	4293      	cmp	r3, r2
 8001908:	dc06      	bgt.n	8001918 <setTorque+0x190>
 800190a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a7c <setTorque+0x2f4>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b04      	cmp	r3, #4
 8001910:	d802      	bhi.n	8001918 <setTorque+0x190>
		flag_EV_2_3 = 0;
 8001912:	4b5d      	ldr	r3, [pc, #372]	@ (8001a88 <setTorque+0x300>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10) {
 8001918:	4b54      	ldr	r3, [pc, #336]	@ (8001a6c <setTorque+0x2e4>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b54      	ldr	r3, [pc, #336]	@ (8001a70 <setTorque+0x2e8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	bfb8      	it	lt
 8001926:	425b      	neglt	r3, r3
 8001928:	2b0a      	cmp	r3, #10
 800192a:	dd0e      	ble.n	800194a <setTorque+0x1c2>

		if (HAL_GetTick() - last_time_t_11_8 > 100) {
 800192c:	f001 f822 	bl	8002974 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	4b56      	ldr	r3, [pc, #344]	@ (8001a8c <setTorque+0x304>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b64      	cmp	r3, #100	@ 0x64
 800193a:	d90e      	bls.n	800195a <setTorque+0x1d2>
			print("T11.8.9");
 800193c:	4854      	ldr	r0, [pc, #336]	@ (8001a90 <setTorque+0x308>)
 800193e:	f7ff fdd7 	bl	80014f0 <print>
			flag_T11_8_9 = 1;
 8001942:	4b54      	ldr	r3, [pc, #336]	@ (8001a94 <setTorque+0x30c>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e007      	b.n	800195a <setTorque+0x1d2>
		}

	} else {
		last_time_t_11_8 = HAL_GetTick();
 800194a:	f001 f813 	bl	8002974 <HAL_GetTick>
 800194e:	4603      	mov	r3, r0
 8001950:	4a4e      	ldr	r2, [pc, #312]	@ (8001a8c <setTorque+0x304>)
 8001952:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001954:	4b4f      	ldr	r3, [pc, #316]	@ (8001a94 <setTorque+0x30c>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9) {
 800195a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a88 <setTorque+0x300>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d103      	bne.n	800196a <setTorque+0x1e2>
 8001962:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <setTorque+0x30c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <setTorque+0x1e8>
		torque_total = 0;
 800196a:	4b44      	ldr	r3, [pc, #272]	@ (8001a7c <setTorque+0x2f4>)
 800196c:	2200      	movs	r2, #0
 800196e:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500) {
 8001970:	4b49      	ldr	r3, [pc, #292]	@ (8001a98 <setTorque+0x310>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001a9c <setTorque+0x314>
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d53a      	bpl.n	80019fa <setTorque+0x272>
		if (v_celda_min > 2800) {
 8001984:	4b44      	ldr	r3, [pc, #272]	@ (8001a98 <setTorque+0x310>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001aa0 <setTorque+0x318>
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	dd1f      	ble.n	80019d8 <setTorque+0x250>
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 8001998:	4b38      	ldr	r3, [pc, #224]	@ (8001a7c <setTorque+0x2f4>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <setTorque+0x310>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ae:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001a30 <setTorque+0x2a8>
 80019b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019b6:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001a38 <setTorque+0x2b0>
 80019ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 80019be:	ee26 6b07 	vmul.f64	d6, d6, d7
					/ 1000;
 80019c2:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8001a40 <setTorque+0x2b8>
 80019c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 80019ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019ce:	ee17 2a90 	vmov	r2, s15
 80019d2:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <setTorque+0x31c>)
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e015      	b.n	8001a04 <setTorque+0x27c>
		} else {
			torque_limitado = torque_total * 0.05;
 80019d8:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <setTorque+0x2f4>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019e4:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8001a48 <setTorque+0x2c0>
 80019e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019f0:	ee17 2a90 	vmov	r2, s15
 80019f4:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <setTorque+0x31c>)
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e004      	b.n	8001a04 <setTorque+0x27c>
		}
	} else {
		torque_limitado = torque_total;
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <setTorque+0x2f4>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <setTorque+0x31c>)
 8001a02:	601a      	str	r2, [r3, #0]
printValue(torque_limitado);
#endif

	//torque_total = torque_total * 240 / 1000;
	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <setTorque+0x2f4>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001a12:	88bb      	ldrh	r3, [r7, #4]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	f3af 8000 	nop.w
 8001a20:	e147ae14 	.word	0xe147ae14
 8001a24:	4025147a 	.word	0x4025147a
 8001a28:	ae147ae0 	.word	0xae147ae0
 8001a2c:	401de147 	.word	0x401de147
 8001a30:	a1cac083 	.word	0xa1cac083
 8001a34:	3ff5b645 	.word	0x3ff5b645
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	40ad4c00 	.word	0x40ad4c00
 8001a40:	00000000 	.word	0x00000000
 8001a44:	408f4000 	.word	0x408f4000
 8001a48:	9999999a 	.word	0x9999999a
 8001a4c:	3fa99999 	.word	0x3fa99999
 8001a50:	24001674 	.word	0x24001674
 8001a54:	24001684 	.word	0x24001684
 8001a58:	24001678 	.word	0x24001678
 8001a5c:	2400168c 	.word	0x2400168c
 8001a60:	08012864 	.word	0x08012864
 8001a64:	08012870 	.word	0x08012870
 8001a68:	08012874 	.word	0x08012874
 8001a6c:	2400167c 	.word	0x2400167c
 8001a70:	24001680 	.word	0x24001680
 8001a74:	08012880 	.word	0x08012880
 8001a78:	08012890 	.word	0x08012890
 8001a7c:	24001698 	.word	0x24001698
 8001a80:	24001694 	.word	0x24001694
 8001a84:	080128a0 	.word	0x080128a0
 8001a88:	240016a8 	.word	0x240016a8
 8001a8c:	240016a4 	.word	0x240016a4
 8001a90:	080128a8 	.word	0x080128a8
 8001a94:	240016ac 	.word	0x240016ac
 8001a98:	24000008 	.word	0x24000008
 8001a9c:	455ac000 	.word	0x455ac000
 8001aa0:	452f0000 	.word	0x452f0000
 8001aa4:	2400169c 	.word	0x2400169c

08001aa8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a6f      	ldr	r2, [pc, #444]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	f040 80d6 	bne.w	8001c66 <HAL_TIM_PeriodElapsedCallback+0x1be>
#if !CALIBRATION

		// ---------- CONTROL DEL INVERSOR ----------

		//Estado TORQUE
if(flag_react == 0){//Si no hay que reactivar el coche manda siempre torque
 8001aba:	4b6e      	ldr	r3, [pc, #440]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d117      	bne.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x4a>

		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6d      	ldr	r2, [pc, #436]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ac8:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8001aca:	4b6c      	ldr	r3, [pc, #432]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001acc:	2203      	movs	r2, #3
 8001ace:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8001ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8001adc:	4b68      	ldr	r3, [pc, #416]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x6;
 8001ae2:	4b67      	ldr	r3, [pc, #412]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001ae4:	2206      	movs	r2, #6
 8001ae6:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ae8:	4a65      	ldr	r2, [pc, #404]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001aea:	4964      	ldr	r1, [pc, #400]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001aec:	4865      	ldr	r0, [pc, #404]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001aee:	f005 fc72 	bl	80073d6 <HAL_FDCAN_AddMessageToTxFifoQ>


}


		switch (state) {
 8001af2:	4b65      	ldr	r3, [pc, #404]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3b03      	subs	r3, #3
 8001af8:	2b07      	cmp	r3, #7
 8001afa:	f200 80b4 	bhi.w	8001c66 <HAL_TIM_PeriodElapsedCallback+0x1be>
 8001afe:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b25 	.word	0x08001b25
 8001b08:	08001b65 	.word	0x08001b65
 8001b0c:	08001c67 	.word	0x08001c67
 8001b10:	08001bad 	.word	0x08001bad
 8001b14:	08001c67 	.word	0x08001c67
 8001b18:	08001c67 	.word	0x08001c67
 8001b1c:	08001c67 	.word	0x08001c67
 8001b20:	08001c0d 	.word	0x08001c0d
		case 3:
#if DEBUG
			print("state: standby");
 8001b24:	4859      	ldr	r0, [pc, #356]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b26:	f7ff fce3 	bl	80014f0 <print>
#endif
			//Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b2a:	4b53      	ldr	r3, [pc, #332]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a53      	ldr	r2, [pc, #332]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b30:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001b32:	4b52      	ldr	r3, [pc, #328]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b34:	2203      	movs	r2, #3
 8001b36:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001b38:	4b50      	ldr	r3, [pc, #320]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001b3e:	4b50      	ldr	r3, [pc, #320]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b44:	4b4e      	ldr	r3, [pc, #312]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b50:	4a4b      	ldr	r2, [pc, #300]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b52:	494a      	ldr	r1, [pc, #296]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b54:	484b      	ldr	r0, [pc, #300]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001b56:	f005 fc3e 	bl	80073d6 <HAL_FDCAN_AddMessageToTxFifoQ>

			while (state != 4) {
 8001b5a:	bf00      	nop
 8001b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d1fb      	bne.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0xb4>


		case 4:

#if DEBUG
	print("state: ready");
 8001b64:	484a      	ldr	r0, [pc, #296]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001b66:	f7ff fcc3 	bl	80014f0 <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001b6a:	4b44      	ldr	r3, [pc, #272]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b6c:	f240 3262 	movw	r2, #866	@ 0x362
 8001b70:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b72:	4b42      	ldr	r3, [pc, #264]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b74:	2204      	movs	r2, #4
 8001b76:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001b78:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001b7e:	4b40      	ldr	r3, [pc, #256]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b84:	4b3e      	ldr	r3, [pc, #248]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001b8a:	4b42      	ldr	r3, [pc, #264]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b92:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001b94:	4b3a      	ldr	r3, [pc, #232]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b9a:	4a39      	ldr	r2, [pc, #228]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b9c:	4937      	ldr	r1, [pc, #220]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b9e:	4839      	ldr	r0, [pc, #228]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001ba0:	f005 fc19 	bl	80073d6 <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; //Reactivado
 8001ba4:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]


			break;
 8001baa:	e05c      	b.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x1be>

			//Request TORQUE inversor

			//flag_react = 1;

			real_torque = setTorque();
 8001bac:	f7ff fdec 	bl	8001788 <setTorque>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b37      	ldr	r3, [pc, #220]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001bb6:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001bb8:	4b30      	ldr	r3, [pc, #192]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001bba:	f240 3262 	movw	r2, #866	@ 0x362
 8001bbe:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	60da      	str	r2, [r3, #12]

			//real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001bc6:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001bce:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001bd0:	4b30      	ldr	r3, [pc, #192]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001bdc:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001bde:	4b28      	ldr	r3, [pc, #160]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001be4:	4b26      	ldr	r3, [pc, #152]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001bea:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001bf0:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001bf8:	70da      	strb	r2, [r3, #3]
			//TxData_Inv[2] = 0xFE;
			//TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv) ;
 8001bfa:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001bfc:	491f      	ldr	r1, [pc, #124]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001bfe:	4821      	ldr	r0, [pc, #132]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001c00:	f005 fbe9 	bl	80073d6 <HAL_FDCAN_AddMessageToTxFifoQ>
 			CAN_bus_off_check_reset(&hfdcan1);
 8001c04:	481f      	ldr	r0, [pc, #124]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001c06:	f000 f8c3 	bl	8001d90 <CAN_bus_off_check_reset>

			break;
 8001c0a:	e02c      	b.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x1be>

		case 10:
			print("state: soft fault");
 8001c0c:	4824      	ldr	r0, [pc, #144]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c0e:	f7ff fc6f 	bl	80014f0 <print>
			printValue(error);
 8001c12:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fc88 	bl	800152c <printValue>
			case 3:
				print("Error: Overtemperature");
				break;
			}*/

			if (inv_dc_bus_voltage < 60) {
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c22:	dc1f      	bgt.n	8001c64 <HAL_TIM_PeriodElapsedCallback+0x1bc>

				//Estado STAND BY inversor
				while (state != 3) {
 8001c24:	e01a      	b.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x1b4>

					flag_react = 1;
 8001c26:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]

					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c32:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c36:	2203      	movs	r2, #3
 8001c38:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]

					TxData_Inv[0] = 0x0;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x3;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c4e:	2203      	movs	r2, #3
 8001c50:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
 8001c52:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001c54:	4909      	ldr	r1, [pc, #36]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c56:	480b      	ldr	r0, [pc, #44]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001c58:	f005 fbbd 	bl	80073d6 <HAL_FDCAN_AddMessageToTxFifoQ>
				while (state != 3) {
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d1e0      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x17e>
							TxData_Inv);
				}
			}

			break;
 8001c64:	bf00      	nop
		}
#endif
	}
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	240003f4 	.word	0x240003f4
 8001c74:	2400180f 	.word	0x2400180f
 8001c78:	24000000 	.word	0x24000000
 8001c7c:	24000568 	.word	0x24000568
 8001c80:	24000600 	.word	0x24000600
 8001c84:	240001ec 	.word	0x240001ec
 8001c88:	240016a2 	.word	0x240016a2
 8001c8c:	080128b0 	.word	0x080128b0
 8001c90:	080127c4 	.word	0x080127c4
 8001c94:	240016a0 	.word	0x240016a0
 8001c98:	2400169a 	.word	0x2400169a
 8001c9c:	2400169b 	.word	0x2400169b
 8001ca0:	080128c0 	.word	0x080128c0
 8001ca4:	2400180e 	.word	0x2400180e
 8001ca8:	24001660 	.word	0x24001660

08001cac <SDCard_start>:

void SDCard_start(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
	FATFS *FS_Ptr;
	DWORD FreeClusters;
	uint32_t TotalSize, FreeSpace;
	do {
		//------------------[ Mount The SD Card ]--------------------
		FR_Status = f_mount(&FatFs, SDPath, 1);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	492e      	ldr	r1, [pc, #184]	@ (8001d70 <SDCard_start+0xc4>)
 8001cb6:	482f      	ldr	r0, [pc, #188]	@ (8001d74 <SDCard_start+0xc8>)
 8001cb8:	f00f fec2 	bl	8011a40 <f_mount>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	75fb      	strb	r3, [r7, #23]
		if (FR_Status != FR_OK) {
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <SDCard_start+0x2e>
			sprintf(TxBuffer, "Error! Error Code: (%i)\r\n", FR_Status);
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	492b      	ldr	r1, [pc, #172]	@ (8001d78 <SDCard_start+0xcc>)
 8001ccc:	482b      	ldr	r0, [pc, #172]	@ (8001d7c <SDCard_start+0xd0>)
 8001cce:	f010 f80f 	bl	8011cf0 <siprintf>
			print(TxBuffer);
 8001cd2:	482a      	ldr	r0, [pc, #168]	@ (8001d7c <SDCard_start+0xd0>)
 8001cd4:	f7ff fc0c 	bl	80014f0 <print>
			break;
 8001cd8:	e045      	b.n	8001d66 <SDCard_start+0xba>
		}
		sprintf(TxBuffer, "SD montada correctamente \r\n\n");
 8001cda:	4929      	ldr	r1, [pc, #164]	@ (8001d80 <SDCard_start+0xd4>)
 8001cdc:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <SDCard_start+0xd0>)
 8001cde:	f010 f807 	bl	8011cf0 <siprintf>
		print(TxBuffer);
 8001ce2:	4826      	ldr	r0, [pc, #152]	@ (8001d7c <SDCard_start+0xd0>)
 8001ce4:	f7ff fc04 	bl	80014f0 <print>
		//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8001ce8:	f107 0208 	add.w	r2, r7, #8
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4824      	ldr	r0, [pc, #144]	@ (8001d84 <SDCard_start+0xd8>)
 8001cf2:	f00f feeb 	bl	8011acc <f_getfree>
		TotalSize = (uint32_t) ((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	3b02      	subs	r3, #2
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	8952      	ldrh	r2, [r2, #10]
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d0c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d18:	ee17 3a90 	vmov	r3, s15
 8001d1c:	613b      	str	r3, [r7, #16]
		FreeSpace = (uint32_t) (FreeClusters * FS_Ptr->csize * 0.5);
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	895b      	ldrh	r3, [r3, #10]
 8001d22:	461a      	mov	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d32:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d3e:	ee17 3a90 	vmov	r3, s15
 8001d42:	60fb      	str	r3, [r7, #12]
		sprintf(TxBuffer, "Espacio total: %lu Bytes\r\n", TotalSize);
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4910      	ldr	r1, [pc, #64]	@ (8001d88 <SDCard_start+0xdc>)
 8001d48:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <SDCard_start+0xd0>)
 8001d4a:	f00f ffd1 	bl	8011cf0 <siprintf>
		print(TxBuffer);
 8001d4e:	480b      	ldr	r0, [pc, #44]	@ (8001d7c <SDCard_start+0xd0>)
 8001d50:	f7ff fbce 	bl	80014f0 <print>
		sprintf(TxBuffer, "Espacio libre: %lu Bytes\r\n\n", FreeSpace);
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	490d      	ldr	r1, [pc, #52]	@ (8001d8c <SDCard_start+0xe0>)
 8001d58:	4808      	ldr	r0, [pc, #32]	@ (8001d7c <SDCard_start+0xd0>)
 8001d5a:	f00f ffc9 	bl	8011cf0 <siprintf>
		print(TxBuffer);
 8001d5e:	4807      	ldr	r0, [pc, #28]	@ (8001d7c <SDCard_start+0xd0>)
 8001d60:	f7ff fbc6 	bl	80014f0 <print>
	} while (0);

}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	24001824 	.word	0x24001824
 8001d74:	24000620 	.word	0x24000620
 8001d78:	080128d4 	.word	0x080128d4
 8001d7c:	24001714 	.word	0x24001714
 8001d80:	080128f0 	.word	0x080128f0
 8001d84:	08012870 	.word	0x08012870
 8001d88:	08012910 	.word	0x08012910
 8001d8c:	0801292c 	.word	0x0801292c

08001d90 <CAN_bus_off_check_reset>:

void CAN_bus_off_check_reset(FDCAN_HandleTypeDef *hfdcan){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	@ 0x38
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	FDCAN_ProtocolStatusTypeDef protocolStatus;
	HAL_FDCAN_GetProtocolStatus(hfdcan, &protocolStatus);
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f005 fce0 	bl	8007764 <HAL_FDCAN_GetProtocolStatus>
	if(protocolStatus.BusOff){
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <CAN_bus_off_check_reset+0x2a>
		CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	619a      	str	r2, [r3, #24]
	}
}
 8001dba:	bf00      	nop
 8001dbc:	3738      	adds	r7, #56	@ 0x38
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc6:	b672      	cpsid	i
}
 8001dc8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dca:	bf00      	nop
 8001dcc:	e7fd      	b.n	8001dca <Error_Handler+0x8>
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <HAL_MspInit+0x30>)
 8001dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ddc:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_MspInit+0x30>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_MspInit+0x30>)
 8001de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	58024400 	.word	0x58024400

08001e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b090      	sub	sp, #64	@ 0x40
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a90      	ldr	r2, [pc, #576]	@ (8002064 <HAL_ADC_MspInit+0x260>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	f040 80a3 	bne.w	8001f6e <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e28:	4b8f      	ldr	r3, [pc, #572]	@ (8002068 <HAL_ADC_MspInit+0x264>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a8e      	ldr	r2, [pc, #568]	@ (8002068 <HAL_ADC_MspInit+0x264>)
 8001e30:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e32:	4b8d      	ldr	r3, [pc, #564]	@ (8002068 <HAL_ADC_MspInit+0x264>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10e      	bne.n	8001e58 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e40:	4a8a      	ldr	r2, [pc, #552]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e42:	f043 0320 	orr.w	r3, r3, #32
 8001e46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e4a:	4b88      	ldr	r3, [pc, #544]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e58:	4b84      	ldr	r3, [pc, #528]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5e:	4a83      	ldr	r2, [pc, #524]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e68:	4b80      	ldr	r3, [pc, #512]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	4b7d      	ldr	r3, [pc, #500]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7c:	4a7b      	ldr	r2, [pc, #492]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e86:	4b79      	ldr	r3, [pc, #484]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e94:	4b75      	ldr	r3, [pc, #468]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9a:	4a74      	ldr	r2, [pc, #464]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea4:	4b71      	ldr	r3, [pc, #452]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001eb2:	2330      	movs	r3, #48	@ 0x30
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	486a      	ldr	r0, [pc, #424]	@ (8002070 <HAL_ADC_MspInit+0x26c>)
 8001ec6:	f006 fa13 	bl	80082f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eda:	4619      	mov	r1, r3
 8001edc:	4865      	ldr	r0, [pc, #404]	@ (8002074 <HAL_ADC_MspInit+0x270>)
 8001ede:	f006 fa07 	bl	80082f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001ee2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4860      	ldr	r0, [pc, #384]	@ (8002078 <HAL_ADC_MspInit+0x274>)
 8001ef8:	f006 f9fa 	bl	80082f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001efc:	4b5f      	ldr	r3, [pc, #380]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001efe:	4a60      	ldr	r2, [pc, #384]	@ (8002080 <HAL_ADC_MspInit+0x27c>)
 8001f00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f02:	4b5e      	ldr	r3, [pc, #376]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f04:	2209      	movs	r2, #9
 8001f06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f08:	4b5c      	ldr	r3, [pc, #368]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f14:	4b59      	ldr	r3, [pc, #356]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f1c:	4b57      	ldr	r3, [pc, #348]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f24:	4b55      	ldr	r3, [pc, #340]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f2c:	4b53      	ldr	r3, [pc, #332]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f34:	4b51      	ldr	r3, [pc, #324]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f3a:	4b50      	ldr	r3, [pc, #320]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f40:	484e      	ldr	r0, [pc, #312]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f42:	f002 fef5 	bl	8004d30 <HAL_DMA_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001f4c:	f7ff ff39 	bl	8001dc2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a4a      	ldr	r2, [pc, #296]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f56:	4a49      	ldr	r2, [pc, #292]	@ (800207c <HAL_ADC_MspInit+0x278>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2012      	movs	r0, #18
 8001f62:	f002 feb0 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f66:	2012      	movs	r0, #18
 8001f68:	f002 fec7 	bl	8004cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f6c:	e076      	b.n	800205c <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a44      	ldr	r2, [pc, #272]	@ (8002084 <HAL_ADC_MspInit+0x280>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d171      	bne.n	800205c <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f78:	4b3b      	ldr	r3, [pc, #236]	@ (8002068 <HAL_ADC_MspInit+0x264>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002068 <HAL_ADC_MspInit+0x264>)
 8001f80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f82:	4b39      	ldr	r3, [pc, #228]	@ (8002068 <HAL_ADC_MspInit+0x264>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d10e      	bne.n	8001fa8 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f8a:	4b38      	ldr	r3, [pc, #224]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f90:	4a36      	ldr	r2, [pc, #216]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001f92:	f043 0320 	orr.w	r3, r3, #32
 8001f96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f9a:	4b34      	ldr	r3, [pc, #208]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fae:	4a2f      	ldr	r2, [pc, #188]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b29      	ldr	r3, [pc, #164]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fcc:	4a27      	ldr	r2, [pc, #156]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd6:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe4:	4b21      	ldr	r3, [pc, #132]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fea:	4a20      	ldr	r2, [pc, #128]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001fec:	f043 0320 	orr.w	r3, r3, #32
 8001ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_ADC_MspInit+0x268>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8002002:	2320      	movs	r3, #32
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002006:	2303      	movs	r3, #3
 8002008:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002012:	4619      	mov	r1, r3
 8002014:	4816      	ldr	r0, [pc, #88]	@ (8002070 <HAL_ADC_MspInit+0x26c>)
 8002016:	f006 f96b 	bl	80082f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 800201a:	2301      	movs	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201e:	2303      	movs	r3, #3
 8002020:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800202a:	4619      	mov	r1, r3
 800202c:	4811      	ldr	r0, [pc, #68]	@ (8002074 <HAL_ADC_MspInit+0x270>)
 800202e:	f006 f95f 	bl	80082f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 8002032:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002038:	2303      	movs	r3, #3
 800203a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002040:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002044:	4619      	mov	r1, r3
 8002046:	480c      	ldr	r0, [pc, #48]	@ (8002078 <HAL_ADC_MspInit+0x274>)
 8002048:	f006 f952 	bl	80082f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2012      	movs	r0, #18
 8002052:	f002 fe38 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002056:	2012      	movs	r0, #18
 8002058:	f002 fe4f 	bl	8004cfa <HAL_NVIC_EnableIRQ>
}
 800205c:	bf00      	nop
 800205e:	3740      	adds	r7, #64	@ 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40022000 	.word	0x40022000
 8002068:	24001810 	.word	0x24001810
 800206c:	58024400 	.word	0x58024400
 8002070:	58020800 	.word	0x58020800
 8002074:	58020400 	.word	0x58020400
 8002078:	58021400 	.word	0x58021400
 800207c:	24000174 	.word	0x24000174
 8002080:	40020010 	.word	0x40020010
 8002084:	40022100 	.word	0x40022100

08002088 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0ba      	sub	sp, #232	@ 0xe8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a0:	f107 0318 	add.w	r3, r7, #24
 80020a4:	22b8      	movs	r2, #184	@ 0xb8
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00f fe41 	bl	8011d30 <memset>
  if(hfdcan->Instance==FDCAN1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a5e      	ldr	r2, [pc, #376]	@ (800222c <HAL_FDCAN_MspInit+0x1a4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d157      	bne.n	8002168 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ca:	f107 0318 	add.w	r3, r7, #24
 80020ce:	4618      	mov	r0, r3
 80020d0:	f007 fa88 	bl	80095e4 <HAL_RCCEx_PeriphCLKConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80020da:	f7ff fe72 	bl	8001dc2 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020de:	4b54      	ldr	r3, [pc, #336]	@ (8002230 <HAL_FDCAN_MspInit+0x1a8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_FDCAN_MspInit+0x1a8>)
 80020e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80020e8:	4b51      	ldr	r3, [pc, #324]	@ (8002230 <HAL_FDCAN_MspInit+0x1a8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10e      	bne.n	800210e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80020f0:	4b50      	ldr	r3, [pc, #320]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 80020f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80020f6:	4a4f      	ldr	r2, [pc, #316]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002100:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 8002102:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800210e:	4b49      	ldr	r3, [pc, #292]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002114:	4a47      	ldr	r2, [pc, #284]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800211e:	4b45      	ldr	r3, [pc, #276]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800212c:	2303      	movs	r3, #3
 800212e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002144:	2309      	movs	r3, #9
 8002146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800214e:	4619      	mov	r1, r3
 8002150:	4839      	ldr	r0, [pc, #228]	@ (8002238 <HAL_FDCAN_MspInit+0x1b0>)
 8002152:	f006 f8cd 	bl	80082f0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2101      	movs	r1, #1
 800215a:	2013      	movs	r0, #19
 800215c:	f002 fdb3 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002160:	2013      	movs	r0, #19
 8002162:	f002 fdca 	bl	8004cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002166:	e05c      	b.n	8002222 <HAL_FDCAN_MspInit+0x19a>
  else if(hfdcan->Instance==FDCAN2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a33      	ldr	r2, [pc, #204]	@ (800223c <HAL_FDCAN_MspInit+0x1b4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d157      	bne.n	8002222 <HAL_FDCAN_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002172:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002184:	f107 0318 	add.w	r3, r7, #24
 8002188:	4618      	mov	r0, r3
 800218a:	f007 fa2b 	bl	80095e4 <HAL_RCCEx_PeriphCLKConfig>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002194:	f7ff fe15 	bl	8001dc2 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002198:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <HAL_FDCAN_MspInit+0x1a8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	4a24      	ldr	r2, [pc, #144]	@ (8002230 <HAL_FDCAN_MspInit+0x1a8>)
 80021a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021a2:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_FDCAN_MspInit+0x1a8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10e      	bne.n	80021c8 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 80021ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021b0:	4a20      	ldr	r2, [pc, #128]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 80021bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ce:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <HAL_FDCAN_MspInit+0x1ac>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80021e6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80021ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002200:	2309      	movs	r3, #9
 8002202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	@ (8002240 <HAL_FDCAN_MspInit+0x1b8>)
 800220e:	f006 f86f 	bl	80082f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2102      	movs	r1, #2
 8002216:	2014      	movs	r0, #20
 8002218:	f002 fd55 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800221c:	2014      	movs	r0, #20
 800221e:	f002 fd6c 	bl	8004cfa <HAL_NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	37e8      	adds	r7, #232	@ 0xe8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	4000a000 	.word	0x4000a000
 8002230:	24001814 	.word	0x24001814
 8002234:	58024400 	.word	0x58024400
 8002238:	58020c00 	.word	0x58020c00
 800223c:	4000a400 	.word	0x4000a400
 8002240:	58020400 	.word	0x58020400

08002244 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	@ 0x30
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3e      	ldr	r2, [pc, #248]	@ (800235c <HAL_SD_MspInit+0x118>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d175      	bne.n	8002352 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002266:	4b3e      	ldr	r3, [pc, #248]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 8002268:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800226c:	4a3c      	ldr	r2, [pc, #240]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002272:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002276:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 8002278:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800227c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002284:	4b36      	ldr	r3, [pc, #216]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800228a:	4a35      	ldr	r2, [pc, #212]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002294:	4b32      	ldr	r3, [pc, #200]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 8002296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c6:	4a26      	ldr	r2, [pc, #152]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022d0:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_SD_MspInit+0x11c>)
 80022d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80022de:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80022e2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022f0:	230c      	movs	r3, #12
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4619      	mov	r1, r3
 80022fa:	481a      	ldr	r0, [pc, #104]	@ (8002364 <HAL_SD_MspInit+0x120>)
 80022fc:	f005 fff8 	bl	80082f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002300:	2304      	movs	r3, #4
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002310:	230c      	movs	r3, #12
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4813      	ldr	r0, [pc, #76]	@ (8002368 <HAL_SD_MspInit+0x124>)
 800231c:	f005 ffe8 	bl	80082f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8002332:	2307      	movs	r3, #7
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	480b      	ldr	r0, [pc, #44]	@ (800236c <HAL_SD_MspInit+0x128>)
 800233e:	f005 ffd7 	bl	80082f0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2031      	movs	r0, #49	@ 0x31
 8002348:	f002 fcbd 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800234c:	2031      	movs	r0, #49	@ 0x31
 800234e:	f002 fcd4 	bl	8004cfa <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	@ 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	52007000 	.word	0x52007000
 8002360:	58024400 	.word	0x58024400
 8002364:	58020800 	.word	0x58020800
 8002368:	58020c00 	.word	0x58020c00
 800236c:	58020400 	.word	0x58020400

08002370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <HAL_TIM_Base_MspInit+0x74>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10f      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002382:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <HAL_TIM_Base_MspInit+0x78>)
 8002384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002388:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <HAL_TIM_Base_MspInit+0x78>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_TIM_Base_MspInit+0x78>)
 8002394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80023a0:	e01b      	b.n	80023da <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a11      	ldr	r2, [pc, #68]	@ (80023ec <HAL_TIM_Base_MspInit+0x7c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d116      	bne.n	80023da <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023ac:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_TIM_Base_MspInit+0x78>)
 80023ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023b2:	4a0d      	ldr	r2, [pc, #52]	@ (80023e8 <HAL_TIM_Base_MspInit+0x78>)
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_TIM_Base_MspInit+0x78>)
 80023be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2075      	movs	r0, #117	@ 0x75
 80023d0:	f002 fc79 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80023d4:	2075      	movs	r0, #117	@ 0x75
 80023d6:	f002 fc90 	bl	8004cfa <HAL_NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40010000 	.word	0x40010000
 80023e8:	58024400 	.word	0x58024400
 80023ec:	40014400 	.word	0x40014400

080023f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a13      	ldr	r2, [pc, #76]	@ (800245c <HAL_TIM_MspPostInit+0x6c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d11f      	bne.n	8002452 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002412:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <HAL_TIM_MspPostInit+0x70>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002418:	4a11      	ldr	r2, [pc, #68]	@ (8002460 <HAL_TIM_MspPostInit+0x70>)
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_TIM_MspPostInit+0x70>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002430:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002434:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002442:	2301      	movs	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	4805      	ldr	r0, [pc, #20]	@ (8002464 <HAL_TIM_MspPostInit+0x74>)
 800244e:	f005 ff4f 	bl	80082f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002452:	bf00      	nop
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40010000 	.word	0x40010000
 8002460:	58024400 	.word	0x58024400
 8002464:	58021000 	.word	0x58021000

08002468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0ba      	sub	sp, #232	@ 0xe8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002480:	f107 0318 	add.w	r3, r7, #24
 8002484:	22b8      	movs	r2, #184	@ 0xb8
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f00f fc51 	bl	8011d30 <memset>
  if(huart->Instance==USART1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a4d      	ldr	r2, [pc, #308]	@ (80025c8 <HAL_UART_MspInit+0x160>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d147      	bne.n	8002528 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002498:	f04f 0201 	mov.w	r2, #1
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	4618      	mov	r0, r3
 80024b0:	f007 f898 	bl	80095e4 <HAL_RCCEx_PeriphCLKConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024ba:	f7ff fc82 	bl	8001dc2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024be:	4b43      	ldr	r3, [pc, #268]	@ (80025cc <HAL_UART_MspInit+0x164>)
 80024c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c4:	4a41      	ldr	r2, [pc, #260]	@ (80025cc <HAL_UART_MspInit+0x164>)
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ce:	4b3f      	ldr	r3, [pc, #252]	@ (80025cc <HAL_UART_MspInit+0x164>)
 80024d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024dc:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_UART_MspInit+0x164>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e2:	4a3a      	ldr	r2, [pc, #232]	@ (80025cc <HAL_UART_MspInit+0x164>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ec:	4b37      	ldr	r3, [pc, #220]	@ (80025cc <HAL_UART_MspInit+0x164>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 80024fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002514:	2307      	movs	r3, #7
 8002516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800251e:	4619      	mov	r1, r3
 8002520:	482b      	ldr	r0, [pc, #172]	@ (80025d0 <HAL_UART_MspInit+0x168>)
 8002522:	f005 fee5 	bl	80082f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002526:	e04a      	b.n	80025be <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a29      	ldr	r2, [pc, #164]	@ (80025d4 <HAL_UART_MspInit+0x16c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d145      	bne.n	80025be <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002532:	f04f 0202 	mov.w	r2, #2
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002544:	f107 0318 	add.w	r3, r7, #24
 8002548:	4618      	mov	r0, r3
 800254a:	f007 f84b 	bl	80095e4 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002554:	f7ff fc35 	bl	8001dc2 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002558:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <HAL_UART_MspInit+0x164>)
 800255a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800255e:	4a1b      	ldr	r2, [pc, #108]	@ (80025cc <HAL_UART_MspInit+0x164>)
 8002560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002564:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_UART_MspInit+0x164>)
 800256a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_UART_MspInit+0x164>)
 8002578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800257c:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <HAL_UART_MspInit+0x164>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_UART_MspInit+0x164>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002594:	230c      	movs	r3, #12
 8002596:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ac:	2307      	movs	r3, #7
 80025ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <HAL_UART_MspInit+0x168>)
 80025ba:	f005 fe99 	bl	80082f0 <HAL_GPIO_Init>
}
 80025be:	bf00      	nop
 80025c0:	37e8      	adds	r7, #232	@ 0xe8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40011000 	.word	0x40011000
 80025cc:	58024400 	.word	0x58024400
 80025d0:	58020000 	.word	0x58020000
 80025d4:	40004400 	.word	0x40004400

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <NMI_Handler+0x4>

080025e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <MemManage_Handler+0x4>

080025f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <BusFault_Handler+0x4>

080025f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <UsageFault_Handler+0x4>

08002600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262e:	f000 f98d 	bl	800294c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <DMA1_Stream0_IRQHandler+0x10>)
 800263e:	f003 f939 	bl	80058b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	24000174 	.word	0x24000174

0800264c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002650:	4803      	ldr	r0, [pc, #12]	@ (8002660 <ADC_IRQHandler+0x14>)
 8002652:	f000 ff8f 	bl	8003574 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002656:	4803      	ldr	r0, [pc, #12]	@ (8002664 <ADC_IRQHandler+0x18>)
 8002658:	f000 ff8c 	bl	8003574 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	24000094 	.word	0x24000094
 8002664:	24000104 	.word	0x24000104

08002668 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800266c:	4802      	ldr	r0, [pc, #8]	@ (8002678 <FDCAN1_IT0_IRQHandler+0x10>)
 800266e:	f005 f943 	bl	80078f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	240001ec 	.word	0x240001ec

0800267c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <FDCAN2_IT0_IRQHandler+0x10>)
 8002682:	f005 f939 	bl	80078f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	2400028c 	.word	0x2400028c

08002690 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <SDMMC1_IRQHandler+0x10>)
 8002696:	f009 fdfb 	bl	800c290 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2400032c 	.word	0x2400032c

080026a4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <TIM16_IRQHandler+0x10>)
 80026aa:	f00b f924 	bl	800d8f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	240003f4 	.word	0x240003f4

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	@ (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f00f fb2a 	bl	8011d40 <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	@ (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	24050000 	.word	0x24050000
 8002718:	00000400 	.word	0x00000400
 800271c:	24001818 	.word	0x24001818
 8002720:	24001bb0 	.word	0x24001bb0

08002724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002728:	4b32      	ldr	r3, [pc, #200]	@ (80027f4 <SystemInit+0xd0>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	4a31      	ldr	r2, [pc, #196]	@ (80027f4 <SystemInit+0xd0>)
 8002730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002738:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <SystemInit+0xd4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	2b06      	cmp	r3, #6
 8002742:	d807      	bhi.n	8002754 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002744:	4b2c      	ldr	r3, [pc, #176]	@ (80027f8 <SystemInit+0xd4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 030f 	bic.w	r3, r3, #15
 800274c:	4a2a      	ldr	r2, [pc, #168]	@ (80027f8 <SystemInit+0xd4>)
 800274e:	f043 0307 	orr.w	r3, r3, #7
 8002752:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002754:	4b29      	ldr	r3, [pc, #164]	@ (80027fc <SystemInit+0xd8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a28      	ldr	r2, [pc, #160]	@ (80027fc <SystemInit+0xd8>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002760:	4b26      	ldr	r3, [pc, #152]	@ (80027fc <SystemInit+0xd8>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002766:	4b25      	ldr	r3, [pc, #148]	@ (80027fc <SystemInit+0xd8>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4924      	ldr	r1, [pc, #144]	@ (80027fc <SystemInit+0xd8>)
 800276c:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <SystemInit+0xdc>)
 800276e:	4013      	ands	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002772:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <SystemInit+0xd4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800277e:	4b1e      	ldr	r3, [pc, #120]	@ (80027f8 <SystemInit+0xd4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 030f 	bic.w	r3, r3, #15
 8002786:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <SystemInit+0xd4>)
 8002788:	f043 0307 	orr.w	r3, r3, #7
 800278c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800278e:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <SystemInit+0xd8>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <SystemInit+0xd8>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800279a:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <SystemInit+0xd8>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027a0:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <SystemInit+0xd8>)
 80027a2:	4a18      	ldr	r2, [pc, #96]	@ (8002804 <SystemInit+0xe0>)
 80027a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <SystemInit+0xd8>)
 80027a8:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <SystemInit+0xe4>)
 80027aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027ac:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <SystemInit+0xd8>)
 80027ae:	4a17      	ldr	r2, [pc, #92]	@ (800280c <SystemInit+0xe8>)
 80027b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027b2:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <SystemInit+0xd8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027b8:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <SystemInit+0xd8>)
 80027ba:	4a14      	ldr	r2, [pc, #80]	@ (800280c <SystemInit+0xe8>)
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027be:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <SystemInit+0xd8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027c4:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <SystemInit+0xd8>)
 80027c6:	4a11      	ldr	r2, [pc, #68]	@ (800280c <SystemInit+0xe8>)
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <SystemInit+0xd8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <SystemInit+0xd8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <SystemInit+0xd8>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027dc:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <SystemInit+0xd8>)
 80027de:	2200      	movs	r2, #0
 80027e0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <SystemInit+0xec>)
 80027e4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00
 80027f8:	52002000 	.word	0x52002000
 80027fc:	58024400 	.word	0x58024400
 8002800:	eaf6ed7f 	.word	0xeaf6ed7f
 8002804:	02020200 	.word	0x02020200
 8002808:	01ff0000 	.word	0x01ff0000
 800280c:	01010280 	.word	0x01010280
 8002810:	52004000 	.word	0x52004000

08002814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002814:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800284c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002818:	f7ff ff84 	bl	8002724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800281c:	480c      	ldr	r0, [pc, #48]	@ (8002850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800281e:	490d      	ldr	r1, [pc, #52]	@ (8002854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002820:	4a0d      	ldr	r2, [pc, #52]	@ (8002858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002824:	e002      	b.n	800282c <LoopCopyDataInit>

08002826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282a:	3304      	adds	r3, #4

0800282c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800282c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002830:	d3f9      	bcc.n	8002826 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002832:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002834:	4c0a      	ldr	r4, [pc, #40]	@ (8002860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002838:	e001      	b.n	800283e <LoopFillZerobss>

0800283a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800283c:	3204      	adds	r2, #4

0800283e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002840:	d3fb      	bcc.n	800283a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002842:	f00f fa83 	bl	8011d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002846:	f7fd ff95 	bl	8000774 <main>
  bx  lr
 800284a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800284c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002850:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002854:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002858:	08012afc 	.word	0x08012afc
  ldr r2, =_sbss
 800285c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002860:	24001bb0 	.word	0x24001bb0

08002864 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002864:	e7fe      	b.n	8002864 <ADC3_IRQHandler>
	...

08002868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286e:	2003      	movs	r0, #3
 8002870:	f002 fa1e 	bl	8004cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002874:	f006 fce0 	bl	8009238 <HAL_RCC_GetSysClockFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_Init+0x68>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	4913      	ldr	r1, [pc, #76]	@ (80028d4 <HAL_Init+0x6c>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002892:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_Init+0x68>)
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a0e      	ldr	r2, [pc, #56]	@ (80028d4 <HAL_Init+0x6c>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	4a0b      	ldr	r2, [pc, #44]	@ (80028d8 <HAL_Init+0x70>)
 80028aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ac:	4a0b      	ldr	r2, [pc, #44]	@ (80028dc <HAL_Init+0x74>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028b2:	200f      	movs	r0, #15
 80028b4:	f000 f814 	bl	80028e0 <HAL_InitTick>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e002      	b.n	80028c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028c2:	f7ff fa85 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	58024400 	.word	0x58024400
 80028d4:	08012a54 	.word	0x08012a54
 80028d8:	24000010 	.word	0x24000010
 80028dc:	2400000c 	.word	0x2400000c

080028e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_InitTick+0x60>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e021      	b.n	8002938 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <HAL_InitTick+0x64>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_InitTick+0x60>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002902:	fbb3 f3f1 	udiv	r3, r3, r1
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fa03 	bl	8004d16 <HAL_SYSTICK_Config>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e00e      	b.n	8002938 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b0f      	cmp	r3, #15
 800291e:	d80a      	bhi.n	8002936 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002920:	2200      	movs	r2, #0
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f002 f9cd 	bl	8004cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800292c:	4a06      	ldr	r2, [pc, #24]	@ (8002948 <HAL_InitTick+0x68>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	24000018 	.word	0x24000018
 8002944:	2400000c 	.word	0x2400000c
 8002948:	24000014 	.word	0x24000014

0800294c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_IncTick+0x20>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_IncTick+0x24>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4413      	add	r3, r2
 800295c:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <HAL_IncTick+0x24>)
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	24000018 	.word	0x24000018
 8002970:	2400181c 	.word	0x2400181c

08002974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return uwTick;
 8002978:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <HAL_GetTick+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	2400181c 	.word	0x2400181c

0800298c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff ffee 	bl	8002974 <HAL_GetTick>
 8002998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d005      	beq.n	80029b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_Delay+0x44>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029b2:	bf00      	nop
 80029b4:	f7ff ffde 	bl	8002974 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8f7      	bhi.n	80029b4 <HAL_Delay+0x28>
  {
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	24000018 	.word	0x24000018

080029d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3360      	adds	r3, #96	@ 0x60
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a10      	ldr	r2, [pc, #64]	@ (8002a9c <LL_ADC_SetOffset+0x60>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10b      	bne.n	8002a78 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a76:	e00b      	b.n	8002a90 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	601a      	str	r2, [r3, #0]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	58026000 	.word	0x58026000

08002aa0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3360      	adds	r3, #96	@ 0x60
 8002aae:	461a      	mov	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	611a      	str	r2, [r3, #16]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b40 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00e      	beq.n	8002b32 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3360      	adds	r3, #96	@ 0x60
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
  }
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	58026000 	.word	0x58026000

08002b44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a0c      	ldr	r2, [pc, #48]	@ (8002b84 <LL_ADC_SetOffsetSaturation+0x40>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10e      	bne.n	8002b76 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3360      	adds	r3, #96	@ 0x60
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	58026000 	.word	0x58026000

08002b88 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc8 <LL_ADC_SetOffsetSign+0x40>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10e      	bne.n	8002bba <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3360      	adds	r3, #96	@ 0x60
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	58026000 	.word	0x58026000

08002bcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3360      	adds	r3, #96	@ 0x60
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a0c      	ldr	r2, [pc, #48]	@ (8002c1c <LL_ADC_SetOffsetState+0x50>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002bfe:	e007      	b.n	8002c10 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	58026000 	.word	0x58026000

08002c20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b087      	sub	sp, #28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3330      	adds	r3, #48	@ 0x30
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	4413      	add	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	211f      	movs	r1, #31
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 011f 	and.w	r1, r3, #31
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f023 0203 	bic.w	r2, r3, #3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d107      	bne.n	8002d06 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60da      	str	r2, [r3, #12]
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	58026000 	.word	0x58026000

08002d18 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d24:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b087      	sub	sp, #28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	0e5b      	lsrs	r3, r3, #25
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	0d1b      	lsrs	r3, r3, #20
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2107      	movs	r1, #7
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	401a      	ands	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	0d1b      	lsrs	r3, r3, #20
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	431a      	orrs	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e0c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d115      	bne.n	8002dd4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0318 	and.w	r3, r3, #24
 8002dbe:	4914      	ldr	r1, [pc, #80]	@ (8002e10 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002dc0:	40d9      	lsrs	r1, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	400b      	ands	r3, r1
 8002dc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002dd2:	e014      	b.n	8002dfe <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de0:	43db      	mvns	r3, r3
 8002de2:	401a      	ands	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0318 	and.w	r3, r3, #24
 8002dea:	4909      	ldr	r1, [pc, #36]	@ (8002e10 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002dec:	40d9      	lsrs	r1, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	400b      	ands	r3, r1
 8002df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df6:	431a      	orrs	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	58026000 	.word	0x58026000
 8002e10:	000fffff 	.word	0x000fffff

08002e14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 031f 	and.w	r3, r3, #31
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6093      	str	r3, [r2, #8]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	5fffffc0 	.word	0x5fffffc0

08002e70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e84:	d101      	bne.n	8002e8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <LL_ADC_EnableInternalRegulator+0x24>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	6fffffc0 	.word	0x6fffffc0

08002ec0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ed4:	d101      	bne.n	8002eda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <LL_ADC_Enable+0x24>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	7fffffc0 	.word	0x7fffffc0

08002f10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_IsEnabled+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_IsEnabled+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <LL_ADC_REG_StartConversion+0x24>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	7fffffc0 	.word	0x7fffffc0

08002f60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d101      	bne.n	8002f78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d101      	bne.n	8002f9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e1ee      	b.n	80033a4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fe ff15 	bl	8001e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff3f 	bl	8002e70 <LL_ADC_IsDeepPowerDownEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff25 	bl	8002e4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff5a 	bl	8002ec0 <LL_ADC_IsInternalRegulatorEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d114      	bne.n	800303c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff3e 	bl	8002e98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800301c:	4b8e      	ldr	r3, [pc, #568]	@ (8003258 <HAL_ADC_Init+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	4a8e      	ldr	r2, [pc, #568]	@ (800325c <HAL_ADC_Init+0x2b0>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	3301      	adds	r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800302e:	e002      	b.n	8003036 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3b01      	subs	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f9      	bne.n	8003030 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff3d 	bl	8002ec0 <LL_ADC_IsInternalRegulatorEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff77 	bl	8002f60 <LL_ADC_REG_IsConversionOngoing>
 8003072:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 8188 	bne.w	8003392 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 8184 	bne.w	8003392 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff36 	bl	8002f10 <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d136      	bne.n	8003118 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_ADC_Init+0x112>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10e      	bne.n	80030dc <HAL_ADC_Init+0x130>
 80030be:	4868      	ldr	r0, [pc, #416]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030c0:	f7ff ff26 	bl	8002f10 <LL_ADC_IsEnabled>
 80030c4:	4604      	mov	r4, r0
 80030c6:	4867      	ldr	r0, [pc, #412]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 80030c8:	f7ff ff22 	bl	8002f10 <LL_ADC_IsEnabled>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4323      	orrs	r3, r4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e008      	b.n	80030ee <HAL_ADC_Init+0x142>
 80030dc:	4862      	ldr	r0, [pc, #392]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 80030de:	f7ff ff17 	bl	8002f10 <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x15a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_ADC_Init+0x15e>
 8003106:	4a59      	ldr	r2, [pc, #356]	@ (800326c <HAL_ADC_Init+0x2c0>)
 8003108:	e000      	b.n	800310c <HAL_ADC_Init+0x160>
 800310a:	4a59      	ldr	r2, [pc, #356]	@ (8003270 <HAL_ADC_Init+0x2c4>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7ff fc5e 	bl	80029d4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d129      	bne.n	8003176 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7e5b      	ldrb	r3, [r3, #25]
 8003126:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800312c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003132:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d013      	beq.n	8003164 <HAL_ADC_Init+0x1b8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d00d      	beq.n	8003160 <HAL_ADC_Init+0x1b4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b1c      	cmp	r3, #28
 800314a:	d007      	beq.n	800315c <HAL_ADC_Init+0x1b0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b18      	cmp	r3, #24
 8003152:	d101      	bne.n	8003158 <HAL_ADC_Init+0x1ac>
 8003154:	2318      	movs	r3, #24
 8003156:	e006      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003158:	2300      	movs	r3, #0
 800315a:	e004      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 800315c:	2310      	movs	r3, #16
 800315e:	e002      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003160:	2308      	movs	r3, #8
 8003162:	e000      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003164:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003166:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800316e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	e00e      	b.n	8003194 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7e5b      	ldrb	r3, [r3, #25]
 800317a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003180:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003186:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d106      	bne.n	80031ac <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	3b01      	subs	r3, #1
 80031a4:	045b      	lsls	r3, r3, #17
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d115      	bne.n	80031fe <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b26      	ldr	r3, [pc, #152]	@ (8003274 <HAL_ADC_Init+0x2c8>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	430b      	orrs	r3, r1
 80031e4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	611a      	str	r2, [r3, #16]
 80031fc:	e009      	b.n	8003212 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <HAL_ADC_Init+0x2cc>)
 8003206:	4013      	ands	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fea2 	bl	8002f60 <LL_ADC_REG_IsConversionOngoing>
 800321c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff feaf 	bl	8002f86 <LL_ADC_INJ_IsConversionOngoing>
 8003228:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 808e 	bne.w	800334e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 808a 	bne.w	800334e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d11b      	bne.n	800327c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7e1b      	ldrb	r3, [r3, #24]
 8003248:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003250:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e018      	b.n	800328a <HAL_ADC_Init+0x2de>
 8003258:	2400000c 	.word	0x2400000c
 800325c:	053e2d63 	.word	0x053e2d63
 8003260:	40022000 	.word	0x40022000
 8003264:	40022100 	.word	0x40022100
 8003268:	58026000 	.word	0x58026000
 800326c:	40022300 	.word	0x40022300
 8003270:	58026300 	.word	0x58026300
 8003274:	fff04007 	.word	0xfff04007
 8003278:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7e1b      	ldrb	r3, [r3, #24]
 8003280:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4b46      	ldr	r3, [pc, #280]	@ (80033ac <HAL_ADC_Init+0x400>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	69b9      	ldr	r1, [r7, #24]
 800329a:	430b      	orrs	r3, r1
 800329c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d137      	bne.n	8003318 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3f      	ldr	r2, [pc, #252]	@ (80033b0 <HAL_ADC_Init+0x404>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d116      	bne.n	80032e6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	4b3d      	ldr	r3, [pc, #244]	@ (80033b4 <HAL_ADC_Init+0x408>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032ca:	4311      	orrs	r1, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80032d6:	430a      	orrs	r2, r1
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	611a      	str	r2, [r3, #16]
 80032e4:	e020      	b.n	8003328 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	4b32      	ldr	r3, [pc, #200]	@ (80033b8 <HAL_ADC_Init+0x40c>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0411      	lsls	r1, r2, #16
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003308:	430a      	orrs	r2, r1
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e007      	b.n	8003328 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_ADC_Init+0x404>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d002      	beq.n	800334e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f001 f9b9 	bl	80046c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10c      	bne.n	8003370 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	f023 010f 	bic.w	r1, r3, #15
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	1e5a      	subs	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
 800336e:	e007      	b.n	8003380 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 020f 	bic.w	r2, r2, #15
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003390:	e007      	b.n	80033a2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3724      	adds	r7, #36	@ 0x24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	ffffbffc 	.word	0xffffbffc
 80033b0:	58026000 	.word	0x58026000
 80033b4:	fc00f81f 	.word	0xfc00f81f
 80033b8:	fc00f81e 	.word	0xfc00f81e

080033bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a60      	ldr	r2, [pc, #384]	@ (8003550 <HAL_ADC_Start_DMA+0x194>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_ADC_Start_DMA+0x20>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a5f      	ldr	r2, [pc, #380]	@ (8003554 <HAL_ADC_Start_DMA+0x198>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_Start_DMA+0x24>
 80033dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003558 <HAL_ADC_Start_DMA+0x19c>)
 80033de:	e000      	b.n	80033e2 <HAL_ADC_Start_DMA+0x26>
 80033e0:	4b5e      	ldr	r3, [pc, #376]	@ (800355c <HAL_ADC_Start_DMA+0x1a0>)
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fd16 	bl	8002e14 <LL_ADC_GetMultimode>
 80033e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fdb6 	bl	8002f60 <LL_ADC_REG_IsConversionOngoing>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 80a2 	bne.w	8003540 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_ADC_Start_DMA+0x4e>
 8003406:	2302      	movs	r3, #2
 8003408:	e09d      	b.n	8003546 <HAL_ADC_Start_DMA+0x18a>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d003      	beq.n	8003426 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b09      	cmp	r3, #9
 8003422:	f040 8086 	bne.w	8003532 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f001 f82c 	bl	8004484 <ADC_Enable>
 800342c:	4603      	mov	r3, r0
 800342e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d178      	bne.n	8003528 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800343a:	4b49      	ldr	r3, [pc, #292]	@ (8003560 <HAL_ADC_Start_DMA+0x1a4>)
 800343c:	4013      	ands	r3, r2
 800343e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a42      	ldr	r2, [pc, #264]	@ (8003554 <HAL_ADC_Start_DMA+0x198>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d002      	beq.n	8003456 <HAL_ADC_Start_DMA+0x9a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	e000      	b.n	8003458 <HAL_ADC_Start_DMA+0x9c>
 8003456:	4b3e      	ldr	r3, [pc, #248]	@ (8003550 <HAL_ADC_Start_DMA+0x194>)
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	4293      	cmp	r3, r2
 800345e:	d002      	beq.n	8003466 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003482:	f023 0206 	bic.w	r2, r3, #6
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	665a      	str	r2, [r3, #100]	@ 0x64
 800348a:	e002      	b.n	8003492 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003496:	4a33      	ldr	r2, [pc, #204]	@ (8003564 <HAL_ADC_Start_DMA+0x1a8>)
 8003498:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	4a32      	ldr	r2, [pc, #200]	@ (8003568 <HAL_ADC_Start_DMA+0x1ac>)
 80034a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a6:	4a31      	ldr	r2, [pc, #196]	@ (800356c <HAL_ADC_Start_DMA+0x1b0>)
 80034a8:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	221c      	movs	r2, #28
 80034b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0210 	orr.w	r2, r2, #16
 80034c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a28      	ldr	r2, [pc, #160]	@ (8003570 <HAL_ADC_Start_DMA+0x1b4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10f      	bne.n	80034f4 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f7ff fbfe 	bl	8002ce4 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fbe9 	bl	8002cc4 <LL_ADC_EnableDMAReq>
 80034f2:	e007      	b.n	8003504 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f7ff fbcd 	bl	8002c9e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3340      	adds	r3, #64	@ 0x40
 800350e:	4619      	mov	r1, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f001 ff64 	bl	80053e0 <HAL_DMA_Start_IT>
 8003518:	4603      	mov	r3, r0
 800351a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fd09 	bl	8002f38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003526:	e00d      	b.n	8003544 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003530:	e008      	b.n	8003544 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800353e:	e001      	b.n	8003544 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003540:	2302      	movs	r3, #2
 8003542:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003544:	7dfb      	ldrb	r3, [r7, #23]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40022000 	.word	0x40022000
 8003554:	40022100 	.word	0x40022100
 8003558:	40022300 	.word	0x40022300
 800355c:	58026300 	.word	0x58026300
 8003560:	fffff0fe 	.word	0xfffff0fe
 8003564:	08004599 	.word	0x08004599
 8003568:	08004671 	.word	0x08004671
 800356c:	0800468d 	.word	0x0800468d
 8003570:	58026000 	.word	0x58026000

08003574 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	@ 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a87      	ldr	r2, [pc, #540]	@ (80037b4 <HAL_ADC_IRQHandler+0x240>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_ADC_IRQHandler+0x30>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a86      	ldr	r2, [pc, #536]	@ (80037b8 <HAL_ADC_IRQHandler+0x244>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x34>
 80035a4:	4b85      	ldr	r3, [pc, #532]	@ (80037bc <HAL_ADC_IRQHandler+0x248>)
 80035a6:	e000      	b.n	80035aa <HAL_ADC_IRQHandler+0x36>
 80035a8:	4b85      	ldr	r3, [pc, #532]	@ (80037c0 <HAL_ADC_IRQHandler+0x24c>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fc32 	bl	8002e14 <LL_ADC_GetMultimode>
 80035b0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <HAL_ADC_IRQHandler+0x78>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d012      	beq.n	80035ec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 f9aa 	bl	8004938 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2202      	movs	r2, #2
 80035ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <HAL_ADC_IRQHandler+0x8c>
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8083 	beq.w	8003712 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d07d      	beq.n	8003712 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003626:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff faf4 	bl	8002c20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d062      	beq.n	8003704 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a5d      	ldr	r2, [pc, #372]	@ (80037b8 <HAL_ADC_IRQHandler+0x244>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d002      	beq.n	800364e <HAL_ADC_IRQHandler+0xda>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e000      	b.n	8003650 <HAL_ADC_IRQHandler+0xdc>
 800364e:	4b59      	ldr	r3, [pc, #356]	@ (80037b4 <HAL_ADC_IRQHandler+0x240>)
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	4293      	cmp	r3, r2
 8003656:	d008      	beq.n	800366a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b05      	cmp	r3, #5
 8003662:	d002      	beq.n	800366a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b09      	cmp	r3, #9
 8003668:	d104      	bne.n	8003674 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	e00c      	b.n	800368e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a4f      	ldr	r2, [pc, #316]	@ (80037b8 <HAL_ADC_IRQHandler+0x244>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d002      	beq.n	8003684 <HAL_ADC_IRQHandler+0x110>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	e000      	b.n	8003686 <HAL_ADC_IRQHandler+0x112>
 8003684:	4b4b      	ldr	r3, [pc, #300]	@ (80037b4 <HAL_ADC_IRQHandler+0x240>)
 8003686:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d135      	bne.n	8003704 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d12e      	bne.n	8003704 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fc58 	bl	8002f60 <LL_ADC_REG_IsConversionOngoing>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11a      	bne.n	80036ec <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 020c 	bic.w	r2, r2, #12
 80036c4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d112      	bne.n	8003704 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80036ea:	e00b      	b.n	8003704 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f0:	f043 0210 	orr.w	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fd ff2f 	bl	8001568 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	220c      	movs	r2, #12
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_ADC_IRQHandler+0x1b2>
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a0 	beq.w	8003872 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 809a 	beq.w	8003872 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fadc 	bl	8002d18 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003760:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fa5a 	bl	8002c20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800376c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a11      	ldr	r2, [pc, #68]	@ (80037b8 <HAL_ADC_IRQHandler+0x244>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d002      	beq.n	800377e <HAL_ADC_IRQHandler+0x20a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	e000      	b.n	8003780 <HAL_ADC_IRQHandler+0x20c>
 800377e:	4b0d      	ldr	r3, [pc, #52]	@ (80037b4 <HAL_ADC_IRQHandler+0x240>)
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	4293      	cmp	r3, r2
 8003786:	d008      	beq.n	800379a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d002      	beq.n	800379a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b07      	cmp	r3, #7
 8003798:	d104      	bne.n	80037a4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	e014      	b.n	80037ce <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a03      	ldr	r2, [pc, #12]	@ (80037b8 <HAL_ADC_IRQHandler+0x244>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00a      	beq.n	80037c4 <HAL_ADC_IRQHandler+0x250>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	e008      	b.n	80037c6 <HAL_ADC_IRQHandler+0x252>
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40022100 	.word	0x40022100
 80037bc:	40022300 	.word	0x40022300
 80037c0:	58026300 	.word	0x58026300
 80037c4:	4b84      	ldr	r3, [pc, #528]	@ (80039d8 <HAL_ADC_IRQHandler+0x464>)
 80037c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d047      	beq.n	8003864 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_ADC_IRQHandler+0x27a>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d03f      	beq.n	8003864 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d13a      	bne.n	8003864 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f8:	2b40      	cmp	r3, #64	@ 0x40
 80037fa:	d133      	bne.n	8003864 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d12e      	bne.n	8003864 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fbbb 	bl	8002f86 <LL_ADC_INJ_IsConversionOngoing>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11a      	bne.n	800384c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003824:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d112      	bne.n	8003864 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	661a      	str	r2, [r3, #96]	@ 0x60
 800384a:	e00b      	b.n	8003864 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003850:	f043 0210 	orr.w	r2, r3, #16
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 f83f 	bl	80048e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2260      	movs	r2, #96	@ 0x60
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d011      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x32c>
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8b2 	bl	80039fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d012      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x35c>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f001 f825 	bl	8004910 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d012      	beq.n	8003900 <HAL_ADC_IRQHandler+0x38c>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 f817 	bl	8004924 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d043      	beq.n	8003992 <HAL_ADC_IRQHandler+0x41e>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d03e      	beq.n	8003992 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800391c:	2301      	movs	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003920:	e021      	b.n	8003966 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2a      	ldr	r2, [pc, #168]	@ (80039d8 <HAL_ADC_IRQHandler+0x464>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <HAL_ADC_IRQHandler+0x3c8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a29      	ldr	r2, [pc, #164]	@ (80039dc <HAL_ADC_IRQHandler+0x468>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_ADC_IRQHandler+0x3cc>
 800393c:	4b28      	ldr	r3, [pc, #160]	@ (80039e0 <HAL_ADC_IRQHandler+0x46c>)
 800393e:	e000      	b.n	8003942 <HAL_ADC_IRQHandler+0x3ce>
 8003940:	4b28      	ldr	r3, [pc, #160]	@ (80039e4 <HAL_ADC_IRQHandler+0x470>)
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fa74 	bl	8002e30 <LL_ADC_GetMultiDMATransfer>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800394e:	2301      	movs	r3, #1
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
 8003952:	e008      	b.n	8003966 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003962:	2301      	movs	r3, #1
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	2b01      	cmp	r3, #1
 800396a:	d10e      	bne.n	800398a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003970:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800397c:	f043 0202 	orr.w	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f843 	bl	8003a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2210      	movs	r2, #16
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003998:	2b00      	cmp	r3, #0
 800399a:	d018      	beq.n	80039ce <HAL_ADC_IRQHandler+0x45a>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d013      	beq.n	80039ce <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b6:	f043 0208 	orr.w	r2, r3, #8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 ff97 	bl	80048fc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039ce:	bf00      	nop
 80039d0:	3728      	adds	r7, #40	@ 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40022000 	.word	0x40022000
 80039dc:	40022100 	.word	0x40022100
 80039e0:	40022300 	.word	0x40022300
 80039e4:	58026300 	.word	0x58026300

080039e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b0b9      	sub	sp, #228	@ 0xe4
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a3e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4aab      	ldr	r2, [pc, #684]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x2d0>)
 8003a46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x34>
 8003a52:	2302      	movs	r3, #2
 8003a54:	f000 bcfe 	b.w	8004454 <HAL_ADC_ConfigChannel+0xa30>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fa7b 	bl	8002f60 <LL_ADC_REG_IsConversionOngoing>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 84e2 	bne.w	8004436 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	db38      	blt.n	8003aec <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a9e      	ldr	r2, [pc, #632]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d033      	beq.n	8003aec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x7e>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0e9b      	lsrs	r3, r3, #26
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	e01d      	b.n	8003ade <HAL_ADC_ConfigChannel+0xba>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	e004      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2201      	movs	r2, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	69d1      	ldr	r1, [r2, #28]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f7ff f8a4 	bl	8002c46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fa2c 	bl	8002f60 <LL_ADC_REG_IsConversionOngoing>
 8003b08:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fa38 	bl	8002f86 <LL_ADC_INJ_IsConversionOngoing>
 8003b16:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 8270 	bne.w	8004004 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 826b 	bne.w	8004004 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f7ff f8ff 	bl	8002d3e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a6c      	ldr	r2, [pc, #432]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10d      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b64:	e032      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b66:	4b65      	ldr	r3, [pc, #404]	@ (8003cfc <HAL_ADC_ConfigChannel+0x2d8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b72:	d10b      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x168>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	e01d      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x1a4>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x18e>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	e00a      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x1a4>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d048      	beq.n	8003c66 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6919      	ldr	r1, [r3, #16]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003be4:	f7fe ff2a 	bl	8002a3c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a42      	ldr	r2, [pc, #264]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d119      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6919      	ldr	r1, [r3, #16]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f7fe ffc2 	bl	8002b88 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6919      	ldr	r1, [r3, #16]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1f8>
 8003c16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c1a:	e000      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x1fa>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f7fe ff90 	bl	8002b44 <LL_ADC_SetOffsetSaturation>
 8003c24:	e1ee      	b.n	8004004 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x21a>
 8003c38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c3c:	e000      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x21c>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	461a      	mov	r2, r3
 8003c42:	f7fe ff5d 	bl	8002b00 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6919      	ldr	r1, [r3, #16]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	7e1b      	ldrb	r3, [r3, #24]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x238>
 8003c56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c5a:	e000      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x23a>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f7fe ff34 	bl	8002acc <LL_ADC_SetDataRightShift>
 8003c64:	e1ce      	b.n	8004004 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a23      	ldr	r2, [pc, #140]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	f040 8181 	bne.w	8003f74 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe ff11 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x27a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe ff06 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003c94:	4603      	mov	r3, r0
 8003c96:	0e9b      	lsrs	r3, r3, #26
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	e01e      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x2b8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fefb 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003cc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003ccc:	2320      	movs	r3, #32
 8003cce:	e004      	b.n	8003cda <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003cd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x2dc>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0e9b      	lsrs	r3, r3, #26
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	e01e      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x30e>
 8003cf4:	47ff0000 	.word	0x47ff0000
 8003cf8:	58026000 	.word	0x58026000
 8003cfc:	5c001000 	.word	0x5c001000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003d1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003d24:	2320      	movs	r3, #32
 8003d26:	e004      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003d28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d106      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe ff44 	bl	8002bcc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fea8 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x34c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe fe9d 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	0e9b      	lsrs	r3, r3, #26
 8003d6a:	f003 021f 	and.w	r2, r3, #31
 8003d6e:	e01e      	b.n	8003dae <HAL_ADC_ConfigChannel+0x38a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fe92 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003d9e:	2320      	movs	r3, #32
 8003da0:	e004      	b.n	8003dac <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x3a2>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	0e9b      	lsrs	r3, r3, #26
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	e018      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x3d4>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003dda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003dea:	2320      	movs	r3, #32
 8003dec:	e004      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d106      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fee1 	bl	8002bcc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe fe45 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x412>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fe3a 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	0e9b      	lsrs	r3, r3, #26
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	e01e      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x450>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fe2f 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003e64:	2320      	movs	r3, #32
 8003e66:	e004      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x468>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	e014      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x492>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	e004      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d106      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fe82 	bl	8002bcc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2103      	movs	r1, #3
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fde6 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x4d0>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2103      	movs	r1, #3
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fddb 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003eea:	4603      	mov	r3, r0
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	f003 021f 	and.w	r2, r3, #31
 8003ef2:	e017      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x500>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2103      	movs	r1, #3
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fdd0 	bl	8002aa0 <LL_ADC_GetOffsetChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f0e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e003      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x518>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0e9b      	lsrs	r3, r3, #26
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	e011      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x53c>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e003      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d14f      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fe2d 	bl	8002bcc <LL_ADC_SetOffsetState>
 8003f72:	e047      	b.n	8004004 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	069b      	lsls	r3, r3, #26
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f96:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	069b      	lsls	r3, r3, #26
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	069b      	lsls	r3, r3, #26
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d107      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fde:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fe6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	069b      	lsls	r3, r3, #26
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004002:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe ff81 	bl	8002f10 <LL_ADC_IsEnabled>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 8219 	bne.w	8004448 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	461a      	mov	r2, r3
 8004024:	f7fe feb6 	bl	8002d94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4aa1      	ldr	r2, [pc, #644]	@ (80042b4 <HAL_ADC_ConfigChannel+0x890>)
 800402e:	4293      	cmp	r3, r2
 8004030:	f040 812e 	bne.w	8004290 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <HAL_ADC_ConfigChannel+0x638>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0e9b      	lsrs	r3, r3, #26
 800404a:	3301      	adds	r3, #1
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2b09      	cmp	r3, #9
 8004052:	bf94      	ite	ls
 8004054:	2301      	movls	r3, #1
 8004056:	2300      	movhi	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e019      	b.n	8004090 <HAL_ADC_ConfigChannel+0x66c>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004064:	fa93 f3a3 	rbit	r3, r3
 8004068:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800406e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004074:	2320      	movs	r3, #32
 8004076:	e003      	b.n	8004080 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3301      	adds	r3, #1
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	2b09      	cmp	r3, #9
 8004088:	bf94      	ite	ls
 800408a:	2301      	movls	r3, #1
 800408c:	2300      	movhi	r3, #0
 800408e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004090:	2b00      	cmp	r3, #0
 8004092:	d079      	beq.n	8004188 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x68c>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	3301      	adds	r3, #1
 80040a8:	069b      	lsls	r3, r3, #26
 80040aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040ae:	e015      	b.n	80040dc <HAL_ADC_ConfigChannel+0x6b8>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80040be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80040c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80040c8:	2320      	movs	r3, #32
 80040ca:	e003      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80040cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	069b      	lsls	r3, r3, #26
 80040d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x6d8>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	3301      	adds	r3, #1
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	e017      	b.n	800412c <HAL_ADC_ConfigChannel+0x708>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800410a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800410e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e003      	b.n	8004120 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3301      	adds	r3, #1
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	ea42 0103 	orr.w	r1, r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x72e>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	0e9b      	lsrs	r3, r3, #26
 8004142:	3301      	adds	r3, #1
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	051b      	lsls	r3, r3, #20
 8004150:	e018      	b.n	8004184 <HAL_ADC_ConfigChannel+0x760>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800416a:	2320      	movs	r3, #32
 800416c:	e003      	b.n	8004176 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800416e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4613      	mov	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4413      	add	r3, r2
 8004182:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004184:	430b      	orrs	r3, r1
 8004186:	e07e      	b.n	8004286 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x780>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e9b      	lsrs	r3, r3, #26
 800419a:	3301      	adds	r3, #1
 800419c:	069b      	lsls	r3, r3, #26
 800419e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041a2:	e015      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x7ac>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80041b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80041bc:	2320      	movs	r3, #32
 80041be:	e003      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80041c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	069b      	lsls	r3, r3, #26
 80041cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x7cc>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0e9b      	lsrs	r3, r3, #26
 80041e2:	3301      	adds	r3, #1
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	2101      	movs	r1, #1
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	e017      	b.n	8004220 <HAL_ADC_ConfigChannel+0x7fc>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	61bb      	str	r3, [r7, #24]
  return result;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e003      	b.n	8004214 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3301      	adds	r3, #1
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	ea42 0103 	orr.w	r1, r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_ADC_ConfigChannel+0x828>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0e9b      	lsrs	r3, r3, #26
 8004236:	3301      	adds	r3, #1
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4613      	mov	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	3b1e      	subs	r3, #30
 8004244:	051b      	lsls	r3, r3, #20
 8004246:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800424a:	e01b      	b.n	8004284 <HAL_ADC_ConfigChannel+0x860>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	60fb      	str	r3, [r7, #12]
  return result;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	f003 021f 	and.w	r2, r3, #31
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	3b1e      	subs	r3, #30
 800427e:	051b      	lsls	r3, r3, #20
 8004280:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004284:	430b      	orrs	r3, r1
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	6892      	ldr	r2, [r2, #8]
 800428a:	4619      	mov	r1, r3
 800428c:	f7fe fd57 	bl	8002d3e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f280 80d7 	bge.w	8004448 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a06      	ldr	r2, [pc, #24]	@ (80042b8 <HAL_ADC_ConfigChannel+0x894>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_ADC_ConfigChannel+0x88a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a04      	ldr	r2, [pc, #16]	@ (80042bc <HAL_ADC_ConfigChannel+0x898>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10a      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x8a0>
 80042ae:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <HAL_ADC_ConfigChannel+0x89c>)
 80042b0:	e009      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x8a2>
 80042b2:	bf00      	nop
 80042b4:	47ff0000 	.word	0x47ff0000
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40022100 	.word	0x40022100
 80042c0:	40022300 	.word	0x40022300
 80042c4:	4b65      	ldr	r3, [pc, #404]	@ (800445c <HAL_ADC_ConfigChannel+0xa38>)
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fbaa 	bl	8002a20 <LL_ADC_GetCommonPathInternalCh>
 80042cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a62      	ldr	r2, [pc, #392]	@ (8004460 <HAL_ADC_ConfigChannel+0xa3c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_ADC_ConfigChannel+0x8c0>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a61      	ldr	r2, [pc, #388]	@ (8004464 <HAL_ADC_ConfigChannel+0xa40>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10e      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x8de>
 80042e4:	485e      	ldr	r0, [pc, #376]	@ (8004460 <HAL_ADC_ConfigChannel+0xa3c>)
 80042e6:	f7fe fe13 	bl	8002f10 <LL_ADC_IsEnabled>
 80042ea:	4604      	mov	r4, r0
 80042ec:	485d      	ldr	r0, [pc, #372]	@ (8004464 <HAL_ADC_ConfigChannel+0xa40>)
 80042ee:	f7fe fe0f 	bl	8002f10 <LL_ADC_IsEnabled>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4323      	orrs	r3, r4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e008      	b.n	8004314 <HAL_ADC_ConfigChannel+0x8f0>
 8004302:	4859      	ldr	r0, [pc, #356]	@ (8004468 <HAL_ADC_ConfigChannel+0xa44>)
 8004304:	f7fe fe04 	bl	8002f10 <LL_ADC_IsEnabled>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8084 	beq.w	8004422 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a53      	ldr	r2, [pc, #332]	@ (800446c <HAL_ADC_ConfigChannel+0xa48>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d132      	bne.n	800438a <HAL_ADC_ConfigChannel+0x966>
 8004324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004328:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d12c      	bne.n	800438a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a4c      	ldr	r2, [pc, #304]	@ (8004468 <HAL_ADC_ConfigChannel+0xa44>)
 8004336:	4293      	cmp	r3, r2
 8004338:	f040 8086 	bne.w	8004448 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a47      	ldr	r2, [pc, #284]	@ (8004460 <HAL_ADC_ConfigChannel+0xa3c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_ADC_ConfigChannel+0x92c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a46      	ldr	r2, [pc, #280]	@ (8004464 <HAL_ADC_ConfigChannel+0xa40>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x930>
 8004350:	4a47      	ldr	r2, [pc, #284]	@ (8004470 <HAL_ADC_ConfigChannel+0xa4c>)
 8004352:	e000      	b.n	8004356 <HAL_ADC_ConfigChannel+0x932>
 8004354:	4a41      	ldr	r2, [pc, #260]	@ (800445c <HAL_ADC_ConfigChannel+0xa38>)
 8004356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800435a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe fb4a 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004366:	4b43      	ldr	r3, [pc, #268]	@ (8004474 <HAL_ADC_ConfigChannel+0xa50>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	4a42      	ldr	r2, [pc, #264]	@ (8004478 <HAL_ADC_ConfigChannel+0xa54>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	099b      	lsrs	r3, r3, #6
 8004374:	3301      	adds	r3, #1
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800437a:	e002      	b.n	8004382 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	3b01      	subs	r3, #1
 8004380:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f9      	bne.n	800437c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004388:	e05e      	b.n	8004448 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3b      	ldr	r2, [pc, #236]	@ (800447c <HAL_ADC_ConfigChannel+0xa58>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d120      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x9b2>
 8004394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11a      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a30      	ldr	r2, [pc, #192]	@ (8004468 <HAL_ADC_ConfigChannel+0xa44>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d14e      	bne.n	8004448 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004460 <HAL_ADC_ConfigChannel+0xa3c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_ADC_ConfigChannel+0x99a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004464 <HAL_ADC_ConfigChannel+0xa40>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x99e>
 80043be:	4a2c      	ldr	r2, [pc, #176]	@ (8004470 <HAL_ADC_ConfigChannel+0xa4c>)
 80043c0:	e000      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x9a0>
 80043c2:	4a26      	ldr	r2, [pc, #152]	@ (800445c <HAL_ADC_ConfigChannel+0xa38>)
 80043c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f7fe fb13 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d4:	e038      	b.n	8004448 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a29      	ldr	r2, [pc, #164]	@ (8004480 <HAL_ADC_ConfigChannel+0xa5c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d133      	bne.n	8004448 <HAL_ADC_ConfigChannel+0xa24>
 80043e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d12d      	bne.n	8004448 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <HAL_ADC_ConfigChannel+0xa44>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d128      	bne.n	8004448 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a19      	ldr	r2, [pc, #100]	@ (8004460 <HAL_ADC_ConfigChannel+0xa3c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_ADC_ConfigChannel+0x9e6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a17      	ldr	r2, [pc, #92]	@ (8004464 <HAL_ADC_ConfigChannel+0xa40>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x9ea>
 800440a:	4a19      	ldr	r2, [pc, #100]	@ (8004470 <HAL_ADC_ConfigChannel+0xa4c>)
 800440c:	e000      	b.n	8004410 <HAL_ADC_ConfigChannel+0x9ec>
 800440e:	4a13      	ldr	r2, [pc, #76]	@ (800445c <HAL_ADC_ConfigChannel+0xa38>)
 8004410:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004414:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7fe faed 	bl	80029fa <LL_ADC_SetCommonPathInternalCh>
 8004420:	e012      	b.n	8004448 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004434:	e008      	b.n	8004448 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004450:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004454:	4618      	mov	r0, r3
 8004456:	37e4      	adds	r7, #228	@ 0xe4
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}
 800445c:	58026300 	.word	0x58026300
 8004460:	40022000 	.word	0x40022000
 8004464:	40022100 	.word	0x40022100
 8004468:	58026000 	.word	0x58026000
 800446c:	c7520000 	.word	0xc7520000
 8004470:	40022300 	.word	0x40022300
 8004474:	2400000c 	.word	0x2400000c
 8004478:	053e2d63 	.word	0x053e2d63
 800447c:	c3210000 	.word	0xc3210000
 8004480:	cb840000 	.word	0xcb840000

08004484 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe fd3d 	bl	8002f10 <LL_ADC_IsEnabled>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d16e      	bne.n	800457a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	4b38      	ldr	r3, [pc, #224]	@ (8004584 <ADC_Enable+0x100>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ae:	f043 0210 	orr.w	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ba:	f043 0201 	orr.w	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e05a      	b.n	800457c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fd0c 	bl	8002ee8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044d0:	f7fe fa50 	bl	8002974 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2b      	ldr	r2, [pc, #172]	@ (8004588 <ADC_Enable+0x104>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <ADC_Enable+0x66>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a29      	ldr	r2, [pc, #164]	@ (800458c <ADC_Enable+0x108>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <ADC_Enable+0x6a>
 80044ea:	4b29      	ldr	r3, [pc, #164]	@ (8004590 <ADC_Enable+0x10c>)
 80044ec:	e000      	b.n	80044f0 <ADC_Enable+0x6c>
 80044ee:	4b29      	ldr	r3, [pc, #164]	@ (8004594 <ADC_Enable+0x110>)
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe fc8f 	bl	8002e14 <LL_ADC_GetMultimode>
 80044f6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a23      	ldr	r2, [pc, #140]	@ (800458c <ADC_Enable+0x108>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d002      	beq.n	8004508 <ADC_Enable+0x84>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	e000      	b.n	800450a <ADC_Enable+0x86>
 8004508:	4b1f      	ldr	r3, [pc, #124]	@ (8004588 <ADC_Enable+0x104>)
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	4293      	cmp	r3, r2
 8004510:	d02c      	beq.n	800456c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d130      	bne.n	800457a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004518:	e028      	b.n	800456c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fcf6 	bl	8002f10 <LL_ADC_IsEnabled>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fcda 	bl	8002ee8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004534:	f7fe fa1e 	bl	8002974 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d914      	bls.n	800456c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d00d      	beq.n	800456c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	f043 0210 	orr.w	r2, r3, #16
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004560:	f043 0201 	orr.w	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d1cf      	bne.n	800451a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	8000003f 	.word	0x8000003f
 8004588:	40022000 	.word	0x40022000
 800458c:	40022100 	.word	0x40022100
 8004590:	40022300 	.word	0x40022300
 8004594:	58026300 	.word	0x58026300

08004598 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045aa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d14b      	bne.n	800464a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d021      	beq.n	8004610 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fb25 	bl	8002c20 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d032      	beq.n	8004642 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d12b      	bne.n	8004642 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11f      	bne.n	8004642 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	661a      	str	r2, [r3, #96]	@ 0x60
 800460e:	e018      	b.n	8004642 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d111      	bne.n	8004642 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004622:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7fc ff90 	bl	8001568 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004648:	e00e      	b.n	8004668 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff f9da 	bl	8003a10 <HAL_ADC_ErrorCallback>
}
 800465c:	e004      	b.n	8004668 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff f9b2 	bl	80039e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004698:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046aa:	f043 0204 	orr.w	r2, r3, #4
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff f9ac 	bl	8003a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6c      	ldr	r2, [pc, #432]	@ (8004880 <ADC_ConfigureBoostMode+0x1c0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <ADC_ConfigureBoostMode+0x1c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004884 <ADC_ConfigureBoostMode+0x1c4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d109      	bne.n	80046f0 <ADC_ConfigureBoostMode+0x30>
 80046dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004888 <ADC_ConfigureBoostMode+0x1c8>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e008      	b.n	8004702 <ADC_ConfigureBoostMode+0x42>
 80046f0:	4b66      	ldr	r3, [pc, #408]	@ (800488c <ADC_ConfigureBoostMode+0x1cc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01c      	beq.n	8004740 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004706:	f004 ff11 	bl	800952c <HAL_RCC_GetHCLKFreq>
 800470a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004714:	d010      	beq.n	8004738 <ADC_ConfigureBoostMode+0x78>
 8004716:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800471a:	d873      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x144>
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d002      	beq.n	8004728 <ADC_ConfigureBoostMode+0x68>
 8004722:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004726:	d16d      	bne.n	8004804 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	60fb      	str	r3, [r7, #12]
        break;
 8004736:	e068      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	60fb      	str	r3, [r7, #12]
        break;
 800473e:	e064      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004740:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	f006 f8ec 	bl	800a924 <HAL_RCCEx_GetPeriphCLKFreq>
 800474c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004756:	d051      	beq.n	80047fc <ADC_ConfigureBoostMode+0x13c>
 8004758:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800475c:	d854      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 800475e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004762:	d047      	beq.n	80047f4 <ADC_ConfigureBoostMode+0x134>
 8004764:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004768:	d84e      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 800476a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800476e:	d03d      	beq.n	80047ec <ADC_ConfigureBoostMode+0x12c>
 8004770:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004774:	d848      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 8004776:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800477a:	d033      	beq.n	80047e4 <ADC_ConfigureBoostMode+0x124>
 800477c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004780:	d842      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 8004782:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004786:	d029      	beq.n	80047dc <ADC_ConfigureBoostMode+0x11c>
 8004788:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800478c:	d83c      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 800478e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004792:	d01a      	beq.n	80047ca <ADC_ConfigureBoostMode+0x10a>
 8004794:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004798:	d836      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 800479a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800479e:	d014      	beq.n	80047ca <ADC_ConfigureBoostMode+0x10a>
 80047a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047a4:	d830      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 80047a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047aa:	d00e      	beq.n	80047ca <ADC_ConfigureBoostMode+0x10a>
 80047ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b0:	d82a      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 80047b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047b6:	d008      	beq.n	80047ca <ADC_ConfigureBoostMode+0x10a>
 80047b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047bc:	d824      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x148>
 80047be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047c2:	d002      	beq.n	80047ca <ADC_ConfigureBoostMode+0x10a>
 80047c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047c8:	d11e      	bne.n	8004808 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	0c9b      	lsrs	r3, r3, #18
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	60fb      	str	r3, [r7, #12]
        break;
 80047da:	e016      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	60fb      	str	r3, [r7, #12]
        break;
 80047e2:	e012      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	60fb      	str	r3, [r7, #12]
        break;
 80047ea:	e00e      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	099b      	lsrs	r3, r3, #6
 80047f0:	60fb      	str	r3, [r7, #12]
        break;
 80047f2:	e00a      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	09db      	lsrs	r3, r3, #7
 80047f8:	60fb      	str	r3, [r7, #12]
        break;
 80047fa:	e006      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	60fb      	str	r3, [r7, #12]
        break;
 8004802:	e002      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004808:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a1f      	ldr	r2, [pc, #124]	@ (8004890 <ADC_ConfigureBoostMode+0x1d0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d808      	bhi.n	800482a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004826:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004828:	e025      	b.n	8004876 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a19      	ldr	r2, [pc, #100]	@ (8004894 <ADC_ConfigureBoostMode+0x1d4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d80a      	bhi.n	8004848 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004844:	609a      	str	r2, [r3, #8]
}
 8004846:	e016      	b.n	8004876 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4a13      	ldr	r2, [pc, #76]	@ (8004898 <ADC_ConfigureBoostMode+0x1d8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d80a      	bhi.n	8004866 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004862:	609a      	str	r2, [r3, #8]
}
 8004864:	e007      	b.n	8004876 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004874:	609a      	str	r2, [r3, #8]
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40022000 	.word	0x40022000
 8004884:	40022100 	.word	0x40022100
 8004888:	40022300 	.word	0x40022300
 800488c:	58026300 	.word	0x58026300
 8004890:	005f5e10 	.word	0x005f5e10
 8004894:	00bebc20 	.word	0x00bebc20
 8004898:	017d7840 	.word	0x017d7840

0800489c <LL_ADC_IsEnabled>:
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <LL_ADC_IsEnabled+0x18>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <LL_ADC_IsEnabled+0x1a>
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d101      	bne.n	80048da <LL_ADC_REG_IsConversionOngoing+0x18>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b0a3      	sub	sp, #140	@ 0x8c
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e0c1      	b.n	8004aee <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004972:	2300      	movs	r3, #0
 8004974:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004976:	2300      	movs	r3, #0
 8004978:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5e      	ldr	r2, [pc, #376]	@ (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d102      	bne.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004984:	4b5d      	ldr	r3, [pc, #372]	@ (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e001      	b.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0a0      	b.n	8004aee <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff ff87 	bl	80048c2 <LL_ADC_REG_IsConversionOngoing>
 80049b4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ff80 	bl	80048c2 <LL_ADC_REG_IsConversionOngoing>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 8081 	bne.w	8004acc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d17c      	bne.n	8004acc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a48      	ldr	r2, [pc, #288]	@ (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a46      	ldr	r2, [pc, #280]	@ (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80049e6:	4b46      	ldr	r3, [pc, #280]	@ (8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049e8:	e000      	b.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80049ea:	4b46      	ldr	r3, [pc, #280]	@ (8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049ec:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d039      	beq.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80049f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d004      	beq.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a39      	ldr	r2, [pc, #228]	@ (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d10e      	bne.n	8004a3a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a1c:	4836      	ldr	r0, [pc, #216]	@ (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a1e:	f7ff ff3d 	bl	800489c <LL_ADC_IsEnabled>
 8004a22:	4604      	mov	r4, r0
 8004a24:	4835      	ldr	r0, [pc, #212]	@ (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a26:	f7ff ff39 	bl	800489c <LL_ADC_IsEnabled>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4323      	orrs	r3, r4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	e008      	b.n	8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a3a:	4833      	ldr	r0, [pc, #204]	@ (8004b08 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a3c:	f7ff ff2e 	bl	800489c <LL_ADC_IsEnabled>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d047      	beq.n	8004ae0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	4b2d      	ldr	r3, [pc, #180]	@ (8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	6811      	ldr	r1, [r2, #0]
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	6892      	ldr	r2, [r2, #8]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	431a      	orrs	r2, r3
 8004a64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a66:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a68:	e03a      	b.n	8004ae0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1d      	ldr	r2, [pc, #116]	@ (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10e      	bne.n	8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004a8a:	481b      	ldr	r0, [pc, #108]	@ (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a8c:	f7ff ff06 	bl	800489c <LL_ADC_IsEnabled>
 8004a90:	4604      	mov	r4, r0
 8004a92:	481a      	ldr	r0, [pc, #104]	@ (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a94:	f7ff ff02 	bl	800489c <LL_ADC_IsEnabled>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4323      	orrs	r3, r4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e008      	b.n	8004aba <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004aa8:	4817      	ldr	r0, [pc, #92]	@ (8004b08 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004aaa:	f7ff fef7 	bl	800489c <LL_ADC_IsEnabled>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d010      	beq.n	8004ae0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ac8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aca:	e009      	b.n	8004ae0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad0:	f043 0220 	orr.w	r2, r3, #32
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004ade:	e000      	b.n	8004ae2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ae0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004aea:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	378c      	adds	r7, #140	@ 0x8c
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd90      	pop	{r4, r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40022000 	.word	0x40022000
 8004afc:	40022100 	.word	0x40022100
 8004b00:	40022300 	.word	0x40022300
 8004b04:	58026300 	.word	0x58026300
 8004b08:	58026000 	.word	0x58026000
 8004b0c:	fffff0e0 	.word	0xfffff0e0

08004b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <__NVIC_SetPriorityGrouping+0x40>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b38:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <__NVIC_SetPriorityGrouping+0x44>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b3e:	4a04      	ldr	r2, [pc, #16]	@ (8004b50 <__NVIC_SetPriorityGrouping+0x40>)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	60d3      	str	r3, [r2, #12]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	e000ed00 	.word	0xe000ed00
 8004b54:	05fa0000 	.word	0x05fa0000

08004b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b5c:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <__NVIC_GetPriorityGrouping+0x18>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f003 0307 	and.w	r3, r3, #7
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000ed00 	.word	0xe000ed00

08004b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	db0b      	blt.n	8004b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	4907      	ldr	r1, [pc, #28]	@ (8004bac <__NVIC_EnableIRQ+0x38>)
 8004b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2001      	movs	r0, #1
 8004b96:	fa00 f202 	lsl.w	r2, r0, r2
 8004b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	e000e100 	.word	0xe000e100

08004bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	6039      	str	r1, [r7, #0]
 8004bba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	db0a      	blt.n	8004bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	490c      	ldr	r1, [pc, #48]	@ (8004bfc <__NVIC_SetPriority+0x4c>)
 8004bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bce:	0112      	lsls	r2, r2, #4
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bd8:	e00a      	b.n	8004bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	4908      	ldr	r1, [pc, #32]	@ (8004c00 <__NVIC_SetPriority+0x50>)
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	3b04      	subs	r3, #4
 8004be8:	0112      	lsls	r2, r2, #4
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	440b      	add	r3, r1
 8004bee:	761a      	strb	r2, [r3, #24]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	e000e100 	.word	0xe000e100
 8004c00:	e000ed00 	.word	0xe000ed00

08004c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b089      	sub	sp, #36	@ 0x24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f1c3 0307 	rsb	r3, r3, #7
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	bf28      	it	cs
 8004c22:	2304      	movcs	r3, #4
 8004c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d902      	bls.n	8004c34 <NVIC_EncodePriority+0x30>
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3b03      	subs	r3, #3
 8004c32:	e000      	b.n	8004c36 <NVIC_EncodePriority+0x32>
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43da      	mvns	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	401a      	ands	r2, r3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	43d9      	mvns	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c5c:	4313      	orrs	r3, r2
         );
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3724      	adds	r7, #36	@ 0x24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c7c:	d301      	bcc.n	8004c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e00f      	b.n	8004ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c82:	4a0a      	ldr	r2, [pc, #40]	@ (8004cac <SysTick_Config+0x40>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c8a:	210f      	movs	r1, #15
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c90:	f7ff ff8e 	bl	8004bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c94:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <SysTick_Config+0x40>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c9a:	4b04      	ldr	r3, [pc, #16]	@ (8004cac <SysTick_Config+0x40>)
 8004c9c:	2207      	movs	r2, #7
 8004c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	e000e010 	.word	0xe000e010

08004cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ff29 	bl	8004b10 <__NVIC_SetPriorityGrouping>
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	4603      	mov	r3, r0
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cd4:	f7ff ff40 	bl	8004b58 <__NVIC_GetPriorityGrouping>
 8004cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	6978      	ldr	r0, [r7, #20]
 8004ce0:	f7ff ff90 	bl	8004c04 <NVIC_EncodePriority>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ff5f 	bl	8004bb0 <__NVIC_SetPriority>
}
 8004cf2:	bf00      	nop
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff33 	bl	8004b74 <__NVIC_EnableIRQ>
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff ffa4 	bl	8004c6c <SysTick_Config>
 8004d24:	4603      	mov	r3, r0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d38:	f7fd fe1c 	bl	8002974 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e312      	b.n	800536e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a66      	ldr	r2, [pc, #408]	@ (8004ee8 <HAL_DMA_Init+0x1b8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d04a      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a65      	ldr	r2, [pc, #404]	@ (8004eec <HAL_DMA_Init+0x1bc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d045      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a63      	ldr	r2, [pc, #396]	@ (8004ef0 <HAL_DMA_Init+0x1c0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d040      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a62      	ldr	r2, [pc, #392]	@ (8004ef4 <HAL_DMA_Init+0x1c4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d03b      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a60      	ldr	r2, [pc, #384]	@ (8004ef8 <HAL_DMA_Init+0x1c8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d036      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a5f      	ldr	r2, [pc, #380]	@ (8004efc <HAL_DMA_Init+0x1cc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d031      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a5d      	ldr	r2, [pc, #372]	@ (8004f00 <HAL_DMA_Init+0x1d0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d02c      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a5c      	ldr	r2, [pc, #368]	@ (8004f04 <HAL_DMA_Init+0x1d4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d027      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004f08 <HAL_DMA_Init+0x1d8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d022      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a59      	ldr	r2, [pc, #356]	@ (8004f0c <HAL_DMA_Init+0x1dc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d01d      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a57      	ldr	r2, [pc, #348]	@ (8004f10 <HAL_DMA_Init+0x1e0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a56      	ldr	r2, [pc, #344]	@ (8004f14 <HAL_DMA_Init+0x1e4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a54      	ldr	r2, [pc, #336]	@ (8004f18 <HAL_DMA_Init+0x1e8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a53      	ldr	r2, [pc, #332]	@ (8004f1c <HAL_DMA_Init+0x1ec>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a51      	ldr	r2, [pc, #324]	@ (8004f20 <HAL_DMA_Init+0x1f0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a50      	ldr	r2, [pc, #320]	@ (8004f24 <HAL_DMA_Init+0x1f4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d101      	bne.n	8004dec <HAL_DMA_Init+0xbc>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_DMA_Init+0xbe>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 813c 	beq.w	800506c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a37      	ldr	r2, [pc, #220]	@ (8004ee8 <HAL_DMA_Init+0x1b8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d04a      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a36      	ldr	r2, [pc, #216]	@ (8004eec <HAL_DMA_Init+0x1bc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d045      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a34      	ldr	r2, [pc, #208]	@ (8004ef0 <HAL_DMA_Init+0x1c0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d040      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a33      	ldr	r2, [pc, #204]	@ (8004ef4 <HAL_DMA_Init+0x1c4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d03b      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a31      	ldr	r2, [pc, #196]	@ (8004ef8 <HAL_DMA_Init+0x1c8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d036      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a30      	ldr	r2, [pc, #192]	@ (8004efc <HAL_DMA_Init+0x1cc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d031      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2e      	ldr	r2, [pc, #184]	@ (8004f00 <HAL_DMA_Init+0x1d0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02c      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004f04 <HAL_DMA_Init+0x1d4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d027      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	@ (8004f08 <HAL_DMA_Init+0x1d8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d022      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2a      	ldr	r2, [pc, #168]	@ (8004f0c <HAL_DMA_Init+0x1dc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01d      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a28      	ldr	r2, [pc, #160]	@ (8004f10 <HAL_DMA_Init+0x1e0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a27      	ldr	r2, [pc, #156]	@ (8004f14 <HAL_DMA_Init+0x1e4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a25      	ldr	r2, [pc, #148]	@ (8004f18 <HAL_DMA_Init+0x1e8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a24      	ldr	r2, [pc, #144]	@ (8004f1c <HAL_DMA_Init+0x1ec>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a22      	ldr	r2, [pc, #136]	@ (8004f20 <HAL_DMA_Init+0x1f0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a21      	ldr	r2, [pc, #132]	@ (8004f24 <HAL_DMA_Init+0x1f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d108      	bne.n	8004eb6 <HAL_DMA_Init+0x186>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e007      	b.n	8004ec6 <HAL_DMA_Init+0x196>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ec6:	e02f      	b.n	8004f28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ec8:	f7fd fd54 	bl	8002974 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d928      	bls.n	8004f28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e242      	b.n	800536e <HAL_DMA_Init+0x63e>
 8004ee8:	40020010 	.word	0x40020010
 8004eec:	40020028 	.word	0x40020028
 8004ef0:	40020040 	.word	0x40020040
 8004ef4:	40020058 	.word	0x40020058
 8004ef8:	40020070 	.word	0x40020070
 8004efc:	40020088 	.word	0x40020088
 8004f00:	400200a0 	.word	0x400200a0
 8004f04:	400200b8 	.word	0x400200b8
 8004f08:	40020410 	.word	0x40020410
 8004f0c:	40020428 	.word	0x40020428
 8004f10:	40020440 	.word	0x40020440
 8004f14:	40020458 	.word	0x40020458
 8004f18:	40020470 	.word	0x40020470
 8004f1c:	40020488 	.word	0x40020488
 8004f20:	400204a0 	.word	0x400204a0
 8004f24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1c8      	bne.n	8004ec8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4b83      	ldr	r3, [pc, #524]	@ (8005150 <HAL_DMA_Init+0x420>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d107      	bne.n	8004f8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	4313      	orrs	r3, r2
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b28      	cmp	r3, #40	@ 0x28
 8004f92:	d903      	bls.n	8004f9c <HAL_DMA_Init+0x26c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f9a:	d91f      	bls.n	8004fdc <HAL_DMA_Init+0x2ac>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fa2:	d903      	bls.n	8004fac <HAL_DMA_Init+0x27c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b42      	cmp	r3, #66	@ 0x42
 8004faa:	d917      	bls.n	8004fdc <HAL_DMA_Init+0x2ac>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b46      	cmp	r3, #70	@ 0x46
 8004fb2:	d903      	bls.n	8004fbc <HAL_DMA_Init+0x28c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b48      	cmp	r3, #72	@ 0x48
 8004fba:	d90f      	bls.n	8004fdc <HAL_DMA_Init+0x2ac>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b4e      	cmp	r3, #78	@ 0x4e
 8004fc2:	d903      	bls.n	8004fcc <HAL_DMA_Init+0x29c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b52      	cmp	r3, #82	@ 0x52
 8004fca:	d907      	bls.n	8004fdc <HAL_DMA_Init+0x2ac>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b73      	cmp	r3, #115	@ 0x73
 8004fd2:	d905      	bls.n	8004fe0 <HAL_DMA_Init+0x2b0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b77      	cmp	r3, #119	@ 0x77
 8004fda:	d801      	bhi.n	8004fe0 <HAL_DMA_Init+0x2b0>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_DMA_Init+0x2b2>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 0307 	bic.w	r3, r3, #7
 8005004:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	2b04      	cmp	r3, #4
 8005016:	d117      	bne.n	8005048 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 fdca 	bl	8006bc4 <DMA_CheckFifoParam>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2240      	movs	r2, #64	@ 0x40
 800503a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e192      	b.n	800536e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 fd05 	bl	8006a60 <DMA_CalcBaseAndBitshift>
 8005056:	4603      	mov	r3, r0
 8005058:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	223f      	movs	r2, #63	@ 0x3f
 8005064:	409a      	lsls	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	609a      	str	r2, [r3, #8]
 800506a:	e0c8      	b.n	80051fe <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a38      	ldr	r2, [pc, #224]	@ (8005154 <HAL_DMA_Init+0x424>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <HAL_DMA_Init+0x38c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a37      	ldr	r2, [pc, #220]	@ (8005158 <HAL_DMA_Init+0x428>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d01d      	beq.n	80050bc <HAL_DMA_Init+0x38c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a35      	ldr	r2, [pc, #212]	@ (800515c <HAL_DMA_Init+0x42c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <HAL_DMA_Init+0x38c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a34      	ldr	r2, [pc, #208]	@ (8005160 <HAL_DMA_Init+0x430>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_DMA_Init+0x38c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a32      	ldr	r2, [pc, #200]	@ (8005164 <HAL_DMA_Init+0x434>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_DMA_Init+0x38c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a31      	ldr	r2, [pc, #196]	@ (8005168 <HAL_DMA_Init+0x438>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_DMA_Init+0x38c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2f      	ldr	r2, [pc, #188]	@ (800516c <HAL_DMA_Init+0x43c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_DMA_Init+0x38c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005170 <HAL_DMA_Init+0x440>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_DMA_Init+0x390>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_DMA_Init+0x392>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8092 	beq.w	80051ec <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a21      	ldr	r2, [pc, #132]	@ (8005154 <HAL_DMA_Init+0x424>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d021      	beq.n	8005116 <HAL_DMA_Init+0x3e6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a20      	ldr	r2, [pc, #128]	@ (8005158 <HAL_DMA_Init+0x428>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01c      	beq.n	8005116 <HAL_DMA_Init+0x3e6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1e      	ldr	r2, [pc, #120]	@ (800515c <HAL_DMA_Init+0x42c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d017      	beq.n	8005116 <HAL_DMA_Init+0x3e6>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005160 <HAL_DMA_Init+0x430>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d012      	beq.n	8005116 <HAL_DMA_Init+0x3e6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005164 <HAL_DMA_Init+0x434>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00d      	beq.n	8005116 <HAL_DMA_Init+0x3e6>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005168 <HAL_DMA_Init+0x438>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d008      	beq.n	8005116 <HAL_DMA_Init+0x3e6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a18      	ldr	r2, [pc, #96]	@ (800516c <HAL_DMA_Init+0x43c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <HAL_DMA_Init+0x3e6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a17      	ldr	r2, [pc, #92]	@ (8005170 <HAL_DMA_Init+0x440>)
 8005114:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4b10      	ldr	r3, [pc, #64]	@ (8005174 <HAL_DMA_Init+0x444>)
 8005132:	4013      	ands	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b40      	cmp	r3, #64	@ 0x40
 800513c:	d01c      	beq.n	8005178 <HAL_DMA_Init+0x448>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b80      	cmp	r3, #128	@ 0x80
 8005144:	d102      	bne.n	800514c <HAL_DMA_Init+0x41c>
 8005146:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800514a:	e016      	b.n	800517a <HAL_DMA_Init+0x44a>
 800514c:	2300      	movs	r3, #0
 800514e:	e014      	b.n	800517a <HAL_DMA_Init+0x44a>
 8005150:	fe10803f 	.word	0xfe10803f
 8005154:	58025408 	.word	0x58025408
 8005158:	5802541c 	.word	0x5802541c
 800515c:	58025430 	.word	0x58025430
 8005160:	58025444 	.word	0x58025444
 8005164:	58025458 	.word	0x58025458
 8005168:	5802546c 	.word	0x5802546c
 800516c:	58025480 	.word	0x58025480
 8005170:	58025494 	.word	0x58025494
 8005174:	fffe000f 	.word	0xfffe000f
 8005178:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68d2      	ldr	r2, [r2, #12]
 800517e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	4b6e      	ldr	r3, [pc, #440]	@ (8005378 <HAL_DMA_Init+0x648>)
 80051c0:	4413      	add	r3, r2
 80051c2:	4a6e      	ldr	r2, [pc, #440]	@ (800537c <HAL_DMA_Init+0x64c>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	009a      	lsls	r2, r3, #2
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 fc45 	bl	8006a60 <DMA_CalcBaseAndBitshift>
 80051d6:	4603      	mov	r3, r0
 80051d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2201      	movs	r2, #1
 80051e4:	409a      	lsls	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	e008      	b.n	80051fe <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2240      	movs	r2, #64	@ 0x40
 80051f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0b7      	b.n	800536e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a5f      	ldr	r2, [pc, #380]	@ (8005380 <HAL_DMA_Init+0x650>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d072      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a5d      	ldr	r2, [pc, #372]	@ (8005384 <HAL_DMA_Init+0x654>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d06d      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a5c      	ldr	r2, [pc, #368]	@ (8005388 <HAL_DMA_Init+0x658>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d068      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a5a      	ldr	r2, [pc, #360]	@ (800538c <HAL_DMA_Init+0x65c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d063      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a59      	ldr	r2, [pc, #356]	@ (8005390 <HAL_DMA_Init+0x660>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d05e      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a57      	ldr	r2, [pc, #348]	@ (8005394 <HAL_DMA_Init+0x664>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d059      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a56      	ldr	r2, [pc, #344]	@ (8005398 <HAL_DMA_Init+0x668>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d054      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a54      	ldr	r2, [pc, #336]	@ (800539c <HAL_DMA_Init+0x66c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d04f      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a53      	ldr	r2, [pc, #332]	@ (80053a0 <HAL_DMA_Init+0x670>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d04a      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a51      	ldr	r2, [pc, #324]	@ (80053a4 <HAL_DMA_Init+0x674>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d045      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a50      	ldr	r2, [pc, #320]	@ (80053a8 <HAL_DMA_Init+0x678>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d040      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a4e      	ldr	r2, [pc, #312]	@ (80053ac <HAL_DMA_Init+0x67c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d03b      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a4d      	ldr	r2, [pc, #308]	@ (80053b0 <HAL_DMA_Init+0x680>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d036      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a4b      	ldr	r2, [pc, #300]	@ (80053b4 <HAL_DMA_Init+0x684>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d031      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a4a      	ldr	r2, [pc, #296]	@ (80053b8 <HAL_DMA_Init+0x688>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d02c      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a48      	ldr	r2, [pc, #288]	@ (80053bc <HAL_DMA_Init+0x68c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d027      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a47      	ldr	r2, [pc, #284]	@ (80053c0 <HAL_DMA_Init+0x690>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a45      	ldr	r2, [pc, #276]	@ (80053c4 <HAL_DMA_Init+0x694>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01d      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a44      	ldr	r2, [pc, #272]	@ (80053c8 <HAL_DMA_Init+0x698>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a42      	ldr	r2, [pc, #264]	@ (80053cc <HAL_DMA_Init+0x69c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a41      	ldr	r2, [pc, #260]	@ (80053d0 <HAL_DMA_Init+0x6a0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a3f      	ldr	r2, [pc, #252]	@ (80053d4 <HAL_DMA_Init+0x6a4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3e      	ldr	r2, [pc, #248]	@ (80053d8 <HAL_DMA_Init+0x6a8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_DMA_Init+0x5be>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3c      	ldr	r2, [pc, #240]	@ (80053dc <HAL_DMA_Init+0x6ac>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_DMA_Init+0x5c2>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_DMA_Init+0x5c4>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d032      	beq.n	800535e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 fcdf 	bl	8006cbc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b80      	cmp	r3, #128	@ 0x80
 8005304:	d102      	bne.n	800530c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005320:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d010      	beq.n	800534c <HAL_DMA_Init+0x61c>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b08      	cmp	r3, #8
 8005330:	d80c      	bhi.n	800534c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 fd5c 	bl	8006df0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	e008      	b.n	800535e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	a7fdabf8 	.word	0xa7fdabf8
 800537c:	cccccccd 	.word	0xcccccccd
 8005380:	40020010 	.word	0x40020010
 8005384:	40020028 	.word	0x40020028
 8005388:	40020040 	.word	0x40020040
 800538c:	40020058 	.word	0x40020058
 8005390:	40020070 	.word	0x40020070
 8005394:	40020088 	.word	0x40020088
 8005398:	400200a0 	.word	0x400200a0
 800539c:	400200b8 	.word	0x400200b8
 80053a0:	40020410 	.word	0x40020410
 80053a4:	40020428 	.word	0x40020428
 80053a8:	40020440 	.word	0x40020440
 80053ac:	40020458 	.word	0x40020458
 80053b0:	40020470 	.word	0x40020470
 80053b4:	40020488 	.word	0x40020488
 80053b8:	400204a0 	.word	0x400204a0
 80053bc:	400204b8 	.word	0x400204b8
 80053c0:	58025408 	.word	0x58025408
 80053c4:	5802541c 	.word	0x5802541c
 80053c8:	58025430 	.word	0x58025430
 80053cc:	58025444 	.word	0x58025444
 80053d0:	58025458 	.word	0x58025458
 80053d4:	5802546c 	.word	0x5802546c
 80053d8:	58025480 	.word	0x58025480
 80053dc:	58025494 	.word	0x58025494

080053e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e226      	b.n	800584a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_DMA_Start_IT+0x2a>
 8005406:	2302      	movs	r3, #2
 8005408:	e21f      	b.n	800584a <HAL_DMA_Start_IT+0x46a>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	f040 820a 	bne.w	8005834 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a68      	ldr	r2, [pc, #416]	@ (80055d4 <HAL_DMA_Start_IT+0x1f4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d04a      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a66      	ldr	r2, [pc, #408]	@ (80055d8 <HAL_DMA_Start_IT+0x1f8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d045      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a65      	ldr	r2, [pc, #404]	@ (80055dc <HAL_DMA_Start_IT+0x1fc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d040      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a63      	ldr	r2, [pc, #396]	@ (80055e0 <HAL_DMA_Start_IT+0x200>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d03b      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a62      	ldr	r2, [pc, #392]	@ (80055e4 <HAL_DMA_Start_IT+0x204>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d036      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a60      	ldr	r2, [pc, #384]	@ (80055e8 <HAL_DMA_Start_IT+0x208>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d031      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a5f      	ldr	r2, [pc, #380]	@ (80055ec <HAL_DMA_Start_IT+0x20c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d02c      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5d      	ldr	r2, [pc, #372]	@ (80055f0 <HAL_DMA_Start_IT+0x210>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d027      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a5c      	ldr	r2, [pc, #368]	@ (80055f4 <HAL_DMA_Start_IT+0x214>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a5a      	ldr	r2, [pc, #360]	@ (80055f8 <HAL_DMA_Start_IT+0x218>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01d      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a59      	ldr	r2, [pc, #356]	@ (80055fc <HAL_DMA_Start_IT+0x21c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a57      	ldr	r2, [pc, #348]	@ (8005600 <HAL_DMA_Start_IT+0x220>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a56      	ldr	r2, [pc, #344]	@ (8005604 <HAL_DMA_Start_IT+0x224>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a54      	ldr	r2, [pc, #336]	@ (8005608 <HAL_DMA_Start_IT+0x228>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a53      	ldr	r2, [pc, #332]	@ (800560c <HAL_DMA_Start_IT+0x22c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_DMA_Start_IT+0xee>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a51      	ldr	r2, [pc, #324]	@ (8005610 <HAL_DMA_Start_IT+0x230>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d108      	bne.n	80054e0 <HAL_DMA_Start_IT+0x100>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e007      	b.n	80054f0 <HAL_DMA_Start_IT+0x110>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f001 f906 	bl	8006708 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a34      	ldr	r2, [pc, #208]	@ (80055d4 <HAL_DMA_Start_IT+0x1f4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d04a      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a33      	ldr	r2, [pc, #204]	@ (80055d8 <HAL_DMA_Start_IT+0x1f8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d045      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a31      	ldr	r2, [pc, #196]	@ (80055dc <HAL_DMA_Start_IT+0x1fc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d040      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a30      	ldr	r2, [pc, #192]	@ (80055e0 <HAL_DMA_Start_IT+0x200>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d03b      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2e      	ldr	r2, [pc, #184]	@ (80055e4 <HAL_DMA_Start_IT+0x204>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d036      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2d      	ldr	r2, [pc, #180]	@ (80055e8 <HAL_DMA_Start_IT+0x208>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d031      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a2b      	ldr	r2, [pc, #172]	@ (80055ec <HAL_DMA_Start_IT+0x20c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d02c      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a2a      	ldr	r2, [pc, #168]	@ (80055f0 <HAL_DMA_Start_IT+0x210>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d027      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a28      	ldr	r2, [pc, #160]	@ (80055f4 <HAL_DMA_Start_IT+0x214>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d022      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a27      	ldr	r2, [pc, #156]	@ (80055f8 <HAL_DMA_Start_IT+0x218>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d01d      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a25      	ldr	r2, [pc, #148]	@ (80055fc <HAL_DMA_Start_IT+0x21c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d018      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a24      	ldr	r2, [pc, #144]	@ (8005600 <HAL_DMA_Start_IT+0x220>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a22      	ldr	r2, [pc, #136]	@ (8005604 <HAL_DMA_Start_IT+0x224>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00e      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a21      	ldr	r2, [pc, #132]	@ (8005608 <HAL_DMA_Start_IT+0x228>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d009      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1f      	ldr	r2, [pc, #124]	@ (800560c <HAL_DMA_Start_IT+0x22c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_DMA_Start_IT+0x1bc>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1e      	ldr	r2, [pc, #120]	@ (8005610 <HAL_DMA_Start_IT+0x230>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d101      	bne.n	80055a0 <HAL_DMA_Start_IT+0x1c0>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <HAL_DMA_Start_IT+0x1c2>
 80055a0:	2300      	movs	r3, #0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d036      	beq.n	8005614 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 021e 	bic.w	r2, r3, #30
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0216 	orr.w	r2, r2, #22
 80055b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d03e      	beq.n	8005640 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0208 	orr.w	r2, r2, #8
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e035      	b.n	8005640 <HAL_DMA_Start_IT+0x260>
 80055d4:	40020010 	.word	0x40020010
 80055d8:	40020028 	.word	0x40020028
 80055dc:	40020040 	.word	0x40020040
 80055e0:	40020058 	.word	0x40020058
 80055e4:	40020070 	.word	0x40020070
 80055e8:	40020088 	.word	0x40020088
 80055ec:	400200a0 	.word	0x400200a0
 80055f0:	400200b8 	.word	0x400200b8
 80055f4:	40020410 	.word	0x40020410
 80055f8:	40020428 	.word	0x40020428
 80055fc:	40020440 	.word	0x40020440
 8005600:	40020458 	.word	0x40020458
 8005604:	40020470 	.word	0x40020470
 8005608:	40020488 	.word	0x40020488
 800560c:	400204a0 	.word	0x400204a0
 8005610:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 020e 	bic.w	r2, r3, #14
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 020a 	orr.w	r2, r2, #10
 8005626:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0204 	orr.w	r2, r2, #4
 800563e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a83      	ldr	r2, [pc, #524]	@ (8005854 <HAL_DMA_Start_IT+0x474>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d072      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a82      	ldr	r2, [pc, #520]	@ (8005858 <HAL_DMA_Start_IT+0x478>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d06d      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a80      	ldr	r2, [pc, #512]	@ (800585c <HAL_DMA_Start_IT+0x47c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d068      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a7f      	ldr	r2, [pc, #508]	@ (8005860 <HAL_DMA_Start_IT+0x480>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d063      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a7d      	ldr	r2, [pc, #500]	@ (8005864 <HAL_DMA_Start_IT+0x484>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d05e      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a7c      	ldr	r2, [pc, #496]	@ (8005868 <HAL_DMA_Start_IT+0x488>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d059      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a7a      	ldr	r2, [pc, #488]	@ (800586c <HAL_DMA_Start_IT+0x48c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d054      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a79      	ldr	r2, [pc, #484]	@ (8005870 <HAL_DMA_Start_IT+0x490>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d04f      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a77      	ldr	r2, [pc, #476]	@ (8005874 <HAL_DMA_Start_IT+0x494>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d04a      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a76      	ldr	r2, [pc, #472]	@ (8005878 <HAL_DMA_Start_IT+0x498>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d045      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a74      	ldr	r2, [pc, #464]	@ (800587c <HAL_DMA_Start_IT+0x49c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d040      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a73      	ldr	r2, [pc, #460]	@ (8005880 <HAL_DMA_Start_IT+0x4a0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d03b      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a71      	ldr	r2, [pc, #452]	@ (8005884 <HAL_DMA_Start_IT+0x4a4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d036      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a70      	ldr	r2, [pc, #448]	@ (8005888 <HAL_DMA_Start_IT+0x4a8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d031      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a6e      	ldr	r2, [pc, #440]	@ (800588c <HAL_DMA_Start_IT+0x4ac>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02c      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6d      	ldr	r2, [pc, #436]	@ (8005890 <HAL_DMA_Start_IT+0x4b0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d027      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005894 <HAL_DMA_Start_IT+0x4b4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005898 <HAL_DMA_Start_IT+0x4b8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01d      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a68      	ldr	r2, [pc, #416]	@ (800589c <HAL_DMA_Start_IT+0x4bc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a67      	ldr	r2, [pc, #412]	@ (80058a0 <HAL_DMA_Start_IT+0x4c0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a65      	ldr	r2, [pc, #404]	@ (80058a4 <HAL_DMA_Start_IT+0x4c4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a64      	ldr	r2, [pc, #400]	@ (80058a8 <HAL_DMA_Start_IT+0x4c8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a62      	ldr	r2, [pc, #392]	@ (80058ac <HAL_DMA_Start_IT+0x4cc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_DMA_Start_IT+0x350>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a61      	ldr	r2, [pc, #388]	@ (80058b0 <HAL_DMA_Start_IT+0x4d0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d101      	bne.n	8005734 <HAL_DMA_Start_IT+0x354>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_DMA_Start_IT+0x356>
 8005734:	2300      	movs	r3, #0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01a      	beq.n	8005770 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005756:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800576a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800576e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a37      	ldr	r2, [pc, #220]	@ (8005854 <HAL_DMA_Start_IT+0x474>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d04a      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a36      	ldr	r2, [pc, #216]	@ (8005858 <HAL_DMA_Start_IT+0x478>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d045      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a34      	ldr	r2, [pc, #208]	@ (800585c <HAL_DMA_Start_IT+0x47c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d040      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a33      	ldr	r2, [pc, #204]	@ (8005860 <HAL_DMA_Start_IT+0x480>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d03b      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a31      	ldr	r2, [pc, #196]	@ (8005864 <HAL_DMA_Start_IT+0x484>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d036      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a30      	ldr	r2, [pc, #192]	@ (8005868 <HAL_DMA_Start_IT+0x488>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d031      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2e      	ldr	r2, [pc, #184]	@ (800586c <HAL_DMA_Start_IT+0x48c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d02c      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005870 <HAL_DMA_Start_IT+0x490>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d027      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005874 <HAL_DMA_Start_IT+0x494>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d022      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005878 <HAL_DMA_Start_IT+0x498>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d01d      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a28      	ldr	r2, [pc, #160]	@ (800587c <HAL_DMA_Start_IT+0x49c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d018      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a27      	ldr	r2, [pc, #156]	@ (8005880 <HAL_DMA_Start_IT+0x4a0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a25      	ldr	r2, [pc, #148]	@ (8005884 <HAL_DMA_Start_IT+0x4a4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a24      	ldr	r2, [pc, #144]	@ (8005888 <HAL_DMA_Start_IT+0x4a8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a22      	ldr	r2, [pc, #136]	@ (800588c <HAL_DMA_Start_IT+0x4ac>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_DMA_Start_IT+0x430>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a21      	ldr	r2, [pc, #132]	@ (8005890 <HAL_DMA_Start_IT+0x4b0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d108      	bne.n	8005822 <HAL_DMA_Start_IT+0x442>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e012      	b.n	8005848 <HAL_DMA_Start_IT+0x468>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	e009      	b.n	8005848 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40020010 	.word	0x40020010
 8005858:	40020028 	.word	0x40020028
 800585c:	40020040 	.word	0x40020040
 8005860:	40020058 	.word	0x40020058
 8005864:	40020070 	.word	0x40020070
 8005868:	40020088 	.word	0x40020088
 800586c:	400200a0 	.word	0x400200a0
 8005870:	400200b8 	.word	0x400200b8
 8005874:	40020410 	.word	0x40020410
 8005878:	40020428 	.word	0x40020428
 800587c:	40020440 	.word	0x40020440
 8005880:	40020458 	.word	0x40020458
 8005884:	40020470 	.word	0x40020470
 8005888:	40020488 	.word	0x40020488
 800588c:	400204a0 	.word	0x400204a0
 8005890:	400204b8 	.word	0x400204b8
 8005894:	58025408 	.word	0x58025408
 8005898:	5802541c 	.word	0x5802541c
 800589c:	58025430 	.word	0x58025430
 80058a0:	58025444 	.word	0x58025444
 80058a4:	58025458 	.word	0x58025458
 80058a8:	5802546c 	.word	0x5802546c
 80058ac:	58025480 	.word	0x58025480
 80058b0:	58025494 	.word	0x58025494

080058b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	@ 0x28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058c0:	4b67      	ldr	r3, [pc, #412]	@ (8005a60 <HAL_DMA_IRQHandler+0x1ac>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a67      	ldr	r2, [pc, #412]	@ (8005a64 <HAL_DMA_IRQHandler+0x1b0>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	0a9b      	lsrs	r3, r3, #10
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a5f      	ldr	r2, [pc, #380]	@ (8005a68 <HAL_DMA_IRQHandler+0x1b4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d04a      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a5d      	ldr	r2, [pc, #372]	@ (8005a6c <HAL_DMA_IRQHandler+0x1b8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d045      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005a70 <HAL_DMA_IRQHandler+0x1bc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d040      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a5a      	ldr	r2, [pc, #360]	@ (8005a74 <HAL_DMA_IRQHandler+0x1c0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d03b      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a59      	ldr	r2, [pc, #356]	@ (8005a78 <HAL_DMA_IRQHandler+0x1c4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d036      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a57      	ldr	r2, [pc, #348]	@ (8005a7c <HAL_DMA_IRQHandler+0x1c8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d031      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a56      	ldr	r2, [pc, #344]	@ (8005a80 <HAL_DMA_IRQHandler+0x1cc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d02c      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a54      	ldr	r2, [pc, #336]	@ (8005a84 <HAL_DMA_IRQHandler+0x1d0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d027      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a53      	ldr	r2, [pc, #332]	@ (8005a88 <HAL_DMA_IRQHandler+0x1d4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d022      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a51      	ldr	r2, [pc, #324]	@ (8005a8c <HAL_DMA_IRQHandler+0x1d8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01d      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a50      	ldr	r2, [pc, #320]	@ (8005a90 <HAL_DMA_IRQHandler+0x1dc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d018      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a4e      	ldr	r2, [pc, #312]	@ (8005a94 <HAL_DMA_IRQHandler+0x1e0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a4d      	ldr	r2, [pc, #308]	@ (8005a98 <HAL_DMA_IRQHandler+0x1e4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00e      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a4b      	ldr	r2, [pc, #300]	@ (8005a9c <HAL_DMA_IRQHandler+0x1e8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a4a      	ldr	r2, [pc, #296]	@ (8005aa0 <HAL_DMA_IRQHandler+0x1ec>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_DMA_IRQHandler+0xd2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a48      	ldr	r2, [pc, #288]	@ (8005aa4 <HAL_DMA_IRQHandler+0x1f0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d101      	bne.n	800598a <HAL_DMA_IRQHandler+0xd6>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <HAL_DMA_IRQHandler+0xd8>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 842b 	beq.w	80061e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2208      	movs	r2, #8
 800599c:	409a      	lsls	r2, r3
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80a2 	beq.w	8005aec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005a68 <HAL_DMA_IRQHandler+0x1b4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d04a      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a2d      	ldr	r2, [pc, #180]	@ (8005a6c <HAL_DMA_IRQHandler+0x1b8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d045      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a70 <HAL_DMA_IRQHandler+0x1bc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d040      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005a74 <HAL_DMA_IRQHandler+0x1c0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d03b      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a28      	ldr	r2, [pc, #160]	@ (8005a78 <HAL_DMA_IRQHandler+0x1c4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d036      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a27      	ldr	r2, [pc, #156]	@ (8005a7c <HAL_DMA_IRQHandler+0x1c8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d031      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a25      	ldr	r2, [pc, #148]	@ (8005a80 <HAL_DMA_IRQHandler+0x1cc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d02c      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a24      	ldr	r2, [pc, #144]	@ (8005a84 <HAL_DMA_IRQHandler+0x1d0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d027      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a22      	ldr	r2, [pc, #136]	@ (8005a88 <HAL_DMA_IRQHandler+0x1d4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d022      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a21      	ldr	r2, [pc, #132]	@ (8005a8c <HAL_DMA_IRQHandler+0x1d8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d01d      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <HAL_DMA_IRQHandler+0x1dc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a94 <HAL_DMA_IRQHandler+0x1e0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <HAL_DMA_IRQHandler+0x1e4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <HAL_DMA_IRQHandler+0x1e8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a19      	ldr	r2, [pc, #100]	@ (8005aa0 <HAL_DMA_IRQHandler+0x1ec>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x194>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a18      	ldr	r2, [pc, #96]	@ (8005aa4 <HAL_DMA_IRQHandler+0x1f0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d12f      	bne.n	8005aa8 <HAL_DMA_IRQHandler+0x1f4>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e02e      	b.n	8005abc <HAL_DMA_IRQHandler+0x208>
 8005a5e:	bf00      	nop
 8005a60:	2400000c 	.word	0x2400000c
 8005a64:	1b4e81b5 	.word	0x1b4e81b5
 8005a68:	40020010 	.word	0x40020010
 8005a6c:	40020028 	.word	0x40020028
 8005a70:	40020040 	.word	0x40020040
 8005a74:	40020058 	.word	0x40020058
 8005a78:	40020070 	.word	0x40020070
 8005a7c:	40020088 	.word	0x40020088
 8005a80:	400200a0 	.word	0x400200a0
 8005a84:	400200b8 	.word	0x400200b8
 8005a88:	40020410 	.word	0x40020410
 8005a8c:	40020428 	.word	0x40020428
 8005a90:	40020440 	.word	0x40020440
 8005a94:	40020458 	.word	0x40020458
 8005a98:	40020470 	.word	0x40020470
 8005a9c:	40020488 	.word	0x40020488
 8005aa0:	400204a0 	.word	0x400204a0
 8005aa4:	400204b8 	.word	0x400204b8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bf14      	ite	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	2300      	moveq	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d015      	beq.n	8005aec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0204 	bic.w	r2, r2, #4
 8005ace:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	2208      	movs	r2, #8
 8005ada:	409a      	lsls	r2, r3
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae4:	f043 0201 	orr.w	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d06e      	beq.n	8005be0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a69      	ldr	r2, [pc, #420]	@ (8005cac <HAL_DMA_IRQHandler+0x3f8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d04a      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a67      	ldr	r2, [pc, #412]	@ (8005cb0 <HAL_DMA_IRQHandler+0x3fc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d045      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a66      	ldr	r2, [pc, #408]	@ (8005cb4 <HAL_DMA_IRQHandler+0x400>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d040      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a64      	ldr	r2, [pc, #400]	@ (8005cb8 <HAL_DMA_IRQHandler+0x404>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d03b      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a63      	ldr	r2, [pc, #396]	@ (8005cbc <HAL_DMA_IRQHandler+0x408>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d036      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a61      	ldr	r2, [pc, #388]	@ (8005cc0 <HAL_DMA_IRQHandler+0x40c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d031      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a60      	ldr	r2, [pc, #384]	@ (8005cc4 <HAL_DMA_IRQHandler+0x410>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d02c      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005cc8 <HAL_DMA_IRQHandler+0x414>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d027      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5d      	ldr	r2, [pc, #372]	@ (8005ccc <HAL_DMA_IRQHandler+0x418>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d022      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5b      	ldr	r2, [pc, #364]	@ (8005cd0 <HAL_DMA_IRQHandler+0x41c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01d      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a5a      	ldr	r2, [pc, #360]	@ (8005cd4 <HAL_DMA_IRQHandler+0x420>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d018      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a58      	ldr	r2, [pc, #352]	@ (8005cd8 <HAL_DMA_IRQHandler+0x424>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a57      	ldr	r2, [pc, #348]	@ (8005cdc <HAL_DMA_IRQHandler+0x428>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a55      	ldr	r2, [pc, #340]	@ (8005ce0 <HAL_DMA_IRQHandler+0x42c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a54      	ldr	r2, [pc, #336]	@ (8005ce4 <HAL_DMA_IRQHandler+0x430>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2ee>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a52      	ldr	r2, [pc, #328]	@ (8005ce8 <HAL_DMA_IRQHandler+0x434>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d10a      	bne.n	8005bb8 <HAL_DMA_IRQHandler+0x304>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	bf14      	ite	ne
 8005bb0:	2301      	movne	r3, #1
 8005bb2:	2300      	moveq	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e003      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x30c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00d      	beq.n	8005be0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2201      	movs	r2, #1
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd8:	f043 0202 	orr.w	r2, r3, #2
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2204      	movs	r2, #4
 8005bea:	409a      	lsls	r2, r3
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 808f 	beq.w	8005d14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8005cac <HAL_DMA_IRQHandler+0x3f8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04a      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a2a      	ldr	r2, [pc, #168]	@ (8005cb0 <HAL_DMA_IRQHandler+0x3fc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d045      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a29      	ldr	r2, [pc, #164]	@ (8005cb4 <HAL_DMA_IRQHandler+0x400>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d040      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a27      	ldr	r2, [pc, #156]	@ (8005cb8 <HAL_DMA_IRQHandler+0x404>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03b      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a26      	ldr	r2, [pc, #152]	@ (8005cbc <HAL_DMA_IRQHandler+0x408>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d036      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a24      	ldr	r2, [pc, #144]	@ (8005cc0 <HAL_DMA_IRQHandler+0x40c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d031      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a23      	ldr	r2, [pc, #140]	@ (8005cc4 <HAL_DMA_IRQHandler+0x410>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d02c      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a21      	ldr	r2, [pc, #132]	@ (8005cc8 <HAL_DMA_IRQHandler+0x414>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d027      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a20      	ldr	r2, [pc, #128]	@ (8005ccc <HAL_DMA_IRQHandler+0x418>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd0 <HAL_DMA_IRQHandler+0x41c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <HAL_DMA_IRQHandler+0x420>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd8 <HAL_DMA_IRQHandler+0x424>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1a      	ldr	r2, [pc, #104]	@ (8005cdc <HAL_DMA_IRQHandler+0x428>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a18      	ldr	r2, [pc, #96]	@ (8005ce0 <HAL_DMA_IRQHandler+0x42c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a17      	ldr	r2, [pc, #92]	@ (8005ce4 <HAL_DMA_IRQHandler+0x430>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x3e2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <HAL_DMA_IRQHandler+0x434>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d12a      	bne.n	8005cec <HAL_DMA_IRQHandler+0x438>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e023      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x440>
 8005cac:	40020010 	.word	0x40020010
 8005cb0:	40020028 	.word	0x40020028
 8005cb4:	40020040 	.word	0x40020040
 8005cb8:	40020058 	.word	0x40020058
 8005cbc:	40020070 	.word	0x40020070
 8005cc0:	40020088 	.word	0x40020088
 8005cc4:	400200a0 	.word	0x400200a0
 8005cc8:	400200b8 	.word	0x400200b8
 8005ccc:	40020410 	.word	0x40020410
 8005cd0:	40020428 	.word	0x40020428
 8005cd4:	40020440 	.word	0x40020440
 8005cd8:	40020458 	.word	0x40020458
 8005cdc:	40020470 	.word	0x40020470
 8005ce0:	40020488 	.word	0x40020488
 8005ce4:	400204a0 	.word	0x400204a0
 8005ce8:	400204b8 	.word	0x400204b8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00d      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	2204      	movs	r2, #4
 8005d02:	409a      	lsls	r2, r3
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0c:	f043 0204 	orr.w	r2, r3, #4
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80a6 	beq.w	8005e76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a85      	ldr	r2, [pc, #532]	@ (8005f44 <HAL_DMA_IRQHandler+0x690>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d04a      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a83      	ldr	r2, [pc, #524]	@ (8005f48 <HAL_DMA_IRQHandler+0x694>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d045      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a82      	ldr	r2, [pc, #520]	@ (8005f4c <HAL_DMA_IRQHandler+0x698>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d040      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a80      	ldr	r2, [pc, #512]	@ (8005f50 <HAL_DMA_IRQHandler+0x69c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d03b      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a7f      	ldr	r2, [pc, #508]	@ (8005f54 <HAL_DMA_IRQHandler+0x6a0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d036      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a7d      	ldr	r2, [pc, #500]	@ (8005f58 <HAL_DMA_IRQHandler+0x6a4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d031      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f5c <HAL_DMA_IRQHandler+0x6a8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d02c      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a7a      	ldr	r2, [pc, #488]	@ (8005f60 <HAL_DMA_IRQHandler+0x6ac>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d027      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a79      	ldr	r2, [pc, #484]	@ (8005f64 <HAL_DMA_IRQHandler+0x6b0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a77      	ldr	r2, [pc, #476]	@ (8005f68 <HAL_DMA_IRQHandler+0x6b4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01d      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a76      	ldr	r2, [pc, #472]	@ (8005f6c <HAL_DMA_IRQHandler+0x6b8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d018      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a74      	ldr	r2, [pc, #464]	@ (8005f70 <HAL_DMA_IRQHandler+0x6bc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a73      	ldr	r2, [pc, #460]	@ (8005f74 <HAL_DMA_IRQHandler+0x6c0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a71      	ldr	r2, [pc, #452]	@ (8005f78 <HAL_DMA_IRQHandler+0x6c4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a70      	ldr	r2, [pc, #448]	@ (8005f7c <HAL_DMA_IRQHandler+0x6c8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_DMA_IRQHandler+0x516>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6e      	ldr	r2, [pc, #440]	@ (8005f80 <HAL_DMA_IRQHandler+0x6cc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10a      	bne.n	8005de0 <HAL_DMA_IRQHandler+0x52c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e009      	b.n	8005df4 <HAL_DMA_IRQHandler+0x540>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf14      	ite	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	2300      	moveq	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d03e      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2210      	movs	r2, #16
 8005e02:	409a      	lsls	r2, r3
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d018      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d108      	bne.n	8005e36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d024      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
 8005e34:	e01f      	b.n	8005e76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01b      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
 8005e46:	e016      	b.n	8005e76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d107      	bne.n	8005e66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0208 	bic.w	r2, r2, #8
 8005e64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2220      	movs	r2, #32
 8005e80:	409a      	lsls	r2, r3
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8110 	beq.w	80060ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2c      	ldr	r2, [pc, #176]	@ (8005f44 <HAL_DMA_IRQHandler+0x690>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d04a      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f48 <HAL_DMA_IRQHandler+0x694>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d045      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a29      	ldr	r2, [pc, #164]	@ (8005f4c <HAL_DMA_IRQHandler+0x698>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d040      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a28      	ldr	r2, [pc, #160]	@ (8005f50 <HAL_DMA_IRQHandler+0x69c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d03b      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <HAL_DMA_IRQHandler+0x6a0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d036      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a25      	ldr	r2, [pc, #148]	@ (8005f58 <HAL_DMA_IRQHandler+0x6a4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d031      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a23      	ldr	r2, [pc, #140]	@ (8005f5c <HAL_DMA_IRQHandler+0x6a8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d02c      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <HAL_DMA_IRQHandler+0x6ac>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d027      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	@ (8005f64 <HAL_DMA_IRQHandler+0x6b0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1f      	ldr	r2, [pc, #124]	@ (8005f68 <HAL_DMA_IRQHandler+0x6b4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d01d      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f6c <HAL_DMA_IRQHandler+0x6b8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	@ (8005f70 <HAL_DMA_IRQHandler+0x6bc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1a      	ldr	r2, [pc, #104]	@ (8005f74 <HAL_DMA_IRQHandler+0x6c0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a19      	ldr	r2, [pc, #100]	@ (8005f78 <HAL_DMA_IRQHandler+0x6c4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a17      	ldr	r2, [pc, #92]	@ (8005f7c <HAL_DMA_IRQHandler+0x6c8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x678>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a16      	ldr	r2, [pc, #88]	@ (8005f80 <HAL_DMA_IRQHandler+0x6cc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d12b      	bne.n	8005f84 <HAL_DMA_IRQHandler+0x6d0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bf14      	ite	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	2300      	moveq	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	e02a      	b.n	8005f98 <HAL_DMA_IRQHandler+0x6e4>
 8005f42:	bf00      	nop
 8005f44:	40020010 	.word	0x40020010
 8005f48:	40020028 	.word	0x40020028
 8005f4c:	40020040 	.word	0x40020040
 8005f50:	40020058 	.word	0x40020058
 8005f54:	40020070 	.word	0x40020070
 8005f58:	40020088 	.word	0x40020088
 8005f5c:	400200a0 	.word	0x400200a0
 8005f60:	400200b8 	.word	0x400200b8
 8005f64:	40020410 	.word	0x40020410
 8005f68:	40020428 	.word	0x40020428
 8005f6c:	40020440 	.word	0x40020440
 8005f70:	40020458 	.word	0x40020458
 8005f74:	40020470 	.word	0x40020470
 8005f78:	40020488 	.word	0x40020488
 8005f7c:	400204a0 	.word	0x400204a0
 8005f80:	400204b8 	.word	0x400204b8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf14      	ite	ne
 8005f92:	2301      	movne	r3, #1
 8005f94:	2300      	moveq	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8087 	beq.w	80060ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	409a      	lsls	r2, r3
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d139      	bne.n	800602e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0216 	bic.w	r2, r2, #22
 8005fc8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695a      	ldr	r2, [r3, #20]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fd8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d103      	bne.n	8005fea <HAL_DMA_IRQHandler+0x736>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0208 	bic.w	r2, r2, #8
 8005ff8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	223f      	movs	r2, #63	@ 0x3f
 8006004:	409a      	lsls	r2, r3
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 834a 	beq.w	80066b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
          }
          return;
 800602c:	e344      	b.n	80066b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d018      	beq.n	800606e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d108      	bne.n	800605c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	2b00      	cmp	r3, #0
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
 800605a:	e027      	b.n	80060ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d023      	beq.n	80060ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
 800606c:	e01e      	b.n	80060ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10f      	bne.n	800609c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0210 	bic.w	r2, r2, #16
 800608a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8306 	beq.w	80066c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8088 	beq.w	80061d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2204      	movs	r2, #4
 80060c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a7a      	ldr	r2, [pc, #488]	@ (80062bc <HAL_DMA_IRQHandler+0xa08>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d04a      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a79      	ldr	r2, [pc, #484]	@ (80062c0 <HAL_DMA_IRQHandler+0xa0c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d045      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a77      	ldr	r2, [pc, #476]	@ (80062c4 <HAL_DMA_IRQHandler+0xa10>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d040      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a76      	ldr	r2, [pc, #472]	@ (80062c8 <HAL_DMA_IRQHandler+0xa14>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d03b      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a74      	ldr	r2, [pc, #464]	@ (80062cc <HAL_DMA_IRQHandler+0xa18>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d036      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a73      	ldr	r2, [pc, #460]	@ (80062d0 <HAL_DMA_IRQHandler+0xa1c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d031      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a71      	ldr	r2, [pc, #452]	@ (80062d4 <HAL_DMA_IRQHandler+0xa20>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02c      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a70      	ldr	r2, [pc, #448]	@ (80062d8 <HAL_DMA_IRQHandler+0xa24>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d027      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a6e      	ldr	r2, [pc, #440]	@ (80062dc <HAL_DMA_IRQHandler+0xa28>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d022      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a6d      	ldr	r2, [pc, #436]	@ (80062e0 <HAL_DMA_IRQHandler+0xa2c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d01d      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a6b      	ldr	r2, [pc, #428]	@ (80062e4 <HAL_DMA_IRQHandler+0xa30>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a6a      	ldr	r2, [pc, #424]	@ (80062e8 <HAL_DMA_IRQHandler+0xa34>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a68      	ldr	r2, [pc, #416]	@ (80062ec <HAL_DMA_IRQHandler+0xa38>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a67      	ldr	r2, [pc, #412]	@ (80062f0 <HAL_DMA_IRQHandler+0xa3c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a65      	ldr	r2, [pc, #404]	@ (80062f4 <HAL_DMA_IRQHandler+0xa40>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_DMA_IRQHandler+0x8b8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a64      	ldr	r2, [pc, #400]	@ (80062f8 <HAL_DMA_IRQHandler+0xa44>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d108      	bne.n	800617e <HAL_DMA_IRQHandler+0x8ca>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	e007      	b.n	800618e <HAL_DMA_IRQHandler+0x8da>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3301      	adds	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006196:	429a      	cmp	r2, r3
 8006198:	d307      	bcc.n	80061aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f2      	bne.n	800618e <HAL_DMA_IRQHandler+0x8da>
 80061a8:	e000      	b.n	80061ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80061aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2203      	movs	r2, #3
 80061be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80061c2:	e003      	b.n	80061cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8272 	beq.w	80066c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
 80061e6:	e26c      	b.n	80066c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a43      	ldr	r2, [pc, #268]	@ (80062fc <HAL_DMA_IRQHandler+0xa48>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d022      	beq.n	8006238 <HAL_DMA_IRQHandler+0x984>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a42      	ldr	r2, [pc, #264]	@ (8006300 <HAL_DMA_IRQHandler+0xa4c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d01d      	beq.n	8006238 <HAL_DMA_IRQHandler+0x984>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a40      	ldr	r2, [pc, #256]	@ (8006304 <HAL_DMA_IRQHandler+0xa50>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d018      	beq.n	8006238 <HAL_DMA_IRQHandler+0x984>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a3f      	ldr	r2, [pc, #252]	@ (8006308 <HAL_DMA_IRQHandler+0xa54>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d013      	beq.n	8006238 <HAL_DMA_IRQHandler+0x984>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a3d      	ldr	r2, [pc, #244]	@ (800630c <HAL_DMA_IRQHandler+0xa58>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00e      	beq.n	8006238 <HAL_DMA_IRQHandler+0x984>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a3c      	ldr	r2, [pc, #240]	@ (8006310 <HAL_DMA_IRQHandler+0xa5c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d009      	beq.n	8006238 <HAL_DMA_IRQHandler+0x984>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3a      	ldr	r2, [pc, #232]	@ (8006314 <HAL_DMA_IRQHandler+0xa60>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d004      	beq.n	8006238 <HAL_DMA_IRQHandler+0x984>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a39      	ldr	r2, [pc, #228]	@ (8006318 <HAL_DMA_IRQHandler+0xa64>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d101      	bne.n	800623c <HAL_DMA_IRQHandler+0x988>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <HAL_DMA_IRQHandler+0x98a>
 800623c:	2300      	movs	r3, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 823f 	beq.w	80066c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	2204      	movs	r2, #4
 8006256:	409a      	lsls	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80cd 	beq.w	80063fc <HAL_DMA_IRQHandler+0xb48>
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80c7 	beq.w	80063fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2204      	movs	r2, #4
 8006278:	409a      	lsls	r2, r3
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d049      	beq.n	800631c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8210 	beq.w	80066bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062a4:	e20a      	b.n	80066bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8206 	beq.w	80066bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062b8:	e200      	b.n	80066bc <HAL_DMA_IRQHandler+0xe08>
 80062ba:	bf00      	nop
 80062bc:	40020010 	.word	0x40020010
 80062c0:	40020028 	.word	0x40020028
 80062c4:	40020040 	.word	0x40020040
 80062c8:	40020058 	.word	0x40020058
 80062cc:	40020070 	.word	0x40020070
 80062d0:	40020088 	.word	0x40020088
 80062d4:	400200a0 	.word	0x400200a0
 80062d8:	400200b8 	.word	0x400200b8
 80062dc:	40020410 	.word	0x40020410
 80062e0:	40020428 	.word	0x40020428
 80062e4:	40020440 	.word	0x40020440
 80062e8:	40020458 	.word	0x40020458
 80062ec:	40020470 	.word	0x40020470
 80062f0:	40020488 	.word	0x40020488
 80062f4:	400204a0 	.word	0x400204a0
 80062f8:	400204b8 	.word	0x400204b8
 80062fc:	58025408 	.word	0x58025408
 8006300:	5802541c 	.word	0x5802541c
 8006304:	58025430 	.word	0x58025430
 8006308:	58025444 	.word	0x58025444
 800630c:	58025458 	.word	0x58025458
 8006310:	5802546c 	.word	0x5802546c
 8006314:	58025480 	.word	0x58025480
 8006318:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d160      	bne.n	80063e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a7f      	ldr	r2, [pc, #508]	@ (8006528 <HAL_DMA_IRQHandler+0xc74>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d04a      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a7d      	ldr	r2, [pc, #500]	@ (800652c <HAL_DMA_IRQHandler+0xc78>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d045      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7c      	ldr	r2, [pc, #496]	@ (8006530 <HAL_DMA_IRQHandler+0xc7c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d040      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a7a      	ldr	r2, [pc, #488]	@ (8006534 <HAL_DMA_IRQHandler+0xc80>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d03b      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a79      	ldr	r2, [pc, #484]	@ (8006538 <HAL_DMA_IRQHandler+0xc84>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d036      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a77      	ldr	r2, [pc, #476]	@ (800653c <HAL_DMA_IRQHandler+0xc88>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d031      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a76      	ldr	r2, [pc, #472]	@ (8006540 <HAL_DMA_IRQHandler+0xc8c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d02c      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a74      	ldr	r2, [pc, #464]	@ (8006544 <HAL_DMA_IRQHandler+0xc90>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d027      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a73      	ldr	r2, [pc, #460]	@ (8006548 <HAL_DMA_IRQHandler+0xc94>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d022      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a71      	ldr	r2, [pc, #452]	@ (800654c <HAL_DMA_IRQHandler+0xc98>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01d      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a70      	ldr	r2, [pc, #448]	@ (8006550 <HAL_DMA_IRQHandler+0xc9c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d018      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a6e      	ldr	r2, [pc, #440]	@ (8006554 <HAL_DMA_IRQHandler+0xca0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a6d      	ldr	r2, [pc, #436]	@ (8006558 <HAL_DMA_IRQHandler+0xca4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00e      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a6b      	ldr	r2, [pc, #428]	@ (800655c <HAL_DMA_IRQHandler+0xca8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a6a      	ldr	r2, [pc, #424]	@ (8006560 <HAL_DMA_IRQHandler+0xcac>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xb12>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a68      	ldr	r2, [pc, #416]	@ (8006564 <HAL_DMA_IRQHandler+0xcb0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d108      	bne.n	80063d8 <HAL_DMA_IRQHandler+0xb24>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0208 	bic.w	r2, r2, #8
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e007      	b.n	80063e8 <HAL_DMA_IRQHandler+0xb34>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0204 	bic.w	r2, r2, #4
 80063e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8165 	beq.w	80066bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063fa:	e15f      	b.n	80066bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2202      	movs	r2, #2
 8006406:	409a      	lsls	r2, r3
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80c5 	beq.w	800659c <HAL_DMA_IRQHandler+0xce8>
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80bf 	beq.w	800659c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	2202      	movs	r2, #2
 8006428:	409a      	lsls	r2, r3
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d018      	beq.n	800646a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 813a 	beq.w	80066c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006454:	e134      	b.n	80066c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 8130 	beq.w	80066c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006468:	e12a      	b.n	80066c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 8089 	bne.w	8006588 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2b      	ldr	r2, [pc, #172]	@ (8006528 <HAL_DMA_IRQHandler+0xc74>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d04a      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a29      	ldr	r2, [pc, #164]	@ (800652c <HAL_DMA_IRQHandler+0xc78>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d045      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a28      	ldr	r2, [pc, #160]	@ (8006530 <HAL_DMA_IRQHandler+0xc7c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d040      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a26      	ldr	r2, [pc, #152]	@ (8006534 <HAL_DMA_IRQHandler+0xc80>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d03b      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a25      	ldr	r2, [pc, #148]	@ (8006538 <HAL_DMA_IRQHandler+0xc84>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d036      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a23      	ldr	r2, [pc, #140]	@ (800653c <HAL_DMA_IRQHandler+0xc88>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <HAL_DMA_IRQHandler+0xc8c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d02c      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a20      	ldr	r2, [pc, #128]	@ (8006544 <HAL_DMA_IRQHandler+0xc90>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d027      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006548 <HAL_DMA_IRQHandler+0xc94>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1d      	ldr	r2, [pc, #116]	@ (800654c <HAL_DMA_IRQHandler+0xc98>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1c      	ldr	r2, [pc, #112]	@ (8006550 <HAL_DMA_IRQHandler+0xc9c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006554 <HAL_DMA_IRQHandler+0xca0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a19      	ldr	r2, [pc, #100]	@ (8006558 <HAL_DMA_IRQHandler+0xca4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a17      	ldr	r2, [pc, #92]	@ (800655c <HAL_DMA_IRQHandler+0xca8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a16      	ldr	r2, [pc, #88]	@ (8006560 <HAL_DMA_IRQHandler+0xcac>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_DMA_IRQHandler+0xc62>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a14      	ldr	r2, [pc, #80]	@ (8006564 <HAL_DMA_IRQHandler+0xcb0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d128      	bne.n	8006568 <HAL_DMA_IRQHandler+0xcb4>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0214 	bic.w	r2, r2, #20
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e027      	b.n	8006578 <HAL_DMA_IRQHandler+0xcc4>
 8006528:	40020010 	.word	0x40020010
 800652c:	40020028 	.word	0x40020028
 8006530:	40020040 	.word	0x40020040
 8006534:	40020058 	.word	0x40020058
 8006538:	40020070 	.word	0x40020070
 800653c:	40020088 	.word	0x40020088
 8006540:	400200a0 	.word	0x400200a0
 8006544:	400200b8 	.word	0x400200b8
 8006548:	40020410 	.word	0x40020410
 800654c:	40020428 	.word	0x40020428
 8006550:	40020440 	.word	0x40020440
 8006554:	40020458 	.word	0x40020458
 8006558:	40020470 	.word	0x40020470
 800655c:	40020488 	.word	0x40020488
 8006560:	400204a0 	.word	0x400204a0
 8006564:	400204b8 	.word	0x400204b8
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 020a 	bic.w	r2, r2, #10
 8006576:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8097 	beq.w	80066c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800659a:	e091      	b.n	80066c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2208      	movs	r2, #8
 80065a6:	409a      	lsls	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8088 	beq.w	80066c2 <HAL_DMA_IRQHandler+0xe0e>
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8082 	beq.w	80066c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a41      	ldr	r2, [pc, #260]	@ (80066c8 <HAL_DMA_IRQHandler+0xe14>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d04a      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a3f      	ldr	r2, [pc, #252]	@ (80066cc <HAL_DMA_IRQHandler+0xe18>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d045      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a3e      	ldr	r2, [pc, #248]	@ (80066d0 <HAL_DMA_IRQHandler+0xe1c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d040      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a3c      	ldr	r2, [pc, #240]	@ (80066d4 <HAL_DMA_IRQHandler+0xe20>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d03b      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a3b      	ldr	r2, [pc, #236]	@ (80066d8 <HAL_DMA_IRQHandler+0xe24>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d036      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a39      	ldr	r2, [pc, #228]	@ (80066dc <HAL_DMA_IRQHandler+0xe28>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d031      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a38      	ldr	r2, [pc, #224]	@ (80066e0 <HAL_DMA_IRQHandler+0xe2c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d02c      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a36      	ldr	r2, [pc, #216]	@ (80066e4 <HAL_DMA_IRQHandler+0xe30>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d027      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a35      	ldr	r2, [pc, #212]	@ (80066e8 <HAL_DMA_IRQHandler+0xe34>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d022      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a33      	ldr	r2, [pc, #204]	@ (80066ec <HAL_DMA_IRQHandler+0xe38>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d01d      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a32      	ldr	r2, [pc, #200]	@ (80066f0 <HAL_DMA_IRQHandler+0xe3c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d018      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a30      	ldr	r2, [pc, #192]	@ (80066f4 <HAL_DMA_IRQHandler+0xe40>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d013      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2f      	ldr	r2, [pc, #188]	@ (80066f8 <HAL_DMA_IRQHandler+0xe44>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00e      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2d      	ldr	r2, [pc, #180]	@ (80066fc <HAL_DMA_IRQHandler+0xe48>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d009      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2c      	ldr	r2, [pc, #176]	@ (8006700 <HAL_DMA_IRQHandler+0xe4c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <HAL_DMA_IRQHandler+0xdaa>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a2a      	ldr	r2, [pc, #168]	@ (8006704 <HAL_DMA_IRQHandler+0xe50>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d108      	bne.n	8006670 <HAL_DMA_IRQHandler+0xdbc>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 021c 	bic.w	r2, r2, #28
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e007      	b.n	8006680 <HAL_DMA_IRQHandler+0xdcc>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 020e 	bic.w	r2, r2, #14
 800667e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2201      	movs	r2, #1
 800668a:	409a      	lsls	r2, r3
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
 80066b6:	e004      	b.n	80066c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80066b8:	bf00      	nop
 80066ba:	e002      	b.n	80066c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066bc:	bf00      	nop
 80066be:	e000      	b.n	80066c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066c2:	3728      	adds	r7, #40	@ 0x28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40020010 	.word	0x40020010
 80066cc:	40020028 	.word	0x40020028
 80066d0:	40020040 	.word	0x40020040
 80066d4:	40020058 	.word	0x40020058
 80066d8:	40020070 	.word	0x40020070
 80066dc:	40020088 	.word	0x40020088
 80066e0:	400200a0 	.word	0x400200a0
 80066e4:	400200b8 	.word	0x400200b8
 80066e8:	40020410 	.word	0x40020410
 80066ec:	40020428 	.word	0x40020428
 80066f0:	40020440 	.word	0x40020440
 80066f4:	40020458 	.word	0x40020458
 80066f8:	40020470 	.word	0x40020470
 80066fc:	40020488 	.word	0x40020488
 8006700:	400204a0 	.word	0x400204a0
 8006704:	400204b8 	.word	0x400204b8

08006708 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800671a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006720:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a7f      	ldr	r2, [pc, #508]	@ (8006924 <DMA_SetConfig+0x21c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d072      	beq.n	8006812 <DMA_SetConfig+0x10a>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a7d      	ldr	r2, [pc, #500]	@ (8006928 <DMA_SetConfig+0x220>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d06d      	beq.n	8006812 <DMA_SetConfig+0x10a>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a7c      	ldr	r2, [pc, #496]	@ (800692c <DMA_SetConfig+0x224>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d068      	beq.n	8006812 <DMA_SetConfig+0x10a>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a7a      	ldr	r2, [pc, #488]	@ (8006930 <DMA_SetConfig+0x228>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d063      	beq.n	8006812 <DMA_SetConfig+0x10a>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a79      	ldr	r2, [pc, #484]	@ (8006934 <DMA_SetConfig+0x22c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d05e      	beq.n	8006812 <DMA_SetConfig+0x10a>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a77      	ldr	r2, [pc, #476]	@ (8006938 <DMA_SetConfig+0x230>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d059      	beq.n	8006812 <DMA_SetConfig+0x10a>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a76      	ldr	r2, [pc, #472]	@ (800693c <DMA_SetConfig+0x234>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d054      	beq.n	8006812 <DMA_SetConfig+0x10a>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a74      	ldr	r2, [pc, #464]	@ (8006940 <DMA_SetConfig+0x238>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d04f      	beq.n	8006812 <DMA_SetConfig+0x10a>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a73      	ldr	r2, [pc, #460]	@ (8006944 <DMA_SetConfig+0x23c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d04a      	beq.n	8006812 <DMA_SetConfig+0x10a>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a71      	ldr	r2, [pc, #452]	@ (8006948 <DMA_SetConfig+0x240>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d045      	beq.n	8006812 <DMA_SetConfig+0x10a>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a70      	ldr	r2, [pc, #448]	@ (800694c <DMA_SetConfig+0x244>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d040      	beq.n	8006812 <DMA_SetConfig+0x10a>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a6e      	ldr	r2, [pc, #440]	@ (8006950 <DMA_SetConfig+0x248>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d03b      	beq.n	8006812 <DMA_SetConfig+0x10a>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a6d      	ldr	r2, [pc, #436]	@ (8006954 <DMA_SetConfig+0x24c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d036      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006958 <DMA_SetConfig+0x250>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d031      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a6a      	ldr	r2, [pc, #424]	@ (800695c <DMA_SetConfig+0x254>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d02c      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a68      	ldr	r2, [pc, #416]	@ (8006960 <DMA_SetConfig+0x258>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d027      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a67      	ldr	r2, [pc, #412]	@ (8006964 <DMA_SetConfig+0x25c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d022      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a65      	ldr	r2, [pc, #404]	@ (8006968 <DMA_SetConfig+0x260>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d01d      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a64      	ldr	r2, [pc, #400]	@ (800696c <DMA_SetConfig+0x264>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d018      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a62      	ldr	r2, [pc, #392]	@ (8006970 <DMA_SetConfig+0x268>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a61      	ldr	r2, [pc, #388]	@ (8006974 <DMA_SetConfig+0x26c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00e      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a5f      	ldr	r2, [pc, #380]	@ (8006978 <DMA_SetConfig+0x270>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <DMA_SetConfig+0x10a>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a5e      	ldr	r2, [pc, #376]	@ (800697c <DMA_SetConfig+0x274>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d004      	beq.n	8006812 <DMA_SetConfig+0x10a>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a5c      	ldr	r2, [pc, #368]	@ (8006980 <DMA_SetConfig+0x278>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <DMA_SetConfig+0x10e>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <DMA_SetConfig+0x110>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00d      	beq.n	8006838 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006824:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006836:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a39      	ldr	r2, [pc, #228]	@ (8006924 <DMA_SetConfig+0x21c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d04a      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a38      	ldr	r2, [pc, #224]	@ (8006928 <DMA_SetConfig+0x220>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d045      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a36      	ldr	r2, [pc, #216]	@ (800692c <DMA_SetConfig+0x224>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d040      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a35      	ldr	r2, [pc, #212]	@ (8006930 <DMA_SetConfig+0x228>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d03b      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a33      	ldr	r2, [pc, #204]	@ (8006934 <DMA_SetConfig+0x22c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d036      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a32      	ldr	r2, [pc, #200]	@ (8006938 <DMA_SetConfig+0x230>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d031      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a30      	ldr	r2, [pc, #192]	@ (800693c <DMA_SetConfig+0x234>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d02c      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a2f      	ldr	r2, [pc, #188]	@ (8006940 <DMA_SetConfig+0x238>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d027      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a2d      	ldr	r2, [pc, #180]	@ (8006944 <DMA_SetConfig+0x23c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d022      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a2c      	ldr	r2, [pc, #176]	@ (8006948 <DMA_SetConfig+0x240>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d01d      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2a      	ldr	r2, [pc, #168]	@ (800694c <DMA_SetConfig+0x244>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d018      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a29      	ldr	r2, [pc, #164]	@ (8006950 <DMA_SetConfig+0x248>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a27      	ldr	r2, [pc, #156]	@ (8006954 <DMA_SetConfig+0x24c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00e      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a26      	ldr	r2, [pc, #152]	@ (8006958 <DMA_SetConfig+0x250>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d009      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a24      	ldr	r2, [pc, #144]	@ (800695c <DMA_SetConfig+0x254>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d004      	beq.n	80068d8 <DMA_SetConfig+0x1d0>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a23      	ldr	r2, [pc, #140]	@ (8006960 <DMA_SetConfig+0x258>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d101      	bne.n	80068dc <DMA_SetConfig+0x1d4>
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <DMA_SetConfig+0x1d6>
 80068dc:	2300      	movs	r3, #0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d059      	beq.n	8006996 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	223f      	movs	r2, #63	@ 0x3f
 80068ec:	409a      	lsls	r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006900:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b40      	cmp	r3, #64	@ 0x40
 8006910:	d138      	bne.n	8006984 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006922:	e086      	b.n	8006a32 <DMA_SetConfig+0x32a>
 8006924:	40020010 	.word	0x40020010
 8006928:	40020028 	.word	0x40020028
 800692c:	40020040 	.word	0x40020040
 8006930:	40020058 	.word	0x40020058
 8006934:	40020070 	.word	0x40020070
 8006938:	40020088 	.word	0x40020088
 800693c:	400200a0 	.word	0x400200a0
 8006940:	400200b8 	.word	0x400200b8
 8006944:	40020410 	.word	0x40020410
 8006948:	40020428 	.word	0x40020428
 800694c:	40020440 	.word	0x40020440
 8006950:	40020458 	.word	0x40020458
 8006954:	40020470 	.word	0x40020470
 8006958:	40020488 	.word	0x40020488
 800695c:	400204a0 	.word	0x400204a0
 8006960:	400204b8 	.word	0x400204b8
 8006964:	58025408 	.word	0x58025408
 8006968:	5802541c 	.word	0x5802541c
 800696c:	58025430 	.word	0x58025430
 8006970:	58025444 	.word	0x58025444
 8006974:	58025458 	.word	0x58025458
 8006978:	5802546c 	.word	0x5802546c
 800697c:	58025480 	.word	0x58025480
 8006980:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	60da      	str	r2, [r3, #12]
}
 8006994:	e04d      	b.n	8006a32 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a29      	ldr	r2, [pc, #164]	@ (8006a40 <DMA_SetConfig+0x338>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d022      	beq.n	80069e6 <DMA_SetConfig+0x2de>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a27      	ldr	r2, [pc, #156]	@ (8006a44 <DMA_SetConfig+0x33c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01d      	beq.n	80069e6 <DMA_SetConfig+0x2de>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a26      	ldr	r2, [pc, #152]	@ (8006a48 <DMA_SetConfig+0x340>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d018      	beq.n	80069e6 <DMA_SetConfig+0x2de>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a24      	ldr	r2, [pc, #144]	@ (8006a4c <DMA_SetConfig+0x344>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <DMA_SetConfig+0x2de>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a23      	ldr	r2, [pc, #140]	@ (8006a50 <DMA_SetConfig+0x348>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00e      	beq.n	80069e6 <DMA_SetConfig+0x2de>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a21      	ldr	r2, [pc, #132]	@ (8006a54 <DMA_SetConfig+0x34c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d009      	beq.n	80069e6 <DMA_SetConfig+0x2de>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a20      	ldr	r2, [pc, #128]	@ (8006a58 <DMA_SetConfig+0x350>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <DMA_SetConfig+0x2de>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1e      	ldr	r2, [pc, #120]	@ (8006a5c <DMA_SetConfig+0x354>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d101      	bne.n	80069ea <DMA_SetConfig+0x2e2>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <DMA_SetConfig+0x2e4>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d020      	beq.n	8006a32 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2201      	movs	r2, #1
 80069fa:	409a      	lsls	r2, r3
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2b40      	cmp	r3, #64	@ 0x40
 8006a0e:	d108      	bne.n	8006a22 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	60da      	str	r2, [r3, #12]
}
 8006a20:	e007      	b.n	8006a32 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	60da      	str	r2, [r3, #12]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	58025408 	.word	0x58025408
 8006a44:	5802541c 	.word	0x5802541c
 8006a48:	58025430 	.word	0x58025430
 8006a4c:	58025444 	.word	0x58025444
 8006a50:	58025458 	.word	0x58025458
 8006a54:	5802546c 	.word	0x5802546c
 8006a58:	58025480 	.word	0x58025480
 8006a5c:	58025494 	.word	0x58025494

08006a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a42      	ldr	r2, [pc, #264]	@ (8006b78 <DMA_CalcBaseAndBitshift+0x118>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d04a      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a41      	ldr	r2, [pc, #260]	@ (8006b7c <DMA_CalcBaseAndBitshift+0x11c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d045      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a3f      	ldr	r2, [pc, #252]	@ (8006b80 <DMA_CalcBaseAndBitshift+0x120>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d040      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8006b84 <DMA_CalcBaseAndBitshift+0x124>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d03b      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a3c      	ldr	r2, [pc, #240]	@ (8006b88 <DMA_CalcBaseAndBitshift+0x128>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d036      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a3b      	ldr	r2, [pc, #236]	@ (8006b8c <DMA_CalcBaseAndBitshift+0x12c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d031      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a39      	ldr	r2, [pc, #228]	@ (8006b90 <DMA_CalcBaseAndBitshift+0x130>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d02c      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a38      	ldr	r2, [pc, #224]	@ (8006b94 <DMA_CalcBaseAndBitshift+0x134>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d027      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a36      	ldr	r2, [pc, #216]	@ (8006b98 <DMA_CalcBaseAndBitshift+0x138>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d022      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a35      	ldr	r2, [pc, #212]	@ (8006b9c <DMA_CalcBaseAndBitshift+0x13c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d01d      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a33      	ldr	r2, [pc, #204]	@ (8006ba0 <DMA_CalcBaseAndBitshift+0x140>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d018      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a32      	ldr	r2, [pc, #200]	@ (8006ba4 <DMA_CalcBaseAndBitshift+0x144>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d013      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a30      	ldr	r2, [pc, #192]	@ (8006ba8 <DMA_CalcBaseAndBitshift+0x148>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00e      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a2f      	ldr	r2, [pc, #188]	@ (8006bac <DMA_CalcBaseAndBitshift+0x14c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d009      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a2d      	ldr	r2, [pc, #180]	@ (8006bb0 <DMA_CalcBaseAndBitshift+0x150>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <DMA_CalcBaseAndBitshift+0xa8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a2c      	ldr	r2, [pc, #176]	@ (8006bb4 <DMA_CalcBaseAndBitshift+0x154>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d101      	bne.n	8006b0c <DMA_CalcBaseAndBitshift+0xac>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <DMA_CalcBaseAndBitshift+0xae>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d024      	beq.n	8006b5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	3b10      	subs	r3, #16
 8006b1a:	4a27      	ldr	r2, [pc, #156]	@ (8006bb8 <DMA_CalcBaseAndBitshift+0x158>)
 8006b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	4a24      	ldr	r2, [pc, #144]	@ (8006bbc <DMA_CalcBaseAndBitshift+0x15c>)
 8006b2c:	5cd3      	ldrb	r3, [r2, r3]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d908      	bls.n	8006b4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4b1f      	ldr	r3, [pc, #124]	@ (8006bc0 <DMA_CalcBaseAndBitshift+0x160>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b4a:	e00d      	b.n	8006b68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc0 <DMA_CalcBaseAndBitshift+0x160>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b5a:	e005      	b.n	8006b68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	40020010 	.word	0x40020010
 8006b7c:	40020028 	.word	0x40020028
 8006b80:	40020040 	.word	0x40020040
 8006b84:	40020058 	.word	0x40020058
 8006b88:	40020070 	.word	0x40020070
 8006b8c:	40020088 	.word	0x40020088
 8006b90:	400200a0 	.word	0x400200a0
 8006b94:	400200b8 	.word	0x400200b8
 8006b98:	40020410 	.word	0x40020410
 8006b9c:	40020428 	.word	0x40020428
 8006ba0:	40020440 	.word	0x40020440
 8006ba4:	40020458 	.word	0x40020458
 8006ba8:	40020470 	.word	0x40020470
 8006bac:	40020488 	.word	0x40020488
 8006bb0:	400204a0 	.word	0x400204a0
 8006bb4:	400204b8 	.word	0x400204b8
 8006bb8:	aaaaaaab 	.word	0xaaaaaaab
 8006bbc:	08012a64 	.word	0x08012a64
 8006bc0:	fffffc00 	.word	0xfffffc00

08006bc4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d120      	bne.n	8006c1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d858      	bhi.n	8006c92 <DMA_CheckFifoParam+0xce>
 8006be0:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <DMA_CheckFifoParam+0x24>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006c0b 	.word	0x08006c0b
 8006bf0:	08006bf9 	.word	0x08006bf9
 8006bf4:	08006c93 	.word	0x08006c93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d048      	beq.n	8006c96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c08:	e045      	b.n	8006c96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c12:	d142      	bne.n	8006c9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c18:	e03f      	b.n	8006c9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c22:	d123      	bne.n	8006c6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d838      	bhi.n	8006c9e <DMA_CheckFifoParam+0xda>
 8006c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <DMA_CheckFifoParam+0x70>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006c4b 	.word	0x08006c4b
 8006c3c:	08006c45 	.word	0x08006c45
 8006c40:	08006c5d 	.word	0x08006c5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
        break;
 8006c48:	e030      	b.n	8006cac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d025      	beq.n	8006ca2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c5a:	e022      	b.n	8006ca2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c64:	d11f      	bne.n	8006ca6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c6a:	e01c      	b.n	8006ca6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d902      	bls.n	8006c7a <DMA_CheckFifoParam+0xb6>
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d003      	beq.n	8006c80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006c78:	e018      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c7e:	e015      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c90:	e00b      	b.n	8006caa <DMA_CheckFifoParam+0xe6>
        break;
 8006c92:	bf00      	nop
 8006c94:	e00a      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
        break;
 8006c96:	bf00      	nop
 8006c98:	e008      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
        break;
 8006c9a:	bf00      	nop
 8006c9c:	e006      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
        break;
 8006c9e:	bf00      	nop
 8006ca0:	e004      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
        break;
 8006ca2:	bf00      	nop
 8006ca4:	e002      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
        break;
 8006ca6:	bf00      	nop
 8006ca8:	e000      	b.n	8006cac <DMA_CheckFifoParam+0xe8>
    break;
 8006caa:	bf00      	nop
    }
  }

  return status;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop

08006cbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a38      	ldr	r2, [pc, #224]	@ (8006db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d022      	beq.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a36      	ldr	r2, [pc, #216]	@ (8006db4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d01d      	beq.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a35      	ldr	r2, [pc, #212]	@ (8006db8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d018      	beq.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a33      	ldr	r2, [pc, #204]	@ (8006dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a32      	ldr	r2, [pc, #200]	@ (8006dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00e      	beq.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a30      	ldr	r2, [pc, #192]	@ (8006dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d009      	beq.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8006dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2d      	ldr	r2, [pc, #180]	@ (8006dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d101      	bne.n	8006d1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01a      	beq.n	8006d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	3b08      	subs	r3, #8
 8006d2c:	4a28      	ldr	r2, [pc, #160]	@ (8006dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	091b      	lsrs	r3, r3, #4
 8006d34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4b26      	ldr	r3, [pc, #152]	@ (8006dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a24      	ldr	r2, [pc, #144]	@ (8006dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d48:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	2201      	movs	r2, #1
 8006d52:	409a      	lsls	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d58:	e024      	b.n	8006da4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	3b10      	subs	r3, #16
 8006d62:	4a1e      	ldr	r2, [pc, #120]	@ (8006ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d64:	fba2 2303 	umull	r2, r3, r2, r3
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d806      	bhi.n	8006d82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a1b      	ldr	r2, [pc, #108]	@ (8006de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d902      	bls.n	8006d82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4b18      	ldr	r3, [pc, #96]	@ (8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a16      	ldr	r2, [pc, #88]	@ (8006dec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006d94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	58025408 	.word	0x58025408
 8006db4:	5802541c 	.word	0x5802541c
 8006db8:	58025430 	.word	0x58025430
 8006dbc:	58025444 	.word	0x58025444
 8006dc0:	58025458 	.word	0x58025458
 8006dc4:	5802546c 	.word	0x5802546c
 8006dc8:	58025480 	.word	0x58025480
 8006dcc:	58025494 	.word	0x58025494
 8006dd0:	cccccccd 	.word	0xcccccccd
 8006dd4:	16009600 	.word	0x16009600
 8006dd8:	58025880 	.word	0x58025880
 8006ddc:	aaaaaaab 	.word	0xaaaaaaab
 8006de0:	400204b8 	.word	0x400204b8
 8006de4:	4002040f 	.word	0x4002040f
 8006de8:	10008200 	.word	0x10008200
 8006dec:	40020880 	.word	0x40020880

08006df0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d04a      	beq.n	8006e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d847      	bhi.n	8006e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a25      	ldr	r2, [pc, #148]	@ (8006ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d022      	beq.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a24      	ldr	r2, [pc, #144]	@ (8006eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d01d      	beq.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a22      	ldr	r2, [pc, #136]	@ (8006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d018      	beq.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a21      	ldr	r2, [pc, #132]	@ (8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d013      	beq.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00e      	beq.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1e      	ldr	r2, [pc, #120]	@ (8006ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d009      	beq.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d004      	beq.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d101      	bne.n	8006e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e60:	2300      	movs	r3, #0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4b17      	ldr	r3, [pc, #92]	@ (8006ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a15      	ldr	r2, [pc, #84]	@ (8006ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006e78:	671a      	str	r2, [r3, #112]	@ 0x70
 8006e7a:	e009      	b.n	8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4b14      	ldr	r3, [pc, #80]	@ (8006ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	461a      	mov	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a11      	ldr	r2, [pc, #68]	@ (8006ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006e8e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	2201      	movs	r2, #1
 8006e96:	409a      	lsls	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	58025408 	.word	0x58025408
 8006eac:	5802541c 	.word	0x5802541c
 8006eb0:	58025430 	.word	0x58025430
 8006eb4:	58025444 	.word	0x58025444
 8006eb8:	58025458 	.word	0x58025458
 8006ebc:	5802546c 	.word	0x5802546c
 8006ec0:	58025480 	.word	0x58025480
 8006ec4:	58025494 	.word	0x58025494
 8006ec8:	1600963f 	.word	0x1600963f
 8006ecc:	58025940 	.word	0x58025940
 8006ed0:	1000823f 	.word	0x1000823f
 8006ed4:	40020940 	.word	0x40020940

08006ed8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b098      	sub	sp, #96	@ 0x60
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006ee0:	4a84      	ldr	r2, [pc, #528]	@ (80070f4 <HAL_FDCAN_Init+0x21c>)
 8006ee2:	f107 030c 	add.w	r3, r7, #12
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	224c      	movs	r2, #76	@ 0x4c
 8006eea:	4618      	mov	r0, r3
 8006eec:	f00a ff54 	bl	8011d98 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e1c6      	b.n	8007288 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a7e      	ldr	r2, [pc, #504]	@ (80070f8 <HAL_FDCAN_Init+0x220>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d106      	bne.n	8006f12 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fb f8ae 	bl	8002088 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0210 	bic.w	r2, r2, #16
 8006f3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f3c:	f7fb fd1a 	bl	8002974 <HAL_GetTick>
 8006f40:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006f42:	e014      	b.n	8006f6e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006f44:	f7fb fd16 	bl	8002974 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b0a      	cmp	r3, #10
 8006f50:	d90d      	bls.n	8006f6e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f58:	f043 0201 	orr.w	r2, r3, #1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2203      	movs	r2, #3
 8006f66:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e18c      	b.n	8007288 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d0e3      	beq.n	8006f44 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f8c:	f7fb fcf2 	bl	8002974 <HAL_GetTick>
 8006f90:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006f92:	e014      	b.n	8006fbe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006f94:	f7fb fcee 	bl	8002974 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b0a      	cmp	r3, #10
 8006fa0:	d90d      	bls.n	8006fbe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fa8:	f043 0201 	orr.w	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e164      	b.n	8007288 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0e3      	beq.n	8006f94 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0202 	orr.w	r2, r2, #2
 8006fda:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7c1b      	ldrb	r3, [r3, #16]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d108      	bne.n	8006ff6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699a      	ldr	r2, [r3, #24]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ff2:	619a      	str	r2, [r3, #24]
 8006ff4:	e007      	b.n	8007006 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007004:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7c5b      	ldrb	r3, [r3, #17]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d108      	bne.n	8007020 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	699a      	ldr	r2, [r3, #24]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800701c:	619a      	str	r2, [r3, #24]
 800701e:	e007      	b.n	8007030 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800702e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7c9b      	ldrb	r3, [r3, #18]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d108      	bne.n	800704a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007046:	619a      	str	r2, [r3, #24]
 8007048:	e007      	b.n	800705a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	699a      	ldr	r2, [r3, #24]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007058:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800707e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0210 	bic.w	r2, r2, #16
 800708e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d108      	bne.n	80070aa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0204 	orr.w	r2, r2, #4
 80070a6:	619a      	str	r2, [r3, #24]
 80070a8:	e030      	b.n	800710c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d02c      	beq.n	800710c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d020      	beq.n	80070fc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	699a      	ldr	r2, [r3, #24]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80070c8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0210 	orr.w	r2, r2, #16
 80070d8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d114      	bne.n	800710c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0220 	orr.w	r2, r2, #32
 80070f0:	619a      	str	r2, [r3, #24]
 80070f2:	e00b      	b.n	800710c <HAL_FDCAN_Init+0x234>
 80070f4:	08012a08 	.word	0x08012a08
 80070f8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0220 	orr.w	r2, r2, #32
 800710a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	3b01      	subs	r3, #1
 8007112:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	3b01      	subs	r3, #1
 800711a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800711c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007124:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	3b01      	subs	r3, #1
 800712e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007134:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007136:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007140:	d115      	bne.n	800716e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007146:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714c:	3b01      	subs	r3, #1
 800714e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007150:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007156:	3b01      	subs	r3, #1
 8007158:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800715a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007162:	3b01      	subs	r3, #1
 8007164:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800716a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800716c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007194:	4413      	add	r3, r2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d011      	beq.n	80071be <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80071a2:	f023 0107 	bic.w	r1, r3, #7
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	3360      	adds	r3, #96	@ 0x60
 80071ae:	443b      	add	r3, r7
 80071b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071ce:	f023 0107 	bic.w	r1, r3, #7
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	3360      	adds	r3, #96	@ 0x60
 80071da:	443b      	add	r3, r7
 80071dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d012      	beq.n	8007218 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071fa:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	3360      	adds	r3, #96	@ 0x60
 8007206:	443b      	add	r3, r7
 8007208:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800720c:	011a      	lsls	r2, r3, #4
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800721c:	2b00      	cmp	r3, #0
 800721e:	d012      	beq.n	8007246 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007228:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	3360      	adds	r3, #96	@ 0x60
 8007234:	443b      	add	r3, r7
 8007236:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800723a:	021a      	lsls	r2, r3, #8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a11      	ldr	r2, [pc, #68]	@ (8007290 <HAL_FDCAN_Init+0x3b8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d107      	bne.n	8007260 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f022 0203 	bic.w	r2, r2, #3
 800725e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fe35 	bl	8007ee8 <FDCAN_CalcultateRamBlockAddresses>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007284:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007288:	4618      	mov	r0, r3
 800728a:	3760      	adds	r7, #96	@ 0x60
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	4000a000 	.word	0x4000a000

08007294 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072a4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d002      	beq.n	80072b2 <HAL_FDCAN_ConfigFilter+0x1e>
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d157      	bne.n	8007362 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d12b      	bne.n	8007312 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	2b07      	cmp	r3, #7
 80072c0:	d10d      	bne.n	80072de <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80072ce:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80072d4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80072d6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	e00e      	b.n	80072fc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80072ea:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80072f2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e025      	b.n	800735e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	075a      	lsls	r2, r3, #29
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b07      	cmp	r3, #7
 8007326:	d103      	bne.n	8007330 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	e006      	b.n	800733e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	079a      	lsls	r2, r3, #30
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4413      	add	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	3304      	adds	r3, #4
 8007356:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	e008      	b.n	8007374 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007368:	f043 0202 	orr.w	r2, r3, #2
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
  }
}
 8007374:	4618      	mov	r0, r3
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b01      	cmp	r3, #1
 8007392:	d111      	bne.n	80073b8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0201 	bic.w	r2, r2, #1
 80073aa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	e008      	b.n	80073ca <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073be:	f043 0204 	orr.w	r2, r3, #4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
  }
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d141      	bne.n	8007472 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80073f6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007404:	f043 0220 	orr.w	r2, r3, #32
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e038      	b.n	8007484 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800741a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007428:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e026      	b.n	8007484 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800743e:	0c1b      	lsrs	r3, r3, #16
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	68b9      	ldr	r1, [r7, #8]
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 fed1 	bl	80081f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2101      	movs	r1, #1
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	fa01 f202 	lsl.w	r2, r1, r2
 800745e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007462:	2201      	movs	r2, #1
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	409a      	lsls	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	e008      	b.n	8007484 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007478:	f043 0208 	orr.w	r2, r3, #8
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
  }
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800748c:	b480      	push	{r7}
 800748e:	b08b      	sub	sp, #44	@ 0x2c
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074a4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80074a6:	7efb      	ldrb	r3, [r7, #27]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	f040 8149 	bne.w	8007740 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b40      	cmp	r3, #64	@ 0x40
 80074b2:	d14c      	bne.n	800754e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d109      	bne.n	80074d8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e13c      	b.n	8007752 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e12a      	b.n	8007752 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007504:	0e1b      	lsrs	r3, r3, #24
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b01      	cmp	r3, #1
 800750c:	d10a      	bne.n	8007524 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007516:	0fdb      	lsrs	r3, r3, #31
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007520:	2301      	movs	r3, #1
 8007522:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800752c:	0a1b      	lsrs	r3, r3, #8
 800752e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	4413      	add	r3, r2
 8007536:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007540:	69f9      	ldr	r1, [r7, #28]
 8007542:	fb01 f303 	mul.w	r3, r1, r3
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
 800754c:	e068      	b.n	8007620 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b41      	cmp	r3, #65	@ 0x41
 8007552:	d14c      	bne.n	80075ee <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800755c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d109      	bne.n	8007578 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e0ec      	b.n	8007752 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800758e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e0da      	b.n	8007752 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075a4:	0e1b      	lsrs	r3, r3, #24
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d10a      	bne.n	80075c4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075b6:	0fdb      	lsrs	r3, r3, #31
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80075c0:	2301      	movs	r3, #1
 80075c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075cc:	0a1b      	lsrs	r3, r3, #8
 80075ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e0:	69f9      	ldr	r1, [r7, #28]
 80075e2:	fb01 f303 	mul.w	r3, r1, r3
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ec:	e018      	b.n	8007620 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d309      	bcc.n	800760c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075fe:	f043 0220 	orr.w	r2, r3, #32
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0a2      	b.n	8007752 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d107      	bne.n	8007644 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	0c9b      	lsrs	r3, r3, #18
 800763a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e005      	b.n	8007650 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	3304      	adds	r3, #4
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	b29a      	uxth	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	0c1b      	lsrs	r3, r3, #16
 800767e:	f003 020f 	and.w	r2, r3, #15
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	0e1b      	lsrs	r3, r3, #24
 80076a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80076ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	0fda      	lsrs	r2, r3, #31
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	3304      	adds	r3, #4
 80076ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076be:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80076c0:	2300      	movs	r3, #0
 80076c2:	623b      	str	r3, [r7, #32]
 80076c4:	e00a      	b.n	80076dc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	441a      	add	r2, r3
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	440b      	add	r3, r1
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	3301      	adds	r3, #1
 80076da:	623b      	str	r3, [r7, #32]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007760 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80076e2:	5cd3      	ldrb	r3, [r2, r3]
 80076e4:	461a      	mov	r2, r3
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d3ec      	bcc.n	80076c6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b40      	cmp	r3, #64	@ 0x40
 80076f0:	d105      	bne.n	80076fe <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80076fc:	e01e      	b.n	800773c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b41      	cmp	r3, #65	@ 0x41
 8007702:	d105      	bne.n	8007710 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800770e:	e015      	b.n	800773c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b1f      	cmp	r3, #31
 8007714:	d808      	bhi.n	8007728 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2101      	movs	r1, #1
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	fa01 f202 	lsl.w	r2, r1, r2
 8007722:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007726:	e009      	b.n	800773c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 021f 	and.w	r2, r3, #31
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2101      	movs	r1, #1
 8007734:	fa01 f202 	lsl.w	r2, r1, r2
 8007738:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e008      	b.n	8007752 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007746:	f043 0208 	orr.w	r2, r3, #8
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
  }
}
 8007752:	4618      	mov	r0, r3
 8007754:	372c      	adds	r7, #44	@ 0x2c
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	08012a6c 	.word	0x08012a6c

08007764 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007774:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f003 0207 	and.w	r2, r3, #7
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	0a1b      	lsrs	r3, r3, #8
 8007784:	f003 0207 	and.w	r2, r3, #7
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f003 0218 	and.w	r2, r3, #24
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	f003 0201 	and.w	r2, r3, #1
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	099b      	lsrs	r3, r3, #6
 80077a6:	f003 0201 	and.w	r2, r3, #1
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	09db      	lsrs	r3, r3, #7
 80077b2:	f003 0201 	and.w	r2, r3, #1
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	0adb      	lsrs	r3, r3, #11
 80077be:	f003 0201 	and.w	r2, r3, #1
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	0b1b      	lsrs	r3, r3, #12
 80077ca:	f003 0201 	and.w	r2, r3, #1
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	0b5b      	lsrs	r3, r3, #13
 80077d6:	f003 0201 	and.w	r2, r3, #1
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	0b9b      	lsrs	r3, r3, #14
 80077e2:	f003 0201 	and.w	r2, r3, #1
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007816:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d002      	beq.n	8007824 <HAL_FDCAN_ActivateNotification+0x20>
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d155      	bne.n	80078d0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4013      	ands	r3, r2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d108      	bne.n	8007844 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007842:	e014      	b.n	800786e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4013      	ands	r3, r2
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	d108      	bne.n	8007866 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0202 	orr.w	r2, r2, #2
 8007862:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007864:	e003      	b.n	800786e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2203      	movs	r2, #3
 800786c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007874:	2b00      	cmp	r3, #0
 8007876:	d009      	beq.n	800788c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	430a      	orrs	r2, r1
 8007888:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007892:	2b00      	cmp	r3, #0
 8007894:	d009      	beq.n	80078aa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	4b0f      	ldr	r3, [pc, #60]	@ (80078f0 <HAL_FDCAN_ActivateNotification+0xec>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80078be:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	0f9b      	lsrs	r3, r3, #30
 80078c6:	490b      	ldr	r1, [pc, #44]	@ (80078f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e008      	b.n	80078e2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078d6:	f043 0202 	orr.w	r2, r3, #2
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
  }
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	3fcfffff 	.word	0x3fcfffff
 80078f4:	4000a800 	.word	0x4000a800

080078f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b096      	sub	sp, #88	@ 0x58
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007900:	4b95      	ldr	r3, [pc, #596]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	079b      	lsls	r3, r3, #30
 8007906:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007908:	4b93      	ldr	r3, [pc, #588]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	079b      	lsls	r3, r3, #30
 800790e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007910:	4013      	ands	r3, r2
 8007912:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800791a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800791e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007926:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007928:	4013      	ands	r3, r2
 800792a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007940:	4013      	ands	r3, r2
 8007942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800794e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007958:	4013      	ands	r3, r2
 800795a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007962:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007966:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007970:	4013      	ands	r3, r2
 8007972:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800797e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007988:	4013      	ands	r3, r2
 800798a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800799a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800799c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800799e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00f      	beq.n	80079c6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80079ba:	4b67      	ldr	r3, [pc, #412]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 80079bc:	2200      	movs	r2, #0
 80079be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fa44 	bl	8007e4e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80079c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01c      	beq.n	8007a0a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d017      	beq.n	8007a0a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80079e2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079ee:	4013      	ands	r3, r2
 80079f0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80079fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80079fc:	4b56      	ldr	r3, [pc, #344]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007a02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9f9 	bl	8007dfc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00d      	beq.n	8007a2c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a16:	4b51      	ldr	r3, [pc, #324]	@ (8007b5c <HAL_FDCAN_IRQHandler+0x264>)
 8007a18:	400b      	ands	r3, r1
 8007a1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a1c:	4a4e      	ldr	r2, [pc, #312]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a20:	0f9b      	lsrs	r3, r3, #30
 8007a22:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007a24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f9b2 	bl	8007d90 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00d      	beq.n	8007a4e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a38:	4b48      	ldr	r3, [pc, #288]	@ (8007b5c <HAL_FDCAN_IRQHandler+0x264>)
 8007a3a:	400b      	ands	r3, r1
 8007a3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a3e:	4a46      	ldr	r2, [pc, #280]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a42:	0f9b      	lsrs	r3, r3, #30
 8007a44:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007a46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9ac 	bl	8007da6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00d      	beq.n	8007a70 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a5a:	4b40      	ldr	r3, [pc, #256]	@ (8007b5c <HAL_FDCAN_IRQHandler+0x264>)
 8007a5c:	400b      	ands	r3, r1
 8007a5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a60:	4a3d      	ldr	r2, [pc, #244]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a64:	0f9b      	lsrs	r3, r3, #30
 8007a66:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007a68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7f9 fd9e 	bl	80015ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00d      	beq.n	8007a92 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a7c:	4b37      	ldr	r3, [pc, #220]	@ (8007b5c <HAL_FDCAN_IRQHandler+0x264>)
 8007a7e:	400b      	ands	r3, r1
 8007a80:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a82:	4a35      	ldr	r2, [pc, #212]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007a84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a86:	0f9b      	lsrs	r3, r3, #30
 8007a88:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007a8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f995 	bl	8007dbc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00f      	beq.n	8007abc <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007aae:	651a      	str	r2, [r3, #80]	@ 0x50
 8007ab0:	4b29      	ldr	r3, [pc, #164]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f98b 	bl	8007dd2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01c      	beq.n	8007b00 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d017      	beq.n	8007b00 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ad8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007af0:	651a      	str	r2, [r3, #80]	@ 0x50
 8007af2:	4b19      	ldr	r3, [pc, #100]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007af8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f973 	bl	8007de6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00f      	beq.n	8007b2a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007b1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f974 	bl	8007e12 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d015      	beq.n	8007b60 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d010      	beq.n	8007b60 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007b46:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b48:	4b03      	ldr	r3, [pc, #12]	@ (8007b58 <HAL_FDCAN_IRQHandler+0x260>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f969 	bl	8007e26 <HAL_FDCAN_TimestampWraparoundCallback>
 8007b54:	e004      	b.n	8007b60 <HAL_FDCAN_IRQHandler+0x268>
 8007b56:	bf00      	nop
 8007b58:	4000a800 	.word	0x4000a800
 8007b5c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00f      	beq.n	8007b8a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007b7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b7e:	4b81      	ldr	r3, [pc, #516]	@ (8007d84 <HAL_FDCAN_IRQHandler+0x48c>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f958 	bl	8007e3a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d014      	beq.n	8007bbe <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007ba6:	651a      	str	r2, [r3, #80]	@ 0x50
 8007ba8:	4b76      	ldr	r3, [pc, #472]	@ (8007d84 <HAL_FDCAN_IRQHandler+0x48c>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00d      	beq.n	8007be0 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bca:	4b6f      	ldr	r3, [pc, #444]	@ (8007d88 <HAL_FDCAN_IRQHandler+0x490>)
 8007bcc:	400b      	ands	r3, r1
 8007bce:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bd0:	4a6c      	ldr	r2, [pc, #432]	@ (8007d84 <HAL_FDCAN_IRQHandler+0x48c>)
 8007bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd4:	0f9b      	lsrs	r3, r3, #30
 8007bd6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f94b 	bl	8007e76 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d011      	beq.n	8007c0a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007bec:	4b66      	ldr	r3, [pc, #408]	@ (8007d88 <HAL_FDCAN_IRQHandler+0x490>)
 8007bee:	400b      	ands	r3, r1
 8007bf0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bf2:	4a64      	ldr	r2, [pc, #400]	@ (8007d84 <HAL_FDCAN_IRQHandler+0x48c>)
 8007bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf6:	0f9b      	lsrs	r3, r3, #30
 8007bf8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a5f      	ldr	r2, [pc, #380]	@ (8007d8c <HAL_FDCAN_IRQHandler+0x494>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	f040 80aa 	bne.w	8007d6a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80a2 	beq.w	8007d6a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c52:	4013      	ands	r3, r2
 8007c54:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007c78:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c80:	6a3a      	ldr	r2, [r7, #32]
 8007c82:	4013      	ands	r3, r2
 8007c84:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007c90:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007cbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f8e4 	bl	8007e8c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cd0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f8e4 	bl	8007ea2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d019      	beq.n	8007d18 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d014      	beq.n	8007d18 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d04:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2240      	movs	r2, #64	@ 0x40
 8007d0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	6939      	ldr	r1, [r7, #16]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f8d0 	bl	8007eb8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d24:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f8d1 	bl	8007ed0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	6a3a      	ldr	r2, [r7, #32]
 8007d3a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	431a      	orrs	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f874 	bl	8007e62 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	3758      	adds	r7, #88	@ 0x58
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	4000a800 	.word	0x4000a800
 8007d88:	3fcfffff 	.word	0x3fcfffff
 8007d8c:	4000a000 	.word	0x4000a000

08007d90 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007efe:	4ba7      	ldr	r3, [pc, #668]	@ (800819c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	0091      	lsls	r1, r2, #2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	430b      	orrs	r3, r1
 8007f0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f18:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f20:	041a      	lsls	r2, r3, #16
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	4413      	add	r3, r2
 8007f34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f3e:	4b97      	ldr	r3, [pc, #604]	@ (800819c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0091      	lsls	r1, r2, #2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6812      	ldr	r2, [r2, #0]
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f58:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f60:	041a      	lsls	r2, r3, #16
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	4413      	add	r3, r2
 8007f76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007f80:	4b86      	ldr	r3, [pc, #536]	@ (800819c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f82:	4013      	ands	r3, r2
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	0091      	lsls	r1, r2, #2
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f9a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	041a      	lsls	r2, r3, #16
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007fc8:	4b74      	ldr	r3, [pc, #464]	@ (800819c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	0091      	lsls	r1, r2, #2
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6812      	ldr	r2, [r2, #0]
 8007fd4:	430b      	orrs	r3, r1
 8007fd6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fe2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fea:	041a      	lsls	r2, r3, #16
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	4413      	add	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008010:	4b62      	ldr	r3, [pc, #392]	@ (800819c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008012:	4013      	ands	r3, r2
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	0091      	lsls	r1, r2, #2
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6812      	ldr	r2, [r2, #0]
 800801c:	430b      	orrs	r3, r1
 800801e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	4413      	add	r3, r2
 8008032:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800803c:	4b57      	ldr	r3, [pc, #348]	@ (800819c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800803e:	4013      	ands	r3, r2
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	0091      	lsls	r1, r2, #2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6812      	ldr	r2, [r2, #0]
 8008048:	430b      	orrs	r3, r1
 800804a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008056:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800805e:	041a      	lsls	r2, r3, #16
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	4413      	add	r3, r2
 8008074:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800807e:	4b47      	ldr	r3, [pc, #284]	@ (800819c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008080:	4013      	ands	r3, r2
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	0091      	lsls	r1, r2, #2
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	430b      	orrs	r3, r1
 800808c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008098:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a0:	041a      	lsls	r2, r3, #16
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080b4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080bc:	061a      	lsls	r2, r3, #24
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080cc:	4b34      	ldr	r3, [pc, #208]	@ (80081a0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80080ce:	4413      	add	r3, r2
 80080d0:	009a      	lsls	r2, r3, #2
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	441a      	add	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	441a      	add	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008102:	fb01 f303 	mul.w	r3, r1, r3
 8008106:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008108:	441a      	add	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800811a:	fb01 f303 	mul.w	r3, r1, r3
 800811e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008120:	441a      	add	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008132:	fb01 f303 	mul.w	r3, r1, r3
 8008136:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008138:	441a      	add	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008162:	fb01 f303 	mul.w	r3, r1, r3
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	441a      	add	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800817e:	fb01 f303 	mul.w	r3, r1, r3
 8008182:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008184:	441a      	add	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008192:	4a04      	ldr	r2, [pc, #16]	@ (80081a4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d915      	bls.n	80081c4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008198:	e006      	b.n	80081a8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800819a:	bf00      	nop
 800819c:	ffff0003 	.word	0xffff0003
 80081a0:	10002b00 	.word	0x10002b00
 80081a4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081ae:	f043 0220 	orr.w	r2, r3, #32
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2203      	movs	r2, #3
 80081bc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e010      	b.n	80081e6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	e005      	b.n	80081d8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3304      	adds	r3, #4
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d3f3      	bcc.n	80081cc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop

080081f4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b089      	sub	sp, #36	@ 0x24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10a      	bne.n	8008220 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008212:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800821a:	4313      	orrs	r3, r2
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	e00a      	b.n	8008236 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008228:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800822e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008234:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008240:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008246:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800824c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008254:	4313      	orrs	r3, r2
 8008256:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	fb01 f303 	mul.w	r3, r1, r3
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	3304      	adds	r3, #4
 8008278:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	3304      	adds	r3, #4
 8008284:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008286:	2300      	movs	r3, #0
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e020      	b.n	80082ce <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	3303      	adds	r3, #3
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4413      	add	r3, r2
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	3302      	adds	r3, #2
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	440b      	add	r3, r1
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082a4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	3301      	adds	r3, #1
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	440b      	add	r3, r1
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80082b2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	440a      	add	r2, r1
 80082ba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80082bc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	3304      	adds	r3, #4
 80082c6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	3304      	adds	r3, #4
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	4a06      	ldr	r2, [pc, #24]	@ (80082ec <FDCAN_CopyMessageToRAM+0xf8>)
 80082d4:	5cd3      	ldrb	r3, [r2, r3]
 80082d6:	461a      	mov	r2, r3
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	4293      	cmp	r3, r2
 80082dc:	d3d6      	bcc.n	800828c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	3724      	adds	r7, #36	@ 0x24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	08012a6c 	.word	0x08012a6c

080082f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b089      	sub	sp, #36	@ 0x24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80082fe:	4b86      	ldr	r3, [pc, #536]	@ (8008518 <HAL_GPIO_Init+0x228>)
 8008300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008302:	e18c      	b.n	800861e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	2101      	movs	r1, #1
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	fa01 f303 	lsl.w	r3, r1, r3
 8008310:	4013      	ands	r3, r2
 8008312:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 817e 	beq.w	8008618 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f003 0303 	and.w	r3, r3, #3
 8008324:	2b01      	cmp	r3, #1
 8008326:	d005      	beq.n	8008334 <HAL_GPIO_Init+0x44>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d130      	bne.n	8008396 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	2203      	movs	r2, #3
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	43db      	mvns	r3, r3
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	4013      	ands	r3, r2
 800834a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	4313      	orrs	r3, r2
 800835c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800836a:	2201      	movs	r2, #1
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	fa02 f303 	lsl.w	r3, r2, r3
 8008372:	43db      	mvns	r3, r3
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	4013      	ands	r3, r2
 8008378:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	091b      	lsrs	r3, r3, #4
 8008380:	f003 0201 	and.w	r2, r3, #1
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	fa02 f303 	lsl.w	r3, r2, r3
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	4313      	orrs	r3, r2
 800838e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d017      	beq.n	80083d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	2203      	movs	r2, #3
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	43db      	mvns	r3, r3
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	4013      	ands	r3, r2
 80083b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	fa02 f303 	lsl.w	r3, r2, r3
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f003 0303 	and.w	r3, r3, #3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d123      	bne.n	8008426 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	08da      	lsrs	r2, r3, #3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3208      	adds	r2, #8
 80083e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	220f      	movs	r2, #15
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	43db      	mvns	r3, r3
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	4013      	ands	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	4313      	orrs	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	08da      	lsrs	r2, r3, #3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3208      	adds	r2, #8
 8008420:	69b9      	ldr	r1, [r7, #24]
 8008422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	2203      	movs	r2, #3
 8008432:	fa02 f303 	lsl.w	r3, r2, r3
 8008436:	43db      	mvns	r3, r3
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	4013      	ands	r3, r2
 800843c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f003 0203 	and.w	r2, r3, #3
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	fa02 f303 	lsl.w	r3, r2, r3
 800844e:	69ba      	ldr	r2, [r7, #24]
 8008450:	4313      	orrs	r3, r2
 8008452:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80d8 	beq.w	8008618 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008468:	4b2c      	ldr	r3, [pc, #176]	@ (800851c <HAL_GPIO_Init+0x22c>)
 800846a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800846e:	4a2b      	ldr	r2, [pc, #172]	@ (800851c <HAL_GPIO_Init+0x22c>)
 8008470:	f043 0302 	orr.w	r3, r3, #2
 8008474:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008478:	4b28      	ldr	r3, [pc, #160]	@ (800851c <HAL_GPIO_Init+0x22c>)
 800847a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008486:	4a26      	ldr	r2, [pc, #152]	@ (8008520 <HAL_GPIO_Init+0x230>)
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	089b      	lsrs	r3, r3, #2
 800848c:	3302      	adds	r3, #2
 800848e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	220f      	movs	r2, #15
 800849e:	fa02 f303 	lsl.w	r3, r2, r3
 80084a2:	43db      	mvns	r3, r3
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	4013      	ands	r3, r2
 80084a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008524 <HAL_GPIO_Init+0x234>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d04a      	beq.n	8008548 <HAL_GPIO_Init+0x258>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008528 <HAL_GPIO_Init+0x238>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d02b      	beq.n	8008512 <HAL_GPIO_Init+0x222>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1b      	ldr	r2, [pc, #108]	@ (800852c <HAL_GPIO_Init+0x23c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d025      	beq.n	800850e <HAL_GPIO_Init+0x21e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008530 <HAL_GPIO_Init+0x240>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d01f      	beq.n	800850a <HAL_GPIO_Init+0x21a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a19      	ldr	r2, [pc, #100]	@ (8008534 <HAL_GPIO_Init+0x244>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d019      	beq.n	8008506 <HAL_GPIO_Init+0x216>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a18      	ldr	r2, [pc, #96]	@ (8008538 <HAL_GPIO_Init+0x248>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <HAL_GPIO_Init+0x212>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a17      	ldr	r2, [pc, #92]	@ (800853c <HAL_GPIO_Init+0x24c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00d      	beq.n	80084fe <HAL_GPIO_Init+0x20e>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a16      	ldr	r2, [pc, #88]	@ (8008540 <HAL_GPIO_Init+0x250>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d007      	beq.n	80084fa <HAL_GPIO_Init+0x20a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a15      	ldr	r2, [pc, #84]	@ (8008544 <HAL_GPIO_Init+0x254>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d101      	bne.n	80084f6 <HAL_GPIO_Init+0x206>
 80084f2:	2309      	movs	r3, #9
 80084f4:	e029      	b.n	800854a <HAL_GPIO_Init+0x25a>
 80084f6:	230a      	movs	r3, #10
 80084f8:	e027      	b.n	800854a <HAL_GPIO_Init+0x25a>
 80084fa:	2307      	movs	r3, #7
 80084fc:	e025      	b.n	800854a <HAL_GPIO_Init+0x25a>
 80084fe:	2306      	movs	r3, #6
 8008500:	e023      	b.n	800854a <HAL_GPIO_Init+0x25a>
 8008502:	2305      	movs	r3, #5
 8008504:	e021      	b.n	800854a <HAL_GPIO_Init+0x25a>
 8008506:	2304      	movs	r3, #4
 8008508:	e01f      	b.n	800854a <HAL_GPIO_Init+0x25a>
 800850a:	2303      	movs	r3, #3
 800850c:	e01d      	b.n	800854a <HAL_GPIO_Init+0x25a>
 800850e:	2302      	movs	r3, #2
 8008510:	e01b      	b.n	800854a <HAL_GPIO_Init+0x25a>
 8008512:	2301      	movs	r3, #1
 8008514:	e019      	b.n	800854a <HAL_GPIO_Init+0x25a>
 8008516:	bf00      	nop
 8008518:	58000080 	.word	0x58000080
 800851c:	58024400 	.word	0x58024400
 8008520:	58000400 	.word	0x58000400
 8008524:	58020000 	.word	0x58020000
 8008528:	58020400 	.word	0x58020400
 800852c:	58020800 	.word	0x58020800
 8008530:	58020c00 	.word	0x58020c00
 8008534:	58021000 	.word	0x58021000
 8008538:	58021400 	.word	0x58021400
 800853c:	58021800 	.word	0x58021800
 8008540:	58021c00 	.word	0x58021c00
 8008544:	58022400 	.word	0x58022400
 8008548:	2300      	movs	r3, #0
 800854a:	69fa      	ldr	r2, [r7, #28]
 800854c:	f002 0203 	and.w	r2, r2, #3
 8008550:	0092      	lsls	r2, r2, #2
 8008552:	4093      	lsls	r3, r2
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	4313      	orrs	r3, r2
 8008558:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800855a:	4938      	ldr	r1, [pc, #224]	@ (800863c <HAL_GPIO_Init+0x34c>)
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	3302      	adds	r3, #2
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	43db      	mvns	r3, r3
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	4013      	ands	r3, r2
 8008578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4313      	orrs	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800858e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	43db      	mvns	r3, r3
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	4013      	ands	r3, r2
 80085a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80085bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	43db      	mvns	r3, r3
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	4013      	ands	r3, r2
 80085d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	43db      	mvns	r3, r3
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	4013      	ands	r3, r2
 80085fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	4313      	orrs	r3, r2
 8008610:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	3301      	adds	r3, #1
 800861c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	fa22 f303 	lsr.w	r3, r2, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	f47f ae6b 	bne.w	8008304 <HAL_GPIO_Init+0x14>
  }
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	3724      	adds	r7, #36	@ 0x24
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	58000400 	.word	0x58000400

08008640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691a      	ldr	r2, [r3, #16]
 8008650:	887b      	ldrh	r3, [r7, #2]
 8008652:	4013      	ands	r3, r2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
 800865c:	e001      	b.n	8008662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008662:	7bfb      	ldrb	r3, [r7, #15]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	807b      	strh	r3, [r7, #2]
 800867c:	4613      	mov	r3, r2
 800867e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008680:	787b      	ldrb	r3, [r7, #1]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008686:	887a      	ldrh	r2, [r7, #2]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800868c:	e003      	b.n	8008696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800868e:	887b      	ldrh	r3, [r7, #2]
 8008690:	041a      	lsls	r2, r3, #16
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	619a      	str	r2, [r3, #24]
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086ac:	4b19      	ldr	r3, [pc, #100]	@ (8008714 <HAL_PWREx_ConfigSupply+0x70>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d00a      	beq.n	80086ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086b8:	4b16      	ldr	r3, [pc, #88]	@ (8008714 <HAL_PWREx_ConfigSupply+0x70>)
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0307 	and.w	r3, r3, #7
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d001      	beq.n	80086ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e01f      	b.n	800870a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e01d      	b.n	800870a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086ce:	4b11      	ldr	r3, [pc, #68]	@ (8008714 <HAL_PWREx_ConfigSupply+0x70>)
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f023 0207 	bic.w	r2, r3, #7
 80086d6:	490f      	ldr	r1, [pc, #60]	@ (8008714 <HAL_PWREx_ConfigSupply+0x70>)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086de:	f7fa f949 	bl	8002974 <HAL_GetTick>
 80086e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086e4:	e009      	b.n	80086fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086e6:	f7fa f945 	bl	8002974 <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086f4:	d901      	bls.n	80086fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e007      	b.n	800870a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086fa:	4b06      	ldr	r3, [pc, #24]	@ (8008714 <HAL_PWREx_ConfigSupply+0x70>)
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008706:	d1ee      	bne.n	80086e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	58024800 	.word	0x58024800

08008718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08c      	sub	sp, #48	@ 0x30
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e3c8      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 8087 	beq.w	8008846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008738:	4b88      	ldr	r3, [pc, #544]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008742:	4b86      	ldr	r3, [pc, #536]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008746:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874a:	2b10      	cmp	r3, #16
 800874c:	d007      	beq.n	800875e <HAL_RCC_OscConfig+0x46>
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	2b18      	cmp	r3, #24
 8008752:	d110      	bne.n	8008776 <HAL_RCC_OscConfig+0x5e>
 8008754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d10b      	bne.n	8008776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800875e:	4b7f      	ldr	r3, [pc, #508]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d06c      	beq.n	8008844 <HAL_RCC_OscConfig+0x12c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d168      	bne.n	8008844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e3a2      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800877e:	d106      	bne.n	800878e <HAL_RCC_OscConfig+0x76>
 8008780:	4b76      	ldr	r3, [pc, #472]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a75      	ldr	r2, [pc, #468]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	e02e      	b.n	80087ec <HAL_RCC_OscConfig+0xd4>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10c      	bne.n	80087b0 <HAL_RCC_OscConfig+0x98>
 8008796:	4b71      	ldr	r3, [pc, #452]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a70      	ldr	r2, [pc, #448]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 800879c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4b6e      	ldr	r3, [pc, #440]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a6d      	ldr	r2, [pc, #436]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e01d      	b.n	80087ec <HAL_RCC_OscConfig+0xd4>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087b8:	d10c      	bne.n	80087d4 <HAL_RCC_OscConfig+0xbc>
 80087ba:	4b68      	ldr	r3, [pc, #416]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a67      	ldr	r2, [pc, #412]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4b65      	ldr	r3, [pc, #404]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a64      	ldr	r2, [pc, #400]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	e00b      	b.n	80087ec <HAL_RCC_OscConfig+0xd4>
 80087d4:	4b61      	ldr	r3, [pc, #388]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a60      	ldr	r2, [pc, #384]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	4b5e      	ldr	r3, [pc, #376]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a5d      	ldr	r2, [pc, #372]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80087e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d013      	beq.n	800881c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f4:	f7fa f8be 	bl	8002974 <HAL_GetTick>
 80087f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087fc:	f7fa f8ba 	bl	8002974 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b64      	cmp	r3, #100	@ 0x64
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e356      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800880e:	4b53      	ldr	r3, [pc, #332]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0xe4>
 800881a:	e014      	b.n	8008846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7fa f8aa 	bl	8002974 <HAL_GetTick>
 8008820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008824:	f7fa f8a6 	bl	8002974 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b64      	cmp	r3, #100	@ 0x64
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e342      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008836:	4b49      	ldr	r3, [pc, #292]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x10c>
 8008842:	e000      	b.n	8008846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 808c 	beq.w	800896c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008854:	4b41      	ldr	r3, [pc, #260]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800885c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800885e:	4b3f      	ldr	r3, [pc, #252]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008862:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <HAL_RCC_OscConfig+0x162>
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	2b18      	cmp	r3, #24
 800886e:	d137      	bne.n	80088e0 <HAL_RCC_OscConfig+0x1c8>
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d132      	bne.n	80088e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800887a:	4b38      	ldr	r3, [pc, #224]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <HAL_RCC_OscConfig+0x17a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e314      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008892:	4b32      	ldr	r3, [pc, #200]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f023 0219 	bic.w	r2, r3, #25
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	492f      	ldr	r1, [pc, #188]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a4:	f7fa f866 	bl	8002974 <HAL_GetTick>
 80088a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088aa:	e008      	b.n	80088be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ac:	f7fa f862 	bl	8002974 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e2fe      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088be:	4b27      	ldr	r3, [pc, #156]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f0      	beq.n	80088ac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ca:	4b24      	ldr	r3, [pc, #144]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	061b      	lsls	r3, r3, #24
 80088d8:	4920      	ldr	r1, [pc, #128]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088de:	e045      	b.n	800896c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d026      	beq.n	8008936 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088e8:	4b1c      	ldr	r3, [pc, #112]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f023 0219 	bic.w	r2, r3, #25
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	4919      	ldr	r1, [pc, #100]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fa:	f7fa f83b 	bl	8002974 <HAL_GetTick>
 80088fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008900:	e008      	b.n	8008914 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008902:	f7fa f837 	bl	8002974 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e2d3      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008914:	4b11      	ldr	r3, [pc, #68]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0f0      	beq.n	8008902 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008920:	4b0e      	ldr	r3, [pc, #56]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	061b      	lsls	r3, r3, #24
 800892e:	490b      	ldr	r1, [pc, #44]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008930:	4313      	orrs	r3, r2
 8008932:	604b      	str	r3, [r1, #4]
 8008934:	e01a      	b.n	800896c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008936:	4b09      	ldr	r3, [pc, #36]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a08      	ldr	r2, [pc, #32]	@ (800895c <HAL_RCC_OscConfig+0x244>)
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008942:	f7fa f817 	bl	8002974 <HAL_GetTick>
 8008946:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008948:	e00a      	b.n	8008960 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800894a:	f7fa f813 	bl	8002974 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d903      	bls.n	8008960 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e2af      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
 800895c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008960:	4b96      	ldr	r3, [pc, #600]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1ee      	bne.n	800894a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b00      	cmp	r3, #0
 8008976:	d06a      	beq.n	8008a4e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008978:	4b90      	ldr	r3, [pc, #576]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008980:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008982:	4b8e      	ldr	r3, [pc, #568]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008986:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2b08      	cmp	r3, #8
 800898c:	d007      	beq.n	800899e <HAL_RCC_OscConfig+0x286>
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	2b18      	cmp	r3, #24
 8008992:	d11b      	bne.n	80089cc <HAL_RCC_OscConfig+0x2b4>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	2b01      	cmp	r3, #1
 800899c:	d116      	bne.n	80089cc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800899e:	4b87      	ldr	r3, [pc, #540]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <HAL_RCC_OscConfig+0x29e>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	2b80      	cmp	r3, #128	@ 0x80
 80089b0:	d001      	beq.n	80089b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e282      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089b6:	4b81      	ldr	r3, [pc, #516]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	061b      	lsls	r3, r3, #24
 80089c4:	497d      	ldr	r1, [pc, #500]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089ca:	e040      	b.n	8008a4e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d023      	beq.n	8008a1c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089d4:	4b79      	ldr	r3, [pc, #484]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a78      	ldr	r2, [pc, #480]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 80089da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e0:	f7f9 ffc8 	bl	8002974 <HAL_GetTick>
 80089e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089e8:	f7f9 ffc4 	bl	8002974 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e260      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089fa:	4b70      	ldr	r3, [pc, #448]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0f0      	beq.n	80089e8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a06:	4b6d      	ldr	r3, [pc, #436]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	061b      	lsls	r3, r3, #24
 8008a14:	4969      	ldr	r1, [pc, #420]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60cb      	str	r3, [r1, #12]
 8008a1a:	e018      	b.n	8008a4e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a1c:	4b67      	ldr	r3, [pc, #412]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a66      	ldr	r2, [pc, #408]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a28:	f7f9 ffa4 	bl	8002974 <HAL_GetTick>
 8008a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a2e:	e008      	b.n	8008a42 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a30:	f7f9 ffa0 	bl	8002974 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d901      	bls.n	8008a42 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e23c      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a42:	4b5e      	ldr	r3, [pc, #376]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f0      	bne.n	8008a30 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0308 	and.w	r3, r3, #8
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d036      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d019      	beq.n	8008a96 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a62:	4b56      	ldr	r3, [pc, #344]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a66:	4a55      	ldr	r2, [pc, #340]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a68:	f043 0301 	orr.w	r3, r3, #1
 8008a6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6e:	f7f9 ff81 	bl	8002974 <HAL_GetTick>
 8008a72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a74:	e008      	b.n	8008a88 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a76:	f7f9 ff7d 	bl	8002974 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d901      	bls.n	8008a88 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e219      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a88:	4b4c      	ldr	r3, [pc, #304]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0f0      	beq.n	8008a76 <HAL_RCC_OscConfig+0x35e>
 8008a94:	e018      	b.n	8008ac8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a96:	4b49      	ldr	r3, [pc, #292]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a9a:	4a48      	ldr	r2, [pc, #288]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa2:	f7f9 ff67 	bl	8002974 <HAL_GetTick>
 8008aa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aaa:	f7f9 ff63 	bl	8002974 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e1ff      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008abc:	4b3f      	ldr	r3, [pc, #252]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1f0      	bne.n	8008aaa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d036      	beq.n	8008b42 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d019      	beq.n	8008b10 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008adc:	4b37      	ldr	r3, [pc, #220]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a36      	ldr	r2, [pc, #216]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008ae2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008ae6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ae8:	f7f9 ff44 	bl	8002974 <HAL_GetTick>
 8008aec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008af0:	f7f9 ff40 	bl	8002974 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e1dc      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b02:	4b2e      	ldr	r3, [pc, #184]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0f0      	beq.n	8008af0 <HAL_RCC_OscConfig+0x3d8>
 8008b0e:	e018      	b.n	8008b42 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b10:	4b2a      	ldr	r3, [pc, #168]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a29      	ldr	r2, [pc, #164]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b1c:	f7f9 ff2a 	bl	8002974 <HAL_GetTick>
 8008b20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b24:	f7f9 ff26 	bl	8002974 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e1c2      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b36:	4b21      	ldr	r3, [pc, #132]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f0      	bne.n	8008b24 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 8086 	beq.w	8008c5c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b50:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc0 <HAL_RCC_OscConfig+0x4a8>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a1a      	ldr	r2, [pc, #104]	@ (8008bc0 <HAL_RCC_OscConfig+0x4a8>)
 8008b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b5c:	f7f9 ff0a 	bl	8002974 <HAL_GetTick>
 8008b60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b64:	f7f9 ff06 	bl	8002974 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b64      	cmp	r3, #100	@ 0x64
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e1a2      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b76:	4b12      	ldr	r3, [pc, #72]	@ (8008bc0 <HAL_RCC_OscConfig+0x4a8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0f0      	beq.n	8008b64 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d106      	bne.n	8008b98 <HAL_RCC_OscConfig+0x480>
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008b90:	f043 0301 	orr.w	r3, r3, #1
 8008b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b96:	e032      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e6>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d111      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x4ac>
 8008ba0:	4b06      	ldr	r3, [pc, #24]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ba4:	4a05      	ldr	r2, [pc, #20]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bac:	4b03      	ldr	r3, [pc, #12]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb0:	4a02      	ldr	r2, [pc, #8]	@ (8008bbc <HAL_RCC_OscConfig+0x4a4>)
 8008bb2:	f023 0304 	bic.w	r3, r3, #4
 8008bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bb8:	e021      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e6>
 8008bba:	bf00      	nop
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	58024800 	.word	0x58024800
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	2b05      	cmp	r3, #5
 8008bca:	d10c      	bne.n	8008be6 <HAL_RCC_OscConfig+0x4ce>
 8008bcc:	4b83      	ldr	r3, [pc, #524]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd0:	4a82      	ldr	r2, [pc, #520]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008bd2:	f043 0304 	orr.w	r3, r3, #4
 8008bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bd8:	4b80      	ldr	r3, [pc, #512]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bdc:	4a7f      	ldr	r2, [pc, #508]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008bde:	f043 0301 	orr.w	r3, r3, #1
 8008be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008be4:	e00b      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e6>
 8008be6:	4b7d      	ldr	r3, [pc, #500]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bea:	4a7c      	ldr	r2, [pc, #496]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf6:	4a79      	ldr	r2, [pc, #484]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008bf8:	f023 0304 	bic.w	r3, r3, #4
 8008bfc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d015      	beq.n	8008c32 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c06:	f7f9 feb5 	bl	8002974 <HAL_GetTick>
 8008c0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c0c:	e00a      	b.n	8008c24 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c0e:	f7f9 feb1 	bl	8002974 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e14b      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c24:	4b6d      	ldr	r3, [pc, #436]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c28:	f003 0302 	and.w	r3, r3, #2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0ee      	beq.n	8008c0e <HAL_RCC_OscConfig+0x4f6>
 8008c30:	e014      	b.n	8008c5c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c32:	f7f9 fe9f 	bl	8002974 <HAL_GetTick>
 8008c36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c38:	e00a      	b.n	8008c50 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c3a:	f7f9 fe9b 	bl	8002974 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e135      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c50:	4b62      	ldr	r3, [pc, #392]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1ee      	bne.n	8008c3a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 812a 	beq.w	8008eba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c66:	4b5d      	ldr	r3, [pc, #372]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c6e:	2b18      	cmp	r3, #24
 8008c70:	f000 80ba 	beq.w	8008de8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	f040 8095 	bne.w	8008da8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c7e:	4b57      	ldr	r3, [pc, #348]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a56      	ldr	r2, [pc, #344]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008c84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8a:	f7f9 fe73 	bl	8002974 <HAL_GetTick>
 8008c8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c92:	f7f9 fe6f 	bl	8002974 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e10b      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f0      	bne.n	8008c92 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008cb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cb4:	4b4a      	ldr	r3, [pc, #296]	@ (8008de0 <HAL_RCC_OscConfig+0x6c8>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008cc0:	0112      	lsls	r2, r2, #4
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	4945      	ldr	r1, [pc, #276]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	628b      	str	r3, [r1, #40]	@ 0x28
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	025b      	lsls	r3, r3, #9
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	041b      	lsls	r3, r3, #16
 8008ce8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cec:	431a      	orrs	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cfa:	4938      	ldr	r1, [pc, #224]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d00:	4b36      	ldr	r3, [pc, #216]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d04:	4a35      	ldr	r2, [pc, #212]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d06:	f023 0301 	bic.w	r3, r3, #1
 8008d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d0c:	4b33      	ldr	r3, [pc, #204]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d10:	4b34      	ldr	r3, [pc, #208]	@ (8008de4 <HAL_RCC_OscConfig+0x6cc>)
 8008d12:	4013      	ands	r3, r2
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d18:	00d2      	lsls	r2, r2, #3
 8008d1a:	4930      	ldr	r1, [pc, #192]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d20:	4b2e      	ldr	r3, [pc, #184]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d24:	f023 020c 	bic.w	r2, r3, #12
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2c:	492b      	ldr	r1, [pc, #172]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d32:	4b2a      	ldr	r3, [pc, #168]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d36:	f023 0202 	bic.w	r2, r3, #2
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d3e:	4927      	ldr	r1, [pc, #156]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d44:	4b25      	ldr	r3, [pc, #148]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	4a24      	ldr	r2, [pc, #144]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d50:	4b22      	ldr	r3, [pc, #136]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d54:	4a21      	ldr	r2, [pc, #132]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d60:	4a1e      	ldr	r2, [pc, #120]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d68:	4b1c      	ldr	r3, [pc, #112]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d6e:	f043 0301 	orr.w	r3, r3, #1
 8008d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d74:	4b19      	ldr	r3, [pc, #100]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a18      	ldr	r2, [pc, #96]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d80:	f7f9 fdf8 	bl	8002974 <HAL_GetTick>
 8008d84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d88:	f7f9 fdf4 	bl	8002974 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e090      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d9a:	4b10      	ldr	r3, [pc, #64]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0f0      	beq.n	8008d88 <HAL_RCC_OscConfig+0x670>
 8008da6:	e088      	b.n	8008eba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008da8:	4b0c      	ldr	r3, [pc, #48]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a0b      	ldr	r2, [pc, #44]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db4:	f7f9 fdde 	bl	8002974 <HAL_GetTick>
 8008db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dbc:	f7f9 fdda 	bl	8002974 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e076      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dce:	4b03      	ldr	r3, [pc, #12]	@ (8008ddc <HAL_RCC_OscConfig+0x6c4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1f0      	bne.n	8008dbc <HAL_RCC_OscConfig+0x6a4>
 8008dda:	e06e      	b.n	8008eba <HAL_RCC_OscConfig+0x7a2>
 8008ddc:	58024400 	.word	0x58024400
 8008de0:	fffffc0c 	.word	0xfffffc0c
 8008de4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008de8:	4b36      	ldr	r3, [pc, #216]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008dee:	4b35      	ldr	r3, [pc, #212]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d031      	beq.n	8008e60 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f003 0203 	and.w	r2, r3, #3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d12a      	bne.n	8008e60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	091b      	lsrs	r3, r3, #4
 8008e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d122      	bne.n	8008e60 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d11a      	bne.n	8008e60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	0a5b      	lsrs	r3, r3, #9
 8008e2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d111      	bne.n	8008e60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	0c1b      	lsrs	r3, r3, #16
 8008e40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d108      	bne.n	8008e60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	0e1b      	lsrs	r3, r3, #24
 8008e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d001      	beq.n	8008e64 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e02b      	b.n	8008ebc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e64:	4b17      	ldr	r3, [pc, #92]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e68:	08db      	lsrs	r3, r3, #3
 8008e6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d01f      	beq.n	8008eba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e7a:	4b12      	ldr	r3, [pc, #72]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7e:	4a11      	ldr	r2, [pc, #68]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008e80:	f023 0301 	bic.w	r3, r3, #1
 8008e84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e86:	f7f9 fd75 	bl	8002974 <HAL_GetTick>
 8008e8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008e8c:	bf00      	nop
 8008e8e:	f7f9 fd71 	bl	8002974 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d0f9      	beq.n	8008e8e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec8 <HAL_RCC_OscConfig+0x7b0>)
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ea6:	00d2      	lsls	r2, r2, #3
 8008ea8:	4906      	ldr	r1, [pc, #24]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008eae:	4b05      	ldr	r3, [pc, #20]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb2:	4a04      	ldr	r2, [pc, #16]	@ (8008ec4 <HAL_RCC_OscConfig+0x7ac>)
 8008eb4:	f043 0301 	orr.w	r3, r3, #1
 8008eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3730      	adds	r7, #48	@ 0x30
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	ffff0007 	.word	0xffff0007

08008ecc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e19c      	b.n	800921a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800910c <HAL_RCC_ClockConfig+0x240>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 030f 	and.w	r3, r3, #15
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d910      	bls.n	8008f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eee:	4b87      	ldr	r3, [pc, #540]	@ (800910c <HAL_RCC_ClockConfig+0x240>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f023 020f 	bic.w	r2, r3, #15
 8008ef6:	4985      	ldr	r1, [pc, #532]	@ (800910c <HAL_RCC_ClockConfig+0x240>)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008efe:	4b83      	ldr	r3, [pc, #524]	@ (800910c <HAL_RCC_ClockConfig+0x240>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d001      	beq.n	8008f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e184      	b.n	800921a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d010      	beq.n	8008f3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	4b7b      	ldr	r3, [pc, #492]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d908      	bls.n	8008f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f2c:	4b78      	ldr	r3, [pc, #480]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	4975      	ldr	r1, [pc, #468]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d010      	beq.n	8008f6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	695a      	ldr	r2, [r3, #20]
 8008f4e:	4b70      	ldr	r3, [pc, #448]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d908      	bls.n	8008f6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	496a      	ldr	r1, [pc, #424]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d010      	beq.n	8008f9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699a      	ldr	r2, [r3, #24]
 8008f7c:	4b64      	ldr	r3, [pc, #400]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d908      	bls.n	8008f9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f88:	4b61      	ldr	r3, [pc, #388]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	495e      	ldr	r1, [pc, #376]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0320 	and.w	r3, r3, #32
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d010      	beq.n	8008fc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69da      	ldr	r2, [r3, #28]
 8008faa:	4b59      	ldr	r3, [pc, #356]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d908      	bls.n	8008fc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fb6:	4b56      	ldr	r3, [pc, #344]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	4953      	ldr	r1, [pc, #332]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0302 	and.w	r3, r3, #2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d010      	beq.n	8008ff6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d908      	bls.n	8008ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f023 020f 	bic.w	r2, r3, #15
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	4947      	ldr	r1, [pc, #284]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d055      	beq.n	80090ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009002:	4b43      	ldr	r3, [pc, #268]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	4940      	ldr	r1, [pc, #256]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8009010:	4313      	orrs	r3, r2
 8009012:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b02      	cmp	r3, #2
 800901a:	d107      	bne.n	800902c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800901c:	4b3c      	ldr	r3, [pc, #240]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d121      	bne.n	800906c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e0f6      	b.n	800921a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2b03      	cmp	r3, #3
 8009032:	d107      	bne.n	8009044 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009034:	4b36      	ldr	r3, [pc, #216]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d115      	bne.n	800906c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e0ea      	b.n	800921a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d107      	bne.n	800905c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800904c:	4b30      	ldr	r3, [pc, #192]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009054:	2b00      	cmp	r3, #0
 8009056:	d109      	bne.n	800906c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e0de      	b.n	800921a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800905c:	4b2c      	ldr	r3, [pc, #176]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e0d6      	b.n	800921a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800906c:	4b28      	ldr	r3, [pc, #160]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f023 0207 	bic.w	r2, r3, #7
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4925      	ldr	r1, [pc, #148]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 800907a:	4313      	orrs	r3, r2
 800907c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800907e:	f7f9 fc79 	bl	8002974 <HAL_GetTick>
 8009082:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009084:	e00a      	b.n	800909c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009086:	f7f9 fc75 	bl	8002974 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009094:	4293      	cmp	r3, r2
 8009096:	d901      	bls.n	800909c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e0be      	b.n	800921a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800909c:	4b1c      	ldr	r3, [pc, #112]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d1eb      	bne.n	8009086 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d010      	beq.n	80090dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	4b14      	ldr	r3, [pc, #80]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	f003 030f 	and.w	r3, r3, #15
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d208      	bcs.n	80090dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090ca:	4b11      	ldr	r3, [pc, #68]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f023 020f 	bic.w	r2, r3, #15
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	490e      	ldr	r1, [pc, #56]	@ (8009110 <HAL_RCC_ClockConfig+0x244>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090dc:	4b0b      	ldr	r3, [pc, #44]	@ (800910c <HAL_RCC_ClockConfig+0x240>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d214      	bcs.n	8009114 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ea:	4b08      	ldr	r3, [pc, #32]	@ (800910c <HAL_RCC_ClockConfig+0x240>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f023 020f 	bic.w	r2, r3, #15
 80090f2:	4906      	ldr	r1, [pc, #24]	@ (800910c <HAL_RCC_ClockConfig+0x240>)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090fa:	4b04      	ldr	r3, [pc, #16]	@ (800910c <HAL_RCC_ClockConfig+0x240>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d005      	beq.n	8009114 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e086      	b.n	800921a <HAL_RCC_ClockConfig+0x34e>
 800910c:	52002000 	.word	0x52002000
 8009110:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d010      	beq.n	8009142 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691a      	ldr	r2, [r3, #16]
 8009124:	4b3f      	ldr	r3, [pc, #252]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800912c:	429a      	cmp	r2, r3
 800912e:	d208      	bcs.n	8009142 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009130:	4b3c      	ldr	r3, [pc, #240]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	4939      	ldr	r1, [pc, #228]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 800913e:	4313      	orrs	r3, r2
 8009140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d010      	beq.n	8009170 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695a      	ldr	r2, [r3, #20]
 8009152:	4b34      	ldr	r3, [pc, #208]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800915a:	429a      	cmp	r2, r3
 800915c:	d208      	bcs.n	8009170 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800915e:	4b31      	ldr	r3, [pc, #196]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	492e      	ldr	r1, [pc, #184]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 800916c:	4313      	orrs	r3, r2
 800916e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	d010      	beq.n	800919e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	4b28      	ldr	r3, [pc, #160]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009188:	429a      	cmp	r2, r3
 800918a:	d208      	bcs.n	800919e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800918c:	4b25      	ldr	r3, [pc, #148]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	4922      	ldr	r1, [pc, #136]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 800919a:	4313      	orrs	r3, r2
 800919c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d010      	beq.n	80091cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69da      	ldr	r2, [r3, #28]
 80091ae:	4b1d      	ldr	r3, [pc, #116]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d208      	bcs.n	80091cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	4917      	ldr	r1, [pc, #92]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80091cc:	f000 f834 	bl	8009238 <HAL_RCC_GetSysClockFreq>
 80091d0:	4602      	mov	r2, r0
 80091d2:	4b14      	ldr	r3, [pc, #80]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	0a1b      	lsrs	r3, r3, #8
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	4912      	ldr	r1, [pc, #72]	@ (8009228 <HAL_RCC_ClockConfig+0x35c>)
 80091de:	5ccb      	ldrb	r3, [r1, r3]
 80091e0:	f003 031f 	and.w	r3, r3, #31
 80091e4:	fa22 f303 	lsr.w	r3, r2, r3
 80091e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009224 <HAL_RCC_ClockConfig+0x358>)
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	4a0d      	ldr	r2, [pc, #52]	@ (8009228 <HAL_RCC_ClockConfig+0x35c>)
 80091f4:	5cd3      	ldrb	r3, [r2, r3]
 80091f6:	f003 031f 	and.w	r3, r3, #31
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	4a0a      	ldr	r2, [pc, #40]	@ (800922c <HAL_RCC_ClockConfig+0x360>)
 8009202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009204:	4a0a      	ldr	r2, [pc, #40]	@ (8009230 <HAL_RCC_ClockConfig+0x364>)
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800920a:	4b0a      	ldr	r3, [pc, #40]	@ (8009234 <HAL_RCC_ClockConfig+0x368>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4618      	mov	r0, r3
 8009210:	f7f9 fb66 	bl	80028e0 <HAL_InitTick>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	58024400 	.word	0x58024400
 8009228:	08012a54 	.word	0x08012a54
 800922c:	24000010 	.word	0x24000010
 8009230:	2400000c 	.word	0x2400000c
 8009234:	24000014 	.word	0x24000014

08009238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009238:	b480      	push	{r7}
 800923a:	b089      	sub	sp, #36	@ 0x24
 800923c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800923e:	4bb3      	ldr	r3, [pc, #716]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009246:	2b18      	cmp	r3, #24
 8009248:	f200 8155 	bhi.w	80094f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800924c:	a201      	add	r2, pc, #4	@ (adr r2, 8009254 <HAL_RCC_GetSysClockFreq+0x1c>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	080092b9 	.word	0x080092b9
 8009258:	080094f7 	.word	0x080094f7
 800925c:	080094f7 	.word	0x080094f7
 8009260:	080094f7 	.word	0x080094f7
 8009264:	080094f7 	.word	0x080094f7
 8009268:	080094f7 	.word	0x080094f7
 800926c:	080094f7 	.word	0x080094f7
 8009270:	080094f7 	.word	0x080094f7
 8009274:	080092df 	.word	0x080092df
 8009278:	080094f7 	.word	0x080094f7
 800927c:	080094f7 	.word	0x080094f7
 8009280:	080094f7 	.word	0x080094f7
 8009284:	080094f7 	.word	0x080094f7
 8009288:	080094f7 	.word	0x080094f7
 800928c:	080094f7 	.word	0x080094f7
 8009290:	080094f7 	.word	0x080094f7
 8009294:	080092e5 	.word	0x080092e5
 8009298:	080094f7 	.word	0x080094f7
 800929c:	080094f7 	.word	0x080094f7
 80092a0:	080094f7 	.word	0x080094f7
 80092a4:	080094f7 	.word	0x080094f7
 80092a8:	080094f7 	.word	0x080094f7
 80092ac:	080094f7 	.word	0x080094f7
 80092b0:	080094f7 	.word	0x080094f7
 80092b4:	080092eb 	.word	0x080092eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092b8:	4b94      	ldr	r3, [pc, #592]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d009      	beq.n	80092d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092c4:	4b91      	ldr	r3, [pc, #580]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	08db      	lsrs	r3, r3, #3
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	4a90      	ldr	r2, [pc, #576]	@ (8009510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092d0:	fa22 f303 	lsr.w	r3, r2, r3
 80092d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80092d6:	e111      	b.n	80094fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80092d8:	4b8d      	ldr	r3, [pc, #564]	@ (8009510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092da:	61bb      	str	r3, [r7, #24]
      break;
 80092dc:	e10e      	b.n	80094fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80092de:	4b8d      	ldr	r3, [pc, #564]	@ (8009514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092e0:	61bb      	str	r3, [r7, #24]
      break;
 80092e2:	e10b      	b.n	80094fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80092e4:	4b8c      	ldr	r3, [pc, #560]	@ (8009518 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80092e6:	61bb      	str	r3, [r7, #24]
      break;
 80092e8:	e108      	b.n	80094fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092ea:	4b88      	ldr	r3, [pc, #544]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80092f4:	4b85      	ldr	r3, [pc, #532]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f8:	091b      	lsrs	r3, r3, #4
 80092fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009300:	4b82      	ldr	r3, [pc, #520]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800930a:	4b80      	ldr	r3, [pc, #512]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800930c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800930e:	08db      	lsrs	r3, r3, #3
 8009310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	fb02 f303 	mul.w	r3, r2, r3
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009322:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 80e1 	beq.w	80094f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b02      	cmp	r3, #2
 8009332:	f000 8083 	beq.w	800943c <HAL_RCC_GetSysClockFreq+0x204>
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b02      	cmp	r3, #2
 800933a:	f200 80a1 	bhi.w	8009480 <HAL_RCC_GetSysClockFreq+0x248>
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <HAL_RCC_GetSysClockFreq+0x114>
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d056      	beq.n	80093f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800934a:	e099      	b.n	8009480 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800934c:	4b6f      	ldr	r3, [pc, #444]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b00      	cmp	r3, #0
 8009356:	d02d      	beq.n	80093b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009358:	4b6c      	ldr	r3, [pc, #432]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	08db      	lsrs	r3, r3, #3
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	4a6b      	ldr	r2, [pc, #428]	@ (8009510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009364:	fa22 f303 	lsr.w	r3, r2, r3
 8009368:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009382:	4b62      	ldr	r3, [pc, #392]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009392:	ed97 6a02 	vldr	s12, [r7, #8]
 8009396:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800951c <HAL_RCC_GetSysClockFreq+0x2e4>
 800939a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80093b2:	e087      	b.n	80094c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009520 <HAL_RCC_GetSysClockFreq+0x2e8>
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b51      	ldr	r3, [pc, #324]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800951c <HAL_RCC_GetSysClockFreq+0x2e4>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093f6:	e065      	b.n	80094c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009524 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b40      	ldr	r3, [pc, #256]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a02 	vldr	s12, [r7, #8]
 800941e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800951c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800943a:	e043      	b.n	80094c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009528 <HAL_RCC_GetSysClockFreq+0x2f0>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b2f      	ldr	r3, [pc, #188]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009462:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800951c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800947e:	e021      	b.n	80094c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800948e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009492:	4b1e      	ldr	r3, [pc, #120]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800951c <HAL_RCC_GetSysClockFreq+0x2e4>
 80094aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80094c4:	4b11      	ldr	r3, [pc, #68]	@ (800950c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c8:	0a5b      	lsrs	r3, r3, #9
 80094ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ce:	3301      	adds	r3, #1
 80094d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	ee07 3a90 	vmov	s15, r3
 80094d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e8:	ee17 3a90 	vmov	r3, s15
 80094ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80094ee:	e005      	b.n	80094fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61bb      	str	r3, [r7, #24]
      break;
 80094f4:	e002      	b.n	80094fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80094f6:	4b07      	ldr	r3, [pc, #28]	@ (8009514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094f8:	61bb      	str	r3, [r7, #24]
      break;
 80094fa:	bf00      	nop
  }

  return sysclockfreq;
 80094fc:	69bb      	ldr	r3, [r7, #24]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3724      	adds	r7, #36	@ 0x24
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	58024400 	.word	0x58024400
 8009510:	03d09000 	.word	0x03d09000
 8009514:	003d0900 	.word	0x003d0900
 8009518:	016e3600 	.word	0x016e3600
 800951c:	46000000 	.word	0x46000000
 8009520:	4c742400 	.word	0x4c742400
 8009524:	4a742400 	.word	0x4a742400
 8009528:	4bb71b00 	.word	0x4bb71b00

0800952c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009532:	f7ff fe81 	bl	8009238 <HAL_RCC_GetSysClockFreq>
 8009536:	4602      	mov	r2, r0
 8009538:	4b10      	ldr	r3, [pc, #64]	@ (800957c <HAL_RCC_GetHCLKFreq+0x50>)
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	0a1b      	lsrs	r3, r3, #8
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	490f      	ldr	r1, [pc, #60]	@ (8009580 <HAL_RCC_GetHCLKFreq+0x54>)
 8009544:	5ccb      	ldrb	r3, [r1, r3]
 8009546:	f003 031f 	and.w	r3, r3, #31
 800954a:	fa22 f303 	lsr.w	r3, r2, r3
 800954e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009550:	4b0a      	ldr	r3, [pc, #40]	@ (800957c <HAL_RCC_GetHCLKFreq+0x50>)
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	4a09      	ldr	r2, [pc, #36]	@ (8009580 <HAL_RCC_GetHCLKFreq+0x54>)
 800955a:	5cd3      	ldrb	r3, [r2, r3]
 800955c:	f003 031f 	and.w	r3, r3, #31
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	fa22 f303 	lsr.w	r3, r2, r3
 8009566:	4a07      	ldr	r2, [pc, #28]	@ (8009584 <HAL_RCC_GetHCLKFreq+0x58>)
 8009568:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800956a:	4a07      	ldr	r2, [pc, #28]	@ (8009588 <HAL_RCC_GetHCLKFreq+0x5c>)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009570:	4b04      	ldr	r3, [pc, #16]	@ (8009584 <HAL_RCC_GetHCLKFreq+0x58>)
 8009572:	681b      	ldr	r3, [r3, #0]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	58024400 	.word	0x58024400
 8009580:	08012a54 	.word	0x08012a54
 8009584:	24000010 	.word	0x24000010
 8009588:	2400000c 	.word	0x2400000c

0800958c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009590:	f7ff ffcc 	bl	800952c <HAL_RCC_GetHCLKFreq>
 8009594:	4602      	mov	r2, r0
 8009596:	4b06      	ldr	r3, [pc, #24]	@ (80095b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	091b      	lsrs	r3, r3, #4
 800959c:	f003 0307 	and.w	r3, r3, #7
 80095a0:	4904      	ldr	r1, [pc, #16]	@ (80095b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095a2:	5ccb      	ldrb	r3, [r1, r3]
 80095a4:	f003 031f 	and.w	r3, r3, #31
 80095a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	58024400 	.word	0x58024400
 80095b4:	08012a54 	.word	0x08012a54

080095b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095bc:	f7ff ffb6 	bl	800952c <HAL_RCC_GetHCLKFreq>
 80095c0:	4602      	mov	r2, r0
 80095c2:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	0a1b      	lsrs	r3, r3, #8
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	4904      	ldr	r1, [pc, #16]	@ (80095e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80095ce:	5ccb      	ldrb	r3, [r1, r3]
 80095d0:	f003 031f 	and.w	r3, r3, #31
 80095d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80095d8:	4618      	mov	r0, r3
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	58024400 	.word	0x58024400
 80095e0:	08012a54 	.word	0x08012a54

080095e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095e8:	b0c6      	sub	sp, #280	@ 0x118
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095f0:	2300      	movs	r3, #0
 80095f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095f6:	2300      	movs	r3, #0
 80095f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009608:	2500      	movs	r5, #0
 800960a:	ea54 0305 	orrs.w	r3, r4, r5
 800960e:	d049      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009616:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800961a:	d02f      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800961c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009620:	d828      	bhi.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009626:	d01a      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009628:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800962c:	d822      	bhi.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009636:	d007      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009638:	e01c      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800963a:	4bab      	ldr	r3, [pc, #684]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800963c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963e:	4aaa      	ldr	r2, [pc, #680]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009646:	e01a      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964c:	3308      	adds	r3, #8
 800964e:	2102      	movs	r1, #2
 8009650:	4618      	mov	r0, r3
 8009652:	f002 fa49 	bl	800bae8 <RCCEx_PLL2_Config>
 8009656:	4603      	mov	r3, r0
 8009658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800965c:	e00f      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800965e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009662:	3328      	adds	r3, #40	@ 0x28
 8009664:	2102      	movs	r1, #2
 8009666:	4618      	mov	r0, r3
 8009668:	f002 faf0 	bl	800bc4c <RCCEx_PLL3_Config>
 800966c:	4603      	mov	r3, r0
 800966e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009672:	e004      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800967a:	e000      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800967c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009686:	4b98      	ldr	r3, [pc, #608]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800968a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009694:	4a94      	ldr	r2, [pc, #592]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009696:	430b      	orrs	r3, r1
 8009698:	6513      	str	r3, [r2, #80]	@ 0x50
 800969a:	e003      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80096b0:	f04f 0900 	mov.w	r9, #0
 80096b4:	ea58 0309 	orrs.w	r3, r8, r9
 80096b8:	d047      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80096ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d82a      	bhi.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80096c4:	a201      	add	r2, pc, #4	@ (adr r2, 80096cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80096c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	080096e1 	.word	0x080096e1
 80096d0:	080096ef 	.word	0x080096ef
 80096d4:	08009705 	.word	0x08009705
 80096d8:	08009723 	.word	0x08009723
 80096dc:	08009723 	.word	0x08009723
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e0:	4b81      	ldr	r3, [pc, #516]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e4:	4a80      	ldr	r2, [pc, #512]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096ec:	e01a      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f2:	3308      	adds	r3, #8
 80096f4:	2100      	movs	r1, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f002 f9f6 	bl	800bae8 <RCCEx_PLL2_Config>
 80096fc:	4603      	mov	r3, r0
 80096fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009702:	e00f      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009708:	3328      	adds	r3, #40	@ 0x28
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f002 fa9d 	bl	800bc4c <RCCEx_PLL3_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009718:	e004      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009720:	e000      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800972c:	4b6e      	ldr	r3, [pc, #440]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800972e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009730:	f023 0107 	bic.w	r1, r3, #7
 8009734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800973a:	4a6b      	ldr	r2, [pc, #428]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800973c:	430b      	orrs	r3, r1
 800973e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009740:	e003      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009746:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800974a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009756:	f04f 0b00 	mov.w	fp, #0
 800975a:	ea5a 030b 	orrs.w	r3, sl, fp
 800975e:	d05b      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009768:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800976c:	d03b      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800976e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009772:	d834      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009774:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009778:	d037      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800977a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800977e:	d82e      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009780:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009784:	d033      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009786:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800978a:	d828      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800978c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009790:	d01a      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009796:	d822      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800979c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097a0:	d007      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80097a2:	e01c      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a4:	4b50      	ldr	r3, [pc, #320]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a8:	4a4f      	ldr	r2, [pc, #316]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097b0:	e01e      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b6:	3308      	adds	r3, #8
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f002 f994 	bl	800bae8 <RCCEx_PLL2_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097c6:	e013      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097cc:	3328      	adds	r3, #40	@ 0x28
 80097ce:	2100      	movs	r1, #0
 80097d0:	4618      	mov	r0, r3
 80097d2:	f002 fa3b 	bl	800bc4c <RCCEx_PLL3_Config>
 80097d6:	4603      	mov	r3, r0
 80097d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097dc:	e008      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097e4:	e004      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80097e6:	bf00      	nop
 80097e8:	e002      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80097ea:	bf00      	nop
 80097ec:	e000      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80097ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10b      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097f8:	4b3b      	ldr	r3, [pc, #236]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009808:	4a37      	ldr	r2, [pc, #220]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800980a:	430b      	orrs	r3, r1
 800980c:	6593      	str	r3, [r2, #88]	@ 0x58
 800980e:	e003      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009814:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009828:	2300      	movs	r3, #0
 800982a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800982e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009832:	460b      	mov	r3, r1
 8009834:	4313      	orrs	r3, r2
 8009836:	d05d      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009840:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009844:	d03b      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009846:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800984a:	d834      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800984c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009850:	d037      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009856:	d82e      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009858:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800985c:	d033      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800985e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009862:	d828      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009868:	d01a      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800986a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800986e:	d822      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009878:	d007      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800987a:	e01c      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987c:	4b1a      	ldr	r3, [pc, #104]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	4a19      	ldr	r2, [pc, #100]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009888:	e01e      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800988a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800988e:	3308      	adds	r3, #8
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f002 f928 	bl	800bae8 <RCCEx_PLL2_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800989e:	e013      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a4:	3328      	adds	r3, #40	@ 0x28
 80098a6:	2100      	movs	r1, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f002 f9cf 	bl	800bc4c <RCCEx_PLL3_Config>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098b4:	e008      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098bc:	e004      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098be:	bf00      	nop
 80098c0:	e002      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098c2:	bf00      	nop
 80098c4:	e000      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80098c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10d      	bne.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098d0:	4b05      	ldr	r3, [pc, #20]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80098d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80098e0:	4a01      	ldr	r2, [pc, #4]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098e2:	430b      	orrs	r3, r1
 80098e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80098e6:	e005      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80098e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80098f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009900:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009904:	2300      	movs	r3, #0
 8009906:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800990a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800990e:	460b      	mov	r3, r1
 8009910:	4313      	orrs	r3, r2
 8009912:	d03a      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800991a:	2b30      	cmp	r3, #48	@ 0x30
 800991c:	d01f      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800991e:	2b30      	cmp	r3, #48	@ 0x30
 8009920:	d819      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009922:	2b20      	cmp	r3, #32
 8009924:	d00c      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009926:	2b20      	cmp	r3, #32
 8009928:	d815      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d019      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800992e:	2b10      	cmp	r3, #16
 8009930:	d111      	bne.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009932:	4baa      	ldr	r3, [pc, #680]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009936:	4aa9      	ldr	r2, [pc, #676]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800993c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800993e:	e011      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009944:	3308      	adds	r3, #8
 8009946:	2102      	movs	r1, #2
 8009948:	4618      	mov	r0, r3
 800994a:	f002 f8cd 	bl	800bae8 <RCCEx_PLL2_Config>
 800994e:	4603      	mov	r3, r0
 8009950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009954:	e006      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800995c:	e002      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800995e:	bf00      	nop
 8009960:	e000      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800996c:	4b9b      	ldr	r3, [pc, #620]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800996e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009970:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800997a:	4a98      	ldr	r2, [pc, #608]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800997c:	430b      	orrs	r3, r1
 800997e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009980:	e003      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800998a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009996:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800999a:	2300      	movs	r3, #0
 800999c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80099a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80099a4:	460b      	mov	r3, r1
 80099a6:	4313      	orrs	r3, r2
 80099a8:	d051      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099b4:	d035      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80099b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099ba:	d82e      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099c0:	d031      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80099c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099c6:	d828      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099cc:	d01a      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80099ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099d2:	d822      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80099d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099dc:	d007      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80099de:	e01c      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e0:	4b7e      	ldr	r3, [pc, #504]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e4:	4a7d      	ldr	r2, [pc, #500]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099ec:	e01c      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f2:	3308      	adds	r3, #8
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f002 f876 	bl	800bae8 <RCCEx_PLL2_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a02:	e011      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a08:	3328      	adds	r3, #40	@ 0x28
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f002 f91d 	bl	800bc4c <RCCEx_PLL3_Config>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a18:	e006      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a20:	e002      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a22:	bf00      	nop
 8009a24:	e000      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a30:	4b6a      	ldr	r3, [pc, #424]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a3e:	4a67      	ldr	r2, [pc, #412]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a40:	430b      	orrs	r3, r1
 8009a42:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a44:	e003      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	d053      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a78:	d033      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009a7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a7e:	d82c      	bhi.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a84:	d02f      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a8a:	d826      	bhi.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a90:	d02b      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009a92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a96:	d820      	bhi.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a9c:	d012      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aa2:	d81a      	bhi.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d022      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aac:	d115      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f002 f816 	bl	800bae8 <RCCEx_PLL2_Config>
 8009abc:	4603      	mov	r3, r0
 8009abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ac2:	e015      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac8:	3328      	adds	r3, #40	@ 0x28
 8009aca:	2101      	movs	r1, #1
 8009acc:	4618      	mov	r0, r3
 8009ace:	f002 f8bd 	bl	800bc4c <RCCEx_PLL3_Config>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ad8:	e00a      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ae0:	e006      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009ae2:	bf00      	nop
 8009ae4:	e004      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009ae6:	bf00      	nop
 8009ae8:	e002      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009aea:	bf00      	nop
 8009aec:	e000      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009af8:	4b38      	ldr	r3, [pc, #224]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009afc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b06:	4a35      	ldr	r2, [pc, #212]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b0c:	e003      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b26:	2300      	movs	r3, #0
 8009b28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b30:	460b      	mov	r3, r1
 8009b32:	4313      	orrs	r3, r2
 8009b34:	d058      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b42:	d033      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b48:	d82c      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b4e:	d02f      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b54:	d826      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b5a:	d02b      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009b5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b60:	d820      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b66:	d012      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b6c:	d81a      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d022      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b76:	d115      	bne.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	2101      	movs	r1, #1
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 ffb1 	bl	800bae8 <RCCEx_PLL2_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b8c:	e015      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b92:	3328      	adds	r3, #40	@ 0x28
 8009b94:	2101      	movs	r1, #1
 8009b96:	4618      	mov	r0, r3
 8009b98:	f002 f858 	bl	800bc4c <RCCEx_PLL3_Config>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009ba2:	e00a      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009baa:	e006      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bac:	bf00      	nop
 8009bae:	e004      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bb0:	bf00      	nop
 8009bb2:	e002      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bb4:	bf00      	nop
 8009bb6:	e000      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10e      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bc2:	4b06      	ldr	r3, [pc, #24]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009bd2:	4a02      	ldr	r2, [pc, #8]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bd8:	e006      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009bda:	bf00      	nop
 8009bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009bfe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	d037      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c12:	d00e      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c18:	d816      	bhi.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d018      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c22:	d111      	bne.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c24:	4bc4      	ldr	r3, [pc, #784]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c28:	4ac3      	ldr	r2, [pc, #780]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c30:	e00f      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c36:	3308      	adds	r3, #8
 8009c38:	2101      	movs	r1, #1
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f001 ff54 	bl	800bae8 <RCCEx_PLL2_Config>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c46:	e004      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c4e:	e000      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c5a:	4bb7      	ldr	r3, [pc, #732]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c68:	4ab3      	ldr	r2, [pc, #716]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c6e:	e003      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009c84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009c92:	460b      	mov	r3, r1
 8009c94:	4313      	orrs	r3, r2
 8009c96:	d039      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d81c      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009ce5 	.word	0x08009ce5
 8009cac:	08009cb9 	.word	0x08009cb9
 8009cb0:	08009cc7 	.word	0x08009cc7
 8009cb4:	08009ce5 	.word	0x08009ce5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cb8:	4b9f      	ldr	r3, [pc, #636]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cbc:	4a9e      	ldr	r2, [pc, #632]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cc4:	e00f      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cca:	3308      	adds	r3, #8
 8009ccc:	2102      	movs	r1, #2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f001 ff0a 	bl	800bae8 <RCCEx_PLL2_Config>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cda:	e004      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ce2:	e000      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009cee:	4b92      	ldr	r3, [pc, #584]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf2:	f023 0103 	bic.w	r1, r3, #3
 8009cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cfc:	4a8e      	ldr	r2, [pc, #568]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cfe:	430b      	orrs	r3, r1
 8009d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d02:	e003      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f000 8099 	beq.w	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d2e:	4b83      	ldr	r3, [pc, #524]	@ (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a82      	ldr	r2, [pc, #520]	@ (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d3a:	f7f8 fe1b 	bl	8002974 <HAL_GetTick>
 8009d3e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d42:	e00b      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d44:	f7f8 fe16 	bl	8002974 <HAL_GetTick>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	2b64      	cmp	r3, #100	@ 0x64
 8009d52:	d903      	bls.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d5a:	e005      	b.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d5c:	4b77      	ldr	r3, [pc, #476]	@ (8009f3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d0ed      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d173      	bne.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d70:	4b71      	ldr	r3, [pc, #452]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d7c:	4053      	eors	r3, r2
 8009d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d015      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d86:	4b6c      	ldr	r3, [pc, #432]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d92:	4b69      	ldr	r3, [pc, #420]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d96:	4a68      	ldr	r2, [pc, #416]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d9e:	4b66      	ldr	r3, [pc, #408]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009da2:	4a65      	ldr	r2, [pc, #404]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009da8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009daa:	4a63      	ldr	r2, [pc, #396]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dbe:	d118      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc0:	f7f8 fdd8 	bl	8002974 <HAL_GetTick>
 8009dc4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dc8:	e00d      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dca:	f7f8 fdd3 	bl	8002974 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009dd4:	1ad2      	subs	r2, r2, r3
 8009dd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d903      	bls.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009de4:	e005      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009de6:	4b54      	ldr	r3, [pc, #336]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0eb      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d129      	bne.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e0a:	d10e      	bne.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e1c:	091a      	lsrs	r2, r3, #4
 8009e1e:	4b48      	ldr	r3, [pc, #288]	@ (8009f40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009e20:	4013      	ands	r3, r2
 8009e22:	4a45      	ldr	r2, [pc, #276]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e24:	430b      	orrs	r3, r1
 8009e26:	6113      	str	r3, [r2, #16]
 8009e28:	e005      	b.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009e2a:	4b43      	ldr	r3, [pc, #268]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	4a42      	ldr	r2, [pc, #264]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e34:	6113      	str	r3, [r2, #16]
 8009e36:	4b40      	ldr	r3, [pc, #256]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e46:	4a3c      	ldr	r2, [pc, #240]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e4c:	e008      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009e56:	e003      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f002 0301 	and.w	r3, r2, #1
 8009e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e70:	2300      	movs	r3, #0
 8009e72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009e76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	f000 808f 	beq.w	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e88:	2b28      	cmp	r3, #40	@ 0x28
 8009e8a:	d871      	bhi.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009f79 	.word	0x08009f79
 8009e98:	08009f71 	.word	0x08009f71
 8009e9c:	08009f71 	.word	0x08009f71
 8009ea0:	08009f71 	.word	0x08009f71
 8009ea4:	08009f71 	.word	0x08009f71
 8009ea8:	08009f71 	.word	0x08009f71
 8009eac:	08009f71 	.word	0x08009f71
 8009eb0:	08009f71 	.word	0x08009f71
 8009eb4:	08009f45 	.word	0x08009f45
 8009eb8:	08009f71 	.word	0x08009f71
 8009ebc:	08009f71 	.word	0x08009f71
 8009ec0:	08009f71 	.word	0x08009f71
 8009ec4:	08009f71 	.word	0x08009f71
 8009ec8:	08009f71 	.word	0x08009f71
 8009ecc:	08009f71 	.word	0x08009f71
 8009ed0:	08009f71 	.word	0x08009f71
 8009ed4:	08009f5b 	.word	0x08009f5b
 8009ed8:	08009f71 	.word	0x08009f71
 8009edc:	08009f71 	.word	0x08009f71
 8009ee0:	08009f71 	.word	0x08009f71
 8009ee4:	08009f71 	.word	0x08009f71
 8009ee8:	08009f71 	.word	0x08009f71
 8009eec:	08009f71 	.word	0x08009f71
 8009ef0:	08009f71 	.word	0x08009f71
 8009ef4:	08009f79 	.word	0x08009f79
 8009ef8:	08009f71 	.word	0x08009f71
 8009efc:	08009f71 	.word	0x08009f71
 8009f00:	08009f71 	.word	0x08009f71
 8009f04:	08009f71 	.word	0x08009f71
 8009f08:	08009f71 	.word	0x08009f71
 8009f0c:	08009f71 	.word	0x08009f71
 8009f10:	08009f71 	.word	0x08009f71
 8009f14:	08009f79 	.word	0x08009f79
 8009f18:	08009f71 	.word	0x08009f71
 8009f1c:	08009f71 	.word	0x08009f71
 8009f20:	08009f71 	.word	0x08009f71
 8009f24:	08009f71 	.word	0x08009f71
 8009f28:	08009f71 	.word	0x08009f71
 8009f2c:	08009f71 	.word	0x08009f71
 8009f30:	08009f71 	.word	0x08009f71
 8009f34:	08009f79 	.word	0x08009f79
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	58024800 	.word	0x58024800
 8009f40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f48:	3308      	adds	r3, #8
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 fdcb 	bl	800bae8 <RCCEx_PLL2_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f58:	e00f      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5e:	3328      	adds	r3, #40	@ 0x28
 8009f60:	2101      	movs	r1, #1
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 fe72 	bl	800bc4c <RCCEx_PLL3_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f6e:	e004      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f76:	e000      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f82:	4bbf      	ldr	r3, [pc, #764]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f90:	4abb      	ldr	r2, [pc, #748]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f92:	430b      	orrs	r3, r1
 8009f94:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f96:	e003      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f002 0302 	and.w	r3, r2, #2
 8009fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	d041      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fc6:	2b05      	cmp	r3, #5
 8009fc8:	d824      	bhi.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009fca:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	0800a01d 	.word	0x0800a01d
 8009fd4:	08009fe9 	.word	0x08009fe9
 8009fd8:	08009fff 	.word	0x08009fff
 8009fdc:	0800a01d 	.word	0x0800a01d
 8009fe0:	0800a01d 	.word	0x0800a01d
 8009fe4:	0800a01d 	.word	0x0800a01d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fec:	3308      	adds	r3, #8
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 fd79 	bl	800bae8 <RCCEx_PLL2_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ffc:	e00f      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a002:	3328      	adds	r3, #40	@ 0x28
 800a004:	2101      	movs	r1, #1
 800a006:	4618      	mov	r0, r3
 800a008:	f001 fe20 	bl	800bc4c <RCCEx_PLL3_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a012:	e004      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a01a:	e000      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a01e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10a      	bne.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a026:	4b96      	ldr	r3, [pc, #600]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02a:	f023 0107 	bic.w	r1, r3, #7
 800a02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a034:	4a92      	ldr	r2, [pc, #584]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a036:	430b      	orrs	r3, r1
 800a038:	6553      	str	r3, [r2, #84]	@ 0x54
 800a03a:	e003      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a03c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a040:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f002 0304 	and.w	r3, r2, #4
 800a050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a054:	2300      	movs	r3, #0
 800a056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a05a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a05e:	460b      	mov	r3, r1
 800a060:	4313      	orrs	r3, r2
 800a062:	d044      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a06c:	2b05      	cmp	r3, #5
 800a06e:	d825      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a070:	a201      	add	r2, pc, #4	@ (adr r2, 800a078 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a0c5 	.word	0x0800a0c5
 800a07c:	0800a091 	.word	0x0800a091
 800a080:	0800a0a7 	.word	0x0800a0a7
 800a084:	0800a0c5 	.word	0x0800a0c5
 800a088:	0800a0c5 	.word	0x0800a0c5
 800a08c:	0800a0c5 	.word	0x0800a0c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a094:	3308      	adds	r3, #8
 800a096:	2101      	movs	r1, #1
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 fd25 	bl	800bae8 <RCCEx_PLL2_Config>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0a4:	e00f      	b.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0aa:	3328      	adds	r3, #40	@ 0x28
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f001 fdcc 	bl	800bc4c <RCCEx_PLL3_Config>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0ba:	e004      	b.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0c2:	e000      	b.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a0c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10b      	bne.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0ce:	4b6c      	ldr	r3, [pc, #432]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0d2:	f023 0107 	bic.w	r1, r3, #7
 800a0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0de:	4a68      	ldr	r2, [pc, #416]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a0e0:	430b      	orrs	r3, r1
 800a0e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0e4:	e003      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f002 0320 	and.w	r3, r2, #32
 800a0fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0fe:	2300      	movs	r3, #0
 800a100:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a104:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a108:	460b      	mov	r3, r1
 800a10a:	4313      	orrs	r3, r2
 800a10c:	d055      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a11a:	d033      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a11c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a120:	d82c      	bhi.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a126:	d02f      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12c:	d826      	bhi.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a12e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a132:	d02b      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a134:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a138:	d820      	bhi.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a13a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a13e:	d012      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a144:	d81a      	bhi.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d022      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a14a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a14e:	d115      	bne.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a154:	3308      	adds	r3, #8
 800a156:	2100      	movs	r1, #0
 800a158:	4618      	mov	r0, r3
 800a15a:	f001 fcc5 	bl	800bae8 <RCCEx_PLL2_Config>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a164:	e015      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16a:	3328      	adds	r3, #40	@ 0x28
 800a16c:	2102      	movs	r1, #2
 800a16e:	4618      	mov	r0, r3
 800a170:	f001 fd6c 	bl	800bc4c <RCCEx_PLL3_Config>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a17a:	e00a      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a182:	e006      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a184:	bf00      	nop
 800a186:	e004      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a188:	bf00      	nop
 800a18a:	e002      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a18c:	bf00      	nop
 800a18e:	e000      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a190:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a192:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10b      	bne.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a19a:	4b39      	ldr	r3, [pc, #228]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a19c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a19e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1aa:	4a35      	ldr	r2, [pc, #212]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1b0:	e003      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a1c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	d058      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a1e6:	d033      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a1e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a1ec:	d82c      	bhi.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f2:	d02f      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a1f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f8:	d826      	bhi.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a1fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1fe:	d02b      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a204:	d820      	bhi.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a20a:	d012      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a20c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a210:	d81a      	bhi.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a212:	2b00      	cmp	r3, #0
 800a214:	d022      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a21a:	d115      	bne.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a220:	3308      	adds	r3, #8
 800a222:	2100      	movs	r1, #0
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fc5f 	bl	800bae8 <RCCEx_PLL2_Config>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a230:	e015      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a236:	3328      	adds	r3, #40	@ 0x28
 800a238:	2102      	movs	r1, #2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f001 fd06 	bl	800bc4c <RCCEx_PLL3_Config>
 800a240:	4603      	mov	r3, r0
 800a242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a246:	e00a      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a24e:	e006      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a250:	bf00      	nop
 800a252:	e004      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a254:	bf00      	nop
 800a256:	e002      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a258:	bf00      	nop
 800a25a:	e000      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a25c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a25e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10e      	bne.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a266:	4b06      	ldr	r3, [pc, #24]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a26a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a276:	4a02      	ldr	r2, [pc, #8]	@ (800a280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a278:	430b      	orrs	r3, r1
 800a27a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a27c:	e006      	b.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a27e:	bf00      	nop
 800a280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a29c:	2300      	movs	r3, #0
 800a29e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	d055      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2b8:	d033      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a2ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2be:	d82c      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2c4:	d02f      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a2c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2ca:	d826      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a2d0:	d02b      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a2d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a2d6:	d820      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2dc:	d012      	beq.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a2de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2e2:	d81a      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d022      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2ec:	d115      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f001 fbf6 	bl	800bae8 <RCCEx_PLL2_Config>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a302:	e015      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a308:	3328      	adds	r3, #40	@ 0x28
 800a30a:	2102      	movs	r1, #2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f001 fc9d 	bl	800bc4c <RCCEx_PLL3_Config>
 800a312:	4603      	mov	r3, r0
 800a314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a318:	e00a      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a320:	e006      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a322:	bf00      	nop
 800a324:	e004      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a326:	bf00      	nop
 800a328:	e002      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a32a:	bf00      	nop
 800a32c:	e000      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a32e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10b      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a338:	4ba0      	ldr	r3, [pc, #640]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a33a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a33c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a348:	4a9c      	ldr	r2, [pc, #624]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a34a:	430b      	orrs	r3, r1
 800a34c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a34e:	e003      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	f002 0308 	and.w	r3, r2, #8
 800a364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a368:	2300      	movs	r3, #0
 800a36a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a36e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a372:	460b      	mov	r3, r1
 800a374:	4313      	orrs	r3, r2
 800a376:	d01e      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a384:	d10c      	bne.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a38a:	3328      	adds	r3, #40	@ 0x28
 800a38c:	2102      	movs	r1, #2
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 fc5c 	bl	800bc4c <RCCEx_PLL3_Config>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a3a0:	4b86      	ldr	r3, [pc, #536]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b0:	4a82      	ldr	r2, [pc, #520]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3b2:	430b      	orrs	r3, r1
 800a3b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f002 0310 	and.w	r3, r2, #16
 800a3c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	d01e      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3e2:	d10c      	bne.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e8:	3328      	adds	r3, #40	@ 0x28
 800a3ea:	2102      	movs	r1, #2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 fc2d 	bl	800bc4c <RCCEx_PLL3_Config>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3fe:	4b6f      	ldr	r3, [pc, #444]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a40e:	4a6b      	ldr	r2, [pc, #428]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a410:	430b      	orrs	r3, r1
 800a412:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a420:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a422:	2300      	movs	r3, #0
 800a424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a426:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a42a:	460b      	mov	r3, r1
 800a42c:	4313      	orrs	r3, r2
 800a42e:	d03e      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a43c:	d022      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a43e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a442:	d81b      	bhi.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a44c:	d00b      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a44e:	e015      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a454:	3308      	adds	r3, #8
 800a456:	2100      	movs	r1, #0
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 fb45 	bl	800bae8 <RCCEx_PLL2_Config>
 800a45e:	4603      	mov	r3, r0
 800a460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a464:	e00f      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a46a:	3328      	adds	r3, #40	@ 0x28
 800a46c:	2102      	movs	r1, #2
 800a46e:	4618      	mov	r0, r3
 800a470:	f001 fbec 	bl	800bc4c <RCCEx_PLL3_Config>
 800a474:	4603      	mov	r3, r0
 800a476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a47a:	e004      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a482:	e000      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a484:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10b      	bne.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a48e:	4b4b      	ldr	r3, [pc, #300]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a492:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a49a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a49e:	4a47      	ldr	r2, [pc, #284]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4a4:	e003      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a4ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4bc:	2300      	movs	r3, #0
 800a4be:	677b      	str	r3, [r7, #116]	@ 0x74
 800a4c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	d03b      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4d6:	d01f      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a4d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4dc:	d818      	bhi.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a4de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4e2:	d003      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a4e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4e8:	d007      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a4ea:	e011      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4ec:	4b33      	ldr	r3, [pc, #204]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f0:	4a32      	ldr	r2, [pc, #200]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4f8:	e00f      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fe:	3328      	adds	r3, #40	@ 0x28
 800a500:	2101      	movs	r1, #1
 800a502:	4618      	mov	r0, r3
 800a504:	f001 fba2 	bl	800bc4c <RCCEx_PLL3_Config>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a50e:	e004      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a516:	e000      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a51a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10b      	bne.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a522:	4b26      	ldr	r3, [pc, #152]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a526:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a532:	4a22      	ldr	r2, [pc, #136]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a534:	430b      	orrs	r3, r1
 800a536:	6553      	str	r3, [r2, #84]	@ 0x54
 800a538:	e003      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a53a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a53e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a54e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a550:	2300      	movs	r3, #0
 800a552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a554:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a558:	460b      	mov	r3, r1
 800a55a:	4313      	orrs	r3, r2
 800a55c:	d034      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a56c:	d007      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a56e:	e011      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a570:	4b12      	ldr	r3, [pc, #72]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a574:	4a11      	ldr	r2, [pc, #68]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a57a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a57c:	e00e      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a582:	3308      	adds	r3, #8
 800a584:	2102      	movs	r1, #2
 800a586:	4618      	mov	r0, r3
 800a588:	f001 faae 	bl	800bae8 <RCCEx_PLL2_Config>
 800a58c:	4603      	mov	r3, r0
 800a58e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a592:	e003      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a59c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10d      	bne.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5a4:	4b05      	ldr	r3, [pc, #20]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5b2:	4a02      	ldr	r2, [pc, #8]	@ (800a5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5b8:	e006      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a5ba:	bf00      	nop
 800a5bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a5d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	d00c      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e8:	3328      	adds	r3, #40	@ 0x28
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f001 fb2d 	bl	800bc4c <RCCEx_PLL3_Config>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a60a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a60c:	2300      	movs	r3, #0
 800a60e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a610:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a614:	460b      	mov	r3, r1
 800a616:	4313      	orrs	r3, r2
 800a618:	d036      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a624:	d018      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a62a:	d811      	bhi.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a630:	d014      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a636:	d80b      	bhi.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d011      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a63c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a640:	d106      	bne.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a642:	4bb7      	ldr	r3, [pc, #732]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a646:	4ab6      	ldr	r2, [pc, #728]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a64c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a64e:	e008      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a656:	e004      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a658:	bf00      	nop
 800a65a:	e002      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a65c:	bf00      	nop
 800a65e:	e000      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a660:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10a      	bne.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a66a:	4bad      	ldr	r3, [pc, #692]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a66c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a66e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a678:	4aa9      	ldr	r2, [pc, #676]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a67a:	430b      	orrs	r3, r1
 800a67c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a67e:	e003      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a694:	653b      	str	r3, [r7, #80]	@ 0x50
 800a696:	2300      	movs	r3, #0
 800a698:	657b      	str	r3, [r7, #84]	@ 0x54
 800a69a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	d009      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6a4:	4b9e      	ldr	r3, [pc, #632]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b2:	4a9b      	ldr	r2, [pc, #620]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6b4:	430b      	orrs	r3, r1
 800a6b6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	d009      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6d4:	4b92      	ldr	r3, [pc, #584]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6e2:	4a8f      	ldr	r2, [pc, #572]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a6f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	d00e      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a704:	4b86      	ldr	r3, [pc, #536]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	4a85      	ldr	r2, [pc, #532]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a70a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a70e:	6113      	str	r3, [r2, #16]
 800a710:	4b83      	ldr	r3, [pc, #524]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a712:	6919      	ldr	r1, [r3, #16]
 800a714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a71c:	4a80      	ldr	r2, [pc, #512]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a71e:	430b      	orrs	r3, r1
 800a720:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a72e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a730:	2300      	movs	r3, #0
 800a732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a734:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a738:	460b      	mov	r3, r1
 800a73a:	4313      	orrs	r3, r2
 800a73c:	d009      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a73e:	4b78      	ldr	r3, [pc, #480]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a742:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74c:	4a74      	ldr	r2, [pc, #464]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a74e:	430b      	orrs	r3, r1
 800a750:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a75e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a760:	2300      	movs	r3, #0
 800a762:	637b      	str	r3, [r7, #52]	@ 0x34
 800a764:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a768:	460b      	mov	r3, r1
 800a76a:	4313      	orrs	r3, r2
 800a76c:	d00a      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a76e:	4b6c      	ldr	r3, [pc, #432]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a772:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a77e:	4a68      	ldr	r2, [pc, #416]	@ (800a920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a780:	430b      	orrs	r3, r1
 800a782:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	2100      	movs	r1, #0
 800a78e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a796:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a79a:	460b      	mov	r3, r1
 800a79c:	4313      	orrs	r3, r2
 800a79e:	d011      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a4:	3308      	adds	r3, #8
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f001 f99d 	bl	800bae8 <RCCEx_PLL2_Config>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6239      	str	r1, [r7, #32]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	d011      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f001 f97d 	bl	800bae8 <RCCEx_PLL2_Config>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a7f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	2100      	movs	r1, #0
 800a80e:	61b9      	str	r1, [r7, #24]
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	61fb      	str	r3, [r7, #28]
 800a816:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a81a:	460b      	mov	r3, r1
 800a81c:	4313      	orrs	r3, r2
 800a81e:	d011      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a824:	3308      	adds	r3, #8
 800a826:	2102      	movs	r1, #2
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 f95d 	bl	800bae8 <RCCEx_PLL2_Config>
 800a82e:	4603      	mov	r3, r0
 800a830:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a83c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	2100      	movs	r1, #0
 800a84e:	6139      	str	r1, [r7, #16]
 800a850:	f003 0308 	and.w	r3, r3, #8
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a85a:	460b      	mov	r3, r1
 800a85c:	4313      	orrs	r3, r2
 800a85e:	d011      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a864:	3328      	adds	r3, #40	@ 0x28
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f001 f9ef 	bl	800bc4c <RCCEx_PLL3_Config>
 800a86e:	4603      	mov	r3, r0
 800a870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a874:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d003      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	2100      	movs	r1, #0
 800a88e:	60b9      	str	r1, [r7, #8]
 800a890:	f003 0310 	and.w	r3, r3, #16
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a89a:	460b      	mov	r3, r1
 800a89c:	4313      	orrs	r3, r2
 800a89e:	d011      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a4:	3328      	adds	r3, #40	@ 0x28
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 f9cf 	bl	800bc4c <RCCEx_PLL3_Config>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a8b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	6039      	str	r1, [r7, #0]
 800a8d0:	f003 0320 	and.w	r3, r3, #32
 800a8d4:	607b      	str	r3, [r7, #4]
 800a8d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	d011      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e4:	3328      	adds	r3, #40	@ 0x28
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 f9af 	bl	800bc4c <RCCEx_PLL3_Config>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a8f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a900:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a904:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	e000      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
}
 800a912:	4618      	mov	r0, r3
 800a914:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a918:	46bd      	mov	sp, r7
 800a91a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a91e:	bf00      	nop
 800a920:	58024400 	.word	0x58024400

0800a924 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b090      	sub	sp, #64	@ 0x40
 800a928:	af00      	add	r7, sp, #0
 800a92a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a932:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a936:	430b      	orrs	r3, r1
 800a938:	f040 8094 	bne.w	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a93c:	4b9b      	ldr	r3, [pc, #620]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a93e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a948:	2b04      	cmp	r3, #4
 800a94a:	f200 8087 	bhi.w	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a94e:	a201      	add	r2, pc, #4	@ (adr r2, 800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a969 	.word	0x0800a969
 800a958:	0800a991 	.word	0x0800a991
 800a95c:	0800a9b9 	.word	0x0800a9b9
 800a960:	0800aa55 	.word	0x0800aa55
 800a964:	0800a9e1 	.word	0x0800a9e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a968:	4b90      	ldr	r3, [pc, #576]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a974:	d108      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 ff62 	bl	800b844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a984:	f000 bc93 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98c:	f000 bc8f 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a990:	4b86      	ldr	r3, [pc, #536]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a99c:	d108      	bne.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a99e:	f107 0318 	add.w	r3, r7, #24
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 fca6 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ac:	f000 bc7f 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b4:	f000 bc7b 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9b8:	4b7c      	ldr	r3, [pc, #496]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9c4:	d108      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9c6:	f107 030c 	add.w	r3, r7, #12
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fde6 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d4:	f000 bc6b 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9dc:	f000 bc67 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9e0:	4b72      	ldr	r3, [pc, #456]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9ea:	4b70      	ldr	r3, [pc, #448]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0304 	and.w	r3, r3, #4
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d10c      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9fc:	4b6b      	ldr	r3, [pc, #428]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	08db      	lsrs	r3, r3, #3
 800aa02:	f003 0303 	and.w	r3, r3, #3
 800aa06:	4a6a      	ldr	r2, [pc, #424]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aa08:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa0e:	e01f      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa10:	4b66      	ldr	r3, [pc, #408]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa1c:	d106      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa24:	d102      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa26:	4b63      	ldr	r3, [pc, #396]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aa28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa2a:	e011      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa2c:	4b5f      	ldr	r3, [pc, #380]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa38:	d106      	bne.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa40:	d102      	bne.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa42:	4b5d      	ldr	r3, [pc, #372]	@ (800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa46:	e003      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa4c:	f000 bc2f 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa50:	f000 bc2d 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa54:	4b59      	ldr	r3, [pc, #356]	@ (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa58:	f000 bc29 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa60:	f000 bc25 	b.w	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aa64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa68:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	f040 80a7 	bne.w	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aa72:	4b4e      	ldr	r3, [pc, #312]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa76:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800aa7a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa82:	d054      	beq.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800aa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa8a:	f200 808b 	bhi.w	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa94:	f000 8083 	beq.w	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa9e:	f200 8081 	bhi.w	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aaa8:	d02f      	beq.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aab0:	d878      	bhi.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d004      	beq.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800aab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aabe:	d012      	beq.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800aac0:	e070      	b.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aac2:	4b3a      	ldr	r3, [pc, #232]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aace:	d107      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 feb5 	bl	800b844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aade:	e3e6      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae4:	e3e3      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aae6:	4b31      	ldr	r3, [pc, #196]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaf2:	d107      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaf4:	f107 0318 	add.w	r3, r7, #24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 fbfb 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab02:	e3d4      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab08:	e3d1      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab0a:	4b28      	ldr	r3, [pc, #160]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab16:	d107      	bne.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab18:	f107 030c 	add.w	r3, r7, #12
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 fd3d 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab26:	e3c2      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab2c:	e3bf      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab2e:	4b1f      	ldr	r3, [pc, #124]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab38:	4b1c      	ldr	r3, [pc, #112]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d10c      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ab44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d109      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab4a:	4b18      	ldr	r3, [pc, #96]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	08db      	lsrs	r3, r3, #3
 800ab50:	f003 0303 	and.w	r3, r3, #3
 800ab54:	4a16      	ldr	r2, [pc, #88]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ab56:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab5c:	e01e      	b.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab5e:	4b13      	ldr	r3, [pc, #76]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab6a:	d106      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab72:	d102      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab74:	4b0f      	ldr	r3, [pc, #60]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ab76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab78:	e010      	b.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab7a:	4b0c      	ldr	r3, [pc, #48]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab86:	d106      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ab88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab8e:	d102      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab90:	4b09      	ldr	r3, [pc, #36]	@ (800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab94:	e002      	b.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab9a:	e388      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab9c:	e387      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab9e:	4b07      	ldr	r3, [pc, #28]	@ (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba2:	e384      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba8:	e381      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abaa:	bf00      	nop
 800abac:	58024400 	.word	0x58024400
 800abb0:	03d09000 	.word	0x03d09000
 800abb4:	003d0900 	.word	0x003d0900
 800abb8:	016e3600 	.word	0x016e3600
 800abbc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800abc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abc4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800abc8:	430b      	orrs	r3, r1
 800abca:	f040 809c 	bne.w	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800abce:	4b9e      	ldr	r3, [pc, #632]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abd2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800abd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800abde:	d054      	beq.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800abe6:	f200 808b 	bhi.w	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800abea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800abf0:	f000 8083 	beq.w	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800abf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800abfa:	f200 8081 	bhi.w	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac04:	d02f      	beq.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ac06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac0c:	d878      	bhi.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d004      	beq.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ac14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac1a:	d012      	beq.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ac1c:	e070      	b.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac1e:	4b8a      	ldr	r3, [pc, #552]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac2a:	d107      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fe07 	bl	800b844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac3a:	e338      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac40:	e335      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac42:	4b81      	ldr	r3, [pc, #516]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac4e:	d107      	bne.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac50:	f107 0318 	add.w	r3, r7, #24
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 fb4d 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac5e:	e326      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac64:	e323      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac66:	4b78      	ldr	r3, [pc, #480]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac72:	d107      	bne.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac74:	f107 030c 	add.w	r3, r7, #12
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 fc8f 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac82:	e314      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac88:	e311      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac94:	4b6c      	ldr	r3, [pc, #432]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d10c      	bne.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800aca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d109      	bne.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aca6:	4b68      	ldr	r3, [pc, #416]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	08db      	lsrs	r3, r3, #3
 800acac:	f003 0303 	and.w	r3, r3, #3
 800acb0:	4a66      	ldr	r2, [pc, #408]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800acb2:	fa22 f303 	lsr.w	r3, r2, r3
 800acb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acb8:	e01e      	b.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acba:	4b63      	ldr	r3, [pc, #396]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acc6:	d106      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800acc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acce:	d102      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acd0:	4b5f      	ldr	r3, [pc, #380]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acd4:	e010      	b.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acd6:	4b5c      	ldr	r3, [pc, #368]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ace2:	d106      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ace4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acea:	d102      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acec:	4b59      	ldr	r3, [pc, #356]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acf0:	e002      	b.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800acf6:	e2da      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800acf8:	e2d9      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800acfa:	4b57      	ldr	r3, [pc, #348]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800acfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfe:	e2d6      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad04:	e2d3      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ad06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad0a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ad0e:	430b      	orrs	r3, r1
 800ad10:	f040 80a7 	bne.w	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ad14:	4b4c      	ldr	r3, [pc, #304]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad18:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ad1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad24:	d055      	beq.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad2c:	f200 8096 	bhi.w	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad36:	f000 8084 	beq.w	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad40:	f200 808c 	bhi.w	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad4a:	d030      	beq.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad52:	f200 8083 	bhi.w	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad62:	d012      	beq.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ad64:	e07a      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad66:	4b38      	ldr	r3, [pc, #224]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad72:	d107      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fd63 	bl	800b844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad82:	e294      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad88:	e291      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad96:	d107      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad98:	f107 0318 	add.w	r3, r7, #24
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 faa9 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ada6:	e282      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adac:	e27f      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adae:	4b26      	ldr	r3, [pc, #152]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adba:	d107      	bne.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adbc:	f107 030c 	add.w	r3, r7, #12
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 fbeb 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adca:	e270      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add0:	e26d      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800add2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800add4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800adda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800addc:	4b1a      	ldr	r3, [pc, #104]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	d10c      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ade8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adee:	4b16      	ldr	r3, [pc, #88]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	08db      	lsrs	r3, r3, #3
 800adf4:	f003 0303 	and.w	r3, r3, #3
 800adf8:	4a14      	ldr	r2, [pc, #80]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800adfa:	fa22 f303 	lsr.w	r3, r2, r3
 800adfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae00:	e01e      	b.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae02:	4b11      	ldr	r3, [pc, #68]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae0e:	d106      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ae10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae16:	d102      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae18:	4b0d      	ldr	r3, [pc, #52]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ae1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae1c:	e010      	b.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae2a:	d106      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ae2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae32:	d102      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae34:	4b07      	ldr	r3, [pc, #28]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae38:	e002      	b.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae3e:	e236      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae40:	e235      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae42:	4b05      	ldr	r3, [pc, #20]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae46:	e232      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae48:	58024400 	.word	0x58024400
 800ae4c:	03d09000 	.word	0x03d09000
 800ae50:	003d0900 	.word	0x003d0900
 800ae54:	016e3600 	.word	0x016e3600
 800ae58:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae60:	e225      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ae62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae66:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ae6a:	430b      	orrs	r3, r1
 800ae6c:	f040 8085 	bne.w	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ae70:	4b9c      	ldr	r3, [pc, #624]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae74:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ae78:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae80:	d06b      	beq.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae88:	d874      	bhi.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae90:	d056      	beq.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ae92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae98:	d86c      	bhi.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aea0:	d03b      	beq.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aea8:	d864      	bhi.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeb0:	d021      	beq.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeb8:	d85c      	bhi.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800aec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aec6:	d004      	beq.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800aec8:	e054      	b.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aeca:	f7fe fb5f 	bl	800958c <HAL_RCC_GetPCLK1Freq>
 800aece:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aed0:	e1ed      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aed2:	4b84      	ldr	r3, [pc, #528]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aede:	d107      	bne.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee0:	f107 0318 	add.w	r3, r7, #24
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 fa05 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeee:	e1de      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef4:	e1db      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aef6:	4b7b      	ldr	r3, [pc, #492]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aefe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af02:	d107      	bne.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af04:	f107 030c 	add.w	r3, r7, #12
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 fb47 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af12:	e1cc      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af14:	2300      	movs	r3, #0
 800af16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af18:	e1c9      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af1a:	4b72      	ldr	r3, [pc, #456]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0304 	and.w	r3, r3, #4
 800af22:	2b04      	cmp	r3, #4
 800af24:	d109      	bne.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af26:	4b6f      	ldr	r3, [pc, #444]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	08db      	lsrs	r3, r3, #3
 800af2c:	f003 0303 	and.w	r3, r3, #3
 800af30:	4a6d      	ldr	r2, [pc, #436]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800af32:	fa22 f303 	lsr.w	r3, r2, r3
 800af36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af38:	e1b9      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af3e:	e1b6      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800af40:	4b68      	ldr	r3, [pc, #416]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af4c:	d102      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800af4e:	4b67      	ldr	r3, [pc, #412]	@ (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800af50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af52:	e1ac      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af54:	2300      	movs	r3, #0
 800af56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af58:	e1a9      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af5a:	4b62      	ldr	r3, [pc, #392]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af66:	d102      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800af68:	4b61      	ldr	r3, [pc, #388]	@ (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800af6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af6c:	e19f      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af72:	e19c      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af78:	e199      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800af7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af7e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800af82:	430b      	orrs	r3, r1
 800af84:	d173      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800af86:	4b57      	ldr	r3, [pc, #348]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af96:	d02f      	beq.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800af98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af9e:	d863      	bhi.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d004      	beq.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afac:	d012      	beq.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800afae:	e05b      	b.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afb0:	4b4c      	ldr	r3, [pc, #304]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afbc:	d107      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afbe:	f107 0318 	add.w	r3, r7, #24
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 f996 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afcc:	e16f      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afd2:	e16c      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afd4:	4b43      	ldr	r3, [pc, #268]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe0:	d107      	bne.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afe2:	f107 030c 	add.w	r3, r7, #12
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fad8 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff0:	e15d      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff6:	e15a      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aff8:	4b3a      	ldr	r3, [pc, #232]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800affa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800affc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b000:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b002:	4b38      	ldr	r3, [pc, #224]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0304 	and.w	r3, r3, #4
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	d10c      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b00e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b010:	2b00      	cmp	r3, #0
 800b012:	d109      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b014:	4b33      	ldr	r3, [pc, #204]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	08db      	lsrs	r3, r3, #3
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	4a32      	ldr	r2, [pc, #200]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b020:	fa22 f303 	lsr.w	r3, r2, r3
 800b024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b026:	e01e      	b.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b028:	4b2e      	ldr	r3, [pc, #184]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b034:	d106      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b03c:	d102      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b03e:	4b2b      	ldr	r3, [pc, #172]	@ (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b042:	e010      	b.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b044:	4b27      	ldr	r3, [pc, #156]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b04c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b050:	d106      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b058:	d102      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b05a:	4b25      	ldr	r3, [pc, #148]	@ (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b05e:	e002      	b.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b064:	e123      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b066:	e122      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b06c:	e11f      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b072:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b076:	430b      	orrs	r3, r1
 800b078:	d13c      	bne.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b07a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b07c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b07e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b082:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b086:	2b00      	cmp	r3, #0
 800b088:	d004      	beq.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b090:	d012      	beq.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b092:	e023      	b.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b094:	4b13      	ldr	r3, [pc, #76]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b09c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0a0:	d107      	bne.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fbcc 	bl	800b844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0b0:	e0fd      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0b6:	e0fa      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0c4:	d107      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0c6:	f107 0318 	add.w	r3, r7, #24
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f912 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d4:	e0eb      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0da:	e0e8      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e0:	e0e5      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b0e2:	bf00      	nop
 800b0e4:	58024400 	.word	0x58024400
 800b0e8:	03d09000 	.word	0x03d09000
 800b0ec:	003d0900 	.word	0x003d0900
 800b0f0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b0f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	f040 8085 	bne.w	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b102:	4b6d      	ldr	r3, [pc, #436]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b106:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b10a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b112:	d06b      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b11a:	d874      	bhi.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b122:	d056      	beq.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b12a:	d86c      	bhi.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b132:	d03b      	beq.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b13a:	d864      	bhi.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b142:	d021      	beq.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b14a:	d85c      	bhi.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d004      	beq.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b158:	d004      	beq.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b15a:	e054      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b15c:	f000 f8b4 	bl	800b2c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b160:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b162:	e0a4      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b164:	4b54      	ldr	r3, [pc, #336]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b16c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b170:	d107      	bne.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b172:	f107 0318 	add.w	r3, r7, #24
 800b176:	4618      	mov	r0, r3
 800b178:	f000 f8bc 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b180:	e095      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b182:	2300      	movs	r3, #0
 800b184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b186:	e092      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b188:	4b4b      	ldr	r3, [pc, #300]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b194:	d107      	bne.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b196:	f107 030c 	add.w	r3, r7, #12
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 f9fe 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a4:	e083      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1aa:	e080      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1ac:	4b42      	ldr	r3, [pc, #264]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d109      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1b8:	4b3f      	ldr	r3, [pc, #252]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	08db      	lsrs	r3, r3, #3
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	4a3e      	ldr	r2, [pc, #248]	@ (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ca:	e070      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d0:	e06d      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b1d2:	4b39      	ldr	r3, [pc, #228]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1de:	d102      	bne.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b1e0:	4b37      	ldr	r3, [pc, #220]	@ (800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e4:	e063      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ea:	e060      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1ec:	4b32      	ldr	r3, [pc, #200]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1f8:	d102      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b1fa:	4b32      	ldr	r3, [pc, #200]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1fe:	e056      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b204:	e053      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20a:	e050      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b20c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b210:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b214:	430b      	orrs	r3, r1
 800b216:	d148      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b218:	4b27      	ldr	r3, [pc, #156]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b21a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b21c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b220:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b228:	d02a      	beq.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b230:	d838      	bhi.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b23e:	d00d      	beq.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b240:	e030      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b242:	4b1d      	ldr	r3, [pc, #116]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b24a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b24e:	d102      	bne.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b250:	4b1c      	ldr	r3, [pc, #112]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b254:	e02b      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b25a:	e028      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b25c:	4b16      	ldr	r3, [pc, #88]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b264:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b268:	d107      	bne.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b26a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 fae8 	bl	800b844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b278:	e019      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b27e:	e016      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b280:	4b0d      	ldr	r3, [pc, #52]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b288:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b28c:	d107      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b28e:	f107 0318 	add.w	r3, r7, #24
 800b292:	4618      	mov	r0, r3
 800b294:	f000 f82e 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b29c:	e007      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a2:	e004      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a8:	e001      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3740      	adds	r7, #64	@ 0x40
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	58024400 	.word	0x58024400
 800b2bc:	03d09000 	.word	0x03d09000
 800b2c0:	003d0900 	.word	0x003d0900
 800b2c4:	016e3600 	.word	0x016e3600

0800b2c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b2cc:	f7fe f92e 	bl	800952c <HAL_RCC_GetHCLKFreq>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	4b06      	ldr	r3, [pc, #24]	@ (800b2ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	091b      	lsrs	r3, r3, #4
 800b2d8:	f003 0307 	and.w	r3, r3, #7
 800b2dc:	4904      	ldr	r1, [pc, #16]	@ (800b2f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b2de:	5ccb      	ldrb	r3, [r1, r3]
 800b2e0:	f003 031f 	and.w	r3, r3, #31
 800b2e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	58024400 	.word	0x58024400
 800b2f0:	08012a54 	.word	0x08012a54

0800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b089      	sub	sp, #36	@ 0x24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2fc:	4ba1      	ldr	r3, [pc, #644]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b300:	f003 0303 	and.w	r3, r3, #3
 800b304:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b306:	4b9f      	ldr	r3, [pc, #636]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b30a:	0b1b      	lsrs	r3, r3, #12
 800b30c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b310:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b312:	4b9c      	ldr	r3, [pc, #624]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b316:	091b      	lsrs	r3, r3, #4
 800b318:	f003 0301 	and.w	r3, r3, #1
 800b31c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b31e:	4b99      	ldr	r3, [pc, #612]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b322:	08db      	lsrs	r3, r3, #3
 800b324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	fb02 f303 	mul.w	r3, r2, r3
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b336:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 8111 	beq.w	800b564 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	2b02      	cmp	r3, #2
 800b346:	f000 8083 	beq.w	800b450 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	f200 80a1 	bhi.w	800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d003      	beq.n	800b360 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d056      	beq.n	800b40c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b35e:	e099      	b.n	800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b360:	4b88      	ldr	r3, [pc, #544]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0320 	and.w	r3, r3, #32
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d02d      	beq.n	800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b36c:	4b85      	ldr	r3, [pc, #532]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	08db      	lsrs	r3, r3, #3
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	4a84      	ldr	r2, [pc, #528]	@ (800b588 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b378:	fa22 f303 	lsr.w	r3, r2, r3
 800b37c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	ee07 3a90 	vmov	s15, r3
 800b384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b396:	4b7b      	ldr	r3, [pc, #492]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b3c6:	e087      	b.n	800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b590 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3da:	4b6a      	ldr	r3, [pc, #424]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b40a:	e065      	b.n	800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b416:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b41e:	4b59      	ldr	r3, [pc, #356]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b42e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b432:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b43e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b44e:	e043      	b.n	800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b462:	4b48      	ldr	r3, [pc, #288]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b472:	ed97 6a03 	vldr	s12, [r7, #12]
 800b476:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b48e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b492:	e021      	b.n	800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b49e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4a6:	4b37      	ldr	r3, [pc, #220]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ae:	ee07 3a90 	vmov	s15, r3
 800b4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b4d8:	4b2a      	ldr	r3, [pc, #168]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4dc:	0a5b      	lsrs	r3, r3, #9
 800b4de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4fe:	ee17 2a90 	vmov	r2, s15
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b506:	4b1f      	ldr	r3, [pc, #124]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50a:	0c1b      	lsrs	r3, r3, #16
 800b50c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b510:	ee07 3a90 	vmov	s15, r3
 800b514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b518:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b51c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b520:	edd7 6a07 	vldr	s13, [r7, #28]
 800b524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b52c:	ee17 2a90 	vmov	r2, s15
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b534:	4b13      	ldr	r3, [pc, #76]	@ (800b584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b538:	0e1b      	lsrs	r3, r3, #24
 800b53a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b53e:	ee07 3a90 	vmov	s15, r3
 800b542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b54a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b54e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b55a:	ee17 2a90 	vmov	r2, s15
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b562:	e008      	b.n	800b576 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	609a      	str	r2, [r3, #8]
}
 800b576:	bf00      	nop
 800b578:	3724      	adds	r7, #36	@ 0x24
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	58024400 	.word	0x58024400
 800b588:	03d09000 	.word	0x03d09000
 800b58c:	46000000 	.word	0x46000000
 800b590:	4c742400 	.word	0x4c742400
 800b594:	4a742400 	.word	0x4a742400
 800b598:	4bb71b00 	.word	0x4bb71b00

0800b59c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b089      	sub	sp, #36	@ 0x24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5a4:	4ba1      	ldr	r3, [pc, #644]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a8:	f003 0303 	and.w	r3, r3, #3
 800b5ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b5ae:	4b9f      	ldr	r3, [pc, #636]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b2:	0d1b      	lsrs	r3, r3, #20
 800b5b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b5ba:	4b9c      	ldr	r3, [pc, #624]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5be:	0a1b      	lsrs	r3, r3, #8
 800b5c0:	f003 0301 	and.w	r3, r3, #1
 800b5c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b5c6:	4b99      	ldr	r3, [pc, #612]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ca:	08db      	lsrs	r3, r3, #3
 800b5cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	fb02 f303 	mul.w	r3, r2, r3
 800b5d6:	ee07 3a90 	vmov	s15, r3
 800b5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 8111 	beq.w	800b80c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	f000 8083 	beq.w	800b6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	f200 80a1 	bhi.w	800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d056      	beq.n	800b6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b606:	e099      	b.n	800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b608:	4b88      	ldr	r3, [pc, #544]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0320 	and.w	r3, r3, #32
 800b610:	2b00      	cmp	r3, #0
 800b612:	d02d      	beq.n	800b670 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b614:	4b85      	ldr	r3, [pc, #532]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	08db      	lsrs	r3, r3, #3
 800b61a:	f003 0303 	and.w	r3, r3, #3
 800b61e:	4a84      	ldr	r2, [pc, #528]	@ (800b830 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b620:	fa22 f303 	lsr.w	r3, r2, r3
 800b624:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	ee07 3a90 	vmov	s15, r3
 800b62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	ee07 3a90 	vmov	s15, r3
 800b636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b63e:	4b7b      	ldr	r3, [pc, #492]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b646:	ee07 3a90 	vmov	s15, r3
 800b64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b652:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b65e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b66e:	e087      	b.n	800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	ee07 3a90 	vmov	s15, r3
 800b676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b838 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b682:	4b6a      	ldr	r3, [pc, #424]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b68a:	ee07 3a90 	vmov	s15, r3
 800b68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b692:	ed97 6a03 	vldr	s12, [r7, #12]
 800b696:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6b2:	e065      	b.n	800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b83c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c6:	4b59      	ldr	r3, [pc, #356]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6f6:	e043      	b.n	800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b702:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70a:	4b48      	ldr	r3, [pc, #288]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b71e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b73a:	e021      	b.n	800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b746:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b83c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b74e:	4b37      	ldr	r3, [pc, #220]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b762:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b77e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b780:	4b2a      	ldr	r3, [pc, #168]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b784:	0a5b      	lsrs	r3, r3, #9
 800b786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b79a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b79e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7a6:	ee17 2a90 	vmov	r2, s15
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b7ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b2:	0c1b      	lsrs	r3, r3, #16
 800b7b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7b8:	ee07 3a90 	vmov	s15, r3
 800b7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d4:	ee17 2a90 	vmov	r2, s15
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b7dc:	4b13      	ldr	r3, [pc, #76]	@ (800b82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7e0:	0e1b      	lsrs	r3, r3, #24
 800b7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7e6:	ee07 3a90 	vmov	s15, r3
 800b7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b802:	ee17 2a90 	vmov	r2, s15
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b80a:	e008      	b.n	800b81e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	609a      	str	r2, [r3, #8]
}
 800b81e:	bf00      	nop
 800b820:	3724      	adds	r7, #36	@ 0x24
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	58024400 	.word	0x58024400
 800b830:	03d09000 	.word	0x03d09000
 800b834:	46000000 	.word	0x46000000
 800b838:	4c742400 	.word	0x4c742400
 800b83c:	4a742400 	.word	0x4a742400
 800b840:	4bb71b00 	.word	0x4bb71b00

0800b844 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b844:	b480      	push	{r7}
 800b846:	b089      	sub	sp, #36	@ 0x24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b84c:	4ba0      	ldr	r3, [pc, #640]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b850:	f003 0303 	and.w	r3, r3, #3
 800b854:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b856:	4b9e      	ldr	r3, [pc, #632]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b85a:	091b      	lsrs	r3, r3, #4
 800b85c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b860:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b862:	4b9b      	ldr	r3, [pc, #620]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b86c:	4b98      	ldr	r3, [pc, #608]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b86e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b870:	08db      	lsrs	r3, r3, #3
 800b872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	fb02 f303 	mul.w	r3, r2, r3
 800b87c:	ee07 3a90 	vmov	s15, r3
 800b880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b884:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 8111 	beq.w	800bab2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	2b02      	cmp	r3, #2
 800b894:	f000 8083 	beq.w	800b99e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	f200 80a1 	bhi.w	800b9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d003      	beq.n	800b8ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d056      	beq.n	800b95a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b8ac:	e099      	b.n	800b9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8ae:	4b88      	ldr	r3, [pc, #544]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f003 0320 	and.w	r3, r3, #32
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d02d      	beq.n	800b916 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8ba:	4b85      	ldr	r3, [pc, #532]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	08db      	lsrs	r3, r3, #3
 800b8c0:	f003 0303 	and.w	r3, r3, #3
 800b8c4:	4a83      	ldr	r2, [pc, #524]	@ (800bad4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	ee07 3a90 	vmov	s15, r3
 800b8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8e4:	4b7a      	ldr	r3, [pc, #488]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ec:	ee07 3a90 	vmov	s15, r3
 800b8f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8f8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b904:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b910:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b914:	e087      	b.n	800ba26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	ee07 3a90 	vmov	s15, r3
 800b91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b920:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800badc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b928:	4b69      	ldr	r3, [pc, #420]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b930:	ee07 3a90 	vmov	s15, r3
 800b934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b938:	ed97 6a03 	vldr	s12, [r7, #12]
 800b93c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b94c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b950:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b954:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b958:	e065      	b.n	800ba26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	ee07 3a90 	vmov	s15, r3
 800b960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b964:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bae0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b96c:	4b58      	ldr	r3, [pc, #352]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b974:	ee07 3a90 	vmov	s15, r3
 800b978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b97c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b980:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b98c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b994:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b998:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b99c:	e043      	b.n	800ba26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bae4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b9ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b0:	4b47      	ldr	r3, [pc, #284]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b8:	ee07 3a90 	vmov	s15, r3
 800b9bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9c4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9e0:	e021      	b.n	800ba26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	ee07 3a90 	vmov	s15, r3
 800b9e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800badc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b9f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f4:	4b36      	ldr	r3, [pc, #216]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fc:	ee07 3a90 	vmov	s15, r3
 800ba00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba04:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba08:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ba26:	4b2a      	ldr	r3, [pc, #168]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba2a:	0a5b      	lsrs	r3, r3, #9
 800ba2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba4c:	ee17 2a90 	vmov	r2, s15
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ba54:	4b1e      	ldr	r3, [pc, #120]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba58:	0c1b      	lsrs	r3, r3, #16
 800ba5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba5e:	ee07 3a90 	vmov	s15, r3
 800ba62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba7a:	ee17 2a90 	vmov	r2, s15
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ba82:	4b13      	ldr	r3, [pc, #76]	@ (800bad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba86:	0e1b      	lsrs	r3, r3, #24
 800ba88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba8c:	ee07 3a90 	vmov	s15, r3
 800ba90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800baa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa8:	ee17 2a90 	vmov	r2, s15
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bab0:	e008      	b.n	800bac4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	609a      	str	r2, [r3, #8]
}
 800bac4:	bf00      	nop
 800bac6:	3724      	adds	r7, #36	@ 0x24
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	58024400 	.word	0x58024400
 800bad4:	03d09000 	.word	0x03d09000
 800bad8:	46000000 	.word	0x46000000
 800badc:	4c742400 	.word	0x4c742400
 800bae0:	4a742400 	.word	0x4a742400
 800bae4:	4bb71b00 	.word	0x4bb71b00

0800bae8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800baf6:	4b53      	ldr	r3, [pc, #332]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800baf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafa:	f003 0303 	and.w	r3, r3, #3
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d101      	bne.n	800bb06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e099      	b.n	800bc3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb06:	4b4f      	ldr	r3, [pc, #316]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a4e      	ldr	r2, [pc, #312]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb12:	f7f6 ff2f 	bl	8002974 <HAL_GetTick>
 800bb16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb18:	e008      	b.n	800bb2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb1a:	f7f6 ff2b 	bl	8002974 <HAL_GetTick>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d901      	bls.n	800bb2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	e086      	b.n	800bc3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb2c:	4b45      	ldr	r3, [pc, #276]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1f0      	bne.n	800bb1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb38:	4b42      	ldr	r3, [pc, #264]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	031b      	lsls	r3, r3, #12
 800bb46:	493f      	ldr	r1, [pc, #252]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	025b      	lsls	r3, r3, #9
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	431a      	orrs	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	041b      	lsls	r3, r3, #16
 800bb6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bb6e:	431a      	orrs	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	3b01      	subs	r3, #1
 800bb76:	061b      	lsls	r3, r3, #24
 800bb78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bb7c:	4931      	ldr	r1, [pc, #196]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bb82:	4b30      	ldr	r3, [pc, #192]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	492d      	ldr	r1, [pc, #180]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bb94:	4b2b      	ldr	r3, [pc, #172]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bb96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb98:	f023 0220 	bic.w	r2, r3, #32
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	4928      	ldr	r1, [pc, #160]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bba6:	4b27      	ldr	r3, [pc, #156]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbaa:	4a26      	ldr	r2, [pc, #152]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbac:	f023 0310 	bic.w	r3, r3, #16
 800bbb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bbb2:	4b24      	ldr	r3, [pc, #144]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bbb6:	4b24      	ldr	r3, [pc, #144]	@ (800bc48 <RCCEx_PLL2_Config+0x160>)
 800bbb8:	4013      	ands	r3, r2
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	69d2      	ldr	r2, [r2, #28]
 800bbbe:	00d2      	lsls	r2, r2, #3
 800bbc0:	4920      	ldr	r1, [pc, #128]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bbc6:	4b1f      	ldr	r3, [pc, #124]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbca:	4a1e      	ldr	r2, [pc, #120]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbcc:	f043 0310 	orr.w	r3, r3, #16
 800bbd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d106      	bne.n	800bbe6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bbd8:	4b1a      	ldr	r3, [pc, #104]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbdc:	4a19      	ldr	r2, [pc, #100]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bbe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bbe4:	e00f      	b.n	800bc06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d106      	bne.n	800bbfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bbec:	4b15      	ldr	r3, [pc, #84]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf0:	4a14      	ldr	r2, [pc, #80]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bbf8:	e005      	b.n	800bc06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bbfa:	4b12      	ldr	r3, [pc, #72]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfe:	4a11      	ldr	r2, [pc, #68]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bc00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bc04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc06:	4b0f      	ldr	r3, [pc, #60]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a0e      	ldr	r2, [pc, #56]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bc0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc12:	f7f6 feaf 	bl	8002974 <HAL_GetTick>
 800bc16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc18:	e008      	b.n	800bc2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc1a:	f7f6 feab 	bl	8002974 <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d901      	bls.n	800bc2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	e006      	b.n	800bc3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc2c:	4b05      	ldr	r3, [pc, #20]	@ (800bc44 <RCCEx_PLL2_Config+0x15c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d0f0      	beq.n	800bc1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	58024400 	.word	0x58024400
 800bc48:	ffff0007 	.word	0xffff0007

0800bc4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc5a:	4b53      	ldr	r3, [pc, #332]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc5e:	f003 0303 	and.w	r3, r3, #3
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d101      	bne.n	800bc6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e099      	b.n	800bd9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc6a:	4b4f      	ldr	r3, [pc, #316]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a4e      	ldr	r2, [pc, #312]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bc70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc76:	f7f6 fe7d 	bl	8002974 <HAL_GetTick>
 800bc7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bc7c:	e008      	b.n	800bc90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc7e:	f7f6 fe79 	bl	8002974 <HAL_GetTick>
 800bc82:	4602      	mov	r2, r0
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d901      	bls.n	800bc90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e086      	b.n	800bd9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bc90:	4b45      	ldr	r3, [pc, #276]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1f0      	bne.n	800bc7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bc9c:	4b42      	ldr	r3, [pc, #264]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	051b      	lsls	r3, r3, #20
 800bcaa:	493f      	ldr	r1, [pc, #252]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bcac:	4313      	orrs	r3, r2
 800bcae:	628b      	str	r3, [r1, #40]	@ 0x28
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	025b      	lsls	r3, r3, #9
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	431a      	orrs	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	3b01      	subs	r3, #1
 800bccc:	041b      	lsls	r3, r3, #16
 800bcce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bcd2:	431a      	orrs	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	061b      	lsls	r3, r3, #24
 800bcdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bce0:	4931      	ldr	r1, [pc, #196]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bce2:	4313      	orrs	r3, r2
 800bce4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bce6:	4b30      	ldr	r3, [pc, #192]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	492d      	ldr	r1, [pc, #180]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bcf8:	4b2b      	ldr	r3, [pc, #172]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	4928      	ldr	r1, [pc, #160]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd0a:	4b27      	ldr	r3, [pc, #156]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd0e:	4a26      	ldr	r2, [pc, #152]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd16:	4b24      	ldr	r3, [pc, #144]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd1a:	4b24      	ldr	r3, [pc, #144]	@ (800bdac <RCCEx_PLL3_Config+0x160>)
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	69d2      	ldr	r2, [r2, #28]
 800bd22:	00d2      	lsls	r2, r2, #3
 800bd24:	4920      	ldr	r1, [pc, #128]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd26:	4313      	orrs	r3, r2
 800bd28:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd2a:	4b1f      	ldr	r3, [pc, #124]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2e:	4a1e      	ldr	r2, [pc, #120]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d106      	bne.n	800bd4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd3c:	4b1a      	ldr	r3, [pc, #104]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd40:	4a19      	ldr	r2, [pc, #100]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bd46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd48:	e00f      	b.n	800bd6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d106      	bne.n	800bd5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd50:	4b15      	ldr	r3, [pc, #84]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd54:	4a14      	ldr	r2, [pc, #80]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd5c:	e005      	b.n	800bd6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bd5e:	4b12      	ldr	r3, [pc, #72]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd62:	4a11      	ldr	r2, [pc, #68]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd6a:	4b0f      	ldr	r3, [pc, #60]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a0e      	ldr	r2, [pc, #56]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd76:	f7f6 fdfd 	bl	8002974 <HAL_GetTick>
 800bd7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bd7c:	e008      	b.n	800bd90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bd7e:	f7f6 fdf9 	bl	8002974 <HAL_GetTick>
 800bd82:	4602      	mov	r2, r0
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d901      	bls.n	800bd90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	e006      	b.n	800bd9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bd90:	4b05      	ldr	r3, [pc, #20]	@ (800bda8 <RCCEx_PLL3_Config+0x15c>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d0f0      	beq.n	800bd7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	58024400 	.word	0x58024400
 800bdac:	ffff0007 	.word	0xffff0007

0800bdb0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b08a      	sub	sp, #40	@ 0x28
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e075      	b.n	800beae <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d105      	bne.n	800bdda <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7f6 fa35 	bl	8002244 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2204      	movs	r2, #4
 800bdde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f868 	bl	800beb8 <HAL_SD_InitCard>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e05d      	b.n	800beae <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bdf2:	f107 0308 	add.w	r3, r7, #8
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fdaf 	bl	800c95c <HAL_SD_GetCardStatus>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d001      	beq.n	800be08 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800be04:	2301      	movs	r3, #1
 800be06:	e052      	b.n	800beae <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800be08:	7e3b      	ldrb	r3, [r7, #24]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be0e:	7e7b      	ldrb	r3, [r7, #25]
 800be10:	b2db      	uxtb	r3, r3
 800be12:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d10a      	bne.n	800be32 <HAL_SD_Init+0x82>
 800be1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d102      	bne.n	800be28 <HAL_SD_Init+0x78>
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d004      	beq.n	800be32 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be2e:	659a      	str	r2, [r3, #88]	@ 0x58
 800be30:	e00b      	b.n	800be4a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be36:	2b01      	cmp	r3, #1
 800be38:	d104      	bne.n	800be44 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be40:	659a      	str	r2, [r3, #88]	@ 0x58
 800be42:	e002      	b.n	800be4a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fe6d 	bl	800cb30 <HAL_SD_ConfigWideBusOperation>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e026      	b.n	800beae <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800be60:	f7f6 fd88 	bl	8002974 <HAL_GetTick>
 800be64:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800be66:	e011      	b.n	800be8c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be68:	f7f6 fd84 	bl	8002974 <HAL_GetTick>
 800be6c:	4602      	mov	r2, r0
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be76:	d109      	bne.n	800be8c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be7e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800be88:	2303      	movs	r3, #3
 800be8a:	e010      	b.n	800beae <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 ff61 	bl	800cd54 <HAL_SD_GetCardState>
 800be92:	4603      	mov	r3, r0
 800be94:	2b04      	cmp	r3, #4
 800be96:	d1e7      	bne.n	800be68 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3728      	adds	r7, #40	@ 0x28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800beb8:	b590      	push	{r4, r7, lr}
 800beba:	b08d      	sub	sp, #52	@ 0x34
 800bebc:	af02      	add	r7, sp, #8
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bec4:	2300      	movs	r3, #0
 800bec6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bec8:	2300      	movs	r3, #0
 800beca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800becc:	2300      	movs	r3, #0
 800bece:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bed0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bed4:	f04f 0100 	mov.w	r1, #0
 800bed8:	f7fe fd24 	bl	800a924 <HAL_RCCEx_GetPeriphCLKFreq>
 800bedc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800bede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d109      	bne.n	800bef8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800bef2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e070      	b.n	800bfda <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befa:	0a1b      	lsrs	r3, r3, #8
 800befc:	4a39      	ldr	r2, [pc, #228]	@ (800bfe4 <HAL_SD_InitCard+0x12c>)
 800befe:	fba2 2303 	umull	r2, r3, r2, r3
 800bf02:	091b      	lsrs	r3, r3, #4
 800bf04:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681c      	ldr	r4, [r3, #0]
 800bf0a:	466a      	mov	r2, sp
 800bf0c:	f107 0318 	add.w	r3, r7, #24
 800bf10:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf14:	e882 0003 	stmia.w	r2, {r0, r1}
 800bf18:	f107 030c 	add.w	r3, r7, #12
 800bf1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f003 fffe 	bl	800ff20 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f004 f841 	bl	800ffb0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d005      	beq.n	800bf40 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800bf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d007      	beq.n	800bf56 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bf46:	4a28      	ldr	r2, [pc, #160]	@ (800bfe8 <HAL_SD_InitCard+0x130>)
 800bf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf4e:	3301      	adds	r3, #1
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f6 fd1b 	bl	800298c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 ffea 	bl	800cf30 <SD_PowerON>
 800bf5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf70:	6a3b      	ldr	r3, [r7, #32]
 800bf72:	431a      	orrs	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e02e      	b.n	800bfda <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 ff09 	bl	800cd94 <SD_InitCard>
 800bf82:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00b      	beq.n	800bfa2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf96:	6a3b      	ldr	r3, [r7, #32]
 800bf98:	431a      	orrs	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e01b      	b.n	800bfda <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f004 f896 	bl	80100dc <SDMMC_CmdBlockLength>
 800bfb0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00f      	beq.n	800bfd8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a0b      	ldr	r2, [pc, #44]	@ (800bfec <HAL_SD_InitCard+0x134>)
 800bfbe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e000      	b.n	800bfda <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	372c      	adds	r7, #44	@ 0x2c
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd90      	pop	{r4, r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	014f8b59 	.word	0x014f8b59
 800bfe8:	00012110 	.word	0x00012110
 800bfec:	1fe00fff 	.word	0x1fe00fff

0800bff0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08c      	sub	sp, #48	@ 0x30
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d107      	bne.n	800c018 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c00c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e08d      	b.n	800c134 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2b01      	cmp	r3, #1
 800c022:	f040 8086 	bne.w	800c132 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c02c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	441a      	add	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c036:	429a      	cmp	r2, r3
 800c038:	d907      	bls.n	800c04a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c03e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e074      	b.n	800c134 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2203      	movs	r2, #3
 800c04e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2200      	movs	r2, #0
 800c058:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	025a      	lsls	r2, r3, #9
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d002      	beq.n	800c076 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c072:	025b      	lsls	r3, r3, #9
 800c074:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c076:	f04f 33ff 	mov.w	r3, #4294967295
 800c07a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	025b      	lsls	r3, r3, #9
 800c080:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c082:	2390      	movs	r3, #144	@ 0x90
 800c084:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c086:	2302      	movs	r3, #2
 800c088:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c08e:	2300      	movs	r3, #0
 800c090:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f107 0210 	add.w	r2, r7, #16
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f003 fff1 	bl	8010084 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0b0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d90a      	bls.n	800c0de <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2282      	movs	r2, #130	@ 0x82
 800c0cc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f004 f847 	bl	8010168 <SDMMC_CmdReadMultiBlock>
 800c0da:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c0dc:	e009      	b.n	800c0f2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2281      	movs	r2, #129	@ 0x81
 800c0e2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f004 f819 	bl	8010122 <SDMMC_CmdReadSingleBlock>
 800c0f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d012      	beq.n	800c11e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a0f      	ldr	r2, [pc, #60]	@ (800c13c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c0fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c106:	431a      	orrs	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e00a      	b.n	800c134 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c12c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	e000      	b.n	800c134 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c132:	2302      	movs	r3, #2
  }
}
 800c134:	4618      	mov	r0, r3
 800c136:	3730      	adds	r7, #48	@ 0x30
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	1fe00fff 	.word	0x1fe00fff

0800c140 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08c      	sub	sp, #48	@ 0x30
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d107      	bne.n	800c168 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c15c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c164:	2301      	movs	r3, #1
 800c166:	e08d      	b.n	800c284 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b01      	cmp	r3, #1
 800c172:	f040 8086 	bne.w	800c282 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c17c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	441a      	add	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c186:	429a      	cmp	r2, r3
 800c188:	d907      	bls.n	800c19a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c18e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e074      	b.n	800c284 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2203      	movs	r2, #3
 800c19e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	025a      	lsls	r2, r3, #9
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d002      	beq.n	800c1c6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	025b      	lsls	r3, r3, #9
 800c1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ca:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	025b      	lsls	r3, r3, #9
 800c1d0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c1d2:	2390      	movs	r3, #144	@ 0x90
 800c1d4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f107 0210 	add.w	r2, r7, #16
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f003 ff49 	bl	8010084 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c200:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2201      	movs	r2, #1
 800c210:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b01      	cmp	r3, #1
 800c216:	d90a      	bls.n	800c22e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	22a0      	movs	r2, #160	@ 0xa0
 800c21c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c224:	4618      	mov	r0, r3
 800c226:	f003 ffe5 	bl	80101f4 <SDMMC_CmdWriteMultiBlock>
 800c22a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c22c:	e009      	b.n	800c242 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2290      	movs	r2, #144	@ 0x90
 800c232:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c23a:	4618      	mov	r0, r3
 800c23c:	f003 ffb7 	bl	80101ae <SDMMC_CmdWriteSingleBlock>
 800c240:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c244:	2b00      	cmp	r3, #0
 800c246:	d012      	beq.n	800c26e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a0f      	ldr	r2, [pc, #60]	@ (800c28c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c24e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c256:	431a      	orrs	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e00a      	b.n	800c284 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c27c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	e000      	b.n	800c284 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c282:	2302      	movs	r3, #2
  }
}
 800c284:	4618      	mov	r0, r3
 800c286:	3730      	adds	r7, #48	@ 0x30
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	1fe00fff 	.word	0x1fe00fff

0800c290 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d008      	beq.n	800c2be <HAL_SD_IRQHandler+0x2e>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f003 0308 	and.w	r3, r3, #8
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f001 f926 	bl	800d508 <SD_Read_IT>
 800c2bc:	e19a      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 80ac 	beq.w	800c426 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c2d6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	4b59      	ldr	r3, [pc, #356]	@ (800c448 <HAL_SD_IRQHandler+0x1b8>)
 800c2e4:	400b      	ands	r3, r1
 800c2e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c2f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68da      	ldr	r2, [r3, #12]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c306:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f003 0308 	and.w	r3, r3, #8
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d038      	beq.n	800c384 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f003 0302 	and.w	r3, r3, #2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d104      	bne.n	800c326 <HAL_SD_IRQHandler+0x96>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f003 0320 	and.w	r3, r3, #32
 800c322:	2b00      	cmp	r3, #0
 800c324:	d011      	beq.n	800c34a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f003 ff86 	bl	801023c <SDMMC_CmdStopTransfer>
 800c330:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d008      	beq.n	800c34a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	431a      	orrs	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f95b 	bl	800c600 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a3f      	ldr	r2, [pc, #252]	@ (800c44c <HAL_SD_IRQHandler+0x1bc>)
 800c350:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2201      	movs	r2, #1
 800c356:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	2b00      	cmp	r3, #0
 800c368:	d104      	bne.n	800c374 <HAL_SD_IRQHandler+0xe4>
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f003 0302 	and.w	r3, r3, #2
 800c370:	2b00      	cmp	r3, #0
 800c372:	d003      	beq.n	800c37c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f004 fc31 	bl	8010bdc <HAL_SD_RxCpltCallback>
 800c37a:	e13b      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f004 fc23 	bl	8010bc8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c382:	e137      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 8132 	beq.w	800c5f4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2200      	movs	r2, #0
 800c396:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2200      	movs	r2, #0
 800c39e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f003 0302 	and.w	r3, r3, #2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d104      	bne.n	800c3bc <HAL_SD_IRQHandler+0x12c>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f003 0320 	and.w	r3, r3, #32
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d011      	beq.n	800c3e0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f003 ff3b 	bl	801023c <SDMMC_CmdStopTransfer>
 800c3c6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d008      	beq.n	800c3e0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	431a      	orrs	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 f910 	bl	800c600 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f003 0310 	and.w	r3, r3, #16
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d104      	bne.n	800c402 <HAL_SD_IRQHandler+0x172>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f003 0320 	and.w	r3, r3, #32
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d002      	beq.n	800c408 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f004 fbe0 	bl	8010bc8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d105      	bne.n	800c41e <HAL_SD_IRQHandler+0x18e>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f003 0302 	and.w	r3, r3, #2
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 80eb 	beq.w	800c5f4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f004 fbdc 	bl	8010bdc <HAL_SD_RxCpltCallback>
}
 800c424:	e0e6      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c42c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00d      	beq.n	800c450 <HAL_SD_IRQHandler+0x1c0>
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f003 0308 	and.w	r3, r3, #8
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d008      	beq.n	800c450 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f001 f8a8 	bl	800d594 <SD_Write_IT>
 800c444:	e0d6      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
 800c446:	bf00      	nop
 800c448:	ffff3ec5 	.word	0xffff3ec5
 800c44c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c456:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 809d 	beq.w	800c59a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c466:	f003 0302 	and.w	r3, r3, #2
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d005      	beq.n	800c47a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c472:	f043 0202 	orr.w	r2, r3, #2
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c480:	f003 0308 	and.w	r3, r3, #8
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c48c:	f043 0208 	orr.w	r2, r3, #8
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c49a:	f003 0320 	and.w	r3, r3, #32
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d005      	beq.n	800c4ae <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a6:	f043 0220 	orr.w	r2, r3, #32
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b4:	f003 0310 	and.w	r3, r3, #16
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d005      	beq.n	800c4c8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4c0:	f043 0210 	orr.w	r2, r3, #16
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a4b      	ldr	r2, [pc, #300]	@ (800c5fc <HAL_SD_IRQHandler+0x36c>)
 800c4ce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c4de:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68da      	ldr	r2, [r3, #12]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c4ee:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c4fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68da      	ldr	r2, [r3, #12]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c50e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	f003 fe91 	bl	801023c <SDMMC_CmdStopTransfer>
 800c51a:	4602      	mov	r2, r0
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c520:	431a      	orrs	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68da      	ldr	r2, [r3, #12]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c534:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c53e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f003 0308 	and.w	r3, r3, #8
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00a      	beq.n	800c560 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f851 	bl	800c600 <HAL_SD_ErrorCallback>
}
 800c55e:	e049      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c566:	2b00      	cmp	r3, #0
 800c568:	d044      	beq.n	800c5f4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d040      	beq.n	800c5f4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c580:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2200      	movs	r2, #0
 800c588:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f834 	bl	800c600 <HAL_SD_ErrorCallback>
}
 800c598:	e02c      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d025      	beq.n	800c5f4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5b0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5b8:	f003 0304 	and.w	r3, r3, #4
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10c      	bne.n	800c5da <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f003 0320 	and.w	r3, r3, #32
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 f84a 	bl	800d664 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c5d0:	e010      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f001 f832 	bl	800d63c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c5d8:	e00c      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f003 0320 	and.w	r3, r3, #32
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f001 f833 	bl	800d650 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c5ea:	e003      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f001 f81b 	bl	800d628 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c5f2:	e7ff      	b.n	800c5f4 <HAL_SD_IRQHandler+0x364>
 800c5f4:	bf00      	nop
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	18000f3a 	.word	0x18000f3a

0800c600 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c608:	bf00      	nop
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c622:	0f9b      	lsrs	r3, r3, #30
 800c624:	b2da      	uxtb	r2, r3
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c62e:	0e9b      	lsrs	r3, r3, #26
 800c630:	b2db      	uxtb	r3, r3
 800c632:	f003 030f 	and.w	r3, r3, #15
 800c636:	b2da      	uxtb	r2, r3
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c640:	0e1b      	lsrs	r3, r3, #24
 800c642:	b2db      	uxtb	r3, r3
 800c644:	f003 0303 	and.w	r3, r3, #3
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c652:	0c1b      	lsrs	r3, r3, #16
 800c654:	b2da      	uxtb	r2, r3
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c65e:	0a1b      	lsrs	r3, r3, #8
 800c660:	b2da      	uxtb	r2, r3
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c674:	0d1b      	lsrs	r3, r3, #20
 800c676:	b29a      	uxth	r2, r3
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c680:	0c1b      	lsrs	r3, r3, #16
 800c682:	b2db      	uxtb	r3, r3
 800c684:	f003 030f 	and.w	r3, r3, #15
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c692:	0bdb      	lsrs	r3, r3, #15
 800c694:	b2db      	uxtb	r3, r3
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6a4:	0b9b      	lsrs	r3, r3, #14
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6b6:	0b5b      	lsrs	r3, r3, #13
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6c8:	0b1b      	lsrs	r3, r3, #12
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d163      	bne.n	800c7ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6e8:	009a      	lsls	r2, r3, #2
 800c6ea:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c6f4:	0f92      	lsrs	r2, r2, #30
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c700:	0edb      	lsrs	r3, r3, #27
 800c702:	b2db      	uxtb	r3, r3
 800c704:	f003 0307 	and.w	r3, r3, #7
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c712:	0e1b      	lsrs	r3, r3, #24
 800c714:	b2db      	uxtb	r3, r3
 800c716:	f003 0307 	and.w	r3, r3, #7
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c724:	0d5b      	lsrs	r3, r3, #21
 800c726:	b2db      	uxtb	r3, r3
 800c728:	f003 0307 	and.w	r3, r3, #7
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c736:	0c9b      	lsrs	r3, r3, #18
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	f003 0307 	and.w	r3, r3, #7
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c748:	0bdb      	lsrs	r3, r3, #15
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	f003 0307 	and.w	r3, r3, #7
 800c750:	b2da      	uxtb	r2, r3
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	1c5a      	adds	r2, r3, #1
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	7e1b      	ldrb	r3, [r3, #24]
 800c764:	b2db      	uxtb	r3, r3
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	3302      	adds	r3, #2
 800c76c:	2201      	movs	r2, #1
 800c76e:	fa02 f303 	lsl.w	r3, r2, r3
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c776:	fb03 f202 	mul.w	r2, r3, r2
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	7a1b      	ldrb	r3, [r3, #8]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 030f 	and.w	r3, r3, #15
 800c788:	2201      	movs	r2, #1
 800c78a:	409a      	lsls	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c798:	0a52      	lsrs	r2, r2, #9
 800c79a:	fb03 f202 	mul.w	r2, r3, r2
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7a8:	655a      	str	r2, [r3, #84]	@ 0x54
 800c7aa:	e031      	b.n	800c810 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d11d      	bne.n	800c7f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7b8:	041b      	lsls	r3, r3, #16
 800c7ba:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7c2:	0c1b      	lsrs	r3, r3, #16
 800c7c4:	431a      	orrs	r2, r3
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	029a      	lsls	r2, r3, #10
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	655a      	str	r2, [r3, #84]	@ 0x54
 800c7ee:	e00f      	b.n	800c810 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a58      	ldr	r2, [pc, #352]	@ (800c958 <HAL_SD_GetCardCSD+0x344>)
 800c7f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	e09d      	b.n	800c94c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c814:	0b9b      	lsrs	r3, r3, #14
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 0301 	and.w	r3, r3, #1
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c826:	09db      	lsrs	r3, r3, #7
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c848:	0fdb      	lsrs	r3, r3, #31
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c854:	0f5b      	lsrs	r3, r3, #29
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c866:	0e9b      	lsrs	r3, r3, #26
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	f003 0307 	and.w	r3, r3, #7
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c878:	0d9b      	lsrs	r3, r3, #22
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	f003 030f 	and.w	r3, r3, #15
 800c880:	b2da      	uxtb	r2, r3
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c88a:	0d5b      	lsrs	r3, r3, #21
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	b2da      	uxtb	r2, r3
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8a6:	0c1b      	lsrs	r3, r3, #16
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8ba:	0bdb      	lsrs	r3, r3, #15
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	f003 0301 	and.w	r3, r3, #1
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8ce:	0b9b      	lsrs	r3, r3, #14
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8e2:	0b5b      	lsrs	r3, r3, #13
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8f6:	0b1b      	lsrs	r3, r3, #12
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c90a:	0a9b      	lsrs	r3, r3, #10
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	f003 0303 	and.w	r3, r3, #3
 800c912:	b2da      	uxtb	r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c91e:	0a1b      	lsrs	r3, r3, #8
 800c920:	b2db      	uxtb	r3, r3
 800c922:	f003 0303 	and.w	r3, r3, #3
 800c926:	b2da      	uxtb	r2, r3
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c932:	085b      	lsrs	r3, r3, #1
 800c934:	b2db      	uxtb	r3, r3
 800c936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	370c      	adds	r7, #12
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	1fe00fff 	.word	0x1fe00fff

0800c95c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b094      	sub	sp, #80	@ 0x50
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b03      	cmp	r3, #3
 800c976:	d101      	bne.n	800c97c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	e0a7      	b.n	800cacc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c97c:	f107 0308 	add.w	r3, r7, #8
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fb62 	bl	800d04c <SD_SendSDStatus>
 800c988:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c98a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d011      	beq.n	800c9b4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a4f      	ldr	r2, [pc, #316]	@ (800cad4 <HAL_SD_GetCardStatus+0x178>)
 800c996:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c99c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c99e:	431a      	orrs	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c9b2:	e070      	b.n	800ca96 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	099b      	lsrs	r3, r3, #6
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	f003 0303 	and.w	r3, r3, #3
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	095b      	lsrs	r3, r3, #5
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	f003 0301 	and.w	r3, r3, #1
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	0a1b      	lsrs	r3, r3, #8
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	0e1b      	lsrs	r3, r3, #24
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	061a      	lsls	r2, r3, #24
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	021b      	lsls	r3, r3, #8
 800c9f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c9fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	0a1b      	lsrs	r3, r3, #8
 800ca00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca04:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	0e1b      	lsrs	r3, r3, #24
 800ca0a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	0a1b      	lsrs	r3, r3, #8
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	0d1b      	lsrs	r3, r3, #20
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	f003 030f 	and.w	r3, r3, #15
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	0c1b      	lsrs	r3, r3, #16
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	4313      	orrs	r3, r2
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	0a9b      	lsrs	r3, r3, #10
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	0a1b      	lsrs	r3, r3, #8
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	f003 0303 	and.w	r3, r3, #3
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	091b      	lsrs	r3, r3, #4
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	f003 030f 	and.w	r3, r3, #15
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	f003 030f 	and.w	r3, r3, #15
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	0e1b      	lsrs	r3, r3, #24
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f003 fb1c 	bl	80100dc <SDMMC_CmdBlockLength>
 800caa4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800caa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00d      	beq.n	800cac8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a08      	ldr	r2, [pc, #32]	@ (800cad4 <HAL_SD_GetCardStatus+0x178>)
 800cab2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cab8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800cac8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3750      	adds	r7, #80	@ 0x50
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	1fe00fff 	.word	0x1fe00fff

0800cad8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cb30:	b590      	push	{r4, r7, lr}
 800cb32:	b08d      	sub	sp, #52	@ 0x34
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2203      	movs	r2, #3
 800cb44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d02e      	beq.n	800cbae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb56:	d106      	bne.n	800cb66 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	635a      	str	r2, [r3, #52]	@ 0x34
 800cb64:	e029      	b.n	800cbba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb6c:	d10a      	bne.n	800cb84 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fb64 	bl	800d23c <SD_WideBus_Enable>
 800cb74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb7a:	6a3b      	ldr	r3, [r7, #32]
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	635a      	str	r2, [r3, #52]	@ 0x34
 800cb82:	e01a      	b.n	800cbba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10a      	bne.n	800cba0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fba1 	bl	800d2d2 <SD_WideBus_Disable>
 800cb90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	635a      	str	r2, [r3, #52]	@ 0x34
 800cb9e:	e00c      	b.n	800cbba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cba4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbac:	e005      	b.n	800cbba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbb2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d007      	beq.n	800cbd2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a5f      	ldr	r2, [pc, #380]	@ (800cd44 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cbc8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cbd0:	e096      	b.n	800cd00 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cbd2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cbd6:	f04f 0100 	mov.w	r1, #0
 800cbda:	f7fd fea3 	bl	800a924 <HAL_RCCEx_GetPeriphCLKFreq>
 800cbde:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 8083 	beq.w	800ccee <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	695a      	ldr	r2, [r3, #20]
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	4950      	ldr	r1, [pc, #320]	@ (800cd48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc06:	fba1 1303 	umull	r1, r3, r1, r3
 800cc0a:	0e1b      	lsrs	r3, r3, #24
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d303      	bcc.n	800cc18 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	695b      	ldr	r3, [r3, #20]
 800cc14:	61bb      	str	r3, [r7, #24]
 800cc16:	e05a      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc20:	d103      	bne.n	800cc2a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	61bb      	str	r3, [r7, #24]
 800cc28:	e051      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc32:	d126      	bne.n	800cc82 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	695b      	ldr	r3, [r3, #20]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d10e      	bne.n	800cc5a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	4a43      	ldr	r2, [pc, #268]	@ (800cd4c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d906      	bls.n	800cc52 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	4a40      	ldr	r2, [pc, #256]	@ (800cd48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc48:	fba2 2303 	umull	r2, r3, r2, r3
 800cc4c:	0e5b      	lsrs	r3, r3, #25
 800cc4e:	61bb      	str	r3, [r7, #24]
 800cc50:	e03d      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	695b      	ldr	r3, [r3, #20]
 800cc56:	61bb      	str	r3, [r7, #24]
 800cc58:	e039      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	69fa      	ldr	r2, [r7, #28]
 800cc62:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc66:	4a39      	ldr	r2, [pc, #228]	@ (800cd4c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d906      	bls.n	800cc7a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	4a36      	ldr	r2, [pc, #216]	@ (800cd48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc70:	fba2 2303 	umull	r2, r3, r2, r3
 800cc74:	0e5b      	lsrs	r3, r3, #25
 800cc76:	61bb      	str	r3, [r7, #24]
 800cc78:	e029      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	61bb      	str	r3, [r7, #24]
 800cc80:	e025      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10e      	bne.n	800cca8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	4a30      	ldr	r2, [pc, #192]	@ (800cd50 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d906      	bls.n	800cca0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	4a2c      	ldr	r2, [pc, #176]	@ (800cd48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc96:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9a:	0e1b      	lsrs	r3, r3, #24
 800cc9c:	61bb      	str	r3, [r7, #24]
 800cc9e:	e016      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	61bb      	str	r3, [r7, #24]
 800cca6:	e012      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	695b      	ldr	r3, [r3, #20]
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	69fa      	ldr	r2, [r7, #28]
 800ccb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb4:	4a26      	ldr	r2, [pc, #152]	@ (800cd50 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d906      	bls.n	800ccc8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	4a22      	ldr	r2, [pc, #136]	@ (800cd48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccbe:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc2:	0e1b      	lsrs	r3, r3, #24
 800ccc4:	61bb      	str	r3, [r7, #24]
 800ccc6:	e002      	b.n	800ccce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681c      	ldr	r4, [r3, #0]
 800ccd2:	466a      	mov	r2, sp
 800ccd4:	f107 0314 	add.w	r3, r7, #20
 800ccd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ccdc:	e882 0003 	stmia.w	r2, {r0, r1}
 800cce0:	f107 0308 	add.w	r3, r7, #8
 800cce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cce6:	4620      	mov	r0, r4
 800cce8:	f003 f91a 	bl	800ff20 <SDMMC_Init>
 800ccec:	e008      	b.n	800cd00 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccf2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f003 f9e7 	bl	80100dc <SDMMC_CmdBlockLength>
 800cd0e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00c      	beq.n	800cd30 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a0a      	ldr	r2, [pc, #40]	@ (800cd44 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cd1c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	431a      	orrs	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2201      	movs	r2, #1
 800cd34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cd38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	372c      	adds	r7, #44	@ 0x2c
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd90      	pop	{r4, r7, pc}
 800cd44:	1fe00fff 	.word	0x1fe00fff
 800cd48:	55e63b89 	.word	0x55e63b89
 800cd4c:	02faf080 	.word	0x02faf080
 800cd50:	017d7840 	.word	0x017d7840

0800cd54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cd60:	f107 030c 	add.w	r3, r7, #12
 800cd64:	4619      	mov	r1, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fa40 	bl	800d1ec <SD_SendStatus>
 800cd6c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d005      	beq.n	800cd80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	0a5b      	lsrs	r3, r3, #9
 800cd84:	f003 030f 	and.w	r3, r3, #15
 800cd88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cd8a:	693b      	ldr	r3, [r7, #16]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b090      	sub	sp, #64	@ 0x40
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cda0:	f7f5 fde8 	bl	8002974 <HAL_GetTick>
 800cda4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f003 f911 	bl	800ffd2 <SDMMC_GetPowerState>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d102      	bne.n	800cdbc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cdb6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cdba:	e0b5      	b.n	800cf28 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d02e      	beq.n	800ce22 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f003 fb5c 	bl	8010486 <SDMMC_CmdSendCID>
 800cdce:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d001      	beq.n	800cdda <SD_InitCard+0x46>
    {
      return errorstate;
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd8:	e0a6      	b.n	800cf28 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2100      	movs	r1, #0
 800cde0:	4618      	mov	r0, r3
 800cde2:	f003 f93c 	bl	801005e <SDMMC_GetResponse>
 800cde6:	4602      	mov	r2, r0
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2104      	movs	r1, #4
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f003 f933 	bl	801005e <SDMMC_GetResponse>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2108      	movs	r1, #8
 800ce04:	4618      	mov	r0, r3
 800ce06:	f003 f92a 	bl	801005e <SDMMC_GetResponse>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	210c      	movs	r1, #12
 800ce16:	4618      	mov	r0, r3
 800ce18:	f003 f921 	bl	801005e <SDMMC_GetResponse>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d01d      	beq.n	800ce66 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ce2a:	e019      	b.n	800ce60 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f107 020a 	add.w	r2, r7, #10
 800ce34:	4611      	mov	r1, r2
 800ce36:	4618      	mov	r0, r3
 800ce38:	f003 fb64 	bl	8010504 <SDMMC_CmdSetRelAdd>
 800ce3c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ce44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce46:	e06f      	b.n	800cf28 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ce48:	f7f5 fd94 	bl	8002974 <HAL_GetTick>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d902      	bls.n	800ce60 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ce5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce5e:	e063      	b.n	800cf28 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ce60:	897b      	ldrh	r3, [r7, #10]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0e2      	beq.n	800ce2c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d036      	beq.n	800cedc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ce6e:	897b      	ldrh	r3, [r7, #10]
 800ce70:	461a      	mov	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce7e:	041b      	lsls	r3, r3, #16
 800ce80:	4619      	mov	r1, r3
 800ce82:	4610      	mov	r0, r2
 800ce84:	f003 fb1e 	bl	80104c4 <SDMMC_CmdSendCSD>
 800ce88:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <SD_InitCard+0x100>
    {
      return errorstate;
 800ce90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce92:	e049      	b.n	800cf28 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f003 f8df 	bl	801005e <SDMMC_GetResponse>
 800cea0:	4602      	mov	r2, r0
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2104      	movs	r1, #4
 800ceac:	4618      	mov	r0, r3
 800ceae:	f003 f8d6 	bl	801005e <SDMMC_GetResponse>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2108      	movs	r1, #8
 800cebe:	4618      	mov	r0, r3
 800cec0:	f003 f8cd 	bl	801005e <SDMMC_GetResponse>
 800cec4:	4602      	mov	r2, r0
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	210c      	movs	r1, #12
 800ced0:	4618      	mov	r0, r3
 800ced2:	f003 f8c4 	bl	801005e <SDMMC_GetResponse>
 800ced6:	4602      	mov	r2, r0
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2104      	movs	r1, #4
 800cee2:	4618      	mov	r0, r3
 800cee4:	f003 f8bb 	bl	801005e <SDMMC_GetResponse>
 800cee8:	4603      	mov	r3, r0
 800ceea:	0d1a      	lsrs	r2, r3, #20
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cef0:	f107 030c 	add.w	r3, r7, #12
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff fb8c 	bl	800c614 <HAL_SD_GetCardCSD>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf02:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cf06:	e00f      	b.n	800cf28 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf10:	041b      	lsls	r3, r3, #16
 800cf12:	4619      	mov	r1, r3
 800cf14:	4610      	mov	r0, r2
 800cf16:	f003 f9cd 	bl	80102b4 <SDMMC_CmdSelDesel>
 800cf1a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <SD_InitCard+0x192>
  {
    return errorstate;
 800cf22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf24:	e000      	b.n	800cf28 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3740      	adds	r7, #64	@ 0x40
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cf40:	2300      	movs	r3, #0
 800cf42:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f003 f9d6 	bl	80102fa <SDMMC_CmdGoIdleState>
 800cf4e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <SD_PowerON+0x2a>
  {
    return errorstate;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	e072      	b.n	800d040 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f003 f9e9 	bl	8010336 <SDMMC_CmdOperCond>
 800cf64:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf6c:	d10d      	bne.n	800cf8a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f003 f9be 	bl	80102fa <SDMMC_CmdGoIdleState>
 800cf7e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d004      	beq.n	800cf90 <SD_PowerON+0x60>
    {
      return errorstate;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	e05a      	b.n	800d040 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d137      	bne.n	800d008 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f003 f9e9 	bl	8010376 <SDMMC_CmdAppCommand>
 800cfa4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d02d      	beq.n	800d008 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cfb0:	e046      	b.n	800d040 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f003 f9dc 	bl	8010376 <SDMMC_CmdAppCommand>
 800cfbe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <SD_PowerON+0x9a>
    {
      return errorstate;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	e03a      	b.n	800d040 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	491e      	ldr	r1, [pc, #120]	@ (800d048 <SD_PowerON+0x118>)
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f003 f9f3 	bl	80103bc <SDMMC_CmdAppOperCommand>
 800cfd6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d002      	beq.n	800cfe4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfde:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cfe2:	e02d      	b.n	800d040 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2100      	movs	r1, #0
 800cfea:	4618      	mov	r0, r3
 800cfec:	f003 f837 	bl	801005e <SDMMC_GetResponse>
 800cff0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	0fdb      	lsrs	r3, r3, #31
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d101      	bne.n	800cffe <SD_PowerON+0xce>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e000      	b.n	800d000 <SD_PowerON+0xd0>
 800cffe:	2300      	movs	r3, #0
 800d000:	613b      	str	r3, [r7, #16]

    count++;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	3301      	adds	r3, #1
 800d006:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d00e:	4293      	cmp	r3, r2
 800d010:	d802      	bhi.n	800d018 <SD_PowerON+0xe8>
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d0cc      	beq.n	800cfb2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d01e:	4293      	cmp	r3, r2
 800d020:	d902      	bls.n	800d028 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d022:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d026:	e00b      	b.n	800d040 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d034:	2b00      	cmp	r3, #0
 800d036:	d002      	beq.n	800d03e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3718      	adds	r7, #24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	c1100000 	.word	0xc1100000

0800d04c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08c      	sub	sp, #48	@ 0x30
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d056:	f7f5 fc8d 	bl	8002974 <HAL_GetTick>
 800d05a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2100      	movs	r1, #0
 800d066:	4618      	mov	r0, r3
 800d068:	f002 fff9 	bl	801005e <SDMMC_GetResponse>
 800d06c:	4603      	mov	r3, r0
 800d06e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d076:	d102      	bne.n	800d07e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d078:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d07c:	e0b0      	b.n	800d1e0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2140      	movs	r1, #64	@ 0x40
 800d084:	4618      	mov	r0, r3
 800d086:	f003 f829 	bl	80100dc <SDMMC_CmdBlockLength>
 800d08a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d005      	beq.n	800d09e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	e0a0      	b.n	800d1e0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0a6:	041b      	lsls	r3, r3, #16
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f003 f963 	bl	8010376 <SDMMC_CmdAppCommand>
 800d0b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d005      	beq.n	800d0c4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	e08d      	b.n	800d1e0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d0ca:	2340      	movs	r3, #64	@ 0x40
 800d0cc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d0ce:	2360      	movs	r3, #96	@ 0x60
 800d0d0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f107 0208 	add.w	r2, r7, #8
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f002 ffcb 	bl	8010084 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f003 fa4b 	bl	801058e <SDMMC_CmdStatusRegister>
 800d0f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0fa:	6a3b      	ldr	r3, [r7, #32]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d02b      	beq.n	800d158 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	e069      	b.n	800d1e0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d116:	2b00      	cmp	r3, #0
 800d118:	d013      	beq.n	800d142 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d11a:	2300      	movs	r3, #0
 800d11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d11e:	e00d      	b.n	800d13c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4618      	mov	r0, r3
 800d126:	f002 ff25 	bl	800ff74 <SDMMC_ReadFIFO>
 800d12a:	4602      	mov	r2, r0
 800d12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d12e:	601a      	str	r2, [r3, #0]
        pData++;
 800d130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d132:	3304      	adds	r3, #4
 800d134:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d138:	3301      	adds	r3, #1
 800d13a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13e:	2b07      	cmp	r3, #7
 800d140:	d9ee      	bls.n	800d120 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d142:	f7f5 fc17 	bl	8002974 <HAL_GetTick>
 800d146:	4602      	mov	r2, r0
 800d148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d150:	d102      	bne.n	800d158 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d152:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d156:	e043      	b.n	800d1e0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d15e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0d2      	beq.n	800d10c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d16c:	f003 0308 	and.w	r3, r3, #8
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d174:	2308      	movs	r3, #8
 800d176:	e033      	b.n	800d1e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d17e:	f003 0302 	and.w	r3, r3, #2
 800d182:	2b00      	cmp	r3, #0
 800d184:	d001      	beq.n	800d18a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d186:	2302      	movs	r3, #2
 800d188:	e02a      	b.n	800d1e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d190:	f003 0320 	and.w	r3, r3, #32
 800d194:	2b00      	cmp	r3, #0
 800d196:	d017      	beq.n	800d1c8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d198:	2320      	movs	r3, #32
 800d19a:	e021      	b.n	800d1e0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f002 fee7 	bl	800ff74 <SDMMC_ReadFIFO>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1aa:	601a      	str	r2, [r3, #0]
    pData++;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1b2:	f7f5 fbdf 	bl	8002974 <HAL_GetTick>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c0:	d102      	bne.n	800d1c8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d1c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1c6:	e00b      	b.n	800d1e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1e2      	bne.n	800d19c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a03      	ldr	r2, [pc, #12]	@ (800d1e8 <SD_SendSDStatus+0x19c>)
 800d1dc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3730      	adds	r7, #48	@ 0x30
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	18000f3a 	.word	0x18000f3a

0800d1ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d1fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d200:	e018      	b.n	800d234 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d20a:	041b      	lsls	r3, r3, #16
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	f003 f99a 	bl	8010548 <SDMMC_CmdSendStatus>
 800d214:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	e009      	b.n	800d234 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2100      	movs	r1, #0
 800d226:	4618      	mov	r0, r3
 800d228:	f002 ff19 	bl	801005e <SDMMC_GetResponse>
 800d22c:	4602      	mov	r2, r0
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d244:	2300      	movs	r3, #0
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	2300      	movs	r3, #0
 800d24a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2100      	movs	r1, #0
 800d252:	4618      	mov	r0, r3
 800d254:	f002 ff03 	bl	801005e <SDMMC_GetResponse>
 800d258:	4603      	mov	r3, r0
 800d25a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d25e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d262:	d102      	bne.n	800d26a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d264:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d268:	e02f      	b.n	800d2ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d26a:	f107 030c 	add.w	r3, r7, #12
 800d26e:	4619      	mov	r1, r3
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f879 	bl	800d368 <SD_FindSCR>
 800d276:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d001      	beq.n	800d282 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	e023      	b.n	800d2ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d01c      	beq.n	800d2c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d294:	041b      	lsls	r3, r3, #16
 800d296:	4619      	mov	r1, r3
 800d298:	4610      	mov	r0, r2
 800d29a:	f003 f86c 	bl	8010376 <SDMMC_CmdAppCommand>
 800d29e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d001      	beq.n	800d2aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	e00f      	b.n	800d2ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2102      	movs	r1, #2
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f003 f8a3 	bl	80103fc <SDMMC_CmdBusWidth>
 800d2b6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d001      	beq.n	800d2c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	e003      	b.n	800d2ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e001      	b.n	800d2ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3718      	adds	r7, #24
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b086      	sub	sp, #24
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d2da:	2300      	movs	r3, #0
 800d2dc:	60fb      	str	r3, [r7, #12]
 800d2de:	2300      	movs	r3, #0
 800d2e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f002 feb8 	bl	801005e <SDMMC_GetResponse>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d2f8:	d102      	bne.n	800d300 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d2fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d2fe:	e02f      	b.n	800d360 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d300:	f107 030c 	add.w	r3, r7, #12
 800d304:	4619      	mov	r1, r3
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f82e 	bl	800d368 <SD_FindSCR>
 800d30c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	e023      	b.n	800d360 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d01c      	beq.n	800d35c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d32a:	041b      	lsls	r3, r3, #16
 800d32c:	4619      	mov	r1, r3
 800d32e:	4610      	mov	r0, r2
 800d330:	f003 f821 	bl	8010376 <SDMMC_CmdAppCommand>
 800d334:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d001      	beq.n	800d340 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	e00f      	b.n	800d360 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2100      	movs	r1, #0
 800d346:	4618      	mov	r0, r3
 800d348:	f003 f858 	bl	80103fc <SDMMC_CmdBusWidth>
 800d34c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	e003      	b.n	800d360 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d358:	2300      	movs	r3, #0
 800d35a:	e001      	b.n	800d360 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d35c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b08e      	sub	sp, #56	@ 0x38
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d372:	f7f5 faff 	bl	8002974 <HAL_GetTick>
 800d376:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d378:	2300      	movs	r3, #0
 800d37a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d37c:	2300      	movs	r3, #0
 800d37e:	60bb      	str	r3, [r7, #8]
 800d380:	2300      	movs	r3, #0
 800d382:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2108      	movs	r1, #8
 800d38e:	4618      	mov	r0, r3
 800d390:	f002 fea4 	bl	80100dc <SDMMC_CmdBlockLength>
 800d394:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d001      	beq.n	800d3a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39e:	e0ad      	b.n	800d4fc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3a8:	041b      	lsls	r3, r3, #16
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	f002 ffe2 	bl	8010376 <SDMMC_CmdAppCommand>
 800d3b2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <SD_FindSCR+0x56>
  {
    return errorstate;
 800d3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3bc:	e09e      	b.n	800d4fc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3be:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d3c4:	2308      	movs	r3, #8
 800d3c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d3c8:	2330      	movs	r3, #48	@ 0x30
 800d3ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3cc:	2302      	movs	r3, #2
 800d3ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f107 0210 	add.w	r2, r7, #16
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f002 fe4e 	bl	8010084 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f003 f828 	bl	8010442 <SDMMC_CmdSendSCR>
 800d3f2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d027      	beq.n	800d44a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fc:	e07e      	b.n	800d4fc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d113      	bne.n	800d434 <SD_FindSCR+0xcc>
 800d40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d110      	bne.n	800d434 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4618      	mov	r0, r3
 800d418:	f002 fdac 	bl	800ff74 <SDMMC_ReadFIFO>
 800d41c:	4603      	mov	r3, r0
 800d41e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f002 fda5 	bl	800ff74 <SDMMC_ReadFIFO>
 800d42a:	4603      	mov	r3, r0
 800d42c:	60fb      	str	r3, [r7, #12]
      index++;
 800d42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d430:	3301      	adds	r3, #1
 800d432:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d434:	f7f5 fa9e 	bl	8002974 <HAL_GetTick>
 800d438:	4602      	mov	r2, r0
 800d43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d442:	d102      	bne.n	800d44a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d444:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d448:	e058      	b.n	800d4fc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d450:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d454:	4013      	ands	r3, r2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0d1      	beq.n	800d3fe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d460:	f003 0308 	and.w	r3, r3, #8
 800d464:	2b00      	cmp	r3, #0
 800d466:	d005      	beq.n	800d474 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2208      	movs	r2, #8
 800d46e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d470:	2308      	movs	r3, #8
 800d472:	e043      	b.n	800d4fc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d47a:	f003 0302 	and.w	r3, r3, #2
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d005      	beq.n	800d48e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2202      	movs	r2, #2
 800d488:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d48a:	2302      	movs	r3, #2
 800d48c:	e036      	b.n	800d4fc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d494:	f003 0320 	and.w	r3, r3, #32
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d005      	beq.n	800d4a8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2220      	movs	r2, #32
 800d4a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d4a4:	2320      	movs	r3, #32
 800d4a6:	e029      	b.n	800d4fc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a15      	ldr	r2, [pc, #84]	@ (800d504 <SD_FindSCR+0x19c>)
 800d4ae:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	061a      	lsls	r2, r3, #24
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	021b      	lsls	r3, r3, #8
 800d4b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d4bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	0a1b      	lsrs	r3, r3, #8
 800d4c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	0e1b      	lsrs	r3, r3, #24
 800d4cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d0:	601a      	str	r2, [r3, #0]
    scr++;
 800d4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	061a      	lsls	r2, r3, #24
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	021b      	lsls	r3, r3, #8
 800d4e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d4e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	0a1b      	lsrs	r3, r3, #8
 800d4ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d4ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	0e1b      	lsrs	r3, r3, #24
 800d4f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3738      	adds	r7, #56	@ 0x38
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	18000f3a 	.word	0x18000f3a

0800d508 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d514:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d51a:	2b1f      	cmp	r3, #31
 800d51c:	d936      	bls.n	800d58c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d51e:	2300      	movs	r3, #0
 800d520:	617b      	str	r3, [r7, #20]
 800d522:	e027      	b.n	800d574 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4618      	mov	r0, r3
 800d52a:	f002 fd23 	bl	800ff74 <SDMMC_ReadFIFO>
 800d52e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	b2da      	uxtb	r2, r3
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	3301      	adds	r3, #1
 800d53c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	0a1b      	lsrs	r3, r3, #8
 800d542:	b2da      	uxtb	r2, r3
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	3301      	adds	r3, #1
 800d54c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	0c1b      	lsrs	r3, r3, #16
 800d552:	b2da      	uxtb	r2, r3
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	3301      	adds	r3, #1
 800d55c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	0e1b      	lsrs	r3, r3, #24
 800d562:	b2da      	uxtb	r2, r3
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	3301      	adds	r3, #1
 800d56c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	3301      	adds	r3, #1
 800d572:	617b      	str	r3, [r7, #20]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	2b07      	cmp	r3, #7
 800d578:	d9d4      	bls.n	800d524 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	693a      	ldr	r2, [r7, #16]
 800d57e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d584:	f1a3 0220 	sub.w	r2, r3, #32
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d58c:	bf00      	nop
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	2b1f      	cmp	r3, #31
 800d5a8:	d93a      	bls.n	800d620 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	617b      	str	r3, [r7, #20]
 800d5ae:	e02b      	b.n	800d608 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	021a      	lsls	r2, r3, #8
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	041a      	lsls	r2, r3, #16
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	061a      	lsls	r2, r3, #24
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f107 020c 	add.w	r2, r7, #12
 800d5fa:	4611      	mov	r1, r2
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f002 fcc6 	bl	800ff8e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	3301      	adds	r3, #1
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2b07      	cmp	r3, #7
 800d60c:	d9d0      	bls.n	800d5b0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	693a      	ldr	r2, [r7, #16]
 800d612:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	f1a3 0220 	sub.w	r2, r3, #32
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	621a      	str	r2, [r3, #32]
  }
}
 800d620:	bf00      	nop
 800d622:	3718      	adds	r7, #24
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e049      	b.n	800d71e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d106      	bne.n	800d6a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7f4 fe66 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	f000 fc58 	bl	800df6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d728:	b480      	push	{r7}
 800d72a:	b085      	sub	sp, #20
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d736:	b2db      	uxtb	r3, r3
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d001      	beq.n	800d740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	e05e      	b.n	800d7fe <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2202      	movs	r2, #2
 800d744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68da      	ldr	r2, [r3, #12]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f042 0201 	orr.w	r2, r2, #1
 800d756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a2b      	ldr	r2, [pc, #172]	@ (800d80c <HAL_TIM_Base_Start_IT+0xe4>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d02c      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d76a:	d027      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a27      	ldr	r2, [pc, #156]	@ (800d810 <HAL_TIM_Base_Start_IT+0xe8>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d022      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a26      	ldr	r2, [pc, #152]	@ (800d814 <HAL_TIM_Base_Start_IT+0xec>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d01d      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a24      	ldr	r2, [pc, #144]	@ (800d818 <HAL_TIM_Base_Start_IT+0xf0>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d018      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a23      	ldr	r2, [pc, #140]	@ (800d81c <HAL_TIM_Base_Start_IT+0xf4>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d013      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a21      	ldr	r2, [pc, #132]	@ (800d820 <HAL_TIM_Base_Start_IT+0xf8>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d00e      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a20      	ldr	r2, [pc, #128]	@ (800d824 <HAL_TIM_Base_Start_IT+0xfc>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d009      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a1e      	ldr	r2, [pc, #120]	@ (800d828 <HAL_TIM_Base_Start_IT+0x100>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d004      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x94>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a1d      	ldr	r2, [pc, #116]	@ (800d82c <HAL_TIM_Base_Start_IT+0x104>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d115      	bne.n	800d7e8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	689a      	ldr	r2, [r3, #8]
 800d7c2:	4b1b      	ldr	r3, [pc, #108]	@ (800d830 <HAL_TIM_Base_Start_IT+0x108>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b06      	cmp	r3, #6
 800d7cc:	d015      	beq.n	800d7fa <HAL_TIM_Base_Start_IT+0xd2>
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7d4:	d011      	beq.n	800d7fa <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f042 0201 	orr.w	r2, r2, #1
 800d7e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7e6:	e008      	b.n	800d7fa <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f042 0201 	orr.w	r2, r2, #1
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	e000      	b.n	800d7fc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3714      	adds	r7, #20
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	40010000 	.word	0x40010000
 800d810:	40000400 	.word	0x40000400
 800d814:	40000800 	.word	0x40000800
 800d818:	40000c00 	.word	0x40000c00
 800d81c:	40010400 	.word	0x40010400
 800d820:	40001800 	.word	0x40001800
 800d824:	40014000 	.word	0x40014000
 800d828:	4000e000 	.word	0x4000e000
 800d82c:	4000e400 	.word	0x4000e400
 800d830:	00010007 	.word	0x00010007

0800d834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d101      	bne.n	800d846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d842:	2301      	movs	r3, #1
 800d844:	e049      	b.n	800d8da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f841 	bl	800d8e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2202      	movs	r2, #2
 800d864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	3304      	adds	r3, #4
 800d870:	4619      	mov	r1, r3
 800d872:	4610      	mov	r0, r2
 800d874:	f000 fb7a 	bl	800df6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d8e2:	b480      	push	{r7}
 800d8e4:	b083      	sub	sp, #12
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d8ea:	bf00      	nop
 800d8ec:	370c      	adds	r7, #12
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b084      	sub	sp, #16
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	f003 0302 	and.w	r3, r3, #2
 800d914:	2b00      	cmp	r3, #0
 800d916:	d020      	beq.n	800d95a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f003 0302 	and.w	r3, r3, #2
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d01b      	beq.n	800d95a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f06f 0202 	mvn.w	r2, #2
 800d92a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	f003 0303 	and.w	r3, r3, #3
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d003      	beq.n	800d948 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 faf5 	bl	800df30 <HAL_TIM_IC_CaptureCallback>
 800d946:	e005      	b.n	800d954 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 fae7 	bl	800df1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 faf8 	bl	800df44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	f003 0304 	and.w	r3, r3, #4
 800d960:	2b00      	cmp	r3, #0
 800d962:	d020      	beq.n	800d9a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f003 0304 	and.w	r3, r3, #4
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d01b      	beq.n	800d9a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f06f 0204 	mvn.w	r2, #4
 800d976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2202      	movs	r2, #2
 800d97c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	699b      	ldr	r3, [r3, #24]
 800d984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 facf 	bl	800df30 <HAL_TIM_IC_CaptureCallback>
 800d992:	e005      	b.n	800d9a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 fac1 	bl	800df1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 fad2 	bl	800df44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	f003 0308 	and.w	r3, r3, #8
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d020      	beq.n	800d9f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f003 0308 	and.w	r3, r3, #8
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d01b      	beq.n	800d9f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f06f 0208 	mvn.w	r2, #8
 800d9c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2204      	movs	r2, #4
 800d9c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	69db      	ldr	r3, [r3, #28]
 800d9d0:	f003 0303 	and.w	r3, r3, #3
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d003      	beq.n	800d9e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 faa9 	bl	800df30 <HAL_TIM_IC_CaptureCallback>
 800d9de:	e005      	b.n	800d9ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 fa9b 	bl	800df1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 faac 	bl	800df44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	f003 0310 	and.w	r3, r3, #16
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d020      	beq.n	800da3e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f003 0310 	and.w	r3, r3, #16
 800da02:	2b00      	cmp	r3, #0
 800da04:	d01b      	beq.n	800da3e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f06f 0210 	mvn.w	r2, #16
 800da0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2208      	movs	r2, #8
 800da14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	69db      	ldr	r3, [r3, #28]
 800da1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da20:	2b00      	cmp	r3, #0
 800da22:	d003      	beq.n	800da2c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 fa83 	bl	800df30 <HAL_TIM_IC_CaptureCallback>
 800da2a:	e005      	b.n	800da38 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 fa75 	bl	800df1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 fa86 	bl	800df44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00c      	beq.n	800da62 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d007      	beq.n	800da62 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f06f 0201 	mvn.w	r2, #1
 800da5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7f4 f823 	bl	8001aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d104      	bne.n	800da76 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00c      	beq.n	800da90 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d007      	beq.n	800da90 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800da88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 ffc6 	bl	800ea1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00c      	beq.n	800dab4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d007      	beq.n	800dab4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800daac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 ffbe 	bl	800ea30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00c      	beq.n	800dad8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d007      	beq.n	800dad8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fa40 	bl	800df58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	f003 0320 	and.w	r3, r3, #32
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00c      	beq.n	800dafc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f003 0320 	and.w	r3, r3, #32
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d007      	beq.n	800dafc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f06f 0220 	mvn.w	r2, #32
 800daf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 ff86 	bl	800ea08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dafc:	bf00      	nop
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d101      	bne.n	800db22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db1e:	2302      	movs	r3, #2
 800db20:	e0ff      	b.n	800dd22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b14      	cmp	r3, #20
 800db2e:	f200 80f0 	bhi.w	800dd12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db32:	a201      	add	r2, pc, #4	@ (adr r2, 800db38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db38:	0800db8d 	.word	0x0800db8d
 800db3c:	0800dd13 	.word	0x0800dd13
 800db40:	0800dd13 	.word	0x0800dd13
 800db44:	0800dd13 	.word	0x0800dd13
 800db48:	0800dbcd 	.word	0x0800dbcd
 800db4c:	0800dd13 	.word	0x0800dd13
 800db50:	0800dd13 	.word	0x0800dd13
 800db54:	0800dd13 	.word	0x0800dd13
 800db58:	0800dc0f 	.word	0x0800dc0f
 800db5c:	0800dd13 	.word	0x0800dd13
 800db60:	0800dd13 	.word	0x0800dd13
 800db64:	0800dd13 	.word	0x0800dd13
 800db68:	0800dc4f 	.word	0x0800dc4f
 800db6c:	0800dd13 	.word	0x0800dd13
 800db70:	0800dd13 	.word	0x0800dd13
 800db74:	0800dd13 	.word	0x0800dd13
 800db78:	0800dc91 	.word	0x0800dc91
 800db7c:	0800dd13 	.word	0x0800dd13
 800db80:	0800dd13 	.word	0x0800dd13
 800db84:	0800dd13 	.word	0x0800dd13
 800db88:	0800dcd1 	.word	0x0800dcd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68b9      	ldr	r1, [r7, #8]
 800db92:	4618      	mov	r0, r3
 800db94:	f000 fa9c 	bl	800e0d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	699a      	ldr	r2, [r3, #24]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f042 0208 	orr.w	r2, r2, #8
 800dba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	699a      	ldr	r2, [r3, #24]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f022 0204 	bic.w	r2, r2, #4
 800dbb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6999      	ldr	r1, [r3, #24]
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	691a      	ldr	r2, [r3, #16]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	619a      	str	r2, [r3, #24]
      break;
 800dbca:	e0a5      	b.n	800dd18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68b9      	ldr	r1, [r7, #8]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 fb0c 	bl	800e1f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	699a      	ldr	r2, [r3, #24]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	699a      	ldr	r2, [r3, #24]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	6999      	ldr	r1, [r3, #24]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	021a      	lsls	r2, r3, #8
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	430a      	orrs	r2, r1
 800dc0a:	619a      	str	r2, [r3, #24]
      break;
 800dc0c:	e084      	b.n	800dd18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	68b9      	ldr	r1, [r7, #8]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f000 fb75 	bl	800e304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	69da      	ldr	r2, [r3, #28]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f042 0208 	orr.w	r2, r2, #8
 800dc28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	69da      	ldr	r2, [r3, #28]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f022 0204 	bic.w	r2, r2, #4
 800dc38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	69d9      	ldr	r1, [r3, #28]
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	691a      	ldr	r2, [r3, #16]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	430a      	orrs	r2, r1
 800dc4a:	61da      	str	r2, [r3, #28]
      break;
 800dc4c:	e064      	b.n	800dd18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68b9      	ldr	r1, [r7, #8]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fbdd 	bl	800e414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	69da      	ldr	r2, [r3, #28]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	69da      	ldr	r2, [r3, #28]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	69d9      	ldr	r1, [r3, #28]
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	021a      	lsls	r2, r3, #8
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	430a      	orrs	r2, r1
 800dc8c:	61da      	str	r2, [r3, #28]
      break;
 800dc8e:	e043      	b.n	800dd18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68b9      	ldr	r1, [r7, #8]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 fc26 	bl	800e4e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f042 0208 	orr.w	r2, r2, #8
 800dcaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f022 0204 	bic.w	r2, r2, #4
 800dcba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	691a      	ldr	r2, [r3, #16]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	430a      	orrs	r2, r1
 800dccc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dcce:	e023      	b.n	800dd18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68b9      	ldr	r1, [r7, #8]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fc6a 	bl	800e5b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dcea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dcfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	021a      	lsls	r2, r3, #8
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	430a      	orrs	r2, r1
 800dd0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd10:	e002      	b.n	800dd18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	75fb      	strb	r3, [r7, #23]
      break;
 800dd16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dd20:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop

0800dd2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d101      	bne.n	800dd48 <HAL_TIM_ConfigClockSource+0x1c>
 800dd44:	2302      	movs	r3, #2
 800dd46:	e0dc      	b.n	800df02 <HAL_TIM_ConfigClockSource+0x1d6>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2202      	movs	r2, #2
 800dd54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	4b6a      	ldr	r3, [pc, #424]	@ (800df0c <HAL_TIM_ConfigClockSource+0x1e0>)
 800dd64:	4013      	ands	r3, r2
 800dd66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a64      	ldr	r2, [pc, #400]	@ (800df10 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	f000 80a9 	beq.w	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dd84:	4a62      	ldr	r2, [pc, #392]	@ (800df10 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	f200 80ae 	bhi.w	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dd8c:	4a61      	ldr	r2, [pc, #388]	@ (800df14 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	f000 80a1 	beq.w	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dd94:	4a5f      	ldr	r2, [pc, #380]	@ (800df14 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	f200 80a6 	bhi.w	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dd9c:	4a5e      	ldr	r2, [pc, #376]	@ (800df18 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	f000 8099 	beq.w	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dda4:	4a5c      	ldr	r2, [pc, #368]	@ (800df18 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	f200 809e 	bhi.w	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ddb0:	f000 8091 	beq.w	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ddb8:	f200 8096 	bhi.w	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddc0:	f000 8089 	beq.w	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddc8:	f200 808e 	bhi.w	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddd0:	d03e      	beq.n	800de50 <HAL_TIM_ConfigClockSource+0x124>
 800ddd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddd6:	f200 8087 	bhi.w	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddde:	f000 8086 	beq.w	800deee <HAL_TIM_ConfigClockSource+0x1c2>
 800dde2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dde6:	d87f      	bhi.n	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dde8:	2b70      	cmp	r3, #112	@ 0x70
 800ddea:	d01a      	beq.n	800de22 <HAL_TIM_ConfigClockSource+0xf6>
 800ddec:	2b70      	cmp	r3, #112	@ 0x70
 800ddee:	d87b      	bhi.n	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddf0:	2b60      	cmp	r3, #96	@ 0x60
 800ddf2:	d050      	beq.n	800de96 <HAL_TIM_ConfigClockSource+0x16a>
 800ddf4:	2b60      	cmp	r3, #96	@ 0x60
 800ddf6:	d877      	bhi.n	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddf8:	2b50      	cmp	r3, #80	@ 0x50
 800ddfa:	d03c      	beq.n	800de76 <HAL_TIM_ConfigClockSource+0x14a>
 800ddfc:	2b50      	cmp	r3, #80	@ 0x50
 800ddfe:	d873      	bhi.n	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800de00:	2b40      	cmp	r3, #64	@ 0x40
 800de02:	d058      	beq.n	800deb6 <HAL_TIM_ConfigClockSource+0x18a>
 800de04:	2b40      	cmp	r3, #64	@ 0x40
 800de06:	d86f      	bhi.n	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800de08:	2b30      	cmp	r3, #48	@ 0x30
 800de0a:	d064      	beq.n	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800de0c:	2b30      	cmp	r3, #48	@ 0x30
 800de0e:	d86b      	bhi.n	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800de10:	2b20      	cmp	r3, #32
 800de12:	d060      	beq.n	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800de14:	2b20      	cmp	r3, #32
 800de16:	d867      	bhi.n	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d05c      	beq.n	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800de1c:	2b10      	cmp	r3, #16
 800de1e:	d05a      	beq.n	800ded6 <HAL_TIM_ConfigClockSource+0x1aa>
 800de20:	e062      	b.n	800dee8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de32:	f000 fca1 	bl	800e778 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800de44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	609a      	str	r2, [r3, #8]
      break;
 800de4e:	e04f      	b.n	800def0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800de60:	f000 fc8a 	bl	800e778 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	689a      	ldr	r2, [r3, #8]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800de72:	609a      	str	r2, [r3, #8]
      break;
 800de74:	e03c      	b.n	800def0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800de82:	461a      	mov	r2, r3
 800de84:	f000 fbfa 	bl	800e67c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2150      	movs	r1, #80	@ 0x50
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 fc54 	bl	800e73c <TIM_ITRx_SetConfig>
      break;
 800de94:	e02c      	b.n	800def0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dea2:	461a      	mov	r2, r3
 800dea4:	f000 fc19 	bl	800e6da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	2160      	movs	r1, #96	@ 0x60
 800deae:	4618      	mov	r0, r3
 800deb0:	f000 fc44 	bl	800e73c <TIM_ITRx_SetConfig>
      break;
 800deb4:	e01c      	b.n	800def0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dec2:	461a      	mov	r2, r3
 800dec4:	f000 fbda 	bl	800e67c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2140      	movs	r1, #64	@ 0x40
 800dece:	4618      	mov	r0, r3
 800ded0:	f000 fc34 	bl	800e73c <TIM_ITRx_SetConfig>
      break;
 800ded4:	e00c      	b.n	800def0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4619      	mov	r1, r3
 800dee0:	4610      	mov	r0, r2
 800dee2:	f000 fc2b 	bl	800e73c <TIM_ITRx_SetConfig>
      break;
 800dee6:	e003      	b.n	800def0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	73fb      	strb	r3, [r7, #15]
      break;
 800deec:	e000      	b.n	800def0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800deee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2201      	movs	r2, #1
 800def4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df00:	7bfb      	ldrb	r3, [r7, #15]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	ffceff88 	.word	0xffceff88
 800df10:	00100040 	.word	0x00100040
 800df14:	00100030 	.word	0x00100030
 800df18:	00100020 	.word	0x00100020

0800df1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df24:	bf00      	nop
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df38:	bf00      	nop
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df4c:	bf00      	nop
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b085      	sub	sp, #20
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a4a      	ldr	r2, [pc, #296]	@ (800e0a8 <TIM_Base_SetConfig+0x13c>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d013      	beq.n	800dfac <TIM_Base_SetConfig+0x40>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df8a:	d00f      	beq.n	800dfac <TIM_Base_SetConfig+0x40>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a47      	ldr	r2, [pc, #284]	@ (800e0ac <TIM_Base_SetConfig+0x140>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d00b      	beq.n	800dfac <TIM_Base_SetConfig+0x40>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a46      	ldr	r2, [pc, #280]	@ (800e0b0 <TIM_Base_SetConfig+0x144>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d007      	beq.n	800dfac <TIM_Base_SetConfig+0x40>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a45      	ldr	r2, [pc, #276]	@ (800e0b4 <TIM_Base_SetConfig+0x148>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d003      	beq.n	800dfac <TIM_Base_SetConfig+0x40>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a44      	ldr	r2, [pc, #272]	@ (800e0b8 <TIM_Base_SetConfig+0x14c>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d108      	bne.n	800dfbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4a39      	ldr	r2, [pc, #228]	@ (800e0a8 <TIM_Base_SetConfig+0x13c>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d027      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfcc:	d023      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4a36      	ldr	r2, [pc, #216]	@ (800e0ac <TIM_Base_SetConfig+0x140>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d01f      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4a35      	ldr	r2, [pc, #212]	@ (800e0b0 <TIM_Base_SetConfig+0x144>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d01b      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a34      	ldr	r2, [pc, #208]	@ (800e0b4 <TIM_Base_SetConfig+0x148>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d017      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4a33      	ldr	r2, [pc, #204]	@ (800e0b8 <TIM_Base_SetConfig+0x14c>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d013      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a32      	ldr	r2, [pc, #200]	@ (800e0bc <TIM_Base_SetConfig+0x150>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d00f      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a31      	ldr	r2, [pc, #196]	@ (800e0c0 <TIM_Base_SetConfig+0x154>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d00b      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a30      	ldr	r2, [pc, #192]	@ (800e0c4 <TIM_Base_SetConfig+0x158>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d007      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4a2f      	ldr	r2, [pc, #188]	@ (800e0c8 <TIM_Base_SetConfig+0x15c>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d003      	beq.n	800e016 <TIM_Base_SetConfig+0xaa>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a2e      	ldr	r2, [pc, #184]	@ (800e0cc <TIM_Base_SetConfig+0x160>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d108      	bne.n	800e028 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e01c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	4313      	orrs	r3, r2
 800e026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	695b      	ldr	r3, [r3, #20]
 800e032:	4313      	orrs	r3, r2
 800e034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	689a      	ldr	r2, [r3, #8]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4a16      	ldr	r2, [pc, #88]	@ (800e0a8 <TIM_Base_SetConfig+0x13c>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d00f      	beq.n	800e074 <TIM_Base_SetConfig+0x108>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4a18      	ldr	r2, [pc, #96]	@ (800e0b8 <TIM_Base_SetConfig+0x14c>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d00b      	beq.n	800e074 <TIM_Base_SetConfig+0x108>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	4a17      	ldr	r2, [pc, #92]	@ (800e0bc <TIM_Base_SetConfig+0x150>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d007      	beq.n	800e074 <TIM_Base_SetConfig+0x108>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a16      	ldr	r2, [pc, #88]	@ (800e0c0 <TIM_Base_SetConfig+0x154>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d003      	beq.n	800e074 <TIM_Base_SetConfig+0x108>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4a15      	ldr	r2, [pc, #84]	@ (800e0c4 <TIM_Base_SetConfig+0x158>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d103      	bne.n	800e07c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	691a      	ldr	r2, [r3, #16]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d105      	bne.n	800e09a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	691b      	ldr	r3, [r3, #16]
 800e092:	f023 0201 	bic.w	r2, r3, #1
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	611a      	str	r2, [r3, #16]
  }
}
 800e09a:	bf00      	nop
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	40010000 	.word	0x40010000
 800e0ac:	40000400 	.word	0x40000400
 800e0b0:	40000800 	.word	0x40000800
 800e0b4:	40000c00 	.word	0x40000c00
 800e0b8:	40010400 	.word	0x40010400
 800e0bc:	40014000 	.word	0x40014000
 800e0c0:	40014400 	.word	0x40014400
 800e0c4:	40014800 	.word	0x40014800
 800e0c8:	4000e000 	.word	0x4000e000
 800e0cc:	4000e400 	.word	0x4000e400

0800e0d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b087      	sub	sp, #28
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a1b      	ldr	r3, [r3, #32]
 800e0e4:	f023 0201 	bic.w	r2, r3, #1
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	4b37      	ldr	r3, [pc, #220]	@ (800e1d8 <TIM_OC1_SetConfig+0x108>)
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f023 0303 	bic.w	r3, r3, #3
 800e106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	4313      	orrs	r3, r2
 800e110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f023 0302 	bic.w	r3, r3, #2
 800e118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	4313      	orrs	r3, r2
 800e122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a2d      	ldr	r2, [pc, #180]	@ (800e1dc <TIM_OC1_SetConfig+0x10c>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d00f      	beq.n	800e14c <TIM_OC1_SetConfig+0x7c>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a2c      	ldr	r2, [pc, #176]	@ (800e1e0 <TIM_OC1_SetConfig+0x110>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d00b      	beq.n	800e14c <TIM_OC1_SetConfig+0x7c>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a2b      	ldr	r2, [pc, #172]	@ (800e1e4 <TIM_OC1_SetConfig+0x114>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d007      	beq.n	800e14c <TIM_OC1_SetConfig+0x7c>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a2a      	ldr	r2, [pc, #168]	@ (800e1e8 <TIM_OC1_SetConfig+0x118>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d003      	beq.n	800e14c <TIM_OC1_SetConfig+0x7c>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a29      	ldr	r2, [pc, #164]	@ (800e1ec <TIM_OC1_SetConfig+0x11c>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d10c      	bne.n	800e166 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	f023 0308 	bic.w	r3, r3, #8
 800e152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f023 0304 	bic.w	r3, r3, #4
 800e164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a1c      	ldr	r2, [pc, #112]	@ (800e1dc <TIM_OC1_SetConfig+0x10c>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d00f      	beq.n	800e18e <TIM_OC1_SetConfig+0xbe>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4a1b      	ldr	r2, [pc, #108]	@ (800e1e0 <TIM_OC1_SetConfig+0x110>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d00b      	beq.n	800e18e <TIM_OC1_SetConfig+0xbe>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a1a      	ldr	r2, [pc, #104]	@ (800e1e4 <TIM_OC1_SetConfig+0x114>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d007      	beq.n	800e18e <TIM_OC1_SetConfig+0xbe>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a19      	ldr	r2, [pc, #100]	@ (800e1e8 <TIM_OC1_SetConfig+0x118>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d003      	beq.n	800e18e <TIM_OC1_SetConfig+0xbe>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a18      	ldr	r2, [pc, #96]	@ (800e1ec <TIM_OC1_SetConfig+0x11c>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d111      	bne.n	800e1b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e19c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	695b      	ldr	r3, [r3, #20]
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	693a      	ldr	r2, [r7, #16]
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	693a      	ldr	r2, [r7, #16]
 800e1b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	685a      	ldr	r2, [r3, #4]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	621a      	str	r2, [r3, #32]
}
 800e1cc:	bf00      	nop
 800e1ce:	371c      	adds	r7, #28
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	fffeff8f 	.word	0xfffeff8f
 800e1dc:	40010000 	.word	0x40010000
 800e1e0:	40010400 	.word	0x40010400
 800e1e4:	40014000 	.word	0x40014000
 800e1e8:	40014400 	.word	0x40014400
 800e1ec:	40014800 	.word	0x40014800

0800e1f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b087      	sub	sp, #28
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a1b      	ldr	r3, [r3, #32]
 800e204:	f023 0210 	bic.w	r2, r3, #16
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	4b34      	ldr	r3, [pc, #208]	@ (800e2ec <TIM_OC2_SetConfig+0xfc>)
 800e21c:	4013      	ands	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	021b      	lsls	r3, r3, #8
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	4313      	orrs	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f023 0320 	bic.w	r3, r3, #32
 800e23a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	011b      	lsls	r3, r3, #4
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	4313      	orrs	r3, r2
 800e246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a29      	ldr	r2, [pc, #164]	@ (800e2f0 <TIM_OC2_SetConfig+0x100>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d003      	beq.n	800e258 <TIM_OC2_SetConfig+0x68>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	4a28      	ldr	r2, [pc, #160]	@ (800e2f4 <TIM_OC2_SetConfig+0x104>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d10d      	bne.n	800e274 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e25e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	011b      	lsls	r3, r3, #4
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	4313      	orrs	r3, r2
 800e26a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a1e      	ldr	r2, [pc, #120]	@ (800e2f0 <TIM_OC2_SetConfig+0x100>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d00f      	beq.n	800e29c <TIM_OC2_SetConfig+0xac>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a1d      	ldr	r2, [pc, #116]	@ (800e2f4 <TIM_OC2_SetConfig+0x104>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d00b      	beq.n	800e29c <TIM_OC2_SetConfig+0xac>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4a1c      	ldr	r2, [pc, #112]	@ (800e2f8 <TIM_OC2_SetConfig+0x108>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d007      	beq.n	800e29c <TIM_OC2_SetConfig+0xac>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4a1b      	ldr	r2, [pc, #108]	@ (800e2fc <TIM_OC2_SetConfig+0x10c>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d003      	beq.n	800e29c <TIM_OC2_SetConfig+0xac>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4a1a      	ldr	r2, [pc, #104]	@ (800e300 <TIM_OC2_SetConfig+0x110>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d113      	bne.n	800e2c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	695b      	ldr	r3, [r3, #20]
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	693a      	ldr	r2, [r7, #16]
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	693a      	ldr	r2, [r7, #16]
 800e2c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	697a      	ldr	r2, [r7, #20]
 800e2dc:	621a      	str	r2, [r3, #32]
}
 800e2de:	bf00      	nop
 800e2e0:	371c      	adds	r7, #28
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr
 800e2ea:	bf00      	nop
 800e2ec:	feff8fff 	.word	0xfeff8fff
 800e2f0:	40010000 	.word	0x40010000
 800e2f4:	40010400 	.word	0x40010400
 800e2f8:	40014000 	.word	0x40014000
 800e2fc:	40014400 	.word	0x40014400
 800e300:	40014800 	.word	0x40014800

0800e304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e304:	b480      	push	{r7}
 800e306:	b087      	sub	sp, #28
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6a1b      	ldr	r3, [r3, #32]
 800e312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a1b      	ldr	r3, [r3, #32]
 800e318:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	4b33      	ldr	r3, [pc, #204]	@ (800e3fc <TIM_OC3_SetConfig+0xf8>)
 800e330:	4013      	ands	r3, r2
 800e332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f023 0303 	bic.w	r3, r3, #3
 800e33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	4313      	orrs	r3, r2
 800e344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	021b      	lsls	r3, r3, #8
 800e354:	697a      	ldr	r2, [r7, #20]
 800e356:	4313      	orrs	r3, r2
 800e358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a28      	ldr	r2, [pc, #160]	@ (800e400 <TIM_OC3_SetConfig+0xfc>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d003      	beq.n	800e36a <TIM_OC3_SetConfig+0x66>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4a27      	ldr	r2, [pc, #156]	@ (800e404 <TIM_OC3_SetConfig+0x100>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d10d      	bne.n	800e386 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	021b      	lsls	r3, r3, #8
 800e378:	697a      	ldr	r2, [r7, #20]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a1d      	ldr	r2, [pc, #116]	@ (800e400 <TIM_OC3_SetConfig+0xfc>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d00f      	beq.n	800e3ae <TIM_OC3_SetConfig+0xaa>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4a1c      	ldr	r2, [pc, #112]	@ (800e404 <TIM_OC3_SetConfig+0x100>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d00b      	beq.n	800e3ae <TIM_OC3_SetConfig+0xaa>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a1b      	ldr	r2, [pc, #108]	@ (800e408 <TIM_OC3_SetConfig+0x104>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d007      	beq.n	800e3ae <TIM_OC3_SetConfig+0xaa>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a1a      	ldr	r2, [pc, #104]	@ (800e40c <TIM_OC3_SetConfig+0x108>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d003      	beq.n	800e3ae <TIM_OC3_SetConfig+0xaa>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a19      	ldr	r2, [pc, #100]	@ (800e410 <TIM_OC3_SetConfig+0x10c>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d113      	bne.n	800e3d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e3bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	011b      	lsls	r3, r3, #4
 800e3d0:	693a      	ldr	r2, [r7, #16]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	621a      	str	r2, [r3, #32]
}
 800e3f0:	bf00      	nop
 800e3f2:	371c      	adds	r7, #28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	fffeff8f 	.word	0xfffeff8f
 800e400:	40010000 	.word	0x40010000
 800e404:	40010400 	.word	0x40010400
 800e408:	40014000 	.word	0x40014000
 800e40c:	40014400 	.word	0x40014400
 800e410:	40014800 	.word	0x40014800

0800e414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e414:	b480      	push	{r7}
 800e416:	b087      	sub	sp, #28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a1b      	ldr	r3, [r3, #32]
 800e422:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a1b      	ldr	r3, [r3, #32]
 800e428:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	69db      	ldr	r3, [r3, #28]
 800e43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	4b24      	ldr	r3, [pc, #144]	@ (800e4d0 <TIM_OC4_SetConfig+0xbc>)
 800e440:	4013      	ands	r3, r2
 800e442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e44a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	021b      	lsls	r3, r3, #8
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	4313      	orrs	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e45e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	031b      	lsls	r3, r3, #12
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	4313      	orrs	r3, r2
 800e46a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4a19      	ldr	r2, [pc, #100]	@ (800e4d4 <TIM_OC4_SetConfig+0xc0>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d00f      	beq.n	800e494 <TIM_OC4_SetConfig+0x80>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a18      	ldr	r2, [pc, #96]	@ (800e4d8 <TIM_OC4_SetConfig+0xc4>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d00b      	beq.n	800e494 <TIM_OC4_SetConfig+0x80>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a17      	ldr	r2, [pc, #92]	@ (800e4dc <TIM_OC4_SetConfig+0xc8>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d007      	beq.n	800e494 <TIM_OC4_SetConfig+0x80>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4a16      	ldr	r2, [pc, #88]	@ (800e4e0 <TIM_OC4_SetConfig+0xcc>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d003      	beq.n	800e494 <TIM_OC4_SetConfig+0x80>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	4a15      	ldr	r2, [pc, #84]	@ (800e4e4 <TIM_OC4_SetConfig+0xd0>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d109      	bne.n	800e4a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e49a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	019b      	lsls	r3, r3, #6
 800e4a2:	697a      	ldr	r2, [r7, #20]
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	697a      	ldr	r2, [r7, #20]
 800e4ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	685a      	ldr	r2, [r3, #4]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	693a      	ldr	r2, [r7, #16]
 800e4c0:	621a      	str	r2, [r3, #32]
}
 800e4c2:	bf00      	nop
 800e4c4:	371c      	adds	r7, #28
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	feff8fff 	.word	0xfeff8fff
 800e4d4:	40010000 	.word	0x40010000
 800e4d8:	40010400 	.word	0x40010400
 800e4dc:	40014000 	.word	0x40014000
 800e4e0:	40014400 	.word	0x40014400
 800e4e4:	40014800 	.word	0x40014800

0800e4e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a1b      	ldr	r3, [r3, #32]
 800e4f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a1b      	ldr	r3, [r3, #32]
 800e4fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	4b21      	ldr	r3, [pc, #132]	@ (800e598 <TIM_OC5_SetConfig+0xb0>)
 800e514:	4013      	ands	r3, r2
 800e516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	4313      	orrs	r3, r2
 800e520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e528:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	041b      	lsls	r3, r3, #16
 800e530:	693a      	ldr	r2, [r7, #16]
 800e532:	4313      	orrs	r3, r2
 800e534:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a18      	ldr	r2, [pc, #96]	@ (800e59c <TIM_OC5_SetConfig+0xb4>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d00f      	beq.n	800e55e <TIM_OC5_SetConfig+0x76>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a17      	ldr	r2, [pc, #92]	@ (800e5a0 <TIM_OC5_SetConfig+0xb8>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d00b      	beq.n	800e55e <TIM_OC5_SetConfig+0x76>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4a16      	ldr	r2, [pc, #88]	@ (800e5a4 <TIM_OC5_SetConfig+0xbc>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d007      	beq.n	800e55e <TIM_OC5_SetConfig+0x76>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a15      	ldr	r2, [pc, #84]	@ (800e5a8 <TIM_OC5_SetConfig+0xc0>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d003      	beq.n	800e55e <TIM_OC5_SetConfig+0x76>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4a14      	ldr	r2, [pc, #80]	@ (800e5ac <TIM_OC5_SetConfig+0xc4>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d109      	bne.n	800e572 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e564:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	695b      	ldr	r3, [r3, #20]
 800e56a:	021b      	lsls	r3, r3, #8
 800e56c:	697a      	ldr	r2, [r7, #20]
 800e56e:	4313      	orrs	r3, r2
 800e570:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	697a      	ldr	r2, [r7, #20]
 800e576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	685a      	ldr	r2, [r3, #4]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	693a      	ldr	r2, [r7, #16]
 800e58a:	621a      	str	r2, [r3, #32]
}
 800e58c:	bf00      	nop
 800e58e:	371c      	adds	r7, #28
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr
 800e598:	fffeff8f 	.word	0xfffeff8f
 800e59c:	40010000 	.word	0x40010000
 800e5a0:	40010400 	.word	0x40010400
 800e5a4:	40014000 	.word	0x40014000
 800e5a8:	40014400 	.word	0x40014400
 800e5ac:	40014800 	.word	0x40014800

0800e5b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b087      	sub	sp, #28
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a1b      	ldr	r3, [r3, #32]
 800e5be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a1b      	ldr	r3, [r3, #32]
 800e5c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	4b22      	ldr	r3, [pc, #136]	@ (800e664 <TIM_OC6_SetConfig+0xb4>)
 800e5dc:	4013      	ands	r3, r2
 800e5de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	021b      	lsls	r3, r3, #8
 800e5e6:	68fa      	ldr	r2, [r7, #12]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e5f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	051b      	lsls	r3, r3, #20
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4a19      	ldr	r2, [pc, #100]	@ (800e668 <TIM_OC6_SetConfig+0xb8>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d00f      	beq.n	800e628 <TIM_OC6_SetConfig+0x78>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4a18      	ldr	r2, [pc, #96]	@ (800e66c <TIM_OC6_SetConfig+0xbc>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d00b      	beq.n	800e628 <TIM_OC6_SetConfig+0x78>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	4a17      	ldr	r2, [pc, #92]	@ (800e670 <TIM_OC6_SetConfig+0xc0>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d007      	beq.n	800e628 <TIM_OC6_SetConfig+0x78>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4a16      	ldr	r2, [pc, #88]	@ (800e674 <TIM_OC6_SetConfig+0xc4>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d003      	beq.n	800e628 <TIM_OC6_SetConfig+0x78>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4a15      	ldr	r2, [pc, #84]	@ (800e678 <TIM_OC6_SetConfig+0xc8>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d109      	bne.n	800e63c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e62e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	695b      	ldr	r3, [r3, #20]
 800e634:	029b      	lsls	r3, r3, #10
 800e636:	697a      	ldr	r2, [r7, #20]
 800e638:	4313      	orrs	r3, r2
 800e63a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	697a      	ldr	r2, [r7, #20]
 800e640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	621a      	str	r2, [r3, #32]
}
 800e656:	bf00      	nop
 800e658:	371c      	adds	r7, #28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop
 800e664:	feff8fff 	.word	0xfeff8fff
 800e668:	40010000 	.word	0x40010000
 800e66c:	40010400 	.word	0x40010400
 800e670:	40014000 	.word	0x40014000
 800e674:	40014400 	.word	0x40014400
 800e678:	40014800 	.word	0x40014800

0800e67c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b087      	sub	sp, #28
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6a1b      	ldr	r3, [r3, #32]
 800e68c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6a1b      	ldr	r3, [r3, #32]
 800e692:	f023 0201 	bic.w	r2, r3, #1
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	699b      	ldr	r3, [r3, #24]
 800e69e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e6a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	011b      	lsls	r3, r3, #4
 800e6ac:	693a      	ldr	r2, [r7, #16]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	f023 030a 	bic.w	r3, r3, #10
 800e6b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6ba:	697a      	ldr	r2, [r7, #20]
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	693a      	ldr	r2, [r7, #16]
 800e6c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	697a      	ldr	r2, [r7, #20]
 800e6cc:	621a      	str	r2, [r3, #32]
}
 800e6ce:	bf00      	nop
 800e6d0:	371c      	adds	r7, #28
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr

0800e6da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6da:	b480      	push	{r7}
 800e6dc:	b087      	sub	sp, #28
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	60f8      	str	r0, [r7, #12]
 800e6e2:	60b9      	str	r1, [r7, #8]
 800e6e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6a1b      	ldr	r3, [r3, #32]
 800e6ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6a1b      	ldr	r3, [r3, #32]
 800e6f0:	f023 0210 	bic.w	r2, r3, #16
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	699b      	ldr	r3, [r3, #24]
 800e6fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	031b      	lsls	r3, r3, #12
 800e70a:	693a      	ldr	r2, [r7, #16]
 800e70c:	4313      	orrs	r3, r2
 800e70e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	011b      	lsls	r3, r3, #4
 800e71c:	697a      	ldr	r2, [r7, #20]
 800e71e:	4313      	orrs	r3, r2
 800e720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	693a      	ldr	r2, [r7, #16]
 800e726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	697a      	ldr	r2, [r7, #20]
 800e72c:	621a      	str	r2, [r3, #32]
}
 800e72e:	bf00      	nop
 800e730:	371c      	adds	r7, #28
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
	...

0800e73c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	689b      	ldr	r3, [r3, #8]
 800e74a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	4b09      	ldr	r3, [pc, #36]	@ (800e774 <TIM_ITRx_SetConfig+0x38>)
 800e750:	4013      	ands	r3, r2
 800e752:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e754:	683a      	ldr	r2, [r7, #0]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	4313      	orrs	r3, r2
 800e75a:	f043 0307 	orr.w	r3, r3, #7
 800e75e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	609a      	str	r2, [r3, #8]
}
 800e766:	bf00      	nop
 800e768:	3714      	adds	r7, #20
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	ffcfff8f 	.word	0xffcfff8f

0800e778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e778:	b480      	push	{r7}
 800e77a:	b087      	sub	sp, #28
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	021a      	lsls	r2, r3, #8
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	431a      	orrs	r2, r3
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	609a      	str	r2, [r3, #8]
}
 800e7ac:	bf00      	nop
 800e7ae:	371c      	adds	r7, #28
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d101      	bne.n	800e7d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	e077      	b.n	800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2202      	movs	r2, #2
 800e7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a35      	ldr	r2, [pc, #212]	@ (800e8cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d004      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a34      	ldr	r2, [pc, #208]	@ (800e8d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d108      	bne.n	800e816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e80a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	4313      	orrs	r3, r2
 800e814:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e81c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	4313      	orrs	r3, r2
 800e826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a25      	ldr	r2, [pc, #148]	@ (800e8cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d02c      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e842:	d027      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a22      	ldr	r2, [pc, #136]	@ (800e8d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d022      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a21      	ldr	r2, [pc, #132]	@ (800e8d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d01d      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a1f      	ldr	r2, [pc, #124]	@ (800e8dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d018      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a1a      	ldr	r2, [pc, #104]	@ (800e8d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d013      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a1b      	ldr	r2, [pc, #108]	@ (800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d00e      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a1a      	ldr	r2, [pc, #104]	@ (800e8e4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d009      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a18      	ldr	r2, [pc, #96]	@ (800e8e8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d004      	beq.n	800e894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a17      	ldr	r2, [pc, #92]	@ (800e8ec <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d10c      	bne.n	800e8ae <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e89a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	689b      	ldr	r3, [r3, #8]
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	40010000 	.word	0x40010000
 800e8d0:	40010400 	.word	0x40010400
 800e8d4:	40000400 	.word	0x40000400
 800e8d8:	40000800 	.word	0x40000800
 800e8dc:	40000c00 	.word	0x40000c00
 800e8e0:	40001800 	.word	0x40001800
 800e8e4:	40014000 	.word	0x40014000
 800e8e8:	4000e000 	.word	0x4000e000
 800e8ec:	4000e400 	.word	0x4000e400

0800e8f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b085      	sub	sp, #20
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e904:	2b01      	cmp	r3, #1
 800e906:	d101      	bne.n	800e90c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e908:	2302      	movs	r3, #2
 800e90a:	e073      	b.n	800e9f4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	4313      	orrs	r3, r2
 800e920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	689b      	ldr	r3, [r3, #8]
 800e92c:	4313      	orrs	r3, r2
 800e92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	4313      	orrs	r3, r2
 800e93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4313      	orrs	r3, r2
 800e94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	4313      	orrs	r3, r2
 800e958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	695b      	ldr	r3, [r3, #20]
 800e964:	4313      	orrs	r3, r2
 800e966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e972:	4313      	orrs	r3, r2
 800e974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	041b      	lsls	r3, r3, #16
 800e982:	4313      	orrs	r3, r2
 800e984:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	4313      	orrs	r3, r2
 800e992:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a19      	ldr	r2, [pc, #100]	@ (800ea00 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d004      	beq.n	800e9a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a18      	ldr	r2, [pc, #96]	@ (800ea04 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d11c      	bne.n	800e9e2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9b2:	051b      	lsls	r3, r3, #20
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	6a1b      	ldr	r3, [r3, #32]
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3714      	adds	r7, #20
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr
 800ea00:	40010000 	.word	0x40010000
 800ea04:	40010400 	.word	0x40010400

0800ea08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea24:	bf00      	nop
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d101      	bne.n	800ea56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	e042      	b.n	800eadc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d106      	bne.n	800ea6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7f3 fcfd 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2224      	movs	r2, #36	@ 0x24
 800ea72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f022 0201 	bic.w	r2, r2, #1
 800ea84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d002      	beq.n	800ea94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 ff22 	bl	800f8d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 f8b3 	bl	800ec00 <UART_SetConfig>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d101      	bne.n	800eaa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e01b      	b.n	800eadc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	685a      	ldr	r2, [r3, #4]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800eab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	689a      	ldr	r2, [r3, #8]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800eac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f042 0201 	orr.w	r2, r2, #1
 800ead2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 ffa1 	bl	800fa1c <UART_CheckIdleState>
 800eada:	4603      	mov	r3, r0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b08a      	sub	sp, #40	@ 0x28
 800eae8:	af02      	add	r7, sp, #8
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	603b      	str	r3, [r7, #0]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eafa:	2b20      	cmp	r3, #32
 800eafc:	d17b      	bne.n	800ebf6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <HAL_UART_Transmit+0x26>
 800eb04:	88fb      	ldrh	r3, [r7, #6]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d101      	bne.n	800eb0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	e074      	b.n	800ebf8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2221      	movs	r2, #33	@ 0x21
 800eb1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb1e:	f7f3 ff29 	bl	8002974 <HAL_GetTick>
 800eb22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	88fa      	ldrh	r2, [r7, #6]
 800eb28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	88fa      	ldrh	r2, [r7, #6]
 800eb30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb3c:	d108      	bne.n	800eb50 <HAL_UART_Transmit+0x6c>
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	691b      	ldr	r3, [r3, #16]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d104      	bne.n	800eb50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eb46:	2300      	movs	r3, #0
 800eb48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	61bb      	str	r3, [r7, #24]
 800eb4e:	e003      	b.n	800eb58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb54:	2300      	movs	r3, #0
 800eb56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eb58:	e030      	b.n	800ebbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	9300      	str	r3, [sp, #0]
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	2200      	movs	r2, #0
 800eb62:	2180      	movs	r1, #128	@ 0x80
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f001 f803 	bl	800fb70 <UART_WaitOnFlagUntilTimeout>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d005      	beq.n	800eb7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2220      	movs	r2, #32
 800eb74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	e03d      	b.n	800ebf8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d10b      	bne.n	800eb9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	881b      	ldrh	r3, [r3, #0]
 800eb86:	461a      	mov	r2, r3
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	3302      	adds	r3, #2
 800eb96:	61bb      	str	r3, [r7, #24]
 800eb98:	e007      	b.n	800ebaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	781a      	ldrb	r2, [r3, #0]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	3301      	adds	r3, #1
 800eba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1c8      	bne.n	800eb5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	9300      	str	r3, [sp, #0]
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	2140      	movs	r1, #64	@ 0x40
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f000 ffcc 	bl	800fb70 <UART_WaitOnFlagUntilTimeout>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d005      	beq.n	800ebea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2220      	movs	r2, #32
 800ebe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	e006      	b.n	800ebf8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2220      	movs	r2, #32
 800ebee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	e000      	b.n	800ebf8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ebf6:	2302      	movs	r3, #2
  }
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3720      	adds	r7, #32
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec04:	b092      	sub	sp, #72	@ 0x48
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	689a      	ldr	r2, [r3, #8]
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	431a      	orrs	r2, r3
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	431a      	orrs	r2, r3
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	69db      	ldr	r3, [r3, #28]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	4bbe      	ldr	r3, [pc, #760]	@ (800ef28 <UART_SetConfig+0x328>)
 800ec30:	4013      	ands	r3, r2
 800ec32:	697a      	ldr	r2, [r7, #20]
 800ec34:	6812      	ldr	r2, [r2, #0]
 800ec36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec38:	430b      	orrs	r3, r1
 800ec3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	68da      	ldr	r2, [r3, #12]
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	430a      	orrs	r2, r1
 800ec50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4ab3      	ldr	r2, [pc, #716]	@ (800ef2c <UART_SetConfig+0x32c>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d004      	beq.n	800ec6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec68:	4313      	orrs	r3, r2
 800ec6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	689a      	ldr	r2, [r3, #8]
 800ec72:	4baf      	ldr	r3, [pc, #700]	@ (800ef30 <UART_SetConfig+0x330>)
 800ec74:	4013      	ands	r3, r2
 800ec76:	697a      	ldr	r2, [r7, #20]
 800ec78:	6812      	ldr	r2, [r2, #0]
 800ec7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec7c:	430b      	orrs	r3, r1
 800ec7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec86:	f023 010f 	bic.w	r1, r3, #15
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	430a      	orrs	r2, r1
 800ec94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4aa6      	ldr	r2, [pc, #664]	@ (800ef34 <UART_SetConfig+0x334>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d177      	bne.n	800ed90 <UART_SetConfig+0x190>
 800eca0:	4ba5      	ldr	r3, [pc, #660]	@ (800ef38 <UART_SetConfig+0x338>)
 800eca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eca8:	2b28      	cmp	r3, #40	@ 0x28
 800ecaa:	d86d      	bhi.n	800ed88 <UART_SetConfig+0x188>
 800ecac:	a201      	add	r2, pc, #4	@ (adr r2, 800ecb4 <UART_SetConfig+0xb4>)
 800ecae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb2:	bf00      	nop
 800ecb4:	0800ed59 	.word	0x0800ed59
 800ecb8:	0800ed89 	.word	0x0800ed89
 800ecbc:	0800ed89 	.word	0x0800ed89
 800ecc0:	0800ed89 	.word	0x0800ed89
 800ecc4:	0800ed89 	.word	0x0800ed89
 800ecc8:	0800ed89 	.word	0x0800ed89
 800eccc:	0800ed89 	.word	0x0800ed89
 800ecd0:	0800ed89 	.word	0x0800ed89
 800ecd4:	0800ed61 	.word	0x0800ed61
 800ecd8:	0800ed89 	.word	0x0800ed89
 800ecdc:	0800ed89 	.word	0x0800ed89
 800ece0:	0800ed89 	.word	0x0800ed89
 800ece4:	0800ed89 	.word	0x0800ed89
 800ece8:	0800ed89 	.word	0x0800ed89
 800ecec:	0800ed89 	.word	0x0800ed89
 800ecf0:	0800ed89 	.word	0x0800ed89
 800ecf4:	0800ed69 	.word	0x0800ed69
 800ecf8:	0800ed89 	.word	0x0800ed89
 800ecfc:	0800ed89 	.word	0x0800ed89
 800ed00:	0800ed89 	.word	0x0800ed89
 800ed04:	0800ed89 	.word	0x0800ed89
 800ed08:	0800ed89 	.word	0x0800ed89
 800ed0c:	0800ed89 	.word	0x0800ed89
 800ed10:	0800ed89 	.word	0x0800ed89
 800ed14:	0800ed71 	.word	0x0800ed71
 800ed18:	0800ed89 	.word	0x0800ed89
 800ed1c:	0800ed89 	.word	0x0800ed89
 800ed20:	0800ed89 	.word	0x0800ed89
 800ed24:	0800ed89 	.word	0x0800ed89
 800ed28:	0800ed89 	.word	0x0800ed89
 800ed2c:	0800ed89 	.word	0x0800ed89
 800ed30:	0800ed89 	.word	0x0800ed89
 800ed34:	0800ed79 	.word	0x0800ed79
 800ed38:	0800ed89 	.word	0x0800ed89
 800ed3c:	0800ed89 	.word	0x0800ed89
 800ed40:	0800ed89 	.word	0x0800ed89
 800ed44:	0800ed89 	.word	0x0800ed89
 800ed48:	0800ed89 	.word	0x0800ed89
 800ed4c:	0800ed89 	.word	0x0800ed89
 800ed50:	0800ed89 	.word	0x0800ed89
 800ed54:	0800ed81 	.word	0x0800ed81
 800ed58:	2301      	movs	r3, #1
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5e:	e326      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ed60:	2304      	movs	r3, #4
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed66:	e322      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ed68:	2308      	movs	r3, #8
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed6e:	e31e      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ed70:	2310      	movs	r3, #16
 800ed72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed76:	e31a      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ed78:	2320      	movs	r3, #32
 800ed7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed7e:	e316      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ed80:	2340      	movs	r3, #64	@ 0x40
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed86:	e312      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ed88:	2380      	movs	r3, #128	@ 0x80
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed8e:	e30e      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a69      	ldr	r2, [pc, #420]	@ (800ef3c <UART_SetConfig+0x33c>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d130      	bne.n	800edfc <UART_SetConfig+0x1fc>
 800ed9a:	4b67      	ldr	r3, [pc, #412]	@ (800ef38 <UART_SetConfig+0x338>)
 800ed9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed9e:	f003 0307 	and.w	r3, r3, #7
 800eda2:	2b05      	cmp	r3, #5
 800eda4:	d826      	bhi.n	800edf4 <UART_SetConfig+0x1f4>
 800eda6:	a201      	add	r2, pc, #4	@ (adr r2, 800edac <UART_SetConfig+0x1ac>)
 800eda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edac:	0800edc5 	.word	0x0800edc5
 800edb0:	0800edcd 	.word	0x0800edcd
 800edb4:	0800edd5 	.word	0x0800edd5
 800edb8:	0800eddd 	.word	0x0800eddd
 800edbc:	0800ede5 	.word	0x0800ede5
 800edc0:	0800eded 	.word	0x0800eded
 800edc4:	2300      	movs	r3, #0
 800edc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edca:	e2f0      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800edcc:	2304      	movs	r3, #4
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edd2:	e2ec      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800edd4:	2308      	movs	r3, #8
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edda:	e2e8      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800eddc:	2310      	movs	r3, #16
 800edde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ede2:	e2e4      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ede4:	2320      	movs	r3, #32
 800ede6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edea:	e2e0      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800edec:	2340      	movs	r3, #64	@ 0x40
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edf2:	e2dc      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800edf4:	2380      	movs	r3, #128	@ 0x80
 800edf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfa:	e2d8      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a4f      	ldr	r2, [pc, #316]	@ (800ef40 <UART_SetConfig+0x340>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d130      	bne.n	800ee68 <UART_SetConfig+0x268>
 800ee06:	4b4c      	ldr	r3, [pc, #304]	@ (800ef38 <UART_SetConfig+0x338>)
 800ee08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee0a:	f003 0307 	and.w	r3, r3, #7
 800ee0e:	2b05      	cmp	r3, #5
 800ee10:	d826      	bhi.n	800ee60 <UART_SetConfig+0x260>
 800ee12:	a201      	add	r2, pc, #4	@ (adr r2, 800ee18 <UART_SetConfig+0x218>)
 800ee14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee18:	0800ee31 	.word	0x0800ee31
 800ee1c:	0800ee39 	.word	0x0800ee39
 800ee20:	0800ee41 	.word	0x0800ee41
 800ee24:	0800ee49 	.word	0x0800ee49
 800ee28:	0800ee51 	.word	0x0800ee51
 800ee2c:	0800ee59 	.word	0x0800ee59
 800ee30:	2300      	movs	r3, #0
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee36:	e2ba      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ee38:	2304      	movs	r3, #4
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3e:	e2b6      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ee40:	2308      	movs	r3, #8
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee46:	e2b2      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ee48:	2310      	movs	r3, #16
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4e:	e2ae      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ee50:	2320      	movs	r3, #32
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee56:	e2aa      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ee58:	2340      	movs	r3, #64	@ 0x40
 800ee5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5e:	e2a6      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ee60:	2380      	movs	r3, #128	@ 0x80
 800ee62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee66:	e2a2      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a35      	ldr	r2, [pc, #212]	@ (800ef44 <UART_SetConfig+0x344>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d130      	bne.n	800eed4 <UART_SetConfig+0x2d4>
 800ee72:	4b31      	ldr	r3, [pc, #196]	@ (800ef38 <UART_SetConfig+0x338>)
 800ee74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee76:	f003 0307 	and.w	r3, r3, #7
 800ee7a:	2b05      	cmp	r3, #5
 800ee7c:	d826      	bhi.n	800eecc <UART_SetConfig+0x2cc>
 800ee7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee84 <UART_SetConfig+0x284>)
 800ee80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee84:	0800ee9d 	.word	0x0800ee9d
 800ee88:	0800eea5 	.word	0x0800eea5
 800ee8c:	0800eead 	.word	0x0800eead
 800ee90:	0800eeb5 	.word	0x0800eeb5
 800ee94:	0800eebd 	.word	0x0800eebd
 800ee98:	0800eec5 	.word	0x0800eec5
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eea2:	e284      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800eea4:	2304      	movs	r3, #4
 800eea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeaa:	e280      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800eeac:	2308      	movs	r3, #8
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeb2:	e27c      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800eeb4:	2310      	movs	r3, #16
 800eeb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeba:	e278      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800eebc:	2320      	movs	r3, #32
 800eebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eec2:	e274      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800eec4:	2340      	movs	r3, #64	@ 0x40
 800eec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeca:	e270      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800eecc:	2380      	movs	r3, #128	@ 0x80
 800eece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed2:	e26c      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a1b      	ldr	r2, [pc, #108]	@ (800ef48 <UART_SetConfig+0x348>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d142      	bne.n	800ef64 <UART_SetConfig+0x364>
 800eede:	4b16      	ldr	r3, [pc, #88]	@ (800ef38 <UART_SetConfig+0x338>)
 800eee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eee2:	f003 0307 	and.w	r3, r3, #7
 800eee6:	2b05      	cmp	r3, #5
 800eee8:	d838      	bhi.n	800ef5c <UART_SetConfig+0x35c>
 800eeea:	a201      	add	r2, pc, #4	@ (adr r2, 800eef0 <UART_SetConfig+0x2f0>)
 800eeec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef0:	0800ef09 	.word	0x0800ef09
 800eef4:	0800ef11 	.word	0x0800ef11
 800eef8:	0800ef19 	.word	0x0800ef19
 800eefc:	0800ef21 	.word	0x0800ef21
 800ef00:	0800ef4d 	.word	0x0800ef4d
 800ef04:	0800ef55 	.word	0x0800ef55
 800ef08:	2300      	movs	r3, #0
 800ef0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef0e:	e24e      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ef10:	2304      	movs	r3, #4
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef16:	e24a      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ef18:	2308      	movs	r3, #8
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef1e:	e246      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ef20:	2310      	movs	r3, #16
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef26:	e242      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ef28:	cfff69f3 	.word	0xcfff69f3
 800ef2c:	58000c00 	.word	0x58000c00
 800ef30:	11fff4ff 	.word	0x11fff4ff
 800ef34:	40011000 	.word	0x40011000
 800ef38:	58024400 	.word	0x58024400
 800ef3c:	40004400 	.word	0x40004400
 800ef40:	40004800 	.word	0x40004800
 800ef44:	40004c00 	.word	0x40004c00
 800ef48:	40005000 	.word	0x40005000
 800ef4c:	2320      	movs	r3, #32
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef52:	e22c      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ef54:	2340      	movs	r3, #64	@ 0x40
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5a:	e228      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ef5c:	2380      	movs	r3, #128	@ 0x80
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef62:	e224      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4ab1      	ldr	r2, [pc, #708]	@ (800f230 <UART_SetConfig+0x630>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d176      	bne.n	800f05c <UART_SetConfig+0x45c>
 800ef6e:	4bb1      	ldr	r3, [pc, #708]	@ (800f234 <UART_SetConfig+0x634>)
 800ef70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef76:	2b28      	cmp	r3, #40	@ 0x28
 800ef78:	d86c      	bhi.n	800f054 <UART_SetConfig+0x454>
 800ef7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef80 <UART_SetConfig+0x380>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800f025 	.word	0x0800f025
 800ef84:	0800f055 	.word	0x0800f055
 800ef88:	0800f055 	.word	0x0800f055
 800ef8c:	0800f055 	.word	0x0800f055
 800ef90:	0800f055 	.word	0x0800f055
 800ef94:	0800f055 	.word	0x0800f055
 800ef98:	0800f055 	.word	0x0800f055
 800ef9c:	0800f055 	.word	0x0800f055
 800efa0:	0800f02d 	.word	0x0800f02d
 800efa4:	0800f055 	.word	0x0800f055
 800efa8:	0800f055 	.word	0x0800f055
 800efac:	0800f055 	.word	0x0800f055
 800efb0:	0800f055 	.word	0x0800f055
 800efb4:	0800f055 	.word	0x0800f055
 800efb8:	0800f055 	.word	0x0800f055
 800efbc:	0800f055 	.word	0x0800f055
 800efc0:	0800f035 	.word	0x0800f035
 800efc4:	0800f055 	.word	0x0800f055
 800efc8:	0800f055 	.word	0x0800f055
 800efcc:	0800f055 	.word	0x0800f055
 800efd0:	0800f055 	.word	0x0800f055
 800efd4:	0800f055 	.word	0x0800f055
 800efd8:	0800f055 	.word	0x0800f055
 800efdc:	0800f055 	.word	0x0800f055
 800efe0:	0800f03d 	.word	0x0800f03d
 800efe4:	0800f055 	.word	0x0800f055
 800efe8:	0800f055 	.word	0x0800f055
 800efec:	0800f055 	.word	0x0800f055
 800eff0:	0800f055 	.word	0x0800f055
 800eff4:	0800f055 	.word	0x0800f055
 800eff8:	0800f055 	.word	0x0800f055
 800effc:	0800f055 	.word	0x0800f055
 800f000:	0800f045 	.word	0x0800f045
 800f004:	0800f055 	.word	0x0800f055
 800f008:	0800f055 	.word	0x0800f055
 800f00c:	0800f055 	.word	0x0800f055
 800f010:	0800f055 	.word	0x0800f055
 800f014:	0800f055 	.word	0x0800f055
 800f018:	0800f055 	.word	0x0800f055
 800f01c:	0800f055 	.word	0x0800f055
 800f020:	0800f04d 	.word	0x0800f04d
 800f024:	2301      	movs	r3, #1
 800f026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f02a:	e1c0      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f02c:	2304      	movs	r3, #4
 800f02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f032:	e1bc      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f034:	2308      	movs	r3, #8
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f03a:	e1b8      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f03c:	2310      	movs	r3, #16
 800f03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f042:	e1b4      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f044:	2320      	movs	r3, #32
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f04a:	e1b0      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f04c:	2340      	movs	r3, #64	@ 0x40
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f052:	e1ac      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f054:	2380      	movs	r3, #128	@ 0x80
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05a:	e1a8      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a75      	ldr	r2, [pc, #468]	@ (800f238 <UART_SetConfig+0x638>)
 800f062:	4293      	cmp	r3, r2
 800f064:	d130      	bne.n	800f0c8 <UART_SetConfig+0x4c8>
 800f066:	4b73      	ldr	r3, [pc, #460]	@ (800f234 <UART_SetConfig+0x634>)
 800f068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f06a:	f003 0307 	and.w	r3, r3, #7
 800f06e:	2b05      	cmp	r3, #5
 800f070:	d826      	bhi.n	800f0c0 <UART_SetConfig+0x4c0>
 800f072:	a201      	add	r2, pc, #4	@ (adr r2, 800f078 <UART_SetConfig+0x478>)
 800f074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f078:	0800f091 	.word	0x0800f091
 800f07c:	0800f099 	.word	0x0800f099
 800f080:	0800f0a1 	.word	0x0800f0a1
 800f084:	0800f0a9 	.word	0x0800f0a9
 800f088:	0800f0b1 	.word	0x0800f0b1
 800f08c:	0800f0b9 	.word	0x0800f0b9
 800f090:	2300      	movs	r3, #0
 800f092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f096:	e18a      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f098:	2304      	movs	r3, #4
 800f09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f09e:	e186      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f0a0:	2308      	movs	r3, #8
 800f0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0a6:	e182      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f0a8:	2310      	movs	r3, #16
 800f0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ae:	e17e      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f0b0:	2320      	movs	r3, #32
 800f0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0b6:	e17a      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f0b8:	2340      	movs	r3, #64	@ 0x40
 800f0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0be:	e176      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f0c0:	2380      	movs	r3, #128	@ 0x80
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0c6:	e172      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a5b      	ldr	r2, [pc, #364]	@ (800f23c <UART_SetConfig+0x63c>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d130      	bne.n	800f134 <UART_SetConfig+0x534>
 800f0d2:	4b58      	ldr	r3, [pc, #352]	@ (800f234 <UART_SetConfig+0x634>)
 800f0d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0d6:	f003 0307 	and.w	r3, r3, #7
 800f0da:	2b05      	cmp	r3, #5
 800f0dc:	d826      	bhi.n	800f12c <UART_SetConfig+0x52c>
 800f0de:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e4 <UART_SetConfig+0x4e4>)
 800f0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e4:	0800f0fd 	.word	0x0800f0fd
 800f0e8:	0800f105 	.word	0x0800f105
 800f0ec:	0800f10d 	.word	0x0800f10d
 800f0f0:	0800f115 	.word	0x0800f115
 800f0f4:	0800f11d 	.word	0x0800f11d
 800f0f8:	0800f125 	.word	0x0800f125
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f102:	e154      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f104:	2304      	movs	r3, #4
 800f106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f10a:	e150      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f10c:	2308      	movs	r3, #8
 800f10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f112:	e14c      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f114:	2310      	movs	r3, #16
 800f116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f11a:	e148      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f11c:	2320      	movs	r3, #32
 800f11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f122:	e144      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f124:	2340      	movs	r3, #64	@ 0x40
 800f126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12a:	e140      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f12c:	2380      	movs	r3, #128	@ 0x80
 800f12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f132:	e13c      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4a41      	ldr	r2, [pc, #260]	@ (800f240 <UART_SetConfig+0x640>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	f040 8082 	bne.w	800f244 <UART_SetConfig+0x644>
 800f140:	4b3c      	ldr	r3, [pc, #240]	@ (800f234 <UART_SetConfig+0x634>)
 800f142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f144:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f148:	2b28      	cmp	r3, #40	@ 0x28
 800f14a:	d86d      	bhi.n	800f228 <UART_SetConfig+0x628>
 800f14c:	a201      	add	r2, pc, #4	@ (adr r2, 800f154 <UART_SetConfig+0x554>)
 800f14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f152:	bf00      	nop
 800f154:	0800f1f9 	.word	0x0800f1f9
 800f158:	0800f229 	.word	0x0800f229
 800f15c:	0800f229 	.word	0x0800f229
 800f160:	0800f229 	.word	0x0800f229
 800f164:	0800f229 	.word	0x0800f229
 800f168:	0800f229 	.word	0x0800f229
 800f16c:	0800f229 	.word	0x0800f229
 800f170:	0800f229 	.word	0x0800f229
 800f174:	0800f201 	.word	0x0800f201
 800f178:	0800f229 	.word	0x0800f229
 800f17c:	0800f229 	.word	0x0800f229
 800f180:	0800f229 	.word	0x0800f229
 800f184:	0800f229 	.word	0x0800f229
 800f188:	0800f229 	.word	0x0800f229
 800f18c:	0800f229 	.word	0x0800f229
 800f190:	0800f229 	.word	0x0800f229
 800f194:	0800f209 	.word	0x0800f209
 800f198:	0800f229 	.word	0x0800f229
 800f19c:	0800f229 	.word	0x0800f229
 800f1a0:	0800f229 	.word	0x0800f229
 800f1a4:	0800f229 	.word	0x0800f229
 800f1a8:	0800f229 	.word	0x0800f229
 800f1ac:	0800f229 	.word	0x0800f229
 800f1b0:	0800f229 	.word	0x0800f229
 800f1b4:	0800f211 	.word	0x0800f211
 800f1b8:	0800f229 	.word	0x0800f229
 800f1bc:	0800f229 	.word	0x0800f229
 800f1c0:	0800f229 	.word	0x0800f229
 800f1c4:	0800f229 	.word	0x0800f229
 800f1c8:	0800f229 	.word	0x0800f229
 800f1cc:	0800f229 	.word	0x0800f229
 800f1d0:	0800f229 	.word	0x0800f229
 800f1d4:	0800f219 	.word	0x0800f219
 800f1d8:	0800f229 	.word	0x0800f229
 800f1dc:	0800f229 	.word	0x0800f229
 800f1e0:	0800f229 	.word	0x0800f229
 800f1e4:	0800f229 	.word	0x0800f229
 800f1e8:	0800f229 	.word	0x0800f229
 800f1ec:	0800f229 	.word	0x0800f229
 800f1f0:	0800f229 	.word	0x0800f229
 800f1f4:	0800f221 	.word	0x0800f221
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1fe:	e0d6      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f200:	2304      	movs	r3, #4
 800f202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f206:	e0d2      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f208:	2308      	movs	r3, #8
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f20e:	e0ce      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f210:	2310      	movs	r3, #16
 800f212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f216:	e0ca      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f218:	2320      	movs	r3, #32
 800f21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f21e:	e0c6      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f220:	2340      	movs	r3, #64	@ 0x40
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f226:	e0c2      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f228:	2380      	movs	r3, #128	@ 0x80
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22e:	e0be      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f230:	40011400 	.word	0x40011400
 800f234:	58024400 	.word	0x58024400
 800f238:	40007800 	.word	0x40007800
 800f23c:	40007c00 	.word	0x40007c00
 800f240:	40011800 	.word	0x40011800
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4aad      	ldr	r2, [pc, #692]	@ (800f500 <UART_SetConfig+0x900>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d176      	bne.n	800f33c <UART_SetConfig+0x73c>
 800f24e:	4bad      	ldr	r3, [pc, #692]	@ (800f504 <UART_SetConfig+0x904>)
 800f250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f252:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f256:	2b28      	cmp	r3, #40	@ 0x28
 800f258:	d86c      	bhi.n	800f334 <UART_SetConfig+0x734>
 800f25a:	a201      	add	r2, pc, #4	@ (adr r2, 800f260 <UART_SetConfig+0x660>)
 800f25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f260:	0800f305 	.word	0x0800f305
 800f264:	0800f335 	.word	0x0800f335
 800f268:	0800f335 	.word	0x0800f335
 800f26c:	0800f335 	.word	0x0800f335
 800f270:	0800f335 	.word	0x0800f335
 800f274:	0800f335 	.word	0x0800f335
 800f278:	0800f335 	.word	0x0800f335
 800f27c:	0800f335 	.word	0x0800f335
 800f280:	0800f30d 	.word	0x0800f30d
 800f284:	0800f335 	.word	0x0800f335
 800f288:	0800f335 	.word	0x0800f335
 800f28c:	0800f335 	.word	0x0800f335
 800f290:	0800f335 	.word	0x0800f335
 800f294:	0800f335 	.word	0x0800f335
 800f298:	0800f335 	.word	0x0800f335
 800f29c:	0800f335 	.word	0x0800f335
 800f2a0:	0800f315 	.word	0x0800f315
 800f2a4:	0800f335 	.word	0x0800f335
 800f2a8:	0800f335 	.word	0x0800f335
 800f2ac:	0800f335 	.word	0x0800f335
 800f2b0:	0800f335 	.word	0x0800f335
 800f2b4:	0800f335 	.word	0x0800f335
 800f2b8:	0800f335 	.word	0x0800f335
 800f2bc:	0800f335 	.word	0x0800f335
 800f2c0:	0800f31d 	.word	0x0800f31d
 800f2c4:	0800f335 	.word	0x0800f335
 800f2c8:	0800f335 	.word	0x0800f335
 800f2cc:	0800f335 	.word	0x0800f335
 800f2d0:	0800f335 	.word	0x0800f335
 800f2d4:	0800f335 	.word	0x0800f335
 800f2d8:	0800f335 	.word	0x0800f335
 800f2dc:	0800f335 	.word	0x0800f335
 800f2e0:	0800f325 	.word	0x0800f325
 800f2e4:	0800f335 	.word	0x0800f335
 800f2e8:	0800f335 	.word	0x0800f335
 800f2ec:	0800f335 	.word	0x0800f335
 800f2f0:	0800f335 	.word	0x0800f335
 800f2f4:	0800f335 	.word	0x0800f335
 800f2f8:	0800f335 	.word	0x0800f335
 800f2fc:	0800f335 	.word	0x0800f335
 800f300:	0800f32d 	.word	0x0800f32d
 800f304:	2301      	movs	r3, #1
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f30a:	e050      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f30c:	2304      	movs	r3, #4
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f312:	e04c      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f314:	2308      	movs	r3, #8
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f31a:	e048      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f31c:	2310      	movs	r3, #16
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f322:	e044      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f324:	2320      	movs	r3, #32
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f32a:	e040      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f32c:	2340      	movs	r3, #64	@ 0x40
 800f32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f332:	e03c      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f334:	2380      	movs	r3, #128	@ 0x80
 800f336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f33a:	e038      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a71      	ldr	r2, [pc, #452]	@ (800f508 <UART_SetConfig+0x908>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d130      	bne.n	800f3a8 <UART_SetConfig+0x7a8>
 800f346:	4b6f      	ldr	r3, [pc, #444]	@ (800f504 <UART_SetConfig+0x904>)
 800f348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f34a:	f003 0307 	and.w	r3, r3, #7
 800f34e:	2b05      	cmp	r3, #5
 800f350:	d826      	bhi.n	800f3a0 <UART_SetConfig+0x7a0>
 800f352:	a201      	add	r2, pc, #4	@ (adr r2, 800f358 <UART_SetConfig+0x758>)
 800f354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f358:	0800f371 	.word	0x0800f371
 800f35c:	0800f379 	.word	0x0800f379
 800f360:	0800f381 	.word	0x0800f381
 800f364:	0800f389 	.word	0x0800f389
 800f368:	0800f391 	.word	0x0800f391
 800f36c:	0800f399 	.word	0x0800f399
 800f370:	2302      	movs	r3, #2
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f376:	e01a      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f378:	2304      	movs	r3, #4
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f37e:	e016      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f380:	2308      	movs	r3, #8
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f386:	e012      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f388:	2310      	movs	r3, #16
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f38e:	e00e      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f390:	2320      	movs	r3, #32
 800f392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f396:	e00a      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f398:	2340      	movs	r3, #64	@ 0x40
 800f39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f39e:	e006      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f3a0:	2380      	movs	r3, #128	@ 0x80
 800f3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3a6:	e002      	b.n	800f3ae <UART_SetConfig+0x7ae>
 800f3a8:	2380      	movs	r3, #128	@ 0x80
 800f3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4a55      	ldr	r2, [pc, #340]	@ (800f508 <UART_SetConfig+0x908>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	f040 80f8 	bne.w	800f5aa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f3be:	2b20      	cmp	r3, #32
 800f3c0:	dc46      	bgt.n	800f450 <UART_SetConfig+0x850>
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	db75      	blt.n	800f4b2 <UART_SetConfig+0x8b2>
 800f3c6:	3b02      	subs	r3, #2
 800f3c8:	2b1e      	cmp	r3, #30
 800f3ca:	d872      	bhi.n	800f4b2 <UART_SetConfig+0x8b2>
 800f3cc:	a201      	add	r2, pc, #4	@ (adr r2, 800f3d4 <UART_SetConfig+0x7d4>)
 800f3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d2:	bf00      	nop
 800f3d4:	0800f457 	.word	0x0800f457
 800f3d8:	0800f4b3 	.word	0x0800f4b3
 800f3dc:	0800f45f 	.word	0x0800f45f
 800f3e0:	0800f4b3 	.word	0x0800f4b3
 800f3e4:	0800f4b3 	.word	0x0800f4b3
 800f3e8:	0800f4b3 	.word	0x0800f4b3
 800f3ec:	0800f46f 	.word	0x0800f46f
 800f3f0:	0800f4b3 	.word	0x0800f4b3
 800f3f4:	0800f4b3 	.word	0x0800f4b3
 800f3f8:	0800f4b3 	.word	0x0800f4b3
 800f3fc:	0800f4b3 	.word	0x0800f4b3
 800f400:	0800f4b3 	.word	0x0800f4b3
 800f404:	0800f4b3 	.word	0x0800f4b3
 800f408:	0800f4b3 	.word	0x0800f4b3
 800f40c:	0800f47f 	.word	0x0800f47f
 800f410:	0800f4b3 	.word	0x0800f4b3
 800f414:	0800f4b3 	.word	0x0800f4b3
 800f418:	0800f4b3 	.word	0x0800f4b3
 800f41c:	0800f4b3 	.word	0x0800f4b3
 800f420:	0800f4b3 	.word	0x0800f4b3
 800f424:	0800f4b3 	.word	0x0800f4b3
 800f428:	0800f4b3 	.word	0x0800f4b3
 800f42c:	0800f4b3 	.word	0x0800f4b3
 800f430:	0800f4b3 	.word	0x0800f4b3
 800f434:	0800f4b3 	.word	0x0800f4b3
 800f438:	0800f4b3 	.word	0x0800f4b3
 800f43c:	0800f4b3 	.word	0x0800f4b3
 800f440:	0800f4b3 	.word	0x0800f4b3
 800f444:	0800f4b3 	.word	0x0800f4b3
 800f448:	0800f4b3 	.word	0x0800f4b3
 800f44c:	0800f4a5 	.word	0x0800f4a5
 800f450:	2b40      	cmp	r3, #64	@ 0x40
 800f452:	d02a      	beq.n	800f4aa <UART_SetConfig+0x8aa>
 800f454:	e02d      	b.n	800f4b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f456:	f7fb ff37 	bl	800b2c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f45a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f45c:	e02f      	b.n	800f4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f45e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f462:	4618      	mov	r0, r3
 800f464:	f7fb ff46 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f46c:	e027      	b.n	800f4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f46e:	f107 0318 	add.w	r3, r7, #24
 800f472:	4618      	mov	r0, r3
 800f474:	f7fc f892 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f47c:	e01f      	b.n	800f4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f47e:	4b21      	ldr	r3, [pc, #132]	@ (800f504 <UART_SetConfig+0x904>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f003 0320 	and.w	r3, r3, #32
 800f486:	2b00      	cmp	r3, #0
 800f488:	d009      	beq.n	800f49e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f48a:	4b1e      	ldr	r3, [pc, #120]	@ (800f504 <UART_SetConfig+0x904>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	08db      	lsrs	r3, r3, #3
 800f490:	f003 0303 	and.w	r3, r3, #3
 800f494:	4a1d      	ldr	r2, [pc, #116]	@ (800f50c <UART_SetConfig+0x90c>)
 800f496:	fa22 f303 	lsr.w	r3, r2, r3
 800f49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f49c:	e00f      	b.n	800f4be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f49e:	4b1b      	ldr	r3, [pc, #108]	@ (800f50c <UART_SetConfig+0x90c>)
 800f4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4a2:	e00c      	b.n	800f4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4a4:	4b1a      	ldr	r3, [pc, #104]	@ (800f510 <UART_SetConfig+0x910>)
 800f4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4a8:	e009      	b.n	800f4be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4b0:	e005      	b.n	800f4be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f4bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f000 81ee 	beq.w	800f8a2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ca:	4a12      	ldr	r2, [pc, #72]	@ (800f514 <UART_SetConfig+0x914>)
 800f4cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	685a      	ldr	r2, [r3, #4]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	005b      	lsls	r3, r3, #1
 800f4e2:	4413      	add	r3, r2
 800f4e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d305      	bcc.n	800f4f6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f4f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d910      	bls.n	800f518 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f4fc:	e1d1      	b.n	800f8a2 <UART_SetConfig+0xca2>
 800f4fe:	bf00      	nop
 800f500:	40011c00 	.word	0x40011c00
 800f504:	58024400 	.word	0x58024400
 800f508:	58000c00 	.word	0x58000c00
 800f50c:	03d09000 	.word	0x03d09000
 800f510:	003d0900 	.word	0x003d0900
 800f514:	08012a7c 	.word	0x08012a7c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f51a:	2200      	movs	r2, #0
 800f51c:	60bb      	str	r3, [r7, #8]
 800f51e:	60fa      	str	r2, [r7, #12]
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f524:	4ac0      	ldr	r2, [pc, #768]	@ (800f828 <UART_SetConfig+0xc28>)
 800f526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	2200      	movs	r2, #0
 800f52e:	603b      	str	r3, [r7, #0]
 800f530:	607a      	str	r2, [r7, #4]
 800f532:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f536:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f53a:	f7f0 ff41 	bl	80003c0 <__aeabi_uldivmod>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	4610      	mov	r0, r2
 800f544:	4619      	mov	r1, r3
 800f546:	f04f 0200 	mov.w	r2, #0
 800f54a:	f04f 0300 	mov.w	r3, #0
 800f54e:	020b      	lsls	r3, r1, #8
 800f550:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f554:	0202      	lsls	r2, r0, #8
 800f556:	6979      	ldr	r1, [r7, #20]
 800f558:	6849      	ldr	r1, [r1, #4]
 800f55a:	0849      	lsrs	r1, r1, #1
 800f55c:	2000      	movs	r0, #0
 800f55e:	460c      	mov	r4, r1
 800f560:	4605      	mov	r5, r0
 800f562:	eb12 0804 	adds.w	r8, r2, r4
 800f566:	eb43 0905 	adc.w	r9, r3, r5
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	2200      	movs	r2, #0
 800f570:	469a      	mov	sl, r3
 800f572:	4693      	mov	fp, r2
 800f574:	4652      	mov	r2, sl
 800f576:	465b      	mov	r3, fp
 800f578:	4640      	mov	r0, r8
 800f57a:	4649      	mov	r1, r9
 800f57c:	f7f0 ff20 	bl	80003c0 <__aeabi_uldivmod>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4613      	mov	r3, r2
 800f586:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f58e:	d308      	bcc.n	800f5a2 <UART_SetConfig+0x9a2>
 800f590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f596:	d204      	bcs.n	800f5a2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f59e:	60da      	str	r2, [r3, #12]
 800f5a0:	e17f      	b.n	800f8a2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f5a8:	e17b      	b.n	800f8a2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	69db      	ldr	r3, [r3, #28]
 800f5ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f5b2:	f040 80bd 	bne.w	800f730 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f5b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f5ba:	2b20      	cmp	r3, #32
 800f5bc:	dc48      	bgt.n	800f650 <UART_SetConfig+0xa50>
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	db7b      	blt.n	800f6ba <UART_SetConfig+0xaba>
 800f5c2:	2b20      	cmp	r3, #32
 800f5c4:	d879      	bhi.n	800f6ba <UART_SetConfig+0xaba>
 800f5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5cc <UART_SetConfig+0x9cc>)
 800f5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5cc:	0800f657 	.word	0x0800f657
 800f5d0:	0800f65f 	.word	0x0800f65f
 800f5d4:	0800f6bb 	.word	0x0800f6bb
 800f5d8:	0800f6bb 	.word	0x0800f6bb
 800f5dc:	0800f667 	.word	0x0800f667
 800f5e0:	0800f6bb 	.word	0x0800f6bb
 800f5e4:	0800f6bb 	.word	0x0800f6bb
 800f5e8:	0800f6bb 	.word	0x0800f6bb
 800f5ec:	0800f677 	.word	0x0800f677
 800f5f0:	0800f6bb 	.word	0x0800f6bb
 800f5f4:	0800f6bb 	.word	0x0800f6bb
 800f5f8:	0800f6bb 	.word	0x0800f6bb
 800f5fc:	0800f6bb 	.word	0x0800f6bb
 800f600:	0800f6bb 	.word	0x0800f6bb
 800f604:	0800f6bb 	.word	0x0800f6bb
 800f608:	0800f6bb 	.word	0x0800f6bb
 800f60c:	0800f687 	.word	0x0800f687
 800f610:	0800f6bb 	.word	0x0800f6bb
 800f614:	0800f6bb 	.word	0x0800f6bb
 800f618:	0800f6bb 	.word	0x0800f6bb
 800f61c:	0800f6bb 	.word	0x0800f6bb
 800f620:	0800f6bb 	.word	0x0800f6bb
 800f624:	0800f6bb 	.word	0x0800f6bb
 800f628:	0800f6bb 	.word	0x0800f6bb
 800f62c:	0800f6bb 	.word	0x0800f6bb
 800f630:	0800f6bb 	.word	0x0800f6bb
 800f634:	0800f6bb 	.word	0x0800f6bb
 800f638:	0800f6bb 	.word	0x0800f6bb
 800f63c:	0800f6bb 	.word	0x0800f6bb
 800f640:	0800f6bb 	.word	0x0800f6bb
 800f644:	0800f6bb 	.word	0x0800f6bb
 800f648:	0800f6bb 	.word	0x0800f6bb
 800f64c:	0800f6ad 	.word	0x0800f6ad
 800f650:	2b40      	cmp	r3, #64	@ 0x40
 800f652:	d02e      	beq.n	800f6b2 <UART_SetConfig+0xab2>
 800f654:	e031      	b.n	800f6ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f656:	f7f9 ff99 	bl	800958c <HAL_RCC_GetPCLK1Freq>
 800f65a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f65c:	e033      	b.n	800f6c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f65e:	f7f9 ffab 	bl	80095b8 <HAL_RCC_GetPCLK2Freq>
 800f662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f664:	e02f      	b.n	800f6c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fb fe42 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f674:	e027      	b.n	800f6c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f676:	f107 0318 	add.w	r3, r7, #24
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fb ff8e 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f684:	e01f      	b.n	800f6c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f686:	4b69      	ldr	r3, [pc, #420]	@ (800f82c <UART_SetConfig+0xc2c>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f003 0320 	and.w	r3, r3, #32
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d009      	beq.n	800f6a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f692:	4b66      	ldr	r3, [pc, #408]	@ (800f82c <UART_SetConfig+0xc2c>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	08db      	lsrs	r3, r3, #3
 800f698:	f003 0303 	and.w	r3, r3, #3
 800f69c:	4a64      	ldr	r2, [pc, #400]	@ (800f830 <UART_SetConfig+0xc30>)
 800f69e:	fa22 f303 	lsr.w	r3, r2, r3
 800f6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6a4:	e00f      	b.n	800f6c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f6a6:	4b62      	ldr	r3, [pc, #392]	@ (800f830 <UART_SetConfig+0xc30>)
 800f6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6aa:	e00c      	b.n	800f6c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6ac:	4b61      	ldr	r3, [pc, #388]	@ (800f834 <UART_SetConfig+0xc34>)
 800f6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6b0:	e009      	b.n	800f6c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6b8:	e005      	b.n	800f6c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f6c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	f000 80ea 	beq.w	800f8a2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d2:	4a55      	ldr	r2, [pc, #340]	@ (800f828 <UART_SetConfig+0xc28>)
 800f6d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6d8:	461a      	mov	r2, r3
 800f6da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6e0:	005a      	lsls	r2, r3, #1
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	085b      	lsrs	r3, r3, #1
 800f6e8:	441a      	add	r2, r3
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f6:	2b0f      	cmp	r3, #15
 800f6f8:	d916      	bls.n	800f728 <UART_SetConfig+0xb28>
 800f6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f700:	d212      	bcs.n	800f728 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f704:	b29b      	uxth	r3, r3
 800f706:	f023 030f 	bic.w	r3, r3, #15
 800f70a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f70e:	085b      	lsrs	r3, r3, #1
 800f710:	b29b      	uxth	r3, r3
 800f712:	f003 0307 	and.w	r3, r3, #7
 800f716:	b29a      	uxth	r2, r3
 800f718:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f71a:	4313      	orrs	r3, r2
 800f71c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f724:	60da      	str	r2, [r3, #12]
 800f726:	e0bc      	b.n	800f8a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f72e:	e0b8      	b.n	800f8a2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f730:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f734:	2b20      	cmp	r3, #32
 800f736:	dc4b      	bgt.n	800f7d0 <UART_SetConfig+0xbd0>
 800f738:	2b00      	cmp	r3, #0
 800f73a:	f2c0 8087 	blt.w	800f84c <UART_SetConfig+0xc4c>
 800f73e:	2b20      	cmp	r3, #32
 800f740:	f200 8084 	bhi.w	800f84c <UART_SetConfig+0xc4c>
 800f744:	a201      	add	r2, pc, #4	@ (adr r2, 800f74c <UART_SetConfig+0xb4c>)
 800f746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f74a:	bf00      	nop
 800f74c:	0800f7d7 	.word	0x0800f7d7
 800f750:	0800f7df 	.word	0x0800f7df
 800f754:	0800f84d 	.word	0x0800f84d
 800f758:	0800f84d 	.word	0x0800f84d
 800f75c:	0800f7e7 	.word	0x0800f7e7
 800f760:	0800f84d 	.word	0x0800f84d
 800f764:	0800f84d 	.word	0x0800f84d
 800f768:	0800f84d 	.word	0x0800f84d
 800f76c:	0800f7f7 	.word	0x0800f7f7
 800f770:	0800f84d 	.word	0x0800f84d
 800f774:	0800f84d 	.word	0x0800f84d
 800f778:	0800f84d 	.word	0x0800f84d
 800f77c:	0800f84d 	.word	0x0800f84d
 800f780:	0800f84d 	.word	0x0800f84d
 800f784:	0800f84d 	.word	0x0800f84d
 800f788:	0800f84d 	.word	0x0800f84d
 800f78c:	0800f807 	.word	0x0800f807
 800f790:	0800f84d 	.word	0x0800f84d
 800f794:	0800f84d 	.word	0x0800f84d
 800f798:	0800f84d 	.word	0x0800f84d
 800f79c:	0800f84d 	.word	0x0800f84d
 800f7a0:	0800f84d 	.word	0x0800f84d
 800f7a4:	0800f84d 	.word	0x0800f84d
 800f7a8:	0800f84d 	.word	0x0800f84d
 800f7ac:	0800f84d 	.word	0x0800f84d
 800f7b0:	0800f84d 	.word	0x0800f84d
 800f7b4:	0800f84d 	.word	0x0800f84d
 800f7b8:	0800f84d 	.word	0x0800f84d
 800f7bc:	0800f84d 	.word	0x0800f84d
 800f7c0:	0800f84d 	.word	0x0800f84d
 800f7c4:	0800f84d 	.word	0x0800f84d
 800f7c8:	0800f84d 	.word	0x0800f84d
 800f7cc:	0800f83f 	.word	0x0800f83f
 800f7d0:	2b40      	cmp	r3, #64	@ 0x40
 800f7d2:	d037      	beq.n	800f844 <UART_SetConfig+0xc44>
 800f7d4:	e03a      	b.n	800f84c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7d6:	f7f9 fed9 	bl	800958c <HAL_RCC_GetPCLK1Freq>
 800f7da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f7dc:	e03c      	b.n	800f858 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f7de:	f7f9 feeb 	bl	80095b8 <HAL_RCC_GetPCLK2Freq>
 800f7e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f7e4:	e038      	b.n	800f858 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fb fd82 	bl	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7f4:	e030      	b.n	800f858 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7f6:	f107 0318 	add.w	r3, r7, #24
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fb fece 	bl	800b59c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f804:	e028      	b.n	800f858 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f806:	4b09      	ldr	r3, [pc, #36]	@ (800f82c <UART_SetConfig+0xc2c>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f003 0320 	and.w	r3, r3, #32
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d012      	beq.n	800f838 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f812:	4b06      	ldr	r3, [pc, #24]	@ (800f82c <UART_SetConfig+0xc2c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	08db      	lsrs	r3, r3, #3
 800f818:	f003 0303 	and.w	r3, r3, #3
 800f81c:	4a04      	ldr	r2, [pc, #16]	@ (800f830 <UART_SetConfig+0xc30>)
 800f81e:	fa22 f303 	lsr.w	r3, r2, r3
 800f822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f824:	e018      	b.n	800f858 <UART_SetConfig+0xc58>
 800f826:	bf00      	nop
 800f828:	08012a7c 	.word	0x08012a7c
 800f82c:	58024400 	.word	0x58024400
 800f830:	03d09000 	.word	0x03d09000
 800f834:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f838:	4b24      	ldr	r3, [pc, #144]	@ (800f8cc <UART_SetConfig+0xccc>)
 800f83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f83c:	e00c      	b.n	800f858 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f83e:	4b24      	ldr	r3, [pc, #144]	@ (800f8d0 <UART_SetConfig+0xcd0>)
 800f840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f842:	e009      	b.n	800f858 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f844:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f84a:	e005      	b.n	800f858 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f84c:	2300      	movs	r3, #0
 800f84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f856:	bf00      	nop
    }

    if (pclk != 0U)
 800f858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d021      	beq.n	800f8a2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f862:	4a1c      	ldr	r2, [pc, #112]	@ (800f8d4 <UART_SetConfig+0xcd4>)
 800f864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f868:	461a      	mov	r2, r3
 800f86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f86c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	085b      	lsrs	r3, r3, #1
 800f876:	441a      	add	r2, r3
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f880:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f884:	2b0f      	cmp	r3, #15
 800f886:	d909      	bls.n	800f89c <UART_SetConfig+0xc9c>
 800f888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f88a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f88e:	d205      	bcs.n	800f89c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f892:	b29a      	uxth	r2, r3
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	60da      	str	r2, [r3, #12]
 800f89a:	e002      	b.n	800f8a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f89c:	2301      	movs	r3, #1
 800f89e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f8be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3748      	adds	r7, #72	@ 0x48
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f8cc:	03d09000 	.word	0x03d09000
 800f8d0:	003d0900 	.word	0x003d0900
 800f8d4:	08012a7c 	.word	0x08012a7c

0800f8d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b083      	sub	sp, #12
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8e4:	f003 0308 	and.w	r3, r3, #8
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d00a      	beq.n	800f902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	430a      	orrs	r2, r1
 800f900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f906:	f003 0301 	and.w	r3, r3, #1
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00a      	beq.n	800f924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	430a      	orrs	r2, r1
 800f922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f928:	f003 0302 	and.w	r3, r3, #2
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00a      	beq.n	800f946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	430a      	orrs	r2, r1
 800f944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f94a:	f003 0304 	and.w	r3, r3, #4
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00a      	beq.n	800f968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	430a      	orrs	r2, r1
 800f966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f96c:	f003 0310 	and.w	r3, r3, #16
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00a      	beq.n	800f98a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	430a      	orrs	r2, r1
 800f988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f98e:	f003 0320 	and.w	r3, r3, #32
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00a      	beq.n	800f9ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	430a      	orrs	r2, r1
 800f9aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d01a      	beq.n	800f9ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	430a      	orrs	r2, r1
 800f9cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f9d6:	d10a      	bne.n	800f9ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	430a      	orrs	r2, r1
 800f9ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00a      	beq.n	800fa10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	430a      	orrs	r2, r1
 800fa0e:	605a      	str	r2, [r3, #4]
  }
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b098      	sub	sp, #96	@ 0x60
 800fa20:	af02      	add	r7, sp, #8
 800fa22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa2c:	f7f2 ffa2 	bl	8002974 <HAL_GetTick>
 800fa30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f003 0308 	and.w	r3, r3, #8
 800fa3c:	2b08      	cmp	r3, #8
 800fa3e:	d12f      	bne.n	800faa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fa44:	9300      	str	r3, [sp, #0]
 800fa46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 f88e 	bl	800fb70 <UART_WaitOnFlagUntilTimeout>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d022      	beq.n	800faa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa62:	e853 3f00 	ldrex	r3, [r3]
 800fa66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa6e:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	461a      	mov	r2, r3
 800fa76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa78:	647b      	str	r3, [r7, #68]	@ 0x44
 800fa7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fa7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa80:	e841 2300 	strex	r3, r2, [r1]
 800fa84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fa86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1e6      	bne.n	800fa5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2220      	movs	r2, #32
 800fa90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2200      	movs	r2, #0
 800fa98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	e063      	b.n	800fb68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f003 0304 	and.w	r3, r3, #4
 800faaa:	2b04      	cmp	r3, #4
 800faac:	d149      	bne.n	800fb42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800faae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fab6:	2200      	movs	r2, #0
 800fab8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 f857 	bl	800fb70 <UART_WaitOnFlagUntilTimeout>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d03c      	beq.n	800fb42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800face:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	623b      	str	r3, [r7, #32]
   return(result);
 800fad6:	6a3b      	ldr	r3, [r7, #32]
 800fad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fadc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fae6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800faec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faee:	e841 2300 	strex	r3, r2, [r1]
 800faf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800faf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1e6      	bne.n	800fac8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	3308      	adds	r3, #8
 800fb00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	e853 3f00 	ldrex	r3, [r3]
 800fb08:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f023 0301 	bic.w	r3, r3, #1
 800fb10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3308      	adds	r3, #8
 800fb18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb1a:	61fa      	str	r2, [r7, #28]
 800fb1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1e:	69b9      	ldr	r1, [r7, #24]
 800fb20:	69fa      	ldr	r2, [r7, #28]
 800fb22:	e841 2300 	strex	r3, r2, [r1]
 800fb26:	617b      	str	r3, [r7, #20]
   return(result);
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1e5      	bne.n	800fafa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2220      	movs	r2, #32
 800fb32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb3e:	2303      	movs	r3, #3
 800fb40:	e012      	b.n	800fb68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2220      	movs	r2, #32
 800fb46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2220      	movs	r2, #32
 800fb4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3758      	adds	r7, #88	@ 0x58
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	603b      	str	r3, [r7, #0]
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb80:	e04f      	b.n	800fc22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb88:	d04b      	beq.n	800fc22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb8a:	f7f2 fef3 	bl	8002974 <HAL_GetTick>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	69ba      	ldr	r2, [r7, #24]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d302      	bcc.n	800fba0 <UART_WaitOnFlagUntilTimeout+0x30>
 800fb9a:	69bb      	ldr	r3, [r7, #24]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d101      	bne.n	800fba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fba0:	2303      	movs	r3, #3
 800fba2:	e04e      	b.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 0304 	and.w	r3, r3, #4
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d037      	beq.n	800fc22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	2b80      	cmp	r3, #128	@ 0x80
 800fbb6:	d034      	beq.n	800fc22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	2b40      	cmp	r3, #64	@ 0x40
 800fbbc:	d031      	beq.n	800fc22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	69db      	ldr	r3, [r3, #28]
 800fbc4:	f003 0308 	and.w	r3, r3, #8
 800fbc8:	2b08      	cmp	r3, #8
 800fbca:	d110      	bne.n	800fbee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2208      	movs	r2, #8
 800fbd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f000 f839 	bl	800fc4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2208      	movs	r2, #8
 800fbde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fbea:	2301      	movs	r3, #1
 800fbec:	e029      	b.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	69db      	ldr	r3, [r3, #28]
 800fbf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fbf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fbfc:	d111      	bne.n	800fc22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f000 f81f 	bl	800fc4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	2220      	movs	r2, #32
 800fc12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fc1e:	2303      	movs	r3, #3
 800fc20:	e00f      	b.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	69da      	ldr	r2, [r3, #28]
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	4013      	ands	r3, r2
 800fc2c:	68ba      	ldr	r2, [r7, #8]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	bf0c      	ite	eq
 800fc32:	2301      	moveq	r3, #1
 800fc34:	2300      	movne	r3, #0
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	461a      	mov	r2, r3
 800fc3a:	79fb      	ldrb	r3, [r7, #7]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d0a0      	beq.n	800fb82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc40:	2300      	movs	r3, #0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
	...

0800fc4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b095      	sub	sp, #84	@ 0x54
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc5c:	e853 3f00 	ldrex	r3, [r3]
 800fc60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc72:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc7a:	e841 2300 	strex	r3, r2, [r1]
 800fc7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d1e6      	bne.n	800fc54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	3308      	adds	r3, #8
 800fc8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8e:	6a3b      	ldr	r3, [r7, #32]
 800fc90:	e853 3f00 	ldrex	r3, [r3]
 800fc94:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc96:	69fa      	ldr	r2, [r7, #28]
 800fc98:	4b1e      	ldr	r3, [pc, #120]	@ (800fd14 <UART_EndRxTransfer+0xc8>)
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	3308      	adds	r3, #8
 800fca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fcac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcae:	e841 2300 	strex	r3, r2, [r1]
 800fcb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1e5      	bne.n	800fc86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d118      	bne.n	800fcf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	e853 3f00 	ldrex	r3, [r3]
 800fcce:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	f023 0310 	bic.w	r3, r3, #16
 800fcd6:	647b      	str	r3, [r7, #68]	@ 0x44
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fce0:	61bb      	str	r3, [r7, #24]
 800fce2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce4:	6979      	ldr	r1, [r7, #20]
 800fce6:	69ba      	ldr	r2, [r7, #24]
 800fce8:	e841 2300 	strex	r3, r2, [r1]
 800fcec:	613b      	str	r3, [r7, #16]
   return(result);
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1e6      	bne.n	800fcc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2220      	movs	r2, #32
 800fcf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fd08:	bf00      	nop
 800fd0a:	3754      	adds	r7, #84	@ 0x54
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr
 800fd14:	effffffe 	.word	0xeffffffe

0800fd18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d101      	bne.n	800fd2e <HAL_UARTEx_DisableFifoMode+0x16>
 800fd2a:	2302      	movs	r3, #2
 800fd2c:	e027      	b.n	800fd7e <HAL_UARTEx_DisableFifoMode+0x66>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2201      	movs	r2, #1
 800fd32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2224      	movs	r2, #36	@ 0x24
 800fd3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f022 0201 	bic.w	r2, r2, #1
 800fd54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fd5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2220      	movs	r2, #32
 800fd70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd7c:	2300      	movs	r3, #0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3714      	adds	r7, #20
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr

0800fd8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
 800fd92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d101      	bne.n	800fda2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd9e:	2302      	movs	r3, #2
 800fda0:	e02d      	b.n	800fdfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2201      	movs	r2, #1
 800fda6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2224      	movs	r2, #36	@ 0x24
 800fdae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f022 0201 	bic.w	r2, r2, #1
 800fdc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	689b      	ldr	r3, [r3, #8]
 800fdd0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	683a      	ldr	r2, [r7, #0]
 800fdda:	430a      	orrs	r2, r1
 800fddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 f850 	bl	800fe84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2220      	movs	r2, #32
 800fdf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b084      	sub	sp, #16
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d101      	bne.n	800fe1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe1a:	2302      	movs	r3, #2
 800fe1c:	e02d      	b.n	800fe7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2201      	movs	r2, #1
 800fe22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2224      	movs	r2, #36	@ 0x24
 800fe2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f022 0201 	bic.w	r2, r2, #1
 800fe44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	683a      	ldr	r2, [r7, #0]
 800fe56:	430a      	orrs	r2, r1
 800fe58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 f812 	bl	800fe84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	68fa      	ldr	r2, [r7, #12]
 800fe66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2220      	movs	r2, #32
 800fe6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe78:	2300      	movs	r3, #0
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3710      	adds	r7, #16
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
	...

0800fe84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d108      	bne.n	800fea6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2201      	movs	r2, #1
 800fe98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fea4:	e031      	b.n	800ff0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fea6:	2310      	movs	r3, #16
 800fea8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800feaa:	2310      	movs	r3, #16
 800feac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	0e5b      	lsrs	r3, r3, #25
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	f003 0307 	and.w	r3, r3, #7
 800febc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	689b      	ldr	r3, [r3, #8]
 800fec4:	0f5b      	lsrs	r3, r3, #29
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	f003 0307 	and.w	r3, r3, #7
 800fecc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fece:	7bbb      	ldrb	r3, [r7, #14]
 800fed0:	7b3a      	ldrb	r2, [r7, #12]
 800fed2:	4911      	ldr	r1, [pc, #68]	@ (800ff18 <UARTEx_SetNbDataToProcess+0x94>)
 800fed4:	5c8a      	ldrb	r2, [r1, r2]
 800fed6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800feda:	7b3a      	ldrb	r2, [r7, #12]
 800fedc:	490f      	ldr	r1, [pc, #60]	@ (800ff1c <UARTEx_SetNbDataToProcess+0x98>)
 800fede:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fee0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800feec:	7bfb      	ldrb	r3, [r7, #15]
 800feee:	7b7a      	ldrb	r2, [r7, #13]
 800fef0:	4909      	ldr	r1, [pc, #36]	@ (800ff18 <UARTEx_SetNbDataToProcess+0x94>)
 800fef2:	5c8a      	ldrb	r2, [r1, r2]
 800fef4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fef8:	7b7a      	ldrb	r2, [r7, #13]
 800fefa:	4908      	ldr	r1, [pc, #32]	@ (800ff1c <UARTEx_SetNbDataToProcess+0x98>)
 800fefc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fefe:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ff0a:	bf00      	nop
 800ff0c:	3714      	adds	r7, #20
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	08012a94 	.word	0x08012a94
 800ff1c:	08012a9c 	.word	0x08012a9c

0800ff20 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ff20:	b084      	sub	sp, #16
 800ff22:	b480      	push	{r7}
 800ff24:	b085      	sub	sp, #20
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
 800ff2a:	f107 001c 	add.w	r0, r7, #28
 800ff2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ff32:	2300      	movs	r3, #0
 800ff34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ff36:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ff38:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ff3a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ff3e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ff40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ff42:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ff44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800ff46:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	685a      	ldr	r2, [r3, #4]
 800ff52:	4b07      	ldr	r3, [pc, #28]	@ (800ff70 <SDMMC_Init+0x50>)
 800ff54:	4013      	ands	r3, r2
 800ff56:	68fa      	ldr	r2, [r7, #12]
 800ff58:	431a      	orrs	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff5e:	2300      	movs	r3, #0
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3714      	adds	r7, #20
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	b004      	add	sp, #16
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	ffc02c00 	.word	0xffc02c00

0800ff74 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	370c      	adds	r7, #12
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr

0800ff8e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ff8e:	b480      	push	{r7}
 800ff90:	b083      	sub	sp, #12
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
 800ff96:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ffa2:	2300      	movs	r3, #0
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	370c      	adds	r7, #12
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f043 0203 	orr.w	r2, r3, #3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ffc4:	2300      	movs	r3, #0
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	370c      	adds	r7, #12
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr

0800ffd2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ffd2:	b480      	push	{r7}
 800ffd4:	b083      	sub	sp, #12
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f003 0303 	and.w	r3, r3, #3
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
	...

0800fff0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801000e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010014:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801001a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	4313      	orrs	r3, r2
 8010020:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	68da      	ldr	r2, [r3, #12]
 8010026:	4b06      	ldr	r3, [pc, #24]	@ (8010040 <SDMMC_SendCommand+0x50>)
 8010028:	4013      	ands	r3, r2
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	431a      	orrs	r2, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010032:	2300      	movs	r3, #0
}
 8010034:	4618      	mov	r0, r3
 8010036:	3714      	adds	r7, #20
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr
 8010040:	fffee0c0 	.word	0xfffee0c0

08010044 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	b2db      	uxtb	r3, r3
}
 8010052:	4618      	mov	r0, r3
 8010054:	370c      	adds	r7, #12
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr

0801005e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801005e:	b480      	push	{r7}
 8010060:	b085      	sub	sp, #20
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	3314      	adds	r3, #20
 801006c:	461a      	mov	r2, r3
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	4413      	add	r3, r2
 8010072:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3714      	adds	r7, #20
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801008e:	2300      	movs	r3, #0
 8010090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	685a      	ldr	r2, [r3, #4]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100aa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80100b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80100b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	431a      	orrs	r2, r3
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80100ce:	2300      	movs	r3, #0

}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b088      	sub	sp, #32
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80100ea:	2310      	movs	r3, #16
 80100ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100f4:	2300      	movs	r3, #0
 80100f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100fe:	f107 0308 	add.w	r3, r7, #8
 8010102:	4619      	mov	r1, r3
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7ff ff73 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801010a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801010e:	2110      	movs	r1, #16
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fa5f 	bl	80105d4 <SDMMC_GetCmdResp1>
 8010116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010118:	69fb      	ldr	r3, [r7, #28]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3720      	adds	r7, #32
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b088      	sub	sp, #32
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
 801012a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010130:	2311      	movs	r3, #17
 8010132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010134:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801013a:	2300      	movs	r3, #0
 801013c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801013e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010142:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010144:	f107 0308 	add.w	r3, r7, #8
 8010148:	4619      	mov	r1, r3
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7ff ff50 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010154:	2111      	movs	r1, #17
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 fa3c 	bl	80105d4 <SDMMC_GetCmdResp1>
 801015c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801015e:	69fb      	ldr	r3, [r7, #28]
}
 8010160:	4618      	mov	r0, r3
 8010162:	3720      	adds	r7, #32
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b088      	sub	sp, #32
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010176:	2312      	movs	r3, #18
 8010178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801017a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801017e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010180:	2300      	movs	r3, #0
 8010182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801018a:	f107 0308 	add.w	r3, r7, #8
 801018e:	4619      	mov	r1, r3
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f7ff ff2d 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010196:	f241 3288 	movw	r2, #5000	@ 0x1388
 801019a:	2112      	movs	r1, #18
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fa19 	bl	80105d4 <SDMMC_GetCmdResp1>
 80101a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101a4:	69fb      	ldr	r3, [r7, #28]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3720      	adds	r7, #32
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b088      	sub	sp, #32
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80101bc:	2318      	movs	r3, #24
 80101be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101c6:	2300      	movs	r3, #0
 80101c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101d0:	f107 0308 	add.w	r3, r7, #8
 80101d4:	4619      	mov	r1, r3
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7ff ff0a 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80101dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101e0:	2118      	movs	r1, #24
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f9f6 	bl	80105d4 <SDMMC_GetCmdResp1>
 80101e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101ea:	69fb      	ldr	r3, [r7, #28]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3720      	adds	r7, #32
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b088      	sub	sp, #32
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010202:	2319      	movs	r3, #25
 8010204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010206:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801020a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801020c:	2300      	movs	r3, #0
 801020e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010214:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010216:	f107 0308 	add.w	r3, r7, #8
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7ff fee7 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010226:	2119      	movs	r1, #25
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 f9d3 	bl	80105d4 <SDMMC_GetCmdResp1>
 801022e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010230:	69fb      	ldr	r3, [r7, #28]
}
 8010232:	4618      	mov	r0, r3
 8010234:	3720      	adds	r7, #32
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b088      	sub	sp, #32
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010244:	2300      	movs	r3, #0
 8010246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010248:	230c      	movs	r3, #12
 801024a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801024c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010252:	2300      	movs	r3, #0
 8010254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801025a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010274:	f107 0308 	add.w	r3, r7, #8
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff feb8 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010280:	4a0b      	ldr	r2, [pc, #44]	@ (80102b0 <SDMMC_CmdStopTransfer+0x74>)
 8010282:	210c      	movs	r1, #12
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 f9a5 	bl	80105d4 <SDMMC_GetCmdResp1>
 801028a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801029e:	d101      	bne.n	80102a4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80102a0:	2300      	movs	r3, #0
 80102a2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80102a4:	69fb      	ldr	r3, [r7, #28]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3720      	adds	r7, #32
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop
 80102b0:	05f5e100 	.word	0x05f5e100

080102b4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b088      	sub	sp, #32
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80102c2:	2307      	movs	r3, #7
 80102c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102cc:	2300      	movs	r3, #0
 80102ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102d6:	f107 0308 	add.w	r3, r7, #8
 80102da:	4619      	mov	r1, r3
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f7ff fe87 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80102e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102e6:	2107      	movs	r1, #7
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 f973 	bl	80105d4 <SDMMC_GetCmdResp1>
 80102ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102f0:	69fb      	ldr	r3, [r7, #28]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3720      	adds	r7, #32
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b088      	sub	sp, #32
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010302:	2300      	movs	r3, #0
 8010304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010306:	2300      	movs	r3, #0
 8010308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801030a:	2300      	movs	r3, #0
 801030c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801030e:	2300      	movs	r3, #0
 8010310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010318:	f107 0308 	add.w	r3, r7, #8
 801031c:	4619      	mov	r1, r3
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f7ff fe66 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 fb97 	bl	8010a58 <SDMMC_GetCmdError>
 801032a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801032c:	69fb      	ldr	r3, [r7, #28]
}
 801032e:	4618      	mov	r0, r3
 8010330:	3720      	adds	r7, #32
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b088      	sub	sp, #32
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801033e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010344:	2308      	movs	r3, #8
 8010346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010348:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801034c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801034e:	2300      	movs	r3, #0
 8010350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010356:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010358:	f107 0308 	add.w	r3, r7, #8
 801035c:	4619      	mov	r1, r3
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff fe46 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 fb29 	bl	80109bc <SDMMC_GetCmdResp7>
 801036a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801036c:	69fb      	ldr	r3, [r7, #28]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3720      	adds	r7, #32
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b088      	sub	sp, #32
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010384:	2337      	movs	r3, #55	@ 0x37
 8010386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801038c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801038e:	2300      	movs	r3, #0
 8010390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010398:	f107 0308 	add.w	r3, r7, #8
 801039c:	4619      	mov	r1, r3
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7ff fe26 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80103a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103a8:	2137      	movs	r1, #55	@ 0x37
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 f912 	bl	80105d4 <SDMMC_GetCmdResp1>
 80103b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b2:	69fb      	ldr	r3, [r7, #28]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3720      	adds	r7, #32
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b088      	sub	sp, #32
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80103ca:	2329      	movs	r3, #41	@ 0x29
 80103cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103d4:	2300      	movs	r3, #0
 80103d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103de:	f107 0308 	add.w	r3, r7, #8
 80103e2:	4619      	mov	r1, r3
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff fe03 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 fa2e 	bl	801084c <SDMMC_GetCmdResp3>
 80103f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f2:	69fb      	ldr	r3, [r7, #28]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3720      	adds	r7, #32
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b088      	sub	sp, #32
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801040a:	2306      	movs	r3, #6
 801040c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801040e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010414:	2300      	movs	r3, #0
 8010416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801041c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801041e:	f107 0308 	add.w	r3, r7, #8
 8010422:	4619      	mov	r1, r3
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff fde3 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801042a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801042e:	2106      	movs	r1, #6
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 f8cf 	bl	80105d4 <SDMMC_GetCmdResp1>
 8010436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010438:	69fb      	ldr	r3, [r7, #28]
}
 801043a:	4618      	mov	r0, r3
 801043c:	3720      	adds	r7, #32
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b088      	sub	sp, #32
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801044a:	2300      	movs	r3, #0
 801044c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801044e:	2333      	movs	r3, #51	@ 0x33
 8010450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010452:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010458:	2300      	movs	r3, #0
 801045a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801045c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010462:	f107 0308 	add.w	r3, r7, #8
 8010466:	4619      	mov	r1, r3
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7ff fdc1 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801046e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010472:	2133      	movs	r1, #51	@ 0x33
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 f8ad 	bl	80105d4 <SDMMC_GetCmdResp1>
 801047a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801047c:	69fb      	ldr	r3, [r7, #28]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3720      	adds	r7, #32
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b088      	sub	sp, #32
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801048e:	2300      	movs	r3, #0
 8010490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010492:	2302      	movs	r3, #2
 8010494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010496:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801049a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801049c:	2300      	movs	r3, #0
 801049e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104a6:	f107 0308 	add.w	r3, r7, #8
 80104aa:	4619      	mov	r1, r3
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f7ff fd9f 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 f980 	bl	80107b8 <SDMMC_GetCmdResp2>
 80104b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ba:	69fb      	ldr	r3, [r7, #28]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3720      	adds	r7, #32
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b088      	sub	sp, #32
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80104d2:	2309      	movs	r3, #9
 80104d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80104d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80104da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104dc:	2300      	movs	r3, #0
 80104de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104e6:	f107 0308 	add.w	r3, r7, #8
 80104ea:	4619      	mov	r1, r3
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7ff fd7f 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 f960 	bl	80107b8 <SDMMC_GetCmdResp2>
 80104f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104fa:	69fb      	ldr	r3, [r7, #28]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3720      	adds	r7, #32
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b088      	sub	sp, #32
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801050e:	2300      	movs	r3, #0
 8010510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010512:	2303      	movs	r3, #3
 8010514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801051a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801051c:	2300      	movs	r3, #0
 801051e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010526:	f107 0308 	add.w	r3, r7, #8
 801052a:	4619      	mov	r1, r3
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7ff fd5f 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010532:	683a      	ldr	r2, [r7, #0]
 8010534:	2103      	movs	r1, #3
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 f9c8 	bl	80108cc <SDMMC_GetCmdResp6>
 801053c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801053e:	69fb      	ldr	r3, [r7, #28]
}
 8010540:	4618      	mov	r0, r3
 8010542:	3720      	adds	r7, #32
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b088      	sub	sp, #32
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010556:	230d      	movs	r3, #13
 8010558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801055a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801055e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010560:	2300      	movs	r3, #0
 8010562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010568:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801056a:	f107 0308 	add.w	r3, r7, #8
 801056e:	4619      	mov	r1, r3
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff fd3d 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010576:	f241 3288 	movw	r2, #5000	@ 0x1388
 801057a:	210d      	movs	r1, #13
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 f829 	bl	80105d4 <SDMMC_GetCmdResp1>
 8010582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010584:	69fb      	ldr	r3, [r7, #28]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3720      	adds	r7, #32
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b088      	sub	sp, #32
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010596:	2300      	movs	r3, #0
 8010598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801059a:	230d      	movs	r3, #13
 801059c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801059e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105a4:	2300      	movs	r3, #0
 80105a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105ae:	f107 0308 	add.w	r3, r7, #8
 80105b2:	4619      	mov	r1, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7ff fd1b 	bl	800fff0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80105ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105be:	210d      	movs	r1, #13
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 f807 	bl	80105d4 <SDMMC_GetCmdResp1>
 80105c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105c8:	69fb      	ldr	r3, [r7, #28]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3720      	adds	r7, #32
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
	...

080105d4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b088      	sub	sp, #32
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	460b      	mov	r3, r1
 80105de:	607a      	str	r2, [r7, #4]
 80105e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80105e2:	4b70      	ldr	r3, [pc, #448]	@ (80107a4 <SDMMC_GetCmdResp1+0x1d0>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4a70      	ldr	r2, [pc, #448]	@ (80107a8 <SDMMC_GetCmdResp1+0x1d4>)
 80105e8:	fba2 2303 	umull	r2, r3, r2, r3
 80105ec:	0a5a      	lsrs	r2, r3, #9
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	fb02 f303 	mul.w	r3, r2, r3
 80105f4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	1e5a      	subs	r2, r3, #1
 80105fa:	61fa      	str	r2, [r7, #28]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010600:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010604:	e0c9      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801060a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801060c:	69ba      	ldr	r2, [r7, #24]
 801060e:	4b67      	ldr	r3, [pc, #412]	@ (80107ac <SDMMC_GetCmdResp1+0x1d8>)
 8010610:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010612:	2b00      	cmp	r3, #0
 8010614:	d0ef      	beq.n	80105f6 <SDMMC_GetCmdResp1+0x22>
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1ea      	bne.n	80105f6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010624:	f003 0304 	and.w	r3, r3, #4
 8010628:	2b00      	cmp	r3, #0
 801062a:	d004      	beq.n	8010636 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2204      	movs	r2, #4
 8010630:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010632:	2304      	movs	r3, #4
 8010634:	e0b1      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801063a:	f003 0301 	and.w	r3, r3, #1
 801063e:	2b00      	cmp	r3, #0
 8010640:	d004      	beq.n	801064c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2201      	movs	r2, #1
 8010646:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010648:	2301      	movs	r3, #1
 801064a:	e0a6      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	4a58      	ldr	r2, [pc, #352]	@ (80107b0 <SDMMC_GetCmdResp1+0x1dc>)
 8010650:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010652:	68f8      	ldr	r0, [r7, #12]
 8010654:	f7ff fcf6 	bl	8010044 <SDMMC_GetCommandResponse>
 8010658:	4603      	mov	r3, r0
 801065a:	461a      	mov	r2, r3
 801065c:	7afb      	ldrb	r3, [r7, #11]
 801065e:	4293      	cmp	r3, r2
 8010660:	d001      	beq.n	8010666 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010662:	2301      	movs	r3, #1
 8010664:	e099      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010666:	2100      	movs	r1, #0
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f7ff fcf8 	bl	801005e <SDMMC_GetResponse>
 801066e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010670:	697a      	ldr	r2, [r7, #20]
 8010672:	4b50      	ldr	r3, [pc, #320]	@ (80107b4 <SDMMC_GetCmdResp1+0x1e0>)
 8010674:	4013      	ands	r3, r2
 8010676:	2b00      	cmp	r3, #0
 8010678:	d101      	bne.n	801067e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801067a:	2300      	movs	r3, #0
 801067c:	e08d      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	2b00      	cmp	r3, #0
 8010682:	da02      	bge.n	801068a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010684:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010688:	e087      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010690:	2b00      	cmp	r3, #0
 8010692:	d001      	beq.n	8010698 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010694:	2340      	movs	r3, #64	@ 0x40
 8010696:	e080      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d001      	beq.n	80106a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80106a2:	2380      	movs	r3, #128	@ 0x80
 80106a4:	e079      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d002      	beq.n	80106b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80106b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80106b4:	e071      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d002      	beq.n	80106c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80106c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106c4:	e069      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d002      	beq.n	80106d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80106d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80106d4:	e061      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d002      	beq.n	80106e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80106e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80106e4:	e059      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d002      	beq.n	80106f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80106f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80106f4:	e051      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d002      	beq.n	8010706 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010700:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010704:	e049      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801070c:	2b00      	cmp	r3, #0
 801070e:	d002      	beq.n	8010716 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010710:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010714:	e041      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010724:	e039      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010730:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010734:	e031      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801073c:	2b00      	cmp	r3, #0
 801073e:	d002      	beq.n	8010746 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010740:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010744:	e029      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010750:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010754:	e021      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801075c:	2b00      	cmp	r3, #0
 801075e:	d002      	beq.n	8010766 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010760:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010764:	e019      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801076c:	2b00      	cmp	r3, #0
 801076e:	d002      	beq.n	8010776 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010770:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010774:	e011      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801077c:	2b00      	cmp	r3, #0
 801077e:	d002      	beq.n	8010786 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010780:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010784:	e009      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	f003 0308 	and.w	r3, r3, #8
 801078c:	2b00      	cmp	r3, #0
 801078e:	d002      	beq.n	8010796 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010790:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010794:	e001      	b.n	801079a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010796:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801079a:	4618      	mov	r0, r3
 801079c:	3720      	adds	r7, #32
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	2400000c 	.word	0x2400000c
 80107a8:	10624dd3 	.word	0x10624dd3
 80107ac:	00200045 	.word	0x00200045
 80107b0:	002000c5 	.word	0x002000c5
 80107b4:	fdffe008 	.word	0xfdffe008

080107b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b085      	sub	sp, #20
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80107c0:	4b1f      	ldr	r3, [pc, #124]	@ (8010840 <SDMMC_GetCmdResp2+0x88>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4a1f      	ldr	r2, [pc, #124]	@ (8010844 <SDMMC_GetCmdResp2+0x8c>)
 80107c6:	fba2 2303 	umull	r2, r3, r2, r3
 80107ca:	0a5b      	lsrs	r3, r3, #9
 80107cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107d0:	fb02 f303 	mul.w	r3, r2, r3
 80107d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	1e5a      	subs	r2, r3, #1
 80107da:	60fa      	str	r2, [r7, #12]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d102      	bne.n	80107e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107e4:	e026      	b.n	8010834 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d0ef      	beq.n	80107d6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1ea      	bne.n	80107d6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010804:	f003 0304 	and.w	r3, r3, #4
 8010808:	2b00      	cmp	r3, #0
 801080a:	d004      	beq.n	8010816 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2204      	movs	r2, #4
 8010810:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010812:	2304      	movs	r3, #4
 8010814:	e00e      	b.n	8010834 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801081a:	f003 0301 	and.w	r3, r3, #1
 801081e:	2b00      	cmp	r3, #0
 8010820:	d004      	beq.n	801082c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2201      	movs	r2, #1
 8010826:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010828:	2301      	movs	r3, #1
 801082a:	e003      	b.n	8010834 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	4a06      	ldr	r2, [pc, #24]	@ (8010848 <SDMMC_GetCmdResp2+0x90>)
 8010830:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010832:	2300      	movs	r3, #0
}
 8010834:	4618      	mov	r0, r3
 8010836:	3714      	adds	r7, #20
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr
 8010840:	2400000c 	.word	0x2400000c
 8010844:	10624dd3 	.word	0x10624dd3
 8010848:	002000c5 	.word	0x002000c5

0801084c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010854:	4b1a      	ldr	r3, [pc, #104]	@ (80108c0 <SDMMC_GetCmdResp3+0x74>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4a1a      	ldr	r2, [pc, #104]	@ (80108c4 <SDMMC_GetCmdResp3+0x78>)
 801085a:	fba2 2303 	umull	r2, r3, r2, r3
 801085e:	0a5b      	lsrs	r3, r3, #9
 8010860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010864:	fb02 f303 	mul.w	r3, r2, r3
 8010868:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	1e5a      	subs	r2, r3, #1
 801086e:	60fa      	str	r2, [r7, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d102      	bne.n	801087a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010874:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010878:	e01b      	b.n	80108b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801087e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010886:	2b00      	cmp	r3, #0
 8010888:	d0ef      	beq.n	801086a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1ea      	bne.n	801086a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010898:	f003 0304 	and.w	r3, r3, #4
 801089c:	2b00      	cmp	r3, #0
 801089e:	d004      	beq.n	80108aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2204      	movs	r2, #4
 80108a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108a6:	2304      	movs	r3, #4
 80108a8:	e003      	b.n	80108b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4a06      	ldr	r2, [pc, #24]	@ (80108c8 <SDMMC_GetCmdResp3+0x7c>)
 80108ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3714      	adds	r7, #20
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop
 80108c0:	2400000c 	.word	0x2400000c
 80108c4:	10624dd3 	.word	0x10624dd3
 80108c8:	002000c5 	.word	0x002000c5

080108cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b088      	sub	sp, #32
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	460b      	mov	r3, r1
 80108d6:	607a      	str	r2, [r7, #4]
 80108d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80108da:	4b35      	ldr	r3, [pc, #212]	@ (80109b0 <SDMMC_GetCmdResp6+0xe4>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	4a35      	ldr	r2, [pc, #212]	@ (80109b4 <SDMMC_GetCmdResp6+0xe8>)
 80108e0:	fba2 2303 	umull	r2, r3, r2, r3
 80108e4:	0a5b      	lsrs	r3, r3, #9
 80108e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108ea:	fb02 f303 	mul.w	r3, r2, r3
 80108ee:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80108f0:	69fb      	ldr	r3, [r7, #28]
 80108f2:	1e5a      	subs	r2, r3, #1
 80108f4:	61fa      	str	r2, [r7, #28]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d102      	bne.n	8010900 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80108fe:	e052      	b.n	80109a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010904:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801090c:	2b00      	cmp	r3, #0
 801090e:	d0ef      	beq.n	80108f0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010910:	69bb      	ldr	r3, [r7, #24]
 8010912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1ea      	bne.n	80108f0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801091e:	f003 0304 	and.w	r3, r3, #4
 8010922:	2b00      	cmp	r3, #0
 8010924:	d004      	beq.n	8010930 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2204      	movs	r2, #4
 801092a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801092c:	2304      	movs	r3, #4
 801092e:	e03a      	b.n	80109a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010934:	f003 0301 	and.w	r3, r3, #1
 8010938:	2b00      	cmp	r3, #0
 801093a:	d004      	beq.n	8010946 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2201      	movs	r2, #1
 8010940:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010942:	2301      	movs	r3, #1
 8010944:	e02f      	b.n	80109a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f7ff fb7c 	bl	8010044 <SDMMC_GetCommandResponse>
 801094c:	4603      	mov	r3, r0
 801094e:	461a      	mov	r2, r3
 8010950:	7afb      	ldrb	r3, [r7, #11]
 8010952:	4293      	cmp	r3, r2
 8010954:	d001      	beq.n	801095a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010956:	2301      	movs	r3, #1
 8010958:	e025      	b.n	80109a6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	4a16      	ldr	r2, [pc, #88]	@ (80109b8 <SDMMC_GetCmdResp6+0xec>)
 801095e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010960:	2100      	movs	r1, #0
 8010962:	68f8      	ldr	r0, [r7, #12]
 8010964:	f7ff fb7b 	bl	801005e <SDMMC_GetResponse>
 8010968:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010970:	2b00      	cmp	r3, #0
 8010972:	d106      	bne.n	8010982 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	0c1b      	lsrs	r3, r3, #16
 8010978:	b29a      	uxth	r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801097e:	2300      	movs	r3, #0
 8010980:	e011      	b.n	80109a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801098c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010990:	e009      	b.n	80109a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109a0:	e001      	b.n	80109a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	2400000c 	.word	0x2400000c
 80109b4:	10624dd3 	.word	0x10624dd3
 80109b8:	002000c5 	.word	0x002000c5

080109bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80109bc:	b480      	push	{r7}
 80109be:	b085      	sub	sp, #20
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109c4:	4b22      	ldr	r3, [pc, #136]	@ (8010a50 <SDMMC_GetCmdResp7+0x94>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a22      	ldr	r2, [pc, #136]	@ (8010a54 <SDMMC_GetCmdResp7+0x98>)
 80109ca:	fba2 2303 	umull	r2, r3, r2, r3
 80109ce:	0a5b      	lsrs	r3, r3, #9
 80109d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109d4:	fb02 f303 	mul.w	r3, r2, r3
 80109d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	1e5a      	subs	r2, r3, #1
 80109de:	60fa      	str	r2, [r7, #12]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d102      	bne.n	80109ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80109e8:	e02c      	b.n	8010a44 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d0ef      	beq.n	80109da <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d1ea      	bne.n	80109da <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a08:	f003 0304 	and.w	r3, r3, #4
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d004      	beq.n	8010a1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2204      	movs	r2, #4
 8010a14:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a16:	2304      	movs	r3, #4
 8010a18:	e014      	b.n	8010a44 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a1e:	f003 0301 	and.w	r3, r3, #1
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d004      	beq.n	8010a30 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2201      	movs	r2, #1
 8010a2a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e009      	b.n	8010a44 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d002      	beq.n	8010a42 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2240      	movs	r2, #64	@ 0x40
 8010a40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a42:	2300      	movs	r3, #0

}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3714      	adds	r7, #20
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr
 8010a50:	2400000c 	.word	0x2400000c
 8010a54:	10624dd3 	.word	0x10624dd3

08010a58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a60:	4b11      	ldr	r3, [pc, #68]	@ (8010aa8 <SDMMC_GetCmdError+0x50>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a11      	ldr	r2, [pc, #68]	@ (8010aac <SDMMC_GetCmdError+0x54>)
 8010a66:	fba2 2303 	umull	r2, r3, r2, r3
 8010a6a:	0a5b      	lsrs	r3, r3, #9
 8010a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a70:	fb02 f303 	mul.w	r3, r2, r3
 8010a74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	1e5a      	subs	r2, r3, #1
 8010a7a:	60fa      	str	r2, [r7, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d102      	bne.n	8010a86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a84:	e009      	b.n	8010a9a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d0f1      	beq.n	8010a76 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a06      	ldr	r2, [pc, #24]	@ (8010ab0 <SDMMC_GetCmdError+0x58>)
 8010a96:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3714      	adds	r7, #20
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop
 8010aa8:	2400000c 	.word	0x2400000c
 8010aac:	10624dd3 	.word	0x10624dd3
 8010ab0:	002000c5 	.word	0x002000c5

08010ab4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010ab8:	4904      	ldr	r1, [pc, #16]	@ (8010acc <MX_FATFS_Init+0x18>)
 8010aba:	4805      	ldr	r0, [pc, #20]	@ (8010ad0 <MX_FATFS_Init+0x1c>)
 8010abc:	f001 f908 	bl	8011cd0 <FATFS_LinkDriver>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	4b03      	ldr	r3, [pc, #12]	@ (8010ad4 <MX_FATFS_Init+0x20>)
 8010ac6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ac8:	bf00      	nop
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	24001824 	.word	0x24001824
 8010ad0:	08012aa4 	.word	0x08012aa4
 8010ad4:	24001820 	.word	0x24001820

08010ad8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010ae2:	f000 f885 	bl	8010bf0 <BSP_SD_IsDetected>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d001      	beq.n	8010af0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010aec:	2302      	movs	r3, #2
 8010aee:	e012      	b.n	8010b16 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010af0:	480b      	ldr	r0, [pc, #44]	@ (8010b20 <BSP_SD_Init+0x48>)
 8010af2:	f7fb f95d 	bl	800bdb0 <HAL_SD_Init>
 8010af6:	4603      	mov	r3, r0
 8010af8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010afa:	79fb      	ldrb	r3, [r7, #7]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d109      	bne.n	8010b14 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010b00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010b04:	4806      	ldr	r0, [pc, #24]	@ (8010b20 <BSP_SD_Init+0x48>)
 8010b06:	f7fc f813 	bl	800cb30 <HAL_SD_ConfigWideBusOperation>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d001      	beq.n	8010b14 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010b10:	2301      	movs	r3, #1
 8010b12:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010b14:	79fb      	ldrb	r3, [r7, #7]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3708      	adds	r7, #8
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	2400032c 	.word	0x2400032c

08010b24 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b30:	2300      	movs	r3, #0
 8010b32:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	68f9      	ldr	r1, [r7, #12]
 8010b3a:	4806      	ldr	r0, [pc, #24]	@ (8010b54 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010b3c:	f7fb fa58 	bl	800bff0 <HAL_SD_ReadBlocks_DMA>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d001      	beq.n	8010b4a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010b46:	2301      	movs	r3, #1
 8010b48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3718      	adds	r7, #24
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	2400032c 	.word	0x2400032c

08010b58 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b086      	sub	sp, #24
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	68f9      	ldr	r1, [r7, #12]
 8010b6e:	4806      	ldr	r0, [pc, #24]	@ (8010b88 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010b70:	f7fb fae6 	bl	800c140 <HAL_SD_WriteBlocks_DMA>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3718      	adds	r7, #24
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	2400032c 	.word	0x2400032c

08010b8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010b90:	4805      	ldr	r0, [pc, #20]	@ (8010ba8 <BSP_SD_GetCardState+0x1c>)
 8010b92:	f7fc f8df 	bl	800cd54 <HAL_SD_GetCardState>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b04      	cmp	r3, #4
 8010b9a:	bf14      	ite	ne
 8010b9c:	2301      	movne	r3, #1
 8010b9e:	2300      	moveq	r3, #0
 8010ba0:	b2db      	uxtb	r3, r3
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	2400032c 	.word	0x2400032c

08010bac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010bb4:	6879      	ldr	r1, [r7, #4]
 8010bb6:	4803      	ldr	r0, [pc, #12]	@ (8010bc4 <BSP_SD_GetCardInfo+0x18>)
 8010bb8:	f7fb ff8e 	bl	800cad8 <HAL_SD_GetCardInfo>
}
 8010bbc:	bf00      	nop
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	2400032c 	.word	0x2400032c

08010bc8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010bd0:	f000 f9a0 	bl	8010f14 <BSP_SD_WriteCpltCallback>
}
 8010bd4:	bf00      	nop
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010be4:	f000 f9a2 	bl	8010f2c <BSP_SD_ReadCpltCallback>
}
 8010be8:	bf00      	nop
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010bfa:	f000 f80b 	bl	8010c14 <BSP_PlatformIsDetected>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d101      	bne.n	8010c08 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010c04:	2300      	movs	r3, #0
 8010c06:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010c08:	79fb      	ldrb	r3, [r7, #7]
 8010c0a:	b2db      	uxtb	r3, r3
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3708      	adds	r7, #8
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010c22:	4806      	ldr	r0, [pc, #24]	@ (8010c3c <BSP_PlatformIsDetected+0x28>)
 8010c24:	f7f7 fd0c 	bl	8008640 <HAL_GPIO_ReadPin>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d001      	beq.n	8010c32 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010c32:	79fb      	ldrb	r3, [r7, #7]
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	58021400 	.word	0x58021400

08010c40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010c48:	f7f1 fe94 	bl	8002974 <HAL_GetTick>
 8010c4c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010c4e:	e006      	b.n	8010c5e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c50:	f7ff ff9c 	bl	8010b8c <BSP_SD_GetCardState>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e009      	b.n	8010c72 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010c5e:	f7f1 fe89 	bl	8002974 <HAL_GetTick>
 8010c62:	4602      	mov	r2, r0
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d8f0      	bhi.n	8010c50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
	...

08010c7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	4603      	mov	r3, r0
 8010c84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010c86:	4b0b      	ldr	r3, [pc, #44]	@ (8010cb4 <SD_CheckStatus+0x38>)
 8010c88:	2201      	movs	r2, #1
 8010c8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010c8c:	f7ff ff7e 	bl	8010b8c <BSP_SD_GetCardState>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d107      	bne.n	8010ca6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010c96:	4b07      	ldr	r3, [pc, #28]	@ (8010cb4 <SD_CheckStatus+0x38>)
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	f023 0301 	bic.w	r3, r3, #1
 8010ca0:	b2da      	uxtb	r2, r3
 8010ca2:	4b04      	ldr	r3, [pc, #16]	@ (8010cb4 <SD_CheckStatus+0x38>)
 8010ca4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010ca6:	4b03      	ldr	r3, [pc, #12]	@ (8010cb4 <SD_CheckStatus+0x38>)
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	b2db      	uxtb	r3, r3
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	24000019 	.word	0x24000019

08010cb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010cc2:	f7ff ff09 	bl	8010ad8 <BSP_SD_Init>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d107      	bne.n	8010cdc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010ccc:	79fb      	ldrb	r3, [r7, #7]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7ff ffd4 	bl	8010c7c <SD_CheckStatus>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	4b04      	ldr	r3, [pc, #16]	@ (8010cec <SD_initialize+0x34>)
 8010cda:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010cdc:	4b03      	ldr	r3, [pc, #12]	@ (8010cec <SD_initialize+0x34>)
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	b2db      	uxtb	r3, r3
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3708      	adds	r7, #8
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	24000019 	.word	0x24000019

08010cf0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010cfa:	79fb      	ldrb	r3, [r7, #7]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7ff ffbd 	bl	8010c7c <SD_CheckStatus>
 8010d02:	4603      	mov	r3, r0
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b086      	sub	sp, #24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60b9      	str	r1, [r7, #8]
 8010d14:	607a      	str	r2, [r7, #4]
 8010d16:	603b      	str	r3, [r7, #0]
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d20:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010d24:	f7ff ff8c 	bl	8010c40 <SD_CheckStatusWithTimeout>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	da01      	bge.n	8010d32 <SD_read+0x26>
  {
    return res;
 8010d2e:	7dfb      	ldrb	r3, [r7, #23]
 8010d30:	e03b      	b.n	8010daa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010d32:	683a      	ldr	r2, [r7, #0]
 8010d34:	6879      	ldr	r1, [r7, #4]
 8010d36:	68b8      	ldr	r0, [r7, #8]
 8010d38:	f7ff fef4 	bl	8010b24 <BSP_SD_ReadBlocks_DMA>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d132      	bne.n	8010da8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010d42:	4b1c      	ldr	r3, [pc, #112]	@ (8010db4 <SD_read+0xa8>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010d48:	f7f1 fe14 	bl	8002974 <HAL_GetTick>
 8010d4c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d4e:	bf00      	nop
 8010d50:	4b18      	ldr	r3, [pc, #96]	@ (8010db4 <SD_read+0xa8>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d108      	bne.n	8010d6a <SD_read+0x5e>
 8010d58:	f7f1 fe0c 	bl	8002974 <HAL_GetTick>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d9f2      	bls.n	8010d50 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010d6a:	4b12      	ldr	r3, [pc, #72]	@ (8010db4 <SD_read+0xa8>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d102      	bne.n	8010d78 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010d72:	2301      	movs	r3, #1
 8010d74:	75fb      	strb	r3, [r7, #23]
 8010d76:	e017      	b.n	8010da8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010d78:	4b0e      	ldr	r3, [pc, #56]	@ (8010db4 <SD_read+0xa8>)
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010d7e:	f7f1 fdf9 	bl	8002974 <HAL_GetTick>
 8010d82:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d84:	e007      	b.n	8010d96 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d86:	f7ff ff01 	bl	8010b8c <BSP_SD_GetCardState>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d102      	bne.n	8010d96 <SD_read+0x8a>
          {
            res = RES_OK;
 8010d90:	2300      	movs	r3, #0
 8010d92:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010d94:	e008      	b.n	8010da8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d96:	f7f1 fded 	bl	8002974 <HAL_GetTick>
 8010d9a:	4602      	mov	r2, r0
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	1ad3      	subs	r3, r2, r3
 8010da0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d9ee      	bls.n	8010d86 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3718      	adds	r7, #24
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	24001830 	.word	0x24001830

08010db8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b086      	sub	sp, #24
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	60b9      	str	r1, [r7, #8]
 8010dc0:	607a      	str	r2, [r7, #4]
 8010dc2:	603b      	str	r3, [r7, #0]
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010dc8:	2301      	movs	r3, #1
 8010dca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010dcc:	4b24      	ldr	r3, [pc, #144]	@ (8010e60 <SD_write+0xa8>)
 8010dce:	2200      	movs	r2, #0
 8010dd0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010dd2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010dd6:	f7ff ff33 	bl	8010c40 <SD_CheckStatusWithTimeout>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	da01      	bge.n	8010de4 <SD_write+0x2c>
  {
    return res;
 8010de0:	7dfb      	ldrb	r3, [r7, #23]
 8010de2:	e038      	b.n	8010e56 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	6879      	ldr	r1, [r7, #4]
 8010de8:	68b8      	ldr	r0, [r7, #8]
 8010dea:	f7ff feb5 	bl	8010b58 <BSP_SD_WriteBlocks_DMA>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d12f      	bne.n	8010e54 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010df4:	f7f1 fdbe 	bl	8002974 <HAL_GetTick>
 8010df8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010dfa:	bf00      	nop
 8010dfc:	4b18      	ldr	r3, [pc, #96]	@ (8010e60 <SD_write+0xa8>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d108      	bne.n	8010e16 <SD_write+0x5e>
 8010e04:	f7f1 fdb6 	bl	8002974 <HAL_GetTick>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d9f2      	bls.n	8010dfc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010e16:	4b12      	ldr	r3, [pc, #72]	@ (8010e60 <SD_write+0xa8>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d102      	bne.n	8010e24 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	75fb      	strb	r3, [r7, #23]
 8010e22:	e017      	b.n	8010e54 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010e24:	4b0e      	ldr	r3, [pc, #56]	@ (8010e60 <SD_write+0xa8>)
 8010e26:	2200      	movs	r2, #0
 8010e28:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010e2a:	f7f1 fda3 	bl	8002974 <HAL_GetTick>
 8010e2e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e30:	e007      	b.n	8010e42 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e32:	f7ff feab 	bl	8010b8c <BSP_SD_GetCardState>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d102      	bne.n	8010e42 <SD_write+0x8a>
          {
            res = RES_OK;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	75fb      	strb	r3, [r7, #23]
            break;
 8010e40:	e008      	b.n	8010e54 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e42:	f7f1 fd97 	bl	8002974 <HAL_GetTick>
 8010e46:	4602      	mov	r2, r0
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d9ee      	bls.n	8010e32 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3718      	adds	r7, #24
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	2400182c 	.word	0x2400182c

08010e64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b08c      	sub	sp, #48	@ 0x30
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	603a      	str	r2, [r7, #0]
 8010e6e:	71fb      	strb	r3, [r7, #7]
 8010e70:	460b      	mov	r3, r1
 8010e72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010e74:	2301      	movs	r3, #1
 8010e76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010e7a:	4b25      	ldr	r3, [pc, #148]	@ (8010f10 <SD_ioctl+0xac>)
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	f003 0301 	and.w	r3, r3, #1
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d001      	beq.n	8010e8c <SD_ioctl+0x28>
 8010e88:	2303      	movs	r3, #3
 8010e8a:	e03c      	b.n	8010f06 <SD_ioctl+0xa2>

  switch (cmd)
 8010e8c:	79bb      	ldrb	r3, [r7, #6]
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d834      	bhi.n	8010efc <SD_ioctl+0x98>
 8010e92:	a201      	add	r2, pc, #4	@ (adr r2, 8010e98 <SD_ioctl+0x34>)
 8010e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e98:	08010ea9 	.word	0x08010ea9
 8010e9c:	08010eb1 	.word	0x08010eb1
 8010ea0:	08010ec9 	.word	0x08010ec9
 8010ea4:	08010ee3 	.word	0x08010ee3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010eae:	e028      	b.n	8010f02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010eb0:	f107 0308 	add.w	r3, r7, #8
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7ff fe79 	bl	8010bac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010eba:	6a3a      	ldr	r2, [r7, #32]
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ec6:	e01c      	b.n	8010f02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ec8:	f107 0308 	add.w	r3, r7, #8
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7ff fe6d 	bl	8010bac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010eda:	2300      	movs	r3, #0
 8010edc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ee0:	e00f      	b.n	8010f02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ee2:	f107 0308 	add.w	r3, r7, #8
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7ff fe60 	bl	8010bac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eee:	0a5a      	lsrs	r2, r3, #9
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010efa:	e002      	b.n	8010f02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010efc:	2304      	movs	r3, #4
 8010efe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010f02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3730      	adds	r7, #48	@ 0x30
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	24000019 	.word	0x24000019

08010f14 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010f14:	b480      	push	{r7}
 8010f16:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010f18:	4b03      	ldr	r3, [pc, #12]	@ (8010f28 <BSP_SD_WriteCpltCallback+0x14>)
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	601a      	str	r2, [r3, #0]
}
 8010f1e:	bf00      	nop
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr
 8010f28:	2400182c 	.word	0x2400182c

08010f2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010f30:	4b03      	ldr	r3, [pc, #12]	@ (8010f40 <BSP_SD_ReadCpltCallback+0x14>)
 8010f32:	2201      	movs	r2, #1
 8010f34:	601a      	str	r2, [r3, #0]
}
 8010f36:	bf00      	nop
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr
 8010f40:	24001830 	.word	0x24001830

08010f44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010f4e:	79fb      	ldrb	r3, [r7, #7]
 8010f50:	4a08      	ldr	r2, [pc, #32]	@ (8010f74 <disk_status+0x30>)
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	4413      	add	r3, r2
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	79fa      	ldrb	r2, [r7, #7]
 8010f5c:	4905      	ldr	r1, [pc, #20]	@ (8010f74 <disk_status+0x30>)
 8010f5e:	440a      	add	r2, r1
 8010f60:	7a12      	ldrb	r2, [r2, #8]
 8010f62:	4610      	mov	r0, r2
 8010f64:	4798      	blx	r3
 8010f66:	4603      	mov	r3, r0
 8010f68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3710      	adds	r7, #16
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	24001a5c 	.word	0x24001a5c

08010f78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	4603      	mov	r3, r0
 8010f80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010f82:	2300      	movs	r3, #0
 8010f84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010f86:	79fb      	ldrb	r3, [r7, #7]
 8010f88:	4a0e      	ldr	r2, [pc, #56]	@ (8010fc4 <disk_initialize+0x4c>)
 8010f8a:	5cd3      	ldrb	r3, [r2, r3]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d114      	bne.n	8010fba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010f90:	79fb      	ldrb	r3, [r7, #7]
 8010f92:	4a0c      	ldr	r2, [pc, #48]	@ (8010fc4 <disk_initialize+0x4c>)
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	79fa      	ldrb	r2, [r7, #7]
 8010f9e:	4909      	ldr	r1, [pc, #36]	@ (8010fc4 <disk_initialize+0x4c>)
 8010fa0:	440a      	add	r2, r1
 8010fa2:	7a12      	ldrb	r2, [r2, #8]
 8010fa4:	4610      	mov	r0, r2
 8010fa6:	4798      	blx	r3
 8010fa8:	4603      	mov	r3, r0
 8010faa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010fac:	7bfb      	ldrb	r3, [r7, #15]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d103      	bne.n	8010fba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010fb2:	79fb      	ldrb	r3, [r7, #7]
 8010fb4:	4a03      	ldr	r2, [pc, #12]	@ (8010fc4 <disk_initialize+0x4c>)
 8010fb6:	2101      	movs	r1, #1
 8010fb8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3710      	adds	r7, #16
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	24001a5c 	.word	0x24001a5c

08010fc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010fc8:	b590      	push	{r4, r7, lr}
 8010fca:	b087      	sub	sp, #28
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60b9      	str	r1, [r7, #8]
 8010fd0:	607a      	str	r2, [r7, #4]
 8010fd2:	603b      	str	r3, [r7, #0]
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010fd8:	7bfb      	ldrb	r3, [r7, #15]
 8010fda:	4a0a      	ldr	r2, [pc, #40]	@ (8011004 <disk_read+0x3c>)
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	4413      	add	r3, r2
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	689c      	ldr	r4, [r3, #8]
 8010fe4:	7bfb      	ldrb	r3, [r7, #15]
 8010fe6:	4a07      	ldr	r2, [pc, #28]	@ (8011004 <disk_read+0x3c>)
 8010fe8:	4413      	add	r3, r2
 8010fea:	7a18      	ldrb	r0, [r3, #8]
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	68b9      	ldr	r1, [r7, #8]
 8010ff2:	47a0      	blx	r4
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	371c      	adds	r7, #28
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd90      	pop	{r4, r7, pc}
 8011002:	bf00      	nop
 8011004:	24001a5c 	.word	0x24001a5c

08011008 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011008:	b590      	push	{r4, r7, lr}
 801100a:	b087      	sub	sp, #28
 801100c:	af00      	add	r7, sp, #0
 801100e:	60b9      	str	r1, [r7, #8]
 8011010:	607a      	str	r2, [r7, #4]
 8011012:	603b      	str	r3, [r7, #0]
 8011014:	4603      	mov	r3, r0
 8011016:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011018:	7bfb      	ldrb	r3, [r7, #15]
 801101a:	4a0a      	ldr	r2, [pc, #40]	@ (8011044 <disk_write+0x3c>)
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	4413      	add	r3, r2
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	68dc      	ldr	r4, [r3, #12]
 8011024:	7bfb      	ldrb	r3, [r7, #15]
 8011026:	4a07      	ldr	r2, [pc, #28]	@ (8011044 <disk_write+0x3c>)
 8011028:	4413      	add	r3, r2
 801102a:	7a18      	ldrb	r0, [r3, #8]
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	687a      	ldr	r2, [r7, #4]
 8011030:	68b9      	ldr	r1, [r7, #8]
 8011032:	47a0      	blx	r4
 8011034:	4603      	mov	r3, r0
 8011036:	75fb      	strb	r3, [r7, #23]
  return res;
 8011038:	7dfb      	ldrb	r3, [r7, #23]
}
 801103a:	4618      	mov	r0, r3
 801103c:	371c      	adds	r7, #28
 801103e:	46bd      	mov	sp, r7
 8011040:	bd90      	pop	{r4, r7, pc}
 8011042:	bf00      	nop
 8011044:	24001a5c 	.word	0x24001a5c

08011048 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	4603      	mov	r3, r0
 8011050:	603a      	str	r2, [r7, #0]
 8011052:	71fb      	strb	r3, [r7, #7]
 8011054:	460b      	mov	r3, r1
 8011056:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011058:	79fb      	ldrb	r3, [r7, #7]
 801105a:	4a09      	ldr	r2, [pc, #36]	@ (8011080 <disk_ioctl+0x38>)
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	4413      	add	r3, r2
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	691b      	ldr	r3, [r3, #16]
 8011064:	79fa      	ldrb	r2, [r7, #7]
 8011066:	4906      	ldr	r1, [pc, #24]	@ (8011080 <disk_ioctl+0x38>)
 8011068:	440a      	add	r2, r1
 801106a:	7a10      	ldrb	r0, [r2, #8]
 801106c:	79b9      	ldrb	r1, [r7, #6]
 801106e:	683a      	ldr	r2, [r7, #0]
 8011070:	4798      	blx	r3
 8011072:	4603      	mov	r3, r0
 8011074:	73fb      	strb	r3, [r7, #15]
  return res;
 8011076:	7bfb      	ldrb	r3, [r7, #15]
}
 8011078:	4618      	mov	r0, r3
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	24001a5c 	.word	0x24001a5c

08011084 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011084:	b480      	push	{r7}
 8011086:	b085      	sub	sp, #20
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	3301      	adds	r3, #1
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011094:	89fb      	ldrh	r3, [r7, #14]
 8011096:	021b      	lsls	r3, r3, #8
 8011098:	b21a      	sxth	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	b21b      	sxth	r3, r3
 80110a0:	4313      	orrs	r3, r2
 80110a2:	b21b      	sxth	r3, r3
 80110a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80110a6:	89fb      	ldrh	r3, [r7, #14]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3714      	adds	r7, #20
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr

080110b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80110b4:	b480      	push	{r7}
 80110b6:	b085      	sub	sp, #20
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	3303      	adds	r3, #3
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	021b      	lsls	r3, r3, #8
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	3202      	adds	r2, #2
 80110cc:	7812      	ldrb	r2, [r2, #0]
 80110ce:	4313      	orrs	r3, r2
 80110d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	021b      	lsls	r3, r3, #8
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	3201      	adds	r2, #1
 80110da:	7812      	ldrb	r2, [r2, #0]
 80110dc:	4313      	orrs	r3, r2
 80110de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	021b      	lsls	r3, r3, #8
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	7812      	ldrb	r2, [r2, #0]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80110ec:	68fb      	ldr	r3, [r7, #12]
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3714      	adds	r7, #20
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr
	...

080110fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b085      	sub	sp, #20
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011104:	2300      	movs	r3, #0
 8011106:	60fb      	str	r3, [r7, #12]
 8011108:	e010      	b.n	801112c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801110a:	4a0d      	ldr	r2, [pc, #52]	@ (8011140 <clear_lock+0x44>)
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	011b      	lsls	r3, r3, #4
 8011110:	4413      	add	r3, r2
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	687a      	ldr	r2, [r7, #4]
 8011116:	429a      	cmp	r2, r3
 8011118:	d105      	bne.n	8011126 <clear_lock+0x2a>
 801111a:	4a09      	ldr	r2, [pc, #36]	@ (8011140 <clear_lock+0x44>)
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	011b      	lsls	r3, r3, #4
 8011120:	4413      	add	r3, r2
 8011122:	2200      	movs	r2, #0
 8011124:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	3301      	adds	r3, #1
 801112a:	60fb      	str	r3, [r7, #12]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2b01      	cmp	r3, #1
 8011130:	d9eb      	bls.n	801110a <clear_lock+0xe>
	}
}
 8011132:	bf00      	nop
 8011134:	bf00      	nop
 8011136:	3714      	adds	r7, #20
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	2400183c 	.word	0x2400183c

08011144 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801114c:	2300      	movs	r3, #0
 801114e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	78db      	ldrb	r3, [r3, #3]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d034      	beq.n	80111c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801115c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	7858      	ldrb	r0, [r3, #1]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011168:	2301      	movs	r3, #1
 801116a:	697a      	ldr	r2, [r7, #20]
 801116c:	f7ff ff4c 	bl	8011008 <disk_write>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d002      	beq.n	801117c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011176:	2301      	movs	r3, #1
 8011178:	73fb      	strb	r3, [r7, #15]
 801117a:	e022      	b.n	80111c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011186:	697a      	ldr	r2, [r7, #20]
 8011188:	1ad2      	subs	r2, r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a1b      	ldr	r3, [r3, #32]
 801118e:	429a      	cmp	r2, r3
 8011190:	d217      	bcs.n	80111c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	789b      	ldrb	r3, [r3, #2]
 8011196:	613b      	str	r3, [r7, #16]
 8011198:	e010      	b.n	80111bc <sync_window+0x78>
					wsect += fs->fsize;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6a1b      	ldr	r3, [r3, #32]
 801119e:	697a      	ldr	r2, [r7, #20]
 80111a0:	4413      	add	r3, r2
 80111a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	7858      	ldrb	r0, [r3, #1]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80111ae:	2301      	movs	r3, #1
 80111b0:	697a      	ldr	r2, [r7, #20]
 80111b2:	f7ff ff29 	bl	8011008 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	3b01      	subs	r3, #1
 80111ba:	613b      	str	r3, [r7, #16]
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d8eb      	bhi.n	801119a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80111c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3718      	adds	r7, #24
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80111d6:	2300      	movs	r3, #0
 80111d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111de:	683a      	ldr	r2, [r7, #0]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d01b      	beq.n	801121c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f7ff ffad 	bl	8011144 <sync_window>
 80111ea:	4603      	mov	r3, r0
 80111ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80111ee:	7bfb      	ldrb	r3, [r7, #15]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d113      	bne.n	801121c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	7858      	ldrb	r0, [r3, #1]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80111fe:	2301      	movs	r3, #1
 8011200:	683a      	ldr	r2, [r7, #0]
 8011202:	f7ff fee1 	bl	8010fc8 <disk_read>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d004      	beq.n	8011216 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801120c:	f04f 33ff 	mov.w	r3, #4294967295
 8011210:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011212:	2301      	movs	r3, #1
 8011214:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	683a      	ldr	r2, [r7, #0]
 801121a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801121c:	7bfb      	ldrb	r3, [r7, #15]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b086      	sub	sp, #24
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
 801122e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d904      	bls.n	8011246 <get_fat+0x20>
 801123c:	693b      	ldr	r3, [r7, #16]
 801123e:	69db      	ldr	r3, [r3, #28]
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	429a      	cmp	r2, r3
 8011244:	d302      	bcc.n	801124c <get_fat+0x26>
		val = 1;	/* Internal error */
 8011246:	2301      	movs	r3, #1
 8011248:	617b      	str	r3, [r7, #20]
 801124a:	e0ba      	b.n	80113c2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801124c:	f04f 33ff 	mov.w	r3, #4294967295
 8011250:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	2b03      	cmp	r3, #3
 8011258:	f000 8082 	beq.w	8011360 <get_fat+0x13a>
 801125c:	2b03      	cmp	r3, #3
 801125e:	f300 80a6 	bgt.w	80113ae <get_fat+0x188>
 8011262:	2b01      	cmp	r3, #1
 8011264:	d002      	beq.n	801126c <get_fat+0x46>
 8011266:	2b02      	cmp	r3, #2
 8011268:	d055      	beq.n	8011316 <get_fat+0xf0>
 801126a:	e0a0      	b.n	80113ae <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	60fb      	str	r3, [r7, #12]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	085b      	lsrs	r3, r3, #1
 8011274:	68fa      	ldr	r2, [r7, #12]
 8011276:	4413      	add	r3, r2
 8011278:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	899b      	ldrh	r3, [r3, #12]
 8011282:	4619      	mov	r1, r3
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	fbb3 f3f1 	udiv	r3, r3, r1
 801128a:	4413      	add	r3, r2
 801128c:	4619      	mov	r1, r3
 801128e:	6938      	ldr	r0, [r7, #16]
 8011290:	f7ff ff9c 	bl	80111cc <move_window>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	f040 808c 	bne.w	80113b4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	1c5a      	adds	r2, r3, #1
 80112a0:	60fa      	str	r2, [r7, #12]
 80112a2:	693a      	ldr	r2, [r7, #16]
 80112a4:	8992      	ldrh	r2, [r2, #12]
 80112a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80112aa:	fb01 f202 	mul.w	r2, r1, r2
 80112ae:	1a9b      	subs	r3, r3, r2
 80112b0:	693a      	ldr	r2, [r7, #16]
 80112b2:	4413      	add	r3, r2
 80112b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80112b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	899b      	ldrh	r3, [r3, #12]
 80112c2:	4619      	mov	r1, r3
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80112ca:	4413      	add	r3, r2
 80112cc:	4619      	mov	r1, r3
 80112ce:	6938      	ldr	r0, [r7, #16]
 80112d0:	f7ff ff7c 	bl	80111cc <move_window>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d16e      	bne.n	80113b8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	899b      	ldrh	r3, [r3, #12]
 80112de:	461a      	mov	r2, r3
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80112e6:	fb01 f202 	mul.w	r2, r1, r2
 80112ea:	1a9b      	subs	r3, r3, r2
 80112ec:	693a      	ldr	r2, [r7, #16]
 80112ee:	4413      	add	r3, r2
 80112f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80112f4:	021b      	lsls	r3, r3, #8
 80112f6:	68ba      	ldr	r2, [r7, #8]
 80112f8:	4313      	orrs	r3, r2
 80112fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	f003 0301 	and.w	r3, r3, #1
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <get_fat+0xe6>
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	091b      	lsrs	r3, r3, #4
 801130a:	e002      	b.n	8011312 <get_fat+0xec>
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011312:	617b      	str	r3, [r7, #20]
			break;
 8011314:	e055      	b.n	80113c2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	899b      	ldrh	r3, [r3, #12]
 801131e:	085b      	lsrs	r3, r3, #1
 8011320:	b29b      	uxth	r3, r3
 8011322:	4619      	mov	r1, r3
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	fbb3 f3f1 	udiv	r3, r3, r1
 801132a:	4413      	add	r3, r2
 801132c:	4619      	mov	r1, r3
 801132e:	6938      	ldr	r0, [r7, #16]
 8011330:	f7ff ff4c 	bl	80111cc <move_window>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d140      	bne.n	80113bc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	005b      	lsls	r3, r3, #1
 8011344:	693a      	ldr	r2, [r7, #16]
 8011346:	8992      	ldrh	r2, [r2, #12]
 8011348:	fbb3 f0f2 	udiv	r0, r3, r2
 801134c:	fb00 f202 	mul.w	r2, r0, r2
 8011350:	1a9b      	subs	r3, r3, r2
 8011352:	440b      	add	r3, r1
 8011354:	4618      	mov	r0, r3
 8011356:	f7ff fe95 	bl	8011084 <ld_word>
 801135a:	4603      	mov	r3, r0
 801135c:	617b      	str	r3, [r7, #20]
			break;
 801135e:	e030      	b.n	80113c2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	899b      	ldrh	r3, [r3, #12]
 8011368:	089b      	lsrs	r3, r3, #2
 801136a:	b29b      	uxth	r3, r3
 801136c:	4619      	mov	r1, r3
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	fbb3 f3f1 	udiv	r3, r3, r1
 8011374:	4413      	add	r3, r2
 8011376:	4619      	mov	r1, r3
 8011378:	6938      	ldr	r0, [r7, #16]
 801137a:	f7ff ff27 	bl	80111cc <move_window>
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	d11d      	bne.n	80113c0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	693a      	ldr	r2, [r7, #16]
 8011390:	8992      	ldrh	r2, [r2, #12]
 8011392:	fbb3 f0f2 	udiv	r0, r3, r2
 8011396:	fb00 f202 	mul.w	r2, r0, r2
 801139a:	1a9b      	subs	r3, r3, r2
 801139c:	440b      	add	r3, r1
 801139e:	4618      	mov	r0, r3
 80113a0:	f7ff fe88 	bl	80110b4 <ld_dword>
 80113a4:	4603      	mov	r3, r0
 80113a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80113aa:	617b      	str	r3, [r7, #20]
			break;
 80113ac:	e009      	b.n	80113c2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80113ae:	2301      	movs	r3, #1
 80113b0:	617b      	str	r3, [r7, #20]
 80113b2:	e006      	b.n	80113c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113b4:	bf00      	nop
 80113b6:	e004      	b.n	80113c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113b8:	bf00      	nop
 80113ba:	e002      	b.n	80113c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80113bc:	bf00      	nop
 80113be:	e000      	b.n	80113c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80113c0:	bf00      	nop
		}
	}

	return val;
 80113c2:	697b      	ldr	r3, [r7, #20]
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3718      	adds	r7, #24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b087      	sub	sp, #28
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80113d4:	f04f 33ff 	mov.w	r3, #4294967295
 80113d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d031      	beq.n	8011446 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	617b      	str	r3, [r7, #20]
 80113e8:	e002      	b.n	80113f0 <get_ldnumber+0x24>
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	3301      	adds	r3, #1
 80113ee:	617b      	str	r3, [r7, #20]
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	2b1f      	cmp	r3, #31
 80113f6:	d903      	bls.n	8011400 <get_ldnumber+0x34>
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80113fe:	d1f4      	bne.n	80113ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	2b3a      	cmp	r3, #58	@ 0x3a
 8011406:	d11c      	bne.n	8011442 <get_ldnumber+0x76>
			tp = *path;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	1c5a      	adds	r2, r3, #1
 8011412:	60fa      	str	r2, [r7, #12]
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	3b30      	subs	r3, #48	@ 0x30
 8011418:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	2b09      	cmp	r3, #9
 801141e:	d80e      	bhi.n	801143e <get_ldnumber+0x72>
 8011420:	68fa      	ldr	r2, [r7, #12]
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	429a      	cmp	r2, r3
 8011426:	d10a      	bne.n	801143e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d107      	bne.n	801143e <get_ldnumber+0x72>
					vol = (int)i;
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	3301      	adds	r3, #1
 8011436:	617b      	str	r3, [r7, #20]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	697a      	ldr	r2, [r7, #20]
 801143c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	e002      	b.n	8011448 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011442:	2300      	movs	r3, #0
 8011444:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011446:	693b      	ldr	r3, [r7, #16]
}
 8011448:	4618      	mov	r0, r3
 801144a:	371c      	adds	r7, #28
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr

08011454 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2200      	movs	r2, #0
 8011462:	70da      	strb	r2, [r3, #3]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f04f 32ff 	mov.w	r2, #4294967295
 801146a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801146c:	6839      	ldr	r1, [r7, #0]
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7ff feac 	bl	80111cc <move_window>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d001      	beq.n	801147e <check_fs+0x2a>
 801147a:	2304      	movs	r3, #4
 801147c:	e038      	b.n	80114f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	3338      	adds	r3, #56	@ 0x38
 8011482:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011486:	4618      	mov	r0, r3
 8011488:	f7ff fdfc 	bl	8011084 <ld_word>
 801148c:	4603      	mov	r3, r0
 801148e:	461a      	mov	r2, r3
 8011490:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011494:	429a      	cmp	r2, r3
 8011496:	d001      	beq.n	801149c <check_fs+0x48>
 8011498:	2303      	movs	r3, #3
 801149a:	e029      	b.n	80114f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80114a2:	2be9      	cmp	r3, #233	@ 0xe9
 80114a4:	d009      	beq.n	80114ba <check_fs+0x66>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80114ac:	2beb      	cmp	r3, #235	@ 0xeb
 80114ae:	d11e      	bne.n	80114ee <check_fs+0x9a>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80114b6:	2b90      	cmp	r3, #144	@ 0x90
 80114b8:	d119      	bne.n	80114ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	3338      	adds	r3, #56	@ 0x38
 80114be:	3336      	adds	r3, #54	@ 0x36
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7ff fdf7 	bl	80110b4 <ld_dword>
 80114c6:	4603      	mov	r3, r0
 80114c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80114cc:	4a0a      	ldr	r2, [pc, #40]	@ (80114f8 <check_fs+0xa4>)
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d101      	bne.n	80114d6 <check_fs+0x82>
 80114d2:	2300      	movs	r3, #0
 80114d4:	e00c      	b.n	80114f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	3338      	adds	r3, #56	@ 0x38
 80114da:	3352      	adds	r3, #82	@ 0x52
 80114dc:	4618      	mov	r0, r3
 80114de:	f7ff fde9 	bl	80110b4 <ld_dword>
 80114e2:	4603      	mov	r3, r0
 80114e4:	4a05      	ldr	r2, [pc, #20]	@ (80114fc <check_fs+0xa8>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d101      	bne.n	80114ee <check_fs+0x9a>
 80114ea:	2300      	movs	r3, #0
 80114ec:	e000      	b.n	80114f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80114ee:	2302      	movs	r3, #2
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	00544146 	.word	0x00544146
 80114fc:	33544146 	.word	0x33544146

08011500 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b096      	sub	sp, #88	@ 0x58
 8011504:	af00      	add	r7, sp, #0
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	4613      	mov	r3, r2
 801150c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f7ff ff59 	bl	80113cc <get_ldnumber>
 801151a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801151c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801151e:	2b00      	cmp	r3, #0
 8011520:	da01      	bge.n	8011526 <find_volume+0x26>
 8011522:	230b      	movs	r3, #11
 8011524:	e27f      	b.n	8011a26 <find_volume+0x526>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011526:	4a9e      	ldr	r2, [pc, #632]	@ (80117a0 <find_volume+0x2a0>)
 8011528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801152e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011532:	2b00      	cmp	r3, #0
 8011534:	d101      	bne.n	801153a <find_volume+0x3a>
 8011536:	230c      	movs	r3, #12
 8011538:	e275      	b.n	8011a26 <find_volume+0x526>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801153e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011540:	79fb      	ldrb	r3, [r7, #7]
 8011542:	f023 0301 	bic.w	r3, r3, #1
 8011546:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d01a      	beq.n	8011586 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011552:	785b      	ldrb	r3, [r3, #1]
 8011554:	4618      	mov	r0, r3
 8011556:	f7ff fcf5 	bl	8010f44 <disk_status>
 801155a:	4603      	mov	r3, r0
 801155c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011560:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011564:	f003 0301 	and.w	r3, r3, #1
 8011568:	2b00      	cmp	r3, #0
 801156a:	d10c      	bne.n	8011586 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801156c:	79fb      	ldrb	r3, [r7, #7]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d007      	beq.n	8011582 <find_volume+0x82>
 8011572:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011576:	f003 0304 	and.w	r3, r3, #4
 801157a:	2b00      	cmp	r3, #0
 801157c:	d001      	beq.n	8011582 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801157e:	230a      	movs	r3, #10
 8011580:	e251      	b.n	8011a26 <find_volume+0x526>
			}
			return FR_OK;				/* The file system object is valid */
 8011582:	2300      	movs	r3, #0
 8011584:	e24f      	b.n	8011a26 <find_volume+0x526>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011588:	2200      	movs	r2, #0
 801158a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801158c:	4a85      	ldr	r2, [pc, #532]	@ (80117a4 <find_volume+0x2a4>)
 801158e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011590:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011596:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801159a:	785b      	ldrb	r3, [r3, #1]
 801159c:	4618      	mov	r0, r3
 801159e:	f7ff fceb 	bl	8010f78 <disk_initialize>
 80115a2:	4603      	mov	r3, r0
 80115a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80115a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115ac:	f003 0301 	and.w	r3, r3, #1
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <find_volume+0xb8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80115b4:	2303      	movs	r3, #3
 80115b6:	e236      	b.n	8011a26 <find_volume+0x526>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80115b8:	79fb      	ldrb	r3, [r7, #7]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d007      	beq.n	80115ce <find_volume+0xce>
 80115be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115c2:	f003 0304 	and.w	r3, r3, #4
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d001      	beq.n	80115ce <find_volume+0xce>
		return FR_WRITE_PROTECTED;
 80115ca:	230a      	movs	r3, #10
 80115cc:	e22b      	b.n	8011a26 <find_volume+0x526>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80115ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115d0:	7858      	ldrb	r0, [r3, #1]
 80115d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115d4:	330c      	adds	r3, #12
 80115d6:	461a      	mov	r2, r3
 80115d8:	2102      	movs	r1, #2
 80115da:	f7ff fd35 	bl	8011048 <disk_ioctl>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d001      	beq.n	80115e8 <find_volume+0xe8>
 80115e4:	2301      	movs	r3, #1
 80115e6:	e21e      	b.n	8011a26 <find_volume+0x526>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80115e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ea:	899b      	ldrh	r3, [r3, #12]
 80115ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80115f0:	d80d      	bhi.n	801160e <find_volume+0x10e>
 80115f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115f4:	899b      	ldrh	r3, [r3, #12]
 80115f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115fa:	d308      	bcc.n	801160e <find_volume+0x10e>
 80115fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115fe:	899b      	ldrh	r3, [r3, #12]
 8011600:	461a      	mov	r2, r3
 8011602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011604:	899b      	ldrh	r3, [r3, #12]
 8011606:	3b01      	subs	r3, #1
 8011608:	4013      	ands	r3, r2
 801160a:	2b00      	cmp	r3, #0
 801160c:	d001      	beq.n	8011612 <find_volume+0x112>
 801160e:	2301      	movs	r3, #1
 8011610:	e209      	b.n	8011a26 <find_volume+0x526>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011612:	2300      	movs	r3, #0
 8011614:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011616:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011618:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801161a:	f7ff ff1b 	bl	8011454 <check_fs>
 801161e:	4603      	mov	r3, r0
 8011620:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011624:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011628:	2b02      	cmp	r3, #2
 801162a:	d00a      	beq.n	8011642 <find_volume+0x142>
 801162c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011630:	2b01      	cmp	r3, #1
 8011632:	d85b      	bhi.n	80116ec <find_volume+0x1ec>
 8011634:	4a5b      	ldr	r2, [pc, #364]	@ (80117a4 <find_volume+0x2a4>)
 8011636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011638:	005b      	lsls	r3, r3, #1
 801163a:	4413      	add	r3, r2
 801163c:	785b      	ldrb	r3, [r3, #1]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d054      	beq.n	80116ec <find_volume+0x1ec>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011642:	2300      	movs	r3, #0
 8011644:	643b      	str	r3, [r7, #64]	@ 0x40
 8011646:	e01e      	b.n	8011686 <find_volume+0x186>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801164e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011650:	011b      	lsls	r3, r3, #4
 8011652:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011656:	4413      	add	r3, r2
 8011658:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801165a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801165c:	3304      	adds	r3, #4
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d006      	beq.n	8011672 <find_volume+0x172>
 8011664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011666:	3308      	adds	r3, #8
 8011668:	4618      	mov	r0, r3
 801166a:	f7ff fd23 	bl	80110b4 <ld_dword>
 801166e:	4602      	mov	r2, r0
 8011670:	e000      	b.n	8011674 <find_volume+0x174>
 8011672:	2200      	movs	r2, #0
 8011674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	3358      	adds	r3, #88	@ 0x58
 801167a:	443b      	add	r3, r7
 801167c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011682:	3301      	adds	r3, #1
 8011684:	643b      	str	r3, [r7, #64]	@ 0x40
 8011686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011688:	2b03      	cmp	r3, #3
 801168a:	d9dd      	bls.n	8011648 <find_volume+0x148>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801168c:	4a45      	ldr	r2, [pc, #276]	@ (80117a4 <find_volume+0x2a4>)
 801168e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011690:	005b      	lsls	r3, r3, #1
 8011692:	4413      	add	r3, r2
 8011694:	785b      	ldrb	r3, [r3, #1]
 8011696:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801169a:	2b00      	cmp	r3, #0
 801169c:	d002      	beq.n	80116a4 <find_volume+0x1a4>
 801169e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116a0:	3b01      	subs	r3, #1
 80116a2:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80116a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	3358      	adds	r3, #88	@ 0x58
 80116aa:	443b      	add	r3, r7
 80116ac:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80116b0:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80116b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d005      	beq.n	80116c4 <find_volume+0x1c4>
 80116b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80116ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80116bc:	f7ff feca 	bl	8011454 <check_fs>
 80116c0:	4603      	mov	r3, r0
 80116c2:	e000      	b.n	80116c6 <find_volume+0x1c6>
 80116c4:	2303      	movs	r3, #3
 80116c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80116ca:	4a36      	ldr	r2, [pc, #216]	@ (80117a4 <find_volume+0x2a4>)
 80116cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	4413      	add	r3, r2
 80116d2:	785b      	ldrb	r3, [r3, #1]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d109      	bne.n	80116ec <find_volume+0x1ec>
 80116d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d905      	bls.n	80116ec <find_volume+0x1ec>
 80116e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116e2:	3301      	adds	r3, #1
 80116e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80116e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116e8:	2b03      	cmp	r3, #3
 80116ea:	d9db      	bls.n	80116a4 <find_volume+0x1a4>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80116ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80116f0:	2b04      	cmp	r3, #4
 80116f2:	d101      	bne.n	80116f8 <find_volume+0x1f8>
 80116f4:	2301      	movs	r3, #1
 80116f6:	e196      	b.n	8011a26 <find_volume+0x526>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80116f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d901      	bls.n	8011704 <find_volume+0x204>
 8011700:	230d      	movs	r3, #13
 8011702:	e190      	b.n	8011a26 <find_volume+0x526>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011706:	3338      	adds	r3, #56	@ 0x38
 8011708:	330b      	adds	r3, #11
 801170a:	4618      	mov	r0, r3
 801170c:	f7ff fcba 	bl	8011084 <ld_word>
 8011710:	4603      	mov	r3, r0
 8011712:	461a      	mov	r2, r3
 8011714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011716:	899b      	ldrh	r3, [r3, #12]
 8011718:	429a      	cmp	r2, r3
 801171a:	d001      	beq.n	8011720 <find_volume+0x220>
 801171c:	230d      	movs	r3, #13
 801171e:	e182      	b.n	8011a26 <find_volume+0x526>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011722:	3338      	adds	r3, #56	@ 0x38
 8011724:	3316      	adds	r3, #22
 8011726:	4618      	mov	r0, r3
 8011728:	f7ff fcac 	bl	8011084 <ld_word>
 801172c:	4603      	mov	r3, r0
 801172e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <find_volume+0x244>
 8011736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011738:	3338      	adds	r3, #56	@ 0x38
 801173a:	3324      	adds	r3, #36	@ 0x24
 801173c:	4618      	mov	r0, r3
 801173e:	f7ff fcb9 	bl	80110b4 <ld_dword>
 8011742:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011746:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011748:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801174a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011752:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011756:	789b      	ldrb	r3, [r3, #2]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d005      	beq.n	8011768 <find_volume+0x268>
 801175c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801175e:	789b      	ldrb	r3, [r3, #2]
 8011760:	2b02      	cmp	r3, #2
 8011762:	d001      	beq.n	8011768 <find_volume+0x268>
 8011764:	230d      	movs	r3, #13
 8011766:	e15e      	b.n	8011a26 <find_volume+0x526>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801176a:	789b      	ldrb	r3, [r3, #2]
 801176c:	461a      	mov	r2, r3
 801176e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011770:	fb02 f303 	mul.w	r3, r2, r3
 8011774:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801177c:	461a      	mov	r2, r3
 801177e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011780:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011784:	895b      	ldrh	r3, [r3, #10]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d008      	beq.n	801179c <find_volume+0x29c>
 801178a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178c:	895b      	ldrh	r3, [r3, #10]
 801178e:	461a      	mov	r2, r3
 8011790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011792:	895b      	ldrh	r3, [r3, #10]
 8011794:	3b01      	subs	r3, #1
 8011796:	4013      	ands	r3, r2
 8011798:	2b00      	cmp	r3, #0
 801179a:	d005      	beq.n	80117a8 <find_volume+0x2a8>
 801179c:	230d      	movs	r3, #13
 801179e:	e142      	b.n	8011a26 <find_volume+0x526>
 80117a0:	24001834 	.word	0x24001834
 80117a4:	24001828 	.word	0x24001828

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80117a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117aa:	3338      	adds	r3, #56	@ 0x38
 80117ac:	3311      	adds	r3, #17
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7ff fc68 	bl	8011084 <ld_word>
 80117b4:	4603      	mov	r3, r0
 80117b6:	461a      	mov	r2, r3
 80117b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80117bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117be:	891b      	ldrh	r3, [r3, #8]
 80117c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117c2:	8992      	ldrh	r2, [r2, #12]
 80117c4:	0952      	lsrs	r2, r2, #5
 80117c6:	b292      	uxth	r2, r2
 80117c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80117cc:	fb01 f202 	mul.w	r2, r1, r2
 80117d0:	1a9b      	subs	r3, r3, r2
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d001      	beq.n	80117dc <find_volume+0x2dc>
 80117d8:	230d      	movs	r3, #13
 80117da:	e124      	b.n	8011a26 <find_volume+0x526>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80117dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117de:	3338      	adds	r3, #56	@ 0x38
 80117e0:	3313      	adds	r3, #19
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7ff fc4e 	bl	8011084 <ld_word>
 80117e8:	4603      	mov	r3, r0
 80117ea:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80117ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d106      	bne.n	8011800 <find_volume+0x300>
 80117f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f4:	3338      	adds	r3, #56	@ 0x38
 80117f6:	3320      	adds	r3, #32
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7ff fc5b 	bl	80110b4 <ld_dword>
 80117fe:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011802:	3338      	adds	r3, #56	@ 0x38
 8011804:	330e      	adds	r3, #14
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff fc3c 	bl	8011084 <ld_word>
 801180c:	4603      	mov	r3, r0
 801180e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011810:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <find_volume+0x31a>
 8011816:	230d      	movs	r3, #13
 8011818:	e105      	b.n	8011a26 <find_volume+0x526>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801181a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801181c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801181e:	4413      	add	r3, r2
 8011820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011822:	8911      	ldrh	r1, [r2, #8]
 8011824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011826:	8992      	ldrh	r2, [r2, #12]
 8011828:	0952      	lsrs	r2, r2, #5
 801182a:	b292      	uxth	r2, r2
 801182c:	fbb1 f2f2 	udiv	r2, r1, r2
 8011830:	b292      	uxth	r2, r2
 8011832:	4413      	add	r3, r2
 8011834:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801183a:	429a      	cmp	r2, r3
 801183c:	d201      	bcs.n	8011842 <find_volume+0x342>
 801183e:	230d      	movs	r3, #13
 8011840:	e0f1      	b.n	8011a26 <find_volume+0x526>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011846:	1ad3      	subs	r3, r2, r3
 8011848:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801184a:	8952      	ldrh	r2, [r2, #10]
 801184c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011850:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011854:	2b00      	cmp	r3, #0
 8011856:	d101      	bne.n	801185c <find_volume+0x35c>
 8011858:	230d      	movs	r3, #13
 801185a:	e0e4      	b.n	8011a26 <find_volume+0x526>
		fmt = FS_FAT32;
 801185c:	2303      	movs	r3, #3
 801185e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011864:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011868:	4293      	cmp	r3, r2
 801186a:	d802      	bhi.n	8011872 <find_volume+0x372>
 801186c:	2302      	movs	r3, #2
 801186e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011874:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011878:	4293      	cmp	r3, r2
 801187a:	d802      	bhi.n	8011882 <find_volume+0x382>
 801187c:	2301      	movs	r3, #1
 801187e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011884:	1c9a      	adds	r2, r3, #2
 8011886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011888:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801188a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801188e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011890:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011894:	441a      	add	r2, r3
 8011896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011898:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801189a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801189c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801189e:	441a      	add	r2, r3
 80118a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80118a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118a8:	2b03      	cmp	r3, #3
 80118aa:	d11e      	bne.n	80118ea <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80118ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ae:	3338      	adds	r3, #56	@ 0x38
 80118b0:	332a      	adds	r3, #42	@ 0x2a
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7ff fbe6 	bl	8011084 <ld_word>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d001      	beq.n	80118c2 <find_volume+0x3c2>
 80118be:	230d      	movs	r3, #13
 80118c0:	e0b1      	b.n	8011a26 <find_volume+0x526>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80118c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c4:	891b      	ldrh	r3, [r3, #8]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d001      	beq.n	80118ce <find_volume+0x3ce>
 80118ca:	230d      	movs	r3, #13
 80118cc:	e0ab      	b.n	8011a26 <find_volume+0x526>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80118ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d0:	3338      	adds	r3, #56	@ 0x38
 80118d2:	332c      	adds	r3, #44	@ 0x2c
 80118d4:	4618      	mov	r0, r3
 80118d6:	f7ff fbed 	bl	80110b4 <ld_dword>
 80118da:	4602      	mov	r2, r0
 80118dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118de:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80118e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118e2:	69db      	ldr	r3, [r3, #28]
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80118e8:	e01f      	b.n	801192a <find_volume+0x42a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80118ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ec:	891b      	ldrh	r3, [r3, #8]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d101      	bne.n	80118f6 <find_volume+0x3f6>
 80118f2:	230d      	movs	r3, #13
 80118f4:	e097      	b.n	8011a26 <find_volume+0x526>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80118f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80118fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118fc:	441a      	add	r2, r3
 80118fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011900:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011902:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011906:	2b02      	cmp	r3, #2
 8011908:	d103      	bne.n	8011912 <find_volume+0x412>
 801190a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801190c:	69db      	ldr	r3, [r3, #28]
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	e00a      	b.n	8011928 <find_volume+0x428>
 8011912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011914:	69da      	ldr	r2, [r3, #28]
 8011916:	4613      	mov	r3, r2
 8011918:	005b      	lsls	r3, r3, #1
 801191a:	4413      	add	r3, r2
 801191c:	085a      	lsrs	r2, r3, #1
 801191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011920:	69db      	ldr	r3, [r3, #28]
 8011922:	f003 0301 	and.w	r3, r3, #1
 8011926:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011928:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801192a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192c:	6a1a      	ldr	r2, [r3, #32]
 801192e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011930:	899b      	ldrh	r3, [r3, #12]
 8011932:	4619      	mov	r1, r3
 8011934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011936:	440b      	add	r3, r1
 8011938:	3b01      	subs	r3, #1
 801193a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801193c:	8989      	ldrh	r1, [r1, #12]
 801193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011942:	429a      	cmp	r2, r3
 8011944:	d201      	bcs.n	801194a <find_volume+0x44a>
 8011946:	230d      	movs	r3, #13
 8011948:	e06d      	b.n	8011a26 <find_volume+0x526>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801194a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801194c:	f04f 32ff 	mov.w	r2, #4294967295
 8011950:	619a      	str	r2, [r3, #24]
 8011952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011954:	699a      	ldr	r2, [r3, #24]
 8011956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011958:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801195a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801195c:	2280      	movs	r2, #128	@ 0x80
 801195e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011960:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011964:	2b03      	cmp	r3, #3
 8011966:	d149      	bne.n	80119fc <find_volume+0x4fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801196a:	3338      	adds	r3, #56	@ 0x38
 801196c:	3330      	adds	r3, #48	@ 0x30
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff fb88 	bl	8011084 <ld_word>
 8011974:	4603      	mov	r3, r0
 8011976:	2b01      	cmp	r3, #1
 8011978:	d140      	bne.n	80119fc <find_volume+0x4fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 801197a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801197c:	3301      	adds	r3, #1
 801197e:	4619      	mov	r1, r3
 8011980:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011982:	f7ff fc23 	bl	80111cc <move_window>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d137      	bne.n	80119fc <find_volume+0x4fc>
		{
			fs->fsi_flag = 0;
 801198c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801198e:	2200      	movs	r2, #0
 8011990:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011994:	3338      	adds	r3, #56	@ 0x38
 8011996:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801199a:	4618      	mov	r0, r3
 801199c:	f7ff fb72 	bl	8011084 <ld_word>
 80119a0:	4603      	mov	r3, r0
 80119a2:	461a      	mov	r2, r3
 80119a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d127      	bne.n	80119fc <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80119ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ae:	3338      	adds	r3, #56	@ 0x38
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7ff fb7f 	bl	80110b4 <ld_dword>
 80119b6:	4603      	mov	r3, r0
 80119b8:	4a1d      	ldr	r2, [pc, #116]	@ (8011a30 <find_volume+0x530>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d11e      	bne.n	80119fc <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80119be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c0:	3338      	adds	r3, #56	@ 0x38
 80119c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff fb74 	bl	80110b4 <ld_dword>
 80119cc:	4603      	mov	r3, r0
 80119ce:	4a19      	ldr	r2, [pc, #100]	@ (8011a34 <find_volume+0x534>)
 80119d0:	4293      	cmp	r3, r2
 80119d2:	d113      	bne.n	80119fc <find_volume+0x4fc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80119d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d6:	3338      	adds	r3, #56	@ 0x38
 80119d8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80119dc:	4618      	mov	r0, r3
 80119de:	f7ff fb69 	bl	80110b4 <ld_dword>
 80119e2:	4602      	mov	r2, r0
 80119e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119e6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80119e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ea:	3338      	adds	r3, #56	@ 0x38
 80119ec:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7ff fb5f 	bl	80110b4 <ld_dword>
 80119f6:	4602      	mov	r2, r0
 80119f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119fa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80119fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119fe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011a02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011a04:	4b0c      	ldr	r3, [pc, #48]	@ (8011a38 <find_volume+0x538>)
 8011a06:	881b      	ldrh	r3, [r3, #0]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8011a38 <find_volume+0x538>)
 8011a0e:	801a      	strh	r2, [r3, #0]
 8011a10:	4b09      	ldr	r3, [pc, #36]	@ (8011a38 <find_volume+0x538>)
 8011a12:	881a      	ldrh	r2, [r3, #0]
 8011a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a16:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a1a:	4a08      	ldr	r2, [pc, #32]	@ (8011a3c <find_volume+0x53c>)
 8011a1c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011a1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011a20:	f7ff fb6c 	bl	80110fc <clear_lock>
#endif
	return FR_OK;
 8011a24:	2300      	movs	r3, #0
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3758      	adds	r7, #88	@ 0x58
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	41615252 	.word	0x41615252
 8011a34:	61417272 	.word	0x61417272
 8011a38:	24001838 	.word	0x24001838
 8011a3c:	2400185c 	.word	0x2400185c

08011a40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b088      	sub	sp, #32
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	60b9      	str	r1, [r7, #8]
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011a52:	f107 0310 	add.w	r3, r7, #16
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7ff fcb8 	bl	80113cc <get_ldnumber>
 8011a5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	da01      	bge.n	8011a68 <f_mount+0x28>
 8011a64:	230b      	movs	r3, #11
 8011a66:	e02b      	b.n	8011ac0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011a68:	4a17      	ldr	r2, [pc, #92]	@ (8011ac8 <f_mount+0x88>)
 8011a6a:	69fb      	ldr	r3, [r7, #28]
 8011a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d005      	beq.n	8011a84 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011a78:	69b8      	ldr	r0, [r7, #24]
 8011a7a:	f7ff fb3f 	bl	80110fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	2200      	movs	r2, #0
 8011a82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d002      	beq.n	8011a90 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011a90:	68fa      	ldr	r2, [r7, #12]
 8011a92:	490d      	ldr	r1, [pc, #52]	@ (8011ac8 <f_mount+0x88>)
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d002      	beq.n	8011aa6 <f_mount+0x66>
 8011aa0:	79fb      	ldrb	r3, [r7, #7]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d001      	beq.n	8011aaa <f_mount+0x6a>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	e00a      	b.n	8011ac0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011aaa:	f107 010c 	add.w	r1, r7, #12
 8011aae:	f107 0308 	add.w	r3, r7, #8
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7ff fd23 	bl	8011500 <find_volume>
 8011aba:	4603      	mov	r3, r0
 8011abc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3720      	adds	r7, #32
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	24001834 	.word	0x24001834

08011acc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b092      	sub	sp, #72	@ 0x48
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011ad8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011adc:	f107 030c 	add.w	r3, r7, #12
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7ff fd0c 	bl	8011500 <find_volume>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8011aee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	f040 8099 	bne.w	8011c2a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8011af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8011afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b00:	699a      	ldr	r2, [r3, #24]
 8011b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b04:	69db      	ldr	r3, [r3, #28]
 8011b06:	3b02      	subs	r3, #2
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d804      	bhi.n	8011b16 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b0e:	699a      	ldr	r2, [r3, #24]
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	601a      	str	r2, [r3, #0]
 8011b14:	e089      	b.n	8011c2a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8011b16:	2300      	movs	r3, #0
 8011b18:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8011b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	d128      	bne.n	8011b74 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8011b22:	2302      	movs	r3, #2
 8011b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b28:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8011b2a:	f107 0314 	add.w	r3, r7, #20
 8011b2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7ff fb78 	bl	8011226 <get_fat>
 8011b36:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8011b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b3e:	d103      	bne.n	8011b48 <f_getfree+0x7c>
 8011b40:	2301      	movs	r3, #1
 8011b42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011b46:	e063      	b.n	8011c10 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	d103      	bne.n	8011b56 <f_getfree+0x8a>
 8011b4e:	2302      	movs	r3, #2
 8011b50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011b54:	e05c      	b.n	8011c10 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8011b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d102      	bne.n	8011b62 <f_getfree+0x96>
 8011b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b5e:	3301      	adds	r3, #1
 8011b60:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8011b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b64:	3301      	adds	r3, #1
 8011b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b6a:	69db      	ldr	r3, [r3, #28]
 8011b6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d3db      	bcc.n	8011b2a <f_getfree+0x5e>
 8011b72:	e04d      	b.n	8011c10 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b76:	69db      	ldr	r3, [r3, #28]
 8011b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8011b80:	2300      	movs	r3, #0
 8011b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b84:	2300      	movs	r3, #0
 8011b86:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8011b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d113      	bne.n	8011bb6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8011b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b92:	1c5a      	adds	r2, r3, #1
 8011b94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011b96:	4619      	mov	r1, r3
 8011b98:	f7ff fb18 	bl	80111cc <move_window>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8011ba2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d131      	bne.n	8011c0e <f_getfree+0x142>
							p = fs->win;
 8011baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bac:	3338      	adds	r3, #56	@ 0x38
 8011bae:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8011bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb2:	899b      	ldrh	r3, [r3, #12]
 8011bb4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8011bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	2b02      	cmp	r3, #2
 8011bbc:	d10f      	bne.n	8011bde <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8011bbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bc0:	f7ff fa60 	bl	8011084 <ld_word>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d102      	bne.n	8011bd0 <f_getfree+0x104>
 8011bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bcc:	3301      	adds	r3, #1
 8011bce:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd2:	3302      	adds	r3, #2
 8011bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bd8:	3b02      	subs	r3, #2
 8011bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bdc:	e010      	b.n	8011c00 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011bde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011be0:	f7ff fa68 	bl	80110b4 <ld_dword>
 8011be4:	4603      	mov	r3, r0
 8011be6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d102      	bne.n	8011bf4 <f_getfree+0x128>
 8011bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8011bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bf6:	3304      	adds	r3, #4
 8011bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bfc:	3b04      	subs	r3, #4
 8011bfe:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8011c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c02:	3b01      	subs	r3, #1
 8011c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1bd      	bne.n	8011b88 <f_getfree+0xbc>
 8011c0c:	e000      	b.n	8011c10 <f_getfree+0x144>
							if (res != FR_OK) break;
 8011c0e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c14:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8011c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c1a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c1e:	791a      	ldrb	r2, [r3, #4]
 8011c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c22:	f042 0201 	orr.w	r2, r2, #1
 8011c26:	b2d2      	uxtb	r2, r2
 8011c28:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011c2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3748      	adds	r7, #72	@ 0x48
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}
	...

08011c38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b087      	sub	sp, #28
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	4613      	mov	r3, r2
 8011c44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011c46:	2301      	movs	r3, #1
 8011c48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c50:	7a5b      	ldrb	r3, [r3, #9]
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d131      	bne.n	8011cbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011c58:	4b1c      	ldr	r3, [pc, #112]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c5a:	7a5b      	ldrb	r3, [r3, #9]
 8011c5c:	b2db      	uxtb	r3, r3
 8011c5e:	461a      	mov	r2, r3
 8011c60:	4b1a      	ldr	r3, [pc, #104]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c62:	2100      	movs	r1, #0
 8011c64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011c66:	4b19      	ldr	r3, [pc, #100]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c68:	7a5b      	ldrb	r3, [r3, #9]
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	4a17      	ldr	r2, [pc, #92]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	4413      	add	r3, r2
 8011c72:	68fa      	ldr	r2, [r7, #12]
 8011c74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011c76:	4b15      	ldr	r3, [pc, #84]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c78:	7a5b      	ldrb	r3, [r3, #9]
 8011c7a:	b2db      	uxtb	r3, r3
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	4b13      	ldr	r3, [pc, #76]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c80:	4413      	add	r3, r2
 8011c82:	79fa      	ldrb	r2, [r7, #7]
 8011c84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011c86:	4b11      	ldr	r3, [pc, #68]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c88:	7a5b      	ldrb	r3, [r3, #9]
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	1c5a      	adds	r2, r3, #1
 8011c8e:	b2d1      	uxtb	r1, r2
 8011c90:	4a0e      	ldr	r2, [pc, #56]	@ (8011ccc <FATFS_LinkDriverEx+0x94>)
 8011c92:	7251      	strb	r1, [r2, #9]
 8011c94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011c96:	7dbb      	ldrb	r3, [r7, #22]
 8011c98:	3330      	adds	r3, #48	@ 0x30
 8011c9a:	b2da      	uxtb	r2, r3
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	223a      	movs	r2, #58	@ 0x3a
 8011ca6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	3302      	adds	r3, #2
 8011cac:	222f      	movs	r2, #47	@ 0x2f
 8011cae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	3303      	adds	r3, #3
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	371c      	adds	r7, #28
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc8:	4770      	bx	lr
 8011cca:	bf00      	nop
 8011ccc:	24001a5c 	.word	0x24001a5c

08011cd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011cda:	2200      	movs	r2, #0
 8011cdc:	6839      	ldr	r1, [r7, #0]
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f7ff ffaa 	bl	8011c38 <FATFS_LinkDriverEx>
 8011ce4:	4603      	mov	r3, r0
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
	...

08011cf0 <siprintf>:
 8011cf0:	b40e      	push	{r1, r2, r3}
 8011cf2:	b500      	push	{lr}
 8011cf4:	b09c      	sub	sp, #112	@ 0x70
 8011cf6:	ab1d      	add	r3, sp, #116	@ 0x74
 8011cf8:	9002      	str	r0, [sp, #8]
 8011cfa:	9006      	str	r0, [sp, #24]
 8011cfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d00:	4809      	ldr	r0, [pc, #36]	@ (8011d28 <siprintf+0x38>)
 8011d02:	9107      	str	r1, [sp, #28]
 8011d04:	9104      	str	r1, [sp, #16]
 8011d06:	4909      	ldr	r1, [pc, #36]	@ (8011d2c <siprintf+0x3c>)
 8011d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d0c:	9105      	str	r1, [sp, #20]
 8011d0e:	6800      	ldr	r0, [r0, #0]
 8011d10:	9301      	str	r3, [sp, #4]
 8011d12:	a902      	add	r1, sp, #8
 8011d14:	f000 f9a2 	bl	801205c <_svfiprintf_r>
 8011d18:	9b02      	ldr	r3, [sp, #8]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	701a      	strb	r2, [r3, #0]
 8011d1e:	b01c      	add	sp, #112	@ 0x70
 8011d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d24:	b003      	add	sp, #12
 8011d26:	4770      	bx	lr
 8011d28:	2400001c 	.word	0x2400001c
 8011d2c:	ffff0208 	.word	0xffff0208

08011d30 <memset>:
 8011d30:	4402      	add	r2, r0
 8011d32:	4603      	mov	r3, r0
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d100      	bne.n	8011d3a <memset+0xa>
 8011d38:	4770      	bx	lr
 8011d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d3e:	e7f9      	b.n	8011d34 <memset+0x4>

08011d40 <__errno>:
 8011d40:	4b01      	ldr	r3, [pc, #4]	@ (8011d48 <__errno+0x8>)
 8011d42:	6818      	ldr	r0, [r3, #0]
 8011d44:	4770      	bx	lr
 8011d46:	bf00      	nop
 8011d48:	2400001c 	.word	0x2400001c

08011d4c <__libc_init_array>:
 8011d4c:	b570      	push	{r4, r5, r6, lr}
 8011d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8011d84 <__libc_init_array+0x38>)
 8011d50:	4c0d      	ldr	r4, [pc, #52]	@ (8011d88 <__libc_init_array+0x3c>)
 8011d52:	1b64      	subs	r4, r4, r5
 8011d54:	10a4      	asrs	r4, r4, #2
 8011d56:	2600      	movs	r6, #0
 8011d58:	42a6      	cmp	r6, r4
 8011d5a:	d109      	bne.n	8011d70 <__libc_init_array+0x24>
 8011d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8011d8c <__libc_init_array+0x40>)
 8011d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8011d90 <__libc_init_array+0x44>)
 8011d60:	f000 fc66 	bl	8012630 <_init>
 8011d64:	1b64      	subs	r4, r4, r5
 8011d66:	10a4      	asrs	r4, r4, #2
 8011d68:	2600      	movs	r6, #0
 8011d6a:	42a6      	cmp	r6, r4
 8011d6c:	d105      	bne.n	8011d7a <__libc_init_array+0x2e>
 8011d6e:	bd70      	pop	{r4, r5, r6, pc}
 8011d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d74:	4798      	blx	r3
 8011d76:	3601      	adds	r6, #1
 8011d78:	e7ee      	b.n	8011d58 <__libc_init_array+0xc>
 8011d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d7e:	4798      	blx	r3
 8011d80:	3601      	adds	r6, #1
 8011d82:	e7f2      	b.n	8011d6a <__libc_init_array+0x1e>
 8011d84:	08012af4 	.word	0x08012af4
 8011d88:	08012af4 	.word	0x08012af4
 8011d8c:	08012af4 	.word	0x08012af4
 8011d90:	08012af8 	.word	0x08012af8

08011d94 <__retarget_lock_acquire_recursive>:
 8011d94:	4770      	bx	lr

08011d96 <__retarget_lock_release_recursive>:
 8011d96:	4770      	bx	lr

08011d98 <memcpy>:
 8011d98:	440a      	add	r2, r1
 8011d9a:	4291      	cmp	r1, r2
 8011d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011da0:	d100      	bne.n	8011da4 <memcpy+0xc>
 8011da2:	4770      	bx	lr
 8011da4:	b510      	push	{r4, lr}
 8011da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011dae:	4291      	cmp	r1, r2
 8011db0:	d1f9      	bne.n	8011da6 <memcpy+0xe>
 8011db2:	bd10      	pop	{r4, pc}

08011db4 <_free_r>:
 8011db4:	b538      	push	{r3, r4, r5, lr}
 8011db6:	4605      	mov	r5, r0
 8011db8:	2900      	cmp	r1, #0
 8011dba:	d041      	beq.n	8011e40 <_free_r+0x8c>
 8011dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dc0:	1f0c      	subs	r4, r1, #4
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bfb8      	it	lt
 8011dc6:	18e4      	addlt	r4, r4, r3
 8011dc8:	f000 f8e0 	bl	8011f8c <__malloc_lock>
 8011dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8011e44 <_free_r+0x90>)
 8011dce:	6813      	ldr	r3, [r2, #0]
 8011dd0:	b933      	cbnz	r3, 8011de0 <_free_r+0x2c>
 8011dd2:	6063      	str	r3, [r4, #4]
 8011dd4:	6014      	str	r4, [r2, #0]
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ddc:	f000 b8dc 	b.w	8011f98 <__malloc_unlock>
 8011de0:	42a3      	cmp	r3, r4
 8011de2:	d908      	bls.n	8011df6 <_free_r+0x42>
 8011de4:	6820      	ldr	r0, [r4, #0]
 8011de6:	1821      	adds	r1, r4, r0
 8011de8:	428b      	cmp	r3, r1
 8011dea:	bf01      	itttt	eq
 8011dec:	6819      	ldreq	r1, [r3, #0]
 8011dee:	685b      	ldreq	r3, [r3, #4]
 8011df0:	1809      	addeq	r1, r1, r0
 8011df2:	6021      	streq	r1, [r4, #0]
 8011df4:	e7ed      	b.n	8011dd2 <_free_r+0x1e>
 8011df6:	461a      	mov	r2, r3
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	b10b      	cbz	r3, 8011e00 <_free_r+0x4c>
 8011dfc:	42a3      	cmp	r3, r4
 8011dfe:	d9fa      	bls.n	8011df6 <_free_r+0x42>
 8011e00:	6811      	ldr	r1, [r2, #0]
 8011e02:	1850      	adds	r0, r2, r1
 8011e04:	42a0      	cmp	r0, r4
 8011e06:	d10b      	bne.n	8011e20 <_free_r+0x6c>
 8011e08:	6820      	ldr	r0, [r4, #0]
 8011e0a:	4401      	add	r1, r0
 8011e0c:	1850      	adds	r0, r2, r1
 8011e0e:	4283      	cmp	r3, r0
 8011e10:	6011      	str	r1, [r2, #0]
 8011e12:	d1e0      	bne.n	8011dd6 <_free_r+0x22>
 8011e14:	6818      	ldr	r0, [r3, #0]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	6053      	str	r3, [r2, #4]
 8011e1a:	4408      	add	r0, r1
 8011e1c:	6010      	str	r0, [r2, #0]
 8011e1e:	e7da      	b.n	8011dd6 <_free_r+0x22>
 8011e20:	d902      	bls.n	8011e28 <_free_r+0x74>
 8011e22:	230c      	movs	r3, #12
 8011e24:	602b      	str	r3, [r5, #0]
 8011e26:	e7d6      	b.n	8011dd6 <_free_r+0x22>
 8011e28:	6820      	ldr	r0, [r4, #0]
 8011e2a:	1821      	adds	r1, r4, r0
 8011e2c:	428b      	cmp	r3, r1
 8011e2e:	bf04      	itt	eq
 8011e30:	6819      	ldreq	r1, [r3, #0]
 8011e32:	685b      	ldreq	r3, [r3, #4]
 8011e34:	6063      	str	r3, [r4, #4]
 8011e36:	bf04      	itt	eq
 8011e38:	1809      	addeq	r1, r1, r0
 8011e3a:	6021      	streq	r1, [r4, #0]
 8011e3c:	6054      	str	r4, [r2, #4]
 8011e3e:	e7ca      	b.n	8011dd6 <_free_r+0x22>
 8011e40:	bd38      	pop	{r3, r4, r5, pc}
 8011e42:	bf00      	nop
 8011e44:	24001bac 	.word	0x24001bac

08011e48 <sbrk_aligned>:
 8011e48:	b570      	push	{r4, r5, r6, lr}
 8011e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8011e88 <sbrk_aligned+0x40>)
 8011e4c:	460c      	mov	r4, r1
 8011e4e:	6831      	ldr	r1, [r6, #0]
 8011e50:	4605      	mov	r5, r0
 8011e52:	b911      	cbnz	r1, 8011e5a <sbrk_aligned+0x12>
 8011e54:	f000 fba6 	bl	80125a4 <_sbrk_r>
 8011e58:	6030      	str	r0, [r6, #0]
 8011e5a:	4621      	mov	r1, r4
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	f000 fba1 	bl	80125a4 <_sbrk_r>
 8011e62:	1c43      	adds	r3, r0, #1
 8011e64:	d103      	bne.n	8011e6e <sbrk_aligned+0x26>
 8011e66:	f04f 34ff 	mov.w	r4, #4294967295
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	bd70      	pop	{r4, r5, r6, pc}
 8011e6e:	1cc4      	adds	r4, r0, #3
 8011e70:	f024 0403 	bic.w	r4, r4, #3
 8011e74:	42a0      	cmp	r0, r4
 8011e76:	d0f8      	beq.n	8011e6a <sbrk_aligned+0x22>
 8011e78:	1a21      	subs	r1, r4, r0
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f000 fb92 	bl	80125a4 <_sbrk_r>
 8011e80:	3001      	adds	r0, #1
 8011e82:	d1f2      	bne.n	8011e6a <sbrk_aligned+0x22>
 8011e84:	e7ef      	b.n	8011e66 <sbrk_aligned+0x1e>
 8011e86:	bf00      	nop
 8011e88:	24001ba8 	.word	0x24001ba8

08011e8c <_malloc_r>:
 8011e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e90:	1ccd      	adds	r5, r1, #3
 8011e92:	f025 0503 	bic.w	r5, r5, #3
 8011e96:	3508      	adds	r5, #8
 8011e98:	2d0c      	cmp	r5, #12
 8011e9a:	bf38      	it	cc
 8011e9c:	250c      	movcc	r5, #12
 8011e9e:	2d00      	cmp	r5, #0
 8011ea0:	4606      	mov	r6, r0
 8011ea2:	db01      	blt.n	8011ea8 <_malloc_r+0x1c>
 8011ea4:	42a9      	cmp	r1, r5
 8011ea6:	d904      	bls.n	8011eb2 <_malloc_r+0x26>
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	6033      	str	r3, [r6, #0]
 8011eac:	2000      	movs	r0, #0
 8011eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011f88 <_malloc_r+0xfc>
 8011eb6:	f000 f869 	bl	8011f8c <__malloc_lock>
 8011eba:	f8d8 3000 	ldr.w	r3, [r8]
 8011ebe:	461c      	mov	r4, r3
 8011ec0:	bb44      	cbnz	r4, 8011f14 <_malloc_r+0x88>
 8011ec2:	4629      	mov	r1, r5
 8011ec4:	4630      	mov	r0, r6
 8011ec6:	f7ff ffbf 	bl	8011e48 <sbrk_aligned>
 8011eca:	1c43      	adds	r3, r0, #1
 8011ecc:	4604      	mov	r4, r0
 8011ece:	d158      	bne.n	8011f82 <_malloc_r+0xf6>
 8011ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8011ed4:	4627      	mov	r7, r4
 8011ed6:	2f00      	cmp	r7, #0
 8011ed8:	d143      	bne.n	8011f62 <_malloc_r+0xd6>
 8011eda:	2c00      	cmp	r4, #0
 8011edc:	d04b      	beq.n	8011f76 <_malloc_r+0xea>
 8011ede:	6823      	ldr	r3, [r4, #0]
 8011ee0:	4639      	mov	r1, r7
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	eb04 0903 	add.w	r9, r4, r3
 8011ee8:	f000 fb5c 	bl	80125a4 <_sbrk_r>
 8011eec:	4581      	cmp	r9, r0
 8011eee:	d142      	bne.n	8011f76 <_malloc_r+0xea>
 8011ef0:	6821      	ldr	r1, [r4, #0]
 8011ef2:	1a6d      	subs	r5, r5, r1
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	f7ff ffa6 	bl	8011e48 <sbrk_aligned>
 8011efc:	3001      	adds	r0, #1
 8011efe:	d03a      	beq.n	8011f76 <_malloc_r+0xea>
 8011f00:	6823      	ldr	r3, [r4, #0]
 8011f02:	442b      	add	r3, r5
 8011f04:	6023      	str	r3, [r4, #0]
 8011f06:	f8d8 3000 	ldr.w	r3, [r8]
 8011f0a:	685a      	ldr	r2, [r3, #4]
 8011f0c:	bb62      	cbnz	r2, 8011f68 <_malloc_r+0xdc>
 8011f0e:	f8c8 7000 	str.w	r7, [r8]
 8011f12:	e00f      	b.n	8011f34 <_malloc_r+0xa8>
 8011f14:	6822      	ldr	r2, [r4, #0]
 8011f16:	1b52      	subs	r2, r2, r5
 8011f18:	d420      	bmi.n	8011f5c <_malloc_r+0xd0>
 8011f1a:	2a0b      	cmp	r2, #11
 8011f1c:	d917      	bls.n	8011f4e <_malloc_r+0xc2>
 8011f1e:	1961      	adds	r1, r4, r5
 8011f20:	42a3      	cmp	r3, r4
 8011f22:	6025      	str	r5, [r4, #0]
 8011f24:	bf18      	it	ne
 8011f26:	6059      	strne	r1, [r3, #4]
 8011f28:	6863      	ldr	r3, [r4, #4]
 8011f2a:	bf08      	it	eq
 8011f2c:	f8c8 1000 	streq.w	r1, [r8]
 8011f30:	5162      	str	r2, [r4, r5]
 8011f32:	604b      	str	r3, [r1, #4]
 8011f34:	4630      	mov	r0, r6
 8011f36:	f000 f82f 	bl	8011f98 <__malloc_unlock>
 8011f3a:	f104 000b 	add.w	r0, r4, #11
 8011f3e:	1d23      	adds	r3, r4, #4
 8011f40:	f020 0007 	bic.w	r0, r0, #7
 8011f44:	1ac2      	subs	r2, r0, r3
 8011f46:	bf1c      	itt	ne
 8011f48:	1a1b      	subne	r3, r3, r0
 8011f4a:	50a3      	strne	r3, [r4, r2]
 8011f4c:	e7af      	b.n	8011eae <_malloc_r+0x22>
 8011f4e:	6862      	ldr	r2, [r4, #4]
 8011f50:	42a3      	cmp	r3, r4
 8011f52:	bf0c      	ite	eq
 8011f54:	f8c8 2000 	streq.w	r2, [r8]
 8011f58:	605a      	strne	r2, [r3, #4]
 8011f5a:	e7eb      	b.n	8011f34 <_malloc_r+0xa8>
 8011f5c:	4623      	mov	r3, r4
 8011f5e:	6864      	ldr	r4, [r4, #4]
 8011f60:	e7ae      	b.n	8011ec0 <_malloc_r+0x34>
 8011f62:	463c      	mov	r4, r7
 8011f64:	687f      	ldr	r7, [r7, #4]
 8011f66:	e7b6      	b.n	8011ed6 <_malloc_r+0x4a>
 8011f68:	461a      	mov	r2, r3
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	42a3      	cmp	r3, r4
 8011f6e:	d1fb      	bne.n	8011f68 <_malloc_r+0xdc>
 8011f70:	2300      	movs	r3, #0
 8011f72:	6053      	str	r3, [r2, #4]
 8011f74:	e7de      	b.n	8011f34 <_malloc_r+0xa8>
 8011f76:	230c      	movs	r3, #12
 8011f78:	6033      	str	r3, [r6, #0]
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f000 f80c 	bl	8011f98 <__malloc_unlock>
 8011f80:	e794      	b.n	8011eac <_malloc_r+0x20>
 8011f82:	6005      	str	r5, [r0, #0]
 8011f84:	e7d6      	b.n	8011f34 <_malloc_r+0xa8>
 8011f86:	bf00      	nop
 8011f88:	24001bac 	.word	0x24001bac

08011f8c <__malloc_lock>:
 8011f8c:	4801      	ldr	r0, [pc, #4]	@ (8011f94 <__malloc_lock+0x8>)
 8011f8e:	f7ff bf01 	b.w	8011d94 <__retarget_lock_acquire_recursive>
 8011f92:	bf00      	nop
 8011f94:	24001ba4 	.word	0x24001ba4

08011f98 <__malloc_unlock>:
 8011f98:	4801      	ldr	r0, [pc, #4]	@ (8011fa0 <__malloc_unlock+0x8>)
 8011f9a:	f7ff befc 	b.w	8011d96 <__retarget_lock_release_recursive>
 8011f9e:	bf00      	nop
 8011fa0:	24001ba4 	.word	0x24001ba4

08011fa4 <__ssputs_r>:
 8011fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fa8:	688e      	ldr	r6, [r1, #8]
 8011faa:	461f      	mov	r7, r3
 8011fac:	42be      	cmp	r6, r7
 8011fae:	680b      	ldr	r3, [r1, #0]
 8011fb0:	4682      	mov	sl, r0
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	4690      	mov	r8, r2
 8011fb6:	d82d      	bhi.n	8012014 <__ssputs_r+0x70>
 8011fb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011fbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011fc0:	d026      	beq.n	8012010 <__ssputs_r+0x6c>
 8011fc2:	6965      	ldr	r5, [r4, #20]
 8011fc4:	6909      	ldr	r1, [r1, #16]
 8011fc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011fca:	eba3 0901 	sub.w	r9, r3, r1
 8011fce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011fd2:	1c7b      	adds	r3, r7, #1
 8011fd4:	444b      	add	r3, r9
 8011fd6:	106d      	asrs	r5, r5, #1
 8011fd8:	429d      	cmp	r5, r3
 8011fda:	bf38      	it	cc
 8011fdc:	461d      	movcc	r5, r3
 8011fde:	0553      	lsls	r3, r2, #21
 8011fe0:	d527      	bpl.n	8012032 <__ssputs_r+0x8e>
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	f7ff ff52 	bl	8011e8c <_malloc_r>
 8011fe8:	4606      	mov	r6, r0
 8011fea:	b360      	cbz	r0, 8012046 <__ssputs_r+0xa2>
 8011fec:	6921      	ldr	r1, [r4, #16]
 8011fee:	464a      	mov	r2, r9
 8011ff0:	f7ff fed2 	bl	8011d98 <memcpy>
 8011ff4:	89a3      	ldrh	r3, [r4, #12]
 8011ff6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ffe:	81a3      	strh	r3, [r4, #12]
 8012000:	6126      	str	r6, [r4, #16]
 8012002:	6165      	str	r5, [r4, #20]
 8012004:	444e      	add	r6, r9
 8012006:	eba5 0509 	sub.w	r5, r5, r9
 801200a:	6026      	str	r6, [r4, #0]
 801200c:	60a5      	str	r5, [r4, #8]
 801200e:	463e      	mov	r6, r7
 8012010:	42be      	cmp	r6, r7
 8012012:	d900      	bls.n	8012016 <__ssputs_r+0x72>
 8012014:	463e      	mov	r6, r7
 8012016:	6820      	ldr	r0, [r4, #0]
 8012018:	4632      	mov	r2, r6
 801201a:	4641      	mov	r1, r8
 801201c:	f000 faa8 	bl	8012570 <memmove>
 8012020:	68a3      	ldr	r3, [r4, #8]
 8012022:	1b9b      	subs	r3, r3, r6
 8012024:	60a3      	str	r3, [r4, #8]
 8012026:	6823      	ldr	r3, [r4, #0]
 8012028:	4433      	add	r3, r6
 801202a:	6023      	str	r3, [r4, #0]
 801202c:	2000      	movs	r0, #0
 801202e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012032:	462a      	mov	r2, r5
 8012034:	f000 fac6 	bl	80125c4 <_realloc_r>
 8012038:	4606      	mov	r6, r0
 801203a:	2800      	cmp	r0, #0
 801203c:	d1e0      	bne.n	8012000 <__ssputs_r+0x5c>
 801203e:	6921      	ldr	r1, [r4, #16]
 8012040:	4650      	mov	r0, sl
 8012042:	f7ff feb7 	bl	8011db4 <_free_r>
 8012046:	230c      	movs	r3, #12
 8012048:	f8ca 3000 	str.w	r3, [sl]
 801204c:	89a3      	ldrh	r3, [r4, #12]
 801204e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012052:	81a3      	strh	r3, [r4, #12]
 8012054:	f04f 30ff 	mov.w	r0, #4294967295
 8012058:	e7e9      	b.n	801202e <__ssputs_r+0x8a>
	...

0801205c <_svfiprintf_r>:
 801205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012060:	4698      	mov	r8, r3
 8012062:	898b      	ldrh	r3, [r1, #12]
 8012064:	061b      	lsls	r3, r3, #24
 8012066:	b09d      	sub	sp, #116	@ 0x74
 8012068:	4607      	mov	r7, r0
 801206a:	460d      	mov	r5, r1
 801206c:	4614      	mov	r4, r2
 801206e:	d510      	bpl.n	8012092 <_svfiprintf_r+0x36>
 8012070:	690b      	ldr	r3, [r1, #16]
 8012072:	b973      	cbnz	r3, 8012092 <_svfiprintf_r+0x36>
 8012074:	2140      	movs	r1, #64	@ 0x40
 8012076:	f7ff ff09 	bl	8011e8c <_malloc_r>
 801207a:	6028      	str	r0, [r5, #0]
 801207c:	6128      	str	r0, [r5, #16]
 801207e:	b930      	cbnz	r0, 801208e <_svfiprintf_r+0x32>
 8012080:	230c      	movs	r3, #12
 8012082:	603b      	str	r3, [r7, #0]
 8012084:	f04f 30ff 	mov.w	r0, #4294967295
 8012088:	b01d      	add	sp, #116	@ 0x74
 801208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801208e:	2340      	movs	r3, #64	@ 0x40
 8012090:	616b      	str	r3, [r5, #20]
 8012092:	2300      	movs	r3, #0
 8012094:	9309      	str	r3, [sp, #36]	@ 0x24
 8012096:	2320      	movs	r3, #32
 8012098:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801209c:	f8cd 800c 	str.w	r8, [sp, #12]
 80120a0:	2330      	movs	r3, #48	@ 0x30
 80120a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012240 <_svfiprintf_r+0x1e4>
 80120a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120aa:	f04f 0901 	mov.w	r9, #1
 80120ae:	4623      	mov	r3, r4
 80120b0:	469a      	mov	sl, r3
 80120b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120b6:	b10a      	cbz	r2, 80120bc <_svfiprintf_r+0x60>
 80120b8:	2a25      	cmp	r2, #37	@ 0x25
 80120ba:	d1f9      	bne.n	80120b0 <_svfiprintf_r+0x54>
 80120bc:	ebba 0b04 	subs.w	fp, sl, r4
 80120c0:	d00b      	beq.n	80120da <_svfiprintf_r+0x7e>
 80120c2:	465b      	mov	r3, fp
 80120c4:	4622      	mov	r2, r4
 80120c6:	4629      	mov	r1, r5
 80120c8:	4638      	mov	r0, r7
 80120ca:	f7ff ff6b 	bl	8011fa4 <__ssputs_r>
 80120ce:	3001      	adds	r0, #1
 80120d0:	f000 80a7 	beq.w	8012222 <_svfiprintf_r+0x1c6>
 80120d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120d6:	445a      	add	r2, fp
 80120d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80120da:	f89a 3000 	ldrb.w	r3, [sl]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f000 809f 	beq.w	8012222 <_svfiprintf_r+0x1c6>
 80120e4:	2300      	movs	r3, #0
 80120e6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120ee:	f10a 0a01 	add.w	sl, sl, #1
 80120f2:	9304      	str	r3, [sp, #16]
 80120f4:	9307      	str	r3, [sp, #28]
 80120f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80120fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80120fc:	4654      	mov	r4, sl
 80120fe:	2205      	movs	r2, #5
 8012100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012104:	484e      	ldr	r0, [pc, #312]	@ (8012240 <_svfiprintf_r+0x1e4>)
 8012106:	f7ee f90b 	bl	8000320 <memchr>
 801210a:	9a04      	ldr	r2, [sp, #16]
 801210c:	b9d8      	cbnz	r0, 8012146 <_svfiprintf_r+0xea>
 801210e:	06d0      	lsls	r0, r2, #27
 8012110:	bf44      	itt	mi
 8012112:	2320      	movmi	r3, #32
 8012114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012118:	0711      	lsls	r1, r2, #28
 801211a:	bf44      	itt	mi
 801211c:	232b      	movmi	r3, #43	@ 0x2b
 801211e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012122:	f89a 3000 	ldrb.w	r3, [sl]
 8012126:	2b2a      	cmp	r3, #42	@ 0x2a
 8012128:	d015      	beq.n	8012156 <_svfiprintf_r+0xfa>
 801212a:	9a07      	ldr	r2, [sp, #28]
 801212c:	4654      	mov	r4, sl
 801212e:	2000      	movs	r0, #0
 8012130:	f04f 0c0a 	mov.w	ip, #10
 8012134:	4621      	mov	r1, r4
 8012136:	f811 3b01 	ldrb.w	r3, [r1], #1
 801213a:	3b30      	subs	r3, #48	@ 0x30
 801213c:	2b09      	cmp	r3, #9
 801213e:	d94b      	bls.n	80121d8 <_svfiprintf_r+0x17c>
 8012140:	b1b0      	cbz	r0, 8012170 <_svfiprintf_r+0x114>
 8012142:	9207      	str	r2, [sp, #28]
 8012144:	e014      	b.n	8012170 <_svfiprintf_r+0x114>
 8012146:	eba0 0308 	sub.w	r3, r0, r8
 801214a:	fa09 f303 	lsl.w	r3, r9, r3
 801214e:	4313      	orrs	r3, r2
 8012150:	9304      	str	r3, [sp, #16]
 8012152:	46a2      	mov	sl, r4
 8012154:	e7d2      	b.n	80120fc <_svfiprintf_r+0xa0>
 8012156:	9b03      	ldr	r3, [sp, #12]
 8012158:	1d19      	adds	r1, r3, #4
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	9103      	str	r1, [sp, #12]
 801215e:	2b00      	cmp	r3, #0
 8012160:	bfbb      	ittet	lt
 8012162:	425b      	neglt	r3, r3
 8012164:	f042 0202 	orrlt.w	r2, r2, #2
 8012168:	9307      	strge	r3, [sp, #28]
 801216a:	9307      	strlt	r3, [sp, #28]
 801216c:	bfb8      	it	lt
 801216e:	9204      	strlt	r2, [sp, #16]
 8012170:	7823      	ldrb	r3, [r4, #0]
 8012172:	2b2e      	cmp	r3, #46	@ 0x2e
 8012174:	d10a      	bne.n	801218c <_svfiprintf_r+0x130>
 8012176:	7863      	ldrb	r3, [r4, #1]
 8012178:	2b2a      	cmp	r3, #42	@ 0x2a
 801217a:	d132      	bne.n	80121e2 <_svfiprintf_r+0x186>
 801217c:	9b03      	ldr	r3, [sp, #12]
 801217e:	1d1a      	adds	r2, r3, #4
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	9203      	str	r2, [sp, #12]
 8012184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012188:	3402      	adds	r4, #2
 801218a:	9305      	str	r3, [sp, #20]
 801218c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012250 <_svfiprintf_r+0x1f4>
 8012190:	7821      	ldrb	r1, [r4, #0]
 8012192:	2203      	movs	r2, #3
 8012194:	4650      	mov	r0, sl
 8012196:	f7ee f8c3 	bl	8000320 <memchr>
 801219a:	b138      	cbz	r0, 80121ac <_svfiprintf_r+0x150>
 801219c:	9b04      	ldr	r3, [sp, #16]
 801219e:	eba0 000a 	sub.w	r0, r0, sl
 80121a2:	2240      	movs	r2, #64	@ 0x40
 80121a4:	4082      	lsls	r2, r0
 80121a6:	4313      	orrs	r3, r2
 80121a8:	3401      	adds	r4, #1
 80121aa:	9304      	str	r3, [sp, #16]
 80121ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121b0:	4824      	ldr	r0, [pc, #144]	@ (8012244 <_svfiprintf_r+0x1e8>)
 80121b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121b6:	2206      	movs	r2, #6
 80121b8:	f7ee f8b2 	bl	8000320 <memchr>
 80121bc:	2800      	cmp	r0, #0
 80121be:	d036      	beq.n	801222e <_svfiprintf_r+0x1d2>
 80121c0:	4b21      	ldr	r3, [pc, #132]	@ (8012248 <_svfiprintf_r+0x1ec>)
 80121c2:	bb1b      	cbnz	r3, 801220c <_svfiprintf_r+0x1b0>
 80121c4:	9b03      	ldr	r3, [sp, #12]
 80121c6:	3307      	adds	r3, #7
 80121c8:	f023 0307 	bic.w	r3, r3, #7
 80121cc:	3308      	adds	r3, #8
 80121ce:	9303      	str	r3, [sp, #12]
 80121d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121d2:	4433      	add	r3, r6
 80121d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80121d6:	e76a      	b.n	80120ae <_svfiprintf_r+0x52>
 80121d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80121dc:	460c      	mov	r4, r1
 80121de:	2001      	movs	r0, #1
 80121e0:	e7a8      	b.n	8012134 <_svfiprintf_r+0xd8>
 80121e2:	2300      	movs	r3, #0
 80121e4:	3401      	adds	r4, #1
 80121e6:	9305      	str	r3, [sp, #20]
 80121e8:	4619      	mov	r1, r3
 80121ea:	f04f 0c0a 	mov.w	ip, #10
 80121ee:	4620      	mov	r0, r4
 80121f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121f4:	3a30      	subs	r2, #48	@ 0x30
 80121f6:	2a09      	cmp	r2, #9
 80121f8:	d903      	bls.n	8012202 <_svfiprintf_r+0x1a6>
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d0c6      	beq.n	801218c <_svfiprintf_r+0x130>
 80121fe:	9105      	str	r1, [sp, #20]
 8012200:	e7c4      	b.n	801218c <_svfiprintf_r+0x130>
 8012202:	fb0c 2101 	mla	r1, ip, r1, r2
 8012206:	4604      	mov	r4, r0
 8012208:	2301      	movs	r3, #1
 801220a:	e7f0      	b.n	80121ee <_svfiprintf_r+0x192>
 801220c:	ab03      	add	r3, sp, #12
 801220e:	9300      	str	r3, [sp, #0]
 8012210:	462a      	mov	r2, r5
 8012212:	4b0e      	ldr	r3, [pc, #56]	@ (801224c <_svfiprintf_r+0x1f0>)
 8012214:	a904      	add	r1, sp, #16
 8012216:	4638      	mov	r0, r7
 8012218:	f3af 8000 	nop.w
 801221c:	1c42      	adds	r2, r0, #1
 801221e:	4606      	mov	r6, r0
 8012220:	d1d6      	bne.n	80121d0 <_svfiprintf_r+0x174>
 8012222:	89ab      	ldrh	r3, [r5, #12]
 8012224:	065b      	lsls	r3, r3, #25
 8012226:	f53f af2d 	bmi.w	8012084 <_svfiprintf_r+0x28>
 801222a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801222c:	e72c      	b.n	8012088 <_svfiprintf_r+0x2c>
 801222e:	ab03      	add	r3, sp, #12
 8012230:	9300      	str	r3, [sp, #0]
 8012232:	462a      	mov	r2, r5
 8012234:	4b05      	ldr	r3, [pc, #20]	@ (801224c <_svfiprintf_r+0x1f0>)
 8012236:	a904      	add	r1, sp, #16
 8012238:	4638      	mov	r0, r7
 801223a:	f000 f879 	bl	8012330 <_printf_i>
 801223e:	e7ed      	b.n	801221c <_svfiprintf_r+0x1c0>
 8012240:	08012ab8 	.word	0x08012ab8
 8012244:	08012ac2 	.word	0x08012ac2
 8012248:	00000000 	.word	0x00000000
 801224c:	08011fa5 	.word	0x08011fa5
 8012250:	08012abe 	.word	0x08012abe

08012254 <_printf_common>:
 8012254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012258:	4616      	mov	r6, r2
 801225a:	4698      	mov	r8, r3
 801225c:	688a      	ldr	r2, [r1, #8]
 801225e:	690b      	ldr	r3, [r1, #16]
 8012260:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012264:	4293      	cmp	r3, r2
 8012266:	bfb8      	it	lt
 8012268:	4613      	movlt	r3, r2
 801226a:	6033      	str	r3, [r6, #0]
 801226c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012270:	4607      	mov	r7, r0
 8012272:	460c      	mov	r4, r1
 8012274:	b10a      	cbz	r2, 801227a <_printf_common+0x26>
 8012276:	3301      	adds	r3, #1
 8012278:	6033      	str	r3, [r6, #0]
 801227a:	6823      	ldr	r3, [r4, #0]
 801227c:	0699      	lsls	r1, r3, #26
 801227e:	bf42      	ittt	mi
 8012280:	6833      	ldrmi	r3, [r6, #0]
 8012282:	3302      	addmi	r3, #2
 8012284:	6033      	strmi	r3, [r6, #0]
 8012286:	6825      	ldr	r5, [r4, #0]
 8012288:	f015 0506 	ands.w	r5, r5, #6
 801228c:	d106      	bne.n	801229c <_printf_common+0x48>
 801228e:	f104 0a19 	add.w	sl, r4, #25
 8012292:	68e3      	ldr	r3, [r4, #12]
 8012294:	6832      	ldr	r2, [r6, #0]
 8012296:	1a9b      	subs	r3, r3, r2
 8012298:	42ab      	cmp	r3, r5
 801229a:	dc26      	bgt.n	80122ea <_printf_common+0x96>
 801229c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80122a0:	6822      	ldr	r2, [r4, #0]
 80122a2:	3b00      	subs	r3, #0
 80122a4:	bf18      	it	ne
 80122a6:	2301      	movne	r3, #1
 80122a8:	0692      	lsls	r2, r2, #26
 80122aa:	d42b      	bmi.n	8012304 <_printf_common+0xb0>
 80122ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80122b0:	4641      	mov	r1, r8
 80122b2:	4638      	mov	r0, r7
 80122b4:	47c8      	blx	r9
 80122b6:	3001      	adds	r0, #1
 80122b8:	d01e      	beq.n	80122f8 <_printf_common+0xa4>
 80122ba:	6823      	ldr	r3, [r4, #0]
 80122bc:	6922      	ldr	r2, [r4, #16]
 80122be:	f003 0306 	and.w	r3, r3, #6
 80122c2:	2b04      	cmp	r3, #4
 80122c4:	bf02      	ittt	eq
 80122c6:	68e5      	ldreq	r5, [r4, #12]
 80122c8:	6833      	ldreq	r3, [r6, #0]
 80122ca:	1aed      	subeq	r5, r5, r3
 80122cc:	68a3      	ldr	r3, [r4, #8]
 80122ce:	bf0c      	ite	eq
 80122d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122d4:	2500      	movne	r5, #0
 80122d6:	4293      	cmp	r3, r2
 80122d8:	bfc4      	itt	gt
 80122da:	1a9b      	subgt	r3, r3, r2
 80122dc:	18ed      	addgt	r5, r5, r3
 80122de:	2600      	movs	r6, #0
 80122e0:	341a      	adds	r4, #26
 80122e2:	42b5      	cmp	r5, r6
 80122e4:	d11a      	bne.n	801231c <_printf_common+0xc8>
 80122e6:	2000      	movs	r0, #0
 80122e8:	e008      	b.n	80122fc <_printf_common+0xa8>
 80122ea:	2301      	movs	r3, #1
 80122ec:	4652      	mov	r2, sl
 80122ee:	4641      	mov	r1, r8
 80122f0:	4638      	mov	r0, r7
 80122f2:	47c8      	blx	r9
 80122f4:	3001      	adds	r0, #1
 80122f6:	d103      	bne.n	8012300 <_printf_common+0xac>
 80122f8:	f04f 30ff 	mov.w	r0, #4294967295
 80122fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012300:	3501      	adds	r5, #1
 8012302:	e7c6      	b.n	8012292 <_printf_common+0x3e>
 8012304:	18e1      	adds	r1, r4, r3
 8012306:	1c5a      	adds	r2, r3, #1
 8012308:	2030      	movs	r0, #48	@ 0x30
 801230a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801230e:	4422      	add	r2, r4
 8012310:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012314:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012318:	3302      	adds	r3, #2
 801231a:	e7c7      	b.n	80122ac <_printf_common+0x58>
 801231c:	2301      	movs	r3, #1
 801231e:	4622      	mov	r2, r4
 8012320:	4641      	mov	r1, r8
 8012322:	4638      	mov	r0, r7
 8012324:	47c8      	blx	r9
 8012326:	3001      	adds	r0, #1
 8012328:	d0e6      	beq.n	80122f8 <_printf_common+0xa4>
 801232a:	3601      	adds	r6, #1
 801232c:	e7d9      	b.n	80122e2 <_printf_common+0x8e>
	...

08012330 <_printf_i>:
 8012330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012334:	7e0f      	ldrb	r7, [r1, #24]
 8012336:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012338:	2f78      	cmp	r7, #120	@ 0x78
 801233a:	4691      	mov	r9, r2
 801233c:	4680      	mov	r8, r0
 801233e:	460c      	mov	r4, r1
 8012340:	469a      	mov	sl, r3
 8012342:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012346:	d807      	bhi.n	8012358 <_printf_i+0x28>
 8012348:	2f62      	cmp	r7, #98	@ 0x62
 801234a:	d80a      	bhi.n	8012362 <_printf_i+0x32>
 801234c:	2f00      	cmp	r7, #0
 801234e:	f000 80d2 	beq.w	80124f6 <_printf_i+0x1c6>
 8012352:	2f58      	cmp	r7, #88	@ 0x58
 8012354:	f000 80b9 	beq.w	80124ca <_printf_i+0x19a>
 8012358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801235c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012360:	e03a      	b.n	80123d8 <_printf_i+0xa8>
 8012362:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012366:	2b15      	cmp	r3, #21
 8012368:	d8f6      	bhi.n	8012358 <_printf_i+0x28>
 801236a:	a101      	add	r1, pc, #4	@ (adr r1, 8012370 <_printf_i+0x40>)
 801236c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012370:	080123c9 	.word	0x080123c9
 8012374:	080123dd 	.word	0x080123dd
 8012378:	08012359 	.word	0x08012359
 801237c:	08012359 	.word	0x08012359
 8012380:	08012359 	.word	0x08012359
 8012384:	08012359 	.word	0x08012359
 8012388:	080123dd 	.word	0x080123dd
 801238c:	08012359 	.word	0x08012359
 8012390:	08012359 	.word	0x08012359
 8012394:	08012359 	.word	0x08012359
 8012398:	08012359 	.word	0x08012359
 801239c:	080124dd 	.word	0x080124dd
 80123a0:	08012407 	.word	0x08012407
 80123a4:	08012497 	.word	0x08012497
 80123a8:	08012359 	.word	0x08012359
 80123ac:	08012359 	.word	0x08012359
 80123b0:	080124ff 	.word	0x080124ff
 80123b4:	08012359 	.word	0x08012359
 80123b8:	08012407 	.word	0x08012407
 80123bc:	08012359 	.word	0x08012359
 80123c0:	08012359 	.word	0x08012359
 80123c4:	0801249f 	.word	0x0801249f
 80123c8:	6833      	ldr	r3, [r6, #0]
 80123ca:	1d1a      	adds	r2, r3, #4
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	6032      	str	r2, [r6, #0]
 80123d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80123d8:	2301      	movs	r3, #1
 80123da:	e09d      	b.n	8012518 <_printf_i+0x1e8>
 80123dc:	6833      	ldr	r3, [r6, #0]
 80123de:	6820      	ldr	r0, [r4, #0]
 80123e0:	1d19      	adds	r1, r3, #4
 80123e2:	6031      	str	r1, [r6, #0]
 80123e4:	0606      	lsls	r6, r0, #24
 80123e6:	d501      	bpl.n	80123ec <_printf_i+0xbc>
 80123e8:	681d      	ldr	r5, [r3, #0]
 80123ea:	e003      	b.n	80123f4 <_printf_i+0xc4>
 80123ec:	0645      	lsls	r5, r0, #25
 80123ee:	d5fb      	bpl.n	80123e8 <_printf_i+0xb8>
 80123f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80123f4:	2d00      	cmp	r5, #0
 80123f6:	da03      	bge.n	8012400 <_printf_i+0xd0>
 80123f8:	232d      	movs	r3, #45	@ 0x2d
 80123fa:	426d      	negs	r5, r5
 80123fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012400:	4859      	ldr	r0, [pc, #356]	@ (8012568 <_printf_i+0x238>)
 8012402:	230a      	movs	r3, #10
 8012404:	e011      	b.n	801242a <_printf_i+0xfa>
 8012406:	6821      	ldr	r1, [r4, #0]
 8012408:	6833      	ldr	r3, [r6, #0]
 801240a:	0608      	lsls	r0, r1, #24
 801240c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012410:	d402      	bmi.n	8012418 <_printf_i+0xe8>
 8012412:	0649      	lsls	r1, r1, #25
 8012414:	bf48      	it	mi
 8012416:	b2ad      	uxthmi	r5, r5
 8012418:	2f6f      	cmp	r7, #111	@ 0x6f
 801241a:	4853      	ldr	r0, [pc, #332]	@ (8012568 <_printf_i+0x238>)
 801241c:	6033      	str	r3, [r6, #0]
 801241e:	bf14      	ite	ne
 8012420:	230a      	movne	r3, #10
 8012422:	2308      	moveq	r3, #8
 8012424:	2100      	movs	r1, #0
 8012426:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801242a:	6866      	ldr	r6, [r4, #4]
 801242c:	60a6      	str	r6, [r4, #8]
 801242e:	2e00      	cmp	r6, #0
 8012430:	bfa2      	ittt	ge
 8012432:	6821      	ldrge	r1, [r4, #0]
 8012434:	f021 0104 	bicge.w	r1, r1, #4
 8012438:	6021      	strge	r1, [r4, #0]
 801243a:	b90d      	cbnz	r5, 8012440 <_printf_i+0x110>
 801243c:	2e00      	cmp	r6, #0
 801243e:	d04b      	beq.n	80124d8 <_printf_i+0x1a8>
 8012440:	4616      	mov	r6, r2
 8012442:	fbb5 f1f3 	udiv	r1, r5, r3
 8012446:	fb03 5711 	mls	r7, r3, r1, r5
 801244a:	5dc7      	ldrb	r7, [r0, r7]
 801244c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012450:	462f      	mov	r7, r5
 8012452:	42bb      	cmp	r3, r7
 8012454:	460d      	mov	r5, r1
 8012456:	d9f4      	bls.n	8012442 <_printf_i+0x112>
 8012458:	2b08      	cmp	r3, #8
 801245a:	d10b      	bne.n	8012474 <_printf_i+0x144>
 801245c:	6823      	ldr	r3, [r4, #0]
 801245e:	07df      	lsls	r7, r3, #31
 8012460:	d508      	bpl.n	8012474 <_printf_i+0x144>
 8012462:	6923      	ldr	r3, [r4, #16]
 8012464:	6861      	ldr	r1, [r4, #4]
 8012466:	4299      	cmp	r1, r3
 8012468:	bfde      	ittt	le
 801246a:	2330      	movle	r3, #48	@ 0x30
 801246c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012470:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012474:	1b92      	subs	r2, r2, r6
 8012476:	6122      	str	r2, [r4, #16]
 8012478:	f8cd a000 	str.w	sl, [sp]
 801247c:	464b      	mov	r3, r9
 801247e:	aa03      	add	r2, sp, #12
 8012480:	4621      	mov	r1, r4
 8012482:	4640      	mov	r0, r8
 8012484:	f7ff fee6 	bl	8012254 <_printf_common>
 8012488:	3001      	adds	r0, #1
 801248a:	d14a      	bne.n	8012522 <_printf_i+0x1f2>
 801248c:	f04f 30ff 	mov.w	r0, #4294967295
 8012490:	b004      	add	sp, #16
 8012492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	f043 0320 	orr.w	r3, r3, #32
 801249c:	6023      	str	r3, [r4, #0]
 801249e:	4833      	ldr	r0, [pc, #204]	@ (801256c <_printf_i+0x23c>)
 80124a0:	2778      	movs	r7, #120	@ 0x78
 80124a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	6831      	ldr	r1, [r6, #0]
 80124aa:	061f      	lsls	r7, r3, #24
 80124ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80124b0:	d402      	bmi.n	80124b8 <_printf_i+0x188>
 80124b2:	065f      	lsls	r7, r3, #25
 80124b4:	bf48      	it	mi
 80124b6:	b2ad      	uxthmi	r5, r5
 80124b8:	6031      	str	r1, [r6, #0]
 80124ba:	07d9      	lsls	r1, r3, #31
 80124bc:	bf44      	itt	mi
 80124be:	f043 0320 	orrmi.w	r3, r3, #32
 80124c2:	6023      	strmi	r3, [r4, #0]
 80124c4:	b11d      	cbz	r5, 80124ce <_printf_i+0x19e>
 80124c6:	2310      	movs	r3, #16
 80124c8:	e7ac      	b.n	8012424 <_printf_i+0xf4>
 80124ca:	4827      	ldr	r0, [pc, #156]	@ (8012568 <_printf_i+0x238>)
 80124cc:	e7e9      	b.n	80124a2 <_printf_i+0x172>
 80124ce:	6823      	ldr	r3, [r4, #0]
 80124d0:	f023 0320 	bic.w	r3, r3, #32
 80124d4:	6023      	str	r3, [r4, #0]
 80124d6:	e7f6      	b.n	80124c6 <_printf_i+0x196>
 80124d8:	4616      	mov	r6, r2
 80124da:	e7bd      	b.n	8012458 <_printf_i+0x128>
 80124dc:	6833      	ldr	r3, [r6, #0]
 80124de:	6825      	ldr	r5, [r4, #0]
 80124e0:	6961      	ldr	r1, [r4, #20]
 80124e2:	1d18      	adds	r0, r3, #4
 80124e4:	6030      	str	r0, [r6, #0]
 80124e6:	062e      	lsls	r6, r5, #24
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	d501      	bpl.n	80124f0 <_printf_i+0x1c0>
 80124ec:	6019      	str	r1, [r3, #0]
 80124ee:	e002      	b.n	80124f6 <_printf_i+0x1c6>
 80124f0:	0668      	lsls	r0, r5, #25
 80124f2:	d5fb      	bpl.n	80124ec <_printf_i+0x1bc>
 80124f4:	8019      	strh	r1, [r3, #0]
 80124f6:	2300      	movs	r3, #0
 80124f8:	6123      	str	r3, [r4, #16]
 80124fa:	4616      	mov	r6, r2
 80124fc:	e7bc      	b.n	8012478 <_printf_i+0x148>
 80124fe:	6833      	ldr	r3, [r6, #0]
 8012500:	1d1a      	adds	r2, r3, #4
 8012502:	6032      	str	r2, [r6, #0]
 8012504:	681e      	ldr	r6, [r3, #0]
 8012506:	6862      	ldr	r2, [r4, #4]
 8012508:	2100      	movs	r1, #0
 801250a:	4630      	mov	r0, r6
 801250c:	f7ed ff08 	bl	8000320 <memchr>
 8012510:	b108      	cbz	r0, 8012516 <_printf_i+0x1e6>
 8012512:	1b80      	subs	r0, r0, r6
 8012514:	6060      	str	r0, [r4, #4]
 8012516:	6863      	ldr	r3, [r4, #4]
 8012518:	6123      	str	r3, [r4, #16]
 801251a:	2300      	movs	r3, #0
 801251c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012520:	e7aa      	b.n	8012478 <_printf_i+0x148>
 8012522:	6923      	ldr	r3, [r4, #16]
 8012524:	4632      	mov	r2, r6
 8012526:	4649      	mov	r1, r9
 8012528:	4640      	mov	r0, r8
 801252a:	47d0      	blx	sl
 801252c:	3001      	adds	r0, #1
 801252e:	d0ad      	beq.n	801248c <_printf_i+0x15c>
 8012530:	6823      	ldr	r3, [r4, #0]
 8012532:	079b      	lsls	r3, r3, #30
 8012534:	d413      	bmi.n	801255e <_printf_i+0x22e>
 8012536:	68e0      	ldr	r0, [r4, #12]
 8012538:	9b03      	ldr	r3, [sp, #12]
 801253a:	4298      	cmp	r0, r3
 801253c:	bfb8      	it	lt
 801253e:	4618      	movlt	r0, r3
 8012540:	e7a6      	b.n	8012490 <_printf_i+0x160>
 8012542:	2301      	movs	r3, #1
 8012544:	4632      	mov	r2, r6
 8012546:	4649      	mov	r1, r9
 8012548:	4640      	mov	r0, r8
 801254a:	47d0      	blx	sl
 801254c:	3001      	adds	r0, #1
 801254e:	d09d      	beq.n	801248c <_printf_i+0x15c>
 8012550:	3501      	adds	r5, #1
 8012552:	68e3      	ldr	r3, [r4, #12]
 8012554:	9903      	ldr	r1, [sp, #12]
 8012556:	1a5b      	subs	r3, r3, r1
 8012558:	42ab      	cmp	r3, r5
 801255a:	dcf2      	bgt.n	8012542 <_printf_i+0x212>
 801255c:	e7eb      	b.n	8012536 <_printf_i+0x206>
 801255e:	2500      	movs	r5, #0
 8012560:	f104 0619 	add.w	r6, r4, #25
 8012564:	e7f5      	b.n	8012552 <_printf_i+0x222>
 8012566:	bf00      	nop
 8012568:	08012ac9 	.word	0x08012ac9
 801256c:	08012ada 	.word	0x08012ada

08012570 <memmove>:
 8012570:	4288      	cmp	r0, r1
 8012572:	b510      	push	{r4, lr}
 8012574:	eb01 0402 	add.w	r4, r1, r2
 8012578:	d902      	bls.n	8012580 <memmove+0x10>
 801257a:	4284      	cmp	r4, r0
 801257c:	4623      	mov	r3, r4
 801257e:	d807      	bhi.n	8012590 <memmove+0x20>
 8012580:	1e43      	subs	r3, r0, #1
 8012582:	42a1      	cmp	r1, r4
 8012584:	d008      	beq.n	8012598 <memmove+0x28>
 8012586:	f811 2b01 	ldrb.w	r2, [r1], #1
 801258a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801258e:	e7f8      	b.n	8012582 <memmove+0x12>
 8012590:	4402      	add	r2, r0
 8012592:	4601      	mov	r1, r0
 8012594:	428a      	cmp	r2, r1
 8012596:	d100      	bne.n	801259a <memmove+0x2a>
 8012598:	bd10      	pop	{r4, pc}
 801259a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801259e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125a2:	e7f7      	b.n	8012594 <memmove+0x24>

080125a4 <_sbrk_r>:
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	4d06      	ldr	r5, [pc, #24]	@ (80125c0 <_sbrk_r+0x1c>)
 80125a8:	2300      	movs	r3, #0
 80125aa:	4604      	mov	r4, r0
 80125ac:	4608      	mov	r0, r1
 80125ae:	602b      	str	r3, [r5, #0]
 80125b0:	f7f0 f882 	bl	80026b8 <_sbrk>
 80125b4:	1c43      	adds	r3, r0, #1
 80125b6:	d102      	bne.n	80125be <_sbrk_r+0x1a>
 80125b8:	682b      	ldr	r3, [r5, #0]
 80125ba:	b103      	cbz	r3, 80125be <_sbrk_r+0x1a>
 80125bc:	6023      	str	r3, [r4, #0]
 80125be:	bd38      	pop	{r3, r4, r5, pc}
 80125c0:	24001ba0 	.word	0x24001ba0

080125c4 <_realloc_r>:
 80125c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125c8:	4680      	mov	r8, r0
 80125ca:	4615      	mov	r5, r2
 80125cc:	460c      	mov	r4, r1
 80125ce:	b921      	cbnz	r1, 80125da <_realloc_r+0x16>
 80125d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125d4:	4611      	mov	r1, r2
 80125d6:	f7ff bc59 	b.w	8011e8c <_malloc_r>
 80125da:	b92a      	cbnz	r2, 80125e8 <_realloc_r+0x24>
 80125dc:	f7ff fbea 	bl	8011db4 <_free_r>
 80125e0:	2400      	movs	r4, #0
 80125e2:	4620      	mov	r0, r4
 80125e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125e8:	f000 f81a 	bl	8012620 <_malloc_usable_size_r>
 80125ec:	4285      	cmp	r5, r0
 80125ee:	4606      	mov	r6, r0
 80125f0:	d802      	bhi.n	80125f8 <_realloc_r+0x34>
 80125f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80125f6:	d8f4      	bhi.n	80125e2 <_realloc_r+0x1e>
 80125f8:	4629      	mov	r1, r5
 80125fa:	4640      	mov	r0, r8
 80125fc:	f7ff fc46 	bl	8011e8c <_malloc_r>
 8012600:	4607      	mov	r7, r0
 8012602:	2800      	cmp	r0, #0
 8012604:	d0ec      	beq.n	80125e0 <_realloc_r+0x1c>
 8012606:	42b5      	cmp	r5, r6
 8012608:	462a      	mov	r2, r5
 801260a:	4621      	mov	r1, r4
 801260c:	bf28      	it	cs
 801260e:	4632      	movcs	r2, r6
 8012610:	f7ff fbc2 	bl	8011d98 <memcpy>
 8012614:	4621      	mov	r1, r4
 8012616:	4640      	mov	r0, r8
 8012618:	f7ff fbcc 	bl	8011db4 <_free_r>
 801261c:	463c      	mov	r4, r7
 801261e:	e7e0      	b.n	80125e2 <_realloc_r+0x1e>

08012620 <_malloc_usable_size_r>:
 8012620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012624:	1f18      	subs	r0, r3, #4
 8012626:	2b00      	cmp	r3, #0
 8012628:	bfbc      	itt	lt
 801262a:	580b      	ldrlt	r3, [r1, r0]
 801262c:	18c0      	addlt	r0, r0, r3
 801262e:	4770      	bx	lr

08012630 <_init>:
 8012630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012632:	bf00      	nop
 8012634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012636:	bc08      	pop	{r3}
 8012638:	469e      	mov	lr, r3
 801263a:	4770      	bx	lr

0801263c <_fini>:
 801263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263e:	bf00      	nop
 8012640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012642:	bc08      	pop	{r3}
 8012644:	469e      	mov	lr, r3
 8012646:	4770      	bx	lr
