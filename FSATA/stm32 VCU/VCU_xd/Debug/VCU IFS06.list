
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001221c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  080124ec  080124ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080129bc  080129bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080129c4  080129c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080129c8  080129c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  080129cc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b40  24000070  08012a3c  00014070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001bb0  08012a3c  00014bb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002879a  00000000  00000000  0001409e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041fc  00000000  00000000  0003c838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002078  00000000  00000000  00040a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001954  00000000  00000000  00042ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a603  00000000  00000000  00044404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002aedb  00000000  00000000  0007ea07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179aac  00000000  00000000  000a98e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022338e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092a8  00000000  00000000  002233d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  0022c67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080124d4 	.word	0x080124d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	080124d4 	.word	0x080124d4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <LPF_EMA_Init>:
 *      Author: RMG
 */

#include "LPF.h"

void LPF_EMA_Init(LPF_EMA *filt, float alpha){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	ed87 0a00 	vstr	s0, [r7]

	//Set filter coefficient

	LPF_EMA_SetAlpha(filt, alpha);
 80006bc:	ed97 0a00 	vldr	s0, [r7]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f808 	bl	80006d6 <LPF_EMA_SetAlpha>

	//Clear filter output

	filt->output = 0.0f;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <LPF_EMA_SetAlpha>:

void LPF_EMA_SetAlpha(LPF_EMA *filt, float alpha){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	ed87 0a00 	vstr	s0, [r7]

	//Correct filter

	if(alpha > 1.0f){
 80006e2:	edd7 7a00 	vldr	s15, [r7]
 80006e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f2:	dd03      	ble.n	80006fc <LPF_EMA_SetAlpha+0x26>
		alpha = 1.0f;
 80006f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	e009      	b.n	8000710 <LPF_EMA_SetAlpha+0x3a>

	}else if (alpha < 0.0f){
 80006fc:	edd7 7a00 	vldr	s15, [r7]
 8000700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000708:	d502      	bpl.n	8000710 <LPF_EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
	}

	//Set filter coefficient

	filt->alpha = alpha;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <LPF_EMA_Update>:

float LPF_EMA_Update(LPF_EMA *filt, float in){
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	ed87 0a00 	vstr	s0, [r7]

	filt->output = filt->alpha*in + (1-filt->alpha)*filt->output;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	ed93 7a00 	vldr	s14, [r3]
 8000734:	edd7 7a00 	vldr	s15, [r7]
 8000738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000746:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	edc3 7a01 	vstr	s15, [r3, #4]

	return filt->output;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
}
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000778:	f002 f818 	bl	80027ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800077c:	f000 f97c 	bl	8000a78 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000780:	f000 f9e8 	bl	8000b54 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000784:	f000 fdce 	bl	8001324 <MX_GPIO_Init>
	MX_DMA_Init();
 8000788:	f000 fdac 	bl	80012e4 <MX_DMA_Init>
	MX_ADC1_Init();
 800078c:	f000 fa14 	bl	8000bb8 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000790:	f000 faae 	bl	8000cf0 <MX_ADC2_Init>
	MX_FDCAN1_Init();
 8000794:	f000 fb14 	bl	8000dc0 <MX_FDCAN1_Init>
	MX_FDCAN2_Init();
 8000798:	f000 fb90 	bl	8000ebc <MX_FDCAN2_Init>
	MX_TIM1_Init();
 800079c:	f000 fc2a 	bl	8000ff4 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80007a0:	f000 fd54 	bl	800124c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80007a4:	f000 fcde 	bl	8001164 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 80007a8:	f000 fd04 	bl	80011b4 <MX_USART1_UART_Init>
	MX_SDMMC1_SD_Init();
 80007ac:	f000 fc04 	bl	8000fb8 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 80007b0:	f010 f8d2 	bl	8010958 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	//Inicializar tarjeta microSD
	SDCard_start();
 80007b4:	f001 fa36 	bl	8001c24 <SDCard_start>
	HAL_Delay(2000);
 80007b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007bc:	f002 f888 	bl	80028d0 <HAL_Delay>

	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer_adc, 3) != HAL_OK) {
 80007c0:	2203      	movs	r2, #3
 80007c2:	4982      	ldr	r1, [pc, #520]	@ (80009cc <main+0x258>)
 80007c4:	4882      	ldr	r0, [pc, #520]	@ (80009d0 <main+0x25c>)
 80007c6:	f002 fd9b 	bl	8003300 <HAL_ADC_Start_DMA>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0x66>
#if DEBUG
		print("Error al inicializar ADC_DMA");
 80007d0:	4880      	ldr	r0, [pc, #512]	@ (80009d4 <main+0x260>)
 80007d2:	f000 fe8b 	bl	80014ec <print>
#endif
		Error_Handler();
 80007d6:	f001 fa97 	bl	8001d08 <Error_Handler>
	}
	//Inicializacion filtro paso bajo
	LPF_EMA_Init(&s1_filt, 0.05f);
 80007da:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80009d8 <main+0x264>
 80007de:	487f      	ldr	r0, [pc, #508]	@ (80009dc <main+0x268>)
 80007e0:	f7ff ff66 	bl	80006b0 <LPF_EMA_Init>
	LPF_EMA_Init(&s2_filt, 0.05f);
 80007e4:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80009d8 <main+0x264>
 80007e8:	487d      	ldr	r0, [pc, #500]	@ (80009e0 <main+0x26c>)
 80007ea:	f7ff ff61 	bl	80006b0 <LPF_EMA_Init>

	//Inicialización de buses CAN
	//Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80007ee:	487d      	ldr	r0, [pc, #500]	@ (80009e4 <main+0x270>)
 80007f0:	f006 fd68 	bl	80072c4 <HAL_FDCAN_Start>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <main+0x90>
#if DEBUG
		print("Error al inicializar CAN_INV");
 80007fa:	487b      	ldr	r0, [pc, #492]	@ (80009e8 <main+0x274>)
 80007fc:	f000 fe76 	bl	80014ec <print>
#endif
		Error_Handler();
 8000800:	f001 fa82 	bl	8001d08 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4876      	ldr	r0, [pc, #472]	@ (80009e4 <main+0x270>)
 800080a:	f006 ff4d 	bl	80076a8 <HAL_FDCAN_ActivateNotification>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <main+0xaa>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000814:	4875      	ldr	r0, [pc, #468]	@ (80009ec <main+0x278>)
 8000816:	f000 fe69 	bl	80014ec <print>
#endif
		Error_Handler();
 800081a:	f001 fa75 	bl	8001d08 <Error_Handler>

	}

	//Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 800081e:	4874      	ldr	r0, [pc, #464]	@ (80009f0 <main+0x27c>)
 8000820:	f006 fd50 	bl	80072c4 <HAL_FDCAN_Start>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <main+0xc0>

#if DEBUG
		print("Error al inicializar CAN_ACU");
 800082a:	4872      	ldr	r0, [pc, #456]	@ (80009f4 <main+0x280>)
 800082c:	f000 fe5e 	bl	80014ec <print>

#endif
		Error_Handler();
 8000830:	f001 fa6a 	bl	8001d08 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	486d      	ldr	r0, [pc, #436]	@ (80009f0 <main+0x27c>)
 800083a:	f006 ff35 	bl	80076a8 <HAL_FDCAN_ActivateNotification>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d004      	beq.n	800084e <main+0xda>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000844:	486c      	ldr	r0, [pc, #432]	@ (80009f8 <main+0x284>)
 8000846:	f000 fe51 	bl	80014ec <print>
#endif
		Error_Handler();
 800084a:	f001 fa5d 	bl	8001d08 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if(DEBUG)
	print("Solicitar tensión inversor");
 800084e:	486b      	ldr	r0, [pc, #428]	@ (80009fc <main+0x288>)
 8000850:	f000 fe4c 	bl	80014ec <print>
#endif
	//Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0) {
 8000854:	e006      	b.n	8000864 <main+0xf0>

		if (config_inv_lectura_v == 1) {
 8000856:	4b6a      	ldr	r3, [pc, #424]	@ (8000a00 <main+0x28c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d102      	bne.n	8000864 <main+0xf0>

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 800085e:	4869      	ldr	r0, [pc, #420]	@ (8000a04 <main+0x290>)
 8000860:	f000 fe44 	bl	80014ec <print>
	while (config_inv_lectura_v == 0) {
 8000864:	4b66      	ldr	r3, [pc, #408]	@ (8000a00 <main+0x28c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f4      	beq.n	8000856 <main+0xe2>
	}

#if !CALIBRATION

	//Estado STAND BY inversor
	while (state != 3) {
 800086c:	e006      	b.n	800087c <main+0x108>

		if (state == 3) {
 800086e:	4b66      	ldr	r3, [pc, #408]	@ (8000a08 <main+0x294>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d102      	bne.n	800087c <main+0x108>
#if DEBUG
			print("Precarga");
 8000876:	4865      	ldr	r0, [pc, #404]	@ (8000a0c <main+0x298>)
 8000878:	f000 fe38 	bl	80014ec <print>
	while (state != 3) {
 800087c:	4b62      	ldr	r3, [pc, #392]	@ (8000a08 <main+0x294>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d1f4      	bne.n	800086e <main+0xfa>
#endif
		}
	}
	//PRE-CHARGE
	while (precarga_inv == 0) {
 8000884:	e037      	b.n	80008f6 <main+0x182>

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000886:	4b62      	ldr	r3, [pc, #392]	@ (8000a10 <main+0x29c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4961      	ldr	r1, [pc, #388]	@ (8000a14 <main+0x2a0>)
 800088e:	4862      	ldr	r0, [pc, #392]	@ (8000a18 <main+0x2a4>)
 8000890:	f011 f980 	bl	8011b94 <siprintf>
		print(TxBuffer);
 8000894:	4860      	ldr	r0, [pc, #384]	@ (8000a18 <main+0x2a4>)
 8000896:	f000 fe29 	bl	80014ec <print>
		//printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		//Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800089a:	4b60      	ldr	r3, [pc, #384]	@ (8000a1c <main+0x2a8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a60      	ldr	r2, [pc, #384]	@ (8000a20 <main+0x2ac>)
 80008a0:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 80008a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a20 <main+0x2ac>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008a8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a20 <main+0x2ac>)
 80008aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ae:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008b0:	4b5b      	ldr	r3, [pc, #364]	@ (8000a20 <main+0x2ac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a20 <main+0x2ac>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008bc:	4b54      	ldr	r3, [pc, #336]	@ (8000a10 <main+0x29c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b58      	ldr	r3, [pc, #352]	@ (8000a24 <main+0x2b0>)
 80008c4:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = inv_dc_bus_voltage >> 8;
 80008c6:	4b52      	ldr	r3, [pc, #328]	@ (8000a10 <main+0x29c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	121b      	asrs	r3, r3, #8
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b55      	ldr	r3, [pc, #340]	@ (8000a24 <main+0x2b0>)
 80008d0:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu)
 80008d2:	4a54      	ldr	r2, [pc, #336]	@ (8000a24 <main+0x2b0>)
 80008d4:	4952      	ldr	r1, [pc, #328]	@ (8000a20 <main+0x2ac>)
 80008d6:	4846      	ldr	r0, [pc, #280]	@ (80009f0 <main+0x27c>)
 80008d8:	f006 fd1f 	bl	800731a <HAL_FDCAN_AddMessageToTxFifoQ>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <main+0x174>
				== HAL_OK) {
#if DEBUG
			print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 80008e2:	4851      	ldr	r0, [pc, #324]	@ (8000a28 <main+0x2b4>)
 80008e4:	f000 fe02 	bl	80014ec <print>
#endif
		}

		if (precarga_inv == 1) {
 80008e8:	4b50      	ldr	r3, [pc, #320]	@ (8000a2c <main+0x2b8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d102      	bne.n	80008f6 <main+0x182>
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80008f0:	484f      	ldr	r0, [pc, #316]	@ (8000a30 <main+0x2bc>)
 80008f2:	f000 fdfb 	bl	80014ec <print>
	while (precarga_inv == 0) {
 80008f6:	4b4d      	ldr	r3, [pc, #308]	@ (8000a2c <main+0x2b8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0c3      	beq.n	8000886 <main+0x112>
		}

	}

#if DEBUG
	print("state : stand by");
 80008fe:	484d      	ldr	r0, [pc, #308]	@ (8000a34 <main+0x2c0>)
 8000900:	f000 fdf4 	bl	80014ec <print>
#endif
	//Estado READY inversor
	TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000904:	4b4c      	ldr	r3, [pc, #304]	@ (8000a38 <main+0x2c4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a4c      	ldr	r2, [pc, #304]	@ (8000a3c <main+0x2c8>)
 800090a:	6013      	str	r3, [r2, #0]
	TxHeader_Inv.DataLength = 3;
 800090c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a3c <main+0x2c8>)
 800090e:	2203      	movs	r2, #3
 8000910:	60da      	str	r2, [r3, #12]
	TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000912:	4b4a      	ldr	r3, [pc, #296]	@ (8000a3c <main+0x2c8>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]

	TxData_Inv[0] = 0x0;
 8000918:	4b49      	ldr	r3, [pc, #292]	@ (8000a40 <main+0x2cc>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	TxData_Inv[1] = 0x0;
 800091e:	4b48      	ldr	r3, [pc, #288]	@ (8000a40 <main+0x2cc>)
 8000920:	2200      	movs	r2, #0
 8000922:	705a      	strb	r2, [r3, #1]
	TxData_Inv[2] = 0x4;
 8000924:	4b46      	ldr	r3, [pc, #280]	@ (8000a40 <main+0x2cc>)
 8000926:	2204      	movs	r2, #4
 8000928:	709a      	strb	r2, [r3, #2]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800092a:	4a45      	ldr	r2, [pc, #276]	@ (8000a40 <main+0x2cc>)
 800092c:	4943      	ldr	r1, [pc, #268]	@ (8000a3c <main+0x2c8>)
 800092e:	482d      	ldr	r0, [pc, #180]	@ (80009e4 <main+0x270>)
 8000930:	f006 fcf3 	bl	800731a <HAL_FDCAN_AddMessageToTxFifoQ>

	while (state != 4) {
 8000934:	bf00      	nop
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <main+0x294>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d1fb      	bne.n	8000936 <main+0x1c2>

	}

#if DEBUG
	print("state: ready");
 800093e:	4841      	ldr	r0, [pc, #260]	@ (8000a44 <main+0x2d0>)
 8000940:	f000 fdd4 	bl	80014ec <print>
#endif

#endif

	//Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0) {
 8000944:	e025      	b.n	8000992 <main+0x21e>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	483f      	ldr	r0, [pc, #252]	@ (8000a48 <main+0x2d4>)
 800094a:	f007 fdcb 	bl	80084e4 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <main+0x2d8>)
 8000954:	601a      	str	r2, [r3, #0]
		START_BUTTON_Pin);
		if (start_button_act == 1 && start_button_ant == 0) {
 8000956:	4b3d      	ldr	r3, [pc, #244]	@ (8000a4c <main+0x2d8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d119      	bne.n	8000992 <main+0x21e>
 800095e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a50 <main+0x2dc>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d115      	bne.n	8000992 <main+0x21e>

#if DEBUG
			print("Botón Start + Freno:");
 8000966:	483b      	ldr	r0, [pc, #236]	@ (8000a54 <main+0x2e0>)
 8000968:	f000 fdc0 	bl	80014ec <print>
			printValue(s_freno);
 800096c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a58 <main+0x2e4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fdd9 	bl	8001528 <printValue>
#endif
			if (s_freno > UMBRAL_FRENO) {
 8000976:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <main+0x2e4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2bd2      	cmp	r3, #210	@ 0xd2
 800097c:	dd06      	ble.n	800098c <main+0x218>
				boton_arranque = 1;
 800097e:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <main+0x2e8>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000984:	4836      	ldr	r0, [pc, #216]	@ (8000a60 <main+0x2ec>)
 8000986:	f000 fdb1 	bl	80014ec <print>
 800098a:	e002      	b.n	8000992 <main+0x21e>
#endif
			} else {
#if DEBUG
				print("Pulsar freno para arrancar");
 800098c:	4835      	ldr	r0, [pc, #212]	@ (8000a64 <main+0x2f0>)
 800098e:	f000 fdad 	bl	80014ec <print>
	while (boton_arranque == 0) {
 8000992:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <main+0x2e8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0d5      	beq.n	8000946 <main+0x1d2>
		}
	}

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 800099a:	4833      	ldr	r0, [pc, #204]	@ (8000a68 <main+0x2f4>)
 800099c:	f000 fda6 	bl	80014ec <print>
#endif

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); //Enciende RTDS
 80009a0:	2201      	movs	r2, #1
 80009a2:	2102      	movs	r1, #2
 80009a4:	4831      	ldr	r0, [pc, #196]	@ (8000a6c <main+0x2f8>)
 80009a6:	f007 fdb5 	bl	8008514 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80009aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ae:	f001 ff8f 	bl	80028d0 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); //Apaga RTDS
 80009b2:	2200      	movs	r2, #0
 80009b4:	2102      	movs	r1, #2
 80009b6:	482d      	ldr	r0, [pc, #180]	@ (8000a6c <main+0x2f8>)
 80009b8:	f007 fdac 	bl	8008514 <HAL_GPIO_WritePin>

#if DEBUG
	print("RTDS apagado");
 80009bc:	482c      	ldr	r0, [pc, #176]	@ (8000a70 <main+0x2fc>)
 80009be:	f000 fd95 	bl	80014ec <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * prescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80009c2:	482c      	ldr	r0, [pc, #176]	@ (8000a74 <main+0x300>)
 80009c4:	f00c fe02 	bl	800d5cc <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <main+0x254>
 80009cc:	2400166c 	.word	0x2400166c
 80009d0:	24000094 	.word	0x24000094
 80009d4:	080124ec 	.word	0x080124ec
 80009d8:	3d4ccccd 	.word	0x3d4ccccd
 80009dc:	24001684 	.word	0x24001684
 80009e0:	2400168c 	.word	0x2400168c
 80009e4:	240001ec 	.word	0x240001ec
 80009e8:	0801250c 	.word	0x0801250c
 80009ec:	0801252c 	.word	0x0801252c
 80009f0:	2400028c 	.word	0x2400028c
 80009f4:	08012554 	.word	0x08012554
 80009f8:	08012574 	.word	0x08012574
 80009fc:	0801259c 	.word	0x0801259c
 8000a00:	24000090 	.word	0x24000090
 8000a04:	080125b8 	.word	0x080125b8
 8000a08:	240016a2 	.word	0x240016a2
 8000a0c:	080125ec 	.word	0x080125ec
 8000a10:	24001660 	.word	0x24001660
 8000a14:	080125f8 	.word	0x080125f8
 8000a18:	24001714 	.word	0x24001714
 8000a1c:	24000008 	.word	0x24000008
 8000a20:	240005b4 	.word	0x240005b4
 8000a24:	24000610 	.word	0x24000610
 8000a28:	08012610 	.word	0x08012610
 8000a2c:	2400008c 	.word	0x2400008c
 8000a30:	08012638 	.word	0x08012638
 8000a34:	08012654 	.word	0x08012654
 8000a38:	24000004 	.word	0x24000004
 8000a3c:	24000568 	.word	0x24000568
 8000a40:	24000600 	.word	0x24000600
 8000a44:	08012668 	.word	0x08012668
 8000a48:	58021800 	.word	0x58021800
 8000a4c:	24001658 	.word	0x24001658
 8000a50:	2400165c 	.word	0x2400165c
 8000a54:	08012678 	.word	0x08012678
 8000a58:	24001694 	.word	0x24001694
 8000a5c:	24000000 	.word	0x24000000
 8000a60:	08012690 	.word	0x08012690
 8000a64:	080126b0 	.word	0x080126b0
 8000a68:	080126cc 	.word	0x080126cc
 8000a6c:	58020800 	.word	0x58020800
 8000a70:	080126dc 	.word	0x080126dc
 8000a74:	240003f4 	.word	0x240003f4

08000a78 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09c      	sub	sp, #112	@ 0x70
 8000a7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	224c      	movs	r2, #76	@ 0x4c
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f011 f8a4 	bl	8011bd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2220      	movs	r2, #32
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f011 f89e 	bl	8011bd4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f007 fd55 	bl	8008548 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b50 <SystemClock_Config+0xd8>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b50 <SystemClock_Config+0xd8>)
 8000aa8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b28      	ldr	r3, [pc, #160]	@ (8000b50 <SystemClock_Config+0xd8>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000aba:	bf00      	nop
 8000abc:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <SystemClock_Config+0xd8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ac8:	d1f8      	bne.n	8000abc <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ace:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8000ae0:	232c      	movs	r3, #44	@ 0x2c
 8000ae2:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000af0:	230c      	movs	r3, #12
 8000af2:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 fd5b 	bl	80085bc <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x98>
		Error_Handler();
 8000b0c:	f001 f8fc 	bl	8001d08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b10:	233f      	movs	r3, #63	@ 0x3f
 8000b12:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b14:	2303      	movs	r3, #3
 8000b16:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b20:	2340      	movs	r3, #64	@ 0x40
 8000b22:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b24:	2340      	movs	r3, #64	@ 0x40
 8000b26:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b2c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b2e:	2340      	movs	r3, #64	@ 0x40
 8000b30:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2103      	movs	r1, #3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f008 f91a 	bl	8008d70 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xce>
		Error_Handler();
 8000b42:	f001 f8e1 	bl	8001d08 <Error_Handler>
	}
}
 8000b46:	bf00      	nop
 8000b48:	3770      	adds	r7, #112	@ 0x70
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	58024800 	.word	0x58024800

08000b54 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ae      	sub	sp, #184	@ 0xb8
 8000b58:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	22b8      	movs	r2, #184	@ 0xb8
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f011 f837 	bl	8011bd4 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 8000b66:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SDMMC;
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000b76:	2310      	movs	r3, #16
 8000b78:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b86:	23c0      	movs	r3, #192	@ 0xc0
 8000b88:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000b92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b96:	653b      	str	r3, [r7, #80]	@ 0x50
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f008 fc71 	bl	8009488 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 8000bac:	f001 f8ac 	bl	8001d08 <Error_Handler>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	37b8      	adds	r7, #184	@ 0xb8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	@ 0x30
 8000bbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2224      	movs	r2, #36	@ 0x24
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f010 ffff 	bl	8011bd4 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000bd6:	4b41      	ldr	r3, [pc, #260]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000bd8:	4a41      	ldr	r2, [pc, #260]	@ (8000ce0 <MX_ADC1_Init+0x128>)
 8000bda:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000bde:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000be2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000be6:	2208      	movs	r2, #8
 8000be8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bea:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf6:	4b39      	ldr	r3, [pc, #228]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000bfc:	4b37      	ldr	r3, [pc, #220]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 3;
 8000c02:	4b36      	ldr	r3, [pc, #216]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c04:	2203      	movs	r2, #3
 8000c06:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c08:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c10:	4b32      	ldr	r3, [pc, #200]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c16:	4b31      	ldr	r3, [pc, #196]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c1e:	2203      	movs	r2, #3
 8000c20:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c22:	4b2e      	ldr	r3, [pc, #184]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.Ratio = 1;
 8000c36:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000c3c:	4827      	ldr	r0, [pc, #156]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c3e:	f002 f957 	bl	8002ef0 <HAL_ADC_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0x94>
		Error_Handler();
 8000c48:	f001 f85e 	bl	8001d08 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4821      	ldr	r0, [pc, #132]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c58:	f003 fe1a 	bl	8004890 <HAL_ADCEx_MultiModeConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0xae>
		Error_Handler();
 8000c62:	f001 f851 	bl	8001d08 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_ADC1_Init+0x12c>)
 8000c68:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6a:	2306      	movs	r3, #6
 8000c6c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c72:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c76:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4814      	ldr	r0, [pc, #80]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000c8c:	f002 fe6c 	bl	8003968 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0xe2>
		Error_Handler();
 8000c96:	f001 f837 	bl	8001d08 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c9c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000ca8:	f002 fe5e 	bl	8003968 <HAL_ADC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC1_Init+0xfe>
		Error_Handler();
 8000cb2:	f001 f829 	bl	8001d08 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <MX_ADC1_Init+0x134>)
 8000cb8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cba:	2312      	movs	r3, #18
 8000cbc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <MX_ADC1_Init+0x124>)
 8000cc4:	f002 fe50 	bl	8003968 <HAL_ADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0x11a>
		Error_Handler();
 8000cce:	f001 f81b 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	@ 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	24000094 	.word	0x24000094
 8000ce0:	40022000 	.word	0x40022000
 8000ce4:	10c00010 	.word	0x10c00010
 8000ce8:	14f00020 	.word	0x14f00020
 8000cec:	08600004 	.word	0x08600004

08000cf0 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2224      	movs	r2, #36	@ 0x24
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f010 ff69 	bl	8011bd4 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000d02:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d04:	4a2c      	ldr	r2, [pc, #176]	@ (8000db8 <MX_ADC2_Init+0xc8>)
 8000d06:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d0a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d0e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d10:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d16:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d22:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d54:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc2.Init.OversamplingMode = DISABLE;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc2.Init.Oversampling.Ratio = 1;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000d68:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d6a:	f002 f8c1 	bl	8002ef0 <HAL_ADC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC2_Init+0x88>
		Error_Handler();
 8000d74:	f000 ffc8 	bl	8001d08 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <MX_ADC2_Init+0xcc>)
 8000d7a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d84:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d88:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_ADC2_Init+0xc4>)
 8000d9e:	f002 fde3 	bl	8003968 <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC2_Init+0xbc>
		Error_Handler();
 8000da8:	f000 ffae 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	@ 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	24000104 	.word	0x24000104
 8000db8:	40022100 	.word	0x40022100
 8000dbc:	25b00200 	.word	0x25b00200

08000dc0 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000dc8:	4a3b      	ldr	r2, [pc, #236]	@ (8000eb8 <MX_FDCAN1_Init+0xf8>)
 8000dca:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dcc:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dd2:	4b38      	ldr	r3, [pc, #224]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000dd8:	4b36      	ldr	r3, [pc, #216]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000dde:	4b35      	ldr	r3, [pc, #212]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000de4:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 6;
 8000dea:	4b32      	ldr	r3, [pc, #200]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000dec:	2206      	movs	r2, #6
 8000dee:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000df0:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 5;
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000dfe:	2205      	movs	r2, #5
 8000e00:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000e02:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e08:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 8000e0e:	4b29      	ldr	r3, [pc, #164]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000e14:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000e1a:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 1;
 8000e20:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 1;
 8000e26:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e2c:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e2e:	2220      	movs	r2, #32
 8000e30:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e32:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e34:	2204      	movs	r2, #4
 8000e36:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e40:	2204      	movs	r2, #4
 8000e42:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e5e:	2220      	movs	r2, #32
 8000e60:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8000e6e:	4811      	ldr	r0, [pc, #68]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e70:	f005 ffd4 	bl	8006e1c <HAL_FDCAN_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_FDCAN1_Init+0xbe>
		Error_Handler();
 8000e7a:	f000 ff45 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <MX_FDCAN1_Init+0xf4>)
 8000e9c:	f006 f99c 	bl	80071d8 <HAL_FDCAN_ConfigFilter>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_FDCAN1_Init+0xea>
		Error_Handler();
 8000ea6:	f000 ff2f 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE END FDCAN1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	240001ec 	.word	0x240001ec
 8000eb8:	4000a000 	.word	0x4000a000

08000ebc <MX_FDCAN2_Init>:
/**
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN2_Init 0 */

	/* USER CODE BEGIN FDCAN2_Init 1 */

	/* USER CODE END FDCAN2_Init 1 */
	hfdcan2.Instance = FDCAN2;
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000ec4:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb4 <MX_FDCAN2_Init+0xf8>)
 8000ec6:	601a      	str	r2, [r3, #0]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ec8:	4b39      	ldr	r3, [pc, #228]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ece:	4b38      	ldr	r3, [pc, #224]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
	hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ed4:	4b36      	ldr	r3, [pc, #216]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	741a      	strb	r2, [r3, #16]
	hfdcan2.Init.TransmitPause = DISABLE;
 8000eda:	4b35      	ldr	r3, [pc, #212]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	745a      	strb	r2, [r3, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 8000ee0:	4b33      	ldr	r3, [pc, #204]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	749a      	strb	r2, [r3, #18]
	hfdcan2.Init.NominalPrescaler = 6;
 8000ee6:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000ee8:	2206      	movs	r2, #6
 8000eea:	615a      	str	r2, [r3, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000eec:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	619a      	str	r2, [r3, #24]
	hfdcan2.Init.NominalTimeSeg1 = 10;
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000ef4:	220a      	movs	r2, #10
 8000ef6:	61da      	str	r2, [r3, #28]
	hfdcan2.Init.NominalTimeSeg2 = 5;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000efa:	2205      	movs	r2, #5
 8000efc:	621a      	str	r2, [r3, #32]
	hfdcan2.Init.DataPrescaler = 1;
 8000efe:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan2.Init.DataTimeSeg1 = 1;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan2.Init.DataTimeSeg2 = 1;
 8000f10:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan2.Init.MessageRAMOffset = 0;
 8000f16:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan2.Init.StdFiltersNbr = 1;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan2.Init.ExtFiltersNbr = 1;
 8000f22:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f28:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f36:	2210      	movs	r2, #16
 8000f38:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan2.Init.RxBuffersNbr = 0;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f48:	2204      	movs	r2, #4
 8000f4a:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan2.Init.TxEventsNbr = 0;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan2.Init.TxBuffersNbr = 0;
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f66:	2204      	movs	r2, #4
 8000f68:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK) {
 8000f6a:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f6c:	f005 ff56 	bl	8006e1c <HAL_FDCAN_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_FDCAN2_Init+0xbe>
		Error_Handler();
 8000f76:	f000 fec7 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f7e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_FDCAN2_Init+0xf4>)
 8000f9a:	f006 f91d 	bl	80071d8 <HAL_FDCAN_ConfigFilter>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_FDCAN2_Init+0xec>
		Error_Handler();
 8000fa4:	f000 feb0 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE END FDCAN2_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2400028c 	.word	0x2400028c
 8000fb4:	4000a400 	.word	0x4000a400

08000fb8 <MX_SDMMC1_SD_Init>:
/**
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void) {
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <MX_SDMMC1_SD_Init+0x34>)
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <MX_SDMMC1_SD_Init+0x38>)
 8000fc0:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <MX_SDMMC1_SD_Init+0x34>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <MX_SDMMC1_SD_Init+0x34>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fce:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <MX_SDMMC1_SD_Init+0x34>)
 8000fd0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd4:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <MX_SDMMC1_SD_Init+0x34>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 2;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <MX_SDMMC1_SD_Init+0x34>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	2400032c 	.word	0x2400032c
 8000ff0:	52007000 	.word	0x52007000

08000ff4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09c      	sub	sp, #112	@ 0x70
 8000ff8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ffa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001008:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001014:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2234      	movs	r2, #52	@ 0x34
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f010 fdd0 	bl	8011bd4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001034:	4b49      	ldr	r3, [pc, #292]	@ (800115c <MX_TIM1_Init+0x168>)
 8001036:	4a4a      	ldr	r2, [pc, #296]	@ (8001160 <MX_TIM1_Init+0x16c>)
 8001038:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800103a:	4b48      	ldr	r3, [pc, #288]	@ (800115c <MX_TIM1_Init+0x168>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b46      	ldr	r3, [pc, #280]	@ (800115c <MX_TIM1_Init+0x168>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001046:	4b45      	ldr	r3, [pc, #276]	@ (800115c <MX_TIM1_Init+0x168>)
 8001048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800104c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b43      	ldr	r3, [pc, #268]	@ (800115c <MX_TIM1_Init+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001054:	4b41      	ldr	r3, [pc, #260]	@ (800115c <MX_TIM1_Init+0x168>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800105a:	4b40      	ldr	r3, [pc, #256]	@ (800115c <MX_TIM1_Init+0x168>)
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001060:	483e      	ldr	r0, [pc, #248]	@ (800115c <MX_TIM1_Init+0x168>)
 8001062:	f00c fa5b 	bl	800d51c <HAL_TIM_Base_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x7c>
		Error_Handler();
 800106c:	f000 fe4c 	bl	8001d08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001074:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001076:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800107a:	4619      	mov	r1, r3
 800107c:	4837      	ldr	r0, [pc, #220]	@ (800115c <MX_TIM1_Init+0x168>)
 800107e:	f00c fda7 	bl	800dbd0 <HAL_TIM_ConfigClockSource>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x98>
		Error_Handler();
 8001088:	f000 fe3e 	bl	8001d08 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800108c:	4833      	ldr	r0, [pc, #204]	@ (800115c <MX_TIM1_Init+0x168>)
 800108e:	f00c fb23 	bl	800d6d8 <HAL_TIM_PWM_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0xa8>
		Error_Handler();
 8001098:	f000 fe36 	bl	8001d08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80010a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ac:	4619      	mov	r1, r3
 80010ae:	482b      	ldr	r0, [pc, #172]	@ (800115c <MX_TIM1_Init+0x168>)
 80010b0:	f00d fad4 	bl	800e65c <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80010ba:	f000 fe25 	bl	8001d08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010be:	2360      	movs	r3, #96	@ 0x60
 80010c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80010da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	481e      	ldr	r0, [pc, #120]	@ (800115c <MX_TIM1_Init+0x168>)
 80010e4:	f00c fc60 	bl	800d9a8 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 80010ee:	f000 fe0b 	bl	8001d08 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80010f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010f6:	2204      	movs	r2, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4818      	ldr	r0, [pc, #96]	@ (800115c <MX_TIM1_Init+0x168>)
 80010fc:	f00c fc54 	bl	800d9a8 <HAL_TIM_PWM_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 8001106:	f000 fdff 	bl	8001d08 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001122:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800112c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4807      	ldr	r0, [pc, #28]	@ (800115c <MX_TIM1_Init+0x168>)
 8001140:	f00d fb28 	bl	800e794 <HAL_TIMEx_ConfigBreakDeadTime>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM1_Init+0x15a>
			!= HAL_OK) {
		Error_Handler();
 800114a:	f000 fddd 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800114e:	4803      	ldr	r0, [pc, #12]	@ (800115c <MX_TIM1_Init+0x168>)
 8001150:	f001 f8f0 	bl	8002334 <HAL_TIM_MspPostInit>

}
 8001154:	bf00      	nop
 8001156:	3770      	adds	r7, #112	@ 0x70
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	240003a8 	.word	0x240003a8
 8001160:	40010000 	.word	0x40010000

08001164 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <MX_TIM16_Init+0x48>)
 800116a:	4a11      	ldr	r2, [pc, #68]	@ (80011b0 <MX_TIM16_Init+0x4c>)
 800116c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 528;
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_TIM16_Init+0x48>)
 8001170:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001174:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <MX_TIM16_Init+0x48>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 10000 - 1;
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_TIM16_Init+0x48>)
 800117e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001182:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_TIM16_Init+0x48>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_TIM16_Init+0x48>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_TIM16_Init+0x48>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_TIM16_Init+0x48>)
 8001198:	f00c f9c0 	bl	800d51c <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM16_Init+0x42>
		Error_Handler();
 80011a2:	f000 fdb1 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240003f4 	.word	0x240003f4
 80011b0:	40014400 	.word	0x40014400

080011b4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011ba:	4a23      	ldr	r2, [pc, #140]	@ (8001248 <MX_USART1_UART_Init+0x94>)
 80011bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f6:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80011fc:	4811      	ldr	r0, [pc, #68]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 80011fe:	f00d fb73 	bl	800e8e8 <HAL_UART_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001208:	f000 fd7e 	bl	8001d08 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800120c:	2100      	movs	r1, #0
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 8001210:	f00e fd0d 	bl	800fc2e <HAL_UARTEx_SetTxFifoThreshold>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800121a:	f000 fd75 	bl	8001d08 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800121e:	2100      	movs	r1, #0
 8001220:	4808      	ldr	r0, [pc, #32]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 8001222:	f00e fd42 	bl	800fcaa <HAL_UARTEx_SetRxFifoThreshold>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800122c:	f000 fd6c 	bl	8001d08 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <MX_USART1_UART_Init+0x90>)
 8001232:	f00e fcc3 	bl	800fbbc <HAL_UARTEx_DisableFifoMode>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 800123c:	f000 fd64 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	24000440 	.word	0x24000440
 8001248:	40011000 	.word	0x40011000

0800124c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001250:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001252:	4a23      	ldr	r2, [pc, #140]	@ (80012e0 <MX_USART2_UART_Init+0x94>)
 8001254:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128e:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001294:	4811      	ldr	r0, [pc, #68]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 8001296:	f00d fb27 	bl	800e8e8 <HAL_UART_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80012a0:	f000 fd32 	bl	8001d08 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80012a4:	2100      	movs	r1, #0
 80012a6:	480d      	ldr	r0, [pc, #52]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 80012a8:	f00e fcc1 	bl	800fc2e <HAL_UARTEx_SetTxFifoThreshold>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80012b2:	f000 fd29 	bl	8001d08 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4808      	ldr	r0, [pc, #32]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 80012ba:	f00e fcf6 	bl	800fcaa <HAL_UARTEx_SetRxFifoThreshold>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80012c4:	f000 fd20 	bl	8001d08 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_USART2_UART_Init+0x90>)
 80012ca:	f00e fc77 	bl	800fbbc <HAL_UARTEx_DisableFifoMode>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80012d4:	f000 fd18 	bl	8001d08 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	240004d4 	.word	0x240004d4
 80012e0:	40004400 	.word	0x40004400

080012e4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <MX_DMA_Init+0x3c>)
 80012ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <MX_DMA_Init+0x3c>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_DMA_Init+0x3c>)
 80012fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	200b      	movs	r0, #11
 800130e:	f003 fc7c 	bl	8004c0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001312:	200b      	movs	r0, #11
 8001314:	f003 fc93 	bl	8004c3e <HAL_NVIC_EnableIRQ>

}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	58024400 	.word	0x58024400

08001324 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	@ 0x38
 8001328:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800132a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800133a:	4b67      	ldr	r3, [pc, #412]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001340:	4a65      	ldr	r2, [pc, #404]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 8001342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134a:	4b63      	ldr	r3, [pc, #396]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001354:	623b      	str	r3, [r7, #32]
 8001356:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	4b5f      	ldr	r3, [pc, #380]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	4a5e      	ldr	r2, [pc, #376]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001368:	4b5b      	ldr	r3, [pc, #364]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b58      	ldr	r3, [pc, #352]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137c:	4a56      	ldr	r2, [pc, #344]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001386:	4b54      	ldr	r3, [pc, #336]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	4a4f      	ldr	r2, [pc, #316]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a4:	4b4c      	ldr	r3, [pc, #304]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013b2:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b8:	4a47      	ldr	r2, [pc, #284]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c2:	4b45      	ldr	r3, [pc, #276]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013d0:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	4a40      	ldr	r2, [pc, #256]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e0:	4b3d      	ldr	r3, [pc, #244]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f4:	4a38      	ldr	r2, [pc, #224]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 80013f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fe:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800140c:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	4a31      	ldr	r2, [pc, #196]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141c:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <MX_GPIO_Init+0x1b4>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin | RTDS_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2103      	movs	r1, #3
 800142e:	482b      	ldr	r0, [pc, #172]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001430:	f007 f870 	bl	8008514 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143a:	4829      	ldr	r0, [pc, #164]	@ (80014e0 <MX_GPIO_Init+0x1bc>)
 800143c:	f007 f86a 	bl	8008514 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
	GPIO_InitStruct.Pin = START_BUTTON_LED_Pin | RTDS_Pin;
 8001440:	2303      	movs	r3, #3
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	4821      	ldr	r0, [pc, #132]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001458:	f006 fe9c 	bl	8008194 <HAL_GPIO_Init>

	/*Configure GPIO pin : MICROSD_DET_Pin */
	GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 800145c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	481c      	ldr	r0, [pc, #112]	@ (80014e4 <MX_GPIO_Init+0x1c0>)
 8001472:	f006 fe8f 	bl	8008194 <HAL_GPIO_Init>

	/*Configure GPIO pin : DS18B20_Data_Pin */
	GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 8001476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	4814      	ldr	r0, [pc, #80]	@ (80014e0 <MX_GPIO_Init+0x1bc>)
 8001490:	f006 fe80 	bl	8008194 <HAL_GPIO_Init>

	/*Configure GPIO pin : START_BUTTON_Pin */
	GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	4810      	ldr	r0, [pc, #64]	@ (80014e8 <MX_GPIO_Init+0x1c4>)
 80014a8:	f006 fe74 	bl	8008194 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80014ac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80014be:	2302      	movs	r3, #2
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	4807      	ldr	r0, [pc, #28]	@ (80014e8 <MX_GPIO_Init+0x1c4>)
 80014ca:	f006 fe63 	bl	8008194 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80014ce:	bf00      	nop
 80014d0:	3738      	adds	r7, #56	@ 0x38
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58020800 	.word	0x58020800
 80014e0:	58021000 	.word	0x58021000
 80014e4:	58021400 	.word	0x58021400
 80014e8:	58021800 	.word	0x58021800

080014ec <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4909      	ldr	r1, [pc, #36]	@ (800151c <print+0x30>)
 80014f8:	4809      	ldr	r0, [pc, #36]	@ (8001520 <print+0x34>)
 80014fa:	f010 fb4b 	bl	8011b94 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 80014fe:	4808      	ldr	r0, [pc, #32]	@ (8001520 <print+0x34>)
 8001500:	f7fe ff06 	bl	8000310 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800150c:	4904      	ldr	r1, [pc, #16]	@ (8001520 <print+0x34>)
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <print+0x38>)
 8001510:	f00d fa3a 	bl	800e988 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	080126ec 	.word	0x080126ec
 8001520:	240016b0 	.word	0x240016b0
 8001524:	240004d4 	.word	0x240004d4

08001528 <printValue>:

void printValue(int value) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4909      	ldr	r1, [pc, #36]	@ (8001558 <printValue+0x30>)
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <printValue+0x34>)
 8001536:	f010 fb2d 	bl	8011b94 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 800153a:	4808      	ldr	r0, [pc, #32]	@ (800155c <printValue+0x34>)
 800153c:	f7fe fee8 	bl	8000310 <strlen>
 8001540:	4603      	mov	r3, r0
 8001542:	b29a      	uxth	r2, r3
 8001544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001548:	4904      	ldr	r1, [pc, #16]	@ (800155c <printValue+0x34>)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <printValue+0x38>)
 800154c:	f00d fa1c 	bl	800e988 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	080126f4 	.word	0x080126f4
 800155c:	240016b0 	.word	0x240016b0
 8001560:	240004d4 	.word	0x240004d4

08001564 <HAL_ADC_ConvCpltCallback>:
	sprintf(uart_msg, "0x%02X \n\r", value);
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
	HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	s1_aceleracion = buffer_adc[0];
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_ADC_ConvCpltCallback+0x34>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_ADC_ConvCpltCallback+0x38>)
 8001574:	601a      	str	r2, [r3, #0]
	s2_aceleracion = buffer_adc[1];
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_ADC_ConvCpltCallback+0x34>)
 8001578:	885b      	ldrh	r3, [r3, #2]
 800157a:	461a      	mov	r2, r3
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 800157e:	601a      	str	r2, [r3, #0]
	s_freno = buffer_adc[2];
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_ADC_ConvCpltCallback+0x34>)
 8001582:	889b      	ldrh	r3, [r3, #4]
 8001584:	461a      	mov	r2, r3
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <HAL_ADC_ConvCpltCallback+0x40>)
 8001588:	601a      	str	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2400166c 	.word	0x2400166c
 800159c:	24001674 	.word	0x24001674
 80015a0:	24001678 	.word	0x24001678
 80015a4:	24001694 	.word	0x24001694

080015a8 <HAL_FDCAN_RxFifo0Callback>:
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80ba 	beq.w	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a5e      	ldr	r2, [pc, #376]	@ (800173c <HAL_FDCAN_RxFifo0Callback+0x194>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	f040 8081 	bne.w	80016cc <HAL_FDCAN_RxFifo0Callback+0x124>
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80015ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80015cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	485d      	ldr	r0, [pc, #372]	@ (8001748 <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 80015d2:	f005 fefd 	bl	80073d0 <HAL_FDCAN_GetRxMessage>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 80aa 	bne.w	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
					RxData_Inv) == HAL_OK) {
				switch (RxHeader_Inv.Identifier) {
 80015de:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f240 4266 	movw	r2, #1126	@ 0x466
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d037      	beq.n	800165a <HAL_FDCAN_RxFifo0Callback+0xb2>
 80015ea:	f240 4266 	movw	r2, #1126	@ 0x466
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f200 809f 	bhi.w	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
 80015f4:	f240 4262 	movw	r2, #1122	@ 0x462
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d004      	beq.n	8001606 <HAL_FDCAN_RxFifo0Callback+0x5e>
 80015fc:	f240 4263 	movw	r2, #1123	@ 0x463
 8001600:	4293      	cmp	r3, r2
 8001602:	d010      	beq.n	8001626 <HAL_FDCAN_RxFifo0Callback+0x7e>
			}

		}

	}
}
 8001604:	e095      	b.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
					state = RxData_Inv[2] >> 0x1;
 8001606:	4b4e      	ldr	r3, [pc, #312]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001608:	789b      	ldrb	r3, [r3, #2]
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b4f      	ldr	r3, [pc, #316]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001610:	701a      	strb	r2, [r3, #0]
					if (state == 10) {
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b0a      	cmp	r3, #10
 8001618:	f040 8084 	bne.w	8001724 <HAL_FDCAN_RxFifo0Callback+0x17c>
						error = RxData_Inv[0];
 800161c:	4b48      	ldr	r3, [pc, #288]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	4b4b      	ldr	r3, [pc, #300]	@ (8001750 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8001622:	701a      	strb	r2, [r3, #0]
					break;
 8001624:	e07e      	b.n	8001724 <HAL_FDCAN_RxFifo0Callback+0x17c>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 8001626:	4b46      	ldr	r3, [pc, #280]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001628:	79db      	ldrb	r3, [r3, #7]
 800162a:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
							| RxData_Inv[8] << 8 | RxData_Inv[5];
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001630:	7a1b      	ldrb	r3, [r3, #8]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	4313      	orrs	r3, r2
 8001636:	4a42      	ldr	r2, [pc, #264]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001638:	7952      	ldrb	r2, [r2, #5]
 800163a:	4313      	orrs	r3, r2
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 800163c:	4a45      	ldr	r2, [pc, #276]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800163e:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000) {
 8001640:	4b44      	ldr	r3, [pc, #272]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d06d      	beq.n	8001728 <HAL_FDCAN_RxFifo0Callback+0x180>
						e_machine_rpm |= 0xFFF0000;
 800164c:	4b41      	ldr	r3, [pc, #260]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001652:	4313      	orrs	r3, r2
 8001654:	4a3f      	ldr	r2, [pc, #252]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001656:	6013      	str	r3, [r2, #0]
					break;
 8001658:	e066      	b.n	8001728 <HAL_FDCAN_RxFifo0Callback+0x180>
					if (RxHeader_Inv.DataLength == 6) {
 800165a:	4b3a      	ldr	r3, [pc, #232]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b06      	cmp	r3, #6
 8001660:	d164      	bne.n	800172c <HAL_FDCAN_RxFifo0Callback+0x184>
						if (config_inv_lectura_v == 0) {
 8001662:	4b3e      	ldr	r3, [pc, #248]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <HAL_FDCAN_RxFifo0Callback+0xca>
							config_inv_lectura_v = 1;
 800166a:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
					break;
 8001670:	e05c      	b.n	800172c <HAL_FDCAN_RxFifo0Callback+0x184>
						} else if (config_inv_lectura_v == 1) {
 8001672:	4b3a      	ldr	r3, [pc, #232]	@ (800175c <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d158      	bne.n	800172c <HAL_FDCAN_RxFifo0Callback+0x184>
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800167c:	785b      	ldrb	r3, [r3, #1]
 800167e:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[0];
 8001680:	4a2f      	ldr	r2, [pc, #188]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	4313      	orrs	r3, r2
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 8001686:	4a36      	ldr	r2, [pc, #216]	@ (8001760 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001688:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 800168a:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800168c:	789b      	ldrb	r3, [r3, #2]
 800168e:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[1];
 8001690:	4a2b      	ldr	r2, [pc, #172]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001692:	7852      	ldrb	r2, [r2, #1]
 8001694:	4313      	orrs	r3, r2
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 8001696:	4a33      	ldr	r2, [pc, #204]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001698:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power >> 2;//Bits 10 to 16
 800169a:	4b32      	ldr	r3, [pc, #200]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	109b      	asrs	r3, r3, #2
 80016a0:	4a30      	ldr	r2, [pc, #192]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016a2:	6013      	str	r3, [r2, #0]
							if (inv_dc_bus_power & 0x2000) {//Check for bit signing
 80016a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_FDCAN_RxFifo0Callback+0x114>
								inv_dc_bus_power |= 0xC000;
 80016b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016ba:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power * 32767; //Scale factor
 80016bc:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	03db      	lsls	r3, r3, #15
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	4a27      	ldr	r2, [pc, #156]	@ (8001764 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016c8:	6013      	str	r3, [r2, #0]
					break;
 80016ca:	e02f      	b.n	800172c <HAL_FDCAN_RxFifo0Callback+0x184>
		} else if (hfdcan->Instance == FDCAN2) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a25      	ldr	r2, [pc, #148]	@ (8001768 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12d      	bne.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80016d6:	4b25      	ldr	r3, [pc, #148]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016d8:	4a25      	ldr	r2, [pc, #148]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80016da:	2140      	movs	r1, #64	@ 0x40
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f005 fe77 	bl	80073d0 <HAL_FDCAN_GetRxMessage>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d124      	bne.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
				switch (RxHeader_Acu.Identifier) {
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d003      	beq.n	80016f8 <HAL_FDCAN_RxFifo0Callback+0x150>
 80016f0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80016f4:	d008      	beq.n	8001708 <HAL_FDCAN_RxFifo0Callback+0x160>
}
 80016f6:	e01c      	b.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
					if (RxData_Acu[0] == 0) {
 80016f8:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d117      	bne.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x188>
						precarga_inv = 1;
 8001700:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
					break;
 8001706:	e013      	b.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x188>
					v_celda_min = (int) (RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	4a17      	ldr	r2, [pc, #92]	@ (800176c <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001710:	7852      	ldrb	r2, [r2, #1]
 8001712:	4313      	orrs	r3, r2
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001722:	e006      	b.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001724:	bf00      	nop
 8001726:	e004      	b.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001728:	bf00      	nop
 800172a:	e002      	b.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 800172c:	bf00      	nop
 800172e:	e000      	b.n	8001732 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001730:	bf00      	nop
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	4000a000 	.word	0x4000a000
 8001740:	24000608 	.word	0x24000608
 8001744:	2400058c 	.word	0x2400058c
 8001748:	240001ec 	.word	0x240001ec
 800174c:	240016a2 	.word	0x240016a2
 8001750:	2400180e 	.word	0x2400180e
 8001754:	24001668 	.word	0x24001668
 8001758:	0fff0000 	.word	0x0fff0000
 800175c:	24000090 	.word	0x24000090
 8001760:	24001660 	.word	0x24001660
 8001764:	24001664 	.word	0x24001664
 8001768:	4000a400 	.word	0x4000a400
 800176c:	24000618 	.word	0x24000618
 8001770:	240005d8 	.word	0x240005d8
 8001774:	2400008c 	.word	0x2400008c
 8001778:	2400000c 	.word	0x2400000c
 800177c:	00000000 	.word	0x00000000

08001780 <setTorque>:
		sum += lecturas[i];
	}
	return sum / N_LECTURAS;
}

uint16_t setTorque() {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
	// Leemos sensores de posición del pedal de acelaración

	int s1_aceleracion_filtr = LPF_EMA_Update(&s1_filt, s1_aceleracion);
 8001786:	4ba2      	ldr	r3, [pc, #648]	@ (8001a10 <setTorque+0x290>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	489f      	ldr	r0, [pc, #636]	@ (8001a14 <setTorque+0x294>)
 8001798:	f7fe ffc3 	bl	8000722 <LPF_EMA_Update>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
 80017a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a4:	ee17 3a90 	vmov	r3, s15
 80017a8:	60fb      	str	r3, [r7, #12]
	int s2_aceleracion_filtr = LPF_EMA_Update(&s2_filt, s2_aceleracion);
 80017aa:	4b9b      	ldr	r3, [pc, #620]	@ (8001a18 <setTorque+0x298>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ba:	4898      	ldr	r0, [pc, #608]	@ (8001a1c <setTorque+0x29c>)
 80017bc:	f7fe ffb1 	bl	8000722 <LPF_EMA_Update>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c8:	ee17 3a90 	vmov	r3, s15
 80017cc:	60bb      	str	r3, [r7, #8]

#if 1
	print("Sensor 1: ");
 80017ce:	4894      	ldr	r0, [pc, #592]	@ (8001a20 <setTorque+0x2a0>)
 80017d0:	f7ff fe8c 	bl	80014ec <print>
	printValue(s1_aceleracion_filtr);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7ff fea7 	bl	8001528 <printValue>
	print("");
 80017da:	4892      	ldr	r0, [pc, #584]	@ (8001a24 <setTorque+0x2a4>)
 80017dc:	f7ff fe86 	bl	80014ec <print>
	print("Sensor 2: ");
 80017e0:	4891      	ldr	r0, [pc, #580]	@ (8001a28 <setTorque+0x2a8>)
 80017e2:	f7ff fe83 	bl	80014ec <print>
	printValue(s2_aceleracion_filtr);
 80017e6:	68b8      	ldr	r0, [r7, #8]
 80017e8:	f7ff fe9e 	bl	8001528 <printValue>
	print("");
 80017ec:	488d      	ldr	r0, [pc, #564]	@ (8001a24 <setTorque+0x2a4>)
 80017ee:	f7ff fe7d 	bl	80014ec <print>
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion_filtr - 1999) / (25.75 - 19.99);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001800:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 80019e0 <setTorque+0x260>
 8001804:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001808:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800180c:	ee17 2a90 	vmov	r2, s15
 8001810:	4b86      	ldr	r3, [pc, #536]	@ (8001a2c <setTorque+0x2ac>)
 8001812:	601a      	str	r2, [r3, #0]
	if (s1_aceleracion_aux < 0) {
 8001814:	4b85      	ldr	r3, [pc, #532]	@ (8001a2c <setTorque+0x2ac>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da03      	bge.n	8001824 <setTorque+0xa4>
		s1_aceleracion_aux = 0;
 800181c:	4b83      	ldr	r3, [pc, #524]	@ (8001a2c <setTorque+0x2ac>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e006      	b.n	8001832 <setTorque+0xb2>
	} else if (s1_aceleracion_aux > 100) {
 8001824:	4b81      	ldr	r3, [pc, #516]	@ (8001a2c <setTorque+0x2ac>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b64      	cmp	r3, #100	@ 0x64
 800182a:	dd02      	ble.n	8001832 <setTorque+0xb2>
		s1_aceleracion_aux = 100;
 800182c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a2c <setTorque+0x2ac>)
 800182e:	2264      	movs	r2, #100	@ 0x64
 8001830:	601a      	str	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion_filtr - 1913) / (23.11 - 19.13);
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f2a3 7379 	subw	r3, r3, #1913	@ 0x779
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001840:	ed9f 5b69 	vldr	d5, [pc, #420]	@ 80019e8 <setTorque+0x268>
 8001844:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001848:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800184c:	ee17 2a90 	vmov	r2, s15
 8001850:	4b77      	ldr	r3, [pc, #476]	@ (8001a30 <setTorque+0x2b0>)
 8001852:	601a      	str	r2, [r3, #0]
	if (s2_aceleracion_aux < 0) {
 8001854:	4b76      	ldr	r3, [pc, #472]	@ (8001a30 <setTorque+0x2b0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	da03      	bge.n	8001864 <setTorque+0xe4>
		s2_aceleracion_aux = 0;
 800185c:	4b74      	ldr	r3, [pc, #464]	@ (8001a30 <setTorque+0x2b0>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e006      	b.n	8001872 <setTorque+0xf2>
	} else if (s2_aceleracion_aux > 100) {
 8001864:	4b72      	ldr	r3, [pc, #456]	@ (8001a30 <setTorque+0x2b0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b64      	cmp	r3, #100	@ 0x64
 800186a:	dd02      	ble.n	8001872 <setTorque+0xf2>
		s2_aceleracion_aux = 100;
 800186c:	4b70      	ldr	r3, [pc, #448]	@ (8001a30 <setTorque+0x2b0>)
 800186e:	2264      	movs	r2, #100	@ 0x64
 8001870:	601a      	str	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 8001872:	4870      	ldr	r0, [pc, #448]	@ (8001a34 <setTorque+0x2b4>)
 8001874:	f7ff fe3a 	bl	80014ec <print>
	printValue(s1_aceleracion_aux);
 8001878:	4b6c      	ldr	r3, [pc, #432]	@ (8001a2c <setTorque+0x2ac>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe53 	bl	8001528 <printValue>
	print("");
 8001882:	4868      	ldr	r0, [pc, #416]	@ (8001a24 <setTorque+0x2a4>)
 8001884:	f7ff fe32 	bl	80014ec <print>
	print("Sensor % 2: ");
 8001888:	486b      	ldr	r0, [pc, #428]	@ (8001a38 <setTorque+0x2b8>)
 800188a:	f7ff fe2f 	bl	80014ec <print>
	printValue(s2_aceleracion_aux);
 800188e:	4b68      	ldr	r3, [pc, #416]	@ (8001a30 <setTorque+0x2b0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fe48 	bl	8001528 <printValue>
	print("");
 8001898:	4862      	ldr	r0, [pc, #392]	@ (8001a24 <setTorque+0x2a4>)
 800189a:	f7ff fe27 	bl	80014ec <print>
#endif

	// Torque enviado es la media de los dos sensores
	torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 800189e:	4b63      	ldr	r3, [pc, #396]	@ (8001a2c <setTorque+0x2ac>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b63      	ldr	r3, [pc, #396]	@ (8001a30 <setTorque+0x2b0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da00      	bge.n	80018ae <setTorque+0x12e>
 80018ac:	3301      	adds	r3, #1
 80018ae:	105b      	asrs	r3, r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b62      	ldr	r3, [pc, #392]	@ (8001a3c <setTorque+0x2bc>)
 80018b4:	801a      	strh	r2, [r3, #0]

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 0) {
		torque_total = 0;
	} else if (torque_total > 90) {
 80018b6:	4b61      	ldr	r3, [pc, #388]	@ (8001a3c <setTorque+0x2bc>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	2b5a      	cmp	r3, #90	@ 0x5a
 80018bc:	d902      	bls.n	80018c4 <setTorque+0x144>
		torque_total = 100;
 80018be:	4b5f      	ldr	r3, [pc, #380]	@ (8001a3c <setTorque+0x2bc>)
 80018c0:	2264      	movs	r2, #100	@ 0x64
 80018c2:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25) {
 80018c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a40 <setTorque+0x2c0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80018cc:	dd0a      	ble.n	80018e4 <setTorque+0x164>
 80018ce:	4b5b      	ldr	r3, [pc, #364]	@ (8001a3c <setTorque+0x2bc>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	2b19      	cmp	r3, #25
 80018d4:	d906      	bls.n	80018e4 <setTorque+0x164>
		print("EV_2_3");
 80018d6:	485b      	ldr	r0, [pc, #364]	@ (8001a44 <setTorque+0x2c4>)
 80018d8:	f7ff fe08 	bl	80014ec <print>
		flag_EV_2_3 = 1;
 80018dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a48 <setTorque+0x2c8>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e00b      	b.n	80018fc <setTorque+0x17c>
	} else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5) {
 80018e4:	4b56      	ldr	r3, [pc, #344]	@ (8001a40 <setTorque+0x2c0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80018ec:	da06      	bge.n	80018fc <setTorque+0x17c>
 80018ee:	4b53      	ldr	r3, [pc, #332]	@ (8001a3c <setTorque+0x2bc>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d802      	bhi.n	80018fc <setTorque+0x17c>
		flag_EV_2_3 = 0;
 80018f6:	4b54      	ldr	r3, [pc, #336]	@ (8001a48 <setTorque+0x2c8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10) {
 80018fc:	4b4b      	ldr	r3, [pc, #300]	@ (8001a2c <setTorque+0x2ac>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b4b      	ldr	r3, [pc, #300]	@ (8001a30 <setTorque+0x2b0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	bfb8      	it	lt
 800190a:	425b      	neglt	r3, r3
 800190c:	2b0a      	cmp	r3, #10
 800190e:	dd0e      	ble.n	800192e <setTorque+0x1ae>

		if (HAL_GetTick() - last_time_t_11_8 > 100) {
 8001910:	f000 ffd2 	bl	80028b8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	4b4d      	ldr	r3, [pc, #308]	@ (8001a4c <setTorque+0x2cc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b64      	cmp	r3, #100	@ 0x64
 800191e:	d90e      	bls.n	800193e <setTorque+0x1be>
			print("T11.8.9");
 8001920:	484b      	ldr	r0, [pc, #300]	@ (8001a50 <setTorque+0x2d0>)
 8001922:	f7ff fde3 	bl	80014ec <print>
			flag_T11_8_9 = 1;
 8001926:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <setTorque+0x2d4>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e007      	b.n	800193e <setTorque+0x1be>
		}

	} else {
		last_time_t_11_8 = HAL_GetTick();
 800192e:	f000 ffc3 	bl	80028b8 <HAL_GetTick>
 8001932:	4603      	mov	r3, r0
 8001934:	4a45      	ldr	r2, [pc, #276]	@ (8001a4c <setTorque+0x2cc>)
 8001936:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001938:	4b46      	ldr	r3, [pc, #280]	@ (8001a54 <setTorque+0x2d4>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9) {
 800193e:	4b42      	ldr	r3, [pc, #264]	@ (8001a48 <setTorque+0x2c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <setTorque+0x1ce>
 8001946:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <setTorque+0x2d4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <setTorque+0x1d4>
		torque_total = 0;
 800194e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a3c <setTorque+0x2bc>)
 8001950:	2200      	movs	r2, #0
 8001952:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500) {
 8001954:	4b40      	ldr	r3, [pc, #256]	@ (8001a58 <setTorque+0x2d8>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001a5c <setTorque+0x2dc>
 800195e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d57f      	bpl.n	8001a68 <setTorque+0x2e8>
		if (v_celda_min > 2800) {
 8001968:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <setTorque+0x2d8>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001a60 <setTorque+0x2e0>
 8001972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	dd1f      	ble.n	80019bc <setTorque+0x23c>
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 800197c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <setTorque+0x2bc>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001988:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <setTorque+0x2d8>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001992:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 80019f0 <setTorque+0x270>
 8001996:	ee27 7b05 	vmul.f64	d7, d7, d5
 800199a:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 80019f8 <setTorque+0x278>
 800199e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80019a2:	ee26 6b07 	vmul.f64	d6, d6, d7
					/ 1000;
 80019a6:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8001a00 <setTorque+0x280>
 80019aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 80019ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019b2:	ee17 2a90 	vmov	r2, s15
 80019b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <setTorque+0x2e4>)
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e05a      	b.n	8001a72 <setTorque+0x2f2>
		} else {
			torque_limitado = torque_total * 0.05;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <setTorque+0x2bc>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019c8:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8001a08 <setTorque+0x288>
 80019cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019d4:	ee17 2a90 	vmov	r2, s15
 80019d8:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <setTorque+0x2e4>)
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e049      	b.n	8001a72 <setTorque+0x2f2>
 80019de:	bf00      	nop
 80019e0:	70a3d70c 	.word	0x70a3d70c
 80019e4:	40170a3d 	.word	0x40170a3d
 80019e8:	3d70a3d8 	.word	0x3d70a3d8
 80019ec:	400fd70a 	.word	0x400fd70a
 80019f0:	a1cac083 	.word	0xa1cac083
 80019f4:	3ff5b645 	.word	0x3ff5b645
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40ad4c00 	.word	0x40ad4c00
 8001a00:	00000000 	.word	0x00000000
 8001a04:	408f4000 	.word	0x408f4000
 8001a08:	9999999a 	.word	0x9999999a
 8001a0c:	3fa99999 	.word	0x3fa99999
 8001a10:	24001674 	.word	0x24001674
 8001a14:	24001684 	.word	0x24001684
 8001a18:	24001678 	.word	0x24001678
 8001a1c:	2400168c 	.word	0x2400168c
 8001a20:	08012708 	.word	0x08012708
 8001a24:	08012714 	.word	0x08012714
 8001a28:	08012718 	.word	0x08012718
 8001a2c:	2400167c 	.word	0x2400167c
 8001a30:	24001680 	.word	0x24001680
 8001a34:	08012724 	.word	0x08012724
 8001a38:	08012734 	.word	0x08012734
 8001a3c:	24001698 	.word	0x24001698
 8001a40:	24001694 	.word	0x24001694
 8001a44:	08012744 	.word	0x08012744
 8001a48:	240016a8 	.word	0x240016a8
 8001a4c:	240016a4 	.word	0x240016a4
 8001a50:	0801274c 	.word	0x0801274c
 8001a54:	240016ac 	.word	0x240016ac
 8001a58:	2400000c 	.word	0x2400000c
 8001a5c:	455ac000 	.word	0x455ac000
 8001a60:	452f0000 	.word	0x452f0000
 8001a64:	2400169c 	.word	0x2400169c
		}
	} else {
		torque_limitado = torque_total;
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <setTorque+0x338>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <setTorque+0x33c>)
 8001a70:	601a      	str	r2, [r3, #0]
#if 0
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	torque_total = torque_total * 2.4;
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <setTorque+0x338>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a7e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001ab0 <setTorque+0x330>
 8001a82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a86:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a8a:	ee17 3a90 	vmov	r3, s15
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <setTorque+0x338>)
 8001a92:	801a      	strh	r2, [r3, #0]
	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <setTorque+0x338>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	f3af 8000 	nop.w
 8001ab0:	33333333 	.word	0x33333333
 8001ab4:	40033333 	.word	0x40033333
 8001ab8:	24001698 	.word	0x24001698
 8001abc:	2400169c 	.word	0x2400169c

08001ac0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a48      	ldr	r2, [pc, #288]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	f040 8089 	bne.w	8001be4 <HAL_TIM_PeriodElapsedCallback+0x124>

		// ---------- CONTROL DEL INVERSOR ----------

		//Estado TORQUE

		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ad2:	4b47      	ldr	r3, [pc, #284]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a47      	ldr	r2, [pc, #284]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001ad8:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8001ada:	4b46      	ldr	r3, [pc, #280]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001adc:	2203      	movs	r2, #3
 8001ade:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001ae0:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8001ae6:	4b44      	ldr	r3, [pc, #272]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8001aec:	4b42      	ldr	r3, [pc, #264]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x6;
 8001af2:	4b41      	ldr	r3, [pc, #260]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001af4:	2206      	movs	r2, #6
 8001af6:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001af8:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001afa:	493e      	ldr	r1, [pc, #248]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001afc:	483f      	ldr	r0, [pc, #252]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001afe:	f005 fc0c 	bl	800731a <HAL_FDCAN_AddMessageToTxFifoQ>

		switch (state) {
 8001b02:	4b3f      	ldr	r3, [pc, #252]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b0a      	cmp	r3, #10
 8001b08:	d051      	beq.n	8001bae <HAL_TIM_PeriodElapsedCallback+0xee>
 8001b0a:	2b0a      	cmp	r3, #10
 8001b0c:	dc6a      	bgt.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x124>
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d002      	beq.n	8001b18 <HAL_TIM_PeriodElapsedCallback+0x58>
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d01e      	beq.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x94>

			break;
		}
#endif
	}
}
 8001b16:	e065      	b.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x124>
			TxHeader_Inv.Identifier = 0x362;
 8001b18:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b1a:	f240 3262 	movw	r2, #866	@ 0x362
 8001b1e:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b20:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b22:	2204      	movs	r2, #4
 8001b24:	60da      	str	r2, [r3, #12]
			real_torque = 0;
 8001b26:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
			TxData_Inv[0] = 0x0;
 8001b2c:	4b32      	ldr	r3, [pc, #200]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b32:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001b38:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b40:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001b42:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b48:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b4a:	492a      	ldr	r1, [pc, #168]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b4c:	482b      	ldr	r0, [pc, #172]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b4e:	f005 fbe4 	bl	800731a <HAL_FDCAN_AddMessageToTxFifoQ>
			break;
 8001b52:	e047      	b.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x124>
			real_torque = setTorque();
 8001b54:	f7ff fe14 	bl	8001780 <setTorque>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b29      	ldr	r3, [pc, #164]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b5e:	801a      	strh	r2, [r3, #0]
			TxHeader_Inv.Identifier = 0x362;
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b62:	f240 3262 	movw	r2, #866	@ 0x362
 8001b66:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b68:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	60da      	str	r2, [r3, #12]
			byte_torque_1 = real_torque & 0xFF;
 8001b6e:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001b76:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = real_torque >> 8;
 8001b78:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001b84:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = byte_torque_1;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b98:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001ba0:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ba2:	4a15      	ldr	r2, [pc, #84]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001ba4:	4913      	ldr	r1, [pc, #76]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001ba6:	4815      	ldr	r0, [pc, #84]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001ba8:	f005 fbb7 	bl	800731a <HAL_FDCAN_AddMessageToTxFifoQ>
			break;
 8001bac:	e01a      	b.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x124>
			print("state: soft fault");
 8001bae:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001bb0:	f7ff fc9c 	bl	80014ec <print>
			switch (error) {
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d00e      	beq.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x11a>
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	dc10      	bgt.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x122>
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d002      	beq.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x10a>
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x112>
			break;
 8001bc8:	e00b      	b.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x122>
				print("Error: Lost msg");
 8001bca:	4813      	ldr	r0, [pc, #76]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001bcc:	f7ff fc8e 	bl	80014ec <print>
				break;
 8001bd0:	e007      	b.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x122>
				print("Error: Undervoltage");
 8001bd2:	4812      	ldr	r0, [pc, #72]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001bd4:	f7ff fc8a 	bl	80014ec <print>
				break;
 8001bd8:	e003      	b.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x122>
				print("Error: Overtemperature");
 8001bda:	4811      	ldr	r0, [pc, #68]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001bdc:	f7ff fc86 	bl	80014ec <print>
				break;
 8001be0:	bf00      	nop
			break;
 8001be2:	bf00      	nop
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	240003f4 	.word	0x240003f4
 8001bf0:	24000004 	.word	0x24000004
 8001bf4:	24000568 	.word	0x24000568
 8001bf8:	24000600 	.word	0x24000600
 8001bfc:	240001ec 	.word	0x240001ec
 8001c00:	240016a2 	.word	0x240016a2
 8001c04:	240016a0 	.word	0x240016a0
 8001c08:	2400169a 	.word	0x2400169a
 8001c0c:	2400169b 	.word	0x2400169b
 8001c10:	08012754 	.word	0x08012754
 8001c14:	2400180e 	.word	0x2400180e
 8001c18:	08012768 	.word	0x08012768
 8001c1c:	08012778 	.word	0x08012778
 8001c20:	0801278c 	.word	0x0801278c

08001c24 <SDCard_start>:

void SDCard_start(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
	FATFS *FS_Ptr;
	DWORD FreeClusters;
	uint32_t TotalSize, FreeSpace;
	do {
		//------------------[ Mount The SD Card ]--------------------
		FR_Status = f_mount(&FatFs, SDPath, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	492e      	ldr	r1, [pc, #184]	@ (8001ce8 <SDCard_start+0xc4>)
 8001c2e:	482f      	ldr	r0, [pc, #188]	@ (8001cec <SDCard_start+0xc8>)
 8001c30:	f00f fe58 	bl	80118e4 <f_mount>
 8001c34:	4603      	mov	r3, r0
 8001c36:	75fb      	strb	r3, [r7, #23]
		if (FR_Status != FR_OK) {
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <SDCard_start+0x2e>
			sprintf(TxBuffer, "Error! Error Code: (%i)\r\n", FR_Status);
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	461a      	mov	r2, r3
 8001c42:	492b      	ldr	r1, [pc, #172]	@ (8001cf0 <SDCard_start+0xcc>)
 8001c44:	482b      	ldr	r0, [pc, #172]	@ (8001cf4 <SDCard_start+0xd0>)
 8001c46:	f00f ffa5 	bl	8011b94 <siprintf>
			print(TxBuffer);
 8001c4a:	482a      	ldr	r0, [pc, #168]	@ (8001cf4 <SDCard_start+0xd0>)
 8001c4c:	f7ff fc4e 	bl	80014ec <print>
			break;
 8001c50:	e045      	b.n	8001cde <SDCard_start+0xba>
		}
		sprintf(TxBuffer, "SD montada correctamente \r\n\n");
 8001c52:	4929      	ldr	r1, [pc, #164]	@ (8001cf8 <SDCard_start+0xd4>)
 8001c54:	4827      	ldr	r0, [pc, #156]	@ (8001cf4 <SDCard_start+0xd0>)
 8001c56:	f00f ff9d 	bl	8011b94 <siprintf>
		print(TxBuffer);
 8001c5a:	4826      	ldr	r0, [pc, #152]	@ (8001cf4 <SDCard_start+0xd0>)
 8001c5c:	f7ff fc46 	bl	80014ec <print>
		//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8001c60:	f107 0208 	add.w	r2, r7, #8
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4824      	ldr	r0, [pc, #144]	@ (8001cfc <SDCard_start+0xd8>)
 8001c6a:	f00f fe81 	bl	8011970 <f_getfree>
		TotalSize = (uint32_t) ((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	3b02      	subs	r3, #2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	8952      	ldrh	r2, [r2, #10]
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c84:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001c88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c90:	ee17 3a90 	vmov	r3, s15
 8001c94:	613b      	str	r3, [r7, #16]
		FreeSpace = (uint32_t) (FreeClusters * FS_Ptr->csize * 0.5);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	895b      	ldrh	r3, [r3, #10]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001caa:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cb2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cb6:	ee17 3a90 	vmov	r3, s15
 8001cba:	60fb      	str	r3, [r7, #12]
		sprintf(TxBuffer, "Espacio total: %lu Bytes\r\n", TotalSize);
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4910      	ldr	r1, [pc, #64]	@ (8001d00 <SDCard_start+0xdc>)
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <SDCard_start+0xd0>)
 8001cc2:	f00f ff67 	bl	8011b94 <siprintf>
		print(TxBuffer);
 8001cc6:	480b      	ldr	r0, [pc, #44]	@ (8001cf4 <SDCard_start+0xd0>)
 8001cc8:	f7ff fc10 	bl	80014ec <print>
		sprintf(TxBuffer, "Espacio libre: %lu Bytes\r\n\n", FreeSpace);
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	490d      	ldr	r1, [pc, #52]	@ (8001d04 <SDCard_start+0xe0>)
 8001cd0:	4808      	ldr	r0, [pc, #32]	@ (8001cf4 <SDCard_start+0xd0>)
 8001cd2:	f00f ff5f 	bl	8011b94 <siprintf>
		print(TxBuffer);
 8001cd6:	4807      	ldr	r0, [pc, #28]	@ (8001cf4 <SDCard_start+0xd0>)
 8001cd8:	f7ff fc08 	bl	80014ec <print>
	} while (0);

}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24001824 	.word	0x24001824
 8001cec:	24000620 	.word	0x24000620
 8001cf0:	080127a4 	.word	0x080127a4
 8001cf4:	24001714 	.word	0x24001714
 8001cf8:	080127c0 	.word	0x080127c0
 8001cfc:	08012714 	.word	0x08012714
 8001d00:	080127e0 	.word	0x080127e0
 8001d04:	080127fc 	.word	0x080127fc

08001d08 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <Error_Handler+0x8>

08001d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_MspInit+0x30>)
 8001d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d20:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_MspInit+0x30>)
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_MspInit+0x30>)
 8001d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	58024400 	.word	0x58024400

08001d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b090      	sub	sp, #64	@ 0x40
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a90      	ldr	r2, [pc, #576]	@ (8001fa8 <HAL_ADC_MspInit+0x260>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	f040 80a3 	bne.w	8001eb2 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d6c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fac <HAL_ADC_MspInit+0x264>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	4a8e      	ldr	r2, [pc, #568]	@ (8001fac <HAL_ADC_MspInit+0x264>)
 8001d74:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d76:	4b8d      	ldr	r3, [pc, #564]	@ (8001fac <HAL_ADC_MspInit+0x264>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d10e      	bne.n	8001d9c <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d7e:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d84:	4a8a      	ldr	r2, [pc, #552]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001d86:	f043 0320 	orr.w	r3, r3, #32
 8001d8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d8e:	4b88      	ldr	r3, [pc, #544]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9c:	4b84      	ldr	r3, [pc, #528]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da2:	4a83      	ldr	r2, [pc, #524]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dac:	4b80      	ldr	r3, [pc, #512]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc0:	4a7b      	ldr	r2, [pc, #492]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dca:	4b79      	ldr	r3, [pc, #484]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd8:	4b75      	ldr	r3, [pc, #468]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dde:	4a74      	ldr	r2, [pc, #464]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de8:	4b71      	ldr	r3, [pc, #452]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001df6:	2330      	movs	r3, #48	@ 0x30
 8001df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e06:	4619      	mov	r1, r3
 8001e08:	486a      	ldr	r0, [pc, #424]	@ (8001fb4 <HAL_ADC_MspInit+0x26c>)
 8001e0a:	f006 f9c3 	bl	8008194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e12:	2303      	movs	r3, #3
 8001e14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4865      	ldr	r0, [pc, #404]	@ (8001fb8 <HAL_ADC_MspInit+0x270>)
 8001e22:	f006 f9b7 	bl	8008194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001e26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4860      	ldr	r0, [pc, #384]	@ (8001fbc <HAL_ADC_MspInit+0x274>)
 8001e3c:	f006 f9aa 	bl	8008194 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001e40:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e42:	4a60      	ldr	r2, [pc, #384]	@ (8001fc4 <HAL_ADC_MspInit+0x27c>)
 8001e44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e46:	4b5e      	ldr	r3, [pc, #376]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e48:	2209      	movs	r2, #9
 8001e4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e52:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	4b59      	ldr	r3, [pc, #356]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e60:	4b57      	ldr	r3, [pc, #348]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e68:	4b55      	ldr	r3, [pc, #340]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e70:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e78:	4b51      	ldr	r3, [pc, #324]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e7e:	4b50      	ldr	r3, [pc, #320]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e84:	484e      	ldr	r0, [pc, #312]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e86:	f002 fef5 	bl	8004c74 <HAL_DMA_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001e90:	f7ff ff3a 	bl	8001d08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a4a      	ldr	r2, [pc, #296]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e98:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e9a:	4a49      	ldr	r2, [pc, #292]	@ (8001fc0 <HAL_ADC_MspInit+0x278>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2012      	movs	r0, #18
 8001ea6:	f002 feb0 	bl	8004c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001eaa:	2012      	movs	r0, #18
 8001eac:	f002 fec7 	bl	8004c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001eb0:	e076      	b.n	8001fa0 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a44      	ldr	r2, [pc, #272]	@ (8001fc8 <HAL_ADC_MspInit+0x280>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d171      	bne.n	8001fa0 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <HAL_ADC_MspInit+0x264>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	@ (8001fac <HAL_ADC_MspInit+0x264>)
 8001ec4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ec6:	4b39      	ldr	r3, [pc, #228]	@ (8001fac <HAL_ADC_MspInit+0x264>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10e      	bne.n	8001eec <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ece:	4b38      	ldr	r3, [pc, #224]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ed4:	4a36      	ldr	r2, [pc, #216]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001ed6:	f043 0320 	orr.w	r3, r3, #32
 8001eda:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ede:	4b34      	ldr	r3, [pc, #208]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001ee0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eec:	4b30      	ldr	r3, [pc, #192]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001efc:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f10:	4a27      	ldr	r2, [pc, #156]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f1a:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f28:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2e:	4a20      	ldr	r2, [pc, #128]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <HAL_ADC_MspInit+0x268>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8001f46:	2320      	movs	r3, #32
 8001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f56:	4619      	mov	r1, r3
 8001f58:	4816      	ldr	r0, [pc, #88]	@ (8001fb4 <HAL_ADC_MspInit+0x26c>)
 8001f5a:	f006 f91b 	bl	8008194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f62:	2303      	movs	r3, #3
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4811      	ldr	r0, [pc, #68]	@ (8001fb8 <HAL_ADC_MspInit+0x270>)
 8001f72:	f006 f90f 	bl	8008194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 8001f76:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <HAL_ADC_MspInit+0x274>)
 8001f8c:	f006 f902 	bl	8008194 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2012      	movs	r0, #18
 8001f96:	f002 fe38 	bl	8004c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f9a:	2012      	movs	r0, #18
 8001f9c:	f002 fe4f 	bl	8004c3e <HAL_NVIC_EnableIRQ>
}
 8001fa0:	bf00      	nop
 8001fa2:	3740      	adds	r7, #64	@ 0x40
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	24001810 	.word	0x24001810
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	58020800 	.word	0x58020800
 8001fb8:	58020400 	.word	0x58020400
 8001fbc:	58021400 	.word	0x58021400
 8001fc0:	24000174 	.word	0x24000174
 8001fc4:	40020010 	.word	0x40020010
 8001fc8:	40022100 	.word	0x40022100

08001fcc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0ba      	sub	sp, #232	@ 0xe8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe4:	f107 0318 	add.w	r3, r7, #24
 8001fe8:	22b8      	movs	r2, #184	@ 0xb8
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00f fdf1 	bl	8011bd4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8002170 <HAL_FDCAN_MspInit+0x1a4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d157      	bne.n	80020ac <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ffc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200e:	f107 0318 	add.w	r3, r7, #24
 8002012:	4618      	mov	r0, r3
 8002014:	f007 fa38 	bl	8009488 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800201e:	f7ff fe73 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002022:	4b54      	ldr	r3, [pc, #336]	@ (8002174 <HAL_FDCAN_MspInit+0x1a8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	4a52      	ldr	r2, [pc, #328]	@ (8002174 <HAL_FDCAN_MspInit+0x1a8>)
 800202a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800202c:	4b51      	ldr	r3, [pc, #324]	@ (8002174 <HAL_FDCAN_MspInit+0x1a8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10e      	bne.n	8002052 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002034:	4b50      	ldr	r3, [pc, #320]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 8002036:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800203a:	4a4f      	ldr	r2, [pc, #316]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002040:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002044:	4b4c      	ldr	r3, [pc, #304]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 8002046:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002052:	4b49      	ldr	r3, [pc, #292]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002058:	4a47      	ldr	r2, [pc, #284]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002062:	4b45      	ldr	r3, [pc, #276]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002070:	2303      	movs	r3, #3
 8002072:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002088:	2309      	movs	r3, #9
 800208a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002092:	4619      	mov	r1, r3
 8002094:	4839      	ldr	r0, [pc, #228]	@ (800217c <HAL_FDCAN_MspInit+0x1b0>)
 8002096:	f006 f87d 	bl	8008194 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2101      	movs	r1, #1
 800209e:	2013      	movs	r0, #19
 80020a0:	f002 fdb3 	bl	8004c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80020a4:	2013      	movs	r0, #19
 80020a6:	f002 fdca 	bl	8004c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80020aa:	e05c      	b.n	8002166 <HAL_FDCAN_MspInit+0x19a>
  else if(hfdcan->Instance==FDCAN2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a33      	ldr	r2, [pc, #204]	@ (8002180 <HAL_FDCAN_MspInit+0x1b4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d157      	bne.n	8002166 <HAL_FDCAN_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	4618      	mov	r0, r3
 80020ce:	f007 f9db 	bl	8009488 <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80020d8:	f7ff fe16 	bl	8001d08 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020dc:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <HAL_FDCAN_MspInit+0x1a8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <HAL_FDCAN_MspInit+0x1a8>)
 80020e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80020e6:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_FDCAN_MspInit+0x1a8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10e      	bne.n	800210c <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 80020f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80020f4:	4a20      	ldr	r2, [pc, #128]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 8002100:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002112:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_FDCAN_MspInit+0x1ac>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800212a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800212e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002144:	2309      	movs	r3, #9
 8002146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800214e:	4619      	mov	r1, r3
 8002150:	480c      	ldr	r0, [pc, #48]	@ (8002184 <HAL_FDCAN_MspInit+0x1b8>)
 8002152:	f006 f81f 	bl	8008194 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2102      	movs	r1, #2
 800215a:	2014      	movs	r0, #20
 800215c:	f002 fd55 	bl	8004c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002160:	2014      	movs	r0, #20
 8002162:	f002 fd6c 	bl	8004c3e <HAL_NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	37e8      	adds	r7, #232	@ 0xe8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	4000a000 	.word	0x4000a000
 8002174:	24001814 	.word	0x24001814
 8002178:	58024400 	.word	0x58024400
 800217c:	58020c00 	.word	0x58020c00
 8002180:	4000a400 	.word	0x4000a400
 8002184:	58020400 	.word	0x58020400

08002188 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	@ 0x30
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3e      	ldr	r2, [pc, #248]	@ (80022a0 <HAL_SD_MspInit+0x118>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d175      	bne.n	8002296 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80021aa:	4b3e      	ldr	r3, [pc, #248]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021b0:	4a3c      	ldr	r2, [pc, #240]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80021ba:	4b3a      	ldr	r3, [pc, #232]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c8:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ce:	4a35      	ldr	r2, [pc, #212]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d8:	4b32      	ldr	r3, [pc, #200]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e6:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ec:	4a2d      	ldr	r2, [pc, #180]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f6:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 80021f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	4b27      	ldr	r3, [pc, #156]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220a:	4a26      	ldr	r2, [pc, #152]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002214:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <HAL_SD_MspInit+0x11c>)
 8002216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002222:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002226:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002234:	230c      	movs	r3, #12
 8002236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	481a      	ldr	r0, [pc, #104]	@ (80022a8 <HAL_SD_MspInit+0x120>)
 8002240:	f005 ffa8 	bl	8008194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002244:	2304      	movs	r3, #4
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002254:	230c      	movs	r3, #12
 8002256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	4813      	ldr	r0, [pc, #76]	@ (80022ac <HAL_SD_MspInit+0x124>)
 8002260:	f005 ff98 	bl	8008194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8002276:	2307      	movs	r3, #7
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	480b      	ldr	r0, [pc, #44]	@ (80022b0 <HAL_SD_MspInit+0x128>)
 8002282:	f005 ff87 	bl	8008194 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2031      	movs	r0, #49	@ 0x31
 800228c:	f002 fcbd 	bl	8004c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002290:	2031      	movs	r0, #49	@ 0x31
 8002292:	f002 fcd4 	bl	8004c3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002296:	bf00      	nop
 8002298:	3730      	adds	r7, #48	@ 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	52007000 	.word	0x52007000
 80022a4:	58024400 	.word	0x58024400
 80022a8:	58020800 	.word	0x58020800
 80022ac:	58020c00 	.word	0x58020c00
 80022b0:	58020400 	.word	0x58020400

080022b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	@ (8002328 <HAL_TIM_Base_MspInit+0x74>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10f      	bne.n	80022e6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022c6:	4b19      	ldr	r3, [pc, #100]	@ (800232c <HAL_TIM_Base_MspInit+0x78>)
 80022c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022cc:	4a17      	ldr	r2, [pc, #92]	@ (800232c <HAL_TIM_Base_MspInit+0x78>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022d6:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_TIM_Base_MspInit+0x78>)
 80022d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80022e4:	e01b      	b.n	800231e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a11      	ldr	r2, [pc, #68]	@ (8002330 <HAL_TIM_Base_MspInit+0x7c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d116      	bne.n	800231e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_TIM_Base_MspInit+0x78>)
 80022f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022f6:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_TIM_Base_MspInit+0x78>)
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002300:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_TIM_Base_MspInit+0x78>)
 8002302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2075      	movs	r0, #117	@ 0x75
 8002314:	f002 fc79 	bl	8004c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002318:	2075      	movs	r0, #117	@ 0x75
 800231a:	f002 fc90 	bl	8004c3e <HAL_NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000
 800232c:	58024400 	.word	0x58024400
 8002330:	40014400 	.word	0x40014400

08002334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <HAL_TIM_MspPostInit+0x6c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d11f      	bne.n	8002396 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002356:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_TIM_MspPostInit+0x70>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235c:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_TIM_MspPostInit+0x70>)
 800235e:	f043 0310 	orr.w	r3, r3, #16
 8002362:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002366:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_TIM_MspPostInit+0x70>)
 8002368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002374:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002378:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002386:	2301      	movs	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <HAL_TIM_MspPostInit+0x74>)
 8002392:	f005 feff 	bl	8008194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000
 80023a4:	58024400 	.word	0x58024400
 80023a8:	58021000 	.word	0x58021000

080023ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b0ba      	sub	sp, #232	@ 0xe8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c4:	f107 0318 	add.w	r3, r7, #24
 80023c8:	22b8      	movs	r2, #184	@ 0xb8
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f00f fc01 	bl	8011bd4 <memset>
  if(huart->Instance==USART1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a4d      	ldr	r2, [pc, #308]	@ (800250c <HAL_UART_MspInit+0x160>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d147      	bne.n	800246c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023dc:	f04f 0201 	mov.w	r2, #1
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ee:	f107 0318 	add.w	r3, r7, #24
 80023f2:	4618      	mov	r0, r3
 80023f4:	f007 f848 	bl	8009488 <HAL_RCCEx_PeriphCLKConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023fe:	f7ff fc83 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002402:	4b43      	ldr	r3, [pc, #268]	@ (8002510 <HAL_UART_MspInit+0x164>)
 8002404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002408:	4a41      	ldr	r2, [pc, #260]	@ (8002510 <HAL_UART_MspInit+0x164>)
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002412:	4b3f      	ldr	r3, [pc, #252]	@ (8002510 <HAL_UART_MspInit+0x164>)
 8002414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002420:	4b3b      	ldr	r3, [pc, #236]	@ (8002510 <HAL_UART_MspInit+0x164>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	4a3a      	ldr	r2, [pc, #232]	@ (8002510 <HAL_UART_MspInit+0x164>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002430:	4b37      	ldr	r3, [pc, #220]	@ (8002510 <HAL_UART_MspInit+0x164>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 800243e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002442:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002458:	2307      	movs	r3, #7
 800245a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002462:	4619      	mov	r1, r3
 8002464:	482b      	ldr	r0, [pc, #172]	@ (8002514 <HAL_UART_MspInit+0x168>)
 8002466:	f005 fe95 	bl	8008194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800246a:	e04a      	b.n	8002502 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a29      	ldr	r2, [pc, #164]	@ (8002518 <HAL_UART_MspInit+0x16c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d145      	bne.n	8002502 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002476:	f04f 0202 	mov.w	r2, #2
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	4618      	mov	r0, r3
 800248e:	f006 fffb 	bl	8009488 <HAL_RCCEx_PeriphCLKConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002498:	f7ff fc36 	bl	8001d08 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800249c:	4b1c      	ldr	r3, [pc, #112]	@ (8002510 <HAL_UART_MspInit+0x164>)
 800249e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024ac:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c0:	4a13      	ldr	r2, [pc, #76]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_UART_MspInit+0x164>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024d8:	230c      	movs	r3, #12
 80024da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f0:	2307      	movs	r3, #7
 80024f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	@ (8002514 <HAL_UART_MspInit+0x168>)
 80024fe:	f005 fe49 	bl	8008194 <HAL_GPIO_Init>
}
 8002502:	bf00      	nop
 8002504:	37e8      	adds	r7, #232	@ 0xe8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40011000 	.word	0x40011000
 8002510:	58024400 	.word	0x58024400
 8002514:	58020000 	.word	0x58020000
 8002518:	40004400 	.word	0x40004400

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <NMI_Handler+0x4>

08002524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <MemManage_Handler+0x4>

08002534 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <UsageFault_Handler+0x4>

08002544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002572:	f000 f98d 	bl	8002890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <DMA1_Stream0_IRQHandler+0x10>)
 8002582:	f003 f939 	bl	80057f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	24000174 	.word	0x24000174

08002590 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002594:	4803      	ldr	r0, [pc, #12]	@ (80025a4 <ADC_IRQHandler+0x14>)
 8002596:	f000 ff8f 	bl	80034b8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800259a:	4803      	ldr	r0, [pc, #12]	@ (80025a8 <ADC_IRQHandler+0x18>)
 800259c:	f000 ff8c 	bl	80034b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	24000094 	.word	0x24000094
 80025a8:	24000104 	.word	0x24000104

080025ac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <FDCAN1_IT0_IRQHandler+0x10>)
 80025b2:	f005 f8f3 	bl	800779c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	240001ec 	.word	0x240001ec

080025c0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <FDCAN2_IT0_IRQHandler+0x10>)
 80025c6:	f005 f8e9 	bl	800779c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2400028c 	.word	0x2400028c

080025d4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <SDMMC1_IRQHandler+0x10>)
 80025da:	f009 fdab 	bl	800c134 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	2400032c 	.word	0x2400032c

080025e8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025ec:	4802      	ldr	r0, [pc, #8]	@ (80025f8 <TIM16_IRQHandler+0x10>)
 80025ee:	f00b f8d4 	bl	800d79a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	240003f4 	.word	0x240003f4

080025fc <_sbrk>:
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	4a14      	ldr	r2, [pc, #80]	@ (8002658 <_sbrk+0x5c>)
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <_sbrk+0x60>)
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	4b13      	ldr	r3, [pc, #76]	@ (8002660 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <_sbrk+0x22>
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <_sbrk+0x64>)
 800261a:	4a12      	ldr	r2, [pc, #72]	@ (8002664 <_sbrk+0x68>)
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	429a      	cmp	r2, r3
 800262a:	d207      	bcs.n	800263c <_sbrk+0x40>
 800262c:	f00f fada 	bl	8011be4 <__errno>
 8002630:	4603      	mov	r3, r0
 8002632:	220c      	movs	r2, #12
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800263a:	e009      	b.n	8002650 <_sbrk+0x54>
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b07      	ldr	r3, [pc, #28]	@ (8002660 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	4a05      	ldr	r2, [pc, #20]	@ (8002660 <_sbrk+0x64>)
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	24050000 	.word	0x24050000
 800265c:	00000400 	.word	0x00000400
 8002660:	24001818 	.word	0x24001818
 8002664:	24001bb0 	.word	0x24001bb0

08002668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800266c:	4b32      	ldr	r3, [pc, #200]	@ (8002738 <SystemInit+0xd0>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002672:	4a31      	ldr	r2, [pc, #196]	@ (8002738 <SystemInit+0xd0>)
 8002674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800267c:	4b2f      	ldr	r3, [pc, #188]	@ (800273c <SystemInit+0xd4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	2b06      	cmp	r3, #6
 8002686:	d807      	bhi.n	8002698 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002688:	4b2c      	ldr	r3, [pc, #176]	@ (800273c <SystemInit+0xd4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 030f 	bic.w	r3, r3, #15
 8002690:	4a2a      	ldr	r2, [pc, #168]	@ (800273c <SystemInit+0xd4>)
 8002692:	f043 0307 	orr.w	r3, r3, #7
 8002696:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002698:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <SystemInit+0xd8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a28      	ldr	r2, [pc, #160]	@ (8002740 <SystemInit+0xd8>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026a4:	4b26      	ldr	r3, [pc, #152]	@ (8002740 <SystemInit+0xd8>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026aa:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <SystemInit+0xd8>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4924      	ldr	r1, [pc, #144]	@ (8002740 <SystemInit+0xd8>)
 80026b0:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <SystemInit+0xdc>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <SystemInit+0xd4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026c2:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <SystemInit+0xd4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 030f 	bic.w	r3, r3, #15
 80026ca:	4a1c      	ldr	r2, [pc, #112]	@ (800273c <SystemInit+0xd4>)
 80026cc:	f043 0307 	orr.w	r3, r3, #7
 80026d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <SystemInit+0xd8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <SystemInit+0xd8>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026de:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <SystemInit+0xd8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026e4:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <SystemInit+0xd8>)
 80026e6:	4a18      	ldr	r2, [pc, #96]	@ (8002748 <SystemInit+0xe0>)
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <SystemInit+0xd8>)
 80026ec:	4a17      	ldr	r2, [pc, #92]	@ (800274c <SystemInit+0xe4>)
 80026ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <SystemInit+0xd8>)
 80026f2:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <SystemInit+0xe8>)
 80026f4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026f6:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <SystemInit+0xd8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <SystemInit+0xd8>)
 80026fe:	4a14      	ldr	r2, [pc, #80]	@ (8002750 <SystemInit+0xe8>)
 8002700:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002702:	4b0f      	ldr	r3, [pc, #60]	@ (8002740 <SystemInit+0xd8>)
 8002704:	2200      	movs	r2, #0
 8002706:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002708:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <SystemInit+0xd8>)
 800270a:	4a11      	ldr	r2, [pc, #68]	@ (8002750 <SystemInit+0xe8>)
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800270e:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <SystemInit+0xd8>)
 8002710:	2200      	movs	r2, #0
 8002712:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002714:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <SystemInit+0xd8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a09      	ldr	r2, [pc, #36]	@ (8002740 <SystemInit+0xd8>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800271e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002720:	4b07      	ldr	r3, [pc, #28]	@ (8002740 <SystemInit+0xd8>)
 8002722:	2200      	movs	r2, #0
 8002724:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002726:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <SystemInit+0xec>)
 8002728:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800272c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00
 800273c:	52002000 	.word	0x52002000
 8002740:	58024400 	.word	0x58024400
 8002744:	eaf6ed7f 	.word	0xeaf6ed7f
 8002748:	02020200 	.word	0x02020200
 800274c:	01ff0000 	.word	0x01ff0000
 8002750:	01010280 	.word	0x01010280
 8002754:	52004000 	.word	0x52004000

08002758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002790 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800275c:	f7ff ff84 	bl	8002668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002760:	480c      	ldr	r0, [pc, #48]	@ (8002794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002762:	490d      	ldr	r1, [pc, #52]	@ (8002798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002764:	4a0d      	ldr	r2, [pc, #52]	@ (800279c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002778:	4c0a      	ldr	r4, [pc, #40]	@ (80027a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002786:	f00f fa33 	bl	8011bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278a:	f7fd fff3 	bl	8000774 <main>
  bx  lr
 800278e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002790:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002794:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002798:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 800279c:	080129cc 	.word	0x080129cc
  ldr r2, =_sbss
 80027a0:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80027a4:	24001bb0 	.word	0x24001bb0

080027a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC3_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b2:	2003      	movs	r0, #3
 80027b4:	f002 fa1e 	bl	8004bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027b8:	f006 fc90 	bl	80090dc <HAL_RCC_GetSysClockFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_Init+0x68>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	4913      	ldr	r1, [pc, #76]	@ (8002818 <HAL_Init+0x6c>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
 80027d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <HAL_Init+0x68>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	4a0e      	ldr	r2, [pc, #56]	@ (8002818 <HAL_Init+0x6c>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ec:	4a0b      	ldr	r2, [pc, #44]	@ (800281c <HAL_Init+0x70>)
 80027ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002820 <HAL_Init+0x74>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027f6:	200f      	movs	r0, #15
 80027f8:	f000 f814 	bl	8002824 <HAL_InitTick>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e002      	b.n	800280c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002806:	f7ff fa85 	bl	8001d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	58024400 	.word	0x58024400
 8002818:	08012924 	.word	0x08012924
 800281c:	24000014 	.word	0x24000014
 8002820:	24000010 	.word	0x24000010

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800282c:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_InitTick+0x60>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e021      	b.n	800287c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002838:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <HAL_InitTick+0x64>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_InitTick+0x60>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002846:	fbb3 f3f1 	udiv	r3, r3, r1
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fa03 	bl	8004c5a <HAL_SYSTICK_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e00e      	b.n	800287c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b0f      	cmp	r3, #15
 8002862:	d80a      	bhi.n	800287a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002864:	2200      	movs	r2, #0
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800286c:	f002 f9cd 	bl	8004c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002870:	4a06      	ldr	r2, [pc, #24]	@ (800288c <HAL_InitTick+0x68>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	2400001c 	.word	0x2400001c
 8002888:	24000010 	.word	0x24000010
 800288c:	24000018 	.word	0x24000018

08002890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_IncTick+0x20>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_IncTick+0x24>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <HAL_IncTick+0x24>)
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	2400001c 	.word	0x2400001c
 80028b4:	2400181c 	.word	0x2400181c

080028b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b03      	ldr	r3, [pc, #12]	@ (80028cc <HAL_GetTick+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	2400181c 	.word	0x2400181c

080028d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff ffee 	bl	80028b8 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028e8:	d005      	beq.n	80028f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <HAL_Delay+0x44>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f6:	bf00      	nop
 80028f8:	f7ff ffde 	bl	80028b8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d8f7      	bhi.n	80028f8 <HAL_Delay+0x28>
  {
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2400001c 	.word	0x2400001c

08002918 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	609a      	str	r2, [r3, #8]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3360      	adds	r3, #96	@ 0x60
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a10      	ldr	r2, [pc, #64]	@ (80029e0 <LL_ADC_SetOffset+0x60>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10b      	bne.n	80029bc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029ba:	e00b      	b.n	80029d4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	431a      	orrs	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	601a      	str	r2, [r3, #0]
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	58026000 	.word	0x58026000

080029e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3360      	adds	r3, #96	@ 0x60
 80029f2:	461a      	mov	r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	611a      	str	r2, [r3, #16]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	@ (8002a84 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00e      	beq.n	8002a76 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3360      	adds	r3, #96	@ 0x60
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	601a      	str	r2, [r3, #0]
  }
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	58026000 	.word	0x58026000

08002a88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac8 <LL_ADC_SetOffsetSaturation+0x40>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d10e      	bne.n	8002aba <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3360      	adds	r3, #96	@ 0x60
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	58026000 	.word	0x58026000

08002acc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <LL_ADC_SetOffsetSign+0x40>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10e      	bne.n	8002afe <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3360      	adds	r3, #96	@ 0x60
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	58026000 	.word	0x58026000

08002b10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3360      	adds	r3, #96	@ 0x60
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b60 <LL_ADC_SetOffsetState+0x50>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002b42:	e007      	b.n	8002b54 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	601a      	str	r2, [r3, #0]
}
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	58026000 	.word	0x58026000

08002b64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3330      	adds	r3, #48	@ 0x30
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	211f      	movs	r1, #31
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 011f 	and.w	r1, r3, #31
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f023 0203 	bic.w	r2, r3, #3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60da      	str	r2, [r3, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a08      	ldr	r2, [pc, #32]	@ (8002c58 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d107      	bne.n	8002c4a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60da      	str	r2, [r3, #12]
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	58026000 	.word	0x58026000

08002c5c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c68:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b087      	sub	sp, #28
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3314      	adds	r3, #20
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	0e5b      	lsrs	r3, r3, #25
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	0d1b      	lsrs	r3, r3, #20
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2107      	movs	r1, #7
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0d1b      	lsrs	r3, r3, #20
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d50 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d115      	bne.n	8002d18 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0318 	and.w	r3, r3, #24
 8002d02:	4914      	ldr	r1, [pc, #80]	@ (8002d54 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d04:	40d9      	lsrs	r1, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	400b      	ands	r3, r1
 8002d0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d16:	e014      	b.n	8002d42 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d24:	43db      	mvns	r3, r3
 8002d26:	401a      	ands	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0318 	and.w	r3, r3, #24
 8002d2e:	4909      	ldr	r1, [pc, #36]	@ (8002d54 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d30:	40d9      	lsrs	r1, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	400b      	ands	r3, r1
 8002d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	58026000 	.word	0x58026000
 8002d54:	000fffff 	.word	0x000fffff

08002d58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 031f 	and.w	r3, r3, #31
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6093      	str	r3, [r2, #8]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	5fffffc0 	.word	0x5fffffc0

08002db4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dc8:	d101      	bne.n	8002dce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <LL_ADC_EnableInternalRegulator+0x24>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	6fffffc0 	.word	0x6fffffc0

08002e04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e18:	d101      	bne.n	8002e1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <LL_ADC_Enable+0x24>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	7fffffc0 	.word	0x7fffffc0

08002e54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <LL_ADC_IsEnabled+0x18>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <LL_ADC_IsEnabled+0x1a>
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <LL_ADC_REG_StartConversion+0x24>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	7fffffc0 	.word	0x7fffffc0

08002ea4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d101      	bne.n	8002ee2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b089      	sub	sp, #36	@ 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e1ee      	b.n	80032e8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe ff15 	bl	8001d48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff3f 	bl	8002db4 <LL_ADC_IsDeepPowerDownEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff25 	bl	8002d90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff5a 	bl	8002e04 <LL_ADC_IsInternalRegulatorEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d114      	bne.n	8002f80 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff3e 	bl	8002ddc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f60:	4b8e      	ldr	r3, [pc, #568]	@ (800319c <HAL_ADC_Init+0x2ac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	4a8e      	ldr	r2, [pc, #568]	@ (80031a0 <HAL_ADC_Init+0x2b0>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f72:	e002      	b.n	8002f7a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f9      	bne.n	8002f74 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff3d 	bl	8002e04 <LL_ADC_IsInternalRegulatorEnabled>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f94:	f043 0210 	orr.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff77 	bl	8002ea4 <LL_ADC_REG_IsConversionOngoing>
 8002fb6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 8188 	bne.w	80032d6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f040 8184 	bne.w	80032d6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff36 	bl	8002e54 <LL_ADC_IsEnabled>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d136      	bne.n	800305c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a6c      	ldr	r2, [pc, #432]	@ (80031a4 <HAL_ADC_Init+0x2b4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_Init+0x112>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80031a8 <HAL_ADC_Init+0x2b8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10e      	bne.n	8003020 <HAL_ADC_Init+0x130>
 8003002:	4868      	ldr	r0, [pc, #416]	@ (80031a4 <HAL_ADC_Init+0x2b4>)
 8003004:	f7ff ff26 	bl	8002e54 <LL_ADC_IsEnabled>
 8003008:	4604      	mov	r4, r0
 800300a:	4867      	ldr	r0, [pc, #412]	@ (80031a8 <HAL_ADC_Init+0x2b8>)
 800300c:	f7ff ff22 	bl	8002e54 <LL_ADC_IsEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	4323      	orrs	r3, r4
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e008      	b.n	8003032 <HAL_ADC_Init+0x142>
 8003020:	4862      	ldr	r0, [pc, #392]	@ (80031ac <HAL_ADC_Init+0x2bc>)
 8003022:	f7ff ff17 	bl	8002e54 <LL_ADC_IsEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d012      	beq.n	800305c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5a      	ldr	r2, [pc, #360]	@ (80031a4 <HAL_ADC_Init+0x2b4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_ADC_Init+0x15a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a58      	ldr	r2, [pc, #352]	@ (80031a8 <HAL_ADC_Init+0x2b8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <HAL_ADC_Init+0x15e>
 800304a:	4a59      	ldr	r2, [pc, #356]	@ (80031b0 <HAL_ADC_Init+0x2c0>)
 800304c:	e000      	b.n	8003050 <HAL_ADC_Init+0x160>
 800304e:	4a59      	ldr	r2, [pc, #356]	@ (80031b4 <HAL_ADC_Init+0x2c4>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7ff fc5e 	bl	8002918 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a52      	ldr	r2, [pc, #328]	@ (80031ac <HAL_ADC_Init+0x2bc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d129      	bne.n	80030ba <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7e5b      	ldrb	r3, [r3, #25]
 800306a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003070:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003076:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d013      	beq.n	80030a8 <HAL_ADC_Init+0x1b8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d00d      	beq.n	80030a4 <HAL_ADC_Init+0x1b4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b1c      	cmp	r3, #28
 800308e:	d007      	beq.n	80030a0 <HAL_ADC_Init+0x1b0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b18      	cmp	r3, #24
 8003096:	d101      	bne.n	800309c <HAL_ADC_Init+0x1ac>
 8003098:	2318      	movs	r3, #24
 800309a:	e006      	b.n	80030aa <HAL_ADC_Init+0x1ba>
 800309c:	2300      	movs	r3, #0
 800309e:	e004      	b.n	80030aa <HAL_ADC_Init+0x1ba>
 80030a0:	2310      	movs	r3, #16
 80030a2:	e002      	b.n	80030aa <HAL_ADC_Init+0x1ba>
 80030a4:	2308      	movs	r3, #8
 80030a6:	e000      	b.n	80030aa <HAL_ADC_Init+0x1ba>
 80030a8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80030aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	e00e      	b.n	80030d8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7e5b      	ldrb	r3, [r3, #25]
 80030be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d106      	bne.n	80030f0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	3b01      	subs	r3, #1
 80030e8:	045b      	lsls	r3, r3, #17
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a26      	ldr	r2, [pc, #152]	@ (80031ac <HAL_ADC_Init+0x2bc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d115      	bne.n	8003142 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	4b26      	ldr	r3, [pc, #152]	@ (80031b8 <HAL_ADC_Init+0x2c8>)
 800311e:	4013      	ands	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	69b9      	ldr	r1, [r7, #24]
 8003126:	430b      	orrs	r3, r1
 8003128:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	611a      	str	r2, [r3, #16]
 8003140:	e009      	b.n	8003156 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	4b1c      	ldr	r3, [pc, #112]	@ (80031bc <HAL_ADC_Init+0x2cc>)
 800314a:	4013      	ands	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	69b9      	ldr	r1, [r7, #24]
 8003152:	430b      	orrs	r3, r1
 8003154:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fea2 	bl	8002ea4 <LL_ADC_REG_IsConversionOngoing>
 8003160:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff feaf 	bl	8002eca <LL_ADC_INJ_IsConversionOngoing>
 800316c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 808e 	bne.w	8003292 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f040 808a 	bne.w	8003292 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <HAL_ADC_Init+0x2bc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d11b      	bne.n	80031c0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7e1b      	ldrb	r3, [r3, #24]
 800318c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003194:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e018      	b.n	80031ce <HAL_ADC_Init+0x2de>
 800319c:	24000010 	.word	0x24000010
 80031a0:	053e2d63 	.word	0x053e2d63
 80031a4:	40022000 	.word	0x40022000
 80031a8:	40022100 	.word	0x40022100
 80031ac:	58026000 	.word	0x58026000
 80031b0:	40022300 	.word	0x40022300
 80031b4:	58026300 	.word	0x58026300
 80031b8:	fff04007 	.word	0xfff04007
 80031bc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7e1b      	ldrb	r3, [r3, #24]
 80031c4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b46      	ldr	r3, [pc, #280]	@ (80032f0 <HAL_ADC_Init+0x400>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	69b9      	ldr	r1, [r7, #24]
 80031de:	430b      	orrs	r3, r1
 80031e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d137      	bne.n	800325c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a3f      	ldr	r2, [pc, #252]	@ (80032f4 <HAL_ADC_Init+0x404>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d116      	bne.n	800322a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	4b3d      	ldr	r3, [pc, #244]	@ (80032f8 <HAL_ADC_Init+0x408>)
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003214:	4311      	orrs	r1, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800321a:	430a      	orrs	r2, r1
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	611a      	str	r2, [r3, #16]
 8003228:	e020      	b.n	800326c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <HAL_ADC_Init+0x40c>)
 8003232:	4013      	ands	r3, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003238:	3a01      	subs	r2, #1
 800323a:	0411      	lsls	r1, r2, #16
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003240:	4311      	orrs	r1, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800324c:	430a      	orrs	r2, r1
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	611a      	str	r2, [r3, #16]
 800325a:	e007      	b.n	800326c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_ADC_Init+0x404>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d002      	beq.n	8003292 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f001 f9b9 	bl	8004604 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10c      	bne.n	80032b4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	f023 010f 	bic.w	r1, r3, #15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80032b2:	e007      	b.n	80032c4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 020f 	bic.w	r2, r2, #15
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c8:	f023 0303 	bic.w	r3, r3, #3
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80032d4:	e007      	b.n	80032e6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032da:	f043 0210 	orr.w	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3724      	adds	r7, #36	@ 0x24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}
 80032f0:	ffffbffc 	.word	0xffffbffc
 80032f4:	58026000 	.word	0x58026000
 80032f8:	fc00f81f 	.word	0xfc00f81f
 80032fc:	fc00f81e 	.word	0xfc00f81e

08003300 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a60      	ldr	r2, [pc, #384]	@ (8003494 <HAL_ADC_Start_DMA+0x194>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_ADC_Start_DMA+0x20>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5f      	ldr	r2, [pc, #380]	@ (8003498 <HAL_ADC_Start_DMA+0x198>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_ADC_Start_DMA+0x24>
 8003320:	4b5e      	ldr	r3, [pc, #376]	@ (800349c <HAL_ADC_Start_DMA+0x19c>)
 8003322:	e000      	b.n	8003326 <HAL_ADC_Start_DMA+0x26>
 8003324:	4b5e      	ldr	r3, [pc, #376]	@ (80034a0 <HAL_ADC_Start_DMA+0x1a0>)
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fd16 	bl	8002d58 <LL_ADC_GetMultimode>
 800332c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fdb6 	bl	8002ea4 <LL_ADC_REG_IsConversionOngoing>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 80a2 	bne.w	8003484 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_ADC_Start_DMA+0x4e>
 800334a:	2302      	movs	r3, #2
 800334c:	e09d      	b.n	800348a <HAL_ADC_Start_DMA+0x18a>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b05      	cmp	r3, #5
 8003360:	d003      	beq.n	800336a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b09      	cmp	r3, #9
 8003366:	f040 8086 	bne.w	8003476 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f001 f82c 	bl	80043c8 <ADC_Enable>
 8003370:	4603      	mov	r3, r0
 8003372:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d178      	bne.n	800346c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800337e:	4b49      	ldr	r3, [pc, #292]	@ (80034a4 <HAL_ADC_Start_DMA+0x1a4>)
 8003380:	4013      	ands	r3, r2
 8003382:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a42      	ldr	r2, [pc, #264]	@ (8003498 <HAL_ADC_Start_DMA+0x198>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d002      	beq.n	800339a <HAL_ADC_Start_DMA+0x9a>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	e000      	b.n	800339c <HAL_ADC_Start_DMA+0x9c>
 800339a:	4b3e      	ldr	r3, [pc, #248]	@ (8003494 <HAL_ADC_Start_DMA+0x194>)
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d002      	beq.n	80033aa <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d105      	bne.n	80033b6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d006      	beq.n	80033d0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033c6:	f023 0206 	bic.w	r2, r3, #6
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	665a      	str	r2, [r3, #100]	@ 0x64
 80033ce:	e002      	b.n	80033d6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	4a33      	ldr	r2, [pc, #204]	@ (80034a8 <HAL_ADC_Start_DMA+0x1a8>)
 80033dc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e2:	4a32      	ldr	r2, [pc, #200]	@ (80034ac <HAL_ADC_Start_DMA+0x1ac>)
 80033e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	4a31      	ldr	r2, [pc, #196]	@ (80034b0 <HAL_ADC_Start_DMA+0x1b0>)
 80033ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	221c      	movs	r2, #28
 80033f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0210 	orr.w	r2, r2, #16
 800340c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a28      	ldr	r2, [pc, #160]	@ (80034b4 <HAL_ADC_Start_DMA+0x1b4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10f      	bne.n	8003438 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f7ff fbfe 	bl	8002c28 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fbe9 	bl	8002c08 <LL_ADC_EnableDMAReq>
 8003436:	e007      	b.n	8003448 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7ff fbcd 	bl	8002be2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3340      	adds	r3, #64	@ 0x40
 8003452:	4619      	mov	r1, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f001 ff64 	bl	8005324 <HAL_DMA_Start_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fd09 	bl	8002e7c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800346a:	e00d      	b.n	8003488 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003474:	e008      	b.n	8003488 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003482:	e001      	b.n	8003488 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003484:	2302      	movs	r3, #2
 8003486:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003488:	7dfb      	ldrb	r3, [r7, #23]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40022000 	.word	0x40022000
 8003498:	40022100 	.word	0x40022100
 800349c:	40022300 	.word	0x40022300
 80034a0:	58026300 	.word	0x58026300
 80034a4:	fffff0fe 	.word	0xfffff0fe
 80034a8:	080044dd 	.word	0x080044dd
 80034ac:	080045b5 	.word	0x080045b5
 80034b0:	080045d1 	.word	0x080045d1
 80034b4:	58026000 	.word	0x58026000

080034b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a87      	ldr	r2, [pc, #540]	@ (80036f8 <HAL_ADC_IRQHandler+0x240>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x30>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a86      	ldr	r2, [pc, #536]	@ (80036fc <HAL_ADC_IRQHandler+0x244>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_IRQHandler+0x34>
 80034e8:	4b85      	ldr	r3, [pc, #532]	@ (8003700 <HAL_ADC_IRQHandler+0x248>)
 80034ea:	e000      	b.n	80034ee <HAL_ADC_IRQHandler+0x36>
 80034ec:	4b85      	ldr	r3, [pc, #532]	@ (8003704 <HAL_ADC_IRQHandler+0x24c>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fc32 	bl	8002d58 <LL_ADC_GetMultimode>
 80034f4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <HAL_ADC_IRQHandler+0x78>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d012      	beq.n	8003530 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f001 f9aa 	bl	800487c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2202      	movs	r2, #2
 800352e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d004      	beq.n	8003544 <HAL_ADC_IRQHandler+0x8c>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8083 	beq.w	8003656 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d07d      	beq.n	8003656 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff faf4 	bl	8002b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d062      	beq.n	8003648 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5d      	ldr	r2, [pc, #372]	@ (80036fc <HAL_ADC_IRQHandler+0x244>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d002      	beq.n	8003592 <HAL_ADC_IRQHandler+0xda>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	e000      	b.n	8003594 <HAL_ADC_IRQHandler+0xdc>
 8003592:	4b59      	ldr	r3, [pc, #356]	@ (80036f8 <HAL_ADC_IRQHandler+0x240>)
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	4293      	cmp	r3, r2
 800359a:	d008      	beq.n	80035ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d002      	beq.n	80035ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b09      	cmp	r3, #9
 80035ac:	d104      	bne.n	80035b8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	623b      	str	r3, [r7, #32]
 80035b6:	e00c      	b.n	80035d2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a4f      	ldr	r2, [pc, #316]	@ (80036fc <HAL_ADC_IRQHandler+0x244>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d002      	beq.n	80035c8 <HAL_ADC_IRQHandler+0x110>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	e000      	b.n	80035ca <HAL_ADC_IRQHandler+0x112>
 80035c8:	4b4b      	ldr	r3, [pc, #300]	@ (80036f8 <HAL_ADC_IRQHandler+0x240>)
 80035ca:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d135      	bne.n	8003648 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d12e      	bne.n	8003648 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fc58 	bl	8002ea4 <LL_ADC_REG_IsConversionOngoing>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d11a      	bne.n	8003630 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 020c 	bic.w	r2, r2, #12
 8003608:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d112      	bne.n	8003648 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	661a      	str	r2, [r3, #96]	@ 0x60
 800362e:	e00b      	b.n	8003648 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003634:	f043 0210 	orr.w	r2, r3, #16
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd ff8b 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	220c      	movs	r2, #12
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <HAL_ADC_IRQHandler+0x1b2>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80a0 	beq.w	80037b6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 809a 	beq.w	80037b6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003692:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fadc 	bl	8002c5c <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036a4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fa5a 	bl	8002b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036b0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a11      	ldr	r2, [pc, #68]	@ (80036fc <HAL_ADC_IRQHandler+0x244>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d002      	beq.n	80036c2 <HAL_ADC_IRQHandler+0x20a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e000      	b.n	80036c4 <HAL_ADC_IRQHandler+0x20c>
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <HAL_ADC_IRQHandler+0x240>)
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d008      	beq.n	80036de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d002      	beq.n	80036de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b07      	cmp	r3, #7
 80036dc:	d104      	bne.n	80036e8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	e014      	b.n	8003712 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a03      	ldr	r2, [pc, #12]	@ (80036fc <HAL_ADC_IRQHandler+0x244>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00a      	beq.n	8003708 <HAL_ADC_IRQHandler+0x250>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	e008      	b.n	800370a <HAL_ADC_IRQHandler+0x252>
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40022100 	.word	0x40022100
 8003700:	40022300 	.word	0x40022300
 8003704:	58026300 	.word	0x58026300
 8003708:	4b84      	ldr	r3, [pc, #528]	@ (800391c <HAL_ADC_IRQHandler+0x464>)
 800370a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d047      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_ADC_IRQHandler+0x27a>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03f      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800372e:	2b00      	cmp	r3, #0
 8003730:	d13a      	bne.n	80037a8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d133      	bne.n	80037a8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d12e      	bne.n	80037a8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fbbb 	bl	8002eca <LL_ADC_INJ_IsConversionOngoing>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11a      	bne.n	8003790 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003768:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d112      	bne.n	80037a8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	661a      	str	r2, [r3, #96]	@ 0x60
 800378e:	e00b      	b.n	80037a8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	f043 0210 	orr.w	r2, r3, #16
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037a0:	f043 0201 	orr.w	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f001 f83f 	bl	800482c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2260      	movs	r2, #96	@ 0x60
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d011      	beq.n	80037e4 <HAL_ADC_IRQHandler+0x32c>
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00c      	beq.n	80037e4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8b2 	bl	8003940 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2280      	movs	r2, #128	@ 0x80
 80037e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d012      	beq.n	8003814 <HAL_ADC_IRQHandler+0x35c>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f001 f825 	bl	8004854 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003812:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381a:	2b00      	cmp	r3, #0
 800381c:	d012      	beq.n	8003844 <HAL_ADC_IRQHandler+0x38c>
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f001 f817 	bl	8004868 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d043      	beq.n	80038d6 <HAL_ADC_IRQHandler+0x41e>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d03e      	beq.n	80038d6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003860:	2301      	movs	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
 8003864:	e021      	b.n	80038aa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2a      	ldr	r2, [pc, #168]	@ (800391c <HAL_ADC_IRQHandler+0x464>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_ADC_IRQHandler+0x3c8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a29      	ldr	r2, [pc, #164]	@ (8003920 <HAL_ADC_IRQHandler+0x468>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_ADC_IRQHandler+0x3cc>
 8003880:	4b28      	ldr	r3, [pc, #160]	@ (8003924 <HAL_ADC_IRQHandler+0x46c>)
 8003882:	e000      	b.n	8003886 <HAL_ADC_IRQHandler+0x3ce>
 8003884:	4b28      	ldr	r3, [pc, #160]	@ (8003928 <HAL_ADC_IRQHandler+0x470>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fa74 	bl	8002d74 <LL_ADC_GetMultiDMATransfer>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003892:	2301      	movs	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
 8003896:	e008      	b.n	80038aa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038a6:	2301      	movs	r3, #1
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d10e      	bne.n	80038ce <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c0:	f043 0202 	orr.w	r2, r3, #2
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f843 	bl	8003954 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2210      	movs	r2, #16
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d018      	beq.n	8003912 <HAL_ADC_IRQHandler+0x45a>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d013      	beq.n	8003912 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038fa:	f043 0208 	orr.w	r2, r3, #8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800390a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 ff97 	bl	8004840 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003912:	bf00      	nop
 8003914:	3728      	adds	r7, #40	@ 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40022000 	.word	0x40022000
 8003920:	40022100 	.word	0x40022100
 8003924:	40022300 	.word	0x40022300
 8003928:	58026300 	.word	0x58026300

0800392c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b0b9      	sub	sp, #228	@ 0xe4
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003982:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4aab      	ldr	r2, [pc, #684]	@ (8003c38 <HAL_ADC_ConfigChannel+0x2d0>)
 800398a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_ADC_ConfigChannel+0x34>
 8003996:	2302      	movs	r3, #2
 8003998:	f000 bcfe 	b.w	8004398 <HAL_ADC_ConfigChannel+0xa30>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fa7b 	bl	8002ea4 <LL_ADC_REG_IsConversionOngoing>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f040 84e2 	bne.w	800437a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	db38      	blt.n	8003a30 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a9e      	ldr	r2, [pc, #632]	@ (8003c3c <HAL_ADC_ConfigChannel+0x2d4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d033      	beq.n	8003a30 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d108      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x7e>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0e9b      	lsrs	r3, r3, #26
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2201      	movs	r2, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	e01d      	b.n	8003a22 <HAL_ADC_ConfigChannel+0xba>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	e004      	b.n	8003a18 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	69d1      	ldr	r1, [r2, #28]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f7ff f8a4 	bl	8002b8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fa2c 	bl	8002ea4 <LL_ADC_REG_IsConversionOngoing>
 8003a4c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fa38 	bl	8002eca <LL_ADC_INJ_IsConversionOngoing>
 8003a5a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 8270 	bne.w	8003f48 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 826b 	bne.w	8003f48 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f7ff f8ff 	bl	8002c82 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6c      	ldr	r2, [pc, #432]	@ (8003c3c <HAL_ADC_ConfigChannel+0x2d4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	08db      	lsrs	r3, r3, #3
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003aa8:	e032      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003aaa:	4b65      	ldr	r3, [pc, #404]	@ (8003c40 <HAL_ADC_ConfigChannel+0x2d8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x168>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	e01d      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x1a4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x18e>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	089b      	lsrs	r3, r3, #2
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	e00a      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x1a4>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	089b      	lsrs	r3, r3, #2
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d048      	beq.n	8003baa <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6919      	ldr	r1, [r3, #16]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b28:	f7fe ff2a 	bl	8002980 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a42      	ldr	r2, [pc, #264]	@ (8003c3c <HAL_ADC_ConfigChannel+0x2d4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d119      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6919      	ldr	r1, [r3, #16]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fe ffc2 	bl	8002acc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6919      	ldr	r1, [r3, #16]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d102      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x1f8>
 8003b5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b5e:	e000      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x1fa>
 8003b60:	2300      	movs	r3, #0
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fe ff90 	bl	8002a88 <LL_ADC_SetOffsetSaturation>
 8003b68:	e1ee      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6919      	ldr	r1, [r3, #16]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d102      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x21a>
 8003b7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b80:	e000      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x21c>
 8003b82:	2300      	movs	r3, #0
 8003b84:	461a      	mov	r2, r3
 8003b86:	f7fe ff5d 	bl	8002a44 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6919      	ldr	r1, [r3, #16]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	7e1b      	ldrb	r3, [r3, #24]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d102      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x238>
 8003b9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b9e:	e000      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x23a>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f7fe ff34 	bl	8002a10 <LL_ADC_SetDataRightShift>
 8003ba8:	e1ce      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a23      	ldr	r2, [pc, #140]	@ (8003c3c <HAL_ADC_ConfigChannel+0x2d4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	f040 8181 	bne.w	8003eb8 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe ff11 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x27a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe ff06 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	0e9b      	lsrs	r3, r3, #26
 8003bdc:	f003 021f 	and.w	r2, r3, #31
 8003be0:	e01e      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x2b8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fefb 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	e004      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003c14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10b      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x2dc>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0e9b      	lsrs	r3, r3, #26
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	e01e      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x30e>
 8003c38:	47ff0000 	.word	0x47ff0000
 8003c3c:	58026000 	.word	0x58026000
 8003c40:	5c001000 	.word	0x5c001000
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e004      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d106      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe ff44 	bl	8002b10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fea8 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x34c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fe9d 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	0e9b      	lsrs	r3, r3, #26
 8003cae:	f003 021f 	and.w	r2, r3, #31
 8003cb2:	e01e      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x38a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fe92 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003cd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e004      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x3a2>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0e9b      	lsrs	r3, r3, #26
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	e018      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x3d4>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003d26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e004      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003d32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d106      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2101      	movs	r1, #1
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fee1 	bl	8002b10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2102      	movs	r1, #2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe fe45 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x412>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2102      	movs	r1, #2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fe3a 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003d70:	4603      	mov	r3, r0
 8003d72:	0e9b      	lsrs	r3, r3, #26
 8003d74:	f003 021f 	and.w	r2, r3, #31
 8003d78:	e01e      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x450>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe fe2f 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003da8:	2320      	movs	r3, #32
 8003daa:	e004      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x468>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0e9b      	lsrs	r3, r3, #26
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	e014      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x492>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003dde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003dec:	2320      	movs	r3, #32
 8003dee:	e004      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003df4:	fab3 f383 	clz	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d106      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	2102      	movs	r1, #2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fe82 	bl	8002b10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2103      	movs	r1, #3
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fde6 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x4d0>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2103      	movs	r1, #3
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe fddb 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	0e9b      	lsrs	r3, r3, #26
 8003e32:	f003 021f 	and.w	r2, r3, #31
 8003e36:	e017      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x500>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2103      	movs	r1, #3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fdd0 	bl	80029e4 <LL_ADC_GetOffsetChannel>
 8003e44:	4603      	mov	r3, r0
 8003e46:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003e54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003e5a:	2320      	movs	r3, #32
 8003e5c:	e003      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x518>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	e011      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x53c>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e90:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003e92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003e98:	2320      	movs	r3, #32
 8003e9a:	e003      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d14f      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2103      	movs	r1, #3
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe fe2d 	bl	8002b10 <LL_ADC_SetOffsetState>
 8003eb6:	e047      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ebe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	069b      	lsls	r3, r3, #26
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d107      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eda:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	069b      	lsls	r3, r3, #26
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003efe:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	069b      	lsls	r3, r3, #26
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d107      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f22:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	069b      	lsls	r3, r3, #26
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d107      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f46:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe ff81 	bl	8002e54 <LL_ADC_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 8219 	bne.w	800438c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6819      	ldr	r1, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7fe feb6 	bl	8002cd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4aa1      	ldr	r2, [pc, #644]	@ (80041f8 <HAL_ADC_ConfigChannel+0x890>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	f040 812e 	bne.w	80041d4 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x638>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0e9b      	lsrs	r3, r3, #26
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2b09      	cmp	r3, #9
 8003f96:	bf94      	ite	ls
 8003f98:	2301      	movls	r3, #1
 8003f9a:	2300      	movhi	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e019      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x66c>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003fb8:	2320      	movs	r3, #32
 8003fba:	e003      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003fbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fbe:	fab3 f383 	clz	r3, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2b09      	cmp	r3, #9
 8003fcc:	bf94      	ite	ls
 8003fce:	2301      	movls	r3, #1
 8003fd0:	2300      	movhi	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d079      	beq.n	80040cc <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d107      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x68c>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	3301      	adds	r3, #1
 8003fec:	069b      	lsls	r3, r3, #26
 8003fee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff2:	e015      	b.n	8004020 <HAL_ADC_ConfigChannel+0x6b8>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004004:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800400c:	2320      	movs	r3, #32
 800400e:	e003      	b.n	8004018 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	3301      	adds	r3, #1
 800401a:	069b      	lsls	r3, r3, #26
 800401c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x6d8>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0e9b      	lsrs	r3, r3, #26
 8004032:	3301      	adds	r3, #1
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	e017      	b.n	8004070 <HAL_ADC_ConfigChannel+0x708>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800404e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004050:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004058:	2320      	movs	r3, #32
 800405a:	e003      	b.n	8004064 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800405c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	ea42 0103 	orr.w	r1, r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x72e>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	3301      	adds	r3, #1
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	4613      	mov	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4413      	add	r3, r2
 8004092:	051b      	lsls	r3, r3, #20
 8004094:	e018      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x760>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80040ae:	2320      	movs	r3, #32
 80040b0:	e003      	b.n	80040ba <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80040b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c8:	430b      	orrs	r3, r1
 80040ca:	e07e      	b.n	80041ca <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x780>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	3301      	adds	r3, #1
 80040e0:	069b      	lsls	r3, r3, #26
 80040e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e6:	e015      	b.n	8004114 <HAL_ADC_ConfigChannel+0x7ac>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80040fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004100:	2320      	movs	r3, #32
 8004102:	e003      	b.n	800410c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	3301      	adds	r3, #1
 800410e:	069b      	lsls	r3, r3, #26
 8004110:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x7cc>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	3301      	adds	r3, #1
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	e017      	b.n	8004164 <HAL_ADC_ConfigChannel+0x7fc>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	61bb      	str	r3, [r7, #24]
  return result;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800414c:	2320      	movs	r3, #32
 800414e:	e003      	b.n	8004158 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2101      	movs	r1, #1
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	ea42 0103 	orr.w	r1, r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x828>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	3301      	adds	r3, #1
 800417c:	f003 021f 	and.w	r2, r3, #31
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	3b1e      	subs	r3, #30
 8004188:	051b      	lsls	r3, r3, #20
 800418a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800418e:	e01b      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x860>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	60fb      	str	r3, [r7, #12]
  return result;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e003      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3301      	adds	r3, #1
 80041b6:	f003 021f 	and.w	r2, r3, #31
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	3b1e      	subs	r3, #30
 80041c2:	051b      	lsls	r3, r3, #20
 80041c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c8:	430b      	orrs	r3, r1
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	4619      	mov	r1, r3
 80041d0:	f7fe fd57 	bl	8002c82 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f280 80d7 	bge.w	800438c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a06      	ldr	r2, [pc, #24]	@ (80041fc <HAL_ADC_ConfigChannel+0x894>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_ADC_ConfigChannel+0x88a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <HAL_ADC_ConfigChannel+0x898>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10a      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x8a0>
 80041f2:	4b04      	ldr	r3, [pc, #16]	@ (8004204 <HAL_ADC_ConfigChannel+0x89c>)
 80041f4:	e009      	b.n	800420a <HAL_ADC_ConfigChannel+0x8a2>
 80041f6:	bf00      	nop
 80041f8:	47ff0000 	.word	0x47ff0000
 80041fc:	40022000 	.word	0x40022000
 8004200:	40022100 	.word	0x40022100
 8004204:	40022300 	.word	0x40022300
 8004208:	4b65      	ldr	r3, [pc, #404]	@ (80043a0 <HAL_ADC_ConfigChannel+0xa38>)
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fbaa 	bl	8002964 <LL_ADC_GetCommonPathInternalCh>
 8004210:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a62      	ldr	r2, [pc, #392]	@ (80043a4 <HAL_ADC_ConfigChannel+0xa3c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_ADC_ConfigChannel+0x8c0>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a61      	ldr	r2, [pc, #388]	@ (80043a8 <HAL_ADC_ConfigChannel+0xa40>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d10e      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x8de>
 8004228:	485e      	ldr	r0, [pc, #376]	@ (80043a4 <HAL_ADC_ConfigChannel+0xa3c>)
 800422a:	f7fe fe13 	bl	8002e54 <LL_ADC_IsEnabled>
 800422e:	4604      	mov	r4, r0
 8004230:	485d      	ldr	r0, [pc, #372]	@ (80043a8 <HAL_ADC_ConfigChannel+0xa40>)
 8004232:	f7fe fe0f 	bl	8002e54 <LL_ADC_IsEnabled>
 8004236:	4603      	mov	r3, r0
 8004238:	4323      	orrs	r3, r4
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e008      	b.n	8004258 <HAL_ADC_ConfigChannel+0x8f0>
 8004246:	4859      	ldr	r0, [pc, #356]	@ (80043ac <HAL_ADC_ConfigChannel+0xa44>)
 8004248:	f7fe fe04 	bl	8002e54 <LL_ADC_IsEnabled>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8084 	beq.w	8004366 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a53      	ldr	r2, [pc, #332]	@ (80043b0 <HAL_ADC_ConfigChannel+0xa48>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d132      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x966>
 8004268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800426c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d12c      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a4c      	ldr	r2, [pc, #304]	@ (80043ac <HAL_ADC_ConfigChannel+0xa44>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f040 8086 	bne.w	800438c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a47      	ldr	r2, [pc, #284]	@ (80043a4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_ADC_ConfigChannel+0x92c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a46      	ldr	r2, [pc, #280]	@ (80043a8 <HAL_ADC_ConfigChannel+0xa40>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x930>
 8004294:	4a47      	ldr	r2, [pc, #284]	@ (80043b4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004296:	e000      	b.n	800429a <HAL_ADC_ConfigChannel+0x932>
 8004298:	4a41      	ldr	r2, [pc, #260]	@ (80043a0 <HAL_ADC_ConfigChannel+0xa38>)
 800429a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800429e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7fe fb4a 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042aa:	4b43      	ldr	r3, [pc, #268]	@ (80043b8 <HAL_ADC_ConfigChannel+0xa50>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	4a42      	ldr	r2, [pc, #264]	@ (80043bc <HAL_ADC_ConfigChannel+0xa54>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	3301      	adds	r3, #1
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042be:	e002      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f9      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042cc:	e05e      	b.n	800438c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3b      	ldr	r2, [pc, #236]	@ (80043c0 <HAL_ADC_ConfigChannel+0xa58>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d120      	bne.n	800431a <HAL_ADC_ConfigChannel+0x9b2>
 80042d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d11a      	bne.n	800431a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a30      	ldr	r2, [pc, #192]	@ (80043ac <HAL_ADC_ConfigChannel+0xa44>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d14e      	bne.n	800438c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2c      	ldr	r2, [pc, #176]	@ (80043a4 <HAL_ADC_ConfigChannel+0xa3c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d004      	beq.n	8004302 <HAL_ADC_ConfigChannel+0x99a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2a      	ldr	r2, [pc, #168]	@ (80043a8 <HAL_ADC_ConfigChannel+0xa40>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x99e>
 8004302:	4a2c      	ldr	r2, [pc, #176]	@ (80043b4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004304:	e000      	b.n	8004308 <HAL_ADC_ConfigChannel+0x9a0>
 8004306:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <HAL_ADC_ConfigChannel+0xa38>)
 8004308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800430c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f7fe fb13 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004318:	e038      	b.n	800438c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a29      	ldr	r2, [pc, #164]	@ (80043c4 <HAL_ADC_ConfigChannel+0xa5c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d133      	bne.n	800438c <HAL_ADC_ConfigChannel+0xa24>
 8004324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d12d      	bne.n	800438c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_ADC_ConfigChannel+0xa44>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d128      	bne.n	800438c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a19      	ldr	r2, [pc, #100]	@ (80043a4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_ADC_ConfigChannel+0x9e6>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a17      	ldr	r2, [pc, #92]	@ (80043a8 <HAL_ADC_ConfigChannel+0xa40>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x9ea>
 800434e:	4a19      	ldr	r2, [pc, #100]	@ (80043b4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004350:	e000      	b.n	8004354 <HAL_ADC_ConfigChannel+0x9ec>
 8004352:	4a13      	ldr	r2, [pc, #76]	@ (80043a0 <HAL_ADC_ConfigChannel+0xa38>)
 8004354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004358:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7fe faed 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
 8004364:	e012      	b.n	800438c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004378:	e008      	b.n	800438c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004394:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004398:	4618      	mov	r0, r3
 800439a:	37e4      	adds	r7, #228	@ 0xe4
 800439c:	46bd      	mov	sp, r7
 800439e:	bd90      	pop	{r4, r7, pc}
 80043a0:	58026300 	.word	0x58026300
 80043a4:	40022000 	.word	0x40022000
 80043a8:	40022100 	.word	0x40022100
 80043ac:	58026000 	.word	0x58026000
 80043b0:	c7520000 	.word	0xc7520000
 80043b4:	40022300 	.word	0x40022300
 80043b8:	24000010 	.word	0x24000010
 80043bc:	053e2d63 	.word	0x053e2d63
 80043c0:	c3210000 	.word	0xc3210000
 80043c4:	cb840000 	.word	0xcb840000

080043c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fe fd3d 	bl	8002e54 <LL_ADC_IsEnabled>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d16e      	bne.n	80044be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <ADC_Enable+0x100>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f2:	f043 0210 	orr.w	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e05a      	b.n	80044c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fd0c 	bl	8002e2c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004414:	f7fe fa50 	bl	80028b8 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2b      	ldr	r2, [pc, #172]	@ (80044cc <ADC_Enable+0x104>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <ADC_Enable+0x66>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a29      	ldr	r2, [pc, #164]	@ (80044d0 <ADC_Enable+0x108>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <ADC_Enable+0x6a>
 800442e:	4b29      	ldr	r3, [pc, #164]	@ (80044d4 <ADC_Enable+0x10c>)
 8004430:	e000      	b.n	8004434 <ADC_Enable+0x6c>
 8004432:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <ADC_Enable+0x110>)
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe fc8f 	bl	8002d58 <LL_ADC_GetMultimode>
 800443a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a23      	ldr	r2, [pc, #140]	@ (80044d0 <ADC_Enable+0x108>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d002      	beq.n	800444c <ADC_Enable+0x84>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	e000      	b.n	800444e <ADC_Enable+0x86>
 800444c:	4b1f      	ldr	r3, [pc, #124]	@ (80044cc <ADC_Enable+0x104>)
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	4293      	cmp	r3, r2
 8004454:	d02c      	beq.n	80044b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d130      	bne.n	80044be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800445c:	e028      	b.n	80044b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fcf6 	bl	8002e54 <LL_ADC_IsEnabled>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fcda 	bl	8002e2c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004478:	f7fe fa1e 	bl	80028b8 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d914      	bls.n	80044b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d00d      	beq.n	80044b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	f043 0210 	orr.w	r2, r3, #16
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e007      	b.n	80044c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d1cf      	bne.n	800445e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	8000003f 	.word	0x8000003f
 80044cc:	40022000 	.word	0x40022000
 80044d0:	40022100 	.word	0x40022100
 80044d4:	40022300 	.word	0x40022300
 80044d8:	58026300 	.word	0x58026300

080044dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d14b      	bne.n	800458e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d021      	beq.n	8004554 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fb25 	bl	8002b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d032      	beq.n	8004586 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d12b      	bne.n	8004586 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004532:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d11f      	bne.n	8004586 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	661a      	str	r2, [r3, #96]	@ 0x60
 8004552:	e018      	b.n	8004586 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d111      	bne.n	8004586 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004566:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7fc ffec 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800458c:	e00e      	b.n	80045ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff f9da 	bl	8003954 <HAL_ADC_ErrorCallback>
}
 80045a0:	e004      	b.n	80045ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff f9b2 	bl	800392c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ee:	f043 0204 	orr.w	r2, r3, #4
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff f9ac 	bl	8003954 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6c      	ldr	r2, [pc, #432]	@ (80047c4 <ADC_ConfigureBoostMode+0x1c0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <ADC_ConfigureBoostMode+0x1c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6b      	ldr	r2, [pc, #428]	@ (80047c8 <ADC_ConfigureBoostMode+0x1c4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d109      	bne.n	8004634 <ADC_ConfigureBoostMode+0x30>
 8004620:	4b6a      	ldr	r3, [pc, #424]	@ (80047cc <ADC_ConfigureBoostMode+0x1c8>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e008      	b.n	8004646 <ADC_ConfigureBoostMode+0x42>
 8004634:	4b66      	ldr	r3, [pc, #408]	@ (80047d0 <ADC_ConfigureBoostMode+0x1cc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01c      	beq.n	8004684 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800464a:	f004 fec1 	bl	80093d0 <HAL_RCC_GetHCLKFreq>
 800464e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004658:	d010      	beq.n	800467c <ADC_ConfigureBoostMode+0x78>
 800465a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800465e:	d873      	bhi.n	8004748 <ADC_ConfigureBoostMode+0x144>
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004664:	d002      	beq.n	800466c <ADC_ConfigureBoostMode+0x68>
 8004666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800466a:	d16d      	bne.n	8004748 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	60fb      	str	r3, [r7, #12]
        break;
 800467a:	e068      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	60fb      	str	r3, [r7, #12]
        break;
 8004682:	e064      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004684:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	f006 f89c 	bl	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004690:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800469a:	d051      	beq.n	8004740 <ADC_ConfigureBoostMode+0x13c>
 800469c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046a0:	d854      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 80046a2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046a6:	d047      	beq.n	8004738 <ADC_ConfigureBoostMode+0x134>
 80046a8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046ac:	d84e      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 80046ae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046b2:	d03d      	beq.n	8004730 <ADC_ConfigureBoostMode+0x12c>
 80046b4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046b8:	d848      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 80046ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046be:	d033      	beq.n	8004728 <ADC_ConfigureBoostMode+0x124>
 80046c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046c4:	d842      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 80046c6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046ca:	d029      	beq.n	8004720 <ADC_ConfigureBoostMode+0x11c>
 80046cc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046d0:	d83c      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 80046d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046d6:	d01a      	beq.n	800470e <ADC_ConfigureBoostMode+0x10a>
 80046d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046dc:	d836      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 80046de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046e2:	d014      	beq.n	800470e <ADC_ConfigureBoostMode+0x10a>
 80046e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046e8:	d830      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 80046ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ee:	d00e      	beq.n	800470e <ADC_ConfigureBoostMode+0x10a>
 80046f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046f4:	d82a      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 80046f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046fa:	d008      	beq.n	800470e <ADC_ConfigureBoostMode+0x10a>
 80046fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004700:	d824      	bhi.n	800474c <ADC_ConfigureBoostMode+0x148>
 8004702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004706:	d002      	beq.n	800470e <ADC_ConfigureBoostMode+0x10a>
 8004708:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800470c:	d11e      	bne.n	800474c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	0c9b      	lsrs	r3, r3, #18
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	60fb      	str	r3, [r7, #12]
        break;
 800471e:	e016      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	60fb      	str	r3, [r7, #12]
        break;
 8004726:	e012      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	60fb      	str	r3, [r7, #12]
        break;
 800472e:	e00e      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	099b      	lsrs	r3, r3, #6
 8004734:	60fb      	str	r3, [r7, #12]
        break;
 8004736:	e00a      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	09db      	lsrs	r3, r3, #7
 800473c:	60fb      	str	r3, [r7, #12]
        break;
 800473e:	e006      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	60fb      	str	r3, [r7, #12]
        break;
 8004746:	e002      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800474c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a1f      	ldr	r2, [pc, #124]	@ (80047d4 <ADC_ConfigureBoostMode+0x1d0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d808      	bhi.n	800476e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800476a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800476c:	e025      	b.n	80047ba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a19      	ldr	r2, [pc, #100]	@ (80047d8 <ADC_ConfigureBoostMode+0x1d4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d80a      	bhi.n	800478c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	e016      	b.n	80047ba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a13      	ldr	r2, [pc, #76]	@ (80047dc <ADC_ConfigureBoostMode+0x1d8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d80a      	bhi.n	80047aa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	e007      	b.n	80047ba <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047b8:	609a      	str	r2, [r3, #8]
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40022100 	.word	0x40022100
 80047cc:	40022300 	.word	0x40022300
 80047d0:	58026300 	.word	0x58026300
 80047d4:	005f5e10 	.word	0x005f5e10
 80047d8:	00bebc20 	.word	0x00bebc20
 80047dc:	017d7840 	.word	0x017d7840

080047e0 <LL_ADC_IsEnabled>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <LL_ADC_IsEnabled+0x18>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <LL_ADC_IsEnabled+0x1a>
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <LL_ADC_REG_IsConversionOngoing>:
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b04      	cmp	r3, #4
 8004818:	d101      	bne.n	800481e <LL_ADC_REG_IsConversionOngoing+0x18>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b0a3      	sub	sp, #140	@ 0x8c
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0c1      	b.n	8004a32 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80048b6:	2300      	movs	r3, #0
 80048b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d102      	bne.n	80048ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e001      	b.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0a0      	b.n	8004a32 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff ff87 	bl	8004806 <LL_ADC_REG_IsConversionOngoing>
 80048f8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff80 	bl	8004806 <LL_ADC_REG_IsConversionOngoing>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	f040 8081 	bne.w	8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800490e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d17c      	bne.n	8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a48      	ldr	r2, [pc, #288]	@ (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a46      	ldr	r2, [pc, #280]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800492a:	4b46      	ldr	r3, [pc, #280]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800492c:	e000      	b.n	8004930 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800492e:	4b46      	ldr	r3, [pc, #280]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004930:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d039      	beq.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800493a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	431a      	orrs	r2, r3
 8004948:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800494a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3a      	ldr	r2, [pc, #232]	@ (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a39      	ldr	r2, [pc, #228]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10e      	bne.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004960:	4836      	ldr	r0, [pc, #216]	@ (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004962:	f7ff ff3d 	bl	80047e0 <LL_ADC_IsEnabled>
 8004966:	4604      	mov	r4, r0
 8004968:	4835      	ldr	r0, [pc, #212]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800496a:	f7ff ff39 	bl	80047e0 <LL_ADC_IsEnabled>
 800496e:	4603      	mov	r3, r0
 8004970:	4323      	orrs	r3, r4
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e008      	b.n	8004990 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800497e:	4833      	ldr	r0, [pc, #204]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004980:	f7ff ff2e 	bl	80047e0 <LL_ADC_IsEnabled>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d047      	beq.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004994:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	4b2d      	ldr	r3, [pc, #180]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800499a:	4013      	ands	r3, r2
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	6811      	ldr	r1, [r2, #0]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	6892      	ldr	r2, [r2, #8]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	431a      	orrs	r2, r3
 80049a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ac:	e03a      	b.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1f      	ldr	r2, [pc, #124]	@ (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10e      	bne.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80049ce:	481b      	ldr	r0, [pc, #108]	@ (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049d0:	f7ff ff06 	bl	80047e0 <LL_ADC_IsEnabled>
 80049d4:	4604      	mov	r4, r0
 80049d6:	481a      	ldr	r0, [pc, #104]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049d8:	f7ff ff02 	bl	80047e0 <LL_ADC_IsEnabled>
 80049dc:	4603      	mov	r3, r0
 80049de:	4323      	orrs	r3, r4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e008      	b.n	80049fe <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80049ec:	4817      	ldr	r0, [pc, #92]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049ee:	f7ff fef7 	bl	80047e0 <LL_ADC_IsEnabled>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d010      	beq.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a0c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a0e:	e009      	b.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004a22:	e000      	b.n	8004a26 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a2e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	378c      	adds	r7, #140	@ 0x8c
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd90      	pop	{r4, r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40022000 	.word	0x40022000
 8004a40:	40022100 	.word	0x40022100
 8004a44:	40022300 	.word	0x40022300
 8004a48:	58026300 	.word	0x58026300
 8004a4c:	58026000 	.word	0x58026000
 8004a50:	fffff0e0 	.word	0xfffff0e0

08004a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <__NVIC_SetPriorityGrouping+0x40>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a70:	4013      	ands	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <__NVIC_SetPriorityGrouping+0x44>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a82:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <__NVIC_SetPriorityGrouping+0x40>)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	60d3      	str	r3, [r2, #12]
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00
 8004a98:	05fa0000 	.word	0x05fa0000

08004a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa0:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f003 0307 	and.w	r3, r3, #7
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	db0b      	blt.n	8004ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	f003 021f 	and.w	r2, r3, #31
 8004ad0:	4907      	ldr	r1, [pc, #28]	@ (8004af0 <__NVIC_EnableIRQ+0x38>)
 8004ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2001      	movs	r0, #1
 8004ada:	fa00 f202 	lsl.w	r2, r0, r2
 8004ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	e000e100 	.word	0xe000e100

08004af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	6039      	str	r1, [r7, #0]
 8004afe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	db0a      	blt.n	8004b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	490c      	ldr	r1, [pc, #48]	@ (8004b40 <__NVIC_SetPriority+0x4c>)
 8004b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b12:	0112      	lsls	r2, r2, #4
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	440b      	add	r3, r1
 8004b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b1c:	e00a      	b.n	8004b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4908      	ldr	r1, [pc, #32]	@ (8004b44 <__NVIC_SetPriority+0x50>)
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	3b04      	subs	r3, #4
 8004b2c:	0112      	lsls	r2, r2, #4
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	440b      	add	r3, r1
 8004b32:	761a      	strb	r2, [r3, #24]
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	e000e100 	.word	0xe000e100
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	@ 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f1c3 0307 	rsb	r3, r3, #7
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	bf28      	it	cs
 8004b66:	2304      	movcs	r3, #4
 8004b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	2b06      	cmp	r3, #6
 8004b70:	d902      	bls.n	8004b78 <NVIC_EncodePriority+0x30>
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3b03      	subs	r3, #3
 8004b76:	e000      	b.n	8004b7a <NVIC_EncodePriority+0x32>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43da      	mvns	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9a:	43d9      	mvns	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba0:	4313      	orrs	r3, r2
         );
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3724      	adds	r7, #36	@ 0x24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc0:	d301      	bcc.n	8004bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00f      	b.n	8004be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf0 <SysTick_Config+0x40>)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bce:	210f      	movs	r1, #15
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bd4:	f7ff ff8e 	bl	8004af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <SysTick_Config+0x40>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bde:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <SysTick_Config+0x40>)
 8004be0:	2207      	movs	r2, #7
 8004be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000e010 	.word	0xe000e010

08004bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ff29 	bl	8004a54 <__NVIC_SetPriorityGrouping>
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b086      	sub	sp, #24
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	4603      	mov	r3, r0
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c18:	f7ff ff40 	bl	8004a9c <__NVIC_GetPriorityGrouping>
 8004c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f7ff ff90 	bl	8004b48 <NVIC_EncodePriority>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ff5f 	bl	8004af4 <__NVIC_SetPriority>
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	4603      	mov	r3, r0
 8004c46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ff33 	bl	8004ab8 <__NVIC_EnableIRQ>
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff ffa4 	bl	8004bb0 <SysTick_Config>
 8004c68:	4603      	mov	r3, r0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c7c:	f7fd fe1c 	bl	80028b8 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e312      	b.n	80052b2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a66      	ldr	r2, [pc, #408]	@ (8004e2c <HAL_DMA_Init+0x1b8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d04a      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a65      	ldr	r2, [pc, #404]	@ (8004e30 <HAL_DMA_Init+0x1bc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d045      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a63      	ldr	r2, [pc, #396]	@ (8004e34 <HAL_DMA_Init+0x1c0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d040      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a62      	ldr	r2, [pc, #392]	@ (8004e38 <HAL_DMA_Init+0x1c4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d03b      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a60      	ldr	r2, [pc, #384]	@ (8004e3c <HAL_DMA_Init+0x1c8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d036      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8004e40 <HAL_DMA_Init+0x1cc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d031      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8004e44 <HAL_DMA_Init+0x1d0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d02c      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8004e48 <HAL_DMA_Init+0x1d4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d027      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5a      	ldr	r2, [pc, #360]	@ (8004e4c <HAL_DMA_Init+0x1d8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d022      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a59      	ldr	r2, [pc, #356]	@ (8004e50 <HAL_DMA_Init+0x1dc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d01d      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a57      	ldr	r2, [pc, #348]	@ (8004e54 <HAL_DMA_Init+0x1e0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a56      	ldr	r2, [pc, #344]	@ (8004e58 <HAL_DMA_Init+0x1e4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a54      	ldr	r2, [pc, #336]	@ (8004e5c <HAL_DMA_Init+0x1e8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a53      	ldr	r2, [pc, #332]	@ (8004e60 <HAL_DMA_Init+0x1ec>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a51      	ldr	r2, [pc, #324]	@ (8004e64 <HAL_DMA_Init+0x1f0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_DMA_Init+0xb8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a50      	ldr	r2, [pc, #320]	@ (8004e68 <HAL_DMA_Init+0x1f4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <HAL_DMA_Init+0xbc>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <HAL_DMA_Init+0xbe>
 8004d30:	2300      	movs	r3, #0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 813c 	beq.w	8004fb0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a37      	ldr	r2, [pc, #220]	@ (8004e2c <HAL_DMA_Init+0x1b8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d04a      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a36      	ldr	r2, [pc, #216]	@ (8004e30 <HAL_DMA_Init+0x1bc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d045      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a34      	ldr	r2, [pc, #208]	@ (8004e34 <HAL_DMA_Init+0x1c0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d040      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a33      	ldr	r2, [pc, #204]	@ (8004e38 <HAL_DMA_Init+0x1c4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d03b      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a31      	ldr	r2, [pc, #196]	@ (8004e3c <HAL_DMA_Init+0x1c8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d036      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a30      	ldr	r2, [pc, #192]	@ (8004e40 <HAL_DMA_Init+0x1cc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d031      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2e      	ldr	r2, [pc, #184]	@ (8004e44 <HAL_DMA_Init+0x1d0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d02c      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2d      	ldr	r2, [pc, #180]	@ (8004e48 <HAL_DMA_Init+0x1d4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d027      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e4c <HAL_DMA_Init+0x1d8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d022      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e50 <HAL_DMA_Init+0x1dc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d01d      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a28      	ldr	r2, [pc, #160]	@ (8004e54 <HAL_DMA_Init+0x1e0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a27      	ldr	r2, [pc, #156]	@ (8004e58 <HAL_DMA_Init+0x1e4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a25      	ldr	r2, [pc, #148]	@ (8004e5c <HAL_DMA_Init+0x1e8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a24      	ldr	r2, [pc, #144]	@ (8004e60 <HAL_DMA_Init+0x1ec>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a22      	ldr	r2, [pc, #136]	@ (8004e64 <HAL_DMA_Init+0x1f0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_DMA_Init+0x174>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a21      	ldr	r2, [pc, #132]	@ (8004e68 <HAL_DMA_Init+0x1f4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d108      	bne.n	8004dfa <HAL_DMA_Init+0x186>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e007      	b.n	8004e0a <HAL_DMA_Init+0x196>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e0a:	e02f      	b.n	8004e6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e0c:	f7fd fd54 	bl	80028b8 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d928      	bls.n	8004e6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2203      	movs	r2, #3
 8004e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e242      	b.n	80052b2 <HAL_DMA_Init+0x63e>
 8004e2c:	40020010 	.word	0x40020010
 8004e30:	40020028 	.word	0x40020028
 8004e34:	40020040 	.word	0x40020040
 8004e38:	40020058 	.word	0x40020058
 8004e3c:	40020070 	.word	0x40020070
 8004e40:	40020088 	.word	0x40020088
 8004e44:	400200a0 	.word	0x400200a0
 8004e48:	400200b8 	.word	0x400200b8
 8004e4c:	40020410 	.word	0x40020410
 8004e50:	40020428 	.word	0x40020428
 8004e54:	40020440 	.word	0x40020440
 8004e58:	40020458 	.word	0x40020458
 8004e5c:	40020470 	.word	0x40020470
 8004e60:	40020488 	.word	0x40020488
 8004e64:	400204a0 	.word	0x400204a0
 8004e68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1c8      	bne.n	8004e0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4b83      	ldr	r3, [pc, #524]	@ (8005094 <HAL_DMA_Init+0x420>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eaa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d107      	bne.n	8004ed0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b28      	cmp	r3, #40	@ 0x28
 8004ed6:	d903      	bls.n	8004ee0 <HAL_DMA_Init+0x26c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ede:	d91f      	bls.n	8004f20 <HAL_DMA_Init+0x2ac>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ee6:	d903      	bls.n	8004ef0 <HAL_DMA_Init+0x27c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b42      	cmp	r3, #66	@ 0x42
 8004eee:	d917      	bls.n	8004f20 <HAL_DMA_Init+0x2ac>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b46      	cmp	r3, #70	@ 0x46
 8004ef6:	d903      	bls.n	8004f00 <HAL_DMA_Init+0x28c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b48      	cmp	r3, #72	@ 0x48
 8004efe:	d90f      	bls.n	8004f20 <HAL_DMA_Init+0x2ac>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f06:	d903      	bls.n	8004f10 <HAL_DMA_Init+0x29c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b52      	cmp	r3, #82	@ 0x52
 8004f0e:	d907      	bls.n	8004f20 <HAL_DMA_Init+0x2ac>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b73      	cmp	r3, #115	@ 0x73
 8004f16:	d905      	bls.n	8004f24 <HAL_DMA_Init+0x2b0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b77      	cmp	r3, #119	@ 0x77
 8004f1e:	d801      	bhi.n	8004f24 <HAL_DMA_Init+0x2b0>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <HAL_DMA_Init+0x2b2>
 8004f24:	2300      	movs	r3, #0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f30:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 0307 	bic.w	r3, r3, #7
 8004f48:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d117      	bne.n	8004f8c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00e      	beq.n	8004f8c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 fdca 	bl	8006b08 <DMA_CheckFifoParam>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2240      	movs	r2, #64	@ 0x40
 8004f7e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e192      	b.n	80052b2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f001 fd05 	bl	80069a4 <DMA_CalcBaseAndBitshift>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	223f      	movs	r2, #63	@ 0x3f
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	e0c8      	b.n	8005142 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a38      	ldr	r2, [pc, #224]	@ (8005098 <HAL_DMA_Init+0x424>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_DMA_Init+0x38c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a37      	ldr	r2, [pc, #220]	@ (800509c <HAL_DMA_Init+0x428>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d01d      	beq.n	8005000 <HAL_DMA_Init+0x38c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a35      	ldr	r2, [pc, #212]	@ (80050a0 <HAL_DMA_Init+0x42c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_DMA_Init+0x38c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a34      	ldr	r2, [pc, #208]	@ (80050a4 <HAL_DMA_Init+0x430>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_DMA_Init+0x38c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a32      	ldr	r2, [pc, #200]	@ (80050a8 <HAL_DMA_Init+0x434>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_DMA_Init+0x38c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a31      	ldr	r2, [pc, #196]	@ (80050ac <HAL_DMA_Init+0x438>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_DMA_Init+0x38c>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80050b0 <HAL_DMA_Init+0x43c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_DMA_Init+0x38c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80050b4 <HAL_DMA_Init+0x440>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_DMA_Init+0x390>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_DMA_Init+0x392>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8092 	beq.w	8005130 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a21      	ldr	r2, [pc, #132]	@ (8005098 <HAL_DMA_Init+0x424>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d021      	beq.n	800505a <HAL_DMA_Init+0x3e6>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a20      	ldr	r2, [pc, #128]	@ (800509c <HAL_DMA_Init+0x428>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d01c      	beq.n	800505a <HAL_DMA_Init+0x3e6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1e      	ldr	r2, [pc, #120]	@ (80050a0 <HAL_DMA_Init+0x42c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d017      	beq.n	800505a <HAL_DMA_Init+0x3e6>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1d      	ldr	r2, [pc, #116]	@ (80050a4 <HAL_DMA_Init+0x430>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d012      	beq.n	800505a <HAL_DMA_Init+0x3e6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <HAL_DMA_Init+0x434>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00d      	beq.n	800505a <HAL_DMA_Init+0x3e6>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1a      	ldr	r2, [pc, #104]	@ (80050ac <HAL_DMA_Init+0x438>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d008      	beq.n	800505a <HAL_DMA_Init+0x3e6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a18      	ldr	r2, [pc, #96]	@ (80050b0 <HAL_DMA_Init+0x43c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <HAL_DMA_Init+0x3e6>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a17      	ldr	r2, [pc, #92]	@ (80050b4 <HAL_DMA_Init+0x440>)
 8005058:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <HAL_DMA_Init+0x444>)
 8005076:	4013      	ands	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b40      	cmp	r3, #64	@ 0x40
 8005080:	d01c      	beq.n	80050bc <HAL_DMA_Init+0x448>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b80      	cmp	r3, #128	@ 0x80
 8005088:	d102      	bne.n	8005090 <HAL_DMA_Init+0x41c>
 800508a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800508e:	e016      	b.n	80050be <HAL_DMA_Init+0x44a>
 8005090:	2300      	movs	r3, #0
 8005092:	e014      	b.n	80050be <HAL_DMA_Init+0x44a>
 8005094:	fe10803f 	.word	0xfe10803f
 8005098:	58025408 	.word	0x58025408
 800509c:	5802541c 	.word	0x5802541c
 80050a0:	58025430 	.word	0x58025430
 80050a4:	58025444 	.word	0x58025444
 80050a8:	58025458 	.word	0x58025458
 80050ac:	5802546c 	.word	0x5802546c
 80050b0:	58025480 	.word	0x58025480
 80050b4:	58025494 	.word	0x58025494
 80050b8:	fffe000f 	.word	0xfffe000f
 80050bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68d2      	ldr	r2, [r2, #12]
 80050c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	4b6e      	ldr	r3, [pc, #440]	@ (80052bc <HAL_DMA_Init+0x648>)
 8005104:	4413      	add	r3, r2
 8005106:	4a6e      	ldr	r2, [pc, #440]	@ (80052c0 <HAL_DMA_Init+0x64c>)
 8005108:	fba2 2303 	umull	r2, r3, r2, r3
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 fc45 	bl	80069a4 <DMA_CalcBaseAndBitshift>
 800511a:	4603      	mov	r3, r0
 800511c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2201      	movs	r2, #1
 8005128:	409a      	lsls	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	e008      	b.n	8005142 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2240      	movs	r2, #64	@ 0x40
 8005134:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2203      	movs	r2, #3
 800513a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0b7      	b.n	80052b2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a5f      	ldr	r2, [pc, #380]	@ (80052c4 <HAL_DMA_Init+0x650>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d072      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a5d      	ldr	r2, [pc, #372]	@ (80052c8 <HAL_DMA_Init+0x654>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d06d      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a5c      	ldr	r2, [pc, #368]	@ (80052cc <HAL_DMA_Init+0x658>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d068      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a5a      	ldr	r2, [pc, #360]	@ (80052d0 <HAL_DMA_Init+0x65c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d063      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a59      	ldr	r2, [pc, #356]	@ (80052d4 <HAL_DMA_Init+0x660>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d05e      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a57      	ldr	r2, [pc, #348]	@ (80052d8 <HAL_DMA_Init+0x664>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d059      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a56      	ldr	r2, [pc, #344]	@ (80052dc <HAL_DMA_Init+0x668>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d054      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a54      	ldr	r2, [pc, #336]	@ (80052e0 <HAL_DMA_Init+0x66c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d04f      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a53      	ldr	r2, [pc, #332]	@ (80052e4 <HAL_DMA_Init+0x670>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d04a      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a51      	ldr	r2, [pc, #324]	@ (80052e8 <HAL_DMA_Init+0x674>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d045      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a50      	ldr	r2, [pc, #320]	@ (80052ec <HAL_DMA_Init+0x678>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d040      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a4e      	ldr	r2, [pc, #312]	@ (80052f0 <HAL_DMA_Init+0x67c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d03b      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a4d      	ldr	r2, [pc, #308]	@ (80052f4 <HAL_DMA_Init+0x680>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d036      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a4b      	ldr	r2, [pc, #300]	@ (80052f8 <HAL_DMA_Init+0x684>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d031      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4a      	ldr	r2, [pc, #296]	@ (80052fc <HAL_DMA_Init+0x688>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d02c      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a48      	ldr	r2, [pc, #288]	@ (8005300 <HAL_DMA_Init+0x68c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d027      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a47      	ldr	r2, [pc, #284]	@ (8005304 <HAL_DMA_Init+0x690>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d022      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a45      	ldr	r2, [pc, #276]	@ (8005308 <HAL_DMA_Init+0x694>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d01d      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a44      	ldr	r2, [pc, #272]	@ (800530c <HAL_DMA_Init+0x698>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d018      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a42      	ldr	r2, [pc, #264]	@ (8005310 <HAL_DMA_Init+0x69c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a41      	ldr	r2, [pc, #260]	@ (8005314 <HAL_DMA_Init+0x6a0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00e      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a3f      	ldr	r2, [pc, #252]	@ (8005318 <HAL_DMA_Init+0x6a4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d009      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a3e      	ldr	r2, [pc, #248]	@ (800531c <HAL_DMA_Init+0x6a8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d004      	beq.n	8005232 <HAL_DMA_Init+0x5be>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a3c      	ldr	r2, [pc, #240]	@ (8005320 <HAL_DMA_Init+0x6ac>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_DMA_Init+0x5c2>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_DMA_Init+0x5c4>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d032      	beq.n	80052a2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 fcdf 	bl	8006c00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b80      	cmp	r3, #128	@ 0x80
 8005248:	d102      	bne.n	8005250 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005264:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d010      	beq.n	8005290 <HAL_DMA_Init+0x61c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b08      	cmp	r3, #8
 8005274:	d80c      	bhi.n	8005290 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 fd5c 	bl	8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	e008      	b.n	80052a2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	a7fdabf8 	.word	0xa7fdabf8
 80052c0:	cccccccd 	.word	0xcccccccd
 80052c4:	40020010 	.word	0x40020010
 80052c8:	40020028 	.word	0x40020028
 80052cc:	40020040 	.word	0x40020040
 80052d0:	40020058 	.word	0x40020058
 80052d4:	40020070 	.word	0x40020070
 80052d8:	40020088 	.word	0x40020088
 80052dc:	400200a0 	.word	0x400200a0
 80052e0:	400200b8 	.word	0x400200b8
 80052e4:	40020410 	.word	0x40020410
 80052e8:	40020428 	.word	0x40020428
 80052ec:	40020440 	.word	0x40020440
 80052f0:	40020458 	.word	0x40020458
 80052f4:	40020470 	.word	0x40020470
 80052f8:	40020488 	.word	0x40020488
 80052fc:	400204a0 	.word	0x400204a0
 8005300:	400204b8 	.word	0x400204b8
 8005304:	58025408 	.word	0x58025408
 8005308:	5802541c 	.word	0x5802541c
 800530c:	58025430 	.word	0x58025430
 8005310:	58025444 	.word	0x58025444
 8005314:	58025458 	.word	0x58025458
 8005318:	5802546c 	.word	0x5802546c
 800531c:	58025480 	.word	0x58025480
 8005320:	58025494 	.word	0x58025494

08005324 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e226      	b.n	800578e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_DMA_Start_IT+0x2a>
 800534a:	2302      	movs	r3, #2
 800534c:	e21f      	b.n	800578e <HAL_DMA_Start_IT+0x46a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	f040 820a 	bne.w	8005778 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a68      	ldr	r2, [pc, #416]	@ (8005518 <HAL_DMA_Start_IT+0x1f4>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d04a      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a66      	ldr	r2, [pc, #408]	@ (800551c <HAL_DMA_Start_IT+0x1f8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d045      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a65      	ldr	r2, [pc, #404]	@ (8005520 <HAL_DMA_Start_IT+0x1fc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d040      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a63      	ldr	r2, [pc, #396]	@ (8005524 <HAL_DMA_Start_IT+0x200>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d03b      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a62      	ldr	r2, [pc, #392]	@ (8005528 <HAL_DMA_Start_IT+0x204>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d036      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a60      	ldr	r2, [pc, #384]	@ (800552c <HAL_DMA_Start_IT+0x208>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d031      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a5f      	ldr	r2, [pc, #380]	@ (8005530 <HAL_DMA_Start_IT+0x20c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d02c      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5d      	ldr	r2, [pc, #372]	@ (8005534 <HAL_DMA_Start_IT+0x210>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d027      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a5c      	ldr	r2, [pc, #368]	@ (8005538 <HAL_DMA_Start_IT+0x214>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d022      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a5a      	ldr	r2, [pc, #360]	@ (800553c <HAL_DMA_Start_IT+0x218>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01d      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a59      	ldr	r2, [pc, #356]	@ (8005540 <HAL_DMA_Start_IT+0x21c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d018      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a57      	ldr	r2, [pc, #348]	@ (8005544 <HAL_DMA_Start_IT+0x220>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a56      	ldr	r2, [pc, #344]	@ (8005548 <HAL_DMA_Start_IT+0x224>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a54      	ldr	r2, [pc, #336]	@ (800554c <HAL_DMA_Start_IT+0x228>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a53      	ldr	r2, [pc, #332]	@ (8005550 <HAL_DMA_Start_IT+0x22c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_DMA_Start_IT+0xee>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a51      	ldr	r2, [pc, #324]	@ (8005554 <HAL_DMA_Start_IT+0x230>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d108      	bne.n	8005424 <HAL_DMA_Start_IT+0x100>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e007      	b.n	8005434 <HAL_DMA_Start_IT+0x110>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f001 f906 	bl	800664c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a34      	ldr	r2, [pc, #208]	@ (8005518 <HAL_DMA_Start_IT+0x1f4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d04a      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a33      	ldr	r2, [pc, #204]	@ (800551c <HAL_DMA_Start_IT+0x1f8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d045      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a31      	ldr	r2, [pc, #196]	@ (8005520 <HAL_DMA_Start_IT+0x1fc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d040      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a30      	ldr	r2, [pc, #192]	@ (8005524 <HAL_DMA_Start_IT+0x200>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d03b      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2e      	ldr	r2, [pc, #184]	@ (8005528 <HAL_DMA_Start_IT+0x204>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d036      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a2d      	ldr	r2, [pc, #180]	@ (800552c <HAL_DMA_Start_IT+0x208>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d031      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2b      	ldr	r2, [pc, #172]	@ (8005530 <HAL_DMA_Start_IT+0x20c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d02c      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2a      	ldr	r2, [pc, #168]	@ (8005534 <HAL_DMA_Start_IT+0x210>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d027      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a28      	ldr	r2, [pc, #160]	@ (8005538 <HAL_DMA_Start_IT+0x214>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d022      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a27      	ldr	r2, [pc, #156]	@ (800553c <HAL_DMA_Start_IT+0x218>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d01d      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a25      	ldr	r2, [pc, #148]	@ (8005540 <HAL_DMA_Start_IT+0x21c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d018      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a24      	ldr	r2, [pc, #144]	@ (8005544 <HAL_DMA_Start_IT+0x220>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a22      	ldr	r2, [pc, #136]	@ (8005548 <HAL_DMA_Start_IT+0x224>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a21      	ldr	r2, [pc, #132]	@ (800554c <HAL_DMA_Start_IT+0x228>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005550 <HAL_DMA_Start_IT+0x22c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_DMA_Start_IT+0x1bc>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1e      	ldr	r2, [pc, #120]	@ (8005554 <HAL_DMA_Start_IT+0x230>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d101      	bne.n	80054e4 <HAL_DMA_Start_IT+0x1c0>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <HAL_DMA_Start_IT+0x1c2>
 80054e4:	2300      	movs	r3, #0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d036      	beq.n	8005558 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 021e 	bic.w	r2, r3, #30
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0216 	orr.w	r2, r2, #22
 80054fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d03e      	beq.n	8005584 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0208 	orr.w	r2, r2, #8
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e035      	b.n	8005584 <HAL_DMA_Start_IT+0x260>
 8005518:	40020010 	.word	0x40020010
 800551c:	40020028 	.word	0x40020028
 8005520:	40020040 	.word	0x40020040
 8005524:	40020058 	.word	0x40020058
 8005528:	40020070 	.word	0x40020070
 800552c:	40020088 	.word	0x40020088
 8005530:	400200a0 	.word	0x400200a0
 8005534:	400200b8 	.word	0x400200b8
 8005538:	40020410 	.word	0x40020410
 800553c:	40020428 	.word	0x40020428
 8005540:	40020440 	.word	0x40020440
 8005544:	40020458 	.word	0x40020458
 8005548:	40020470 	.word	0x40020470
 800554c:	40020488 	.word	0x40020488
 8005550:	400204a0 	.word	0x400204a0
 8005554:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f023 020e 	bic.w	r2, r3, #14
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 020a 	orr.w	r2, r2, #10
 800556a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0204 	orr.w	r2, r2, #4
 8005582:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a83      	ldr	r2, [pc, #524]	@ (8005798 <HAL_DMA_Start_IT+0x474>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d072      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a82      	ldr	r2, [pc, #520]	@ (800579c <HAL_DMA_Start_IT+0x478>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d06d      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a80      	ldr	r2, [pc, #512]	@ (80057a0 <HAL_DMA_Start_IT+0x47c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d068      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a7f      	ldr	r2, [pc, #508]	@ (80057a4 <HAL_DMA_Start_IT+0x480>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d063      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7d      	ldr	r2, [pc, #500]	@ (80057a8 <HAL_DMA_Start_IT+0x484>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d05e      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a7c      	ldr	r2, [pc, #496]	@ (80057ac <HAL_DMA_Start_IT+0x488>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d059      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a7a      	ldr	r2, [pc, #488]	@ (80057b0 <HAL_DMA_Start_IT+0x48c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d054      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a79      	ldr	r2, [pc, #484]	@ (80057b4 <HAL_DMA_Start_IT+0x490>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d04f      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a77      	ldr	r2, [pc, #476]	@ (80057b8 <HAL_DMA_Start_IT+0x494>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d04a      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a76      	ldr	r2, [pc, #472]	@ (80057bc <HAL_DMA_Start_IT+0x498>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d045      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a74      	ldr	r2, [pc, #464]	@ (80057c0 <HAL_DMA_Start_IT+0x49c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d040      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a73      	ldr	r2, [pc, #460]	@ (80057c4 <HAL_DMA_Start_IT+0x4a0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d03b      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a71      	ldr	r2, [pc, #452]	@ (80057c8 <HAL_DMA_Start_IT+0x4a4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d036      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a70      	ldr	r2, [pc, #448]	@ (80057cc <HAL_DMA_Start_IT+0x4a8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d031      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a6e      	ldr	r2, [pc, #440]	@ (80057d0 <HAL_DMA_Start_IT+0x4ac>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02c      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6d      	ldr	r2, [pc, #436]	@ (80057d4 <HAL_DMA_Start_IT+0x4b0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d027      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a6b      	ldr	r2, [pc, #428]	@ (80057d8 <HAL_DMA_Start_IT+0x4b4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a6a      	ldr	r2, [pc, #424]	@ (80057dc <HAL_DMA_Start_IT+0x4b8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d01d      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a68      	ldr	r2, [pc, #416]	@ (80057e0 <HAL_DMA_Start_IT+0x4bc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d018      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a67      	ldr	r2, [pc, #412]	@ (80057e4 <HAL_DMA_Start_IT+0x4c0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a65      	ldr	r2, [pc, #404]	@ (80057e8 <HAL_DMA_Start_IT+0x4c4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00e      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a64      	ldr	r2, [pc, #400]	@ (80057ec <HAL_DMA_Start_IT+0x4c8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d009      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a62      	ldr	r2, [pc, #392]	@ (80057f0 <HAL_DMA_Start_IT+0x4cc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_DMA_Start_IT+0x350>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a61      	ldr	r2, [pc, #388]	@ (80057f4 <HAL_DMA_Start_IT+0x4d0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d101      	bne.n	8005678 <HAL_DMA_Start_IT+0x354>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <HAL_DMA_Start_IT+0x356>
 8005678:	2300      	movs	r3, #0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01a      	beq.n	80056b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800569a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a37      	ldr	r2, [pc, #220]	@ (8005798 <HAL_DMA_Start_IT+0x474>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d04a      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a36      	ldr	r2, [pc, #216]	@ (800579c <HAL_DMA_Start_IT+0x478>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d045      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a34      	ldr	r2, [pc, #208]	@ (80057a0 <HAL_DMA_Start_IT+0x47c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d040      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a33      	ldr	r2, [pc, #204]	@ (80057a4 <HAL_DMA_Start_IT+0x480>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d03b      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a31      	ldr	r2, [pc, #196]	@ (80057a8 <HAL_DMA_Start_IT+0x484>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d036      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a30      	ldr	r2, [pc, #192]	@ (80057ac <HAL_DMA_Start_IT+0x488>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d031      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2e      	ldr	r2, [pc, #184]	@ (80057b0 <HAL_DMA_Start_IT+0x48c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02c      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2d      	ldr	r2, [pc, #180]	@ (80057b4 <HAL_DMA_Start_IT+0x490>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d027      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2b      	ldr	r2, [pc, #172]	@ (80057b8 <HAL_DMA_Start_IT+0x494>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d022      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a2a      	ldr	r2, [pc, #168]	@ (80057bc <HAL_DMA_Start_IT+0x498>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d01d      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a28      	ldr	r2, [pc, #160]	@ (80057c0 <HAL_DMA_Start_IT+0x49c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d018      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a27      	ldr	r2, [pc, #156]	@ (80057c4 <HAL_DMA_Start_IT+0x4a0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a25      	ldr	r2, [pc, #148]	@ (80057c8 <HAL_DMA_Start_IT+0x4a4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00e      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a24      	ldr	r2, [pc, #144]	@ (80057cc <HAL_DMA_Start_IT+0x4a8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d009      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a22      	ldr	r2, [pc, #136]	@ (80057d0 <HAL_DMA_Start_IT+0x4ac>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_DMA_Start_IT+0x430>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a21      	ldr	r2, [pc, #132]	@ (80057d4 <HAL_DMA_Start_IT+0x4b0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <HAL_DMA_Start_IT+0x442>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e012      	b.n	800578c <HAL_DMA_Start_IT+0x468>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0201 	orr.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e009      	b.n	800578c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40020010 	.word	0x40020010
 800579c:	40020028 	.word	0x40020028
 80057a0:	40020040 	.word	0x40020040
 80057a4:	40020058 	.word	0x40020058
 80057a8:	40020070 	.word	0x40020070
 80057ac:	40020088 	.word	0x40020088
 80057b0:	400200a0 	.word	0x400200a0
 80057b4:	400200b8 	.word	0x400200b8
 80057b8:	40020410 	.word	0x40020410
 80057bc:	40020428 	.word	0x40020428
 80057c0:	40020440 	.word	0x40020440
 80057c4:	40020458 	.word	0x40020458
 80057c8:	40020470 	.word	0x40020470
 80057cc:	40020488 	.word	0x40020488
 80057d0:	400204a0 	.word	0x400204a0
 80057d4:	400204b8 	.word	0x400204b8
 80057d8:	58025408 	.word	0x58025408
 80057dc:	5802541c 	.word	0x5802541c
 80057e0:	58025430 	.word	0x58025430
 80057e4:	58025444 	.word	0x58025444
 80057e8:	58025458 	.word	0x58025458
 80057ec:	5802546c 	.word	0x5802546c
 80057f0:	58025480 	.word	0x58025480
 80057f4:	58025494 	.word	0x58025494

080057f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	@ 0x28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005804:	4b67      	ldr	r3, [pc, #412]	@ (80059a4 <HAL_DMA_IRQHandler+0x1ac>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a67      	ldr	r2, [pc, #412]	@ (80059a8 <HAL_DMA_IRQHandler+0x1b0>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	0a9b      	lsrs	r3, r3, #10
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005816:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a5f      	ldr	r2, [pc, #380]	@ (80059ac <HAL_DMA_IRQHandler+0x1b4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d04a      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a5d      	ldr	r2, [pc, #372]	@ (80059b0 <HAL_DMA_IRQHandler+0x1b8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d045      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a5c      	ldr	r2, [pc, #368]	@ (80059b4 <HAL_DMA_IRQHandler+0x1bc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d040      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a5a      	ldr	r2, [pc, #360]	@ (80059b8 <HAL_DMA_IRQHandler+0x1c0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d03b      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a59      	ldr	r2, [pc, #356]	@ (80059bc <HAL_DMA_IRQHandler+0x1c4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d036      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a57      	ldr	r2, [pc, #348]	@ (80059c0 <HAL_DMA_IRQHandler+0x1c8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d031      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a56      	ldr	r2, [pc, #344]	@ (80059c4 <HAL_DMA_IRQHandler+0x1cc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d02c      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a54      	ldr	r2, [pc, #336]	@ (80059c8 <HAL_DMA_IRQHandler+0x1d0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d027      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a53      	ldr	r2, [pc, #332]	@ (80059cc <HAL_DMA_IRQHandler+0x1d4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d022      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a51      	ldr	r2, [pc, #324]	@ (80059d0 <HAL_DMA_IRQHandler+0x1d8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01d      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a50      	ldr	r2, [pc, #320]	@ (80059d4 <HAL_DMA_IRQHandler+0x1dc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d018      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a4e      	ldr	r2, [pc, #312]	@ (80059d8 <HAL_DMA_IRQHandler+0x1e0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a4d      	ldr	r2, [pc, #308]	@ (80059dc <HAL_DMA_IRQHandler+0x1e4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a4b      	ldr	r2, [pc, #300]	@ (80059e0 <HAL_DMA_IRQHandler+0x1e8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4a      	ldr	r2, [pc, #296]	@ (80059e4 <HAL_DMA_IRQHandler+0x1ec>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a48      	ldr	r2, [pc, #288]	@ (80059e8 <HAL_DMA_IRQHandler+0x1f0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d101      	bne.n	80058ce <HAL_DMA_IRQHandler+0xd6>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <HAL_DMA_IRQHandler+0xd8>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 842b 	beq.w	800612c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	2208      	movs	r2, #8
 80058e0:	409a      	lsls	r2, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80a2 	beq.w	8005a30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2e      	ldr	r2, [pc, #184]	@ (80059ac <HAL_DMA_IRQHandler+0x1b4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d04a      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2d      	ldr	r2, [pc, #180]	@ (80059b0 <HAL_DMA_IRQHandler+0x1b8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d045      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a2b      	ldr	r2, [pc, #172]	@ (80059b4 <HAL_DMA_IRQHandler+0x1bc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d040      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2a      	ldr	r2, [pc, #168]	@ (80059b8 <HAL_DMA_IRQHandler+0x1c0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d03b      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a28      	ldr	r2, [pc, #160]	@ (80059bc <HAL_DMA_IRQHandler+0x1c4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d036      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a27      	ldr	r2, [pc, #156]	@ (80059c0 <HAL_DMA_IRQHandler+0x1c8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d031      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a25      	ldr	r2, [pc, #148]	@ (80059c4 <HAL_DMA_IRQHandler+0x1cc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02c      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a24      	ldr	r2, [pc, #144]	@ (80059c8 <HAL_DMA_IRQHandler+0x1d0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d027      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a22      	ldr	r2, [pc, #136]	@ (80059cc <HAL_DMA_IRQHandler+0x1d4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a21      	ldr	r2, [pc, #132]	@ (80059d0 <HAL_DMA_IRQHandler+0x1d8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d01d      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1f      	ldr	r2, [pc, #124]	@ (80059d4 <HAL_DMA_IRQHandler+0x1dc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1e      	ldr	r2, [pc, #120]	@ (80059d8 <HAL_DMA_IRQHandler+0x1e0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1c      	ldr	r2, [pc, #112]	@ (80059dc <HAL_DMA_IRQHandler+0x1e4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1b      	ldr	r2, [pc, #108]	@ (80059e0 <HAL_DMA_IRQHandler+0x1e8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a19      	ldr	r2, [pc, #100]	@ (80059e4 <HAL_DMA_IRQHandler+0x1ec>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_DMA_IRQHandler+0x194>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a18      	ldr	r2, [pc, #96]	@ (80059e8 <HAL_DMA_IRQHandler+0x1f0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d12f      	bne.n	80059ec <HAL_DMA_IRQHandler+0x1f4>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf14      	ite	ne
 800599a:	2301      	movne	r3, #1
 800599c:	2300      	moveq	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	e02e      	b.n	8005a00 <HAL_DMA_IRQHandler+0x208>
 80059a2:	bf00      	nop
 80059a4:	24000010 	.word	0x24000010
 80059a8:	1b4e81b5 	.word	0x1b4e81b5
 80059ac:	40020010 	.word	0x40020010
 80059b0:	40020028 	.word	0x40020028
 80059b4:	40020040 	.word	0x40020040
 80059b8:	40020058 	.word	0x40020058
 80059bc:	40020070 	.word	0x40020070
 80059c0:	40020088 	.word	0x40020088
 80059c4:	400200a0 	.word	0x400200a0
 80059c8:	400200b8 	.word	0x400200b8
 80059cc:	40020410 	.word	0x40020410
 80059d0:	40020428 	.word	0x40020428
 80059d4:	40020440 	.word	0x40020440
 80059d8:	40020458 	.word	0x40020458
 80059dc:	40020470 	.word	0x40020470
 80059e0:	40020488 	.word	0x40020488
 80059e4:	400204a0 	.word	0x400204a0
 80059e8:	400204b8 	.word	0x400204b8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf14      	ite	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	2300      	moveq	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0204 	bic.w	r2, r2, #4
 8005a12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a28:	f043 0201 	orr.w	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d06e      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a69      	ldr	r2, [pc, #420]	@ (8005bf0 <HAL_DMA_IRQHandler+0x3f8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d04a      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a67      	ldr	r2, [pc, #412]	@ (8005bf4 <HAL_DMA_IRQHandler+0x3fc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d045      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a66      	ldr	r2, [pc, #408]	@ (8005bf8 <HAL_DMA_IRQHandler+0x400>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d040      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a64      	ldr	r2, [pc, #400]	@ (8005bfc <HAL_DMA_IRQHandler+0x404>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d03b      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a63      	ldr	r2, [pc, #396]	@ (8005c00 <HAL_DMA_IRQHandler+0x408>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d036      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a61      	ldr	r2, [pc, #388]	@ (8005c04 <HAL_DMA_IRQHandler+0x40c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d031      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a60      	ldr	r2, [pc, #384]	@ (8005c08 <HAL_DMA_IRQHandler+0x410>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d02c      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a5e      	ldr	r2, [pc, #376]	@ (8005c0c <HAL_DMA_IRQHandler+0x414>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d027      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a5d      	ldr	r2, [pc, #372]	@ (8005c10 <HAL_DMA_IRQHandler+0x418>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a5b      	ldr	r2, [pc, #364]	@ (8005c14 <HAL_DMA_IRQHandler+0x41c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a5a      	ldr	r2, [pc, #360]	@ (8005c18 <HAL_DMA_IRQHandler+0x420>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a58      	ldr	r2, [pc, #352]	@ (8005c1c <HAL_DMA_IRQHandler+0x424>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a57      	ldr	r2, [pc, #348]	@ (8005c20 <HAL_DMA_IRQHandler+0x428>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a55      	ldr	r2, [pc, #340]	@ (8005c24 <HAL_DMA_IRQHandler+0x42c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a54      	ldr	r2, [pc, #336]	@ (8005c28 <HAL_DMA_IRQHandler+0x430>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2ee>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a52      	ldr	r2, [pc, #328]	@ (8005c2c <HAL_DMA_IRQHandler+0x434>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d10a      	bne.n	8005afc <HAL_DMA_IRQHandler+0x304>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e003      	b.n	8005b04 <HAL_DMA_IRQHandler+0x30c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00d      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2201      	movs	r2, #1
 8005b12:	409a      	lsls	r2, r3
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1c:	f043 0202 	orr.w	r2, r3, #2
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 808f 	beq.w	8005c58 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf0 <HAL_DMA_IRQHandler+0x3f8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d04a      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf4 <HAL_DMA_IRQHandler+0x3fc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d045      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a29      	ldr	r2, [pc, #164]	@ (8005bf8 <HAL_DMA_IRQHandler+0x400>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d040      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a27      	ldr	r2, [pc, #156]	@ (8005bfc <HAL_DMA_IRQHandler+0x404>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d03b      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a26      	ldr	r2, [pc, #152]	@ (8005c00 <HAL_DMA_IRQHandler+0x408>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d036      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a24      	ldr	r2, [pc, #144]	@ (8005c04 <HAL_DMA_IRQHandler+0x40c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d031      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a23      	ldr	r2, [pc, #140]	@ (8005c08 <HAL_DMA_IRQHandler+0x410>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d02c      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a21      	ldr	r2, [pc, #132]	@ (8005c0c <HAL_DMA_IRQHandler+0x414>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d027      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a20      	ldr	r2, [pc, #128]	@ (8005c10 <HAL_DMA_IRQHandler+0x418>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d022      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1e      	ldr	r2, [pc, #120]	@ (8005c14 <HAL_DMA_IRQHandler+0x41c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01d      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <HAL_DMA_IRQHandler+0x420>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1b      	ldr	r2, [pc, #108]	@ (8005c1c <HAL_DMA_IRQHandler+0x424>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c20 <HAL_DMA_IRQHandler+0x428>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	@ (8005c24 <HAL_DMA_IRQHandler+0x42c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a17      	ldr	r2, [pc, #92]	@ (8005c28 <HAL_DMA_IRQHandler+0x430>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3e2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	@ (8005c2c <HAL_DMA_IRQHandler+0x434>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d12a      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x438>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf14      	ite	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	2300      	moveq	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	e023      	b.n	8005c38 <HAL_DMA_IRQHandler+0x440>
 8005bf0:	40020010 	.word	0x40020010
 8005bf4:	40020028 	.word	0x40020028
 8005bf8:	40020040 	.word	0x40020040
 8005bfc:	40020058 	.word	0x40020058
 8005c00:	40020070 	.word	0x40020070
 8005c04:	40020088 	.word	0x40020088
 8005c08:	400200a0 	.word	0x400200a0
 8005c0c:	400200b8 	.word	0x400200b8
 8005c10:	40020410 	.word	0x40020410
 8005c14:	40020428 	.word	0x40020428
 8005c18:	40020440 	.word	0x40020440
 8005c1c:	40020458 	.word	0x40020458
 8005c20:	40020470 	.word	0x40020470
 8005c24:	40020488 	.word	0x40020488
 8005c28:	400204a0 	.word	0x400204a0
 8005c2c:	400204b8 	.word	0x400204b8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2204      	movs	r2, #4
 8005c46:	409a      	lsls	r2, r3
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c50:	f043 0204 	orr.w	r2, r3, #4
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2210      	movs	r2, #16
 8005c62:	409a      	lsls	r2, r3
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80a6 	beq.w	8005dba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a85      	ldr	r2, [pc, #532]	@ (8005e88 <HAL_DMA_IRQHandler+0x690>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d04a      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a83      	ldr	r2, [pc, #524]	@ (8005e8c <HAL_DMA_IRQHandler+0x694>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d045      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a82      	ldr	r2, [pc, #520]	@ (8005e90 <HAL_DMA_IRQHandler+0x698>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d040      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a80      	ldr	r2, [pc, #512]	@ (8005e94 <HAL_DMA_IRQHandler+0x69c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d03b      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a7f      	ldr	r2, [pc, #508]	@ (8005e98 <HAL_DMA_IRQHandler+0x6a0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d036      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a7d      	ldr	r2, [pc, #500]	@ (8005e9c <HAL_DMA_IRQHandler+0x6a4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d031      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a7c      	ldr	r2, [pc, #496]	@ (8005ea0 <HAL_DMA_IRQHandler+0x6a8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d02c      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a7a      	ldr	r2, [pc, #488]	@ (8005ea4 <HAL_DMA_IRQHandler+0x6ac>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d027      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a79      	ldr	r2, [pc, #484]	@ (8005ea8 <HAL_DMA_IRQHandler+0x6b0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d022      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a77      	ldr	r2, [pc, #476]	@ (8005eac <HAL_DMA_IRQHandler+0x6b4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01d      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a76      	ldr	r2, [pc, #472]	@ (8005eb0 <HAL_DMA_IRQHandler+0x6b8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d018      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a74      	ldr	r2, [pc, #464]	@ (8005eb4 <HAL_DMA_IRQHandler+0x6bc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a73      	ldr	r2, [pc, #460]	@ (8005eb8 <HAL_DMA_IRQHandler+0x6c0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a71      	ldr	r2, [pc, #452]	@ (8005ebc <HAL_DMA_IRQHandler+0x6c4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a70      	ldr	r2, [pc, #448]	@ (8005ec0 <HAL_DMA_IRQHandler+0x6c8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x516>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec4 <HAL_DMA_IRQHandler+0x6cc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d10a      	bne.n	8005d24 <HAL_DMA_IRQHandler+0x52c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	e009      	b.n	8005d38 <HAL_DMA_IRQHandler+0x540>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf14      	ite	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	2300      	moveq	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d03e      	beq.n	8005dba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	2210      	movs	r2, #16
 8005d46:	409a      	lsls	r2, r3
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d018      	beq.n	8005d8c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d108      	bne.n	8005d7a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d024      	beq.n	8005dba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
 8005d78:	e01f      	b.n	8005dba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01b      	beq.n	8005dba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3
 8005d8a:	e016      	b.n	8005dba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0208 	bic.w	r2, r2, #8
 8005da8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	409a      	lsls	r2, r3
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8110 	beq.w	8005ff0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e88 <HAL_DMA_IRQHandler+0x690>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d04a      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2b      	ldr	r2, [pc, #172]	@ (8005e8c <HAL_DMA_IRQHandler+0x694>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d045      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a29      	ldr	r2, [pc, #164]	@ (8005e90 <HAL_DMA_IRQHandler+0x698>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d040      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a28      	ldr	r2, [pc, #160]	@ (8005e94 <HAL_DMA_IRQHandler+0x69c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d03b      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a26      	ldr	r2, [pc, #152]	@ (8005e98 <HAL_DMA_IRQHandler+0x6a0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d036      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a25      	ldr	r2, [pc, #148]	@ (8005e9c <HAL_DMA_IRQHandler+0x6a4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d031      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a23      	ldr	r2, [pc, #140]	@ (8005ea0 <HAL_DMA_IRQHandler+0x6a8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d02c      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a22      	ldr	r2, [pc, #136]	@ (8005ea4 <HAL_DMA_IRQHandler+0x6ac>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d027      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a20      	ldr	r2, [pc, #128]	@ (8005ea8 <HAL_DMA_IRQHandler+0x6b0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d022      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005eac <HAL_DMA_IRQHandler+0x6b4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d01d      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb0 <HAL_DMA_IRQHandler+0x6b8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d018      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb4 <HAL_DMA_IRQHandler+0x6bc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005eb8 <HAL_DMA_IRQHandler+0x6c0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a19      	ldr	r2, [pc, #100]	@ (8005ebc <HAL_DMA_IRQHandler+0x6c4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a17      	ldr	r2, [pc, #92]	@ (8005ec0 <HAL_DMA_IRQHandler+0x6c8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x678>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <HAL_DMA_IRQHandler+0x6cc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d12b      	bne.n	8005ec8 <HAL_DMA_IRQHandler+0x6d0>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e02a      	b.n	8005edc <HAL_DMA_IRQHandler+0x6e4>
 8005e86:	bf00      	nop
 8005e88:	40020010 	.word	0x40020010
 8005e8c:	40020028 	.word	0x40020028
 8005e90:	40020040 	.word	0x40020040
 8005e94:	40020058 	.word	0x40020058
 8005e98:	40020070 	.word	0x40020070
 8005e9c:	40020088 	.word	0x40020088
 8005ea0:	400200a0 	.word	0x400200a0
 8005ea4:	400200b8 	.word	0x400200b8
 8005ea8:	40020410 	.word	0x40020410
 8005eac:	40020428 	.word	0x40020428
 8005eb0:	40020440 	.word	0x40020440
 8005eb4:	40020458 	.word	0x40020458
 8005eb8:	40020470 	.word	0x40020470
 8005ebc:	40020488 	.word	0x40020488
 8005ec0:	400204a0 	.word	0x400204a0
 8005ec4:	400204b8 	.word	0x400204b8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bf14      	ite	ne
 8005ed6:	2301      	movne	r3, #1
 8005ed8:	2300      	moveq	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8087 	beq.w	8005ff0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2220      	movs	r2, #32
 8005eec:	409a      	lsls	r2, r3
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d139      	bne.n	8005f72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0216 	bic.w	r2, r2, #22
 8005f0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695a      	ldr	r2, [r3, #20]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d103      	bne.n	8005f2e <HAL_DMA_IRQHandler+0x736>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0208 	bic.w	r2, r2, #8
 8005f3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	223f      	movs	r2, #63	@ 0x3f
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 834a 	beq.w	80065fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
          }
          return;
 8005f70:	e344      	b.n	80065fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d018      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d108      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d02c      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
 8005f9e:	e027      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d023      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
 8005fb0:	e01e      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10f      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0210 	bic.w	r2, r2, #16
 8005fce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8306 	beq.w	8006606 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8088 	beq.w	8006118 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2204      	movs	r2, #4
 800600c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a7a      	ldr	r2, [pc, #488]	@ (8006200 <HAL_DMA_IRQHandler+0xa08>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d04a      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a79      	ldr	r2, [pc, #484]	@ (8006204 <HAL_DMA_IRQHandler+0xa0c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d045      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a77      	ldr	r2, [pc, #476]	@ (8006208 <HAL_DMA_IRQHandler+0xa10>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d040      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a76      	ldr	r2, [pc, #472]	@ (800620c <HAL_DMA_IRQHandler+0xa14>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d03b      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a74      	ldr	r2, [pc, #464]	@ (8006210 <HAL_DMA_IRQHandler+0xa18>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d036      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a73      	ldr	r2, [pc, #460]	@ (8006214 <HAL_DMA_IRQHandler+0xa1c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d031      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a71      	ldr	r2, [pc, #452]	@ (8006218 <HAL_DMA_IRQHandler+0xa20>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d02c      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a70      	ldr	r2, [pc, #448]	@ (800621c <HAL_DMA_IRQHandler+0xa24>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d027      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a6e      	ldr	r2, [pc, #440]	@ (8006220 <HAL_DMA_IRQHandler+0xa28>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d022      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a6d      	ldr	r2, [pc, #436]	@ (8006224 <HAL_DMA_IRQHandler+0xa2c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d01d      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a6b      	ldr	r2, [pc, #428]	@ (8006228 <HAL_DMA_IRQHandler+0xa30>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d018      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6a      	ldr	r2, [pc, #424]	@ (800622c <HAL_DMA_IRQHandler+0xa34>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a68      	ldr	r2, [pc, #416]	@ (8006230 <HAL_DMA_IRQHandler+0xa38>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00e      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a67      	ldr	r2, [pc, #412]	@ (8006234 <HAL_DMA_IRQHandler+0xa3c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d009      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a65      	ldr	r2, [pc, #404]	@ (8006238 <HAL_DMA_IRQHandler+0xa40>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x8b8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a64      	ldr	r2, [pc, #400]	@ (800623c <HAL_DMA_IRQHandler+0xa44>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d108      	bne.n	80060c2 <HAL_DMA_IRQHandler+0x8ca>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e007      	b.n	80060d2 <HAL_DMA_IRQHandler+0x8da>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0201 	bic.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3301      	adds	r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060da:	429a      	cmp	r2, r3
 80060dc:	d307      	bcc.n	80060ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f2      	bne.n	80060d2 <HAL_DMA_IRQHandler+0x8da>
 80060ec:	e000      	b.n	80060f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80060ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2203      	movs	r2, #3
 8006102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006106:	e003      	b.n	8006110 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 8272 	beq.w	8006606 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
 800612a:	e26c      	b.n	8006606 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a43      	ldr	r2, [pc, #268]	@ (8006240 <HAL_DMA_IRQHandler+0xa48>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d022      	beq.n	800617c <HAL_DMA_IRQHandler+0x984>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a42      	ldr	r2, [pc, #264]	@ (8006244 <HAL_DMA_IRQHandler+0xa4c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d01d      	beq.n	800617c <HAL_DMA_IRQHandler+0x984>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a40      	ldr	r2, [pc, #256]	@ (8006248 <HAL_DMA_IRQHandler+0xa50>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d018      	beq.n	800617c <HAL_DMA_IRQHandler+0x984>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a3f      	ldr	r2, [pc, #252]	@ (800624c <HAL_DMA_IRQHandler+0xa54>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_DMA_IRQHandler+0x984>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a3d      	ldr	r2, [pc, #244]	@ (8006250 <HAL_DMA_IRQHandler+0xa58>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_DMA_IRQHandler+0x984>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a3c      	ldr	r2, [pc, #240]	@ (8006254 <HAL_DMA_IRQHandler+0xa5c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_DMA_IRQHandler+0x984>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a3a      	ldr	r2, [pc, #232]	@ (8006258 <HAL_DMA_IRQHandler+0xa60>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_DMA_IRQHandler+0x984>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a39      	ldr	r2, [pc, #228]	@ (800625c <HAL_DMA_IRQHandler+0xa64>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d101      	bne.n	8006180 <HAL_DMA_IRQHandler+0x988>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <HAL_DMA_IRQHandler+0x98a>
 8006180:	2300      	movs	r3, #0
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 823f 	beq.w	8006606 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	2204      	movs	r2, #4
 800619a:	409a      	lsls	r2, r3
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80cd 	beq.w	8006340 <HAL_DMA_IRQHandler+0xb48>
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80c7 	beq.w	8006340 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	2204      	movs	r2, #4
 80061bc:	409a      	lsls	r2, r3
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d049      	beq.n	8006260 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8210 	beq.w	8006600 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e8:	e20a      	b.n	8006600 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 8206 	beq.w	8006600 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061fc:	e200      	b.n	8006600 <HAL_DMA_IRQHandler+0xe08>
 80061fe:	bf00      	nop
 8006200:	40020010 	.word	0x40020010
 8006204:	40020028 	.word	0x40020028
 8006208:	40020040 	.word	0x40020040
 800620c:	40020058 	.word	0x40020058
 8006210:	40020070 	.word	0x40020070
 8006214:	40020088 	.word	0x40020088
 8006218:	400200a0 	.word	0x400200a0
 800621c:	400200b8 	.word	0x400200b8
 8006220:	40020410 	.word	0x40020410
 8006224:	40020428 	.word	0x40020428
 8006228:	40020440 	.word	0x40020440
 800622c:	40020458 	.word	0x40020458
 8006230:	40020470 	.word	0x40020470
 8006234:	40020488 	.word	0x40020488
 8006238:	400204a0 	.word	0x400204a0
 800623c:	400204b8 	.word	0x400204b8
 8006240:	58025408 	.word	0x58025408
 8006244:	5802541c 	.word	0x5802541c
 8006248:	58025430 	.word	0x58025430
 800624c:	58025444 	.word	0x58025444
 8006250:	58025458 	.word	0x58025458
 8006254:	5802546c 	.word	0x5802546c
 8006258:	58025480 	.word	0x58025480
 800625c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d160      	bne.n	800632c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a7f      	ldr	r2, [pc, #508]	@ (800646c <HAL_DMA_IRQHandler+0xc74>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d04a      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a7d      	ldr	r2, [pc, #500]	@ (8006470 <HAL_DMA_IRQHandler+0xc78>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d045      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a7c      	ldr	r2, [pc, #496]	@ (8006474 <HAL_DMA_IRQHandler+0xc7c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d040      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a7a      	ldr	r2, [pc, #488]	@ (8006478 <HAL_DMA_IRQHandler+0xc80>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d03b      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a79      	ldr	r2, [pc, #484]	@ (800647c <HAL_DMA_IRQHandler+0xc84>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d036      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a77      	ldr	r2, [pc, #476]	@ (8006480 <HAL_DMA_IRQHandler+0xc88>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d031      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a76      	ldr	r2, [pc, #472]	@ (8006484 <HAL_DMA_IRQHandler+0xc8c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d02c      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a74      	ldr	r2, [pc, #464]	@ (8006488 <HAL_DMA_IRQHandler+0xc90>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d027      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a73      	ldr	r2, [pc, #460]	@ (800648c <HAL_DMA_IRQHandler+0xc94>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a71      	ldr	r2, [pc, #452]	@ (8006490 <HAL_DMA_IRQHandler+0xc98>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01d      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a70      	ldr	r2, [pc, #448]	@ (8006494 <HAL_DMA_IRQHandler+0xc9c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d018      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006498 <HAL_DMA_IRQHandler+0xca0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a6d      	ldr	r2, [pc, #436]	@ (800649c <HAL_DMA_IRQHandler+0xca4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a6b      	ldr	r2, [pc, #428]	@ (80064a0 <HAL_DMA_IRQHandler+0xca8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6a      	ldr	r2, [pc, #424]	@ (80064a4 <HAL_DMA_IRQHandler+0xcac>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_DMA_IRQHandler+0xb12>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a68      	ldr	r2, [pc, #416]	@ (80064a8 <HAL_DMA_IRQHandler+0xcb0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d108      	bne.n	800631c <HAL_DMA_IRQHandler+0xb24>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0208 	bic.w	r2, r2, #8
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e007      	b.n	800632c <HAL_DMA_IRQHandler+0xb34>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0204 	bic.w	r2, r2, #4
 800632a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 8165 	beq.w	8006600 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800633e:	e15f      	b.n	8006600 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2202      	movs	r2, #2
 800634a:	409a      	lsls	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4013      	ands	r3, r2
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80c5 	beq.w	80064e0 <HAL_DMA_IRQHandler+0xce8>
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80bf 	beq.w	80064e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	2202      	movs	r2, #2
 800636c:	409a      	lsls	r2, r3
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d018      	beq.n	80063ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 813a 	beq.w	8006604 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006398:	e134      	b.n	8006604 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8130 	beq.w	8006604 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063ac:	e12a      	b.n	8006604 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 8089 	bne.w	80064cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2b      	ldr	r2, [pc, #172]	@ (800646c <HAL_DMA_IRQHandler+0xc74>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d04a      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a29      	ldr	r2, [pc, #164]	@ (8006470 <HAL_DMA_IRQHandler+0xc78>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d045      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a28      	ldr	r2, [pc, #160]	@ (8006474 <HAL_DMA_IRQHandler+0xc7c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d040      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a26      	ldr	r2, [pc, #152]	@ (8006478 <HAL_DMA_IRQHandler+0xc80>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d03b      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a25      	ldr	r2, [pc, #148]	@ (800647c <HAL_DMA_IRQHandler+0xc84>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d036      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a23      	ldr	r2, [pc, #140]	@ (8006480 <HAL_DMA_IRQHandler+0xc88>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d031      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a22      	ldr	r2, [pc, #136]	@ (8006484 <HAL_DMA_IRQHandler+0xc8c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d02c      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a20      	ldr	r2, [pc, #128]	@ (8006488 <HAL_DMA_IRQHandler+0xc90>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d027      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1f      	ldr	r2, [pc, #124]	@ (800648c <HAL_DMA_IRQHandler+0xc94>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d022      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1d      	ldr	r2, [pc, #116]	@ (8006490 <HAL_DMA_IRQHandler+0xc98>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01d      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <HAL_DMA_IRQHandler+0xc9c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1a      	ldr	r2, [pc, #104]	@ (8006498 <HAL_DMA_IRQHandler+0xca0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a19      	ldr	r2, [pc, #100]	@ (800649c <HAL_DMA_IRQHandler+0xca4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a17      	ldr	r2, [pc, #92]	@ (80064a0 <HAL_DMA_IRQHandler+0xca8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a16      	ldr	r2, [pc, #88]	@ (80064a4 <HAL_DMA_IRQHandler+0xcac>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_DMA_IRQHandler+0xc62>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a14      	ldr	r2, [pc, #80]	@ (80064a8 <HAL_DMA_IRQHandler+0xcb0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d128      	bne.n	80064ac <HAL_DMA_IRQHandler+0xcb4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0214 	bic.w	r2, r2, #20
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	e027      	b.n	80064bc <HAL_DMA_IRQHandler+0xcc4>
 800646c:	40020010 	.word	0x40020010
 8006470:	40020028 	.word	0x40020028
 8006474:	40020040 	.word	0x40020040
 8006478:	40020058 	.word	0x40020058
 800647c:	40020070 	.word	0x40020070
 8006480:	40020088 	.word	0x40020088
 8006484:	400200a0 	.word	0x400200a0
 8006488:	400200b8 	.word	0x400200b8
 800648c:	40020410 	.word	0x40020410
 8006490:	40020428 	.word	0x40020428
 8006494:	40020440 	.word	0x40020440
 8006498:	40020458 	.word	0x40020458
 800649c:	40020470 	.word	0x40020470
 80064a0:	40020488 	.word	0x40020488
 80064a4:	400204a0 	.word	0x400204a0
 80064a8:	400204b8 	.word	0x400204b8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 020a 	bic.w	r2, r2, #10
 80064ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8097 	beq.w	8006604 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064de:	e091      	b.n	8006604 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2208      	movs	r2, #8
 80064ea:	409a      	lsls	r2, r3
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 8088 	beq.w	8006606 <HAL_DMA_IRQHandler+0xe0e>
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8082 	beq.w	8006606 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a41      	ldr	r2, [pc, #260]	@ (800660c <HAL_DMA_IRQHandler+0xe14>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d04a      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3f      	ldr	r2, [pc, #252]	@ (8006610 <HAL_DMA_IRQHandler+0xe18>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d045      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a3e      	ldr	r2, [pc, #248]	@ (8006614 <HAL_DMA_IRQHandler+0xe1c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d040      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a3c      	ldr	r2, [pc, #240]	@ (8006618 <HAL_DMA_IRQHandler+0xe20>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d03b      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3b      	ldr	r2, [pc, #236]	@ (800661c <HAL_DMA_IRQHandler+0xe24>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d036      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a39      	ldr	r2, [pc, #228]	@ (8006620 <HAL_DMA_IRQHandler+0xe28>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d031      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a38      	ldr	r2, [pc, #224]	@ (8006624 <HAL_DMA_IRQHandler+0xe2c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d02c      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a36      	ldr	r2, [pc, #216]	@ (8006628 <HAL_DMA_IRQHandler+0xe30>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d027      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a35      	ldr	r2, [pc, #212]	@ (800662c <HAL_DMA_IRQHandler+0xe34>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d022      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a33      	ldr	r2, [pc, #204]	@ (8006630 <HAL_DMA_IRQHandler+0xe38>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01d      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a32      	ldr	r2, [pc, #200]	@ (8006634 <HAL_DMA_IRQHandler+0xe3c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a30      	ldr	r2, [pc, #192]	@ (8006638 <HAL_DMA_IRQHandler+0xe40>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2f      	ldr	r2, [pc, #188]	@ (800663c <HAL_DMA_IRQHandler+0xe44>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00e      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2d      	ldr	r2, [pc, #180]	@ (8006640 <HAL_DMA_IRQHandler+0xe48>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d009      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2c      	ldr	r2, [pc, #176]	@ (8006644 <HAL_DMA_IRQHandler+0xe4c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xdaa>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a2a      	ldr	r2, [pc, #168]	@ (8006648 <HAL_DMA_IRQHandler+0xe50>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d108      	bne.n	80065b4 <HAL_DMA_IRQHandler+0xdbc>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 021c 	bic.w	r2, r2, #28
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e007      	b.n	80065c4 <HAL_DMA_IRQHandler+0xdcc>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 020e 	bic.w	r2, r2, #14
 80065c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	2201      	movs	r2, #1
 80065ce:	409a      	lsls	r2, r3
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
 80065fa:	e004      	b.n	8006606 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80065fc:	bf00      	nop
 80065fe:	e002      	b.n	8006606 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006600:	bf00      	nop
 8006602:	e000      	b.n	8006606 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006604:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006606:	3728      	adds	r7, #40	@ 0x28
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40020010 	.word	0x40020010
 8006610:	40020028 	.word	0x40020028
 8006614:	40020040 	.word	0x40020040
 8006618:	40020058 	.word	0x40020058
 800661c:	40020070 	.word	0x40020070
 8006620:	40020088 	.word	0x40020088
 8006624:	400200a0 	.word	0x400200a0
 8006628:	400200b8 	.word	0x400200b8
 800662c:	40020410 	.word	0x40020410
 8006630:	40020428 	.word	0x40020428
 8006634:	40020440 	.word	0x40020440
 8006638:	40020458 	.word	0x40020458
 800663c:	40020470 	.word	0x40020470
 8006640:	40020488 	.word	0x40020488
 8006644:	400204a0 	.word	0x400204a0
 8006648:	400204b8 	.word	0x400204b8

0800664c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006664:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a7f      	ldr	r2, [pc, #508]	@ (8006868 <DMA_SetConfig+0x21c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d072      	beq.n	8006756 <DMA_SetConfig+0x10a>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a7d      	ldr	r2, [pc, #500]	@ (800686c <DMA_SetConfig+0x220>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d06d      	beq.n	8006756 <DMA_SetConfig+0x10a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a7c      	ldr	r2, [pc, #496]	@ (8006870 <DMA_SetConfig+0x224>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d068      	beq.n	8006756 <DMA_SetConfig+0x10a>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a7a      	ldr	r2, [pc, #488]	@ (8006874 <DMA_SetConfig+0x228>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d063      	beq.n	8006756 <DMA_SetConfig+0x10a>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a79      	ldr	r2, [pc, #484]	@ (8006878 <DMA_SetConfig+0x22c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d05e      	beq.n	8006756 <DMA_SetConfig+0x10a>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a77      	ldr	r2, [pc, #476]	@ (800687c <DMA_SetConfig+0x230>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d059      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a76      	ldr	r2, [pc, #472]	@ (8006880 <DMA_SetConfig+0x234>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d054      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a74      	ldr	r2, [pc, #464]	@ (8006884 <DMA_SetConfig+0x238>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d04f      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a73      	ldr	r2, [pc, #460]	@ (8006888 <DMA_SetConfig+0x23c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d04a      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a71      	ldr	r2, [pc, #452]	@ (800688c <DMA_SetConfig+0x240>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d045      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a70      	ldr	r2, [pc, #448]	@ (8006890 <DMA_SetConfig+0x244>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d040      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006894 <DMA_SetConfig+0x248>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d03b      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a6d      	ldr	r2, [pc, #436]	@ (8006898 <DMA_SetConfig+0x24c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d036      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a6b      	ldr	r2, [pc, #428]	@ (800689c <DMA_SetConfig+0x250>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d031      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a6a      	ldr	r2, [pc, #424]	@ (80068a0 <DMA_SetConfig+0x254>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d02c      	beq.n	8006756 <DMA_SetConfig+0x10a>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a68      	ldr	r2, [pc, #416]	@ (80068a4 <DMA_SetConfig+0x258>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d027      	beq.n	8006756 <DMA_SetConfig+0x10a>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a67      	ldr	r2, [pc, #412]	@ (80068a8 <DMA_SetConfig+0x25c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d022      	beq.n	8006756 <DMA_SetConfig+0x10a>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a65      	ldr	r2, [pc, #404]	@ (80068ac <DMA_SetConfig+0x260>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d01d      	beq.n	8006756 <DMA_SetConfig+0x10a>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a64      	ldr	r2, [pc, #400]	@ (80068b0 <DMA_SetConfig+0x264>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d018      	beq.n	8006756 <DMA_SetConfig+0x10a>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a62      	ldr	r2, [pc, #392]	@ (80068b4 <DMA_SetConfig+0x268>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <DMA_SetConfig+0x10a>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a61      	ldr	r2, [pc, #388]	@ (80068b8 <DMA_SetConfig+0x26c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00e      	beq.n	8006756 <DMA_SetConfig+0x10a>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a5f      	ldr	r2, [pc, #380]	@ (80068bc <DMA_SetConfig+0x270>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d009      	beq.n	8006756 <DMA_SetConfig+0x10a>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a5e      	ldr	r2, [pc, #376]	@ (80068c0 <DMA_SetConfig+0x274>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d004      	beq.n	8006756 <DMA_SetConfig+0x10a>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a5c      	ldr	r2, [pc, #368]	@ (80068c4 <DMA_SetConfig+0x278>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d101      	bne.n	800675a <DMA_SetConfig+0x10e>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <DMA_SetConfig+0x110>
 800675a:	2300      	movs	r3, #0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00d      	beq.n	800677c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006768:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800677a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a39      	ldr	r2, [pc, #228]	@ (8006868 <DMA_SetConfig+0x21c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d04a      	beq.n	800681c <DMA_SetConfig+0x1d0>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a38      	ldr	r2, [pc, #224]	@ (800686c <DMA_SetConfig+0x220>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d045      	beq.n	800681c <DMA_SetConfig+0x1d0>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a36      	ldr	r2, [pc, #216]	@ (8006870 <DMA_SetConfig+0x224>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d040      	beq.n	800681c <DMA_SetConfig+0x1d0>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a35      	ldr	r2, [pc, #212]	@ (8006874 <DMA_SetConfig+0x228>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d03b      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a33      	ldr	r2, [pc, #204]	@ (8006878 <DMA_SetConfig+0x22c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d036      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a32      	ldr	r2, [pc, #200]	@ (800687c <DMA_SetConfig+0x230>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d031      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a30      	ldr	r2, [pc, #192]	@ (8006880 <DMA_SetConfig+0x234>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d02c      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006884 <DMA_SetConfig+0x238>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d027      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006888 <DMA_SetConfig+0x23c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d022      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2c      	ldr	r2, [pc, #176]	@ (800688c <DMA_SetConfig+0x240>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d01d      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006890 <DMA_SetConfig+0x244>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d018      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a29      	ldr	r2, [pc, #164]	@ (8006894 <DMA_SetConfig+0x248>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a27      	ldr	r2, [pc, #156]	@ (8006898 <DMA_SetConfig+0x24c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00e      	beq.n	800681c <DMA_SetConfig+0x1d0>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a26      	ldr	r2, [pc, #152]	@ (800689c <DMA_SetConfig+0x250>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <DMA_SetConfig+0x1d0>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a24      	ldr	r2, [pc, #144]	@ (80068a0 <DMA_SetConfig+0x254>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <DMA_SetConfig+0x1d0>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a23      	ldr	r2, [pc, #140]	@ (80068a4 <DMA_SetConfig+0x258>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d101      	bne.n	8006820 <DMA_SetConfig+0x1d4>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <DMA_SetConfig+0x1d6>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d059      	beq.n	80068da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	223f      	movs	r2, #63	@ 0x3f
 8006830:	409a      	lsls	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006844:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	2b40      	cmp	r3, #64	@ 0x40
 8006854:	d138      	bne.n	80068c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006866:	e086      	b.n	8006976 <DMA_SetConfig+0x32a>
 8006868:	40020010 	.word	0x40020010
 800686c:	40020028 	.word	0x40020028
 8006870:	40020040 	.word	0x40020040
 8006874:	40020058 	.word	0x40020058
 8006878:	40020070 	.word	0x40020070
 800687c:	40020088 	.word	0x40020088
 8006880:	400200a0 	.word	0x400200a0
 8006884:	400200b8 	.word	0x400200b8
 8006888:	40020410 	.word	0x40020410
 800688c:	40020428 	.word	0x40020428
 8006890:	40020440 	.word	0x40020440
 8006894:	40020458 	.word	0x40020458
 8006898:	40020470 	.word	0x40020470
 800689c:	40020488 	.word	0x40020488
 80068a0:	400204a0 	.word	0x400204a0
 80068a4:	400204b8 	.word	0x400204b8
 80068a8:	58025408 	.word	0x58025408
 80068ac:	5802541c 	.word	0x5802541c
 80068b0:	58025430 	.word	0x58025430
 80068b4:	58025444 	.word	0x58025444
 80068b8:	58025458 	.word	0x58025458
 80068bc:	5802546c 	.word	0x5802546c
 80068c0:	58025480 	.word	0x58025480
 80068c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	60da      	str	r2, [r3, #12]
}
 80068d8:	e04d      	b.n	8006976 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a29      	ldr	r2, [pc, #164]	@ (8006984 <DMA_SetConfig+0x338>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d022      	beq.n	800692a <DMA_SetConfig+0x2de>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a27      	ldr	r2, [pc, #156]	@ (8006988 <DMA_SetConfig+0x33c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01d      	beq.n	800692a <DMA_SetConfig+0x2de>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a26      	ldr	r2, [pc, #152]	@ (800698c <DMA_SetConfig+0x340>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d018      	beq.n	800692a <DMA_SetConfig+0x2de>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a24      	ldr	r2, [pc, #144]	@ (8006990 <DMA_SetConfig+0x344>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <DMA_SetConfig+0x2de>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a23      	ldr	r2, [pc, #140]	@ (8006994 <DMA_SetConfig+0x348>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00e      	beq.n	800692a <DMA_SetConfig+0x2de>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a21      	ldr	r2, [pc, #132]	@ (8006998 <DMA_SetConfig+0x34c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d009      	beq.n	800692a <DMA_SetConfig+0x2de>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a20      	ldr	r2, [pc, #128]	@ (800699c <DMA_SetConfig+0x350>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d004      	beq.n	800692a <DMA_SetConfig+0x2de>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1e      	ldr	r2, [pc, #120]	@ (80069a0 <DMA_SetConfig+0x354>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <DMA_SetConfig+0x2e2>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <DMA_SetConfig+0x2e4>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d020      	beq.n	8006976 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2201      	movs	r2, #1
 800693e:	409a      	lsls	r2, r3
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	2b40      	cmp	r3, #64	@ 0x40
 8006952:	d108      	bne.n	8006966 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	60da      	str	r2, [r3, #12]
}
 8006964:	e007      	b.n	8006976 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	60da      	str	r2, [r3, #12]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	58025408 	.word	0x58025408
 8006988:	5802541c 	.word	0x5802541c
 800698c:	58025430 	.word	0x58025430
 8006990:	58025444 	.word	0x58025444
 8006994:	58025458 	.word	0x58025458
 8006998:	5802546c 	.word	0x5802546c
 800699c:	58025480 	.word	0x58025480
 80069a0:	58025494 	.word	0x58025494

080069a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a42      	ldr	r2, [pc, #264]	@ (8006abc <DMA_CalcBaseAndBitshift+0x118>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d04a      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a41      	ldr	r2, [pc, #260]	@ (8006ac0 <DMA_CalcBaseAndBitshift+0x11c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d045      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a3f      	ldr	r2, [pc, #252]	@ (8006ac4 <DMA_CalcBaseAndBitshift+0x120>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d040      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a3e      	ldr	r2, [pc, #248]	@ (8006ac8 <DMA_CalcBaseAndBitshift+0x124>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d03b      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a3c      	ldr	r2, [pc, #240]	@ (8006acc <DMA_CalcBaseAndBitshift+0x128>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d036      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a3b      	ldr	r2, [pc, #236]	@ (8006ad0 <DMA_CalcBaseAndBitshift+0x12c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d031      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a39      	ldr	r2, [pc, #228]	@ (8006ad4 <DMA_CalcBaseAndBitshift+0x130>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d02c      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a38      	ldr	r2, [pc, #224]	@ (8006ad8 <DMA_CalcBaseAndBitshift+0x134>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d027      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a36      	ldr	r2, [pc, #216]	@ (8006adc <DMA_CalcBaseAndBitshift+0x138>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d022      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a35      	ldr	r2, [pc, #212]	@ (8006ae0 <DMA_CalcBaseAndBitshift+0x13c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d01d      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a33      	ldr	r2, [pc, #204]	@ (8006ae4 <DMA_CalcBaseAndBitshift+0x140>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a32      	ldr	r2, [pc, #200]	@ (8006ae8 <DMA_CalcBaseAndBitshift+0x144>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a30      	ldr	r2, [pc, #192]	@ (8006aec <DMA_CalcBaseAndBitshift+0x148>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2f      	ldr	r2, [pc, #188]	@ (8006af0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006af4 <DMA_CalcBaseAndBitshift+0x150>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <DMA_CalcBaseAndBitshift+0xa8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2c      	ldr	r2, [pc, #176]	@ (8006af8 <DMA_CalcBaseAndBitshift+0x154>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <DMA_CalcBaseAndBitshift+0xac>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <DMA_CalcBaseAndBitshift+0xae>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d024      	beq.n	8006aa0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	3b10      	subs	r3, #16
 8006a5e:	4a27      	ldr	r2, [pc, #156]	@ (8006afc <DMA_CalcBaseAndBitshift+0x158>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	091b      	lsrs	r3, r3, #4
 8006a66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	4a24      	ldr	r2, [pc, #144]	@ (8006b00 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a70:	5cd3      	ldrb	r3, [r2, r3]
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d908      	bls.n	8006a90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	4b1f      	ldr	r3, [pc, #124]	@ (8006b04 <DMA_CalcBaseAndBitshift+0x160>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	1d1a      	adds	r2, r3, #4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a8e:	e00d      	b.n	8006aac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	4b1b      	ldr	r3, [pc, #108]	@ (8006b04 <DMA_CalcBaseAndBitshift+0x160>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a9e:	e005      	b.n	8006aac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	40020040 	.word	0x40020040
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	40020070 	.word	0x40020070
 8006ad0:	40020088 	.word	0x40020088
 8006ad4:	400200a0 	.word	0x400200a0
 8006ad8:	400200b8 	.word	0x400200b8
 8006adc:	40020410 	.word	0x40020410
 8006ae0:	40020428 	.word	0x40020428
 8006ae4:	40020440 	.word	0x40020440
 8006ae8:	40020458 	.word	0x40020458
 8006aec:	40020470 	.word	0x40020470
 8006af0:	40020488 	.word	0x40020488
 8006af4:	400204a0 	.word	0x400204a0
 8006af8:	400204b8 	.word	0x400204b8
 8006afc:	aaaaaaab 	.word	0xaaaaaaab
 8006b00:	08012934 	.word	0x08012934
 8006b04:	fffffc00 	.word	0xfffffc00

08006b08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d120      	bne.n	8006b5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d858      	bhi.n	8006bd6 <DMA_CheckFifoParam+0xce>
 8006b24:	a201      	add	r2, pc, #4	@ (adr r2, 8006b2c <DMA_CheckFifoParam+0x24>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b3d 	.word	0x08006b3d
 8006b30:	08006b4f 	.word	0x08006b4f
 8006b34:	08006b3d 	.word	0x08006b3d
 8006b38:	08006bd7 	.word	0x08006bd7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d048      	beq.n	8006bda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b4c:	e045      	b.n	8006bda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b56:	d142      	bne.n	8006bde <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b5c:	e03f      	b.n	8006bde <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b66:	d123      	bne.n	8006bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d838      	bhi.n	8006be2 <DMA_CheckFifoParam+0xda>
 8006b70:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <DMA_CheckFifoParam+0x70>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006b8f 	.word	0x08006b8f
 8006b80:	08006b89 	.word	0x08006b89
 8006b84:	08006ba1 	.word	0x08006ba1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	73fb      	strb	r3, [r7, #15]
        break;
 8006b8c:	e030      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d025      	beq.n	8006be6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b9e:	e022      	b.n	8006be6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ba8:	d11f      	bne.n	8006bea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006bae:	e01c      	b.n	8006bea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d902      	bls.n	8006bbe <DMA_CheckFifoParam+0xb6>
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d003      	beq.n	8006bc4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006bbc:	e018      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8006bc2:	e015      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00e      	beq.n	8006bee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8006bd4:	e00b      	b.n	8006bee <DMA_CheckFifoParam+0xe6>
        break;
 8006bd6:	bf00      	nop
 8006bd8:	e00a      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8006bda:	bf00      	nop
 8006bdc:	e008      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8006bde:	bf00      	nop
 8006be0:	e006      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8006be2:	bf00      	nop
 8006be4:	e004      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8006be6:	bf00      	nop
 8006be8:	e002      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8006bea:	bf00      	nop
 8006bec:	e000      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
    break;
 8006bee:	bf00      	nop
    }
  }

  return status;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop

08006c00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a38      	ldr	r2, [pc, #224]	@ (8006cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d022      	beq.n	8006c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a36      	ldr	r2, [pc, #216]	@ (8006cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d01d      	beq.n	8006c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a35      	ldr	r2, [pc, #212]	@ (8006cfc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d018      	beq.n	8006c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a33      	ldr	r2, [pc, #204]	@ (8006d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a32      	ldr	r2, [pc, #200]	@ (8006d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00e      	beq.n	8006c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a30      	ldr	r2, [pc, #192]	@ (8006d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d009      	beq.n	8006c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8006d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d004      	beq.n	8006c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2d      	ldr	r2, [pc, #180]	@ (8006d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d101      	bne.n	8006c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01a      	beq.n	8006c9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	3b08      	subs	r3, #8
 8006c70:	4a28      	ldr	r2, [pc, #160]	@ (8006d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	091b      	lsrs	r3, r3, #4
 8006c78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4b26      	ldr	r3, [pc, #152]	@ (8006d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	461a      	mov	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a24      	ldr	r2, [pc, #144]	@ (8006d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f003 031f 	and.w	r3, r3, #31
 8006c94:	2201      	movs	r2, #1
 8006c96:	409a      	lsls	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c9c:	e024      	b.n	8006ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	3b10      	subs	r3, #16
 8006ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	091b      	lsrs	r3, r3, #4
 8006cae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d806      	bhi.n	8006cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4a1b      	ldr	r2, [pc, #108]	@ (8006d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d902      	bls.n	8006cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4b18      	ldr	r3, [pc, #96]	@ (8006d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	461a      	mov	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a16      	ldr	r2, [pc, #88]	@ (8006d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006cd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	409a      	lsls	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	58025408 	.word	0x58025408
 8006cf8:	5802541c 	.word	0x5802541c
 8006cfc:	58025430 	.word	0x58025430
 8006d00:	58025444 	.word	0x58025444
 8006d04:	58025458 	.word	0x58025458
 8006d08:	5802546c 	.word	0x5802546c
 8006d0c:	58025480 	.word	0x58025480
 8006d10:	58025494 	.word	0x58025494
 8006d14:	cccccccd 	.word	0xcccccccd
 8006d18:	16009600 	.word	0x16009600
 8006d1c:	58025880 	.word	0x58025880
 8006d20:	aaaaaaab 	.word	0xaaaaaaab
 8006d24:	400204b8 	.word	0x400204b8
 8006d28:	4002040f 	.word	0x4002040f
 8006d2c:	10008200 	.word	0x10008200
 8006d30:	40020880 	.word	0x40020880

08006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d04a      	beq.n	8006de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d847      	bhi.n	8006de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a25      	ldr	r2, [pc, #148]	@ (8006dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d022      	beq.n	8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a24      	ldr	r2, [pc, #144]	@ (8006df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d01d      	beq.n	8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a22      	ldr	r2, [pc, #136]	@ (8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d018      	beq.n	8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a21      	ldr	r2, [pc, #132]	@ (8006df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d013      	beq.n	8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00e      	beq.n	8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1e      	ldr	r2, [pc, #120]	@ (8006e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d009      	beq.n	8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1c      	ldr	r2, [pc, #112]	@ (8006e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d004      	beq.n	8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d101      	bne.n	8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006da4:	2300      	movs	r3, #0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4b17      	ldr	r3, [pc, #92]	@ (8006e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	461a      	mov	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a15      	ldr	r2, [pc, #84]	@ (8006e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006dbc:	671a      	str	r2, [r3, #112]	@ 0x70
 8006dbe:	e009      	b.n	8006dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4b14      	ldr	r3, [pc, #80]	@ (8006e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a11      	ldr	r2, [pc, #68]	@ (8006e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006dd2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	2201      	movs	r2, #1
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006de0:	bf00      	nop
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	58025408 	.word	0x58025408
 8006df0:	5802541c 	.word	0x5802541c
 8006df4:	58025430 	.word	0x58025430
 8006df8:	58025444 	.word	0x58025444
 8006dfc:	58025458 	.word	0x58025458
 8006e00:	5802546c 	.word	0x5802546c
 8006e04:	58025480 	.word	0x58025480
 8006e08:	58025494 	.word	0x58025494
 8006e0c:	1600963f 	.word	0x1600963f
 8006e10:	58025940 	.word	0x58025940
 8006e14:	1000823f 	.word	0x1000823f
 8006e18:	40020940 	.word	0x40020940

08006e1c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b098      	sub	sp, #96	@ 0x60
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006e24:	4a84      	ldr	r2, [pc, #528]	@ (8007038 <HAL_FDCAN_Init+0x21c>)
 8006e26:	f107 030c 	add.w	r3, r7, #12
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	224c      	movs	r2, #76	@ 0x4c
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f00a ff04 	bl	8011c3c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e1c6      	b.n	80071cc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a7e      	ldr	r2, [pc, #504]	@ (800703c <HAL_FDCAN_Init+0x220>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d106      	bne.n	8006e56 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006e50:	461a      	mov	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fb f8ae 	bl	8001fcc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699a      	ldr	r2, [r3, #24]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0210 	bic.w	r2, r2, #16
 8006e7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e80:	f7fb fd1a 	bl	80028b8 <HAL_GetTick>
 8006e84:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e86:	e014      	b.n	8006eb2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e88:	f7fb fd16 	bl	80028b8 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b0a      	cmp	r3, #10
 8006e94:	d90d      	bls.n	8006eb2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e9c:	f043 0201 	orr.w	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e18c      	b.n	80071cc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d0e3      	beq.n	8006e88 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ed0:	f7fb fcf2 	bl	80028b8 <HAL_GetTick>
 8006ed4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ed6:	e014      	b.n	8006f02 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ed8:	f7fb fcee 	bl	80028b8 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b0a      	cmp	r3, #10
 8006ee4:	d90d      	bls.n	8006f02 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eec:	f043 0201 	orr.w	r2, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2203      	movs	r2, #3
 8006efa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e164      	b.n	80071cc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0e3      	beq.n	8006ed8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0202 	orr.w	r2, r2, #2
 8006f1e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7c1b      	ldrb	r3, [r3, #16]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d108      	bne.n	8006f3a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f36:	619a      	str	r2, [r3, #24]
 8006f38:	e007      	b.n	8006f4a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f48:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7c5b      	ldrb	r3, [r3, #17]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d108      	bne.n	8006f64 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f60:	619a      	str	r2, [r3, #24]
 8006f62:	e007      	b.n	8006f74 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f72:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7c9b      	ldrb	r3, [r3, #18]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d108      	bne.n	8006f8e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f8a:	619a      	str	r2, [r3, #24]
 8006f8c:	e007      	b.n	8006f9e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f9c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006fc2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0210 	bic.w	r2, r2, #16
 8006fd2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d108      	bne.n	8006fee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0204 	orr.w	r2, r2, #4
 8006fea:	619a      	str	r2, [r3, #24]
 8006fec:	e030      	b.n	8007050 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d02c      	beq.n	8007050 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d020      	beq.n	8007040 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	699a      	ldr	r2, [r3, #24]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800700c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0210 	orr.w	r2, r2, #16
 800701c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d114      	bne.n	8007050 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0220 	orr.w	r2, r2, #32
 8007034:	619a      	str	r2, [r3, #24]
 8007036:	e00b      	b.n	8007050 <HAL_FDCAN_Init+0x234>
 8007038:	080128d8 	.word	0x080128d8
 800703c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0220 	orr.w	r2, r2, #32
 800704e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	3b01      	subs	r3, #1
 8007056:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	3b01      	subs	r3, #1
 800705e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007060:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007068:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	3b01      	subs	r3, #1
 8007072:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007078:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800707a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007084:	d115      	bne.n	80070b2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007090:	3b01      	subs	r3, #1
 8007092:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007094:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709a:	3b01      	subs	r3, #1
 800709c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800709e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a6:	3b01      	subs	r3, #1
 80070a8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80070ae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80070b0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d8:	4413      	add	r3, r2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d011      	beq.n	8007102 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80070e6:	f023 0107 	bic.w	r1, r3, #7
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	3360      	adds	r3, #96	@ 0x60
 80070f2:	443b      	add	r3, r7
 80070f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d011      	beq.n	800712e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007112:	f023 0107 	bic.w	r1, r3, #7
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	3360      	adds	r3, #96	@ 0x60
 800711e:	443b      	add	r3, r7
 8007120:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007132:	2b00      	cmp	r3, #0
 8007134:	d012      	beq.n	800715c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800713e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	3360      	adds	r3, #96	@ 0x60
 800714a:	443b      	add	r3, r7
 800714c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007150:	011a      	lsls	r2, r3, #4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007160:	2b00      	cmp	r3, #0
 8007162:	d012      	beq.n	800718a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800716c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	3360      	adds	r3, #96	@ 0x60
 8007178:	443b      	add	r3, r7
 800717a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800717e:	021a      	lsls	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a11      	ldr	r2, [pc, #68]	@ (80071d4 <HAL_FDCAN_Init+0x3b8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d107      	bne.n	80071a4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f022 0203 	bic.w	r2, r2, #3
 80071a2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fde5 	bl	8007d8c <FDCAN_CalcultateRamBlockAddresses>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80071c8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3760      	adds	r7, #96	@ 0x60
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	4000a000 	.word	0x4000a000

080071d8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80071e8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d002      	beq.n	80071f6 <HAL_FDCAN_ConfigFilter+0x1e>
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d157      	bne.n	80072a6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d12b      	bne.n	8007256 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	2b07      	cmp	r3, #7
 8007204:	d10d      	bne.n	8007222 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007212:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007218:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800721a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e00e      	b.n	8007240 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800722e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007236:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e025      	b.n	80072a2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	075a      	lsls	r2, r3, #29
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b07      	cmp	r3, #7
 800726a:	d103      	bne.n	8007274 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	e006      	b.n	8007282 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	079a      	lsls	r2, r3, #30
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4413      	add	r3, r2
 800728e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	3304      	adds	r3, #4
 800729a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	e008      	b.n	80072b8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072ac:	f043 0202 	orr.w	r2, r3, #2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
  }
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d111      	bne.n	80072fc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0201 	bic.w	r2, r2, #1
 80072ee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e008      	b.n	800730e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007302:	f043 0204 	orr.w	r2, r3, #4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b086      	sub	sp, #24
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d141      	bne.n	80073b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800733a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d109      	bne.n	8007356 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007348:	f043 0220 	orr.w	r2, r3, #32
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e038      	b.n	80073c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800735e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800736c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e026      	b.n	80073c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fe81 	bl	8008098 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2101      	movs	r1, #1
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	fa01 f202 	lsl.w	r2, r1, r2
 80073a2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80073a6:	2201      	movs	r2, #1
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	409a      	lsls	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e008      	b.n	80073c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073bc:	f043 0208 	orr.w	r2, r3, #8
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
  }
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b08b      	sub	sp, #44	@ 0x2c
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80073e8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80073ea:	7efb      	ldrb	r3, [r7, #27]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	f040 8149 	bne.w	8007684 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b40      	cmp	r3, #64	@ 0x40
 80073f6:	d14c      	bne.n	8007492 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007400:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d109      	bne.n	800741c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800740e:	f043 0220 	orr.w	r2, r3, #32
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e13c      	b.n	8007696 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007428:	2b00      	cmp	r3, #0
 800742a:	d109      	bne.n	8007440 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007432:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e12a      	b.n	8007696 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007448:	0e1b      	lsrs	r3, r3, #24
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b01      	cmp	r3, #1
 8007450:	d10a      	bne.n	8007468 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800745a:	0fdb      	lsrs	r3, r3, #31
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007464:	2301      	movs	r3, #1
 8007466:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007470:	0a1b      	lsrs	r3, r3, #8
 8007472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007484:	69f9      	ldr	r1, [r7, #28]
 8007486:	fb01 f303 	mul.w	r3, r1, r3
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007490:	e068      	b.n	8007564 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b41      	cmp	r3, #65	@ 0x41
 8007496:	d14c      	bne.n	8007532 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074ae:	f043 0220 	orr.w	r2, r3, #32
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e0ec      	b.n	8007696 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d109      	bne.n	80074e0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e0da      	b.n	8007696 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074e8:	0e1b      	lsrs	r3, r3, #24
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10a      	bne.n	8007508 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074fa:	0fdb      	lsrs	r3, r3, #31
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007504:	2301      	movs	r3, #1
 8007506:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007510:	0a1b      	lsrs	r3, r3, #8
 8007512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	4413      	add	r3, r2
 800751a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007524:	69f9      	ldr	r1, [r7, #28]
 8007526:	fb01 f303 	mul.w	r3, r1, r3
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007530:	e018      	b.n	8007564 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	429a      	cmp	r2, r3
 800753a:	d309      	bcc.n	8007550 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007542:	f043 0220 	orr.w	r2, r3, #32
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e0a2      	b.n	8007696 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d107      	bne.n	8007588 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	0c9b      	lsrs	r3, r3, #18
 800757e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e005      	b.n	8007594 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	3304      	adds	r3, #4
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	0c1b      	lsrs	r3, r3, #16
 80075c2:	f003 020f 	and.w	r2, r3, #15
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	0e1b      	lsrs	r3, r3, #24
 80075e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	0fda      	lsrs	r2, r3, #31
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	3304      	adds	r3, #4
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007604:	2300      	movs	r3, #0
 8007606:	623b      	str	r3, [r7, #32]
 8007608:	e00a      	b.n	8007620 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	441a      	add	r2, r3
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	440b      	add	r3, r1
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	3301      	adds	r3, #1
 800761e:	623b      	str	r3, [r7, #32]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	4a1f      	ldr	r2, [pc, #124]	@ (80076a4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8007626:	5cd3      	ldrb	r3, [r2, r3]
 8007628:	461a      	mov	r2, r3
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	4293      	cmp	r3, r2
 800762e:	d3ec      	bcc.n	800760a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b40      	cmp	r3, #64	@ 0x40
 8007634:	d105      	bne.n	8007642 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007640:	e01e      	b.n	8007680 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b41      	cmp	r3, #65	@ 0x41
 8007646:	d105      	bne.n	8007654 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007652:	e015      	b.n	8007680 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b1f      	cmp	r3, #31
 8007658:	d808      	bhi.n	800766c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2101      	movs	r1, #1
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	fa01 f202 	lsl.w	r2, r1, r2
 8007666:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800766a:	e009      	b.n	8007680 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 021f 	and.w	r2, r3, #31
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2101      	movs	r1, #1
 8007678:	fa01 f202 	lsl.w	r2, r1, r2
 800767c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	e008      	b.n	8007696 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800768a:	f043 0208 	orr.w	r2, r3, #8
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	372c      	adds	r7, #44	@ 0x2c
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	0801293c 	.word	0x0801293c

080076a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80076ba:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d002      	beq.n	80076c8 <HAL_FDCAN_ActivateNotification+0x20>
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d155      	bne.n	8007774 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4013      	ands	r3, r2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d108      	bne.n	80076e8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0201 	orr.w	r2, r2, #1
 80076e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076e6:	e014      	b.n	8007712 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4013      	ands	r3, r2
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d108      	bne.n	800770a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0202 	orr.w	r2, r2, #2
 8007706:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007708:	e003      	b.n	8007712 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2203      	movs	r2, #3
 8007710:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007718:	2b00      	cmp	r3, #0
 800771a:	d009      	beq.n	8007730 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	430a      	orrs	r2, r1
 800772c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	430a      	orrs	r2, r1
 800774a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	4b0f      	ldr	r3, [pc, #60]	@ (8007794 <HAL_FDCAN_ActivateNotification+0xec>)
 8007758:	4013      	ands	r3, r2
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	430b      	orrs	r3, r1
 8007760:	6553      	str	r3, [r2, #84]	@ 0x54
 8007762:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	0f9b      	lsrs	r3, r3, #30
 800776a:	490b      	ldr	r1, [pc, #44]	@ (8007798 <HAL_FDCAN_ActivateNotification+0xf0>)
 800776c:	4313      	orrs	r3, r2
 800776e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e008      	b.n	8007786 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800777a:	f043 0202 	orr.w	r2, r3, #2
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	371c      	adds	r7, #28
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	3fcfffff 	.word	0x3fcfffff
 8007798:	4000a800 	.word	0x4000a800

0800779c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b096      	sub	sp, #88	@ 0x58
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80077a4:	4b95      	ldr	r3, [pc, #596]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	079b      	lsls	r3, r3, #30
 80077aa:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80077ac:	4b93      	ldr	r3, [pc, #588]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	079b      	lsls	r3, r3, #30
 80077b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077b4:	4013      	ands	r3, r2
 80077b6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077be:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80077c2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077cc:	4013      	ands	r3, r2
 80077ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077e4:	4013      	ands	r3, r2
 80077e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077fc:	4013      	ands	r3, r2
 80077fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007806:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800780a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007814:	4013      	ands	r3, r2
 8007816:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800781e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8007822:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800782c:	4013      	ands	r3, r2
 800782e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00f      	beq.n	800786a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800785c:	651a      	str	r2, [r3, #80]	@ 0x50
 800785e:	4b67      	ldr	r3, [pc, #412]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 8007860:	2200      	movs	r2, #0
 8007862:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fa44 	bl	8007cf2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800786a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01c      	beq.n	80078ae <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800787a:	2b00      	cmp	r3, #0
 800787c:	d017      	beq.n	80078ae <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007886:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007890:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007892:	4013      	ands	r3, r2
 8007894:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800789e:	651a      	str	r2, [r3, #80]	@ 0x50
 80078a0:	4b56      	ldr	r3, [pc, #344]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80078a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9f9 	bl	8007ca0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80078ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00d      	beq.n	80078d0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078ba:	4b51      	ldr	r3, [pc, #324]	@ (8007a00 <HAL_FDCAN_IRQHandler+0x264>)
 80078bc:	400b      	ands	r3, r1
 80078be:	6513      	str	r3, [r2, #80]	@ 0x50
 80078c0:	4a4e      	ldr	r2, [pc, #312]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 80078c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078c4:	0f9b      	lsrs	r3, r3, #30
 80078c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80078c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9b2 	bl	8007c34 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80078d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00d      	beq.n	80078f2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078dc:	4b48      	ldr	r3, [pc, #288]	@ (8007a00 <HAL_FDCAN_IRQHandler+0x264>)
 80078de:	400b      	ands	r3, r1
 80078e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80078e2:	4a46      	ldr	r2, [pc, #280]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 80078e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078e6:	0f9b      	lsrs	r3, r3, #30
 80078e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80078ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9ac 	bl	8007c4a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80078f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00d      	beq.n	8007914 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80078fe:	4b40      	ldr	r3, [pc, #256]	@ (8007a00 <HAL_FDCAN_IRQHandler+0x264>)
 8007900:	400b      	ands	r3, r1
 8007902:	6513      	str	r3, [r2, #80]	@ 0x50
 8007904:	4a3d      	ldr	r2, [pc, #244]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 8007906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007908:	0f9b      	lsrs	r3, r3, #30
 800790a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800790c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7f9 fe4a 	bl	80015a8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00d      	beq.n	8007936 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007920:	4b37      	ldr	r3, [pc, #220]	@ (8007a00 <HAL_FDCAN_IRQHandler+0x264>)
 8007922:	400b      	ands	r3, r1
 8007924:	6513      	str	r3, [r2, #80]	@ 0x50
 8007926:	4a35      	ldr	r2, [pc, #212]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 8007928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800792a:	0f9b      	lsrs	r3, r3, #30
 800792c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800792e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f995 	bl	8007c60 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00f      	beq.n	8007960 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007952:	651a      	str	r2, [r3, #80]	@ 0x50
 8007954:	4b29      	ldr	r3, [pc, #164]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 8007956:	2200      	movs	r2, #0
 8007958:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f98b 	bl	8007c76 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007966:	2b00      	cmp	r3, #0
 8007968:	d01c      	beq.n	80079a4 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800796a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007970:	2b00      	cmp	r3, #0
 8007972:	d017      	beq.n	80079a4 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800797c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007988:	4013      	ands	r3, r2
 800798a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007994:	651a      	str	r2, [r3, #80]	@ 0x50
 8007996:	4b19      	ldr	r3, [pc, #100]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 8007998:	2200      	movs	r2, #0
 800799a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800799c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f973 	bl	8007c8a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80079a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00f      	beq.n	80079ce <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80079ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80079c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80079c2:	4b0e      	ldr	r3, [pc, #56]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f974 	bl	8007cb6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80079ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d015      	beq.n	8007a04 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80079d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d010      	beq.n	8007a04 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80079ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80079ec:	4b03      	ldr	r3, [pc, #12]	@ (80079fc <HAL_FDCAN_IRQHandler+0x260>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f969 	bl	8007cca <HAL_FDCAN_TimestampWraparoundCallback>
 80079f8:	e004      	b.n	8007a04 <HAL_FDCAN_IRQHandler+0x268>
 80079fa:	bf00      	nop
 80079fc:	4000a800 	.word	0x4000a800
 8007a00:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00f      	beq.n	8007a2e <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007a20:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a22:	4b81      	ldr	r3, [pc, #516]	@ (8007c28 <HAL_FDCAN_IRQHandler+0x48c>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f958 	bl	8007cde <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d014      	beq.n	8007a62 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00f      	beq.n	8007a62 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007a4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a4c:	4b76      	ldr	r3, [pc, #472]	@ (8007c28 <HAL_FDCAN_IRQHandler+0x48c>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00d      	beq.n	8007a84 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8007c2c <HAL_FDCAN_IRQHandler+0x490>)
 8007a70:	400b      	ands	r3, r1
 8007a72:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a74:	4a6c      	ldr	r2, [pc, #432]	@ (8007c28 <HAL_FDCAN_IRQHandler+0x48c>)
 8007a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a78:	0f9b      	lsrs	r3, r3, #30
 8007a7a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007a7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f94b 	bl	8007d1a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d011      	beq.n	8007aae <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a90:	4b66      	ldr	r3, [pc, #408]	@ (8007c2c <HAL_FDCAN_IRQHandler+0x490>)
 8007a92:	400b      	ands	r3, r1
 8007a94:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a96:	4a64      	ldr	r2, [pc, #400]	@ (8007c28 <HAL_FDCAN_IRQHandler+0x48c>)
 8007a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a9a:	0f9b      	lsrs	r3, r3, #30
 8007a9c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a5f      	ldr	r2, [pc, #380]	@ (8007c30 <HAL_FDCAN_IRQHandler+0x494>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	f040 80aa 	bne.w	8007c0e <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80a2 	beq.w	8007c0e <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	f003 030f 	and.w	r3, r3, #15
 8007ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ade:	4013      	ands	r3, r2
 8007ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007aec:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007af6:	4013      	ands	r3, r2
 8007af8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b0e:	4013      	ands	r3, r2
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007b1c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b24:	6a3a      	ldr	r2, [r7, #32]
 8007b26:	4013      	ands	r3, r2
 8007b28:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007b34:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b48:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b5e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007b60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8e4 	bl	8007d30 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b74:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f8e4 	bl	8007d46 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d019      	beq.n	8007bbc <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d014      	beq.n	8007bbc <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ba8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2240      	movs	r2, #64	@ 0x40
 8007bb0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	6939      	ldr	r1, [r7, #16]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f8d0 	bl	8007d5c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d007      	beq.n	8007bd2 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f8d1 	bl	8007d74 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	6a3a      	ldr	r2, [r7, #32]
 8007bde:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	431a      	orrs	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f874 	bl	8007d06 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007c1e:	bf00      	nop
 8007c20:	3758      	adds	r7, #88	@ 0x58
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	4000a800 	.word	0x4000a800
 8007c2c:	3fcfffff 	.word	0x3fcfffff
 8007c30:	4000a000 	.word	0x4000a000

08007c34 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d98:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007da2:	4ba7      	ldr	r3, [pc, #668]	@ (8008040 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	0091      	lsls	r1, r2, #2
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	430b      	orrs	r3, r1
 8007db0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dbc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	041a      	lsls	r2, r3, #16
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007de2:	4b97      	ldr	r3, [pc, #604]	@ (8008040 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	0091      	lsls	r1, r2, #2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6812      	ldr	r2, [r2, #0]
 8007dee:	430b      	orrs	r3, r1
 8007df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e04:	041a      	lsls	r2, r3, #16
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007e24:	4b86      	ldr	r3, [pc, #536]	@ (8008040 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e26:	4013      	ands	r3, r2
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	0091      	lsls	r1, r2, #2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6812      	ldr	r2, [r2, #0]
 8007e30:	430b      	orrs	r3, r1
 8007e32:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e3e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	041a      	lsls	r2, r3, #16
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007e5a:	fb02 f303 	mul.w	r3, r2, r3
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007e6c:	4b74      	ldr	r3, [pc, #464]	@ (8008040 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	0091      	lsls	r1, r2, #2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e86:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e8e:	041a      	lsls	r2, r3, #16
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007eb4:	4b62      	ldr	r3, [pc, #392]	@ (8008040 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	0091      	lsls	r1, r2, #2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007ee0:	4b57      	ldr	r3, [pc, #348]	@ (8008040 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	0091      	lsls	r1, r2, #2
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	430b      	orrs	r3, r1
 8007eee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007efa:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f02:	041a      	lsls	r2, r3, #16
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	4413      	add	r3, r2
 8007f18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007f22:	4b47      	ldr	r3, [pc, #284]	@ (8008040 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	0091      	lsls	r1, r2, #2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007f3c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f44:	041a      	lsls	r2, r3, #16
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007f58:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f60:	061a      	lsls	r2, r3, #24
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f70:	4b34      	ldr	r3, [pc, #208]	@ (8008044 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007f72:	4413      	add	r3, r2
 8007f74:	009a      	lsls	r2, r3, #2
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	441a      	add	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007fa6:	fb01 f303 	mul.w	r3, r1, r3
 8007faa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007fac:	441a      	add	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007fd6:	fb01 f303 	mul.w	r3, r1, r3
 8007fda:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007fdc:	441a      	add	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	441a      	add	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008006:	fb01 f303 	mul.w	r3, r1, r3
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	441a      	add	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008028:	441a      	add	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008036:	4a04      	ldr	r2, [pc, #16]	@ (8008048 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d915      	bls.n	8008068 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800803c:	e006      	b.n	800804c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800803e:	bf00      	nop
 8008040:	ffff0003 	.word	0xffff0003
 8008044:	10002b00 	.word	0x10002b00
 8008048:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2203      	movs	r2, #3
 8008060:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e010      	b.n	800808a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	e005      	b.n	800807c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3304      	adds	r3, #4
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d3f3      	bcc.n	8008070 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop

08008098 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008098:	b480      	push	{r7}
 800809a:	b089      	sub	sp, #36	@ 0x24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80080b6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80080be:	4313      	orrs	r3, r2
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	e00a      	b.n	80080da <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80080cc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80080d2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80080d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080d8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80080e4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80080ea:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80080f0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80080f8:	4313      	orrs	r3, r2
 80080fa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	3304      	adds	r3, #4
 800811c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	3304      	adds	r3, #4
 8008128:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	e020      	b.n	8008172 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	3303      	adds	r3, #3
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	3302      	adds	r3, #2
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	440b      	add	r3, r1
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008148:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	3301      	adds	r3, #1
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	440b      	add	r3, r1
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008156:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	440a      	add	r2, r1
 800815e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008160:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	3304      	adds	r3, #4
 800816a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	3304      	adds	r3, #4
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	4a06      	ldr	r2, [pc, #24]	@ (8008190 <FDCAN_CopyMessageToRAM+0xf8>)
 8008178:	5cd3      	ldrb	r3, [r2, r3]
 800817a:	461a      	mov	r2, r3
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	4293      	cmp	r3, r2
 8008180:	d3d6      	bcc.n	8008130 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	3724      	adds	r7, #36	@ 0x24
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	0801293c 	.word	0x0801293c

08008194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008194:	b480      	push	{r7}
 8008196:	b089      	sub	sp, #36	@ 0x24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800819e:	2300      	movs	r3, #0
 80081a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80081a2:	4b86      	ldr	r3, [pc, #536]	@ (80083bc <HAL_GPIO_Init+0x228>)
 80081a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081a6:	e18c      	b.n	80084c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	2101      	movs	r1, #1
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	fa01 f303 	lsl.w	r3, r1, r3
 80081b4:	4013      	ands	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 817e 	beq.w	80084bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d005      	beq.n	80081d8 <HAL_GPIO_Init+0x44>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d130      	bne.n	800823a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	2203      	movs	r2, #3
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	43db      	mvns	r3, r3
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	4013      	ands	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	fa02 f303 	lsl.w	r3, r2, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	4313      	orrs	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800820e:	2201      	movs	r2, #1
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	43db      	mvns	r3, r3
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	4013      	ands	r3, r2
 800821c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	f003 0201 	and.w	r2, r3, #1
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	4313      	orrs	r3, r2
 8008232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	2b03      	cmp	r3, #3
 8008244:	d017      	beq.n	8008276 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	2203      	movs	r2, #3
 8008252:	fa02 f303 	lsl.w	r3, r2, r3
 8008256:	43db      	mvns	r3, r3
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	4013      	ands	r3, r2
 800825c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	4313      	orrs	r3, r2
 800826e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d123      	bne.n	80082ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	08da      	lsrs	r2, r3, #3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3208      	adds	r2, #8
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	220f      	movs	r2, #15
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	43db      	mvns	r3, r3
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	4013      	ands	r3, r2
 80082a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	08da      	lsrs	r2, r3, #3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3208      	adds	r2, #8
 80082c4:	69b9      	ldr	r1, [r7, #24]
 80082c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	2203      	movs	r2, #3
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
 80082da:	43db      	mvns	r3, r3
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	4013      	ands	r3, r2
 80082e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f003 0203 	and.w	r2, r3, #3
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80d8 	beq.w	80084bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800830c:	4b2c      	ldr	r3, [pc, #176]	@ (80083c0 <HAL_GPIO_Init+0x22c>)
 800830e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008312:	4a2b      	ldr	r2, [pc, #172]	@ (80083c0 <HAL_GPIO_Init+0x22c>)
 8008314:	f043 0302 	orr.w	r3, r3, #2
 8008318:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800831c:	4b28      	ldr	r3, [pc, #160]	@ (80083c0 <HAL_GPIO_Init+0x22c>)
 800831e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800832a:	4a26      	ldr	r2, [pc, #152]	@ (80083c4 <HAL_GPIO_Init+0x230>)
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	089b      	lsrs	r3, r3, #2
 8008330:	3302      	adds	r3, #2
 8008332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	220f      	movs	r2, #15
 8008342:	fa02 f303 	lsl.w	r3, r2, r3
 8008346:	43db      	mvns	r3, r3
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	4013      	ands	r3, r2
 800834c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a1d      	ldr	r2, [pc, #116]	@ (80083c8 <HAL_GPIO_Init+0x234>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d04a      	beq.n	80083ec <HAL_GPIO_Init+0x258>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a1c      	ldr	r2, [pc, #112]	@ (80083cc <HAL_GPIO_Init+0x238>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d02b      	beq.n	80083b6 <HAL_GPIO_Init+0x222>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a1b      	ldr	r2, [pc, #108]	@ (80083d0 <HAL_GPIO_Init+0x23c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d025      	beq.n	80083b2 <HAL_GPIO_Init+0x21e>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a1a      	ldr	r2, [pc, #104]	@ (80083d4 <HAL_GPIO_Init+0x240>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d01f      	beq.n	80083ae <HAL_GPIO_Init+0x21a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a19      	ldr	r2, [pc, #100]	@ (80083d8 <HAL_GPIO_Init+0x244>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d019      	beq.n	80083aa <HAL_GPIO_Init+0x216>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a18      	ldr	r2, [pc, #96]	@ (80083dc <HAL_GPIO_Init+0x248>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d013      	beq.n	80083a6 <HAL_GPIO_Init+0x212>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a17      	ldr	r2, [pc, #92]	@ (80083e0 <HAL_GPIO_Init+0x24c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00d      	beq.n	80083a2 <HAL_GPIO_Init+0x20e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a16      	ldr	r2, [pc, #88]	@ (80083e4 <HAL_GPIO_Init+0x250>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d007      	beq.n	800839e <HAL_GPIO_Init+0x20a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a15      	ldr	r2, [pc, #84]	@ (80083e8 <HAL_GPIO_Init+0x254>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d101      	bne.n	800839a <HAL_GPIO_Init+0x206>
 8008396:	2309      	movs	r3, #9
 8008398:	e029      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 800839a:	230a      	movs	r3, #10
 800839c:	e027      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 800839e:	2307      	movs	r3, #7
 80083a0:	e025      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 80083a2:	2306      	movs	r3, #6
 80083a4:	e023      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 80083a6:	2305      	movs	r3, #5
 80083a8:	e021      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 80083aa:	2304      	movs	r3, #4
 80083ac:	e01f      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 80083ae:	2303      	movs	r3, #3
 80083b0:	e01d      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e01b      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e019      	b.n	80083ee <HAL_GPIO_Init+0x25a>
 80083ba:	bf00      	nop
 80083bc:	58000080 	.word	0x58000080
 80083c0:	58024400 	.word	0x58024400
 80083c4:	58000400 	.word	0x58000400
 80083c8:	58020000 	.word	0x58020000
 80083cc:	58020400 	.word	0x58020400
 80083d0:	58020800 	.word	0x58020800
 80083d4:	58020c00 	.word	0x58020c00
 80083d8:	58021000 	.word	0x58021000
 80083dc:	58021400 	.word	0x58021400
 80083e0:	58021800 	.word	0x58021800
 80083e4:	58021c00 	.word	0x58021c00
 80083e8:	58022400 	.word	0x58022400
 80083ec:	2300      	movs	r3, #0
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	f002 0203 	and.w	r2, r2, #3
 80083f4:	0092      	lsls	r2, r2, #2
 80083f6:	4093      	lsls	r3, r2
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083fe:	4938      	ldr	r1, [pc, #224]	@ (80084e0 <HAL_GPIO_Init+0x34c>)
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	089b      	lsrs	r3, r3, #2
 8008404:	3302      	adds	r3, #2
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800840c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	43db      	mvns	r3, r3
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	4013      	ands	r3, r2
 800841c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800843a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	43db      	mvns	r3, r3
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	4013      	ands	r3, r2
 800844a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d003      	beq.n	8008460 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	4313      	orrs	r3, r2
 800845e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008460:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	43db      	mvns	r3, r3
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	4013      	ands	r3, r2
 8008476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	4313      	orrs	r3, r2
 800848a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	43db      	mvns	r3, r3
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	4013      	ands	r3, r2
 80084a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	3301      	adds	r3, #1
 80084c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f47f ae6b 	bne.w	80081a8 <HAL_GPIO_Init+0x14>
  }
}
 80084d2:	bf00      	nop
 80084d4:	bf00      	nop
 80084d6:	3724      	adds	r7, #36	@ 0x24
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	58000400 	.word	0x58000400

080084e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691a      	ldr	r2, [r3, #16]
 80084f4:	887b      	ldrh	r3, [r7, #2]
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80084fc:	2301      	movs	r3, #1
 80084fe:	73fb      	strb	r3, [r7, #15]
 8008500:	e001      	b.n	8008506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	807b      	strh	r3, [r7, #2]
 8008520:	4613      	mov	r3, r2
 8008522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008524:	787b      	ldrb	r3, [r7, #1]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800852a:	887a      	ldrh	r2, [r7, #2]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008530:	e003      	b.n	800853a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008532:	887b      	ldrh	r3, [r7, #2]
 8008534:	041a      	lsls	r2, r3, #16
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	619a      	str	r2, [r3, #24]
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008550:	4b19      	ldr	r3, [pc, #100]	@ (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b04      	cmp	r3, #4
 800855a:	d00a      	beq.n	8008572 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800855c:	4b16      	ldr	r3, [pc, #88]	@ (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	429a      	cmp	r2, r3
 8008568:	d001      	beq.n	800856e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e01f      	b.n	80085ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	e01d      	b.n	80085ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008572:	4b11      	ldr	r3, [pc, #68]	@ (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f023 0207 	bic.w	r2, r3, #7
 800857a:	490f      	ldr	r1, [pc, #60]	@ (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4313      	orrs	r3, r2
 8008580:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008582:	f7fa f999 	bl	80028b8 <HAL_GetTick>
 8008586:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008588:	e009      	b.n	800859e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800858a:	f7fa f995 	bl	80028b8 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008598:	d901      	bls.n	800859e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e007      	b.n	80085ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800859e:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085aa:	d1ee      	bne.n	800858a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	58024800 	.word	0x58024800

080085bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08c      	sub	sp, #48	@ 0x30
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e3c8      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 8087 	beq.w	80086ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085dc:	4b88      	ldr	r3, [pc, #544]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085e6:	4b86      	ldr	r3, [pc, #536]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80085e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80085ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	d007      	beq.n	8008602 <HAL_RCC_OscConfig+0x46>
 80085f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f4:	2b18      	cmp	r3, #24
 80085f6:	d110      	bne.n	800861a <HAL_RCC_OscConfig+0x5e>
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d10b      	bne.n	800861a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008602:	4b7f      	ldr	r3, [pc, #508]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d06c      	beq.n	80086e8 <HAL_RCC_OscConfig+0x12c>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d168      	bne.n	80086e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e3a2      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008622:	d106      	bne.n	8008632 <HAL_RCC_OscConfig+0x76>
 8008624:	4b76      	ldr	r3, [pc, #472]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a75      	ldr	r2, [pc, #468]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800862a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	e02e      	b.n	8008690 <HAL_RCC_OscConfig+0xd4>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10c      	bne.n	8008654 <HAL_RCC_OscConfig+0x98>
 800863a:	4b71      	ldr	r3, [pc, #452]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a70      	ldr	r2, [pc, #448]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	4b6e      	ldr	r3, [pc, #440]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a6d      	ldr	r2, [pc, #436]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800864c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	e01d      	b.n	8008690 <HAL_RCC_OscConfig+0xd4>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800865c:	d10c      	bne.n	8008678 <HAL_RCC_OscConfig+0xbc>
 800865e:	4b68      	ldr	r3, [pc, #416]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a67      	ldr	r2, [pc, #412]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	4b65      	ldr	r3, [pc, #404]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a64      	ldr	r2, [pc, #400]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e00b      	b.n	8008690 <HAL_RCC_OscConfig+0xd4>
 8008678:	4b61      	ldr	r3, [pc, #388]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a60      	ldr	r2, [pc, #384]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800867e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	4b5e      	ldr	r3, [pc, #376]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a5d      	ldr	r2, [pc, #372]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800868a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800868e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d013      	beq.n	80086c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008698:	f7fa f90e 	bl	80028b8 <HAL_GetTick>
 800869c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800869e:	e008      	b.n	80086b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086a0:	f7fa f90a 	bl	80028b8 <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	2b64      	cmp	r3, #100	@ 0x64
 80086ac:	d901      	bls.n	80086b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e356      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086b2:	4b53      	ldr	r3, [pc, #332]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0f0      	beq.n	80086a0 <HAL_RCC_OscConfig+0xe4>
 80086be:	e014      	b.n	80086ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c0:	f7fa f8fa 	bl	80028b8 <HAL_GetTick>
 80086c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086c8:	f7fa f8f6 	bl	80028b8 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b64      	cmp	r3, #100	@ 0x64
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e342      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086da:	4b49      	ldr	r3, [pc, #292]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1f0      	bne.n	80086c8 <HAL_RCC_OscConfig+0x10c>
 80086e6:	e000      	b.n	80086ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 808c 	beq.w	8008810 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086f8:	4b41      	ldr	r3, [pc, #260]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008700:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008702:	4b3f      	ldr	r3, [pc, #252]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008706:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <HAL_RCC_OscConfig+0x162>
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	2b18      	cmp	r3, #24
 8008712:	d137      	bne.n	8008784 <HAL_RCC_OscConfig+0x1c8>
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d132      	bne.n	8008784 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800871e:	4b38      	ldr	r3, [pc, #224]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <HAL_RCC_OscConfig+0x17a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e314      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008736:	4b32      	ldr	r3, [pc, #200]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f023 0219 	bic.w	r2, r3, #25
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	492f      	ldr	r1, [pc, #188]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008744:	4313      	orrs	r3, r2
 8008746:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008748:	f7fa f8b6 	bl	80028b8 <HAL_GetTick>
 800874c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800874e:	e008      	b.n	8008762 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008750:	f7fa f8b2 	bl	80028b8 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e2fe      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008762:	4b27      	ldr	r3, [pc, #156]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0304 	and.w	r3, r3, #4
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0f0      	beq.n	8008750 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800876e:	4b24      	ldr	r3, [pc, #144]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	061b      	lsls	r3, r3, #24
 800877c:	4920      	ldr	r1, [pc, #128]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800877e:	4313      	orrs	r3, r2
 8008780:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008782:	e045      	b.n	8008810 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d026      	beq.n	80087da <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800878c:	4b1c      	ldr	r3, [pc, #112]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f023 0219 	bic.w	r2, r3, #25
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	4919      	ldr	r1, [pc, #100]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 800879a:	4313      	orrs	r3, r2
 800879c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879e:	f7fa f88b 	bl	80028b8 <HAL_GetTick>
 80087a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a6:	f7fa f887 	bl	80028b8 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e2d3      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087b8:	4b11      	ldr	r3, [pc, #68]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f0      	beq.n	80087a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	490b      	ldr	r1, [pc, #44]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	604b      	str	r3, [r1, #4]
 80087d8:	e01a      	b.n	8008810 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087da:	4b09      	ldr	r3, [pc, #36]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a08      	ldr	r2, [pc, #32]	@ (8008800 <HAL_RCC_OscConfig+0x244>)
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e6:	f7fa f867 	bl	80028b8 <HAL_GetTick>
 80087ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80087ec:	e00a      	b.n	8008804 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087ee:	f7fa f863 	bl	80028b8 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d903      	bls.n	8008804 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e2af      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
 8008800:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008804:	4b96      	ldr	r3, [pc, #600]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1ee      	bne.n	80087ee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b00      	cmp	r3, #0
 800881a:	d06a      	beq.n	80088f2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800881c:	4b90      	ldr	r3, [pc, #576]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008824:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008826:	4b8e      	ldr	r3, [pc, #568]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	2b08      	cmp	r3, #8
 8008830:	d007      	beq.n	8008842 <HAL_RCC_OscConfig+0x286>
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	2b18      	cmp	r3, #24
 8008836:	d11b      	bne.n	8008870 <HAL_RCC_OscConfig+0x2b4>
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b01      	cmp	r3, #1
 8008840:	d116      	bne.n	8008870 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008842:	4b87      	ldr	r3, [pc, #540]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <HAL_RCC_OscConfig+0x29e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	2b80      	cmp	r3, #128	@ 0x80
 8008854:	d001      	beq.n	800885a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e282      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800885a:	4b81      	ldr	r3, [pc, #516]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	061b      	lsls	r3, r3, #24
 8008868:	497d      	ldr	r1, [pc, #500]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 800886a:	4313      	orrs	r3, r2
 800886c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800886e:	e040      	b.n	80088f2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d023      	beq.n	80088c0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008878:	4b79      	ldr	r3, [pc, #484]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a78      	ldr	r2, [pc, #480]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 800887e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008884:	f7fa f818 	bl	80028b8 <HAL_GetTick>
 8008888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800888c:	f7fa f814 	bl	80028b8 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e260      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800889e:	4b70      	ldr	r3, [pc, #448]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088aa:	4b6d      	ldr	r3, [pc, #436]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	061b      	lsls	r3, r3, #24
 80088b8:	4969      	ldr	r1, [pc, #420]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60cb      	str	r3, [r1, #12]
 80088be:	e018      	b.n	80088f2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80088c0:	4b67      	ldr	r3, [pc, #412]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a66      	ldr	r2, [pc, #408]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80088c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088cc:	f7f9 fff4 	bl	80028b8 <HAL_GetTick>
 80088d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80088d2:	e008      	b.n	80088e6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80088d4:	f7f9 fff0 	bl	80028b8 <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e23c      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80088e6:	4b5e      	ldr	r3, [pc, #376]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1f0      	bne.n	80088d4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d036      	beq.n	800896c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d019      	beq.n	800893a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008906:	4b56      	ldr	r3, [pc, #344]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800890a:	4a55      	ldr	r2, [pc, #340]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 800890c:	f043 0301 	orr.w	r3, r3, #1
 8008910:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008912:	f7f9 ffd1 	bl	80028b8 <HAL_GetTick>
 8008916:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008918:	e008      	b.n	800892c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800891a:	f7f9 ffcd 	bl	80028b8 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d901      	bls.n	800892c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e219      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800892c:	4b4c      	ldr	r3, [pc, #304]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 800892e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0f0      	beq.n	800891a <HAL_RCC_OscConfig+0x35e>
 8008938:	e018      	b.n	800896c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800893a:	4b49      	ldr	r3, [pc, #292]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 800893c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800893e:	4a48      	ldr	r2, [pc, #288]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008946:	f7f9 ffb7 	bl	80028b8 <HAL_GetTick>
 800894a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800894e:	f7f9 ffb3 	bl	80028b8 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e1ff      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008960:	4b3f      	ldr	r3, [pc, #252]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f0      	bne.n	800894e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d036      	beq.n	80089e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d019      	beq.n	80089b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008980:	4b37      	ldr	r3, [pc, #220]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a36      	ldr	r2, [pc, #216]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008986:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800898a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800898c:	f7f9 ff94 	bl	80028b8 <HAL_GetTick>
 8008990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008994:	f7f9 ff90 	bl	80028b8 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e1dc      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80089a6:	4b2e      	ldr	r3, [pc, #184]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f0      	beq.n	8008994 <HAL_RCC_OscConfig+0x3d8>
 80089b2:	e018      	b.n	80089e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a29      	ldr	r2, [pc, #164]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80089ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80089c0:	f7f9 ff7a 	bl	80028b8 <HAL_GetTick>
 80089c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80089c6:	e008      	b.n	80089da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089c8:	f7f9 ff76 	bl	80028b8 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e1c2      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80089da:	4b21      	ldr	r3, [pc, #132]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1f0      	bne.n	80089c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 8086 	beq.w	8008b00 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80089f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008a64 <HAL_RCC_OscConfig+0x4a8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008a64 <HAL_RCC_OscConfig+0x4a8>)
 80089fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a00:	f7f9 ff5a 	bl	80028b8 <HAL_GetTick>
 8008a04:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a06:	e008      	b.n	8008a1a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a08:	f7f9 ff56 	bl	80028b8 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b64      	cmp	r3, #100	@ 0x64
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e1a2      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a1a:	4b12      	ldr	r3, [pc, #72]	@ (8008a64 <HAL_RCC_OscConfig+0x4a8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0f0      	beq.n	8008a08 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d106      	bne.n	8008a3c <HAL_RCC_OscConfig+0x480>
 8008a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a32:	4a0b      	ldr	r2, [pc, #44]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a3a:	e032      	b.n	8008aa2 <HAL_RCC_OscConfig+0x4e6>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d111      	bne.n	8008a68 <HAL_RCC_OscConfig+0x4ac>
 8008a44:	4b06      	ldr	r3, [pc, #24]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a48:	4a05      	ldr	r2, [pc, #20]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a50:	4b03      	ldr	r3, [pc, #12]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a54:	4a02      	ldr	r2, [pc, #8]	@ (8008a60 <HAL_RCC_OscConfig+0x4a4>)
 8008a56:	f023 0304 	bic.w	r3, r3, #4
 8008a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a5c:	e021      	b.n	8008aa2 <HAL_RCC_OscConfig+0x4e6>
 8008a5e:	bf00      	nop
 8008a60:	58024400 	.word	0x58024400
 8008a64:	58024800 	.word	0x58024800
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2b05      	cmp	r3, #5
 8008a6e:	d10c      	bne.n	8008a8a <HAL_RCC_OscConfig+0x4ce>
 8008a70:	4b83      	ldr	r3, [pc, #524]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a74:	4a82      	ldr	r2, [pc, #520]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008a76:	f043 0304 	orr.w	r3, r3, #4
 8008a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a7c:	4b80      	ldr	r3, [pc, #512]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a80:	4a7f      	ldr	r2, [pc, #508]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a88:	e00b      	b.n	8008aa2 <HAL_RCC_OscConfig+0x4e6>
 8008a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008a90:	f023 0301 	bic.w	r3, r3, #1
 8008a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a96:	4b7a      	ldr	r3, [pc, #488]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a9a:	4a79      	ldr	r2, [pc, #484]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008a9c:	f023 0304 	bic.w	r3, r3, #4
 8008aa0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d015      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aaa:	f7f9 ff05 	bl	80028b8 <HAL_GetTick>
 8008aae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ab0:	e00a      	b.n	8008ac8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ab2:	f7f9 ff01 	bl	80028b8 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e14b      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ac8:	4b6d      	ldr	r3, [pc, #436]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0ee      	beq.n	8008ab2 <HAL_RCC_OscConfig+0x4f6>
 8008ad4:	e014      	b.n	8008b00 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad6:	f7f9 feef 	bl	80028b8 <HAL_GetTick>
 8008ada:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008adc:	e00a      	b.n	8008af4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ade:	f7f9 feeb 	bl	80028b8 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e135      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008af4:	4b62      	ldr	r3, [pc, #392]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1ee      	bne.n	8008ade <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 812a 	beq.w	8008d5e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b12:	2b18      	cmp	r3, #24
 8008b14:	f000 80ba 	beq.w	8008c8c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	f040 8095 	bne.w	8008c4c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b22:	4b57      	ldr	r3, [pc, #348]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a56      	ldr	r2, [pc, #344]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008b28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2e:	f7f9 fec3 	bl	80028b8 <HAL_GetTick>
 8008b32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b34:	e008      	b.n	8008b48 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b36:	f7f9 febf 	bl	80028b8 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e10b      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b48:	4b4d      	ldr	r3, [pc, #308]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f0      	bne.n	8008b36 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b54:	4b4a      	ldr	r3, [pc, #296]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008b56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b58:	4b4a      	ldr	r3, [pc, #296]	@ (8008c84 <HAL_RCC_OscConfig+0x6c8>)
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008b64:	0112      	lsls	r2, r2, #4
 8008b66:	430a      	orrs	r2, r1
 8008b68:	4945      	ldr	r1, [pc, #276]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b72:	3b01      	subs	r3, #1
 8008b74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	025b      	lsls	r3, r3, #9
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b90:	431a      	orrs	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b96:	3b01      	subs	r3, #1
 8008b98:	061b      	lsls	r3, r3, #24
 8008b9a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b9e:	4938      	ldr	r1, [pc, #224]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ba4:	4b36      	ldr	r3, [pc, #216]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba8:	4a35      	ldr	r2, [pc, #212]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008baa:	f023 0301 	bic.w	r3, r3, #1
 8008bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bb0:	4b33      	ldr	r3, [pc, #204]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb4:	4b34      	ldr	r3, [pc, #208]	@ (8008c88 <HAL_RCC_OscConfig+0x6cc>)
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008bbc:	00d2      	lsls	r2, r2, #3
 8008bbe:	4930      	ldr	r1, [pc, #192]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	f023 020c 	bic.w	r2, r3, #12
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd0:	492b      	ldr	r1, [pc, #172]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bda:	f023 0202 	bic.w	r2, r3, #2
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be2:	4927      	ldr	r1, [pc, #156]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008be8:	4b25      	ldr	r3, [pc, #148]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bec:	4a24      	ldr	r2, [pc, #144]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf4:	4b22      	ldr	r3, [pc, #136]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	4a21      	ldr	r2, [pc, #132]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008c00:	4b1f      	ldr	r3, [pc, #124]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	4a1e      	ldr	r2, [pc, #120]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c10:	4a1b      	ldr	r2, [pc, #108]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c12:	f043 0301 	orr.w	r3, r3, #1
 8008c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c18:	4b19      	ldr	r3, [pc, #100]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a18      	ldr	r2, [pc, #96]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c24:	f7f9 fe48 	bl	80028b8 <HAL_GetTick>
 8008c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c2c:	f7f9 fe44 	bl	80028b8 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e090      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c3e:	4b10      	ldr	r3, [pc, #64]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0f0      	beq.n	8008c2c <HAL_RCC_OscConfig+0x670>
 8008c4a:	e088      	b.n	8008d5e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a0b      	ldr	r2, [pc, #44]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c58:	f7f9 fe2e 	bl	80028b8 <HAL_GetTick>
 8008c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c5e:	e008      	b.n	8008c72 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c60:	f7f9 fe2a 	bl	80028b8 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e076      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c72:	4b03      	ldr	r3, [pc, #12]	@ (8008c80 <HAL_RCC_OscConfig+0x6c4>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1f0      	bne.n	8008c60 <HAL_RCC_OscConfig+0x6a4>
 8008c7e:	e06e      	b.n	8008d5e <HAL_RCC_OscConfig+0x7a2>
 8008c80:	58024400 	.word	0x58024400
 8008c84:	fffffc0c 	.word	0xfffffc0c
 8008c88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c8c:	4b36      	ldr	r3, [pc, #216]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c92:	4b35      	ldr	r3, [pc, #212]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d031      	beq.n	8008d04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f003 0203 	and.w	r2, r3, #3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d12a      	bne.n	8008d04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	091b      	lsrs	r3, r3, #4
 8008cb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d122      	bne.n	8008d04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d11a      	bne.n	8008d04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	0a5b      	lsrs	r3, r3, #9
 8008cd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d111      	bne.n	8008d04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	0c1b      	lsrs	r3, r3, #16
 8008ce4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d108      	bne.n	8008d04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	0e1b      	lsrs	r3, r3, #24
 8008cf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d001      	beq.n	8008d08 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e02b      	b.n	8008d60 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008d08:	4b17      	ldr	r3, [pc, #92]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d0c:	08db      	lsrs	r3, r3, #3
 8008d0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d01f      	beq.n	8008d5e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008d1e:	4b12      	ldr	r3, [pc, #72]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d22:	4a11      	ldr	r2, [pc, #68]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008d24:	f023 0301 	bic.w	r3, r3, #1
 8008d28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d2a:	f7f9 fdc5 	bl	80028b8 <HAL_GetTick>
 8008d2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008d30:	bf00      	nop
 8008d32:	f7f9 fdc1 	bl	80028b8 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d0f9      	beq.n	8008d32 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d42:	4b0a      	ldr	r3, [pc, #40]	@ (8008d6c <HAL_RCC_OscConfig+0x7b0>)
 8008d44:	4013      	ands	r3, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d4a:	00d2      	lsls	r2, r2, #3
 8008d4c:	4906      	ldr	r1, [pc, #24]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008d52:	4b05      	ldr	r3, [pc, #20]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d56:	4a04      	ldr	r2, [pc, #16]	@ (8008d68 <HAL_RCC_OscConfig+0x7ac>)
 8008d58:	f043 0301 	orr.w	r3, r3, #1
 8008d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3730      	adds	r7, #48	@ 0x30
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	58024400 	.word	0x58024400
 8008d6c:	ffff0007 	.word	0xffff0007

08008d70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e19c      	b.n	80090be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d84:	4b8a      	ldr	r3, [pc, #552]	@ (8008fb0 <HAL_RCC_ClockConfig+0x240>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d910      	bls.n	8008db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d92:	4b87      	ldr	r3, [pc, #540]	@ (8008fb0 <HAL_RCC_ClockConfig+0x240>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f023 020f 	bic.w	r2, r3, #15
 8008d9a:	4985      	ldr	r1, [pc, #532]	@ (8008fb0 <HAL_RCC_ClockConfig+0x240>)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008da2:	4b83      	ldr	r3, [pc, #524]	@ (8008fb0 <HAL_RCC_ClockConfig+0x240>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 030f 	and.w	r3, r3, #15
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d001      	beq.n	8008db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e184      	b.n	80090be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d010      	beq.n	8008de2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691a      	ldr	r2, [r3, #16]
 8008dc4:	4b7b      	ldr	r3, [pc, #492]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d908      	bls.n	8008de2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008dd0:	4b78      	ldr	r3, [pc, #480]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	4975      	ldr	r1, [pc, #468]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d010      	beq.n	8008e10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	695a      	ldr	r2, [r3, #20]
 8008df2:	4b70      	ldr	r3, [pc, #448]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d908      	bls.n	8008e10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	496a      	ldr	r1, [pc, #424]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d010      	beq.n	8008e3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	4b64      	ldr	r3, [pc, #400]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d908      	bls.n	8008e3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e2c:	4b61      	ldr	r3, [pc, #388]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	495e      	ldr	r1, [pc, #376]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d010      	beq.n	8008e6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69da      	ldr	r2, [r3, #28]
 8008e4e:	4b59      	ldr	r3, [pc, #356]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d908      	bls.n	8008e6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e5a:	4b56      	ldr	r3, [pc, #344]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	4953      	ldr	r1, [pc, #332]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d010      	beq.n	8008e9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	f003 030f 	and.w	r3, r3, #15
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d908      	bls.n	8008e9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e88:	4b4a      	ldr	r3, [pc, #296]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	f023 020f 	bic.w	r2, r3, #15
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	4947      	ldr	r1, [pc, #284]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d055      	beq.n	8008f52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ea6:	4b43      	ldr	r3, [pc, #268]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	4940      	ldr	r1, [pc, #256]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d107      	bne.n	8008ed0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d121      	bne.n	8008f10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e0f6      	b.n	80090be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d107      	bne.n	8008ee8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ed8:	4b36      	ldr	r3, [pc, #216]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d115      	bne.n	8008f10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e0ea      	b.n	80090be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d107      	bne.n	8008f00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ef0:	4b30      	ldr	r3, [pc, #192]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e0de      	b.n	80090be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f00:	4b2c      	ldr	r3, [pc, #176]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e0d6      	b.n	80090be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f10:	4b28      	ldr	r3, [pc, #160]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	f023 0207 	bic.w	r2, r3, #7
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	4925      	ldr	r1, [pc, #148]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f22:	f7f9 fcc9 	bl	80028b8 <HAL_GetTick>
 8008f26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f28:	e00a      	b.n	8008f40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f2a:	f7f9 fcc5 	bl	80028b8 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e0be      	b.n	80090be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f40:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d1eb      	bne.n	8008f2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d010      	beq.n	8008f80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	4b14      	ldr	r3, [pc, #80]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d208      	bcs.n	8008f80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f6e:	4b11      	ldr	r3, [pc, #68]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	f023 020f 	bic.w	r2, r3, #15
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	490e      	ldr	r1, [pc, #56]	@ (8008fb4 <HAL_RCC_ClockConfig+0x244>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f80:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb0 <HAL_RCC_ClockConfig+0x240>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 030f 	and.w	r3, r3, #15
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d214      	bcs.n	8008fb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f8e:	4b08      	ldr	r3, [pc, #32]	@ (8008fb0 <HAL_RCC_ClockConfig+0x240>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f023 020f 	bic.w	r2, r3, #15
 8008f96:	4906      	ldr	r1, [pc, #24]	@ (8008fb0 <HAL_RCC_ClockConfig+0x240>)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f9e:	4b04      	ldr	r3, [pc, #16]	@ (8008fb0 <HAL_RCC_ClockConfig+0x240>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d005      	beq.n	8008fb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e086      	b.n	80090be <HAL_RCC_ClockConfig+0x34e>
 8008fb0:	52002000 	.word	0x52002000
 8008fb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d010      	beq.n	8008fe6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d208      	bcs.n	8008fe6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	4939      	ldr	r1, [pc, #228]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0308 	and.w	r3, r3, #8
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d010      	beq.n	8009014 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695a      	ldr	r2, [r3, #20]
 8008ff6:	4b34      	ldr	r3, [pc, #208]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d208      	bcs.n	8009014 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009002:	4b31      	ldr	r3, [pc, #196]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	492e      	ldr	r1, [pc, #184]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8009010:	4313      	orrs	r3, r2
 8009012:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699a      	ldr	r2, [r3, #24]
 8009024:	4b28      	ldr	r3, [pc, #160]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800902c:	429a      	cmp	r2, r3
 800902e:	d208      	bcs.n	8009042 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009030:	4b25      	ldr	r3, [pc, #148]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	4922      	ldr	r1, [pc, #136]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 800903e:	4313      	orrs	r3, r2
 8009040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d010      	beq.n	8009070 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69da      	ldr	r2, [r3, #28]
 8009052:	4b1d      	ldr	r3, [pc, #116]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800905a:	429a      	cmp	r2, r3
 800905c:	d208      	bcs.n	8009070 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800905e:	4b1a      	ldr	r3, [pc, #104]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	4917      	ldr	r1, [pc, #92]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 800906c:	4313      	orrs	r3, r2
 800906e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009070:	f000 f834 	bl	80090dc <HAL_RCC_GetSysClockFreq>
 8009074:	4602      	mov	r2, r0
 8009076:	4b14      	ldr	r3, [pc, #80]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	0a1b      	lsrs	r3, r3, #8
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	4912      	ldr	r1, [pc, #72]	@ (80090cc <HAL_RCC_ClockConfig+0x35c>)
 8009082:	5ccb      	ldrb	r3, [r1, r3]
 8009084:	f003 031f 	and.w	r3, r3, #31
 8009088:	fa22 f303 	lsr.w	r3, r2, r3
 800908c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800908e:	4b0e      	ldr	r3, [pc, #56]	@ (80090c8 <HAL_RCC_ClockConfig+0x358>)
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	4a0d      	ldr	r2, [pc, #52]	@ (80090cc <HAL_RCC_ClockConfig+0x35c>)
 8009098:	5cd3      	ldrb	r3, [r2, r3]
 800909a:	f003 031f 	and.w	r3, r3, #31
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	4a0a      	ldr	r2, [pc, #40]	@ (80090d0 <HAL_RCC_ClockConfig+0x360>)
 80090a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090a8:	4a0a      	ldr	r2, [pc, #40]	@ (80090d4 <HAL_RCC_ClockConfig+0x364>)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80090ae:	4b0a      	ldr	r3, [pc, #40]	@ (80090d8 <HAL_RCC_ClockConfig+0x368>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f9 fbb6 	bl	8002824 <HAL_InitTick>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	58024400 	.word	0x58024400
 80090cc:	08012924 	.word	0x08012924
 80090d0:	24000014 	.word	0x24000014
 80090d4:	24000010 	.word	0x24000010
 80090d8:	24000018 	.word	0x24000018

080090dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090dc:	b480      	push	{r7}
 80090de:	b089      	sub	sp, #36	@ 0x24
 80090e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090e2:	4bb3      	ldr	r3, [pc, #716]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090ea:	2b18      	cmp	r3, #24
 80090ec:	f200 8155 	bhi.w	800939a <HAL_RCC_GetSysClockFreq+0x2be>
 80090f0:	a201      	add	r2, pc, #4	@ (adr r2, 80090f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	0800915d 	.word	0x0800915d
 80090fc:	0800939b 	.word	0x0800939b
 8009100:	0800939b 	.word	0x0800939b
 8009104:	0800939b 	.word	0x0800939b
 8009108:	0800939b 	.word	0x0800939b
 800910c:	0800939b 	.word	0x0800939b
 8009110:	0800939b 	.word	0x0800939b
 8009114:	0800939b 	.word	0x0800939b
 8009118:	08009183 	.word	0x08009183
 800911c:	0800939b 	.word	0x0800939b
 8009120:	0800939b 	.word	0x0800939b
 8009124:	0800939b 	.word	0x0800939b
 8009128:	0800939b 	.word	0x0800939b
 800912c:	0800939b 	.word	0x0800939b
 8009130:	0800939b 	.word	0x0800939b
 8009134:	0800939b 	.word	0x0800939b
 8009138:	08009189 	.word	0x08009189
 800913c:	0800939b 	.word	0x0800939b
 8009140:	0800939b 	.word	0x0800939b
 8009144:	0800939b 	.word	0x0800939b
 8009148:	0800939b 	.word	0x0800939b
 800914c:	0800939b 	.word	0x0800939b
 8009150:	0800939b 	.word	0x0800939b
 8009154:	0800939b 	.word	0x0800939b
 8009158:	0800918f 	.word	0x0800918f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800915c:	4b94      	ldr	r3, [pc, #592]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009168:	4b91      	ldr	r3, [pc, #580]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	08db      	lsrs	r3, r3, #3
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	4a90      	ldr	r2, [pc, #576]	@ (80093b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009174:	fa22 f303 	lsr.w	r3, r2, r3
 8009178:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800917a:	e111      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800917c:	4b8d      	ldr	r3, [pc, #564]	@ (80093b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800917e:	61bb      	str	r3, [r7, #24]
      break;
 8009180:	e10e      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009182:	4b8d      	ldr	r3, [pc, #564]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009184:	61bb      	str	r3, [r7, #24]
      break;
 8009186:	e10b      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009188:	4b8c      	ldr	r3, [pc, #560]	@ (80093bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800918a:	61bb      	str	r3, [r7, #24]
      break;
 800918c:	e108      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800918e:	4b88      	ldr	r3, [pc, #544]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009192:	f003 0303 	and.w	r3, r3, #3
 8009196:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009198:	4b85      	ldr	r3, [pc, #532]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800919a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919c:	091b      	lsrs	r3, r3, #4
 800919e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80091a4:	4b82      	ldr	r3, [pc, #520]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091ae:	4b80      	ldr	r3, [pc, #512]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b2:	08db      	lsrs	r3, r3, #3
 80091b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	fb02 f303 	mul.w	r3, r2, r3
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 80e1 	beq.w	8009394 <HAL_RCC_GetSysClockFreq+0x2b8>
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	f000 8083 	beq.w	80092e0 <HAL_RCC_GetSysClockFreq+0x204>
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	f200 80a1 	bhi.w	8009324 <HAL_RCC_GetSysClockFreq+0x248>
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <HAL_RCC_GetSysClockFreq+0x114>
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d056      	beq.n	800929c <HAL_RCC_GetSysClockFreq+0x1c0>
 80091ee:	e099      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091f0:	4b6f      	ldr	r3, [pc, #444]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d02d      	beq.n	8009258 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091fc:	4b6c      	ldr	r3, [pc, #432]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	08db      	lsrs	r3, r3, #3
 8009202:	f003 0303 	and.w	r3, r3, #3
 8009206:	4a6b      	ldr	r2, [pc, #428]	@ (80093b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009208:	fa22 f303 	lsr.w	r3, r2, r3
 800920c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009226:	4b62      	ldr	r3, [pc, #392]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922e:	ee07 3a90 	vmov	s15, r3
 8009232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009236:	ed97 6a02 	vldr	s12, [r7, #8]
 800923a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80093c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800923e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800924a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800924e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009252:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009256:	e087      	b.n	8009368 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	ee07 3a90 	vmov	s15, r3
 800925e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009262:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80093c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800926a:	4b51      	ldr	r3, [pc, #324]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800926c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800926e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800927a:	ed97 6a02 	vldr	s12, [r7, #8]
 800927e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80093c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800928a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800928e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800929a:	e065      	b.n	8009368 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	ee07 3a90 	vmov	s15, r3
 80092a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80093c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80092aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ae:	4b40      	ldr	r3, [pc, #256]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b6:	ee07 3a90 	vmov	s15, r3
 80092ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092be:	ed97 6a02 	vldr	s12, [r7, #8]
 80092c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80093c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092de:	e043      	b.n	8009368 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80093cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80092ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f2:	4b2f      	ldr	r3, [pc, #188]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fa:	ee07 3a90 	vmov	s15, r3
 80092fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009302:	ed97 6a02 	vldr	s12, [r7, #8]
 8009306:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80093c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800930a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800930e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800931a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800931e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009322:	e021      	b.n	8009368 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80093c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009336:	4b1e      	ldr	r3, [pc, #120]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009346:	ed97 6a02 	vldr	s12, [r7, #8]
 800934a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80093c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800934e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800935a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009362:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009366:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009368:	4b11      	ldr	r3, [pc, #68]	@ (80093b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800936a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936c:	0a5b      	lsrs	r3, r3, #9
 800936e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009372:	3301      	adds	r3, #1
 8009374:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009380:	edd7 6a07 	vldr	s13, [r7, #28]
 8009384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800938c:	ee17 3a90 	vmov	r3, s15
 8009390:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009392:	e005      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	61bb      	str	r3, [r7, #24]
      break;
 8009398:	e002      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800939a:	4b07      	ldr	r3, [pc, #28]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800939c:	61bb      	str	r3, [r7, #24]
      break;
 800939e:	bf00      	nop
  }

  return sysclockfreq;
 80093a0:	69bb      	ldr	r3, [r7, #24]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3724      	adds	r7, #36	@ 0x24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	58024400 	.word	0x58024400
 80093b4:	03d09000 	.word	0x03d09000
 80093b8:	003d0900 	.word	0x003d0900
 80093bc:	016e3600 	.word	0x016e3600
 80093c0:	46000000 	.word	0x46000000
 80093c4:	4c742400 	.word	0x4c742400
 80093c8:	4a742400 	.word	0x4a742400
 80093cc:	4bb71b00 	.word	0x4bb71b00

080093d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80093d6:	f7ff fe81 	bl	80090dc <HAL_RCC_GetSysClockFreq>
 80093da:	4602      	mov	r2, r0
 80093dc:	4b10      	ldr	r3, [pc, #64]	@ (8009420 <HAL_RCC_GetHCLKFreq+0x50>)
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	0a1b      	lsrs	r3, r3, #8
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	490f      	ldr	r1, [pc, #60]	@ (8009424 <HAL_RCC_GetHCLKFreq+0x54>)
 80093e8:	5ccb      	ldrb	r3, [r1, r3]
 80093ea:	f003 031f 	and.w	r3, r3, #31
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009420 <HAL_RCC_GetHCLKFreq+0x50>)
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f003 030f 	and.w	r3, r3, #15
 80093fc:	4a09      	ldr	r2, [pc, #36]	@ (8009424 <HAL_RCC_GetHCLKFreq+0x54>)
 80093fe:	5cd3      	ldrb	r3, [r2, r3]
 8009400:	f003 031f 	and.w	r3, r3, #31
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	fa22 f303 	lsr.w	r3, r2, r3
 800940a:	4a07      	ldr	r2, [pc, #28]	@ (8009428 <HAL_RCC_GetHCLKFreq+0x58>)
 800940c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800940e:	4a07      	ldr	r2, [pc, #28]	@ (800942c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009414:	4b04      	ldr	r3, [pc, #16]	@ (8009428 <HAL_RCC_GetHCLKFreq+0x58>)
 8009416:	681b      	ldr	r3, [r3, #0]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	58024400 	.word	0x58024400
 8009424:	08012924 	.word	0x08012924
 8009428:	24000014 	.word	0x24000014
 800942c:	24000010 	.word	0x24000010

08009430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009434:	f7ff ffcc 	bl	80093d0 <HAL_RCC_GetHCLKFreq>
 8009438:	4602      	mov	r2, r0
 800943a:	4b06      	ldr	r3, [pc, #24]	@ (8009454 <HAL_RCC_GetPCLK1Freq+0x24>)
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	091b      	lsrs	r3, r3, #4
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	4904      	ldr	r1, [pc, #16]	@ (8009458 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009446:	5ccb      	ldrb	r3, [r1, r3]
 8009448:	f003 031f 	and.w	r3, r3, #31
 800944c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009450:	4618      	mov	r0, r3
 8009452:	bd80      	pop	{r7, pc}
 8009454:	58024400 	.word	0x58024400
 8009458:	08012924 	.word	0x08012924

0800945c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009460:	f7ff ffb6 	bl	80093d0 <HAL_RCC_GetHCLKFreq>
 8009464:	4602      	mov	r2, r0
 8009466:	4b06      	ldr	r3, [pc, #24]	@ (8009480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	0a1b      	lsrs	r3, r3, #8
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	4904      	ldr	r1, [pc, #16]	@ (8009484 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009472:	5ccb      	ldrb	r3, [r1, r3]
 8009474:	f003 031f 	and.w	r3, r3, #31
 8009478:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800947c:	4618      	mov	r0, r3
 800947e:	bd80      	pop	{r7, pc}
 8009480:	58024400 	.word	0x58024400
 8009484:	08012924 	.word	0x08012924

08009488 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800948c:	b0c6      	sub	sp, #280	@ 0x118
 800948e:	af00      	add	r7, sp, #0
 8009490:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009494:	2300      	movs	r3, #0
 8009496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800949a:	2300      	movs	r3, #0
 800949c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80094a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80094ac:	2500      	movs	r5, #0
 80094ae:	ea54 0305 	orrs.w	r3, r4, r5
 80094b2:	d049      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094be:	d02f      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80094c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094c4:	d828      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80094c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094ca:	d01a      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80094cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094d0:	d822      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80094d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094da:	d007      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094dc:	e01c      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094de:	4bab      	ldr	r3, [pc, #684]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e2:	4aaa      	ldr	r2, [pc, #680]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094ea:	e01a      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f0:	3308      	adds	r3, #8
 80094f2:	2102      	movs	r1, #2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f002 fa49 	bl	800b98c <RCCEx_PLL2_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009500:	e00f      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009506:	3328      	adds	r3, #40	@ 0x28
 8009508:	2102      	movs	r1, #2
 800950a:	4618      	mov	r0, r3
 800950c:	f002 faf0 	bl	800baf0 <RCCEx_PLL3_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009516:	e004      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800951e:	e000      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009522:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800952a:	4b98      	ldr	r3, [pc, #608]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800952c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800952e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009538:	4a94      	ldr	r2, [pc, #592]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800953a:	430b      	orrs	r3, r1
 800953c:	6513      	str	r3, [r2, #80]	@ 0x50
 800953e:	e003      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009554:	f04f 0900 	mov.w	r9, #0
 8009558:	ea58 0309 	orrs.w	r3, r8, r9
 800955c:	d047      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009564:	2b04      	cmp	r3, #4
 8009566:	d82a      	bhi.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009568:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	08009585 	.word	0x08009585
 8009574:	08009593 	.word	0x08009593
 8009578:	080095a9 	.word	0x080095a9
 800957c:	080095c7 	.word	0x080095c7
 8009580:	080095c7 	.word	0x080095c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009584:	4b81      	ldr	r3, [pc, #516]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009588:	4a80      	ldr	r2, [pc, #512]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800958a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800958e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009590:	e01a      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009596:	3308      	adds	r3, #8
 8009598:	2100      	movs	r1, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f002 f9f6 	bl	800b98c <RCCEx_PLL2_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095a6:	e00f      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ac:	3328      	adds	r3, #40	@ 0x28
 80095ae:	2100      	movs	r1, #0
 80095b0:	4618      	mov	r0, r3
 80095b2:	f002 fa9d 	bl	800baf0 <RCCEx_PLL3_Config>
 80095b6:	4603      	mov	r3, r0
 80095b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095bc:	e004      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80095c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095d0:	4b6e      	ldr	r3, [pc, #440]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095d4:	f023 0107 	bic.w	r1, r3, #7
 80095d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095de:	4a6b      	ldr	r2, [pc, #428]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095e0:	430b      	orrs	r3, r1
 80095e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80095e4:	e003      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80095ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80095fa:	f04f 0b00 	mov.w	fp, #0
 80095fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8009602:	d05b      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009608:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800960c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009610:	d03b      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009612:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009616:	d834      	bhi.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009618:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800961c:	d037      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800961e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009622:	d82e      	bhi.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009624:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009628:	d033      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800962a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800962e:	d828      	bhi.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009630:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009634:	d01a      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800963a:	d822      	bhi.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009640:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009644:	d007      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009646:	e01c      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009648:	4b50      	ldr	r3, [pc, #320]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	4a4f      	ldr	r2, [pc, #316]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800964e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009654:	e01e      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965a:	3308      	adds	r3, #8
 800965c:	2100      	movs	r1, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f002 f994 	bl	800b98c <RCCEx_PLL2_Config>
 8009664:	4603      	mov	r3, r0
 8009666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800966a:	e013      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800966c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009670:	3328      	adds	r3, #40	@ 0x28
 8009672:	2100      	movs	r1, #0
 8009674:	4618      	mov	r0, r3
 8009676:	f002 fa3b 	bl	800baf0 <RCCEx_PLL3_Config>
 800967a:	4603      	mov	r3, r0
 800967c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009680:	e008      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009688:	e004      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800968a:	bf00      	nop
 800968c:	e002      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800968e:	bf00      	nop
 8009690:	e000      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009694:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10b      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800969c:	4b3b      	ldr	r3, [pc, #236]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800969e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096a0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80096a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80096ac:	4a37      	ldr	r2, [pc, #220]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096ae:	430b      	orrs	r3, r1
 80096b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80096b2:	e003      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80096bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80096c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80096cc:	2300      	movs	r3, #0
 80096ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80096d6:	460b      	mov	r3, r1
 80096d8:	4313      	orrs	r3, r2
 80096da:	d05d      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80096dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80096e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80096e8:	d03b      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80096ea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80096ee:	d834      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80096f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096f4:	d037      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80096f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096fa:	d82e      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80096fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009700:	d033      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009702:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009706:	d828      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800970c:	d01a      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800970e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009712:	d822      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800971c:	d007      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800971e:	e01c      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009720:	4b1a      	ldr	r3, [pc, #104]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009724:	4a19      	ldr	r2, [pc, #100]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800972a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800972c:	e01e      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800972e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009732:	3308      	adds	r3, #8
 8009734:	2100      	movs	r1, #0
 8009736:	4618      	mov	r0, r3
 8009738:	f002 f928 	bl	800b98c <RCCEx_PLL2_Config>
 800973c:	4603      	mov	r3, r0
 800973e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009742:	e013      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009748:	3328      	adds	r3, #40	@ 0x28
 800974a:	2100      	movs	r1, #0
 800974c:	4618      	mov	r0, r3
 800974e:	f002 f9cf 	bl	800baf0 <RCCEx_PLL3_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009758:	e008      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009760:	e004      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009762:	bf00      	nop
 8009764:	e002      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009766:	bf00      	nop
 8009768:	e000      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800976a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800976c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10d      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009774:	4b05      	ldr	r3, [pc, #20]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009778:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800977c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009780:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009784:	4a01      	ldr	r2, [pc, #4]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009786:	430b      	orrs	r3, r1
 8009788:	6593      	str	r3, [r2, #88]	@ 0x58
 800978a:	e005      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800978c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009794:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80097a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80097ae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4313      	orrs	r3, r2
 80097b6:	d03a      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80097b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097be:	2b30      	cmp	r3, #48	@ 0x30
 80097c0:	d01f      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80097c2:	2b30      	cmp	r3, #48	@ 0x30
 80097c4:	d819      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 80097c6:	2b20      	cmp	r3, #32
 80097c8:	d00c      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d815      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d019      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80097d2:	2b10      	cmp	r3, #16
 80097d4:	d111      	bne.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d6:	4baa      	ldr	r3, [pc, #680]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	4aa9      	ldr	r2, [pc, #676]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80097e2:	e011      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e8:	3308      	adds	r3, #8
 80097ea:	2102      	movs	r1, #2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f002 f8cd 	bl	800b98c <RCCEx_PLL2_Config>
 80097f2:	4603      	mov	r3, r0
 80097f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80097f8:	e006      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009800:	e002      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009802:	bf00      	nop
 8009804:	e000      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009810:	4b9b      	ldr	r3, [pc, #620]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009814:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800981e:	4a98      	ldr	r2, [pc, #608]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009820:	430b      	orrs	r3, r1
 8009822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009824:	e003      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800982a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800982e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800983a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800983e:	2300      	movs	r3, #0
 8009840:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009844:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009848:	460b      	mov	r3, r1
 800984a:	4313      	orrs	r3, r2
 800984c:	d051      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009858:	d035      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800985a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800985e:	d82e      	bhi.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009860:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009864:	d031      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009866:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800986a:	d828      	bhi.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x436>
 800986c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009870:	d01a      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009876:	d822      	bhi.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800987c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009880:	d007      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009882:	e01c      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009884:	4b7e      	ldr	r3, [pc, #504]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	4a7d      	ldr	r2, [pc, #500]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800988a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800988e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009890:	e01c      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009896:	3308      	adds	r3, #8
 8009898:	2100      	movs	r1, #0
 800989a:	4618      	mov	r0, r3
 800989c:	f002 f876 	bl	800b98c <RCCEx_PLL2_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098a6:	e011      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ac:	3328      	adds	r3, #40	@ 0x28
 80098ae:	2100      	movs	r1, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f002 f91d 	bl	800baf0 <RCCEx_PLL3_Config>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098bc:	e006      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098c4:	e002      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80098c6:	bf00      	nop
 80098c8:	e000      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80098ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80098d4:	4b6a      	ldr	r3, [pc, #424]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098e2:	4a67      	ldr	r2, [pc, #412]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098e4:	430b      	orrs	r3, r1
 80098e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80098e8:	e003      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80098f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80098fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009902:	2300      	movs	r3, #0
 8009904:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009908:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800990c:	460b      	mov	r3, r1
 800990e:	4313      	orrs	r3, r2
 8009910:	d053      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800991c:	d033      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800991e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009922:	d82c      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009924:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009928:	d02f      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800992a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800992e:	d826      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009930:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009934:	d02b      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009936:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800993a:	d820      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800993c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009940:	d012      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009946:	d81a      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d022      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800994c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009950:	d115      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009956:	3308      	adds	r3, #8
 8009958:	2101      	movs	r1, #1
 800995a:	4618      	mov	r0, r3
 800995c:	f002 f816 	bl	800b98c <RCCEx_PLL2_Config>
 8009960:	4603      	mov	r3, r0
 8009962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009966:	e015      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996c:	3328      	adds	r3, #40	@ 0x28
 800996e:	2101      	movs	r1, #1
 8009970:	4618      	mov	r0, r3
 8009972:	f002 f8bd 	bl	800baf0 <RCCEx_PLL3_Config>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800997c:	e00a      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009984:	e006      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009986:	bf00      	nop
 8009988:	e004      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800998a:	bf00      	nop
 800998c:	e002      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800998e:	bf00      	nop
 8009990:	e000      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800999c:	4b38      	ldr	r3, [pc, #224]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800999e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80099a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099aa:	4a35      	ldr	r2, [pc, #212]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099ac:	430b      	orrs	r3, r1
 80099ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80099b0:	e003      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80099ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80099c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099ca:	2300      	movs	r3, #0
 80099cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099d4:	460b      	mov	r3, r1
 80099d6:	4313      	orrs	r3, r2
 80099d8:	d058      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80099da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80099e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099e6:	d033      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80099e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099ec:	d82c      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f2:	d02f      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80099f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f8:	d826      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80099fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099fe:	d02b      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009a00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a04:	d820      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a0a:	d012      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a10:	d81a      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d022      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a1a:	d115      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a20:	3308      	adds	r3, #8
 8009a22:	2101      	movs	r1, #1
 8009a24:	4618      	mov	r0, r3
 8009a26:	f001 ffb1 	bl	800b98c <RCCEx_PLL2_Config>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a30:	e015      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a36:	3328      	adds	r3, #40	@ 0x28
 8009a38:	2101      	movs	r1, #1
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f002 f858 	bl	800baf0 <RCCEx_PLL3_Config>
 8009a40:	4603      	mov	r3, r0
 8009a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a46:	e00a      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a4e:	e006      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a50:	bf00      	nop
 8009a52:	e004      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a54:	bf00      	nop
 8009a56:	e002      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a58:	bf00      	nop
 8009a5a:	e000      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10e      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a66:	4b06      	ldr	r3, [pc, #24]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009a76:	4a02      	ldr	r2, [pc, #8]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a7c:	e006      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009a7e:	bf00      	nop
 8009a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009aa2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	d037      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ab6:	d00e      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abc:	d816      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d018      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ac6:	d111      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac8:	4bc4      	ldr	r3, [pc, #784]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009acc:	4ac3      	ldr	r2, [pc, #780]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ad4:	e00f      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ada:	3308      	adds	r3, #8
 8009adc:	2101      	movs	r1, #1
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 ff54 	bl	800b98c <RCCEx_PLL2_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009aea:	e004      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009af2:	e000      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10a      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009afe:	4bb7      	ldr	r3, [pc, #732]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b0c:	4ab3      	ldr	r2, [pc, #716]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b12:	e003      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009b28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009b36:	460b      	mov	r3, r1
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	d039      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d81c      	bhi.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009b46:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b89 	.word	0x08009b89
 8009b50:	08009b5d 	.word	0x08009b5d
 8009b54:	08009b6b 	.word	0x08009b6b
 8009b58:	08009b89 	.word	0x08009b89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b5c:	4b9f      	ldr	r3, [pc, #636]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b60:	4a9e      	ldr	r2, [pc, #632]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b68:	e00f      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6e:	3308      	adds	r3, #8
 8009b70:	2102      	movs	r1, #2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 ff0a 	bl	800b98c <RCCEx_PLL2_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b7e:	e004      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b86:	e000      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b92:	4b92      	ldr	r3, [pc, #584]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b96:	f023 0103 	bic.w	r1, r3, #3
 8009b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ba0:	4a8e      	ldr	r2, [pc, #568]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ba6:	e003      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f000 8099 	beq.w	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bd2:	4b83      	ldr	r3, [pc, #524]	@ (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a82      	ldr	r2, [pc, #520]	@ (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bde:	f7f8 fe6b 	bl	80028b8 <HAL_GetTick>
 8009be2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009be6:	e00b      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009be8:	f7f8 fe66 	bl	80028b8 <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	2b64      	cmp	r3, #100	@ 0x64
 8009bf6:	d903      	bls.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bfe:	e005      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c00:	4b77      	ldr	r3, [pc, #476]	@ (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0ed      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d173      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c14:	4b71      	ldr	r3, [pc, #452]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009c20:	4053      	eors	r3, r2
 8009c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d015      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c2a:	4b6c      	ldr	r3, [pc, #432]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c32:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c36:	4b69      	ldr	r3, [pc, #420]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c3a:	4a68      	ldr	r2, [pc, #416]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c42:	4b66      	ldr	r3, [pc, #408]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c46:	4a65      	ldr	r2, [pc, #404]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c4e:	4a63      	ldr	r2, [pc, #396]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c62:	d118      	bne.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c64:	f7f8 fe28 	bl	80028b8 <HAL_GetTick>
 8009c68:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c6c:	e00d      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c6e:	f7f8 fe23 	bl	80028b8 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009c78:	1ad2      	subs	r2, r2, r3
 8009c7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d903      	bls.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009c88:	e005      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c8a:	4b54      	ldr	r3, [pc, #336]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0eb      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009c96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d129      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cae:	d10e      	bne.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009cc0:	091a      	lsrs	r2, r3, #4
 8009cc2:	4b48      	ldr	r3, [pc, #288]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	4a45      	ldr	r2, [pc, #276]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cc8:	430b      	orrs	r3, r1
 8009cca:	6113      	str	r3, [r2, #16]
 8009ccc:	e005      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009cce:	4b43      	ldr	r3, [pc, #268]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	4a42      	ldr	r2, [pc, #264]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009cd8:	6113      	str	r3, [r2, #16]
 8009cda:	4b40      	ldr	r3, [pc, #256]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cdc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cea:	4a3c      	ldr	r2, [pc, #240]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cf0:	e008      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009cfa:	e003      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f002 0301 	and.w	r3, r2, #1
 8009d10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d14:	2300      	movs	r3, #0
 8009d16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f000 808f 	beq.w	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d2c:	2b28      	cmp	r3, #40	@ 0x28
 8009d2e:	d871      	bhi.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009d30:	a201      	add	r2, pc, #4	@ (adr r2, 8009d38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009e1d 	.word	0x08009e1d
 8009d3c:	08009e15 	.word	0x08009e15
 8009d40:	08009e15 	.word	0x08009e15
 8009d44:	08009e15 	.word	0x08009e15
 8009d48:	08009e15 	.word	0x08009e15
 8009d4c:	08009e15 	.word	0x08009e15
 8009d50:	08009e15 	.word	0x08009e15
 8009d54:	08009e15 	.word	0x08009e15
 8009d58:	08009de9 	.word	0x08009de9
 8009d5c:	08009e15 	.word	0x08009e15
 8009d60:	08009e15 	.word	0x08009e15
 8009d64:	08009e15 	.word	0x08009e15
 8009d68:	08009e15 	.word	0x08009e15
 8009d6c:	08009e15 	.word	0x08009e15
 8009d70:	08009e15 	.word	0x08009e15
 8009d74:	08009e15 	.word	0x08009e15
 8009d78:	08009dff 	.word	0x08009dff
 8009d7c:	08009e15 	.word	0x08009e15
 8009d80:	08009e15 	.word	0x08009e15
 8009d84:	08009e15 	.word	0x08009e15
 8009d88:	08009e15 	.word	0x08009e15
 8009d8c:	08009e15 	.word	0x08009e15
 8009d90:	08009e15 	.word	0x08009e15
 8009d94:	08009e15 	.word	0x08009e15
 8009d98:	08009e1d 	.word	0x08009e1d
 8009d9c:	08009e15 	.word	0x08009e15
 8009da0:	08009e15 	.word	0x08009e15
 8009da4:	08009e15 	.word	0x08009e15
 8009da8:	08009e15 	.word	0x08009e15
 8009dac:	08009e15 	.word	0x08009e15
 8009db0:	08009e15 	.word	0x08009e15
 8009db4:	08009e15 	.word	0x08009e15
 8009db8:	08009e1d 	.word	0x08009e1d
 8009dbc:	08009e15 	.word	0x08009e15
 8009dc0:	08009e15 	.word	0x08009e15
 8009dc4:	08009e15 	.word	0x08009e15
 8009dc8:	08009e15 	.word	0x08009e15
 8009dcc:	08009e15 	.word	0x08009e15
 8009dd0:	08009e15 	.word	0x08009e15
 8009dd4:	08009e15 	.word	0x08009e15
 8009dd8:	08009e1d 	.word	0x08009e1d
 8009ddc:	58024400 	.word	0x58024400
 8009de0:	58024800 	.word	0x58024800
 8009de4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dec:	3308      	adds	r3, #8
 8009dee:	2101      	movs	r1, #1
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 fdcb 	bl	800b98c <RCCEx_PLL2_Config>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009dfc:	e00f      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e02:	3328      	adds	r3, #40	@ 0x28
 8009e04:	2101      	movs	r1, #1
 8009e06:	4618      	mov	r0, r3
 8009e08:	f001 fe72 	bl	800baf0 <RCCEx_PLL3_Config>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e12:	e004      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e1a:	e000      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e26:	4bbf      	ldr	r3, [pc, #764]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e2a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e34:	4abb      	ldr	r2, [pc, #748]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e36:	430b      	orrs	r3, r1
 8009e38:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e3a:	e003      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f002 0302 	and.w	r3, r2, #2
 8009e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e54:	2300      	movs	r3, #0
 8009e56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4313      	orrs	r3, r2
 8009e62:	d041      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d824      	bhi.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e74 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009ec1 	.word	0x08009ec1
 8009e78:	08009e8d 	.word	0x08009e8d
 8009e7c:	08009ea3 	.word	0x08009ea3
 8009e80:	08009ec1 	.word	0x08009ec1
 8009e84:	08009ec1 	.word	0x08009ec1
 8009e88:	08009ec1 	.word	0x08009ec1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e90:	3308      	adds	r3, #8
 8009e92:	2101      	movs	r1, #1
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 fd79 	bl	800b98c <RCCEx_PLL2_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ea0:	e00f      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea6:	3328      	adds	r3, #40	@ 0x28
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f001 fe20 	bl	800baf0 <RCCEx_PLL3_Config>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009eb6:	e004      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ebe:	e000      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009eca:	4b96      	ldr	r3, [pc, #600]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ece:	f023 0107 	bic.w	r1, r3, #7
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ed8:	4a92      	ldr	r2, [pc, #584]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009eda:	430b      	orrs	r3, r1
 8009edc:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ede:	e003      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f002 0304 	and.w	r3, r2, #4
 8009ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009efe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f02:	460b      	mov	r3, r1
 8009f04:	4313      	orrs	r3, r2
 8009f06:	d044      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f10:	2b05      	cmp	r3, #5
 8009f12:	d825      	bhi.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009f14:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1a:	bf00      	nop
 8009f1c:	08009f69 	.word	0x08009f69
 8009f20:	08009f35 	.word	0x08009f35
 8009f24:	08009f4b 	.word	0x08009f4b
 8009f28:	08009f69 	.word	0x08009f69
 8009f2c:	08009f69 	.word	0x08009f69
 8009f30:	08009f69 	.word	0x08009f69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f38:	3308      	adds	r3, #8
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 fd25 	bl	800b98c <RCCEx_PLL2_Config>
 8009f42:	4603      	mov	r3, r0
 8009f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f48:	e00f      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f4e:	3328      	adds	r3, #40	@ 0x28
 8009f50:	2101      	movs	r1, #1
 8009f52:	4618      	mov	r0, r3
 8009f54:	f001 fdcc 	bl	800baf0 <RCCEx_PLL3_Config>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f5e:	e004      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f66:	e000      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10b      	bne.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f72:	4b6c      	ldr	r3, [pc, #432]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f76:	f023 0107 	bic.w	r1, r3, #7
 8009f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f82:	4a68      	ldr	r2, [pc, #416]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f84:	430b      	orrs	r3, r1
 8009f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f88:	e003      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	f002 0320 	and.w	r3, r2, #32
 8009f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009fa8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	d055      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fbe:	d033      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fc4:	d82c      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fca:	d02f      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fd0:	d826      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009fd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009fd6:	d02b      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009fd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009fdc:	d820      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fe2:	d012      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fe8:	d81a      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d022      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ff2:	d115      	bne.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 fcc5 	bl	800b98c <RCCEx_PLL2_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a008:	e015      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00e:	3328      	adds	r3, #40	@ 0x28
 800a010:	2102      	movs	r1, #2
 800a012:	4618      	mov	r0, r3
 800a014:	f001 fd6c 	bl	800baf0 <RCCEx_PLL3_Config>
 800a018:	4603      	mov	r3, r0
 800a01a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a01e:	e00a      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a026:	e006      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a028:	bf00      	nop
 800a02a:	e004      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a02c:	bf00      	nop
 800a02e:	e002      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a030:	bf00      	nop
 800a032:	e000      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a034:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10b      	bne.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a03e:	4b39      	ldr	r3, [pc, #228]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a042:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a04a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a04e:	4a35      	ldr	r2, [pc, #212]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a050:	430b      	orrs	r3, r1
 800a052:	6553      	str	r3, [r2, #84]	@ 0x54
 800a054:	e003      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a056:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a05a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a06a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a06e:	2300      	movs	r3, #0
 800a070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a074:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a078:	460b      	mov	r3, r1
 800a07a:	4313      	orrs	r3, r2
 800a07c:	d058      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a082:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a086:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a08a:	d033      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a08c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a090:	d82c      	bhi.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a096:	d02f      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a09c:	d826      	bhi.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a09e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0a2:	d02b      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a0a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0a8:	d820      	bhi.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a0aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0ae:	d012      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a0b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0b4:	d81a      	bhi.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d022      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a0ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0be:	d115      	bne.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f001 fc5f 	bl	800b98c <RCCEx_PLL2_Config>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a0d4:	e015      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0da:	3328      	adds	r3, #40	@ 0x28
 800a0dc:	2102      	movs	r1, #2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f001 fd06 	bl	800baf0 <RCCEx_PLL3_Config>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a0ea:	e00a      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0f2:	e006      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a0f4:	bf00      	nop
 800a0f6:	e004      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a0f8:	bf00      	nop
 800a0fa:	e002      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a0fc:	bf00      	nop
 800a0fe:	e000      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a100:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10e      	bne.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a10a:	4b06      	ldr	r3, [pc, #24]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a10c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a10e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a11a:	4a02      	ldr	r2, [pc, #8]	@ (800a124 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a11c:	430b      	orrs	r3, r1
 800a11e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a120:	e006      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a122:	bf00      	nop
 800a124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a12c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a13c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a140:	2300      	movs	r3, #0
 800a142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a146:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a14a:	460b      	mov	r3, r1
 800a14c:	4313      	orrs	r3, r2
 800a14e:	d055      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a158:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a15c:	d033      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a15e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a162:	d82c      	bhi.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a168:	d02f      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a16a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a16e:	d826      	bhi.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a170:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a174:	d02b      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a176:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a17a:	d820      	bhi.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a17c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a180:	d012      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a182:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a186:	d81a      	bhi.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d022      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a18c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a190:	d115      	bne.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a196:	3308      	adds	r3, #8
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 fbf6 	bl	800b98c <RCCEx_PLL2_Config>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a1a6:	e015      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ac:	3328      	adds	r3, #40	@ 0x28
 800a1ae:	2102      	movs	r1, #2
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f001 fc9d 	bl	800baf0 <RCCEx_PLL3_Config>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a1bc:	e00a      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1c4:	e006      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a1c6:	bf00      	nop
 800a1c8:	e004      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a1ca:	bf00      	nop
 800a1cc:	e002      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a1ce:	bf00      	nop
 800a1d0:	e000      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a1d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10b      	bne.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1dc:	4ba0      	ldr	r3, [pc, #640]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a1ec:	4a9c      	ldr	r2, [pc, #624]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1ee:	430b      	orrs	r3, r1
 800a1f0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1f2:	e003      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	f002 0308 	and.w	r3, r2, #8
 800a208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a20c:	2300      	movs	r3, #0
 800a20e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a212:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a216:	460b      	mov	r3, r1
 800a218:	4313      	orrs	r3, r2
 800a21a:	d01e      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a228:	d10c      	bne.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22e:	3328      	adds	r3, #40	@ 0x28
 800a230:	2102      	movs	r1, #2
 800a232:	4618      	mov	r0, r3
 800a234:	f001 fc5c 	bl	800baf0 <RCCEx_PLL3_Config>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a244:	4b86      	ldr	r3, [pc, #536]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a248:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a254:	4a82      	ldr	r2, [pc, #520]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a256:	430b      	orrs	r3, r1
 800a258:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	f002 0310 	and.w	r3, r2, #16
 800a266:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a26a:	2300      	movs	r3, #0
 800a26c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a270:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a274:	460b      	mov	r3, r1
 800a276:	4313      	orrs	r3, r2
 800a278:	d01e      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a27e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a286:	d10c      	bne.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a28c:	3328      	adds	r3, #40	@ 0x28
 800a28e:	2102      	movs	r1, #2
 800a290:	4618      	mov	r0, r3
 800a292:	f001 fc2d 	bl	800baf0 <RCCEx_PLL3_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2a2:	4b6f      	ldr	r3, [pc, #444]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2b2:	4a6b      	ldr	r2, [pc, #428]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a2c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a2ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	d03e      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a2dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2e0:	d022      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a2e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2e6:	d81b      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a2ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2f0:	d00b      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a2f2:	e015      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 fb45 	bl	800b98c <RCCEx_PLL2_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a308:	e00f      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a30e:	3328      	adds	r3, #40	@ 0x28
 800a310:	2102      	movs	r1, #2
 800a312:	4618      	mov	r0, r3
 800a314:	f001 fbec 	bl	800baf0 <RCCEx_PLL3_Config>
 800a318:	4603      	mov	r3, r0
 800a31a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a31e:	e004      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a326:	e000      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a32a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10b      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a332:	4b4b      	ldr	r3, [pc, #300]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a336:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a33e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a342:	4a47      	ldr	r2, [pc, #284]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a344:	430b      	orrs	r3, r1
 800a346:	6593      	str	r3, [r2, #88]	@ 0x58
 800a348:	e003      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a34e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a35e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a360:	2300      	movs	r3, #0
 800a362:	677b      	str	r3, [r7, #116]	@ 0x74
 800a364:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a368:	460b      	mov	r3, r1
 800a36a:	4313      	orrs	r3, r2
 800a36c:	d03b      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a376:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a37a:	d01f      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a37c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a380:	d818      	bhi.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a386:	d003      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a38c:	d007      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a38e:	e011      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a390:	4b33      	ldr	r3, [pc, #204]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a394:	4a32      	ldr	r2, [pc, #200]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a39a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a39c:	e00f      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a2:	3328      	adds	r3, #40	@ 0x28
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f001 fba2 	bl	800baf0 <RCCEx_PLL3_Config>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a3b2:	e004      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3ba:	e000      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a3bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10b      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a3c6:	4b26      	ldr	r3, [pc, #152]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3d6:	4a22      	ldr	r2, [pc, #136]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3dc:	e003      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a3f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4313      	orrs	r3, r2
 800a400:	d034      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a40c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a410:	d007      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a412:	e011      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a414:	4b12      	ldr	r3, [pc, #72]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a418:	4a11      	ldr	r2, [pc, #68]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a41a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a41e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a420:	e00e      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a426:	3308      	adds	r3, #8
 800a428:	2102      	movs	r1, #2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f001 faae 	bl	800b98c <RCCEx_PLL2_Config>
 800a430:	4603      	mov	r3, r0
 800a432:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a436:	e003      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a43e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10d      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a448:	4b05      	ldr	r3, [pc, #20]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a44a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a44c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a456:	4a02      	ldr	r2, [pc, #8]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a458:	430b      	orrs	r3, r1
 800a45a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a45c:	e006      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a45e:	bf00      	nop
 800a460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a478:	663b      	str	r3, [r7, #96]	@ 0x60
 800a47a:	2300      	movs	r3, #0
 800a47c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a47e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a482:	460b      	mov	r3, r1
 800a484:	4313      	orrs	r3, r2
 800a486:	d00c      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a48c:	3328      	adds	r3, #40	@ 0x28
 800a48e:	2102      	movs	r1, #2
 800a490:	4618      	mov	r0, r3
 800a492:	f001 fb2d 	bl	800baf0 <RCCEx_PLL3_Config>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a4ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	d036      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4c8:	d018      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a4ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4ce:	d811      	bhi.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a4d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d4:	d014      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a4d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4da:	d80b      	bhi.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d011      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a4e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4e4:	d106      	bne.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e6:	4bb7      	ldr	r3, [pc, #732]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ea:	4ab6      	ldr	r2, [pc, #728]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a4f2:	e008      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4fa:	e004      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a4fc:	bf00      	nop
 800a4fe:	e002      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a500:	bf00      	nop
 800a502:	e000      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a504:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a50e:	4bad      	ldr	r3, [pc, #692]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a512:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a51a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a51c:	4aa9      	ldr	r2, [pc, #676]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a51e:	430b      	orrs	r3, r1
 800a520:	6553      	str	r3, [r2, #84]	@ 0x54
 800a522:	e003      	b.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a538:	653b      	str	r3, [r7, #80]	@ 0x50
 800a53a:	2300      	movs	r3, #0
 800a53c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a53e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a542:	460b      	mov	r3, r1
 800a544:	4313      	orrs	r3, r2
 800a546:	d009      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a548:	4b9e      	ldr	r3, [pc, #632]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a54a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a54c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a556:	4a9b      	ldr	r2, [pc, #620]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a558:	430b      	orrs	r3, r1
 800a55a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a56a:	2300      	movs	r3, #0
 800a56c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a56e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a572:	460b      	mov	r3, r1
 800a574:	4313      	orrs	r3, r2
 800a576:	d009      	beq.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a578:	4b92      	ldr	r3, [pc, #584]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a57a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a57c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a586:	4a8f      	ldr	r2, [pc, #572]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a588:	430b      	orrs	r3, r1
 800a58a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a598:	643b      	str	r3, [r7, #64]	@ 0x40
 800a59a:	2300      	movs	r3, #0
 800a59c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a59e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	d00e      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a5a8:	4b86      	ldr	r3, [pc, #536]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	4a85      	ldr	r2, [pc, #532]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a5b2:	6113      	str	r3, [r2, #16]
 800a5b4:	4b83      	ldr	r3, [pc, #524]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5b6:	6919      	ldr	r1, [r3, #16]
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5c0:	4a80      	ldr	r2, [pc, #512]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5c2:	430b      	orrs	r3, r1
 800a5c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a5d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	d009      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a5e2:	4b78      	ldr	r3, [pc, #480]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f0:	4a74      	ldr	r2, [pc, #464]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5f2:	430b      	orrs	r3, r1
 800a5f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a602:	633b      	str	r3, [r7, #48]	@ 0x30
 800a604:	2300      	movs	r3, #0
 800a606:	637b      	str	r3, [r7, #52]	@ 0x34
 800a608:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a60c:	460b      	mov	r3, r1
 800a60e:	4313      	orrs	r3, r2
 800a610:	d00a      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a612:	4b6c      	ldr	r3, [pc, #432]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a616:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a622:	4a68      	ldr	r2, [pc, #416]	@ (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a624:	430b      	orrs	r3, r1
 800a626:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	2100      	movs	r1, #0
 800a632:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a63a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a63e:	460b      	mov	r3, r1
 800a640:	4313      	orrs	r3, r2
 800a642:	d011      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a648:	3308      	adds	r3, #8
 800a64a:	2100      	movs	r1, #0
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 f99d 	bl	800b98c <RCCEx_PLL2_Config>
 800a652:	4603      	mov	r3, r0
 800a654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d003      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	2100      	movs	r1, #0
 800a672:	6239      	str	r1, [r7, #32]
 800a674:	f003 0302 	and.w	r3, r3, #2
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
 800a67a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a67e:	460b      	mov	r3, r1
 800a680:	4313      	orrs	r3, r2
 800a682:	d011      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a688:	3308      	adds	r3, #8
 800a68a:	2101      	movs	r1, #1
 800a68c:	4618      	mov	r0, r3
 800a68e:	f001 f97d 	bl	800b98c <RCCEx_PLL2_Config>
 800a692:	4603      	mov	r3, r0
 800a694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	61b9      	str	r1, [r7, #24]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	d011      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	2102      	movs	r1, #2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 f95d 	bl	800b98c <RCCEx_PLL2_Config>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a6d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	6139      	str	r1, [r7, #16]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	617b      	str	r3, [r7, #20]
 800a6fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	d011      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a708:	3328      	adds	r3, #40	@ 0x28
 800a70a:	2100      	movs	r1, #0
 800a70c:	4618      	mov	r0, r3
 800a70e:	f001 f9ef 	bl	800baf0 <RCCEx_PLL3_Config>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	2100      	movs	r1, #0
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	f003 0310 	and.w	r3, r3, #16
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a73e:	460b      	mov	r3, r1
 800a740:	4313      	orrs	r3, r2
 800a742:	d011      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a748:	3328      	adds	r3, #40	@ 0x28
 800a74a:	2101      	movs	r1, #1
 800a74c:	4618      	mov	r0, r3
 800a74e:	f001 f9cf 	bl	800baf0 <RCCEx_PLL3_Config>
 800a752:	4603      	mov	r3, r0
 800a754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d003      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	2100      	movs	r1, #0
 800a772:	6039      	str	r1, [r7, #0]
 800a774:	f003 0320 	and.w	r3, r3, #32
 800a778:	607b      	str	r3, [r7, #4]
 800a77a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a77e:	460b      	mov	r3, r1
 800a780:	4313      	orrs	r3, r2
 800a782:	d011      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a788:	3328      	adds	r3, #40	@ 0x28
 800a78a:	2102      	movs	r1, #2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 f9af 	bl	800baf0 <RCCEx_PLL3_Config>
 800a792:	4603      	mov	r3, r0
 800a794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a7a8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e000      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7c2:	bf00      	nop
 800a7c4:	58024400 	.word	0x58024400

0800a7c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b090      	sub	sp, #64	@ 0x40
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a7da:	430b      	orrs	r3, r1
 800a7dc:	f040 8094 	bne.w	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a7e0:	4b9b      	ldr	r3, [pc, #620]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7e4:	f003 0307 	and.w	r3, r3, #7
 800a7e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	f200 8087 	bhi.w	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a7f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f8:	0800a80d 	.word	0x0800a80d
 800a7fc:	0800a835 	.word	0x0800a835
 800a800:	0800a85d 	.word	0x0800a85d
 800a804:	0800a8f9 	.word	0x0800a8f9
 800a808:	0800a885 	.word	0x0800a885
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a80c:	4b90      	ldr	r3, [pc, #576]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a818:	d108      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a81a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 ff62 	bl	800b6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a828:	f000 bc93 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a830:	f000 bc8f 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a834:	4b86      	ldr	r3, [pc, #536]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a83c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a840:	d108      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a842:	f107 0318 	add.w	r3, r7, #24
 800a846:	4618      	mov	r0, r3
 800a848:	f000 fca6 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a850:	f000 bc7f 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a858:	f000 bc7b 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a85c:	4b7c      	ldr	r3, [pc, #496]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a868:	d108      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a86a:	f107 030c 	add.w	r3, r7, #12
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fde6 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a878:	f000 bc6b 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a880:	f000 bc67 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a884:	4b72      	ldr	r3, [pc, #456]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a888:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a88c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a88e:	4b70      	ldr	r3, [pc, #448]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0304 	and.w	r3, r3, #4
 800a896:	2b04      	cmp	r3, #4
 800a898:	d10c      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d109      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8a0:	4b6b      	ldr	r3, [pc, #428]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	08db      	lsrs	r3, r3, #3
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	4a6a      	ldr	r2, [pc, #424]	@ (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8b2:	e01f      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8b4:	4b66      	ldr	r3, [pc, #408]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8c0:	d106      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a8c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8c8:	d102      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8ca:	4b63      	ldr	r3, [pc, #396]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8ce:	e011      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8d0:	4b5f      	ldr	r3, [pc, #380]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8dc:	d106      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8e4:	d102      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8e6:	4b5d      	ldr	r3, [pc, #372]	@ (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8ea:	e003      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8f0:	f000 bc2f 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8f4:	f000 bc2d 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8f8:	4b59      	ldr	r3, [pc, #356]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8fc:	f000 bc29 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a904:	f000 bc25 	b.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a90c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a910:	430b      	orrs	r3, r1
 800a912:	f040 80a7 	bne.w	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a916:	4b4e      	ldr	r3, [pc, #312]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a91a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a91e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a926:	d054      	beq.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a92e:	f200 808b 	bhi.w	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a938:	f000 8083 	beq.w	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a942:	f200 8081 	bhi.w	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a94c:	d02f      	beq.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a954:	d878      	bhi.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a962:	d012      	beq.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a964:	e070      	b.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a966:	4b3a      	ldr	r3, [pc, #232]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a96e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a972:	d107      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 feb5 	bl	800b6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a982:	e3e6      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a988:	e3e3      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a98a:	4b31      	ldr	r3, [pc, #196]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a996:	d107      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a998:	f107 0318 	add.w	r3, r7, #24
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 fbfb 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a6:	e3d4      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ac:	e3d1      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ae:	4b28      	ldr	r3, [pc, #160]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9ba:	d107      	bne.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9bc:	f107 030c 	add.w	r3, r7, #12
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 fd3d 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ca:	e3c2      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d0:	e3bf      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9d2:	4b1f      	ldr	r3, [pc, #124]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9dc:	4b1c      	ldr	r3, [pc, #112]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0304 	and.w	r3, r3, #4
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	d10c      	bne.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d109      	bne.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9ee:	4b18      	ldr	r3, [pc, #96]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	08db      	lsrs	r3, r3, #3
 800a9f4:	f003 0303 	and.w	r3, r3, #3
 800a9f8:	4a16      	ldr	r2, [pc, #88]	@ (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a9fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa00:	e01e      	b.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa02:	4b13      	ldr	r3, [pc, #76]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa0e:	d106      	bne.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800aa10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa16:	d102      	bne.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa18:	4b0f      	ldr	r3, [pc, #60]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aa1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa1c:	e010      	b.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa1e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa2a:	d106      	bne.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800aa2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa32:	d102      	bne.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa34:	4b09      	ldr	r3, [pc, #36]	@ (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa38:	e002      	b.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa3e:	e388      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa40:	e387      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa42:	4b07      	ldr	r3, [pc, #28]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa46:	e384      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa4c:	e381      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa4e:	bf00      	nop
 800aa50:	58024400 	.word	0x58024400
 800aa54:	03d09000 	.word	0x03d09000
 800aa58:	003d0900 	.word	0x003d0900
 800aa5c:	016e3600 	.word	0x016e3600
 800aa60:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aa64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa68:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	f040 809c 	bne.w	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aa72:	4b9e      	ldr	r3, [pc, #632]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa76:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800aa7a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa82:	d054      	beq.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800aa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa8a:	f200 808b 	bhi.w	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aa94:	f000 8083 	beq.w	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aa9e:	f200 8081 	bhi.w	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aaa8:	d02f      	beq.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aab0:	d878      	bhi.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d004      	beq.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800aab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aabe:	d012      	beq.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800aac0:	e070      	b.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aac2:	4b8a      	ldr	r3, [pc, #552]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aace:	d107      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 fe07 	bl	800b6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aade:	e338      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae4:	e335      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aae6:	4b81      	ldr	r3, [pc, #516]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaf2:	d107      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaf4:	f107 0318 	add.w	r3, r7, #24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 fb4d 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab02:	e326      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab08:	e323      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab0a:	4b78      	ldr	r3, [pc, #480]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab16:	d107      	bne.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab18:	f107 030c 	add.w	r3, r7, #12
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 fc8f 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab26:	e314      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab2c:	e311      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab2e:	4b6f      	ldr	r3, [pc, #444]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab38:	4b6c      	ldr	r3, [pc, #432]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d10c      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ab44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d109      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab4a:	4b68      	ldr	r3, [pc, #416]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	08db      	lsrs	r3, r3, #3
 800ab50:	f003 0303 	and.w	r3, r3, #3
 800ab54:	4a66      	ldr	r2, [pc, #408]	@ (800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ab56:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab5c:	e01e      	b.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab5e:	4b63      	ldr	r3, [pc, #396]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab6a:	d106      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab72:	d102      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab74:	4b5f      	ldr	r3, [pc, #380]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ab76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab78:	e010      	b.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab7a:	4b5c      	ldr	r3, [pc, #368]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab86:	d106      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ab88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab8e:	d102      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab90:	4b59      	ldr	r3, [pc, #356]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab94:	e002      	b.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab9a:	e2da      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab9c:	e2d9      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab9e:	4b57      	ldr	r3, [pc, #348]	@ (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba2:	e2d6      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba8:	e2d3      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800abaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800abb2:	430b      	orrs	r3, r1
 800abb4:	f040 80a7 	bne.w	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800abb8:	4b4c      	ldr	r3, [pc, #304]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abbc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800abc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abc8:	d055      	beq.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800abca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abd0:	f200 8096 	bhi.w	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800abd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800abda:	f000 8084 	beq.w	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800abde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800abe4:	f200 808c 	bhi.w	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800abe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abee:	d030      	beq.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800abf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abf6:	f200 8083 	bhi.w	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d004      	beq.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ac00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac06:	d012      	beq.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ac08:	e07a      	b.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac0a:	4b38      	ldr	r3, [pc, #224]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac16:	d107      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fd63 	bl	800b6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac26:	e294      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac2c:	e291      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac2e:	4b2f      	ldr	r3, [pc, #188]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac3a:	d107      	bne.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac3c:	f107 0318 	add.w	r3, r7, #24
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 faa9 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac4a:	e282      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac50:	e27f      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac52:	4b26      	ldr	r3, [pc, #152]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac5e:	d107      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac60:	f107 030c 	add.w	r3, r7, #12
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fbeb 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6e:	e270      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac74:	e26d      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac76:	4b1d      	ldr	r3, [pc, #116]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac80:	4b1a      	ldr	r3, [pc, #104]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b04      	cmp	r3, #4
 800ac8a:	d10c      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d109      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac92:	4b16      	ldr	r3, [pc, #88]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	4a14      	ldr	r2, [pc, #80]	@ (800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aca4:	e01e      	b.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aca6:	4b11      	ldr	r3, [pc, #68]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acb2:	d106      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800acb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acba:	d102      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acbc:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800acbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acc0:	e010      	b.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acc2:	4b0a      	ldr	r3, [pc, #40]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acce:	d106      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800acd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acd6:	d102      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acd8:	4b07      	ldr	r3, [pc, #28]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acdc:	e002      	b.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ace2:	e236      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ace4:	e235      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ace6:	4b05      	ldr	r3, [pc, #20]	@ (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ace8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acea:	e232      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800acec:	58024400 	.word	0x58024400
 800acf0:	03d09000 	.word	0x03d09000
 800acf4:	003d0900 	.word	0x003d0900
 800acf8:	016e3600 	.word	0x016e3600
 800acfc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad04:	e225      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ad06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad0a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ad0e:	430b      	orrs	r3, r1
 800ad10:	f040 8085 	bne.w	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ad14:	4b9c      	ldr	r3, [pc, #624]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad18:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ad1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad24:	d06b      	beq.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad2c:	d874      	bhi.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad34:	d056      	beq.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ad36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad3c:	d86c      	bhi.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad44:	d03b      	beq.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad4c:	d864      	bhi.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad54:	d021      	beq.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad5c:	d85c      	bhi.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800ad64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad6a:	d004      	beq.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800ad6c:	e054      	b.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ad6e:	f7fe fb5f 	bl	8009430 <HAL_RCC_GetPCLK1Freq>
 800ad72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad74:	e1ed      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad76:	4b84      	ldr	r3, [pc, #528]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad82:	d107      	bne.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad84:	f107 0318 	add.w	r3, r7, #24
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fa05 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad92:	e1de      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad98:	e1db      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad9a:	4b7b      	ldr	r3, [pc, #492]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ada2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ada6:	d107      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ada8:	f107 030c 	add.w	r3, r7, #12
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fb47 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb6:	e1cc      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adbc:	e1c9      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adbe:	4b72      	ldr	r3, [pc, #456]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0304 	and.w	r3, r3, #4
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	d109      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adca:	4b6f      	ldr	r3, [pc, #444]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	08db      	lsrs	r3, r3, #3
 800add0:	f003 0303 	and.w	r3, r3, #3
 800add4:	4a6d      	ldr	r2, [pc, #436]	@ (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800add6:	fa22 f303 	lsr.w	r3, r2, r3
 800adda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800addc:	e1b9      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade2:	e1b6      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ade4:	4b68      	ldr	r3, [pc, #416]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adf0:	d102      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800adf2:	4b67      	ldr	r3, [pc, #412]	@ (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800adf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf6:	e1ac      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfc:	e1a9      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adfe:	4b62      	ldr	r3, [pc, #392]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae0a:	d102      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ae0c:	4b61      	ldr	r3, [pc, #388]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ae0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae10:	e19f      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae12:	2300      	movs	r3, #0
 800ae14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae16:	e19c      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae1c:	e199      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae22:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ae26:	430b      	orrs	r3, r1
 800ae28:	d173      	bne.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae2a:	4b57      	ldr	r3, [pc, #348]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae32:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae3a:	d02f      	beq.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae42:	d863      	bhi.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ae44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d004      	beq.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae50:	d012      	beq.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ae52:	e05b      	b.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae54:	4b4c      	ldr	r3, [pc, #304]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae60:	d107      	bne.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae62:	f107 0318 	add.w	r3, r7, #24
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f996 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae70:	e16f      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae76:	e16c      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae78:	4b43      	ldr	r3, [pc, #268]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae84:	d107      	bne.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae86:	f107 030c 	add.w	r3, r7, #12
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fad8 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae94:	e15d      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae9a:	e15a      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae9c:	4b3a      	ldr	r3, [pc, #232]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aea0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aea4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aea6:	4b38      	ldr	r3, [pc, #224]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0304 	and.w	r3, r3, #4
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d10c      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800aeb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d109      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeb8:	4b33      	ldr	r3, [pc, #204]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	08db      	lsrs	r3, r3, #3
 800aebe:	f003 0303 	and.w	r3, r3, #3
 800aec2:	4a32      	ldr	r2, [pc, #200]	@ (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800aec4:	fa22 f303 	lsr.w	r3, r2, r3
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aeca:	e01e      	b.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aecc:	4b2e      	ldr	r3, [pc, #184]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aed8:	d106      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800aeda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aedc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aee0:	d102      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aee2:	4b2b      	ldr	r3, [pc, #172]	@ (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800aee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aee6:	e010      	b.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aee8:	4b27      	ldr	r3, [pc, #156]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aef4:	d106      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800aef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aefc:	d102      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aefe:	4b25      	ldr	r3, [pc, #148]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af02:	e002      	b.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af08:	e123      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af0a:	e122      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af10:	e11f      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af16:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800af1a:	430b      	orrs	r3, r1
 800af1c:	d13c      	bne.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af1e:	4b1a      	ldr	r3, [pc, #104]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af26:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d004      	beq.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800af2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af34:	d012      	beq.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800af36:	e023      	b.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af38:	4b13      	ldr	r3, [pc, #76]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af44:	d107      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 fbcc 	bl	800b6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af54:	e0fd      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5a:	e0fa      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af5c:	4b0a      	ldr	r3, [pc, #40]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af68:	d107      	bne.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af6a:	f107 0318 	add.w	r3, r7, #24
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 f912 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af78:	e0eb      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af7e:	e0e8      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af84:	e0e5      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af86:	bf00      	nop
 800af88:	58024400 	.word	0x58024400
 800af8c:	03d09000 	.word	0x03d09000
 800af90:	003d0900 	.word	0x003d0900
 800af94:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800af98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af9c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800afa0:	430b      	orrs	r3, r1
 800afa2:	f040 8085 	bne.w	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800afa6:	4b6d      	ldr	r3, [pc, #436]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afaa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800afae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800afb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afb6:	d06b      	beq.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afbe:	d874      	bhi.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800afc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afc6:	d056      	beq.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800afc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afce:	d86c      	bhi.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800afd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afd6:	d03b      	beq.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800afd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afde:	d864      	bhi.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800afe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe6:	d021      	beq.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800afe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afee:	d85c      	bhi.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d004      	beq.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800aff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800affc:	d004      	beq.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800affe:	e054      	b.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b000:	f000 f8b4 	bl	800b16c <HAL_RCCEx_GetD3PCLK1Freq>
 800b004:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b006:	e0a4      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b008:	4b54      	ldr	r3, [pc, #336]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b014:	d107      	bne.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b016:	f107 0318 	add.w	r3, r7, #24
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f8bc 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b024:	e095      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b02a:	e092      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b02c:	4b4b      	ldr	r3, [pc, #300]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b038:	d107      	bne.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b03a:	f107 030c 	add.w	r3, r7, #12
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 f9fe 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b048:	e083      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b04e:	e080      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b050:	4b42      	ldr	r3, [pc, #264]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	2b04      	cmp	r3, #4
 800b05a:	d109      	bne.n	800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b05c:	4b3f      	ldr	r3, [pc, #252]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	08db      	lsrs	r3, r3, #3
 800b062:	f003 0303 	and.w	r3, r3, #3
 800b066:	4a3e      	ldr	r2, [pc, #248]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b068:	fa22 f303 	lsr.w	r3, r2, r3
 800b06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b06e:	e070      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b074:	e06d      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b076:	4b39      	ldr	r3, [pc, #228]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b082:	d102      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b084:	4b37      	ldr	r3, [pc, #220]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b088:	e063      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b08e:	e060      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b090:	4b32      	ldr	r3, [pc, #200]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b09c:	d102      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b09e:	4b32      	ldr	r3, [pc, #200]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0a2:	e056      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a8:	e053      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ae:	e050      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	d148      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b0bc:	4b27      	ldr	r3, [pc, #156]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b0c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0cc:	d02a      	beq.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0d4:	d838      	bhi.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0e2:	d00d      	beq.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b0e4:	e030      	b.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0f2:	d102      	bne.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b0f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f8:	e02b      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0fe:	e028      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b100:	4b16      	ldr	r3, [pc, #88]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b108:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b10c:	d107      	bne.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b10e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b112:	4618      	mov	r0, r3
 800b114:	f000 fae8 	bl	800b6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b11c:	e019      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b122:	e016      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b124:	4b0d      	ldr	r3, [pc, #52]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b12c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b130:	d107      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b132:	f107 0318 	add.w	r3, r7, #24
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f82e 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b140:	e007      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b146:	e004      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b14c:	e001      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b154:	4618      	mov	r0, r3
 800b156:	3740      	adds	r7, #64	@ 0x40
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	58024400 	.word	0x58024400
 800b160:	03d09000 	.word	0x03d09000
 800b164:	003d0900 	.word	0x003d0900
 800b168:	016e3600 	.word	0x016e3600

0800b16c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b170:	f7fe f92e 	bl	80093d0 <HAL_RCC_GetHCLKFreq>
 800b174:	4602      	mov	r2, r0
 800b176:	4b06      	ldr	r3, [pc, #24]	@ (800b190 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	091b      	lsrs	r3, r3, #4
 800b17c:	f003 0307 	and.w	r3, r3, #7
 800b180:	4904      	ldr	r1, [pc, #16]	@ (800b194 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b182:	5ccb      	ldrb	r3, [r1, r3]
 800b184:	f003 031f 	and.w	r3, r3, #31
 800b188:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	58024400 	.word	0x58024400
 800b194:	08012924 	.word	0x08012924

0800b198 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b198:	b480      	push	{r7}
 800b19a:	b089      	sub	sp, #36	@ 0x24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1a0:	4ba1      	ldr	r3, [pc, #644]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a4:	f003 0303 	and.w	r3, r3, #3
 800b1a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b1aa:	4b9f      	ldr	r3, [pc, #636]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ae:	0b1b      	lsrs	r3, r3, #12
 800b1b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b1b6:	4b9c      	ldr	r3, [pc, #624]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ba:	091b      	lsrs	r3, r3, #4
 800b1bc:	f003 0301 	and.w	r3, r3, #1
 800b1c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b1c2:	4b99      	ldr	r3, [pc, #612]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1c6:	08db      	lsrs	r3, r3, #3
 800b1c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	fb02 f303 	mul.w	r3, r2, r3
 800b1d2:	ee07 3a90 	vmov	s15, r3
 800b1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 8111 	beq.w	800b408 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	f000 8083 	beq.w	800b2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	f200 80a1 	bhi.w	800b338 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d056      	beq.n	800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b202:	e099      	b.n	800b338 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b204:	4b88      	ldr	r3, [pc, #544]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0320 	and.w	r3, r3, #32
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d02d      	beq.n	800b26c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b210:	4b85      	ldr	r3, [pc, #532]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	08db      	lsrs	r3, r3, #3
 800b216:	f003 0303 	and.w	r3, r3, #3
 800b21a:	4a84      	ldr	r2, [pc, #528]	@ (800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b21c:	fa22 f303 	lsr.w	r3, r2, r3
 800b220:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	ee07 3a90 	vmov	s15, r3
 800b228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	ee07 3a90 	vmov	s15, r3
 800b232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23a:	4b7b      	ldr	r3, [pc, #492]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b266:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b26a:	e087      	b.n	800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	ee07 3a90 	vmov	s15, r3
 800b272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b276:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b434 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27e:	4b6a      	ldr	r3, [pc, #424]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b292:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ae:	e065      	b.n	800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2c2:	4b59      	ldr	r3, [pc, #356]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ca:	ee07 3a90 	vmov	s15, r3
 800b2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2f2:	e043      	b.n	800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b306:	4b48      	ldr	r3, [pc, #288]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b316:	ed97 6a03 	vldr	s12, [r7, #12]
 800b31a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b336:	e021      	b.n	800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	ee07 3a90 	vmov	s15, r3
 800b33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b342:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b34a:	4b37      	ldr	r3, [pc, #220]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b35e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b36a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b37a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b37c:	4b2a      	ldr	r3, [pc, #168]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b380:	0a5b      	lsrs	r3, r3, #9
 800b382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b392:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b396:	edd7 6a07 	vldr	s13, [r7, #28]
 800b39a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a2:	ee17 2a90 	vmov	r2, s15
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b3aa:	4b1f      	ldr	r3, [pc, #124]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ae:	0c1b      	lsrs	r3, r3, #16
 800b3b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3b4:	ee07 3a90 	vmov	s15, r3
 800b3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3d0:	ee17 2a90 	vmov	r2, s15
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b3d8:	4b13      	ldr	r3, [pc, #76]	@ (800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3dc:	0e1b      	lsrs	r3, r3, #24
 800b3de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3fe:	ee17 2a90 	vmov	r2, s15
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b406:	e008      	b.n	800b41a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	609a      	str	r2, [r3, #8]
}
 800b41a:	bf00      	nop
 800b41c:	3724      	adds	r7, #36	@ 0x24
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	58024400 	.word	0x58024400
 800b42c:	03d09000 	.word	0x03d09000
 800b430:	46000000 	.word	0x46000000
 800b434:	4c742400 	.word	0x4c742400
 800b438:	4a742400 	.word	0x4a742400
 800b43c:	4bb71b00 	.word	0x4bb71b00

0800b440 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b440:	b480      	push	{r7}
 800b442:	b089      	sub	sp, #36	@ 0x24
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b448:	4ba1      	ldr	r3, [pc, #644]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44c:	f003 0303 	and.w	r3, r3, #3
 800b450:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b452:	4b9f      	ldr	r3, [pc, #636]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b456:	0d1b      	lsrs	r3, r3, #20
 800b458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b45c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b45e:	4b9c      	ldr	r3, [pc, #624]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b462:	0a1b      	lsrs	r3, r3, #8
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b46a:	4b99      	ldr	r3, [pc, #612]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b46c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b46e:	08db      	lsrs	r3, r3, #3
 800b470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	fb02 f303 	mul.w	r3, r2, r3
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b482:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 8111 	beq.w	800b6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	2b02      	cmp	r3, #2
 800b492:	f000 8083 	beq.w	800b59c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	2b02      	cmp	r3, #2
 800b49a:	f200 80a1 	bhi.w	800b5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d003      	beq.n	800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d056      	beq.n	800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b4aa:	e099      	b.n	800b5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ac:	4b88      	ldr	r3, [pc, #544]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 0320 	and.w	r3, r3, #32
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d02d      	beq.n	800b514 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4b8:	4b85      	ldr	r3, [pc, #532]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	08db      	lsrs	r3, r3, #3
 800b4be:	f003 0303 	and.w	r3, r3, #3
 800b4c2:	4a84      	ldr	r2, [pc, #528]	@ (800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	ee07 3a90 	vmov	s15, r3
 800b4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4e2:	4b7b      	ldr	r3, [pc, #492]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b512:	e087      	b.n	800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b526:	4b6a      	ldr	r3, [pc, #424]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52e:	ee07 3a90 	vmov	s15, r3
 800b532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b536:	ed97 6a03 	vldr	s12, [r7, #12]
 800b53a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b556:	e065      	b.n	800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	ee07 3a90 	vmov	s15, r3
 800b55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b562:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b56a:	4b59      	ldr	r3, [pc, #356]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b572:	ee07 3a90 	vmov	s15, r3
 800b576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b57a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b57e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b58a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b59a:	e043      	b.n	800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ae:	4b48      	ldr	r3, [pc, #288]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5de:	e021      	b.n	800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	ee07 3a90 	vmov	s15, r3
 800b5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f2:	4b37      	ldr	r3, [pc, #220]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b602:	ed97 6a03 	vldr	s12, [r7, #12]
 800b606:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b622:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b624:	4b2a      	ldr	r3, [pc, #168]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b628:	0a5b      	lsrs	r3, r3, #9
 800b62a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b62e:	ee07 3a90 	vmov	s15, r3
 800b632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b63a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b63e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b64a:	ee17 2a90 	vmov	r2, s15
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b652:	4b1f      	ldr	r3, [pc, #124]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b656:	0c1b      	lsrs	r3, r3, #16
 800b658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b65c:	ee07 3a90 	vmov	s15, r3
 800b660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b66c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b678:	ee17 2a90 	vmov	r2, s15
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b680:	4b13      	ldr	r3, [pc, #76]	@ (800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b684:	0e1b      	lsrs	r3, r3, #24
 800b686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b68a:	ee07 3a90 	vmov	s15, r3
 800b68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b692:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b69a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b69e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a6:	ee17 2a90 	vmov	r2, s15
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b6ae:	e008      	b.n	800b6c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	609a      	str	r2, [r3, #8]
}
 800b6c2:	bf00      	nop
 800b6c4:	3724      	adds	r7, #36	@ 0x24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	58024400 	.word	0x58024400
 800b6d4:	03d09000 	.word	0x03d09000
 800b6d8:	46000000 	.word	0x46000000
 800b6dc:	4c742400 	.word	0x4c742400
 800b6e0:	4a742400 	.word	0x4a742400
 800b6e4:	4bb71b00 	.word	0x4bb71b00

0800b6e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b089      	sub	sp, #36	@ 0x24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6f0:	4ba0      	ldr	r3, [pc, #640]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f4:	f003 0303 	and.w	r3, r3, #3
 800b6f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b6fa:	4b9e      	ldr	r3, [pc, #632]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fe:	091b      	lsrs	r3, r3, #4
 800b700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b704:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b706:	4b9b      	ldr	r3, [pc, #620]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b710:	4b98      	ldr	r3, [pc, #608]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b714:	08db      	lsrs	r3, r3, #3
 800b716:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	fb02 f303 	mul.w	r3, r2, r3
 800b720:	ee07 3a90 	vmov	s15, r3
 800b724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b728:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 8111 	beq.w	800b956 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	2b02      	cmp	r3, #2
 800b738:	f000 8083 	beq.w	800b842 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	2b02      	cmp	r3, #2
 800b740:	f200 80a1 	bhi.w	800b886 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d056      	beq.n	800b7fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b750:	e099      	b.n	800b886 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b752:	4b88      	ldr	r3, [pc, #544]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0320 	and.w	r3, r3, #32
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d02d      	beq.n	800b7ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b75e:	4b85      	ldr	r3, [pc, #532]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	08db      	lsrs	r3, r3, #3
 800b764:	f003 0303 	and.w	r3, r3, #3
 800b768:	4a83      	ldr	r2, [pc, #524]	@ (800b978 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b76a:	fa22 f303 	lsr.w	r3, r2, r3
 800b76e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	ee07 3a90 	vmov	s15, r3
 800b780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b788:	4b7a      	ldr	r3, [pc, #488]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b78a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b798:	ed97 6a03 	vldr	s12, [r7, #12]
 800b79c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b7b8:	e087      	b.n	800b8ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	ee07 3a90 	vmov	s15, r3
 800b7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b980 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7cc:	4b69      	ldr	r3, [pc, #420]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d4:	ee07 3a90 	vmov	s15, r3
 800b7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7e0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7fc:	e065      	b.n	800b8ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	ee07 3a90 	vmov	s15, r3
 800b804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b808:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b984 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b80c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b810:	4b58      	ldr	r3, [pc, #352]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b818:	ee07 3a90 	vmov	s15, r3
 800b81c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b820:	ed97 6a03 	vldr	s12, [r7, #12]
 800b824:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b82c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b830:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b840:	e043      	b.n	800b8ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b854:	4b47      	ldr	r3, [pc, #284]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85c:	ee07 3a90 	vmov	s15, r3
 800b860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b864:	ed97 6a03 	vldr	s12, [r7, #12]
 800b868:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b86c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b87c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b880:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b884:	e021      	b.n	800b8ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	ee07 3a90 	vmov	s15, r3
 800b88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b890:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b980 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b898:	4b36      	ldr	r3, [pc, #216]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b89a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a0:	ee07 3a90 	vmov	s15, r3
 800b8a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b8ca:	4b2a      	ldr	r3, [pc, #168]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ce:	0a5b      	lsrs	r3, r3, #9
 800b8d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8d4:	ee07 3a90 	vmov	s15, r3
 800b8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8f0:	ee17 2a90 	vmov	r2, s15
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b8f8:	4b1e      	ldr	r3, [pc, #120]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8fc:	0c1b      	lsrs	r3, r3, #16
 800b8fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b902:	ee07 3a90 	vmov	s15, r3
 800b906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b90e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b912:	edd7 6a07 	vldr	s13, [r7, #28]
 800b916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b91a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b91e:	ee17 2a90 	vmov	r2, s15
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b926:	4b13      	ldr	r3, [pc, #76]	@ (800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b92a:	0e1b      	lsrs	r3, r3, #24
 800b92c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b930:	ee07 3a90 	vmov	s15, r3
 800b934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b93c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b940:	edd7 6a07 	vldr	s13, [r7, #28]
 800b944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b94c:	ee17 2a90 	vmov	r2, s15
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b954:	e008      	b.n	800b968 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	609a      	str	r2, [r3, #8]
}
 800b968:	bf00      	nop
 800b96a:	3724      	adds	r7, #36	@ 0x24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	58024400 	.word	0x58024400
 800b978:	03d09000 	.word	0x03d09000
 800b97c:	46000000 	.word	0x46000000
 800b980:	4c742400 	.word	0x4c742400
 800b984:	4a742400 	.word	0x4a742400
 800b988:	4bb71b00 	.word	0x4bb71b00

0800b98c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b99a:	4b53      	ldr	r3, [pc, #332]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800b99c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99e:	f003 0303 	and.w	r3, r3, #3
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d101      	bne.n	800b9aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e099      	b.n	800bade <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b9aa:	4b4f      	ldr	r3, [pc, #316]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a4e      	ldr	r2, [pc, #312]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800b9b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b9b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9b6:	f7f6 ff7f 	bl	80028b8 <HAL_GetTick>
 800b9ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9bc:	e008      	b.n	800b9d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9be:	f7f6 ff7b 	bl	80028b8 <HAL_GetTick>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d901      	bls.n	800b9d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	e086      	b.n	800bade <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9d0:	4b45      	ldr	r3, [pc, #276]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1f0      	bne.n	800b9be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b9dc:	4b42      	ldr	r3, [pc, #264]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800b9de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	031b      	lsls	r3, r3, #12
 800b9ea:	493f      	ldr	r1, [pc, #252]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	628b      	str	r3, [r1, #40]	@ 0x28
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	025b      	lsls	r3, r3, #9
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	431a      	orrs	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	041b      	lsls	r3, r3, #16
 800ba0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ba12:	431a      	orrs	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	061b      	lsls	r3, r3, #24
 800ba1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ba20:	4931      	ldr	r1, [pc, #196]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba22:	4313      	orrs	r3, r2
 800ba24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba26:	4b30      	ldr	r3, [pc, #192]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	492d      	ldr	r1, [pc, #180]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba34:	4313      	orrs	r3, r2
 800ba36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ba38:	4b2b      	ldr	r3, [pc, #172]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	f023 0220 	bic.w	r2, r3, #32
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	4928      	ldr	r1, [pc, #160]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ba4a:	4b27      	ldr	r3, [pc, #156]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba4e:	4a26      	ldr	r2, [pc, #152]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba50:	f023 0310 	bic.w	r3, r3, #16
 800ba54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ba56:	4b24      	ldr	r3, [pc, #144]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba5a:	4b24      	ldr	r3, [pc, #144]	@ (800baec <RCCEx_PLL2_Config+0x160>)
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	69d2      	ldr	r2, [r2, #28]
 800ba62:	00d2      	lsls	r2, r2, #3
 800ba64:	4920      	ldr	r1, [pc, #128]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba66:	4313      	orrs	r3, r2
 800ba68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ba6a:	4b1f      	ldr	r3, [pc, #124]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba6e:	4a1e      	ldr	r2, [pc, #120]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba70:	f043 0310 	orr.w	r3, r3, #16
 800ba74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d106      	bne.n	800ba8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ba7c:	4b1a      	ldr	r3, [pc, #104]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba80:	4a19      	ldr	r2, [pc, #100]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba88:	e00f      	b.n	800baaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d106      	bne.n	800ba9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ba90:	4b15      	ldr	r3, [pc, #84]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba94:	4a14      	ldr	r2, [pc, #80]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800ba96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba9c:	e005      	b.n	800baaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ba9e:	4b12      	ldr	r3, [pc, #72]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800baa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa2:	4a11      	ldr	r2, [pc, #68]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800baa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800baa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800baaa:	4b0f      	ldr	r3, [pc, #60]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a0e      	ldr	r2, [pc, #56]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800bab0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bab6:	f7f6 feff 	bl	80028b8 <HAL_GetTick>
 800baba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800babc:	e008      	b.n	800bad0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800babe:	f7f6 fefb 	bl	80028b8 <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d901      	bls.n	800bad0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	e006      	b.n	800bade <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bad0:	4b05      	ldr	r3, [pc, #20]	@ (800bae8 <RCCEx_PLL2_Config+0x15c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d0f0      	beq.n	800babe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800badc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	58024400 	.word	0x58024400
 800baec:	ffff0007 	.word	0xffff0007

0800baf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bafe:	4b53      	ldr	r3, [pc, #332]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb02:	f003 0303 	and.w	r3, r3, #3
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d101      	bne.n	800bb0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e099      	b.n	800bc42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bb0e:	4b4f      	ldr	r3, [pc, #316]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a4e      	ldr	r2, [pc, #312]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb1a:	f7f6 fecd 	bl	80028b8 <HAL_GetTick>
 800bb1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb20:	e008      	b.n	800bb34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb22:	f7f6 fec9 	bl	80028b8 <HAL_GetTick>
 800bb26:	4602      	mov	r2, r0
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d901      	bls.n	800bb34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e086      	b.n	800bc42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb34:	4b45      	ldr	r3, [pc, #276]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1f0      	bne.n	800bb22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bb40:	4b42      	ldr	r3, [pc, #264]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	051b      	lsls	r3, r3, #20
 800bb4e:	493f      	ldr	r1, [pc, #252]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	3b01      	subs	r3, #1
 800bb64:	025b      	lsls	r3, r3, #9
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	041b      	lsls	r3, r3, #16
 800bb72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bb76:	431a      	orrs	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	061b      	lsls	r3, r3, #24
 800bb80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bb84:	4931      	ldr	r1, [pc, #196]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb86:	4313      	orrs	r3, r2
 800bb88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb8a:	4b30      	ldr	r3, [pc, #192]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	492d      	ldr	r1, [pc, #180]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bb9c:	4b2b      	ldr	r3, [pc, #172]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bb9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	4928      	ldr	r1, [pc, #160]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bbae:	4b27      	ldr	r3, [pc, #156]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb2:	4a26      	ldr	r2, [pc, #152]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bbba:	4b24      	ldr	r3, [pc, #144]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbbe:	4b24      	ldr	r3, [pc, #144]	@ (800bc50 <RCCEx_PLL3_Config+0x160>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	69d2      	ldr	r2, [r2, #28]
 800bbc6:	00d2      	lsls	r2, r2, #3
 800bbc8:	4920      	ldr	r1, [pc, #128]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bbce:	4b1f      	ldr	r3, [pc, #124]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd2:	4a1e      	ldr	r2, [pc, #120]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bbd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d106      	bne.n	800bbee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bbe0:	4b1a      	ldr	r3, [pc, #104]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe4:	4a19      	ldr	r2, [pc, #100]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbe6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bbea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bbec:	e00f      	b.n	800bc0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d106      	bne.n	800bc02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bbf4:	4b15      	ldr	r3, [pc, #84]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf8:	4a14      	ldr	r2, [pc, #80]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bbfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bbfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc00:	e005      	b.n	800bc0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bc02:	4b12      	ldr	r3, [pc, #72]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc06:	4a11      	ldr	r2, [pc, #68]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bc08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a0e      	ldr	r2, [pc, #56]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bc14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc1a:	f7f6 fe4d 	bl	80028b8 <HAL_GetTick>
 800bc1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc20:	e008      	b.n	800bc34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc22:	f7f6 fe49 	bl	80028b8 <HAL_GetTick>
 800bc26:	4602      	mov	r2, r0
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d901      	bls.n	800bc34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e006      	b.n	800bc42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc34:	4b05      	ldr	r3, [pc, #20]	@ (800bc4c <RCCEx_PLL3_Config+0x15c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0f0      	beq.n	800bc22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	58024400 	.word	0x58024400
 800bc50:	ffff0007 	.word	0xffff0007

0800bc54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08a      	sub	sp, #40	@ 0x28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e075      	b.n	800bd52 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d105      	bne.n	800bc7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7f6 fa85 	bl	8002188 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2204      	movs	r2, #4
 800bc82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f868 	bl	800bd5c <HAL_SD_InitCard>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e05d      	b.n	800bd52 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bc96:	f107 0308 	add.w	r3, r7, #8
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fdaf 	bl	800c800 <HAL_SD_GetCardStatus>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e052      	b.n	800bd52 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bcac:	7e3b      	ldrb	r3, [r7, #24]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bcb2:	7e7b      	ldrb	r3, [r7, #25]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d10a      	bne.n	800bcd6 <HAL_SD_Init+0x82>
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <HAL_SD_Init+0x78>
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d004      	beq.n	800bcd6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcd2:	659a      	str	r2, [r3, #88]	@ 0x58
 800bcd4:	e00b      	b.n	800bcee <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d104      	bne.n	800bce8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bce4:	659a      	str	r2, [r3, #88]	@ 0x58
 800bce6:	e002      	b.n	800bcee <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fe6d 	bl	800c9d4 <HAL_SD_ConfigWideBusOperation>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d001      	beq.n	800bd04 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e026      	b.n	800bd52 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bd04:	f7f6 fdd8 	bl	80028b8 <HAL_GetTick>
 800bd08:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bd0a:	e011      	b.n	800bd30 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd0c:	f7f6 fdd4 	bl	80028b8 <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd1a:	d109      	bne.n	800bd30 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd22:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	e010      	b.n	800bd52 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 ff61 	bl	800cbf8 <HAL_SD_GetCardState>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b04      	cmp	r3, #4
 800bd3a:	d1e7      	bne.n	800bd0c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3728      	adds	r7, #40	@ 0x28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b08d      	sub	sp, #52	@ 0x34
 800bd60:	af02      	add	r7, sp, #8
 800bd62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bd64:	2300      	movs	r3, #0
 800bd66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bd70:	2300      	movs	r3, #0
 800bd72:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bd74:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bd78:	f04f 0100 	mov.w	r1, #0
 800bd7c:	f7fe fd24 	bl	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd80:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d109      	bne.n	800bd9c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800bd96:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e070      	b.n	800be7e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	0a1b      	lsrs	r3, r3, #8
 800bda0:	4a39      	ldr	r2, [pc, #228]	@ (800be88 <HAL_SD_InitCard+0x12c>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	091b      	lsrs	r3, r3, #4
 800bda8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681c      	ldr	r4, [r3, #0]
 800bdae:	466a      	mov	r2, sp
 800bdb0:	f107 0318 	add.w	r3, r7, #24
 800bdb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bdb8:	e882 0003 	stmia.w	r2, {r0, r1}
 800bdbc:	f107 030c 	add.w	r3, r7, #12
 800bdc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f003 fffe 	bl	800fdc4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f004 f841 	bl	800fe54 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800bde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d007      	beq.n	800bdfa <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bdea:	4a28      	ldr	r2, [pc, #160]	@ (800be8c <HAL_SD_InitCard+0x130>)
 800bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7f6 fd6b 	bl	80028d0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 ffea 	bl	800cdd4 <SD_PowerON>
 800be00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00b      	beq.n	800be20 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	431a      	orrs	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e02e      	b.n	800be7e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 ff09 	bl	800cc38 <SD_InitCard>
 800be26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00b      	beq.n	800be46 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be3a:	6a3b      	ldr	r3, [r7, #32]
 800be3c:	431a      	orrs	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e01b      	b.n	800be7e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800be4e:	4618      	mov	r0, r3
 800be50:	f004 f896 	bl	800ff80 <SDMMC_CmdBlockLength>
 800be54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00f      	beq.n	800be7c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a0b      	ldr	r2, [pc, #44]	@ (800be90 <HAL_SD_InitCard+0x134>)
 800be62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	431a      	orrs	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e000      	b.n	800be7e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	372c      	adds	r7, #44	@ 0x2c
 800be82:	46bd      	mov	sp, r7
 800be84:	bd90      	pop	{r4, r7, pc}
 800be86:	bf00      	nop
 800be88:	014f8b59 	.word	0x014f8b59
 800be8c:	00012110 	.word	0x00012110
 800be90:	1fe00fff 	.word	0x1fe00fff

0800be94 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08c      	sub	sp, #48	@ 0x30
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d107      	bne.n	800bebc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beb0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e08d      	b.n	800bfd8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	f040 8086 	bne.w	800bfd6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	441a      	add	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beda:	429a      	cmp	r2, r3
 800bedc:	d907      	bls.n	800beee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e074      	b.n	800bfd8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2203      	movs	r2, #3
 800bef2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2200      	movs	r2, #0
 800befc:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	025a      	lsls	r2, r3, #9
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d002      	beq.n	800bf1a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800bf14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf16:	025b      	lsls	r3, r3, #9
 800bf18:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf1e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	025b      	lsls	r3, r3, #9
 800bf24:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bf26:	2390      	movs	r3, #144	@ 0x90
 800bf28:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bf2a:	2302      	movs	r3, #2
 800bf2c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bf32:	2300      	movs	r3, #0
 800bf34:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f107 0210 	add.w	r2, r7, #16
 800bf3e:	4611      	mov	r1, r2
 800bf40:	4618      	mov	r0, r3
 800bf42:	f003 fff1 	bl	800ff28 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68da      	ldr	r2, [r3, #12]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf54:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2201      	movs	r2, #1
 800bf64:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d90a      	bls.n	800bf82 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2282      	movs	r2, #130	@ 0x82
 800bf70:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f004 f847 	bl	801000c <SDMMC_CmdReadMultiBlock>
 800bf7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bf80:	e009      	b.n	800bf96 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2281      	movs	r2, #129	@ 0x81
 800bf86:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f004 f819 	bl	800ffc6 <SDMMC_CmdReadSingleBlock>
 800bf94:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800bf96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d012      	beq.n	800bfc2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a0f      	ldr	r2, [pc, #60]	@ (800bfe0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800bfa2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfaa:	431a      	orrs	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e00a      	b.n	800bfd8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800bfd0:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e000      	b.n	800bfd8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800bfd6:	2302      	movs	r3, #2
  }
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3730      	adds	r7, #48	@ 0x30
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	1fe00fff 	.word	0x1fe00fff

0800bfe4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08c      	sub	sp, #48	@ 0x30
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d107      	bne.n	800c00c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c000:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	e08d      	b.n	800c128 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c012:	b2db      	uxtb	r3, r3
 800c014:	2b01      	cmp	r3, #1
 800c016:	f040 8086 	bne.w	800c126 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	441a      	add	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d907      	bls.n	800c03e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c032:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e074      	b.n	800c128 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2203      	movs	r2, #3
 800c042:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2200      	movs	r2, #0
 800c04c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	025a      	lsls	r2, r3, #9
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c060:	2b01      	cmp	r3, #1
 800c062:	d002      	beq.n	800c06a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c066:	025b      	lsls	r3, r3, #9
 800c068:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c06a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c06e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	025b      	lsls	r3, r3, #9
 800c074:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c076:	2390      	movs	r3, #144	@ 0x90
 800c078:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c07a:	2300      	movs	r3, #0
 800c07c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c07e:	2300      	movs	r3, #0
 800c080:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c082:	2300      	movs	r3, #0
 800c084:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f107 0210 	add.w	r2, r7, #16
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f003 ff49 	bl	800ff28 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68da      	ldr	r2, [r3, #12]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0a4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d90a      	bls.n	800c0d2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	22a0      	movs	r2, #160	@ 0xa0
 800c0c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f003 ffe5 	bl	8010098 <SDMMC_CmdWriteMultiBlock>
 800c0ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c0d0:	e009      	b.n	800c0e6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2290      	movs	r2, #144	@ 0x90
 800c0d6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f003 ffb7 	bl	8010052 <SDMMC_CmdWriteSingleBlock>
 800c0e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d012      	beq.n	800c112 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a0f      	ldr	r2, [pc, #60]	@ (800c130 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c0f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fa:	431a      	orrs	r2, r3
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e00a      	b.n	800c128 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c120:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	e000      	b.n	800c128 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c126:	2302      	movs	r3, #2
  }
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3730      	adds	r7, #48	@ 0x30
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	1fe00fff 	.word	0x1fe00fff

0800c134 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c140:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d008      	beq.n	800c162 <HAL_SD_IRQHandler+0x2e>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f003 0308 	and.w	r3, r3, #8
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f001 f926 	bl	800d3ac <SD_Read_IT>
 800c160:	e19a      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 80ac 	beq.w	800c2ca <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c17a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	4b59      	ldr	r3, [pc, #356]	@ (800c2ec <HAL_SD_IRQHandler+0x1b8>)
 800c188:	400b      	ands	r3, r1
 800c18a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c19a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68da      	ldr	r2, [r3, #12]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c1aa:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f003 0308 	and.w	r3, r3, #8
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d038      	beq.n	800c228 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f003 0302 	and.w	r3, r3, #2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d104      	bne.n	800c1ca <HAL_SD_IRQHandler+0x96>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f003 0320 	and.w	r3, r3, #32
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d011      	beq.n	800c1ee <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f003 ff86 	bl	80100e0 <SDMMC_CmdStopTransfer>
 800c1d4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d008      	beq.n	800c1ee <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f95b 	bl	800c4a4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a3f      	ldr	r2, [pc, #252]	@ (800c2f0 <HAL_SD_IRQHandler+0x1bc>)
 800c1f4:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f003 0301 	and.w	r3, r3, #1
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d104      	bne.n	800c218 <HAL_SD_IRQHandler+0xe4>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f003 0302 	and.w	r3, r3, #2
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f004 fc31 	bl	8010a80 <HAL_SD_RxCpltCallback>
 800c21e:	e13b      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f004 fc23 	bl	8010a6c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c226:	e137      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f000 8132 	beq.w	800c498 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2200      	movs	r2, #0
 800c23a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2200      	movs	r2, #0
 800c242:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2200      	movs	r2, #0
 800c24a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f003 0302 	and.w	r3, r3, #2
 800c252:	2b00      	cmp	r3, #0
 800c254:	d104      	bne.n	800c260 <HAL_SD_IRQHandler+0x12c>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f003 0320 	and.w	r3, r3, #32
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d011      	beq.n	800c284 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4618      	mov	r0, r3
 800c266:	f003 ff3b 	bl	80100e0 <SDMMC_CmdStopTransfer>
 800c26a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d008      	beq.n	800c284 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	431a      	orrs	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f910 	bl	800c4a4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f003 0310 	and.w	r3, r3, #16
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d104      	bne.n	800c2a6 <HAL_SD_IRQHandler+0x172>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f003 0320 	and.w	r3, r3, #32
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f004 fbe0 	bl	8010a6c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f003 0301 	and.w	r3, r3, #1
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d105      	bne.n	800c2c2 <HAL_SD_IRQHandler+0x18e>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f003 0302 	and.w	r3, r3, #2
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 80eb 	beq.w	800c498 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f004 fbdc 	bl	8010a80 <HAL_SD_RxCpltCallback>
}
 800c2c8:	e0e6      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00d      	beq.n	800c2f4 <HAL_SD_IRQHandler+0x1c0>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f003 0308 	and.w	r3, r3, #8
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d008      	beq.n	800c2f4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 f8a8 	bl	800d438 <SD_Write_IT>
 800c2e8:	e0d6      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
 800c2ea:	bf00      	nop
 800c2ec:	ffff3ec5 	.word	0xffff3ec5
 800c2f0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2fa:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f000 809d 	beq.w	800c43e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c30a:	f003 0302 	and.w	r3, r3, #2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d005      	beq.n	800c31e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c316:	f043 0202 	orr.w	r2, r3, #2
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c324:	f003 0308 	and.w	r3, r3, #8
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d005      	beq.n	800c338 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c330:	f043 0208 	orr.w	r2, r3, #8
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c33e:	f003 0320 	and.w	r3, r3, #32
 800c342:	2b00      	cmp	r3, #0
 800c344:	d005      	beq.n	800c352 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c34a:	f043 0220 	orr.w	r2, r3, #32
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c358:	f003 0310 	and.w	r3, r3, #16
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d005      	beq.n	800c36c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c364:	f043 0210 	orr.w	r2, r3, #16
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a4b      	ldr	r2, [pc, #300]	@ (800c4a0 <HAL_SD_IRQHandler+0x36c>)
 800c372:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c382:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c392:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c3a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c3b2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f003 fe91 	bl	80100e0 <SDMMC_CmdStopTransfer>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3c4:	431a      	orrs	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68da      	ldr	r2, [r3, #12]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3d8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3e2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f003 0308 	and.w	r3, r3, #8
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00a      	beq.n	800c404 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f851 	bl	800c4a4 <HAL_SD_ErrorCallback>
}
 800c402:	e049      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d044      	beq.n	800c498 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c412:	2b00      	cmp	r3, #0
 800c414:	d040      	beq.n	800c498 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c424:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2200      	movs	r2, #0
 800c42c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f834 	bl	800c4a4 <HAL_SD_ErrorCallback>
}
 800c43c:	e02c      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d025      	beq.n	800c498 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c454:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c45c:	f003 0304 	and.w	r3, r3, #4
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10c      	bne.n	800c47e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f003 0320 	and.w	r3, r3, #32
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f001 f84a 	bl	800d508 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c474:	e010      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f001 f832 	bl	800d4e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c47c:	e00c      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f003 0320 	and.w	r3, r3, #32
 800c484:	2b00      	cmp	r3, #0
 800c486:	d003      	beq.n	800c490 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f001 f833 	bl	800d4f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c48e:	e003      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f001 f81b 	bl	800d4cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c496:	e7ff      	b.n	800c498 <HAL_SD_IRQHandler+0x364>
 800c498:	bf00      	nop
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	18000f3a 	.word	0x18000f3a

0800c4a4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c4ac:	bf00      	nop
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4c6:	0f9b      	lsrs	r3, r3, #30
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4d2:	0e9b      	lsrs	r3, r3, #26
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	f003 030f 	and.w	r3, r3, #15
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4e4:	0e1b      	lsrs	r3, r3, #24
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	f003 0303 	and.w	r3, r3, #3
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4f6:	0c1b      	lsrs	r3, r3, #16
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c502:	0a1b      	lsrs	r3, r3, #8
 800c504:	b2da      	uxtb	r2, r3
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c518:	0d1b      	lsrs	r3, r3, #20
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c524:	0c1b      	lsrs	r3, r3, #16
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f003 030f 	and.w	r3, r3, #15
 800c52c:	b2da      	uxtb	r2, r3
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c536:	0bdb      	lsrs	r3, r3, #15
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	b2da      	uxtb	r2, r3
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c548:	0b9b      	lsrs	r3, r3, #14
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	f003 0301 	and.w	r3, r3, #1
 800c550:	b2da      	uxtb	r2, r3
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c55a:	0b5b      	lsrs	r3, r3, #13
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	b2da      	uxtb	r2, r3
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c56c:	0b1b      	lsrs	r3, r3, #12
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	b2da      	uxtb	r2, r3
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2200      	movs	r2, #0
 800c57e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c584:	2b00      	cmp	r3, #0
 800c586:	d163      	bne.n	800c650 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c58c:	009a      	lsls	r2, r3, #2
 800c58e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c592:	4013      	ands	r3, r2
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c598:	0f92      	lsrs	r2, r2, #30
 800c59a:	431a      	orrs	r2, r3
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5a4:	0edb      	lsrs	r3, r3, #27
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	b2da      	uxtb	r2, r3
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5b6:	0e1b      	lsrs	r3, r3, #24
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	f003 0307 	and.w	r3, r3, #7
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5c8:	0d5b      	lsrs	r3, r3, #21
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	f003 0307 	and.w	r3, r3, #7
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5da:	0c9b      	lsrs	r3, r3, #18
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	f003 0307 	and.w	r3, r3, #7
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5ec:	0bdb      	lsrs	r3, r3, #15
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	f003 0307 	and.w	r3, r3, #7
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	7e1b      	ldrb	r3, [r3, #24]
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	f003 0307 	and.w	r3, r3, #7
 800c60e:	3302      	adds	r3, #2
 800c610:	2201      	movs	r2, #1
 800c612:	fa02 f303 	lsl.w	r3, r2, r3
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c61a:	fb03 f202 	mul.w	r2, r3, r2
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	7a1b      	ldrb	r3, [r3, #8]
 800c626:	b2db      	uxtb	r3, r3
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	2201      	movs	r2, #1
 800c62e:	409a      	lsls	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c63c:	0a52      	lsrs	r2, r2, #9
 800c63e:	fb03 f202 	mul.w	r2, r3, r2
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c64c:	655a      	str	r2, [r3, #84]	@ 0x54
 800c64e:	e031      	b.n	800c6b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c654:	2b01      	cmp	r3, #1
 800c656:	d11d      	bne.n	800c694 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c65c:	041b      	lsls	r3, r3, #16
 800c65e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c666:	0c1b      	lsrs	r3, r3, #16
 800c668:	431a      	orrs	r2, r3
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	3301      	adds	r3, #1
 800c674:	029a      	lsls	r2, r3, #10
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c688:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	655a      	str	r2, [r3, #84]	@ 0x54
 800c692:	e00f      	b.n	800c6b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a58      	ldr	r2, [pc, #352]	@ (800c7fc <HAL_SD_GetCardCSD+0x344>)
 800c69a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e09d      	b.n	800c7f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6b8:	0b9b      	lsrs	r3, r3, #14
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6ca:	09db      	lsrs	r3, r3, #7
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6d2:	b2da      	uxtb	r2, r3
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c6ec:	0fdb      	lsrs	r3, r3, #31
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c6f8:	0f5b      	lsrs	r3, r3, #29
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	f003 0303 	and.w	r3, r3, #3
 800c700:	b2da      	uxtb	r2, r3
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c70a:	0e9b      	lsrs	r3, r3, #26
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	f003 0307 	and.w	r3, r3, #7
 800c712:	b2da      	uxtb	r2, r3
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c71c:	0d9b      	lsrs	r3, r3, #22
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	f003 030f 	and.w	r3, r3, #15
 800c724:	b2da      	uxtb	r2, r3
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c72e:	0d5b      	lsrs	r3, r3, #21
 800c730:	b2db      	uxtb	r3, r3
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	b2da      	uxtb	r2, r3
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c74a:	0c1b      	lsrs	r3, r3, #16
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	f003 0301 	and.w	r3, r3, #1
 800c752:	b2da      	uxtb	r2, r3
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c75e:	0bdb      	lsrs	r3, r3, #15
 800c760:	b2db      	uxtb	r3, r3
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	b2da      	uxtb	r2, r3
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c772:	0b9b      	lsrs	r3, r3, #14
 800c774:	b2db      	uxtb	r3, r3
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c786:	0b5b      	lsrs	r3, r3, #13
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c79a:	0b1b      	lsrs	r3, r3, #12
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7ae:	0a9b      	lsrs	r3, r3, #10
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	f003 0303 	and.w	r3, r3, #3
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7c2:	0a1b      	lsrs	r3, r3, #8
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	f003 0303 	and.w	r3, r3, #3
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7d6:	085b      	lsrs	r3, r3, #1
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7de:	b2da      	uxtb	r2, r3
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	1fe00fff 	.word	0x1fe00fff

0800c800 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b094      	sub	sp, #80	@ 0x50
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c80a:	2300      	movs	r3, #0
 800c80c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c816:	b2db      	uxtb	r3, r3
 800c818:	2b03      	cmp	r3, #3
 800c81a:	d101      	bne.n	800c820 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e0a7      	b.n	800c970 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c820:	f107 0308 	add.w	r3, r7, #8
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fb62 	bl	800cef0 <SD_SendSDStatus>
 800c82c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c82e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c830:	2b00      	cmp	r3, #0
 800c832:	d011      	beq.n	800c858 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a4f      	ldr	r2, [pc, #316]	@ (800c978 <HAL_SD_GetCardStatus+0x178>)
 800c83a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c842:	431a      	orrs	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c856:	e070      	b.n	800c93a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	099b      	lsrs	r3, r3, #6
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	f003 0303 	and.w	r3, r3, #3
 800c862:	b2da      	uxtb	r2, r3
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	095b      	lsrs	r3, r3, #5
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	f003 0301 	and.w	r3, r3, #1
 800c872:	b2da      	uxtb	r2, r3
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	0a1b      	lsrs	r3, r3, #8
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c882:	b29a      	uxth	r2, r3
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	0e1b      	lsrs	r3, r3, #24
 800c888:	b29b      	uxth	r3, r3
 800c88a:	4313      	orrs	r3, r2
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	061a      	lsls	r2, r3, #24
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	021b      	lsls	r3, r3, #8
 800c89a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c89e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	0a1b      	lsrs	r3, r3, #8
 800c8a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c8a8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	0e1b      	lsrs	r3, r3, #24
 800c8ae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	0a1b      	lsrs	r3, r3, #8
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	0d1b      	lsrs	r3, r3, #20
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 030f 	and.w	r3, r3, #15
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	0c1b      	lsrs	r3, r3, #16
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	0a9b      	lsrs	r3, r3, #10
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	0a1b      	lsrs	r3, r3, #8
 800c906:	b2db      	uxtb	r3, r3
 800c908:	f003 0303 	and.w	r3, r3, #3
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	091b      	lsrs	r3, r3, #4
 800c916:	b2db      	uxtb	r3, r3
 800c918:	f003 030f 	and.w	r3, r3, #15
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	b2db      	uxtb	r3, r3
 800c926:	f003 030f 	and.w	r3, r3, #15
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	0e1b      	lsrs	r3, r3, #24
 800c934:	b2da      	uxtb	r2, r3
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c942:	4618      	mov	r0, r3
 800c944:	f003 fb1c 	bl	800ff80 <SDMMC_CmdBlockLength>
 800c948:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00d      	beq.n	800c96c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a08      	ldr	r2, [pc, #32]	@ (800c978 <HAL_SD_GetCardStatus+0x178>)
 800c956:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c95c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2201      	movs	r2, #1
 800c962:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800c96c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c970:	4618      	mov	r0, r3
 800c972:	3750      	adds	r7, #80	@ 0x50
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	1fe00fff 	.word	0x1fe00fff

0800c97c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c9d4:	b590      	push	{r4, r7, lr}
 800c9d6:	b08d      	sub	sp, #52	@ 0x34
 800c9d8:	af02      	add	r7, sp, #8
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2203      	movs	r2, #3
 800c9e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9f0:	2b03      	cmp	r3, #3
 800c9f2:	d02e      	beq.n	800ca52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9fa:	d106      	bne.n	800ca0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca08:	e029      	b.n	800ca5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca10:	d10a      	bne.n	800ca28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fb64 	bl	800d0e0 <SD_WideBus_Enable>
 800ca18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca1e:	6a3b      	ldr	r3, [r7, #32]
 800ca20:	431a      	orrs	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca26:	e01a      	b.n	800ca5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10a      	bne.n	800ca44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fba1 	bl	800d176 <SD_WideBus_Disable>
 800ca34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	431a      	orrs	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca42:	e00c      	b.n	800ca5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca48:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca50:	e005      	b.n	800ca5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca56:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d007      	beq.n	800ca76 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a5f      	ldr	r2, [pc, #380]	@ (800cbe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ca6c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca74:	e096      	b.n	800cba4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ca76:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800ca7a:	f04f 0100 	mov.w	r1, #0
 800ca7e:	f7fd fea3 	bl	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800ca82:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 8083 	beq.w	800cb92 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	695a      	ldr	r2, [r3, #20]
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	4950      	ldr	r1, [pc, #320]	@ (800cbec <HAL_SD_ConfigWideBusOperation+0x218>)
 800caaa:	fba1 1303 	umull	r1, r3, r1, r3
 800caae:	0e1b      	lsrs	r3, r3, #24
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d303      	bcc.n	800cabc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	61bb      	str	r3, [r7, #24]
 800caba:	e05a      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cac4:	d103      	bne.n	800cace <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	695b      	ldr	r3, [r3, #20]
 800caca:	61bb      	str	r3, [r7, #24]
 800cacc:	e051      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cad6:	d126      	bne.n	800cb26 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10e      	bne.n	800cafe <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	4a43      	ldr	r2, [pc, #268]	@ (800cbf0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d906      	bls.n	800caf6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	4a40      	ldr	r2, [pc, #256]	@ (800cbec <HAL_SD_ConfigWideBusOperation+0x218>)
 800caec:	fba2 2303 	umull	r2, r3, r2, r3
 800caf0:	0e5b      	lsrs	r3, r3, #25
 800caf2:	61bb      	str	r3, [r7, #24]
 800caf4:	e03d      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	61bb      	str	r3, [r7, #24]
 800cafc:	e039      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	69fa      	ldr	r2, [r7, #28]
 800cb06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb0a:	4a39      	ldr	r2, [pc, #228]	@ (800cbf0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d906      	bls.n	800cb1e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	4a36      	ldr	r2, [pc, #216]	@ (800cbec <HAL_SD_ConfigWideBusOperation+0x218>)
 800cb14:	fba2 2303 	umull	r2, r3, r2, r3
 800cb18:	0e5b      	lsrs	r3, r3, #25
 800cb1a:	61bb      	str	r3, [r7, #24]
 800cb1c:	e029      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	61bb      	str	r3, [r7, #24]
 800cb24:	e025      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	695b      	ldr	r3, [r3, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10e      	bne.n	800cb4c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	4a30      	ldr	r2, [pc, #192]	@ (800cbf4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d906      	bls.n	800cb44 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	4a2c      	ldr	r2, [pc, #176]	@ (800cbec <HAL_SD_ConfigWideBusOperation+0x218>)
 800cb3a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb3e:	0e1b      	lsrs	r3, r3, #24
 800cb40:	61bb      	str	r3, [r7, #24]
 800cb42:	e016      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	695b      	ldr	r3, [r3, #20]
 800cb48:	61bb      	str	r3, [r7, #24]
 800cb4a:	e012      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	005b      	lsls	r3, r3, #1
 800cb52:	69fa      	ldr	r2, [r7, #28]
 800cb54:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb58:	4a26      	ldr	r2, [pc, #152]	@ (800cbf4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d906      	bls.n	800cb6c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	4a22      	ldr	r2, [pc, #136]	@ (800cbec <HAL_SD_ConfigWideBusOperation+0x218>)
 800cb62:	fba2 2303 	umull	r2, r3, r2, r3
 800cb66:	0e1b      	lsrs	r3, r3, #24
 800cb68:	61bb      	str	r3, [r7, #24]
 800cb6a:	e002      	b.n	800cb72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681c      	ldr	r4, [r3, #0]
 800cb76:	466a      	mov	r2, sp
 800cb78:	f107 0314 	add.w	r3, r7, #20
 800cb7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cb80:	e882 0003 	stmia.w	r2, {r0, r1}
 800cb84:	f107 0308 	add.w	r3, r7, #8
 800cb88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f003 f91a 	bl	800fdc4 <SDMMC_Init>
 800cb90:	e008      	b.n	800cba4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cbac:	4618      	mov	r0, r3
 800cbae:	f003 f9e7 	bl	800ff80 <SDMMC_CmdBlockLength>
 800cbb2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbb4:	6a3b      	ldr	r3, [r7, #32]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00c      	beq.n	800cbd4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a0a      	ldr	r2, [pc, #40]	@ (800cbe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cbc0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	431a      	orrs	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	372c      	adds	r7, #44	@ 0x2c
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd90      	pop	{r4, r7, pc}
 800cbe8:	1fe00fff 	.word	0x1fe00fff
 800cbec:	55e63b89 	.word	0x55e63b89
 800cbf0:	02faf080 	.word	0x02faf080
 800cbf4:	017d7840 	.word	0x017d7840

0800cbf8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cc04:	f107 030c 	add.w	r3, r7, #12
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fa40 	bl	800d090 <SD_SendStatus>
 800cc10:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d005      	beq.n	800cc24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	431a      	orrs	r2, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	0a5b      	lsrs	r3, r3, #9
 800cc28:	f003 030f 	and.w	r3, r3, #15
 800cc2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cc2e:	693b      	ldr	r3, [r7, #16]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3718      	adds	r7, #24
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b090      	sub	sp, #64	@ 0x40
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cc40:	2300      	movs	r3, #0
 800cc42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cc44:	f7f5 fe38 	bl	80028b8 <HAL_GetTick>
 800cc48:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f003 f911 	bl	800fe76 <SDMMC_GetPowerState>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d102      	bne.n	800cc60 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cc5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cc5e:	e0b5      	b.n	800cdcc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d02e      	beq.n	800ccc6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f003 fb5c 	bl	801032a <SDMMC_CmdSendCID>
 800cc72:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d001      	beq.n	800cc7e <SD_InitCard+0x46>
    {
      return errorstate;
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7c:	e0a6      	b.n	800cdcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2100      	movs	r1, #0
 800cc84:	4618      	mov	r0, r3
 800cc86:	f003 f93c 	bl	800ff02 <SDMMC_GetResponse>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2104      	movs	r1, #4
 800cc96:	4618      	mov	r0, r3
 800cc98:	f003 f933 	bl	800ff02 <SDMMC_GetResponse>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2108      	movs	r1, #8
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f003 f92a 	bl	800ff02 <SDMMC_GetResponse>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	210c      	movs	r1, #12
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f003 f921 	bl	800ff02 <SDMMC_GetResponse>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d01d      	beq.n	800cd0a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ccce:	e019      	b.n	800cd04 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f107 020a 	add.w	r2, r7, #10
 800ccd8:	4611      	mov	r1, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f003 fb64 	bl	80103a8 <SDMMC_CmdSetRelAdd>
 800cce0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800cce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <SD_InitCard+0xb4>
      {
        return errorstate;
 800cce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccea:	e06f      	b.n	800cdcc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ccec:	f7f5 fde4 	bl	80028b8 <HAL_GetTick>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d902      	bls.n	800cd04 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ccfe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd02:	e063      	b.n	800cdcc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800cd04:	897b      	ldrh	r3, [r7, #10]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d0e2      	beq.n	800ccd0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	d036      	beq.n	800cd80 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cd12:	897b      	ldrh	r3, [r7, #10]
 800cd14:	461a      	mov	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd22:	041b      	lsls	r3, r3, #16
 800cd24:	4619      	mov	r1, r3
 800cd26:	4610      	mov	r0, r2
 800cd28:	f003 fb1e 	bl	8010368 <SDMMC_CmdSendCSD>
 800cd2c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <SD_InitCard+0x100>
    {
      return errorstate;
 800cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd36:	e049      	b.n	800cdcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f003 f8df 	bl	800ff02 <SDMMC_GetResponse>
 800cd44:	4602      	mov	r2, r0
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2104      	movs	r1, #4
 800cd50:	4618      	mov	r0, r3
 800cd52:	f003 f8d6 	bl	800ff02 <SDMMC_GetResponse>
 800cd56:	4602      	mov	r2, r0
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2108      	movs	r1, #8
 800cd62:	4618      	mov	r0, r3
 800cd64:	f003 f8cd 	bl	800ff02 <SDMMC_GetResponse>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	210c      	movs	r1, #12
 800cd74:	4618      	mov	r0, r3
 800cd76:	f003 f8c4 	bl	800ff02 <SDMMC_GetResponse>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2104      	movs	r1, #4
 800cd86:	4618      	mov	r0, r3
 800cd88:	f003 f8bb 	bl	800ff02 <SDMMC_GetResponse>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	0d1a      	lsrs	r2, r3, #20
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cd94:	f107 030c 	add.w	r3, r7, #12
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7ff fb8c 	bl	800c4b8 <HAL_SD_GetCardCSD>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cda6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cdaa:	e00f      	b.n	800cdcc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb4:	041b      	lsls	r3, r3, #16
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4610      	mov	r0, r2
 800cdba:	f003 f9cd 	bl	8010158 <SDMMC_CmdSelDesel>
 800cdbe:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <SD_InitCard+0x192>
  {
    return errorstate;
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc8:	e000      	b.n	800cdcc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3740      	adds	r7, #64	@ 0x40
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cddc:	2300      	movs	r3, #0
 800cdde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cde0:	2300      	movs	r3, #0
 800cde2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f003 f9d6 	bl	801019e <SDMMC_CmdGoIdleState>
 800cdf2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <SD_PowerON+0x2a>
  {
    return errorstate;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	e072      	b.n	800cee4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f003 f9e9 	bl	80101da <SDMMC_CmdOperCond>
 800ce08:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce10:	d10d      	bne.n	800ce2e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f003 f9be 	bl	801019e <SDMMC_CmdGoIdleState>
 800ce22:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d004      	beq.n	800ce34 <SD_PowerON+0x60>
    {
      return errorstate;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	e05a      	b.n	800cee4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d137      	bne.n	800ceac <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2100      	movs	r1, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f003 f9e9 	bl	801021a <SDMMC_CmdAppCommand>
 800ce48:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d02d      	beq.n	800ceac <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ce54:	e046      	b.n	800cee4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f003 f9dc 	bl	801021a <SDMMC_CmdAppCommand>
 800ce62:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <SD_PowerON+0x9a>
    {
      return errorstate;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	e03a      	b.n	800cee4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	491e      	ldr	r1, [pc, #120]	@ (800ceec <SD_PowerON+0x118>)
 800ce74:	4618      	mov	r0, r3
 800ce76:	f003 f9f3 	bl	8010260 <SDMMC_CmdAppOperCommand>
 800ce7a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce82:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ce86:	e02d      	b.n	800cee4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f003 f837 	bl	800ff02 <SDMMC_GetResponse>
 800ce94:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	0fdb      	lsrs	r3, r3, #31
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d101      	bne.n	800cea2 <SD_PowerON+0xce>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e000      	b.n	800cea4 <SD_PowerON+0xd0>
 800cea2:	2300      	movs	r3, #0
 800cea4:	613b      	str	r3, [r7, #16]

    count++;
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d802      	bhi.n	800cebc <SD_PowerON+0xe8>
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d0cc      	beq.n	800ce56 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d902      	bls.n	800cecc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cec6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ceca:	e00b      	b.n	800cee4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	c1100000 	.word	0xc1100000

0800cef0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08c      	sub	sp, #48	@ 0x30
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cefa:	f7f5 fcdd 	bl	80028b8 <HAL_GetTick>
 800cefe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2100      	movs	r1, #0
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f002 fff9 	bl	800ff02 <SDMMC_GetResponse>
 800cf10:	4603      	mov	r3, r0
 800cf12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf1a:	d102      	bne.n	800cf22 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cf1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf20:	e0b0      	b.n	800d084 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2140      	movs	r1, #64	@ 0x40
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f003 f829 	bl	800ff80 <SDMMC_CmdBlockLength>
 800cf2e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d005      	beq.n	800cf42 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	e0a0      	b.n	800d084 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf4a:	041b      	lsls	r3, r3, #16
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	4610      	mov	r0, r2
 800cf50:	f003 f963 	bl	801021a <SDMMC_CmdAppCommand>
 800cf54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d005      	beq.n	800cf68 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cf64:	6a3b      	ldr	r3, [r7, #32]
 800cf66:	e08d      	b.n	800d084 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf6c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cf6e:	2340      	movs	r3, #64	@ 0x40
 800cf70:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800cf72:	2360      	movs	r3, #96	@ 0x60
 800cf74:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cf76:	2302      	movs	r3, #2
 800cf78:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f107 0208 	add.w	r2, r7, #8
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f002 ffcb 	bl	800ff28 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4618      	mov	r0, r3
 800cf98:	f003 fa4b 	bl	8010432 <SDMMC_CmdStatusRegister>
 800cf9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf9e:	6a3b      	ldr	r3, [r7, #32]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d02b      	beq.n	800cffc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cfac:	6a3b      	ldr	r3, [r7, #32]
 800cfae:	e069      	b.n	800d084 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d013      	beq.n	800cfe6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfc2:	e00d      	b.n	800cfe0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f002 ff25 	bl	800fe18 <SDMMC_ReadFIFO>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd2:	601a      	str	r2, [r3, #0]
        pData++;
 800cfd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800cfda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfdc:	3301      	adds	r3, #1
 800cfde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe2:	2b07      	cmp	r3, #7
 800cfe4:	d9ee      	bls.n	800cfc4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cfe6:	f7f5 fc67 	bl	80028b8 <HAL_GetTick>
 800cfea:	4602      	mov	r2, r0
 800cfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cff4:	d102      	bne.n	800cffc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cff6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cffa:	e043      	b.n	800d084 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d002:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0d2      	beq.n	800cfb0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d010:	f003 0308 	and.w	r3, r3, #8
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d018:	2308      	movs	r3, #8
 800d01a:	e033      	b.n	800d084 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d022:	f003 0302 	and.w	r3, r3, #2
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d02a:	2302      	movs	r3, #2
 800d02c:	e02a      	b.n	800d084 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d034:	f003 0320 	and.w	r3, r3, #32
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d017      	beq.n	800d06c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d03c:	2320      	movs	r3, #32
 800d03e:	e021      	b.n	800d084 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4618      	mov	r0, r3
 800d046:	f002 fee7 	bl	800fe18 <SDMMC_ReadFIFO>
 800d04a:	4602      	mov	r2, r0
 800d04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04e:	601a      	str	r2, [r3, #0]
    pData++;
 800d050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d052:	3304      	adds	r3, #4
 800d054:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d056:	f7f5 fc2f 	bl	80028b8 <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d064:	d102      	bne.n	800d06c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d066:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d06a:	e00b      	b.n	800d084 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1e2      	bne.n	800d040 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a03      	ldr	r2, [pc, #12]	@ (800d08c <SD_SendSDStatus+0x19c>)
 800d080:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3730      	adds	r7, #48	@ 0x30
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	18000f3a 	.word	0x18000f3a

0800d090 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d0a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d0a4:	e018      	b.n	800d0d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ae:	041b      	lsls	r3, r3, #16
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	f003 f99a 	bl	80103ec <SDMMC_CmdSendStatus>
 800d0b8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d001      	beq.n	800d0c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	e009      	b.n	800d0d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f002 ff19 	bl	800ff02 <SDMMC_GetResponse>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f002 ff03 	bl	800ff02 <SDMMC_GetResponse>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d106:	d102      	bne.n	800d10e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d10c:	e02f      	b.n	800d16e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d10e:	f107 030c 	add.w	r3, r7, #12
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f879 	bl	800d20c <SD_FindSCR>
 800d11a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	e023      	b.n	800d16e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01c      	beq.n	800d16a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d138:	041b      	lsls	r3, r3, #16
 800d13a:	4619      	mov	r1, r3
 800d13c:	4610      	mov	r0, r2
 800d13e:	f003 f86c 	bl	801021a <SDMMC_CmdAppCommand>
 800d142:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d001      	beq.n	800d14e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	e00f      	b.n	800d16e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2102      	movs	r1, #2
 800d154:	4618      	mov	r0, r3
 800d156:	f003 f8a3 	bl	80102a0 <SDMMC_CmdBusWidth>
 800d15a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d001      	beq.n	800d166 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	e003      	b.n	800d16e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d166:	2300      	movs	r3, #0
 800d168:	e001      	b.n	800d16e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d16a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b086      	sub	sp, #24
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d17e:	2300      	movs	r3, #0
 800d180:	60fb      	str	r3, [r7, #12]
 800d182:	2300      	movs	r3, #0
 800d184:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2100      	movs	r1, #0
 800d18c:	4618      	mov	r0, r3
 800d18e:	f002 feb8 	bl	800ff02 <SDMMC_GetResponse>
 800d192:	4603      	mov	r3, r0
 800d194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d19c:	d102      	bne.n	800d1a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d19e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d1a2:	e02f      	b.n	800d204 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d1a4:	f107 030c 	add.w	r3, r7, #12
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 f82e 	bl	800d20c <SD_FindSCR>
 800d1b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d001      	beq.n	800d1bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	e023      	b.n	800d204 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d01c      	beq.n	800d200 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ce:	041b      	lsls	r3, r3, #16
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	4610      	mov	r0, r2
 800d1d4:	f003 f821 	bl	801021a <SDMMC_CmdAppCommand>
 800d1d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	e00f      	b.n	800d204 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f003 f858 	bl	80102a0 <SDMMC_CmdBusWidth>
 800d1f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	e003      	b.n	800d204 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	e001      	b.n	800d204 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d200:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d204:	4618      	mov	r0, r3
 800d206:	3718      	adds	r7, #24
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08e      	sub	sp, #56	@ 0x38
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d216:	f7f5 fb4f 	bl	80028b8 <HAL_GetTick>
 800d21a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d220:	2300      	movs	r3, #0
 800d222:	60bb      	str	r3, [r7, #8]
 800d224:	2300      	movs	r3, #0
 800d226:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2108      	movs	r1, #8
 800d232:	4618      	mov	r0, r3
 800d234:	f002 fea4 	bl	800ff80 <SDMMC_CmdBlockLength>
 800d238:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d242:	e0ad      	b.n	800d3a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d24c:	041b      	lsls	r3, r3, #16
 800d24e:	4619      	mov	r1, r3
 800d250:	4610      	mov	r0, r2
 800d252:	f002 ffe2 	bl	801021a <SDMMC_CmdAppCommand>
 800d256:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d001      	beq.n	800d262 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d260:	e09e      	b.n	800d3a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d266:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d268:	2308      	movs	r3, #8
 800d26a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d26c:	2330      	movs	r3, #48	@ 0x30
 800d26e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d270:	2302      	movs	r3, #2
 800d272:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d274:	2300      	movs	r3, #0
 800d276:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d278:	2301      	movs	r3, #1
 800d27a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f107 0210 	add.w	r2, r7, #16
 800d284:	4611      	mov	r1, r2
 800d286:	4618      	mov	r0, r3
 800d288:	f002 fe4e 	bl	800ff28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4618      	mov	r0, r3
 800d292:	f003 f828 	bl	80102e6 <SDMMC_CmdSendSCR>
 800d296:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d027      	beq.n	800d2ee <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a0:	e07e      	b.n	800d3a0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d113      	bne.n	800d2d8 <SD_FindSCR+0xcc>
 800d2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d110      	bne.n	800d2d8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f002 fdac 	bl	800fe18 <SDMMC_ReadFIFO>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f002 fda5 	bl	800fe18 <SDMMC_ReadFIFO>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	60fb      	str	r3, [r7, #12]
      index++;
 800d2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d2d8:	f7f5 faee 	bl	80028b8 <HAL_GetTick>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2e6:	d102      	bne.n	800d2ee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d2e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2ec:	e058      	b.n	800d3a0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2f4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d2f8:	4013      	ands	r3, r2
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d0d1      	beq.n	800d2a2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d304:	f003 0308 	and.w	r3, r3, #8
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d005      	beq.n	800d318 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2208      	movs	r2, #8
 800d312:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d314:	2308      	movs	r3, #8
 800d316:	e043      	b.n	800d3a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d31e:	f003 0302 	and.w	r3, r3, #2
 800d322:	2b00      	cmp	r3, #0
 800d324:	d005      	beq.n	800d332 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2202      	movs	r2, #2
 800d32c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d32e:	2302      	movs	r3, #2
 800d330:	e036      	b.n	800d3a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d338:	f003 0320 	and.w	r3, r3, #32
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d005      	beq.n	800d34c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2220      	movs	r2, #32
 800d346:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d348:	2320      	movs	r3, #32
 800d34a:	e029      	b.n	800d3a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a15      	ldr	r2, [pc, #84]	@ (800d3a8 <SD_FindSCR+0x19c>)
 800d352:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	061a      	lsls	r2, r3, #24
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	021b      	lsls	r3, r3, #8
 800d35c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d360:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	0a1b      	lsrs	r3, r3, #8
 800d366:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d36a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	0e1b      	lsrs	r3, r3, #24
 800d370:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d374:	601a      	str	r2, [r3, #0]
    scr++;
 800d376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d378:	3304      	adds	r3, #4
 800d37a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	061a      	lsls	r2, r3, #24
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	021b      	lsls	r3, r3, #8
 800d384:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d388:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	0a1b      	lsrs	r3, r3, #8
 800d38e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d392:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	0e1b      	lsrs	r3, r3, #24
 800d398:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3738      	adds	r7, #56	@ 0x38
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	18000f3a 	.word	0x18000f3a

0800d3ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3b8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3be:	2b1f      	cmp	r3, #31
 800d3c0:	d936      	bls.n	800d430 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	617b      	str	r3, [r7, #20]
 800d3c6:	e027      	b.n	800d418 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f002 fd23 	bl	800fe18 <SDMMC_ReadFIFO>
 800d3d2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	0a1b      	lsrs	r3, r3, #8
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	0c1b      	lsrs	r3, r3, #16
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	3301      	adds	r3, #1
 800d400:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	0e1b      	lsrs	r3, r3, #24
 800d406:	b2da      	uxtb	r2, r3
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	3301      	adds	r3, #1
 800d410:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	3301      	adds	r3, #1
 800d416:	617b      	str	r3, [r7, #20]
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	2b07      	cmp	r3, #7
 800d41c:	d9d4      	bls.n	800d3c8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	693a      	ldr	r2, [r7, #16]
 800d422:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d428:	f1a3 0220 	sub.w	r2, r3, #32
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d430:	bf00      	nop
 800d432:	3718      	adds	r7, #24
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	69db      	ldr	r3, [r3, #28]
 800d444:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	2b1f      	cmp	r3, #31
 800d44c:	d93a      	bls.n	800d4c4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d44e:	2300      	movs	r3, #0
 800d450:	617b      	str	r3, [r7, #20]
 800d452:	e02b      	b.n	800d4ac <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	3301      	adds	r3, #1
 800d45e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	021a      	lsls	r2, r3, #8
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	4313      	orrs	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	3301      	adds	r3, #1
 800d470:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	041a      	lsls	r2, r3, #16
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	3301      	adds	r3, #1
 800d482:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	061a      	lsls	r2, r3, #24
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	4313      	orrs	r3, r2
 800d48e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	3301      	adds	r3, #1
 800d494:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f107 020c 	add.w	r2, r7, #12
 800d49e:	4611      	mov	r1, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f002 fcc6 	bl	800fe32 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	617b      	str	r3, [r7, #20]
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	2b07      	cmp	r3, #7
 800d4b0:	d9d0      	bls.n	800d454 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6a1b      	ldr	r3, [r3, #32]
 800d4bc:	f1a3 0220 	sub.w	r2, r3, #32
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	621a      	str	r2, [r3, #32]
  }
}
 800d4c4:	bf00      	nop
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e049      	b.n	800d5c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d106      	bne.n	800d548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7f4 feb6 	bl	80022b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2202      	movs	r2, #2
 800d54c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	3304      	adds	r3, #4
 800d558:	4619      	mov	r1, r3
 800d55a:	4610      	mov	r0, r2
 800d55c:	f000 fc58 	bl	800de10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
	...

0800d5cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d001      	beq.n	800d5e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e05e      	b.n	800d6a2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2202      	movs	r2, #2
 800d5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68da      	ldr	r2, [r3, #12]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f042 0201 	orr.w	r2, r2, #1
 800d5fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a2b      	ldr	r2, [pc, #172]	@ (800d6b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d02c      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d60e:	d027      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a27      	ldr	r2, [pc, #156]	@ (800d6b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d022      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a26      	ldr	r2, [pc, #152]	@ (800d6b8 <HAL_TIM_Base_Start_IT+0xec>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d01d      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a24      	ldr	r2, [pc, #144]	@ (800d6bc <HAL_TIM_Base_Start_IT+0xf0>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d018      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a23      	ldr	r2, [pc, #140]	@ (800d6c0 <HAL_TIM_Base_Start_IT+0xf4>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d013      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a21      	ldr	r2, [pc, #132]	@ (800d6c4 <HAL_TIM_Base_Start_IT+0xf8>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d00e      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a20      	ldr	r2, [pc, #128]	@ (800d6c8 <HAL_TIM_Base_Start_IT+0xfc>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d009      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a1e      	ldr	r2, [pc, #120]	@ (800d6cc <HAL_TIM_Base_Start_IT+0x100>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d004      	beq.n	800d660 <HAL_TIM_Base_Start_IT+0x94>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a1d      	ldr	r2, [pc, #116]	@ (800d6d0 <HAL_TIM_Base_Start_IT+0x104>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d115      	bne.n	800d68c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	689a      	ldr	r2, [r3, #8]
 800d666:	4b1b      	ldr	r3, [pc, #108]	@ (800d6d4 <HAL_TIM_Base_Start_IT+0x108>)
 800d668:	4013      	ands	r3, r2
 800d66a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2b06      	cmp	r3, #6
 800d670:	d015      	beq.n	800d69e <HAL_TIM_Base_Start_IT+0xd2>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d678:	d011      	beq.n	800d69e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f042 0201 	orr.w	r2, r2, #1
 800d688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d68a:	e008      	b.n	800d69e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f042 0201 	orr.w	r2, r2, #1
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	e000      	b.n	800d6a0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d69e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	40010000 	.word	0x40010000
 800d6b4:	40000400 	.word	0x40000400
 800d6b8:	40000800 	.word	0x40000800
 800d6bc:	40000c00 	.word	0x40000c00
 800d6c0:	40010400 	.word	0x40010400
 800d6c4:	40001800 	.word	0x40001800
 800d6c8:	40014000 	.word	0x40014000
 800d6cc:	4000e000 	.word	0x4000e000
 800d6d0:	4000e400 	.word	0x4000e400
 800d6d4:	00010007 	.word	0x00010007

0800d6d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e049      	b.n	800d77e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d106      	bne.n	800d704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f841 	bl	800d786 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2202      	movs	r2, #2
 800d708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	3304      	adds	r3, #4
 800d714:	4619      	mov	r1, r3
 800d716:	4610      	mov	r0, r2
 800d718:	f000 fb7a 	bl	800de10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2201      	movs	r2, #1
 800d760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2201      	movs	r2, #1
 800d768:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d77c:	2300      	movs	r3, #0
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d786:	b480      	push	{r7}
 800d788:	b083      	sub	sp, #12
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d78e:	bf00      	nop
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr

0800d79a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b084      	sub	sp, #16
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	f003 0302 	and.w	r3, r3, #2
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d020      	beq.n	800d7fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f003 0302 	and.w	r3, r3, #2
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d01b      	beq.n	800d7fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f06f 0202 	mvn.w	r2, #2
 800d7ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	f003 0303 	and.w	r3, r3, #3
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d003      	beq.n	800d7ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f000 faf5 	bl	800ddd4 <HAL_TIM_IC_CaptureCallback>
 800d7ea:	e005      	b.n	800d7f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fae7 	bl	800ddc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 faf8 	bl	800dde8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	f003 0304 	and.w	r3, r3, #4
 800d804:	2b00      	cmp	r3, #0
 800d806:	d020      	beq.n	800d84a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f003 0304 	and.w	r3, r3, #4
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d01b      	beq.n	800d84a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f06f 0204 	mvn.w	r2, #4
 800d81a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2202      	movs	r2, #2
 800d820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	699b      	ldr	r3, [r3, #24]
 800d828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d003      	beq.n	800d838 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 facf 	bl	800ddd4 <HAL_TIM_IC_CaptureCallback>
 800d836:	e005      	b.n	800d844 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fac1 	bl	800ddc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fad2 	bl	800dde8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	f003 0308 	and.w	r3, r3, #8
 800d850:	2b00      	cmp	r3, #0
 800d852:	d020      	beq.n	800d896 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f003 0308 	and.w	r3, r3, #8
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d01b      	beq.n	800d896 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f06f 0208 	mvn.w	r2, #8
 800d866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2204      	movs	r2, #4
 800d86c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	69db      	ldr	r3, [r3, #28]
 800d874:	f003 0303 	and.w	r3, r3, #3
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d003      	beq.n	800d884 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 faa9 	bl	800ddd4 <HAL_TIM_IC_CaptureCallback>
 800d882:	e005      	b.n	800d890 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fa9b 	bl	800ddc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 faac 	bl	800dde8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	f003 0310 	and.w	r3, r3, #16
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d020      	beq.n	800d8e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f003 0310 	and.w	r3, r3, #16
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d01b      	beq.n	800d8e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f06f 0210 	mvn.w	r2, #16
 800d8b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2208      	movs	r2, #8
 800d8b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	69db      	ldr	r3, [r3, #28]
 800d8c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d003      	beq.n	800d8d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 fa83 	bl	800ddd4 <HAL_TIM_IC_CaptureCallback>
 800d8ce:	e005      	b.n	800d8dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 fa75 	bl	800ddc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa86 	bl	800dde8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	f003 0301 	and.w	r3, r3, #1
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00c      	beq.n	800d906 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f003 0301 	and.w	r3, r3, #1
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d007      	beq.n	800d906 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f06f 0201 	mvn.w	r2, #1
 800d8fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7f4 f8dd 	bl	8001ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d104      	bne.n	800d91a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00c      	beq.n	800d934 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d920:	2b00      	cmp	r3, #0
 800d922:	d007      	beq.n	800d934 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d92c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 ffc6 	bl	800e8c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00c      	beq.n	800d958 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d944:	2b00      	cmp	r3, #0
 800d946:	d007      	beq.n	800d958 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 ffbe 	bl	800e8d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00c      	beq.n	800d97c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d007      	beq.n	800d97c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 fa40 	bl	800ddfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	f003 0320 	and.w	r3, r3, #32
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00c      	beq.n	800d9a0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f003 0320 	and.w	r3, r3, #32
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d007      	beq.n	800d9a0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f06f 0220 	mvn.w	r2, #32
 800d998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 ff86 	bl	800e8ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d9a0:	bf00      	nop
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d101      	bne.n	800d9c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	e0ff      	b.n	800dbc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b14      	cmp	r3, #20
 800d9d2:	f200 80f0 	bhi.w	800dbb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d9d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9dc:	0800da31 	.word	0x0800da31
 800d9e0:	0800dbb7 	.word	0x0800dbb7
 800d9e4:	0800dbb7 	.word	0x0800dbb7
 800d9e8:	0800dbb7 	.word	0x0800dbb7
 800d9ec:	0800da71 	.word	0x0800da71
 800d9f0:	0800dbb7 	.word	0x0800dbb7
 800d9f4:	0800dbb7 	.word	0x0800dbb7
 800d9f8:	0800dbb7 	.word	0x0800dbb7
 800d9fc:	0800dab3 	.word	0x0800dab3
 800da00:	0800dbb7 	.word	0x0800dbb7
 800da04:	0800dbb7 	.word	0x0800dbb7
 800da08:	0800dbb7 	.word	0x0800dbb7
 800da0c:	0800daf3 	.word	0x0800daf3
 800da10:	0800dbb7 	.word	0x0800dbb7
 800da14:	0800dbb7 	.word	0x0800dbb7
 800da18:	0800dbb7 	.word	0x0800dbb7
 800da1c:	0800db35 	.word	0x0800db35
 800da20:	0800dbb7 	.word	0x0800dbb7
 800da24:	0800dbb7 	.word	0x0800dbb7
 800da28:	0800dbb7 	.word	0x0800dbb7
 800da2c:	0800db75 	.word	0x0800db75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	4618      	mov	r0, r3
 800da38:	f000 fa9c 	bl	800df74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	699a      	ldr	r2, [r3, #24]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f042 0208 	orr.w	r2, r2, #8
 800da4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	699a      	ldr	r2, [r3, #24]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f022 0204 	bic.w	r2, r2, #4
 800da5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6999      	ldr	r1, [r3, #24]
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	691a      	ldr	r2, [r3, #16]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	430a      	orrs	r2, r1
 800da6c:	619a      	str	r2, [r3, #24]
      break;
 800da6e:	e0a5      	b.n	800dbbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	68b9      	ldr	r1, [r7, #8]
 800da76:	4618      	mov	r0, r3
 800da78:	f000 fb0c 	bl	800e094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	699a      	ldr	r2, [r3, #24]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	699a      	ldr	r2, [r3, #24]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6999      	ldr	r1, [r3, #24]
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	021a      	lsls	r2, r3, #8
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	430a      	orrs	r2, r1
 800daae:	619a      	str	r2, [r3, #24]
      break;
 800dab0:	e084      	b.n	800dbbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68b9      	ldr	r1, [r7, #8]
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 fb75 	bl	800e1a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	69da      	ldr	r2, [r3, #28]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f042 0208 	orr.w	r2, r2, #8
 800dacc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	69da      	ldr	r2, [r3, #28]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f022 0204 	bic.w	r2, r2, #4
 800dadc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69d9      	ldr	r1, [r3, #28]
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	691a      	ldr	r2, [r3, #16]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	430a      	orrs	r2, r1
 800daee:	61da      	str	r2, [r3, #28]
      break;
 800daf0:	e064      	b.n	800dbbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68b9      	ldr	r1, [r7, #8]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f000 fbdd 	bl	800e2b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	69da      	ldr	r2, [r3, #28]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	69da      	ldr	r2, [r3, #28]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	69d9      	ldr	r1, [r3, #28]
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	021a      	lsls	r2, r3, #8
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	430a      	orrs	r2, r1
 800db30:	61da      	str	r2, [r3, #28]
      break;
 800db32:	e043      	b.n	800dbbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	68b9      	ldr	r1, [r7, #8]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f000 fc26 	bl	800e38c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f042 0208 	orr.w	r2, r2, #8
 800db4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f022 0204 	bic.w	r2, r2, #4
 800db5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	691a      	ldr	r2, [r3, #16]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	430a      	orrs	r2, r1
 800db70:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800db72:	e023      	b.n	800dbbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68b9      	ldr	r1, [r7, #8]
 800db7a:	4618      	mov	r0, r3
 800db7c:	f000 fc6a 	bl	800e454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	021a      	lsls	r2, r3, #8
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dbb4:	e002      	b.n	800dbbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	75fb      	strb	r3, [r7, #23]
      break;
 800dbba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dbc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop

0800dbd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d101      	bne.n	800dbec <HAL_TIM_ConfigClockSource+0x1c>
 800dbe8:	2302      	movs	r3, #2
 800dbea:	e0dc      	b.n	800dda6 <HAL_TIM_ConfigClockSource+0x1d6>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	4b6a      	ldr	r3, [pc, #424]	@ (800ddb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dc08:	4013      	ands	r3, r2
 800dc0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dc12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a64      	ldr	r2, [pc, #400]	@ (800ddb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	f000 80a9 	beq.w	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc28:	4a62      	ldr	r2, [pc, #392]	@ (800ddb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	f200 80ae 	bhi.w	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc30:	4a61      	ldr	r2, [pc, #388]	@ (800ddb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	f000 80a1 	beq.w	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc38:	4a5f      	ldr	r2, [pc, #380]	@ (800ddb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	f200 80a6 	bhi.w	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc40:	4a5e      	ldr	r2, [pc, #376]	@ (800ddbc <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	f000 8099 	beq.w	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc48:	4a5c      	ldr	r2, [pc, #368]	@ (800ddbc <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	f200 809e 	bhi.w	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dc54:	f000 8091 	beq.w	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dc5c:	f200 8096 	bhi.w	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc64:	f000 8089 	beq.w	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc6c:	f200 808e 	bhi.w	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc74:	d03e      	beq.n	800dcf4 <HAL_TIM_ConfigClockSource+0x124>
 800dc76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc7a:	f200 8087 	bhi.w	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc82:	f000 8086 	beq.w	800dd92 <HAL_TIM_ConfigClockSource+0x1c2>
 800dc86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc8a:	d87f      	bhi.n	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc8c:	2b70      	cmp	r3, #112	@ 0x70
 800dc8e:	d01a      	beq.n	800dcc6 <HAL_TIM_ConfigClockSource+0xf6>
 800dc90:	2b70      	cmp	r3, #112	@ 0x70
 800dc92:	d87b      	bhi.n	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc94:	2b60      	cmp	r3, #96	@ 0x60
 800dc96:	d050      	beq.n	800dd3a <HAL_TIM_ConfigClockSource+0x16a>
 800dc98:	2b60      	cmp	r3, #96	@ 0x60
 800dc9a:	d877      	bhi.n	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc9c:	2b50      	cmp	r3, #80	@ 0x50
 800dc9e:	d03c      	beq.n	800dd1a <HAL_TIM_ConfigClockSource+0x14a>
 800dca0:	2b50      	cmp	r3, #80	@ 0x50
 800dca2:	d873      	bhi.n	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dca4:	2b40      	cmp	r3, #64	@ 0x40
 800dca6:	d058      	beq.n	800dd5a <HAL_TIM_ConfigClockSource+0x18a>
 800dca8:	2b40      	cmp	r3, #64	@ 0x40
 800dcaa:	d86f      	bhi.n	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dcac:	2b30      	cmp	r3, #48	@ 0x30
 800dcae:	d064      	beq.n	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcb0:	2b30      	cmp	r3, #48	@ 0x30
 800dcb2:	d86b      	bhi.n	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dcb4:	2b20      	cmp	r3, #32
 800dcb6:	d060      	beq.n	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcb8:	2b20      	cmp	r3, #32
 800dcba:	d867      	bhi.n	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d05c      	beq.n	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcc0:	2b10      	cmp	r3, #16
 800dcc2:	d05a      	beq.n	800dd7a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcc4:	e062      	b.n	800dd8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dcd6:	f000 fca1 	bl	800e61c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	609a      	str	r2, [r3, #8]
      break;
 800dcf2:	e04f      	b.n	800dd94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dd04:	f000 fc8a 	bl	800e61c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	689a      	ldr	r2, [r3, #8]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dd16:	609a      	str	r2, [r3, #8]
      break;
 800dd18:	e03c      	b.n	800dd94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd26:	461a      	mov	r2, r3
 800dd28:	f000 fbfa 	bl	800e520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2150      	movs	r1, #80	@ 0x50
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 fc54 	bl	800e5e0 <TIM_ITRx_SetConfig>
      break;
 800dd38:	e02c      	b.n	800dd94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd46:	461a      	mov	r2, r3
 800dd48:	f000 fc19 	bl	800e57e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2160      	movs	r1, #96	@ 0x60
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 fc44 	bl	800e5e0 <TIM_ITRx_SetConfig>
      break;
 800dd58:	e01c      	b.n	800dd94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd66:	461a      	mov	r2, r3
 800dd68:	f000 fbda 	bl	800e520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2140      	movs	r1, #64	@ 0x40
 800dd72:	4618      	mov	r0, r3
 800dd74:	f000 fc34 	bl	800e5e0 <TIM_ITRx_SetConfig>
      break;
 800dd78:	e00c      	b.n	800dd94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4619      	mov	r1, r3
 800dd84:	4610      	mov	r0, r2
 800dd86:	f000 fc2b 	bl	800e5e0 <TIM_ITRx_SetConfig>
      break;
 800dd8a:	e003      	b.n	800dd94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	73fb      	strb	r3, [r7, #15]
      break;
 800dd90:	e000      	b.n	800dd94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dd92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	ffceff88 	.word	0xffceff88
 800ddb4:	00100040 	.word	0x00100040
 800ddb8:	00100030 	.word	0x00100030
 800ddbc:	00100020 	.word	0x00100020

0800ddc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dddc:	bf00      	nop
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	4a4a      	ldr	r2, [pc, #296]	@ (800df4c <TIM_Base_SetConfig+0x13c>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d013      	beq.n	800de50 <TIM_Base_SetConfig+0x40>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de2e:	d00f      	beq.n	800de50 <TIM_Base_SetConfig+0x40>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a47      	ldr	r2, [pc, #284]	@ (800df50 <TIM_Base_SetConfig+0x140>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d00b      	beq.n	800de50 <TIM_Base_SetConfig+0x40>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a46      	ldr	r2, [pc, #280]	@ (800df54 <TIM_Base_SetConfig+0x144>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d007      	beq.n	800de50 <TIM_Base_SetConfig+0x40>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4a45      	ldr	r2, [pc, #276]	@ (800df58 <TIM_Base_SetConfig+0x148>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d003      	beq.n	800de50 <TIM_Base_SetConfig+0x40>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a44      	ldr	r2, [pc, #272]	@ (800df5c <TIM_Base_SetConfig+0x14c>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d108      	bne.n	800de62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	4313      	orrs	r3, r2
 800de60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4a39      	ldr	r2, [pc, #228]	@ (800df4c <TIM_Base_SetConfig+0x13c>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d027      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de70:	d023      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4a36      	ldr	r2, [pc, #216]	@ (800df50 <TIM_Base_SetConfig+0x140>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d01f      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4a35      	ldr	r2, [pc, #212]	@ (800df54 <TIM_Base_SetConfig+0x144>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d01b      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4a34      	ldr	r2, [pc, #208]	@ (800df58 <TIM_Base_SetConfig+0x148>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d017      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4a33      	ldr	r2, [pc, #204]	@ (800df5c <TIM_Base_SetConfig+0x14c>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d013      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	4a32      	ldr	r2, [pc, #200]	@ (800df60 <TIM_Base_SetConfig+0x150>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d00f      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a31      	ldr	r2, [pc, #196]	@ (800df64 <TIM_Base_SetConfig+0x154>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d00b      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a30      	ldr	r2, [pc, #192]	@ (800df68 <TIM_Base_SetConfig+0x158>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d007      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a2f      	ldr	r2, [pc, #188]	@ (800df6c <TIM_Base_SetConfig+0x15c>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d003      	beq.n	800deba <TIM_Base_SetConfig+0xaa>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a2e      	ldr	r2, [pc, #184]	@ (800df70 <TIM_Base_SetConfig+0x160>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d108      	bne.n	800decc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	68fa      	ldr	r2, [r7, #12]
 800dec8:	4313      	orrs	r3, r2
 800deca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	689a      	ldr	r2, [r3, #8]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	4a16      	ldr	r2, [pc, #88]	@ (800df4c <TIM_Base_SetConfig+0x13c>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d00f      	beq.n	800df18 <TIM_Base_SetConfig+0x108>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4a18      	ldr	r2, [pc, #96]	@ (800df5c <TIM_Base_SetConfig+0x14c>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d00b      	beq.n	800df18 <TIM_Base_SetConfig+0x108>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4a17      	ldr	r2, [pc, #92]	@ (800df60 <TIM_Base_SetConfig+0x150>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d007      	beq.n	800df18 <TIM_Base_SetConfig+0x108>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	4a16      	ldr	r2, [pc, #88]	@ (800df64 <TIM_Base_SetConfig+0x154>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d003      	beq.n	800df18 <TIM_Base_SetConfig+0x108>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4a15      	ldr	r2, [pc, #84]	@ (800df68 <TIM_Base_SetConfig+0x158>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d103      	bne.n	800df20 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	691a      	ldr	r2, [r3, #16]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2201      	movs	r2, #1
 800df24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	691b      	ldr	r3, [r3, #16]
 800df2a:	f003 0301 	and.w	r3, r3, #1
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d105      	bne.n	800df3e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	f023 0201 	bic.w	r2, r3, #1
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	611a      	str	r2, [r3, #16]
  }
}
 800df3e:	bf00      	nop
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	40010000 	.word	0x40010000
 800df50:	40000400 	.word	0x40000400
 800df54:	40000800 	.word	0x40000800
 800df58:	40000c00 	.word	0x40000c00
 800df5c:	40010400 	.word	0x40010400
 800df60:	40014000 	.word	0x40014000
 800df64:	40014400 	.word	0x40014400
 800df68:	40014800 	.word	0x40014800
 800df6c:	4000e000 	.word	0x4000e000
 800df70:	4000e400 	.word	0x4000e400

0800df74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df74:	b480      	push	{r7}
 800df76:	b087      	sub	sp, #28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a1b      	ldr	r3, [r3, #32]
 800df82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6a1b      	ldr	r3, [r3, #32]
 800df88:	f023 0201 	bic.w	r2, r3, #1
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	4b37      	ldr	r3, [pc, #220]	@ (800e07c <TIM_OC1_SetConfig+0x108>)
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f023 0303 	bic.w	r3, r3, #3
 800dfaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	f023 0302 	bic.w	r3, r3, #2
 800dfbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	697a      	ldr	r2, [r7, #20]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a2d      	ldr	r2, [pc, #180]	@ (800e080 <TIM_OC1_SetConfig+0x10c>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d00f      	beq.n	800dff0 <TIM_OC1_SetConfig+0x7c>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a2c      	ldr	r2, [pc, #176]	@ (800e084 <TIM_OC1_SetConfig+0x110>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d00b      	beq.n	800dff0 <TIM_OC1_SetConfig+0x7c>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a2b      	ldr	r2, [pc, #172]	@ (800e088 <TIM_OC1_SetConfig+0x114>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d007      	beq.n	800dff0 <TIM_OC1_SetConfig+0x7c>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a2a      	ldr	r2, [pc, #168]	@ (800e08c <TIM_OC1_SetConfig+0x118>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d003      	beq.n	800dff0 <TIM_OC1_SetConfig+0x7c>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a29      	ldr	r2, [pc, #164]	@ (800e090 <TIM_OC1_SetConfig+0x11c>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d10c      	bne.n	800e00a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f023 0308 	bic.w	r3, r3, #8
 800dff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	697a      	ldr	r2, [r7, #20]
 800dffe:	4313      	orrs	r3, r2
 800e000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	f023 0304 	bic.w	r3, r3, #4
 800e008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a1c      	ldr	r2, [pc, #112]	@ (800e080 <TIM_OC1_SetConfig+0x10c>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d00f      	beq.n	800e032 <TIM_OC1_SetConfig+0xbe>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a1b      	ldr	r2, [pc, #108]	@ (800e084 <TIM_OC1_SetConfig+0x110>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d00b      	beq.n	800e032 <TIM_OC1_SetConfig+0xbe>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a1a      	ldr	r2, [pc, #104]	@ (800e088 <TIM_OC1_SetConfig+0x114>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d007      	beq.n	800e032 <TIM_OC1_SetConfig+0xbe>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a19      	ldr	r2, [pc, #100]	@ (800e08c <TIM_OC1_SetConfig+0x118>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d003      	beq.n	800e032 <TIM_OC1_SetConfig+0xbe>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a18      	ldr	r2, [pc, #96]	@ (800e090 <TIM_OC1_SetConfig+0x11c>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d111      	bne.n	800e056 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	4313      	orrs	r3, r2
 800e04a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	693a      	ldr	r2, [r7, #16]
 800e052:	4313      	orrs	r3, r2
 800e054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	693a      	ldr	r2, [r7, #16]
 800e05a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	621a      	str	r2, [r3, #32]
}
 800e070:	bf00      	nop
 800e072:	371c      	adds	r7, #28
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	fffeff8f 	.word	0xfffeff8f
 800e080:	40010000 	.word	0x40010000
 800e084:	40010400 	.word	0x40010400
 800e088:	40014000 	.word	0x40014000
 800e08c:	40014400 	.word	0x40014400
 800e090:	40014800 	.word	0x40014800

0800e094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e094:	b480      	push	{r7}
 800e096:	b087      	sub	sp, #28
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6a1b      	ldr	r3, [r3, #32]
 800e0a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6a1b      	ldr	r3, [r3, #32]
 800e0a8:	f023 0210 	bic.w	r2, r3, #16
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	699b      	ldr	r3, [r3, #24]
 800e0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	4b34      	ldr	r3, [pc, #208]	@ (800e190 <TIM_OC2_SetConfig+0xfc>)
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e0ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	021b      	lsls	r3, r3, #8
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	f023 0320 	bic.w	r3, r3, #32
 800e0de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	011b      	lsls	r3, r3, #4
 800e0e6:	697a      	ldr	r2, [r7, #20]
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4a29      	ldr	r2, [pc, #164]	@ (800e194 <TIM_OC2_SetConfig+0x100>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d003      	beq.n	800e0fc <TIM_OC2_SetConfig+0x68>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4a28      	ldr	r2, [pc, #160]	@ (800e198 <TIM_OC2_SetConfig+0x104>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d10d      	bne.n	800e118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	011b      	lsls	r3, r3, #4
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	4a1e      	ldr	r2, [pc, #120]	@ (800e194 <TIM_OC2_SetConfig+0x100>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d00f      	beq.n	800e140 <TIM_OC2_SetConfig+0xac>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4a1d      	ldr	r2, [pc, #116]	@ (800e198 <TIM_OC2_SetConfig+0x104>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d00b      	beq.n	800e140 <TIM_OC2_SetConfig+0xac>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4a1c      	ldr	r2, [pc, #112]	@ (800e19c <TIM_OC2_SetConfig+0x108>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d007      	beq.n	800e140 <TIM_OC2_SetConfig+0xac>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4a1b      	ldr	r2, [pc, #108]	@ (800e1a0 <TIM_OC2_SetConfig+0x10c>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d003      	beq.n	800e140 <TIM_OC2_SetConfig+0xac>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4a1a      	ldr	r2, [pc, #104]	@ (800e1a4 <TIM_OC2_SetConfig+0x110>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d113      	bne.n	800e168 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e14e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	4313      	orrs	r3, r2
 800e15a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	693a      	ldr	r2, [r7, #16]
 800e164:	4313      	orrs	r3, r2
 800e166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	621a      	str	r2, [r3, #32]
}
 800e182:	bf00      	nop
 800e184:	371c      	adds	r7, #28
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	feff8fff 	.word	0xfeff8fff
 800e194:	40010000 	.word	0x40010000
 800e198:	40010400 	.word	0x40010400
 800e19c:	40014000 	.word	0x40014000
 800e1a0:	40014400 	.word	0x40014400
 800e1a4:	40014800 	.word	0x40014800

0800e1a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b087      	sub	sp, #28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6a1b      	ldr	r3, [r3, #32]
 800e1b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a1b      	ldr	r3, [r3, #32]
 800e1bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	69db      	ldr	r3, [r3, #28]
 800e1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	4b33      	ldr	r3, [pc, #204]	@ (800e2a0 <TIM_OC3_SetConfig+0xf8>)
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f023 0303 	bic.w	r3, r3, #3
 800e1de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	021b      	lsls	r3, r3, #8
 800e1f8:	697a      	ldr	r2, [r7, #20]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a28      	ldr	r2, [pc, #160]	@ (800e2a4 <TIM_OC3_SetConfig+0xfc>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d003      	beq.n	800e20e <TIM_OC3_SetConfig+0x66>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a27      	ldr	r2, [pc, #156]	@ (800e2a8 <TIM_OC3_SetConfig+0x100>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d10d      	bne.n	800e22a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	021b      	lsls	r3, r3, #8
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	4313      	orrs	r3, r2
 800e220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4a1d      	ldr	r2, [pc, #116]	@ (800e2a4 <TIM_OC3_SetConfig+0xfc>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d00f      	beq.n	800e252 <TIM_OC3_SetConfig+0xaa>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	4a1c      	ldr	r2, [pc, #112]	@ (800e2a8 <TIM_OC3_SetConfig+0x100>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d00b      	beq.n	800e252 <TIM_OC3_SetConfig+0xaa>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4a1b      	ldr	r2, [pc, #108]	@ (800e2ac <TIM_OC3_SetConfig+0x104>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d007      	beq.n	800e252 <TIM_OC3_SetConfig+0xaa>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4a1a      	ldr	r2, [pc, #104]	@ (800e2b0 <TIM_OC3_SetConfig+0x108>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d003      	beq.n	800e252 <TIM_OC3_SetConfig+0xaa>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a19      	ldr	r2, [pc, #100]	@ (800e2b4 <TIM_OC3_SetConfig+0x10c>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d113      	bne.n	800e27a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	695b      	ldr	r3, [r3, #20]
 800e266:	011b      	lsls	r3, r3, #4
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	011b      	lsls	r3, r3, #4
 800e274:	693a      	ldr	r2, [r7, #16]
 800e276:	4313      	orrs	r3, r2
 800e278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	693a      	ldr	r2, [r7, #16]
 800e27e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	685a      	ldr	r2, [r3, #4]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	697a      	ldr	r2, [r7, #20]
 800e292:	621a      	str	r2, [r3, #32]
}
 800e294:	bf00      	nop
 800e296:	371c      	adds	r7, #28
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr
 800e2a0:	fffeff8f 	.word	0xfffeff8f
 800e2a4:	40010000 	.word	0x40010000
 800e2a8:	40010400 	.word	0x40010400
 800e2ac:	40014000 	.word	0x40014000
 800e2b0:	40014400 	.word	0x40014400
 800e2b4:	40014800 	.word	0x40014800

0800e2b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	69db      	ldr	r3, [r3, #28]
 800e2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	4b24      	ldr	r3, [pc, #144]	@ (800e374 <TIM_OC4_SetConfig+0xbc>)
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e2ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	021b      	lsls	r3, r3, #8
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	031b      	lsls	r3, r3, #12
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	4313      	orrs	r3, r2
 800e30e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a19      	ldr	r2, [pc, #100]	@ (800e378 <TIM_OC4_SetConfig+0xc0>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d00f      	beq.n	800e338 <TIM_OC4_SetConfig+0x80>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4a18      	ldr	r2, [pc, #96]	@ (800e37c <TIM_OC4_SetConfig+0xc4>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d00b      	beq.n	800e338 <TIM_OC4_SetConfig+0x80>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a17      	ldr	r2, [pc, #92]	@ (800e380 <TIM_OC4_SetConfig+0xc8>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d007      	beq.n	800e338 <TIM_OC4_SetConfig+0x80>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	4a16      	ldr	r2, [pc, #88]	@ (800e384 <TIM_OC4_SetConfig+0xcc>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d003      	beq.n	800e338 <TIM_OC4_SetConfig+0x80>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4a15      	ldr	r2, [pc, #84]	@ (800e388 <TIM_OC4_SetConfig+0xd0>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d109      	bne.n	800e34c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e33e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	695b      	ldr	r3, [r3, #20]
 800e344:	019b      	lsls	r3, r3, #6
 800e346:	697a      	ldr	r2, [r7, #20]
 800e348:	4313      	orrs	r3, r2
 800e34a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	697a      	ldr	r2, [r7, #20]
 800e350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	685a      	ldr	r2, [r3, #4]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	621a      	str	r2, [r3, #32]
}
 800e366:	bf00      	nop
 800e368:	371c      	adds	r7, #28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	feff8fff 	.word	0xfeff8fff
 800e378:	40010000 	.word	0x40010000
 800e37c:	40010400 	.word	0x40010400
 800e380:	40014000 	.word	0x40014000
 800e384:	40014400 	.word	0x40014400
 800e388:	40014800 	.word	0x40014800

0800e38c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e38c:	b480      	push	{r7}
 800e38e:	b087      	sub	sp, #28
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6a1b      	ldr	r3, [r3, #32]
 800e39a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a1b      	ldr	r3, [r3, #32]
 800e3a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	4b21      	ldr	r3, [pc, #132]	@ (800e43c <TIM_OC5_SetConfig+0xb0>)
 800e3b8:	4013      	ands	r3, r2
 800e3ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e3cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	041b      	lsls	r3, r3, #16
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a18      	ldr	r2, [pc, #96]	@ (800e440 <TIM_OC5_SetConfig+0xb4>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d00f      	beq.n	800e402 <TIM_OC5_SetConfig+0x76>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4a17      	ldr	r2, [pc, #92]	@ (800e444 <TIM_OC5_SetConfig+0xb8>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d00b      	beq.n	800e402 <TIM_OC5_SetConfig+0x76>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	4a16      	ldr	r2, [pc, #88]	@ (800e448 <TIM_OC5_SetConfig+0xbc>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d007      	beq.n	800e402 <TIM_OC5_SetConfig+0x76>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	4a15      	ldr	r2, [pc, #84]	@ (800e44c <TIM_OC5_SetConfig+0xc0>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d003      	beq.n	800e402 <TIM_OC5_SetConfig+0x76>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4a14      	ldr	r2, [pc, #80]	@ (800e450 <TIM_OC5_SetConfig+0xc4>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d109      	bne.n	800e416 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	695b      	ldr	r3, [r3, #20]
 800e40e:	021b      	lsls	r3, r3, #8
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	4313      	orrs	r3, r2
 800e414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	697a      	ldr	r2, [r7, #20]
 800e41a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	68fa      	ldr	r2, [r7, #12]
 800e420:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	685a      	ldr	r2, [r3, #4]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	621a      	str	r2, [r3, #32]
}
 800e430:	bf00      	nop
 800e432:	371c      	adds	r7, #28
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr
 800e43c:	fffeff8f 	.word	0xfffeff8f
 800e440:	40010000 	.word	0x40010000
 800e444:	40010400 	.word	0x40010400
 800e448:	40014000 	.word	0x40014000
 800e44c:	40014400 	.word	0x40014400
 800e450:	40014800 	.word	0x40014800

0800e454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e454:	b480      	push	{r7}
 800e456:	b087      	sub	sp, #28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a1b      	ldr	r3, [r3, #32]
 800e462:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6a1b      	ldr	r3, [r3, #32]
 800e468:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	4b22      	ldr	r3, [pc, #136]	@ (800e508 <TIM_OC6_SetConfig+0xb4>)
 800e480:	4013      	ands	r3, r2
 800e482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	021b      	lsls	r3, r3, #8
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	051b      	lsls	r3, r3, #20
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a19      	ldr	r2, [pc, #100]	@ (800e50c <TIM_OC6_SetConfig+0xb8>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d00f      	beq.n	800e4cc <TIM_OC6_SetConfig+0x78>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a18      	ldr	r2, [pc, #96]	@ (800e510 <TIM_OC6_SetConfig+0xbc>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d00b      	beq.n	800e4cc <TIM_OC6_SetConfig+0x78>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	4a17      	ldr	r2, [pc, #92]	@ (800e514 <TIM_OC6_SetConfig+0xc0>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d007      	beq.n	800e4cc <TIM_OC6_SetConfig+0x78>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a16      	ldr	r2, [pc, #88]	@ (800e518 <TIM_OC6_SetConfig+0xc4>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d003      	beq.n	800e4cc <TIM_OC6_SetConfig+0x78>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4a15      	ldr	r2, [pc, #84]	@ (800e51c <TIM_OC6_SetConfig+0xc8>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d109      	bne.n	800e4e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e4d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	695b      	ldr	r3, [r3, #20]
 800e4d8:	029b      	lsls	r3, r3, #10
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	697a      	ldr	r2, [r7, #20]
 800e4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	685a      	ldr	r2, [r3, #4]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	693a      	ldr	r2, [r7, #16]
 800e4f8:	621a      	str	r2, [r3, #32]
}
 800e4fa:	bf00      	nop
 800e4fc:	371c      	adds	r7, #28
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
 800e506:	bf00      	nop
 800e508:	feff8fff 	.word	0xfeff8fff
 800e50c:	40010000 	.word	0x40010000
 800e510:	40010400 	.word	0x40010400
 800e514:	40014000 	.word	0x40014000
 800e518:	40014400 	.word	0x40014400
 800e51c:	40014800 	.word	0x40014800

0800e520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e520:	b480      	push	{r7}
 800e522:	b087      	sub	sp, #28
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6a1b      	ldr	r3, [r3, #32]
 800e530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6a1b      	ldr	r3, [r3, #32]
 800e536:	f023 0201 	bic.w	r2, r3, #1
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	699b      	ldr	r3, [r3, #24]
 800e542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e54a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	011b      	lsls	r3, r3, #4
 800e550:	693a      	ldr	r2, [r7, #16]
 800e552:	4313      	orrs	r3, r2
 800e554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	f023 030a 	bic.w	r3, r3, #10
 800e55c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	4313      	orrs	r3, r2
 800e564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	693a      	ldr	r2, [r7, #16]
 800e56a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	621a      	str	r2, [r3, #32]
}
 800e572:	bf00      	nop
 800e574:	371c      	adds	r7, #28
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e57e:	b480      	push	{r7}
 800e580:	b087      	sub	sp, #28
 800e582:	af00      	add	r7, sp, #0
 800e584:	60f8      	str	r0, [r7, #12]
 800e586:	60b9      	str	r1, [r7, #8]
 800e588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6a1b      	ldr	r3, [r3, #32]
 800e58e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6a1b      	ldr	r3, [r3, #32]
 800e594:	f023 0210 	bic.w	r2, r3, #16
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	699b      	ldr	r3, [r3, #24]
 800e5a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e5a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	031b      	lsls	r3, r3, #12
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e5ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	011b      	lsls	r3, r3, #4
 800e5c0:	697a      	ldr	r2, [r7, #20]
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	697a      	ldr	r2, [r7, #20]
 800e5d0:	621a      	str	r2, [r3, #32]
}
 800e5d2:	bf00      	nop
 800e5d4:	371c      	adds	r7, #28
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
	...

0800e5e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	4b09      	ldr	r3, [pc, #36]	@ (800e618 <TIM_ITRx_SetConfig+0x38>)
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	f043 0307 	orr.w	r3, r3, #7
 800e602:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	609a      	str	r2, [r3, #8]
}
 800e60a:	bf00      	nop
 800e60c:	3714      	adds	r7, #20
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	ffcfff8f 	.word	0xffcfff8f

0800e61c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b087      	sub	sp, #28
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	021a      	lsls	r2, r3, #8
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	431a      	orrs	r2, r3
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	4313      	orrs	r3, r2
 800e644:	697a      	ldr	r2, [r7, #20]
 800e646:	4313      	orrs	r3, r2
 800e648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	697a      	ldr	r2, [r7, #20]
 800e64e:	609a      	str	r2, [r3, #8]
}
 800e650:	bf00      	nop
 800e652:	371c      	adds	r7, #28
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d101      	bne.n	800e674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e670:	2302      	movs	r3, #2
 800e672:	e077      	b.n	800e764 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2202      	movs	r2, #2
 800e680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a35      	ldr	r2, [pc, #212]	@ (800e770 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d004      	beq.n	800e6a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4a34      	ldr	r2, [pc, #208]	@ (800e774 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d108      	bne.n	800e6ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e6ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	68fa      	ldr	r2, [r7, #12]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68fa      	ldr	r2, [r7, #12]
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a25      	ldr	r2, [pc, #148]	@ (800e770 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d02c      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6e6:	d027      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a22      	ldr	r2, [pc, #136]	@ (800e778 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d022      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4a21      	ldr	r2, [pc, #132]	@ (800e77c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d01d      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a1f      	ldr	r2, [pc, #124]	@ (800e780 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d018      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a1a      	ldr	r2, [pc, #104]	@ (800e774 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d013      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a1b      	ldr	r2, [pc, #108]	@ (800e784 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d00e      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a1a      	ldr	r2, [pc, #104]	@ (800e788 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d009      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a18      	ldr	r2, [pc, #96]	@ (800e78c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d004      	beq.n	800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4a17      	ldr	r2, [pc, #92]	@ (800e790 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d10c      	bne.n	800e752 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e73e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	4313      	orrs	r3, r2
 800e748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2201      	movs	r2, #1
 800e756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2200      	movs	r2, #0
 800e75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr
 800e770:	40010000 	.word	0x40010000
 800e774:	40010400 	.word	0x40010400
 800e778:	40000400 	.word	0x40000400
 800e77c:	40000800 	.word	0x40000800
 800e780:	40000c00 	.word	0x40000c00
 800e784:	40001800 	.word	0x40001800
 800e788:	40014000 	.word	0x40014000
 800e78c:	4000e000 	.word	0x4000e000
 800e790:	4000e400 	.word	0x4000e400

0800e794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d101      	bne.n	800e7b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	e073      	b.n	800e898 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	4313      	orrs	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e816:	4313      	orrs	r3, r2
 800e818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	699b      	ldr	r3, [r3, #24]
 800e824:	041b      	lsls	r3, r3, #16
 800e826:	4313      	orrs	r3, r2
 800e828:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	4313      	orrs	r3, r2
 800e836:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a19      	ldr	r2, [pc, #100]	@ (800e8a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d004      	beq.n	800e84c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a18      	ldr	r2, [pc, #96]	@ (800e8a8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d11c      	bne.n	800e886 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e856:	051b      	lsls	r3, r3, #20
 800e858:	4313      	orrs	r3, r2
 800e85a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	4313      	orrs	r3, r2
 800e868:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e874:	4313      	orrs	r3, r2
 800e876:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e882:	4313      	orrs	r3, r2
 800e884:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	40010000 	.word	0x40010000
 800e8a8:	40010400 	.word	0x40010400

0800e8ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e8b4:	bf00      	nop
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d101      	bne.n	800e8fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e042      	b.n	800e980 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e900:	2b00      	cmp	r3, #0
 800e902:	d106      	bne.n	800e912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f7f3 fd4d 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2224      	movs	r2, #36	@ 0x24
 800e916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f022 0201 	bic.w	r2, r2, #1
 800e928:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d002      	beq.n	800e938 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 ff22 	bl	800f77c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f8b3 	bl	800eaa4 <UART_SetConfig>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b01      	cmp	r3, #1
 800e942:	d101      	bne.n	800e948 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e944:	2301      	movs	r3, #1
 800e946:	e01b      	b.n	800e980 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	685a      	ldr	r2, [r3, #4]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	689a      	ldr	r2, [r3, #8]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f042 0201 	orr.w	r2, r2, #1
 800e976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 ffa1 	bl	800f8c0 <UART_CheckIdleState>
 800e97e:	4603      	mov	r3, r0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b08a      	sub	sp, #40	@ 0x28
 800e98c:	af02      	add	r7, sp, #8
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	603b      	str	r3, [r7, #0]
 800e994:	4613      	mov	r3, r2
 800e996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e99e:	2b20      	cmp	r3, #32
 800e9a0:	d17b      	bne.n	800ea9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d002      	beq.n	800e9ae <HAL_UART_Transmit+0x26>
 800e9a8:	88fb      	ldrh	r3, [r7, #6]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d101      	bne.n	800e9b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e074      	b.n	800ea9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2221      	movs	r2, #33	@ 0x21
 800e9be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e9c2:	f7f3 ff79 	bl	80028b8 <HAL_GetTick>
 800e9c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	88fa      	ldrh	r2, [r7, #6]
 800e9cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	88fa      	ldrh	r2, [r7, #6]
 800e9d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9e0:	d108      	bne.n	800e9f4 <HAL_UART_Transmit+0x6c>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d104      	bne.n	800e9f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	61bb      	str	r3, [r7, #24]
 800e9f2:	e003      	b.n	800e9fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e9fc:	e030      	b.n	800ea60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2200      	movs	r2, #0
 800ea06:	2180      	movs	r1, #128	@ 0x80
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f001 f803 	bl	800fa14 <UART_WaitOnFlagUntilTimeout>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d005      	beq.n	800ea20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2220      	movs	r2, #32
 800ea18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ea1c:	2303      	movs	r3, #3
 800ea1e:	e03d      	b.n	800ea9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d10b      	bne.n	800ea3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	881b      	ldrh	r3, [r3, #0]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	3302      	adds	r3, #2
 800ea3a:	61bb      	str	r3, [r7, #24]
 800ea3c:	e007      	b.n	800ea4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	781a      	ldrb	r2, [r3, #0]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	3b01      	subs	r3, #1
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1c8      	bne.n	800e9fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	2200      	movs	r2, #0
 800ea74:	2140      	movs	r1, #64	@ 0x40
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f000 ffcc 	bl	800fa14 <UART_WaitOnFlagUntilTimeout>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d005      	beq.n	800ea8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2220      	movs	r2, #32
 800ea86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ea8a:	2303      	movs	r3, #3
 800ea8c:	e006      	b.n	800ea9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2220      	movs	r2, #32
 800ea92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ea96:	2300      	movs	r3, #0
 800ea98:	e000      	b.n	800ea9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ea9a:	2302      	movs	r3, #2
  }
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3720      	adds	r7, #32
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eaa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eaa8:	b092      	sub	sp, #72	@ 0x48
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	689a      	ldr	r2, [r3, #8]
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	691b      	ldr	r3, [r3, #16]
 800eabc:	431a      	orrs	r2, r3
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	695b      	ldr	r3, [r3, #20]
 800eac2:	431a      	orrs	r2, r3
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	69db      	ldr	r3, [r3, #28]
 800eac8:	4313      	orrs	r3, r2
 800eaca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	4bbe      	ldr	r3, [pc, #760]	@ (800edcc <UART_SetConfig+0x328>)
 800ead4:	4013      	ands	r3, r2
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	6812      	ldr	r2, [r2, #0]
 800eada:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eadc:	430b      	orrs	r3, r1
 800eade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	68da      	ldr	r2, [r3, #12]
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	430a      	orrs	r2, r1
 800eaf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4ab3      	ldr	r2, [pc, #716]	@ (800edd0 <UART_SetConfig+0x32c>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d004      	beq.n	800eb10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	6a1b      	ldr	r3, [r3, #32]
 800eb0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	689a      	ldr	r2, [r3, #8]
 800eb16:	4baf      	ldr	r3, [pc, #700]	@ (800edd4 <UART_SetConfig+0x330>)
 800eb18:	4013      	ands	r3, r2
 800eb1a:	697a      	ldr	r2, [r7, #20]
 800eb1c:	6812      	ldr	r2, [r2, #0]
 800eb1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eb20:	430b      	orrs	r3, r1
 800eb22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb2a:	f023 010f 	bic.w	r1, r3, #15
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	430a      	orrs	r2, r1
 800eb38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4aa6      	ldr	r2, [pc, #664]	@ (800edd8 <UART_SetConfig+0x334>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d177      	bne.n	800ec34 <UART_SetConfig+0x190>
 800eb44:	4ba5      	ldr	r3, [pc, #660]	@ (800eddc <UART_SetConfig+0x338>)
 800eb46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eb4c:	2b28      	cmp	r3, #40	@ 0x28
 800eb4e:	d86d      	bhi.n	800ec2c <UART_SetConfig+0x188>
 800eb50:	a201      	add	r2, pc, #4	@ (adr r2, 800eb58 <UART_SetConfig+0xb4>)
 800eb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb56:	bf00      	nop
 800eb58:	0800ebfd 	.word	0x0800ebfd
 800eb5c:	0800ec2d 	.word	0x0800ec2d
 800eb60:	0800ec2d 	.word	0x0800ec2d
 800eb64:	0800ec2d 	.word	0x0800ec2d
 800eb68:	0800ec2d 	.word	0x0800ec2d
 800eb6c:	0800ec2d 	.word	0x0800ec2d
 800eb70:	0800ec2d 	.word	0x0800ec2d
 800eb74:	0800ec2d 	.word	0x0800ec2d
 800eb78:	0800ec05 	.word	0x0800ec05
 800eb7c:	0800ec2d 	.word	0x0800ec2d
 800eb80:	0800ec2d 	.word	0x0800ec2d
 800eb84:	0800ec2d 	.word	0x0800ec2d
 800eb88:	0800ec2d 	.word	0x0800ec2d
 800eb8c:	0800ec2d 	.word	0x0800ec2d
 800eb90:	0800ec2d 	.word	0x0800ec2d
 800eb94:	0800ec2d 	.word	0x0800ec2d
 800eb98:	0800ec0d 	.word	0x0800ec0d
 800eb9c:	0800ec2d 	.word	0x0800ec2d
 800eba0:	0800ec2d 	.word	0x0800ec2d
 800eba4:	0800ec2d 	.word	0x0800ec2d
 800eba8:	0800ec2d 	.word	0x0800ec2d
 800ebac:	0800ec2d 	.word	0x0800ec2d
 800ebb0:	0800ec2d 	.word	0x0800ec2d
 800ebb4:	0800ec2d 	.word	0x0800ec2d
 800ebb8:	0800ec15 	.word	0x0800ec15
 800ebbc:	0800ec2d 	.word	0x0800ec2d
 800ebc0:	0800ec2d 	.word	0x0800ec2d
 800ebc4:	0800ec2d 	.word	0x0800ec2d
 800ebc8:	0800ec2d 	.word	0x0800ec2d
 800ebcc:	0800ec2d 	.word	0x0800ec2d
 800ebd0:	0800ec2d 	.word	0x0800ec2d
 800ebd4:	0800ec2d 	.word	0x0800ec2d
 800ebd8:	0800ec1d 	.word	0x0800ec1d
 800ebdc:	0800ec2d 	.word	0x0800ec2d
 800ebe0:	0800ec2d 	.word	0x0800ec2d
 800ebe4:	0800ec2d 	.word	0x0800ec2d
 800ebe8:	0800ec2d 	.word	0x0800ec2d
 800ebec:	0800ec2d 	.word	0x0800ec2d
 800ebf0:	0800ec2d 	.word	0x0800ec2d
 800ebf4:	0800ec2d 	.word	0x0800ec2d
 800ebf8:	0800ec25 	.word	0x0800ec25
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec02:	e326      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec04:	2304      	movs	r3, #4
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec0a:	e322      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec0c:	2308      	movs	r3, #8
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec12:	e31e      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec14:	2310      	movs	r3, #16
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec1a:	e31a      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec1c:	2320      	movs	r3, #32
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec22:	e316      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec24:	2340      	movs	r3, #64	@ 0x40
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec2a:	e312      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec2c:	2380      	movs	r3, #128	@ 0x80
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec32:	e30e      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a69      	ldr	r2, [pc, #420]	@ (800ede0 <UART_SetConfig+0x33c>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d130      	bne.n	800eca0 <UART_SetConfig+0x1fc>
 800ec3e:	4b67      	ldr	r3, [pc, #412]	@ (800eddc <UART_SetConfig+0x338>)
 800ec40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec42:	f003 0307 	and.w	r3, r3, #7
 800ec46:	2b05      	cmp	r3, #5
 800ec48:	d826      	bhi.n	800ec98 <UART_SetConfig+0x1f4>
 800ec4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec50 <UART_SetConfig+0x1ac>)
 800ec4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec50:	0800ec69 	.word	0x0800ec69
 800ec54:	0800ec71 	.word	0x0800ec71
 800ec58:	0800ec79 	.word	0x0800ec79
 800ec5c:	0800ec81 	.word	0x0800ec81
 800ec60:	0800ec89 	.word	0x0800ec89
 800ec64:	0800ec91 	.word	0x0800ec91
 800ec68:	2300      	movs	r3, #0
 800ec6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6e:	e2f0      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec70:	2304      	movs	r3, #4
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec76:	e2ec      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec78:	2308      	movs	r3, #8
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7e:	e2e8      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec80:	2310      	movs	r3, #16
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec86:	e2e4      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec88:	2320      	movs	r3, #32
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec8e:	e2e0      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec90:	2340      	movs	r3, #64	@ 0x40
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec96:	e2dc      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ec98:	2380      	movs	r3, #128	@ 0x80
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec9e:	e2d8      	b.n	800f252 <UART_SetConfig+0x7ae>
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a4f      	ldr	r2, [pc, #316]	@ (800ede4 <UART_SetConfig+0x340>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d130      	bne.n	800ed0c <UART_SetConfig+0x268>
 800ecaa:	4b4c      	ldr	r3, [pc, #304]	@ (800eddc <UART_SetConfig+0x338>)
 800ecac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecae:	f003 0307 	and.w	r3, r3, #7
 800ecb2:	2b05      	cmp	r3, #5
 800ecb4:	d826      	bhi.n	800ed04 <UART_SetConfig+0x260>
 800ecb6:	a201      	add	r2, pc, #4	@ (adr r2, 800ecbc <UART_SetConfig+0x218>)
 800ecb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecbc:	0800ecd5 	.word	0x0800ecd5
 800ecc0:	0800ecdd 	.word	0x0800ecdd
 800ecc4:	0800ece5 	.word	0x0800ece5
 800ecc8:	0800eced 	.word	0x0800eced
 800eccc:	0800ecf5 	.word	0x0800ecf5
 800ecd0:	0800ecfd 	.word	0x0800ecfd
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecda:	e2ba      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ecdc:	2304      	movs	r3, #4
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ece2:	e2b6      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ece4:	2308      	movs	r3, #8
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecea:	e2b2      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ecec:	2310      	movs	r3, #16
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecf2:	e2ae      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ecf4:	2320      	movs	r3, #32
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecfa:	e2aa      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ecfc:	2340      	movs	r3, #64	@ 0x40
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed02:	e2a6      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed04:	2380      	movs	r3, #128	@ 0x80
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed0a:	e2a2      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a35      	ldr	r2, [pc, #212]	@ (800ede8 <UART_SetConfig+0x344>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d130      	bne.n	800ed78 <UART_SetConfig+0x2d4>
 800ed16:	4b31      	ldr	r3, [pc, #196]	@ (800eddc <UART_SetConfig+0x338>)
 800ed18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed1a:	f003 0307 	and.w	r3, r3, #7
 800ed1e:	2b05      	cmp	r3, #5
 800ed20:	d826      	bhi.n	800ed70 <UART_SetConfig+0x2cc>
 800ed22:	a201      	add	r2, pc, #4	@ (adr r2, 800ed28 <UART_SetConfig+0x284>)
 800ed24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed28:	0800ed41 	.word	0x0800ed41
 800ed2c:	0800ed49 	.word	0x0800ed49
 800ed30:	0800ed51 	.word	0x0800ed51
 800ed34:	0800ed59 	.word	0x0800ed59
 800ed38:	0800ed61 	.word	0x0800ed61
 800ed3c:	0800ed69 	.word	0x0800ed69
 800ed40:	2300      	movs	r3, #0
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed46:	e284      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed48:	2304      	movs	r3, #4
 800ed4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4e:	e280      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed50:	2308      	movs	r3, #8
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed56:	e27c      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed58:	2310      	movs	r3, #16
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5e:	e278      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed60:	2320      	movs	r3, #32
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed66:	e274      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed68:	2340      	movs	r3, #64	@ 0x40
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed6e:	e270      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed70:	2380      	movs	r3, #128	@ 0x80
 800ed72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed76:	e26c      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a1b      	ldr	r2, [pc, #108]	@ (800edec <UART_SetConfig+0x348>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d142      	bne.n	800ee08 <UART_SetConfig+0x364>
 800ed82:	4b16      	ldr	r3, [pc, #88]	@ (800eddc <UART_SetConfig+0x338>)
 800ed84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed86:	f003 0307 	and.w	r3, r3, #7
 800ed8a:	2b05      	cmp	r3, #5
 800ed8c:	d838      	bhi.n	800ee00 <UART_SetConfig+0x35c>
 800ed8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed94 <UART_SetConfig+0x2f0>)
 800ed90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed94:	0800edad 	.word	0x0800edad
 800ed98:	0800edb5 	.word	0x0800edb5
 800ed9c:	0800edbd 	.word	0x0800edbd
 800eda0:	0800edc5 	.word	0x0800edc5
 800eda4:	0800edf1 	.word	0x0800edf1
 800eda8:	0800edf9 	.word	0x0800edf9
 800edac:	2300      	movs	r3, #0
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb2:	e24e      	b.n	800f252 <UART_SetConfig+0x7ae>
 800edb4:	2304      	movs	r3, #4
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edba:	e24a      	b.n	800f252 <UART_SetConfig+0x7ae>
 800edbc:	2308      	movs	r3, #8
 800edbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edc2:	e246      	b.n	800f252 <UART_SetConfig+0x7ae>
 800edc4:	2310      	movs	r3, #16
 800edc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edca:	e242      	b.n	800f252 <UART_SetConfig+0x7ae>
 800edcc:	cfff69f3 	.word	0xcfff69f3
 800edd0:	58000c00 	.word	0x58000c00
 800edd4:	11fff4ff 	.word	0x11fff4ff
 800edd8:	40011000 	.word	0x40011000
 800eddc:	58024400 	.word	0x58024400
 800ede0:	40004400 	.word	0x40004400
 800ede4:	40004800 	.word	0x40004800
 800ede8:	40004c00 	.word	0x40004c00
 800edec:	40005000 	.word	0x40005000
 800edf0:	2320      	movs	r3, #32
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edf6:	e22c      	b.n	800f252 <UART_SetConfig+0x7ae>
 800edf8:	2340      	movs	r3, #64	@ 0x40
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfe:	e228      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ee00:	2380      	movs	r3, #128	@ 0x80
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee06:	e224      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4ab1      	ldr	r2, [pc, #708]	@ (800f0d4 <UART_SetConfig+0x630>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d176      	bne.n	800ef00 <UART_SetConfig+0x45c>
 800ee12:	4bb1      	ldr	r3, [pc, #708]	@ (800f0d8 <UART_SetConfig+0x634>)
 800ee14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee1a:	2b28      	cmp	r3, #40	@ 0x28
 800ee1c:	d86c      	bhi.n	800eef8 <UART_SetConfig+0x454>
 800ee1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee24 <UART_SetConfig+0x380>)
 800ee20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee24:	0800eec9 	.word	0x0800eec9
 800ee28:	0800eef9 	.word	0x0800eef9
 800ee2c:	0800eef9 	.word	0x0800eef9
 800ee30:	0800eef9 	.word	0x0800eef9
 800ee34:	0800eef9 	.word	0x0800eef9
 800ee38:	0800eef9 	.word	0x0800eef9
 800ee3c:	0800eef9 	.word	0x0800eef9
 800ee40:	0800eef9 	.word	0x0800eef9
 800ee44:	0800eed1 	.word	0x0800eed1
 800ee48:	0800eef9 	.word	0x0800eef9
 800ee4c:	0800eef9 	.word	0x0800eef9
 800ee50:	0800eef9 	.word	0x0800eef9
 800ee54:	0800eef9 	.word	0x0800eef9
 800ee58:	0800eef9 	.word	0x0800eef9
 800ee5c:	0800eef9 	.word	0x0800eef9
 800ee60:	0800eef9 	.word	0x0800eef9
 800ee64:	0800eed9 	.word	0x0800eed9
 800ee68:	0800eef9 	.word	0x0800eef9
 800ee6c:	0800eef9 	.word	0x0800eef9
 800ee70:	0800eef9 	.word	0x0800eef9
 800ee74:	0800eef9 	.word	0x0800eef9
 800ee78:	0800eef9 	.word	0x0800eef9
 800ee7c:	0800eef9 	.word	0x0800eef9
 800ee80:	0800eef9 	.word	0x0800eef9
 800ee84:	0800eee1 	.word	0x0800eee1
 800ee88:	0800eef9 	.word	0x0800eef9
 800ee8c:	0800eef9 	.word	0x0800eef9
 800ee90:	0800eef9 	.word	0x0800eef9
 800ee94:	0800eef9 	.word	0x0800eef9
 800ee98:	0800eef9 	.word	0x0800eef9
 800ee9c:	0800eef9 	.word	0x0800eef9
 800eea0:	0800eef9 	.word	0x0800eef9
 800eea4:	0800eee9 	.word	0x0800eee9
 800eea8:	0800eef9 	.word	0x0800eef9
 800eeac:	0800eef9 	.word	0x0800eef9
 800eeb0:	0800eef9 	.word	0x0800eef9
 800eeb4:	0800eef9 	.word	0x0800eef9
 800eeb8:	0800eef9 	.word	0x0800eef9
 800eebc:	0800eef9 	.word	0x0800eef9
 800eec0:	0800eef9 	.word	0x0800eef9
 800eec4:	0800eef1 	.word	0x0800eef1
 800eec8:	2301      	movs	r3, #1
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eece:	e1c0      	b.n	800f252 <UART_SetConfig+0x7ae>
 800eed0:	2304      	movs	r3, #4
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed6:	e1bc      	b.n	800f252 <UART_SetConfig+0x7ae>
 800eed8:	2308      	movs	r3, #8
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eede:	e1b8      	b.n	800f252 <UART_SetConfig+0x7ae>
 800eee0:	2310      	movs	r3, #16
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eee6:	e1b4      	b.n	800f252 <UART_SetConfig+0x7ae>
 800eee8:	2320      	movs	r3, #32
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeee:	e1b0      	b.n	800f252 <UART_SetConfig+0x7ae>
 800eef0:	2340      	movs	r3, #64	@ 0x40
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eef6:	e1ac      	b.n	800f252 <UART_SetConfig+0x7ae>
 800eef8:	2380      	movs	r3, #128	@ 0x80
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefe:	e1a8      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a75      	ldr	r2, [pc, #468]	@ (800f0dc <UART_SetConfig+0x638>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d130      	bne.n	800ef6c <UART_SetConfig+0x4c8>
 800ef0a:	4b73      	ldr	r3, [pc, #460]	@ (800f0d8 <UART_SetConfig+0x634>)
 800ef0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef0e:	f003 0307 	and.w	r3, r3, #7
 800ef12:	2b05      	cmp	r3, #5
 800ef14:	d826      	bhi.n	800ef64 <UART_SetConfig+0x4c0>
 800ef16:	a201      	add	r2, pc, #4	@ (adr r2, 800ef1c <UART_SetConfig+0x478>)
 800ef18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1c:	0800ef35 	.word	0x0800ef35
 800ef20:	0800ef3d 	.word	0x0800ef3d
 800ef24:	0800ef45 	.word	0x0800ef45
 800ef28:	0800ef4d 	.word	0x0800ef4d
 800ef2c:	0800ef55 	.word	0x0800ef55
 800ef30:	0800ef5d 	.word	0x0800ef5d
 800ef34:	2300      	movs	r3, #0
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3a:	e18a      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ef3c:	2304      	movs	r3, #4
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef42:	e186      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ef44:	2308      	movs	r3, #8
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4a:	e182      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ef4c:	2310      	movs	r3, #16
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef52:	e17e      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ef54:	2320      	movs	r3, #32
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5a:	e17a      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ef5c:	2340      	movs	r3, #64	@ 0x40
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef62:	e176      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ef64:	2380      	movs	r3, #128	@ 0x80
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6a:	e172      	b.n	800f252 <UART_SetConfig+0x7ae>
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a5b      	ldr	r2, [pc, #364]	@ (800f0e0 <UART_SetConfig+0x63c>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d130      	bne.n	800efd8 <UART_SetConfig+0x534>
 800ef76:	4b58      	ldr	r3, [pc, #352]	@ (800f0d8 <UART_SetConfig+0x634>)
 800ef78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef7a:	f003 0307 	and.w	r3, r3, #7
 800ef7e:	2b05      	cmp	r3, #5
 800ef80:	d826      	bhi.n	800efd0 <UART_SetConfig+0x52c>
 800ef82:	a201      	add	r2, pc, #4	@ (adr r2, 800ef88 <UART_SetConfig+0x4e4>)
 800ef84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef88:	0800efa1 	.word	0x0800efa1
 800ef8c:	0800efa9 	.word	0x0800efa9
 800ef90:	0800efb1 	.word	0x0800efb1
 800ef94:	0800efb9 	.word	0x0800efb9
 800ef98:	0800efc1 	.word	0x0800efc1
 800ef9c:	0800efc9 	.word	0x0800efc9
 800efa0:	2300      	movs	r3, #0
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa6:	e154      	b.n	800f252 <UART_SetConfig+0x7ae>
 800efa8:	2304      	movs	r3, #4
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efae:	e150      	b.n	800f252 <UART_SetConfig+0x7ae>
 800efb0:	2308      	movs	r3, #8
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb6:	e14c      	b.n	800f252 <UART_SetConfig+0x7ae>
 800efb8:	2310      	movs	r3, #16
 800efba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efbe:	e148      	b.n	800f252 <UART_SetConfig+0x7ae>
 800efc0:	2320      	movs	r3, #32
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc6:	e144      	b.n	800f252 <UART_SetConfig+0x7ae>
 800efc8:	2340      	movs	r3, #64	@ 0x40
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efce:	e140      	b.n	800f252 <UART_SetConfig+0x7ae>
 800efd0:	2380      	movs	r3, #128	@ 0x80
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd6:	e13c      	b.n	800f252 <UART_SetConfig+0x7ae>
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a41      	ldr	r2, [pc, #260]	@ (800f0e4 <UART_SetConfig+0x640>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	f040 8082 	bne.w	800f0e8 <UART_SetConfig+0x644>
 800efe4:	4b3c      	ldr	r3, [pc, #240]	@ (800f0d8 <UART_SetConfig+0x634>)
 800efe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800efec:	2b28      	cmp	r3, #40	@ 0x28
 800efee:	d86d      	bhi.n	800f0cc <UART_SetConfig+0x628>
 800eff0:	a201      	add	r2, pc, #4	@ (adr r2, 800eff8 <UART_SetConfig+0x554>)
 800eff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff6:	bf00      	nop
 800eff8:	0800f09d 	.word	0x0800f09d
 800effc:	0800f0cd 	.word	0x0800f0cd
 800f000:	0800f0cd 	.word	0x0800f0cd
 800f004:	0800f0cd 	.word	0x0800f0cd
 800f008:	0800f0cd 	.word	0x0800f0cd
 800f00c:	0800f0cd 	.word	0x0800f0cd
 800f010:	0800f0cd 	.word	0x0800f0cd
 800f014:	0800f0cd 	.word	0x0800f0cd
 800f018:	0800f0a5 	.word	0x0800f0a5
 800f01c:	0800f0cd 	.word	0x0800f0cd
 800f020:	0800f0cd 	.word	0x0800f0cd
 800f024:	0800f0cd 	.word	0x0800f0cd
 800f028:	0800f0cd 	.word	0x0800f0cd
 800f02c:	0800f0cd 	.word	0x0800f0cd
 800f030:	0800f0cd 	.word	0x0800f0cd
 800f034:	0800f0cd 	.word	0x0800f0cd
 800f038:	0800f0ad 	.word	0x0800f0ad
 800f03c:	0800f0cd 	.word	0x0800f0cd
 800f040:	0800f0cd 	.word	0x0800f0cd
 800f044:	0800f0cd 	.word	0x0800f0cd
 800f048:	0800f0cd 	.word	0x0800f0cd
 800f04c:	0800f0cd 	.word	0x0800f0cd
 800f050:	0800f0cd 	.word	0x0800f0cd
 800f054:	0800f0cd 	.word	0x0800f0cd
 800f058:	0800f0b5 	.word	0x0800f0b5
 800f05c:	0800f0cd 	.word	0x0800f0cd
 800f060:	0800f0cd 	.word	0x0800f0cd
 800f064:	0800f0cd 	.word	0x0800f0cd
 800f068:	0800f0cd 	.word	0x0800f0cd
 800f06c:	0800f0cd 	.word	0x0800f0cd
 800f070:	0800f0cd 	.word	0x0800f0cd
 800f074:	0800f0cd 	.word	0x0800f0cd
 800f078:	0800f0bd 	.word	0x0800f0bd
 800f07c:	0800f0cd 	.word	0x0800f0cd
 800f080:	0800f0cd 	.word	0x0800f0cd
 800f084:	0800f0cd 	.word	0x0800f0cd
 800f088:	0800f0cd 	.word	0x0800f0cd
 800f08c:	0800f0cd 	.word	0x0800f0cd
 800f090:	0800f0cd 	.word	0x0800f0cd
 800f094:	0800f0cd 	.word	0x0800f0cd
 800f098:	0800f0c5 	.word	0x0800f0c5
 800f09c:	2301      	movs	r3, #1
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0a2:	e0d6      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f0a4:	2304      	movs	r3, #4
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0aa:	e0d2      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f0ac:	2308      	movs	r3, #8
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0b2:	e0ce      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f0b4:	2310      	movs	r3, #16
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ba:	e0ca      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f0bc:	2320      	movs	r3, #32
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0c2:	e0c6      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f0c4:	2340      	movs	r3, #64	@ 0x40
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ca:	e0c2      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f0cc:	2380      	movs	r3, #128	@ 0x80
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0d2:	e0be      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f0d4:	40011400 	.word	0x40011400
 800f0d8:	58024400 	.word	0x58024400
 800f0dc:	40007800 	.word	0x40007800
 800f0e0:	40007c00 	.word	0x40007c00
 800f0e4:	40011800 	.word	0x40011800
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4aad      	ldr	r2, [pc, #692]	@ (800f3a4 <UART_SetConfig+0x900>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d176      	bne.n	800f1e0 <UART_SetConfig+0x73c>
 800f0f2:	4bad      	ldr	r3, [pc, #692]	@ (800f3a8 <UART_SetConfig+0x904>)
 800f0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f0fa:	2b28      	cmp	r3, #40	@ 0x28
 800f0fc:	d86c      	bhi.n	800f1d8 <UART_SetConfig+0x734>
 800f0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f104 <UART_SetConfig+0x660>)
 800f100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f104:	0800f1a9 	.word	0x0800f1a9
 800f108:	0800f1d9 	.word	0x0800f1d9
 800f10c:	0800f1d9 	.word	0x0800f1d9
 800f110:	0800f1d9 	.word	0x0800f1d9
 800f114:	0800f1d9 	.word	0x0800f1d9
 800f118:	0800f1d9 	.word	0x0800f1d9
 800f11c:	0800f1d9 	.word	0x0800f1d9
 800f120:	0800f1d9 	.word	0x0800f1d9
 800f124:	0800f1b1 	.word	0x0800f1b1
 800f128:	0800f1d9 	.word	0x0800f1d9
 800f12c:	0800f1d9 	.word	0x0800f1d9
 800f130:	0800f1d9 	.word	0x0800f1d9
 800f134:	0800f1d9 	.word	0x0800f1d9
 800f138:	0800f1d9 	.word	0x0800f1d9
 800f13c:	0800f1d9 	.word	0x0800f1d9
 800f140:	0800f1d9 	.word	0x0800f1d9
 800f144:	0800f1b9 	.word	0x0800f1b9
 800f148:	0800f1d9 	.word	0x0800f1d9
 800f14c:	0800f1d9 	.word	0x0800f1d9
 800f150:	0800f1d9 	.word	0x0800f1d9
 800f154:	0800f1d9 	.word	0x0800f1d9
 800f158:	0800f1d9 	.word	0x0800f1d9
 800f15c:	0800f1d9 	.word	0x0800f1d9
 800f160:	0800f1d9 	.word	0x0800f1d9
 800f164:	0800f1c1 	.word	0x0800f1c1
 800f168:	0800f1d9 	.word	0x0800f1d9
 800f16c:	0800f1d9 	.word	0x0800f1d9
 800f170:	0800f1d9 	.word	0x0800f1d9
 800f174:	0800f1d9 	.word	0x0800f1d9
 800f178:	0800f1d9 	.word	0x0800f1d9
 800f17c:	0800f1d9 	.word	0x0800f1d9
 800f180:	0800f1d9 	.word	0x0800f1d9
 800f184:	0800f1c9 	.word	0x0800f1c9
 800f188:	0800f1d9 	.word	0x0800f1d9
 800f18c:	0800f1d9 	.word	0x0800f1d9
 800f190:	0800f1d9 	.word	0x0800f1d9
 800f194:	0800f1d9 	.word	0x0800f1d9
 800f198:	0800f1d9 	.word	0x0800f1d9
 800f19c:	0800f1d9 	.word	0x0800f1d9
 800f1a0:	0800f1d9 	.word	0x0800f1d9
 800f1a4:	0800f1d1 	.word	0x0800f1d1
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ae:	e050      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f1b0:	2304      	movs	r3, #4
 800f1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1b6:	e04c      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f1b8:	2308      	movs	r3, #8
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1be:	e048      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f1c0:	2310      	movs	r3, #16
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1c6:	e044      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f1c8:	2320      	movs	r3, #32
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ce:	e040      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f1d0:	2340      	movs	r3, #64	@ 0x40
 800f1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1d6:	e03c      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f1d8:	2380      	movs	r3, #128	@ 0x80
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1de:	e038      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4a71      	ldr	r2, [pc, #452]	@ (800f3ac <UART_SetConfig+0x908>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d130      	bne.n	800f24c <UART_SetConfig+0x7a8>
 800f1ea:	4b6f      	ldr	r3, [pc, #444]	@ (800f3a8 <UART_SetConfig+0x904>)
 800f1ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1ee:	f003 0307 	and.w	r3, r3, #7
 800f1f2:	2b05      	cmp	r3, #5
 800f1f4:	d826      	bhi.n	800f244 <UART_SetConfig+0x7a0>
 800f1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f1fc <UART_SetConfig+0x758>)
 800f1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1fc:	0800f215 	.word	0x0800f215
 800f200:	0800f21d 	.word	0x0800f21d
 800f204:	0800f225 	.word	0x0800f225
 800f208:	0800f22d 	.word	0x0800f22d
 800f20c:	0800f235 	.word	0x0800f235
 800f210:	0800f23d 	.word	0x0800f23d
 800f214:	2302      	movs	r3, #2
 800f216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f21a:	e01a      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f21c:	2304      	movs	r3, #4
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f222:	e016      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f224:	2308      	movs	r3, #8
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22a:	e012      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f22c:	2310      	movs	r3, #16
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f232:	e00e      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f234:	2320      	movs	r3, #32
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f23a:	e00a      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f23c:	2340      	movs	r3, #64	@ 0x40
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f242:	e006      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f244:	2380      	movs	r3, #128	@ 0x80
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24a:	e002      	b.n	800f252 <UART_SetConfig+0x7ae>
 800f24c:	2380      	movs	r3, #128	@ 0x80
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	4a55      	ldr	r2, [pc, #340]	@ (800f3ac <UART_SetConfig+0x908>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	f040 80f8 	bne.w	800f44e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f25e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f262:	2b20      	cmp	r3, #32
 800f264:	dc46      	bgt.n	800f2f4 <UART_SetConfig+0x850>
 800f266:	2b02      	cmp	r3, #2
 800f268:	db75      	blt.n	800f356 <UART_SetConfig+0x8b2>
 800f26a:	3b02      	subs	r3, #2
 800f26c:	2b1e      	cmp	r3, #30
 800f26e:	d872      	bhi.n	800f356 <UART_SetConfig+0x8b2>
 800f270:	a201      	add	r2, pc, #4	@ (adr r2, 800f278 <UART_SetConfig+0x7d4>)
 800f272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f276:	bf00      	nop
 800f278:	0800f2fb 	.word	0x0800f2fb
 800f27c:	0800f357 	.word	0x0800f357
 800f280:	0800f303 	.word	0x0800f303
 800f284:	0800f357 	.word	0x0800f357
 800f288:	0800f357 	.word	0x0800f357
 800f28c:	0800f357 	.word	0x0800f357
 800f290:	0800f313 	.word	0x0800f313
 800f294:	0800f357 	.word	0x0800f357
 800f298:	0800f357 	.word	0x0800f357
 800f29c:	0800f357 	.word	0x0800f357
 800f2a0:	0800f357 	.word	0x0800f357
 800f2a4:	0800f357 	.word	0x0800f357
 800f2a8:	0800f357 	.word	0x0800f357
 800f2ac:	0800f357 	.word	0x0800f357
 800f2b0:	0800f323 	.word	0x0800f323
 800f2b4:	0800f357 	.word	0x0800f357
 800f2b8:	0800f357 	.word	0x0800f357
 800f2bc:	0800f357 	.word	0x0800f357
 800f2c0:	0800f357 	.word	0x0800f357
 800f2c4:	0800f357 	.word	0x0800f357
 800f2c8:	0800f357 	.word	0x0800f357
 800f2cc:	0800f357 	.word	0x0800f357
 800f2d0:	0800f357 	.word	0x0800f357
 800f2d4:	0800f357 	.word	0x0800f357
 800f2d8:	0800f357 	.word	0x0800f357
 800f2dc:	0800f357 	.word	0x0800f357
 800f2e0:	0800f357 	.word	0x0800f357
 800f2e4:	0800f357 	.word	0x0800f357
 800f2e8:	0800f357 	.word	0x0800f357
 800f2ec:	0800f357 	.word	0x0800f357
 800f2f0:	0800f349 	.word	0x0800f349
 800f2f4:	2b40      	cmp	r3, #64	@ 0x40
 800f2f6:	d02a      	beq.n	800f34e <UART_SetConfig+0x8aa>
 800f2f8:	e02d      	b.n	800f356 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f2fa:	f7fb ff37 	bl	800b16c <HAL_RCCEx_GetD3PCLK1Freq>
 800f2fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f300:	e02f      	b.n	800f362 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f306:	4618      	mov	r0, r3
 800f308:	f7fb ff46 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f310:	e027      	b.n	800f362 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f312:	f107 0318 	add.w	r3, r7, #24
 800f316:	4618      	mov	r0, r3
 800f318:	f7fc f892 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f320:	e01f      	b.n	800f362 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f322:	4b21      	ldr	r3, [pc, #132]	@ (800f3a8 <UART_SetConfig+0x904>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f003 0320 	and.w	r3, r3, #32
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d009      	beq.n	800f342 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f32e:	4b1e      	ldr	r3, [pc, #120]	@ (800f3a8 <UART_SetConfig+0x904>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	08db      	lsrs	r3, r3, #3
 800f334:	f003 0303 	and.w	r3, r3, #3
 800f338:	4a1d      	ldr	r2, [pc, #116]	@ (800f3b0 <UART_SetConfig+0x90c>)
 800f33a:	fa22 f303 	lsr.w	r3, r2, r3
 800f33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f340:	e00f      	b.n	800f362 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f342:	4b1b      	ldr	r3, [pc, #108]	@ (800f3b0 <UART_SetConfig+0x90c>)
 800f344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f346:	e00c      	b.n	800f362 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f348:	4b1a      	ldr	r3, [pc, #104]	@ (800f3b4 <UART_SetConfig+0x910>)
 800f34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f34c:	e009      	b.n	800f362 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f34e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f354:	e005      	b.n	800f362 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f356:	2300      	movs	r3, #0
 800f358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f360:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f364:	2b00      	cmp	r3, #0
 800f366:	f000 81ee 	beq.w	800f746 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f36e:	4a12      	ldr	r2, [pc, #72]	@ (800f3b8 <UART_SetConfig+0x914>)
 800f370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f374:	461a      	mov	r2, r3
 800f376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f378:	fbb3 f3f2 	udiv	r3, r3, r2
 800f37c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	685a      	ldr	r2, [r3, #4]
 800f382:	4613      	mov	r3, r2
 800f384:	005b      	lsls	r3, r3, #1
 800f386:	4413      	add	r3, r2
 800f388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d305      	bcc.n	800f39a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f396:	429a      	cmp	r2, r3
 800f398:	d910      	bls.n	800f3bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f39a:	2301      	movs	r3, #1
 800f39c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f3a0:	e1d1      	b.n	800f746 <UART_SetConfig+0xca2>
 800f3a2:	bf00      	nop
 800f3a4:	40011c00 	.word	0x40011c00
 800f3a8:	58024400 	.word	0x58024400
 800f3ac:	58000c00 	.word	0x58000c00
 800f3b0:	03d09000 	.word	0x03d09000
 800f3b4:	003d0900 	.word	0x003d0900
 800f3b8:	0801294c 	.word	0x0801294c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3be:	2200      	movs	r2, #0
 800f3c0:	60bb      	str	r3, [r7, #8]
 800f3c2:	60fa      	str	r2, [r7, #12]
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c8:	4ac0      	ldr	r2, [pc, #768]	@ (800f6cc <UART_SetConfig+0xc28>)
 800f3ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	603b      	str	r3, [r7, #0]
 800f3d4:	607a      	str	r2, [r7, #4]
 800f3d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f3de:	f7f0 ffef 	bl	80003c0 <__aeabi_uldivmod>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	4610      	mov	r0, r2
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	f04f 0200 	mov.w	r2, #0
 800f3ee:	f04f 0300 	mov.w	r3, #0
 800f3f2:	020b      	lsls	r3, r1, #8
 800f3f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f3f8:	0202      	lsls	r2, r0, #8
 800f3fa:	6979      	ldr	r1, [r7, #20]
 800f3fc:	6849      	ldr	r1, [r1, #4]
 800f3fe:	0849      	lsrs	r1, r1, #1
 800f400:	2000      	movs	r0, #0
 800f402:	460c      	mov	r4, r1
 800f404:	4605      	mov	r5, r0
 800f406:	eb12 0804 	adds.w	r8, r2, r4
 800f40a:	eb43 0905 	adc.w	r9, r3, r5
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	469a      	mov	sl, r3
 800f416:	4693      	mov	fp, r2
 800f418:	4652      	mov	r2, sl
 800f41a:	465b      	mov	r3, fp
 800f41c:	4640      	mov	r0, r8
 800f41e:	4649      	mov	r1, r9
 800f420:	f7f0 ffce 	bl	80003c0 <__aeabi_uldivmod>
 800f424:	4602      	mov	r2, r0
 800f426:	460b      	mov	r3, r1
 800f428:	4613      	mov	r3, r2
 800f42a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f432:	d308      	bcc.n	800f446 <UART_SetConfig+0x9a2>
 800f434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f43a:	d204      	bcs.n	800f446 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f442:	60da      	str	r2, [r3, #12]
 800f444:	e17f      	b.n	800f746 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f446:	2301      	movs	r3, #1
 800f448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f44c:	e17b      	b.n	800f746 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	69db      	ldr	r3, [r3, #28]
 800f452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f456:	f040 80bd 	bne.w	800f5d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f45a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f45e:	2b20      	cmp	r3, #32
 800f460:	dc48      	bgt.n	800f4f4 <UART_SetConfig+0xa50>
 800f462:	2b00      	cmp	r3, #0
 800f464:	db7b      	blt.n	800f55e <UART_SetConfig+0xaba>
 800f466:	2b20      	cmp	r3, #32
 800f468:	d879      	bhi.n	800f55e <UART_SetConfig+0xaba>
 800f46a:	a201      	add	r2, pc, #4	@ (adr r2, 800f470 <UART_SetConfig+0x9cc>)
 800f46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f470:	0800f4fb 	.word	0x0800f4fb
 800f474:	0800f503 	.word	0x0800f503
 800f478:	0800f55f 	.word	0x0800f55f
 800f47c:	0800f55f 	.word	0x0800f55f
 800f480:	0800f50b 	.word	0x0800f50b
 800f484:	0800f55f 	.word	0x0800f55f
 800f488:	0800f55f 	.word	0x0800f55f
 800f48c:	0800f55f 	.word	0x0800f55f
 800f490:	0800f51b 	.word	0x0800f51b
 800f494:	0800f55f 	.word	0x0800f55f
 800f498:	0800f55f 	.word	0x0800f55f
 800f49c:	0800f55f 	.word	0x0800f55f
 800f4a0:	0800f55f 	.word	0x0800f55f
 800f4a4:	0800f55f 	.word	0x0800f55f
 800f4a8:	0800f55f 	.word	0x0800f55f
 800f4ac:	0800f55f 	.word	0x0800f55f
 800f4b0:	0800f52b 	.word	0x0800f52b
 800f4b4:	0800f55f 	.word	0x0800f55f
 800f4b8:	0800f55f 	.word	0x0800f55f
 800f4bc:	0800f55f 	.word	0x0800f55f
 800f4c0:	0800f55f 	.word	0x0800f55f
 800f4c4:	0800f55f 	.word	0x0800f55f
 800f4c8:	0800f55f 	.word	0x0800f55f
 800f4cc:	0800f55f 	.word	0x0800f55f
 800f4d0:	0800f55f 	.word	0x0800f55f
 800f4d4:	0800f55f 	.word	0x0800f55f
 800f4d8:	0800f55f 	.word	0x0800f55f
 800f4dc:	0800f55f 	.word	0x0800f55f
 800f4e0:	0800f55f 	.word	0x0800f55f
 800f4e4:	0800f55f 	.word	0x0800f55f
 800f4e8:	0800f55f 	.word	0x0800f55f
 800f4ec:	0800f55f 	.word	0x0800f55f
 800f4f0:	0800f551 	.word	0x0800f551
 800f4f4:	2b40      	cmp	r3, #64	@ 0x40
 800f4f6:	d02e      	beq.n	800f556 <UART_SetConfig+0xab2>
 800f4f8:	e031      	b.n	800f55e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4fa:	f7f9 ff99 	bl	8009430 <HAL_RCC_GetPCLK1Freq>
 800f4fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f500:	e033      	b.n	800f56a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f502:	f7f9 ffab 	bl	800945c <HAL_RCC_GetPCLK2Freq>
 800f506:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f508:	e02f      	b.n	800f56a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f50a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f50e:	4618      	mov	r0, r3
 800f510:	f7fb fe42 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f518:	e027      	b.n	800f56a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f51a:	f107 0318 	add.w	r3, r7, #24
 800f51e:	4618      	mov	r0, r3
 800f520:	f7fb ff8e 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f528:	e01f      	b.n	800f56a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f52a:	4b69      	ldr	r3, [pc, #420]	@ (800f6d0 <UART_SetConfig+0xc2c>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f003 0320 	and.w	r3, r3, #32
 800f532:	2b00      	cmp	r3, #0
 800f534:	d009      	beq.n	800f54a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f536:	4b66      	ldr	r3, [pc, #408]	@ (800f6d0 <UART_SetConfig+0xc2c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	08db      	lsrs	r3, r3, #3
 800f53c:	f003 0303 	and.w	r3, r3, #3
 800f540:	4a64      	ldr	r2, [pc, #400]	@ (800f6d4 <UART_SetConfig+0xc30>)
 800f542:	fa22 f303 	lsr.w	r3, r2, r3
 800f546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f548:	e00f      	b.n	800f56a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f54a:	4b62      	ldr	r3, [pc, #392]	@ (800f6d4 <UART_SetConfig+0xc30>)
 800f54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f54e:	e00c      	b.n	800f56a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f550:	4b61      	ldr	r3, [pc, #388]	@ (800f6d8 <UART_SetConfig+0xc34>)
 800f552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f554:	e009      	b.n	800f56a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f55c:	e005      	b.n	800f56a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f55e:	2300      	movs	r3, #0
 800f560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f562:	2301      	movs	r3, #1
 800f564:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f568:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f000 80ea 	beq.w	800f746 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f576:	4a55      	ldr	r2, [pc, #340]	@ (800f6cc <UART_SetConfig+0xc28>)
 800f578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f57c:	461a      	mov	r2, r3
 800f57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f580:	fbb3 f3f2 	udiv	r3, r3, r2
 800f584:	005a      	lsls	r2, r3, #1
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	085b      	lsrs	r3, r3, #1
 800f58c:	441a      	add	r2, r3
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	fbb2 f3f3 	udiv	r3, r2, r3
 800f596:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59a:	2b0f      	cmp	r3, #15
 800f59c:	d916      	bls.n	800f5cc <UART_SetConfig+0xb28>
 800f59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5a4:	d212      	bcs.n	800f5cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	f023 030f 	bic.w	r3, r3, #15
 800f5ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b2:	085b      	lsrs	r3, r3, #1
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	f003 0307 	and.w	r3, r3, #7
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f5c8:	60da      	str	r2, [r3, #12]
 800f5ca:	e0bc      	b.n	800f746 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f5d2:	e0b8      	b.n	800f746 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f5d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f5d8:	2b20      	cmp	r3, #32
 800f5da:	dc4b      	bgt.n	800f674 <UART_SetConfig+0xbd0>
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f2c0 8087 	blt.w	800f6f0 <UART_SetConfig+0xc4c>
 800f5e2:	2b20      	cmp	r3, #32
 800f5e4:	f200 8084 	bhi.w	800f6f0 <UART_SetConfig+0xc4c>
 800f5e8:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f0 <UART_SetConfig+0xb4c>)
 800f5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ee:	bf00      	nop
 800f5f0:	0800f67b 	.word	0x0800f67b
 800f5f4:	0800f683 	.word	0x0800f683
 800f5f8:	0800f6f1 	.word	0x0800f6f1
 800f5fc:	0800f6f1 	.word	0x0800f6f1
 800f600:	0800f68b 	.word	0x0800f68b
 800f604:	0800f6f1 	.word	0x0800f6f1
 800f608:	0800f6f1 	.word	0x0800f6f1
 800f60c:	0800f6f1 	.word	0x0800f6f1
 800f610:	0800f69b 	.word	0x0800f69b
 800f614:	0800f6f1 	.word	0x0800f6f1
 800f618:	0800f6f1 	.word	0x0800f6f1
 800f61c:	0800f6f1 	.word	0x0800f6f1
 800f620:	0800f6f1 	.word	0x0800f6f1
 800f624:	0800f6f1 	.word	0x0800f6f1
 800f628:	0800f6f1 	.word	0x0800f6f1
 800f62c:	0800f6f1 	.word	0x0800f6f1
 800f630:	0800f6ab 	.word	0x0800f6ab
 800f634:	0800f6f1 	.word	0x0800f6f1
 800f638:	0800f6f1 	.word	0x0800f6f1
 800f63c:	0800f6f1 	.word	0x0800f6f1
 800f640:	0800f6f1 	.word	0x0800f6f1
 800f644:	0800f6f1 	.word	0x0800f6f1
 800f648:	0800f6f1 	.word	0x0800f6f1
 800f64c:	0800f6f1 	.word	0x0800f6f1
 800f650:	0800f6f1 	.word	0x0800f6f1
 800f654:	0800f6f1 	.word	0x0800f6f1
 800f658:	0800f6f1 	.word	0x0800f6f1
 800f65c:	0800f6f1 	.word	0x0800f6f1
 800f660:	0800f6f1 	.word	0x0800f6f1
 800f664:	0800f6f1 	.word	0x0800f6f1
 800f668:	0800f6f1 	.word	0x0800f6f1
 800f66c:	0800f6f1 	.word	0x0800f6f1
 800f670:	0800f6e3 	.word	0x0800f6e3
 800f674:	2b40      	cmp	r3, #64	@ 0x40
 800f676:	d037      	beq.n	800f6e8 <UART_SetConfig+0xc44>
 800f678:	e03a      	b.n	800f6f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f67a:	f7f9 fed9 	bl	8009430 <HAL_RCC_GetPCLK1Freq>
 800f67e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f680:	e03c      	b.n	800f6fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f682:	f7f9 feeb 	bl	800945c <HAL_RCC_GetPCLK2Freq>
 800f686:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f688:	e038      	b.n	800f6fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f68a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fb fd82 	bl	800b198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f698:	e030      	b.n	800f6fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f69a:	f107 0318 	add.w	r3, r7, #24
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fb fece 	bl	800b440 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a8:	e028      	b.n	800f6fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6aa:	4b09      	ldr	r3, [pc, #36]	@ (800f6d0 <UART_SetConfig+0xc2c>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f003 0320 	and.w	r3, r3, #32
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d012      	beq.n	800f6dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6b6:	4b06      	ldr	r3, [pc, #24]	@ (800f6d0 <UART_SetConfig+0xc2c>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	08db      	lsrs	r3, r3, #3
 800f6bc:	f003 0303 	and.w	r3, r3, #3
 800f6c0:	4a04      	ldr	r2, [pc, #16]	@ (800f6d4 <UART_SetConfig+0xc30>)
 800f6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6c8:	e018      	b.n	800f6fc <UART_SetConfig+0xc58>
 800f6ca:	bf00      	nop
 800f6cc:	0801294c 	.word	0x0801294c
 800f6d0:	58024400 	.word	0x58024400
 800f6d4:	03d09000 	.word	0x03d09000
 800f6d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f6dc:	4b24      	ldr	r3, [pc, #144]	@ (800f770 <UART_SetConfig+0xccc>)
 800f6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e0:	e00c      	b.n	800f6fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6e2:	4b24      	ldr	r3, [pc, #144]	@ (800f774 <UART_SetConfig+0xcd0>)
 800f6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e6:	e009      	b.n	800f6fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6ee:	e005      	b.n	800f6fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f6fa:	bf00      	nop
    }

    if (pclk != 0U)
 800f6fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d021      	beq.n	800f746 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f706:	4a1c      	ldr	r2, [pc, #112]	@ (800f778 <UART_SetConfig+0xcd4>)
 800f708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f70c:	461a      	mov	r2, r3
 800f70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f710:	fbb3 f2f2 	udiv	r2, r3, r2
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	085b      	lsrs	r3, r3, #1
 800f71a:	441a      	add	r2, r3
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	fbb2 f3f3 	udiv	r3, r2, r3
 800f724:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f728:	2b0f      	cmp	r3, #15
 800f72a:	d909      	bls.n	800f740 <UART_SetConfig+0xc9c>
 800f72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f732:	d205      	bcs.n	800f740 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f736:	b29a      	uxth	r2, r3
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	60da      	str	r2, [r3, #12]
 800f73e:	e002      	b.n	800f746 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f740:	2301      	movs	r3, #1
 800f742:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2201      	movs	r2, #1
 800f74a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2201      	movs	r2, #1
 800f752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	2200      	movs	r2, #0
 800f75a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	2200      	movs	r2, #0
 800f760:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f762:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f766:	4618      	mov	r0, r3
 800f768:	3748      	adds	r7, #72	@ 0x48
 800f76a:	46bd      	mov	sp, r7
 800f76c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f770:	03d09000 	.word	0x03d09000
 800f774:	003d0900 	.word	0x003d0900
 800f778:	0801294c 	.word	0x0801294c

0800f77c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f788:	f003 0308 	and.w	r3, r3, #8
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00a      	beq.n	800f7a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	430a      	orrs	r2, r1
 800f7a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7aa:	f003 0301 	and.w	r3, r3, #1
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00a      	beq.n	800f7c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	430a      	orrs	r2, r1
 800f7c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7cc:	f003 0302 	and.w	r3, r3, #2
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d00a      	beq.n	800f7ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	430a      	orrs	r2, r1
 800f7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7ee:	f003 0304 	and.w	r3, r3, #4
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00a      	beq.n	800f80c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	430a      	orrs	r2, r1
 800f80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f810:	f003 0310 	and.w	r3, r3, #16
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00a      	beq.n	800f82e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	430a      	orrs	r2, r1
 800f82c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f832:	f003 0320 	and.w	r3, r3, #32
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00a      	beq.n	800f850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	430a      	orrs	r2, r1
 800f84e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d01a      	beq.n	800f892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	430a      	orrs	r2, r1
 800f870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f87a:	d10a      	bne.n	800f892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	430a      	orrs	r2, r1
 800f890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d00a      	beq.n	800f8b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	430a      	orrs	r2, r1
 800f8b2:	605a      	str	r2, [r3, #4]
  }
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b098      	sub	sp, #96	@ 0x60
 800f8c4:	af02      	add	r7, sp, #8
 800f8c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f8d0:	f7f2 fff2 	bl	80028b8 <HAL_GetTick>
 800f8d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f003 0308 	and.w	r3, r3, #8
 800f8e0:	2b08      	cmp	r3, #8
 800f8e2:	d12f      	bne.n	800f944 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f8e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 f88e 	bl	800fa14 <UART_WaitOnFlagUntilTimeout>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d022      	beq.n	800f944 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f906:	e853 3f00 	ldrex	r3, [r3]
 800f90a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f90c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f90e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f912:	653b      	str	r3, [r7, #80]	@ 0x50
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	461a      	mov	r2, r3
 800f91a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f91c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f91e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f920:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f924:	e841 2300 	strex	r3, r2, [r1]
 800f928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f92a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1e6      	bne.n	800f8fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2220      	movs	r2, #32
 800f934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f940:	2303      	movs	r3, #3
 800f942:	e063      	b.n	800fa0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f003 0304 	and.w	r3, r3, #4
 800f94e:	2b04      	cmp	r3, #4
 800f950:	d149      	bne.n	800f9e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f952:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f95a:	2200      	movs	r2, #0
 800f95c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 f857 	bl	800fa14 <UART_WaitOnFlagUntilTimeout>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d03c      	beq.n	800f9e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f974:	e853 3f00 	ldrex	r3, [r3]
 800f978:	623b      	str	r3, [r7, #32]
   return(result);
 800f97a:	6a3b      	ldr	r3, [r7, #32]
 800f97c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f980:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	461a      	mov	r2, r3
 800f988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f98a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f98c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f992:	e841 2300 	strex	r3, r2, [r1]
 800f996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1e6      	bne.n	800f96c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	3308      	adds	r3, #8
 800f9a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	e853 3f00 	ldrex	r3, [r3]
 800f9ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f023 0301 	bic.w	r3, r3, #1
 800f9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	3308      	adds	r3, #8
 800f9bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9be:	61fa      	str	r2, [r7, #28]
 800f9c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c2:	69b9      	ldr	r1, [r7, #24]
 800f9c4:	69fa      	ldr	r2, [r7, #28]
 800f9c6:	e841 2300 	strex	r3, r2, [r1]
 800f9ca:	617b      	str	r3, [r7, #20]
   return(result);
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1e5      	bne.n	800f99e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2220      	movs	r2, #32
 800f9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9e2:	2303      	movs	r3, #3
 800f9e4:	e012      	b.n	800fa0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2220      	movs	r2, #32
 800f9ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2220      	movs	r2, #32
 800f9f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa0a:	2300      	movs	r3, #0
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3758      	adds	r7, #88	@ 0x58
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	603b      	str	r3, [r7, #0]
 800fa20:	4613      	mov	r3, r2
 800fa22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa24:	e04f      	b.n	800fac6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa2c:	d04b      	beq.n	800fac6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa2e:	f7f2 ff43 	bl	80028b8 <HAL_GetTick>
 800fa32:	4602      	mov	r2, r0
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	69ba      	ldr	r2, [r7, #24]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d302      	bcc.n	800fa44 <UART_WaitOnFlagUntilTimeout+0x30>
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d101      	bne.n	800fa48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fa44:	2303      	movs	r3, #3
 800fa46:	e04e      	b.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f003 0304 	and.w	r3, r3, #4
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d037      	beq.n	800fac6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	2b80      	cmp	r3, #128	@ 0x80
 800fa5a:	d034      	beq.n	800fac6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	2b40      	cmp	r3, #64	@ 0x40
 800fa60:	d031      	beq.n	800fac6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	69db      	ldr	r3, [r3, #28]
 800fa68:	f003 0308 	and.w	r3, r3, #8
 800fa6c:	2b08      	cmp	r3, #8
 800fa6e:	d110      	bne.n	800fa92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2208      	movs	r2, #8
 800fa76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f000 f839 	bl	800faf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2208      	movs	r2, #8
 800fa82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e029      	b.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	69db      	ldr	r3, [r3, #28]
 800fa98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fa9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800faa0:	d111      	bne.n	800fac6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800faaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f000 f81f 	bl	800faf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2220      	movs	r2, #32
 800fab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2200      	movs	r2, #0
 800fabe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fac2:	2303      	movs	r3, #3
 800fac4:	e00f      	b.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	69da      	ldr	r2, [r3, #28]
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	4013      	ands	r3, r2
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	bf0c      	ite	eq
 800fad6:	2301      	moveq	r3, #1
 800fad8:	2300      	movne	r3, #0
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	461a      	mov	r2, r3
 800fade:	79fb      	ldrb	r3, [r7, #7]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d0a0      	beq.n	800fa26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
	...

0800faf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b095      	sub	sp, #84	@ 0x54
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	461a      	mov	r2, r3
 800fb14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb16:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fb1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fb1e:	e841 2300 	strex	r3, r2, [r1]
 800fb22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1e6      	bne.n	800faf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	3308      	adds	r3, #8
 800fb30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb32:	6a3b      	ldr	r3, [r7, #32]
 800fb34:	e853 3f00 	ldrex	r3, [r3]
 800fb38:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb3a:	69fa      	ldr	r2, [r7, #28]
 800fb3c:	4b1e      	ldr	r3, [pc, #120]	@ (800fbb8 <UART_EndRxTransfer+0xc8>)
 800fb3e:	4013      	ands	r3, r2
 800fb40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	3308      	adds	r3, #8
 800fb48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fb4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb52:	e841 2300 	strex	r3, r2, [r1]
 800fb56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1e5      	bne.n	800fb2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d118      	bne.n	800fb98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	e853 3f00 	ldrex	r3, [r3]
 800fb72:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	f023 0310 	bic.w	r3, r3, #16
 800fb7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	461a      	mov	r2, r3
 800fb82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb84:	61bb      	str	r3, [r7, #24]
 800fb86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb88:	6979      	ldr	r1, [r7, #20]
 800fb8a:	69ba      	ldr	r2, [r7, #24]
 800fb8c:	e841 2300 	strex	r3, r2, [r1]
 800fb90:	613b      	str	r3, [r7, #16]
   return(result);
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1e6      	bne.n	800fb66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2220      	movs	r2, #32
 800fb9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fbac:	bf00      	nop
 800fbae:	3754      	adds	r7, #84	@ 0x54
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr
 800fbb8:	effffffe 	.word	0xeffffffe

0800fbbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b085      	sub	sp, #20
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d101      	bne.n	800fbd2 <HAL_UARTEx_DisableFifoMode+0x16>
 800fbce:	2302      	movs	r3, #2
 800fbd0:	e027      	b.n	800fc22 <HAL_UARTEx_DisableFifoMode+0x66>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2224      	movs	r2, #36	@ 0x24
 800fbde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f022 0201 	bic.w	r2, r2, #1
 800fbf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fc00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2200      	movs	r2, #0
 800fc06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2220      	movs	r2, #32
 800fc14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3714      	adds	r7, #20
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b084      	sub	sp, #16
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	d101      	bne.n	800fc46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc42:	2302      	movs	r3, #2
 800fc44:	e02d      	b.n	800fca2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2201      	movs	r2, #1
 800fc4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2224      	movs	r2, #36	@ 0x24
 800fc52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f022 0201 	bic.w	r2, r2, #1
 800fc6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	683a      	ldr	r2, [r7, #0]
 800fc7e:	430a      	orrs	r2, r1
 800fc80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 f850 	bl	800fd28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	68fa      	ldr	r2, [r7, #12]
 800fc8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2220      	movs	r2, #32
 800fc94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3710      	adds	r7, #16
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}

0800fcaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fcaa:	b580      	push	{r7, lr}
 800fcac:	b084      	sub	sp, #16
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	6078      	str	r0, [r7, #4]
 800fcb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d101      	bne.n	800fcc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fcbe:	2302      	movs	r3, #2
 800fcc0:	e02d      	b.n	800fd1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2224      	movs	r2, #36	@ 0x24
 800fcce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f022 0201 	bic.w	r2, r2, #1
 800fce8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	689b      	ldr	r3, [r3, #8]
 800fcf0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	683a      	ldr	r2, [r7, #0]
 800fcfa:	430a      	orrs	r2, r1
 800fcfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f812 	bl	800fd28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2220      	movs	r2, #32
 800fd10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd1c:	2300      	movs	r3, #0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3710      	adds	r7, #16
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
	...

0800fd28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d108      	bne.n	800fd4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2201      	movs	r2, #1
 800fd44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd48:	e031      	b.n	800fdae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd4a:	2310      	movs	r3, #16
 800fd4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd4e:	2310      	movs	r3, #16
 800fd50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	689b      	ldr	r3, [r3, #8]
 800fd58:	0e5b      	lsrs	r3, r3, #25
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	f003 0307 	and.w	r3, r3, #7
 800fd60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	689b      	ldr	r3, [r3, #8]
 800fd68:	0f5b      	lsrs	r3, r3, #29
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	f003 0307 	and.w	r3, r3, #7
 800fd70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd72:	7bbb      	ldrb	r3, [r7, #14]
 800fd74:	7b3a      	ldrb	r2, [r7, #12]
 800fd76:	4911      	ldr	r1, [pc, #68]	@ (800fdbc <UARTEx_SetNbDataToProcess+0x94>)
 800fd78:	5c8a      	ldrb	r2, [r1, r2]
 800fd7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd7e:	7b3a      	ldrb	r2, [r7, #12]
 800fd80:	490f      	ldr	r1, [pc, #60]	@ (800fdc0 <UARTEx_SetNbDataToProcess+0x98>)
 800fd82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd84:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	7b7a      	ldrb	r2, [r7, #13]
 800fd94:	4909      	ldr	r1, [pc, #36]	@ (800fdbc <UARTEx_SetNbDataToProcess+0x94>)
 800fd96:	5c8a      	ldrb	r2, [r1, r2]
 800fd98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd9c:	7b7a      	ldrb	r2, [r7, #13]
 800fd9e:	4908      	ldr	r1, [pc, #32]	@ (800fdc0 <UARTEx_SetNbDataToProcess+0x98>)
 800fda0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fda2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fdae:	bf00      	nop
 800fdb0:	3714      	adds	r7, #20
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	08012964 	.word	0x08012964
 800fdc0:	0801296c 	.word	0x0801296c

0800fdc4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fdc4:	b084      	sub	sp, #16
 800fdc6:	b480      	push	{r7}
 800fdc8:	b085      	sub	sp, #20
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
 800fdce:	f107 001c 	add.w	r0, r7, #28
 800fdd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fdda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fddc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fdde:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fde2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fde6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fdea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	685a      	ldr	r2, [r3, #4]
 800fdf6:	4b07      	ldr	r3, [pc, #28]	@ (800fe14 <SDMMC_Init+0x50>)
 800fdf8:	4013      	ands	r3, r2
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	431a      	orrs	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3714      	adds	r7, #20
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	b004      	add	sp, #16
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	ffc02c00 	.word	0xffc02c00

0800fe18 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	370c      	adds	r7, #12
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b083      	sub	sp, #12
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f043 0203 	orr.w	r2, r3, #3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fe68:	2300      	movs	r3, #0
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	370c      	adds	r7, #12
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800fe76:	b480      	push	{r7}
 800fe78:	b083      	sub	sp, #12
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f003 0303 	and.w	r3, r3, #3
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
	...

0800fe94 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800feb2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800feb8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800febe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fec0:	68fa      	ldr	r2, [r7, #12]
 800fec2:	4313      	orrs	r3, r2
 800fec4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	68da      	ldr	r2, [r3, #12]
 800feca:	4b06      	ldr	r3, [pc, #24]	@ (800fee4 <SDMMC_SendCommand+0x50>)
 800fecc:	4013      	ands	r3, r2
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	431a      	orrs	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fed6:	2300      	movs	r3, #0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3714      	adds	r7, #20
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr
 800fee4:	fffee0c0 	.word	0xfffee0c0

0800fee8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	b2db      	uxtb	r3, r3
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	370c      	adds	r7, #12
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr

0800ff02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ff02:	b480      	push	{r7}
 800ff04:	b085      	sub	sp, #20
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	3314      	adds	r3, #20
 800ff10:	461a      	mov	r2, r3
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	4413      	add	r3, r2
 800ff16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3714      	adds	r7, #20
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b085      	sub	sp, #20
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff32:	2300      	movs	r3, #0
 800ff34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	685a      	ldr	r2, [r3, #4]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ff4e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ff54:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ff5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	431a      	orrs	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ff72:	2300      	movs	r3, #0

}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b088      	sub	sp, #32
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ff8e:	2310      	movs	r3, #16
 800ff90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffa2:	f107 0308 	add.w	r3, r7, #8
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f7ff ff73 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ffae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffb2:	2110      	movs	r1, #16
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 fa5f 	bl	8010478 <SDMMC_GetCmdResp1>
 800ffba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffbc:	69fb      	ldr	r3, [r7, #28]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3720      	adds	r7, #32
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b088      	sub	sp, #32
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ffd4:	2311      	movs	r3, #17
 800ffd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ffdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffe8:	f107 0308 	add.w	r3, r7, #8
 800ffec:	4619      	mov	r1, r3
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f7ff ff50 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fff8:	2111      	movs	r1, #17
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 fa3c 	bl	8010478 <SDMMC_GetCmdResp1>
 8010000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010002:	69fb      	ldr	r3, [r7, #28]
}
 8010004:	4618      	mov	r0, r3
 8010006:	3720      	adds	r7, #32
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b088      	sub	sp, #32
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801001a:	2312      	movs	r3, #18
 801001c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801001e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010024:	2300      	movs	r3, #0
 8010026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801002c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801002e:	f107 0308 	add.w	r3, r7, #8
 8010032:	4619      	mov	r1, r3
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f7ff ff2d 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801003a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801003e:	2112      	movs	r1, #18
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 fa19 	bl	8010478 <SDMMC_GetCmdResp1>
 8010046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010048:	69fb      	ldr	r3, [r7, #28]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3720      	adds	r7, #32
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010052:	b580      	push	{r7, lr}
 8010054:	b088      	sub	sp, #32
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
 801005a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010060:	2318      	movs	r3, #24
 8010062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801006a:	2300      	movs	r3, #0
 801006c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801006e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010074:	f107 0308 	add.w	r3, r7, #8
 8010078:	4619      	mov	r1, r3
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7ff ff0a 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010084:	2118      	movs	r1, #24
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 f9f6 	bl	8010478 <SDMMC_GetCmdResp1>
 801008c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801008e:	69fb      	ldr	r3, [r7, #28]
}
 8010090:	4618      	mov	r0, r3
 8010092:	3720      	adds	r7, #32
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b088      	sub	sp, #32
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80100a6:	2319      	movs	r3, #25
 80100a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100b0:	2300      	movs	r3, #0
 80100b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100ba:	f107 0308 	add.w	r3, r7, #8
 80100be:	4619      	mov	r1, r3
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff fee7 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80100c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100ca:	2119      	movs	r1, #25
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 f9d3 	bl	8010478 <SDMMC_GetCmdResp1>
 80100d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100d4:	69fb      	ldr	r3, [r7, #28]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3720      	adds	r7, #32
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
	...

080100e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b088      	sub	sp, #32
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80100e8:	2300      	movs	r3, #0
 80100ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80100ec:	230c      	movs	r3, #12
 80100ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100f6:	2300      	movs	r3, #0
 80100f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100fe:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010118:	f107 0308 	add.w	r3, r7, #8
 801011c:	4619      	mov	r1, r3
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f7ff feb8 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010124:	4a0b      	ldr	r2, [pc, #44]	@ (8010154 <SDMMC_CmdStopTransfer+0x74>)
 8010126:	210c      	movs	r1, #12
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 f9a5 	bl	8010478 <SDMMC_GetCmdResp1>
 801012e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010142:	d101      	bne.n	8010148 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010144:	2300      	movs	r3, #0
 8010146:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010148:	69fb      	ldr	r3, [r7, #28]
}
 801014a:	4618      	mov	r0, r3
 801014c:	3720      	adds	r7, #32
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	05f5e100 	.word	0x05f5e100

08010158 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b088      	sub	sp, #32
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010166:	2307      	movs	r3, #7
 8010168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801016a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801016e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010170:	2300      	movs	r3, #0
 8010172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010178:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801017a:	f107 0308 	add.w	r3, r7, #8
 801017e:	4619      	mov	r1, r3
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7ff fe87 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010186:	f241 3288 	movw	r2, #5000	@ 0x1388
 801018a:	2107      	movs	r1, #7
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 f973 	bl	8010478 <SDMMC_GetCmdResp1>
 8010192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010194:	69fb      	ldr	r3, [r7, #28]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3720      	adds	r7, #32
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b088      	sub	sp, #32
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80101a6:	2300      	movs	r3, #0
 80101a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80101aa:	2300      	movs	r3, #0
 80101ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80101ae:	2300      	movs	r3, #0
 80101b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101b2:	2300      	movs	r3, #0
 80101b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101bc:	f107 0308 	add.w	r3, r7, #8
 80101c0:	4619      	mov	r1, r3
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7ff fe66 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 fb97 	bl	80108fc <SDMMC_GetCmdError>
 80101ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101d0:	69fb      	ldr	r3, [r7, #28]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3720      	adds	r7, #32
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b088      	sub	sp, #32
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80101e2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80101e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80101e8:	2308      	movs	r3, #8
 80101ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101f2:	2300      	movs	r3, #0
 80101f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101fc:	f107 0308 	add.w	r3, r7, #8
 8010200:	4619      	mov	r1, r3
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7ff fe46 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 fb29 	bl	8010860 <SDMMC_GetCmdResp7>
 801020e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010210:	69fb      	ldr	r3, [r7, #28]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3720      	adds	r7, #32
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801021a:	b580      	push	{r7, lr}
 801021c:	b088      	sub	sp, #32
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
 8010222:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010228:	2337      	movs	r3, #55	@ 0x37
 801022a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801022c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010232:	2300      	movs	r3, #0
 8010234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801023a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801023c:	f107 0308 	add.w	r3, r7, #8
 8010240:	4619      	mov	r1, r3
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f7ff fe26 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010248:	f241 3288 	movw	r2, #5000	@ 0x1388
 801024c:	2137      	movs	r1, #55	@ 0x37
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 f912 	bl	8010478 <SDMMC_GetCmdResp1>
 8010254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010256:	69fb      	ldr	r3, [r7, #28]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3720      	adds	r7, #32
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b088      	sub	sp, #32
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801026e:	2329      	movs	r3, #41	@ 0x29
 8010270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010278:	2300      	movs	r3, #0
 801027a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801027c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010282:	f107 0308 	add.w	r3, r7, #8
 8010286:	4619      	mov	r1, r3
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7ff fe03 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 fa2e 	bl	80106f0 <SDMMC_GetCmdResp3>
 8010294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010296:	69fb      	ldr	r3, [r7, #28]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3720      	adds	r7, #32
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b088      	sub	sp, #32
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80102ae:	2306      	movs	r3, #6
 80102b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102b8:	2300      	movs	r3, #0
 80102ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102c2:	f107 0308 	add.w	r3, r7, #8
 80102c6:	4619      	mov	r1, r3
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff fde3 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80102ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102d2:	2106      	movs	r1, #6
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 f8cf 	bl	8010478 <SDMMC_GetCmdResp1>
 80102da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102dc:	69fb      	ldr	r3, [r7, #28]
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3720      	adds	r7, #32
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b088      	sub	sp, #32
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80102ee:	2300      	movs	r3, #0
 80102f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80102f2:	2333      	movs	r3, #51	@ 0x33
 80102f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102fc:	2300      	movs	r3, #0
 80102fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010304:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010306:	f107 0308 	add.w	r3, r7, #8
 801030a:	4619      	mov	r1, r3
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7ff fdc1 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010316:	2133      	movs	r1, #51	@ 0x33
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f8ad 	bl	8010478 <SDMMC_GetCmdResp1>
 801031e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010320:	69fb      	ldr	r3, [r7, #28]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3720      	adds	r7, #32
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b088      	sub	sp, #32
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010332:	2300      	movs	r3, #0
 8010334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010336:	2302      	movs	r3, #2
 8010338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801033a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801033e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010340:	2300      	movs	r3, #0
 8010342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801034a:	f107 0308 	add.w	r3, r7, #8
 801034e:	4619      	mov	r1, r3
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f7ff fd9f 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 f980 	bl	801065c <SDMMC_GetCmdResp2>
 801035c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801035e:	69fb      	ldr	r3, [r7, #28]
}
 8010360:	4618      	mov	r0, r3
 8010362:	3720      	adds	r7, #32
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010376:	2309      	movs	r3, #9
 8010378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801037a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801037e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010380:	2300      	movs	r3, #0
 8010382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010388:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801038a:	f107 0308 	add.w	r3, r7, #8
 801038e:	4619      	mov	r1, r3
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff fd7f 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 f960 	bl	801065c <SDMMC_GetCmdResp2>
 801039c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801039e:	69fb      	ldr	r3, [r7, #28]
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3720      	adds	r7, #32
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b088      	sub	sp, #32
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80103b2:	2300      	movs	r3, #0
 80103b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80103b6:	2303      	movs	r3, #3
 80103b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103c0:	2300      	movs	r3, #0
 80103c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103ca:	f107 0308 	add.w	r3, r7, #8
 80103ce:	4619      	mov	r1, r3
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff fd5f 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80103d6:	683a      	ldr	r2, [r7, #0]
 80103d8:	2103      	movs	r1, #3
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 f9c8 	bl	8010770 <SDMMC_GetCmdResp6>
 80103e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103e2:	69fb      	ldr	r3, [r7, #28]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3720      	adds	r7, #32
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80103fa:	230d      	movs	r3, #13
 80103fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010404:	2300      	movs	r3, #0
 8010406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801040c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801040e:	f107 0308 	add.w	r3, r7, #8
 8010412:	4619      	mov	r1, r3
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7ff fd3d 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801041a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801041e:	210d      	movs	r1, #13
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 f829 	bl	8010478 <SDMMC_GetCmdResp1>
 8010426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010428:	69fb      	ldr	r3, [r7, #28]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b088      	sub	sp, #32
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801043a:	2300      	movs	r3, #0
 801043c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801043e:	230d      	movs	r3, #13
 8010440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010448:	2300      	movs	r3, #0
 801044a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801044c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010452:	f107 0308 	add.w	r3, r7, #8
 8010456:	4619      	mov	r1, r3
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7ff fd1b 	bl	800fe94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801045e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010462:	210d      	movs	r1, #13
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 f807 	bl	8010478 <SDMMC_GetCmdResp1>
 801046a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801046c:	69fb      	ldr	r3, [r7, #28]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3720      	adds	r7, #32
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
	...

08010478 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b088      	sub	sp, #32
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	460b      	mov	r3, r1
 8010482:	607a      	str	r2, [r7, #4]
 8010484:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010486:	4b70      	ldr	r3, [pc, #448]	@ (8010648 <SDMMC_GetCmdResp1+0x1d0>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a70      	ldr	r2, [pc, #448]	@ (801064c <SDMMC_GetCmdResp1+0x1d4>)
 801048c:	fba2 2303 	umull	r2, r3, r2, r3
 8010490:	0a5a      	lsrs	r2, r3, #9
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	fb02 f303 	mul.w	r3, r2, r3
 8010498:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	1e5a      	subs	r2, r3, #1
 801049e:	61fa      	str	r2, [r7, #28]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d102      	bne.n	80104aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80104a8:	e0c9      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104ae:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80104b0:	69ba      	ldr	r2, [r7, #24]
 80104b2:	4b67      	ldr	r3, [pc, #412]	@ (8010650 <SDMMC_GetCmdResp1+0x1d8>)
 80104b4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d0ef      	beq.n	801049a <SDMMC_GetCmdResp1+0x22>
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d1ea      	bne.n	801049a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104c8:	f003 0304 	and.w	r3, r3, #4
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d004      	beq.n	80104da <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2204      	movs	r2, #4
 80104d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80104d6:	2304      	movs	r3, #4
 80104d8:	e0b1      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104de:	f003 0301 	and.w	r3, r3, #1
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d004      	beq.n	80104f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2201      	movs	r2, #1
 80104ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80104ec:	2301      	movs	r3, #1
 80104ee:	e0a6      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	4a58      	ldr	r2, [pc, #352]	@ (8010654 <SDMMC_GetCmdResp1+0x1dc>)
 80104f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f7ff fcf6 	bl	800fee8 <SDMMC_GetCommandResponse>
 80104fc:	4603      	mov	r3, r0
 80104fe:	461a      	mov	r2, r3
 8010500:	7afb      	ldrb	r3, [r7, #11]
 8010502:	4293      	cmp	r3, r2
 8010504:	d001      	beq.n	801050a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010506:	2301      	movs	r3, #1
 8010508:	e099      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801050a:	2100      	movs	r1, #0
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f7ff fcf8 	bl	800ff02 <SDMMC_GetResponse>
 8010512:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010514:	697a      	ldr	r2, [r7, #20]
 8010516:	4b50      	ldr	r3, [pc, #320]	@ (8010658 <SDMMC_GetCmdResp1+0x1e0>)
 8010518:	4013      	ands	r3, r2
 801051a:	2b00      	cmp	r3, #0
 801051c:	d101      	bne.n	8010522 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801051e:	2300      	movs	r3, #0
 8010520:	e08d      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	2b00      	cmp	r3, #0
 8010526:	da02      	bge.n	801052e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010528:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801052c:	e087      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010534:	2b00      	cmp	r3, #0
 8010536:	d001      	beq.n	801053c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010538:	2340      	movs	r3, #64	@ 0x40
 801053a:	e080      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010542:	2b00      	cmp	r3, #0
 8010544:	d001      	beq.n	801054a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010546:	2380      	movs	r3, #128	@ 0x80
 8010548:	e079      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010550:	2b00      	cmp	r3, #0
 8010552:	d002      	beq.n	801055a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010558:	e071      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010560:	2b00      	cmp	r3, #0
 8010562:	d002      	beq.n	801056a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010568:	e069      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010570:	2b00      	cmp	r3, #0
 8010572:	d002      	beq.n	801057a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010578:	e061      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010580:	2b00      	cmp	r3, #0
 8010582:	d002      	beq.n	801058a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010584:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010588:	e059      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010590:	2b00      	cmp	r3, #0
 8010592:	d002      	beq.n	801059a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010598:	e051      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d002      	beq.n	80105aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80105a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80105a8:	e049      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d002      	beq.n	80105ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80105b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80105b8:	e041      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d002      	beq.n	80105ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80105c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80105c8:	e039      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80105d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80105d8:	e031      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d002      	beq.n	80105ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80105e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80105e8:	e029      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d002      	beq.n	80105fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80105f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80105f8:	e021      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010600:	2b00      	cmp	r3, #0
 8010602:	d002      	beq.n	801060a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010604:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010608:	e019      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010610:	2b00      	cmp	r3, #0
 8010612:	d002      	beq.n	801061a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010614:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010618:	e011      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010620:	2b00      	cmp	r3, #0
 8010622:	d002      	beq.n	801062a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010624:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010628:	e009      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	f003 0308 	and.w	r3, r3, #8
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010634:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010638:	e001      	b.n	801063e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801063a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801063e:	4618      	mov	r0, r3
 8010640:	3720      	adds	r7, #32
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	24000010 	.word	0x24000010
 801064c:	10624dd3 	.word	0x10624dd3
 8010650:	00200045 	.word	0x00200045
 8010654:	002000c5 	.word	0x002000c5
 8010658:	fdffe008 	.word	0xfdffe008

0801065c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010664:	4b1f      	ldr	r3, [pc, #124]	@ (80106e4 <SDMMC_GetCmdResp2+0x88>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4a1f      	ldr	r2, [pc, #124]	@ (80106e8 <SDMMC_GetCmdResp2+0x8c>)
 801066a:	fba2 2303 	umull	r2, r3, r2, r3
 801066e:	0a5b      	lsrs	r3, r3, #9
 8010670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010674:	fb02 f303 	mul.w	r3, r2, r3
 8010678:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	1e5a      	subs	r2, r3, #1
 801067e:	60fa      	str	r2, [r7, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d102      	bne.n	801068a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010684:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010688:	e026      	b.n	80106d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801068e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010696:	2b00      	cmp	r3, #0
 8010698:	d0ef      	beq.n	801067a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1ea      	bne.n	801067a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106a8:	f003 0304 	and.w	r3, r3, #4
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d004      	beq.n	80106ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2204      	movs	r2, #4
 80106b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106b6:	2304      	movs	r3, #4
 80106b8:	e00e      	b.n	80106d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106be:	f003 0301 	and.w	r3, r3, #1
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d004      	beq.n	80106d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2201      	movs	r2, #1
 80106ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106cc:	2301      	movs	r3, #1
 80106ce:	e003      	b.n	80106d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	4a06      	ldr	r2, [pc, #24]	@ (80106ec <SDMMC_GetCmdResp2+0x90>)
 80106d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3714      	adds	r7, #20
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr
 80106e4:	24000010 	.word	0x24000010
 80106e8:	10624dd3 	.word	0x10624dd3
 80106ec:	002000c5 	.word	0x002000c5

080106f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b085      	sub	sp, #20
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80106f8:	4b1a      	ldr	r3, [pc, #104]	@ (8010764 <SDMMC_GetCmdResp3+0x74>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	4a1a      	ldr	r2, [pc, #104]	@ (8010768 <SDMMC_GetCmdResp3+0x78>)
 80106fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010702:	0a5b      	lsrs	r3, r3, #9
 8010704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010708:	fb02 f303 	mul.w	r3, r2, r3
 801070c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	1e5a      	subs	r2, r3, #1
 8010712:	60fa      	str	r2, [r7, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d102      	bne.n	801071e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010718:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801071c:	e01b      	b.n	8010756 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010722:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801072a:	2b00      	cmp	r3, #0
 801072c:	d0ef      	beq.n	801070e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010734:	2b00      	cmp	r3, #0
 8010736:	d1ea      	bne.n	801070e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801073c:	f003 0304 	and.w	r3, r3, #4
 8010740:	2b00      	cmp	r3, #0
 8010742:	d004      	beq.n	801074e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2204      	movs	r2, #4
 8010748:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801074a:	2304      	movs	r3, #4
 801074c:	e003      	b.n	8010756 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4a06      	ldr	r2, [pc, #24]	@ (801076c <SDMMC_GetCmdResp3+0x7c>)
 8010752:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	24000010 	.word	0x24000010
 8010768:	10624dd3 	.word	0x10624dd3
 801076c:	002000c5 	.word	0x002000c5

08010770 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b088      	sub	sp, #32
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	460b      	mov	r3, r1
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801077e:	4b35      	ldr	r3, [pc, #212]	@ (8010854 <SDMMC_GetCmdResp6+0xe4>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	4a35      	ldr	r2, [pc, #212]	@ (8010858 <SDMMC_GetCmdResp6+0xe8>)
 8010784:	fba2 2303 	umull	r2, r3, r2, r3
 8010788:	0a5b      	lsrs	r3, r3, #9
 801078a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801078e:	fb02 f303 	mul.w	r3, r2, r3
 8010792:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	1e5a      	subs	r2, r3, #1
 8010798:	61fa      	str	r2, [r7, #28]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d102      	bne.n	80107a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801079e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107a2:	e052      	b.n	801084a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107a8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d0ef      	beq.n	8010794 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80107b4:	69bb      	ldr	r3, [r7, #24]
 80107b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1ea      	bne.n	8010794 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107c2:	f003 0304 	and.w	r3, r3, #4
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d004      	beq.n	80107d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2204      	movs	r2, #4
 80107ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107d0:	2304      	movs	r3, #4
 80107d2:	e03a      	b.n	801084a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107d8:	f003 0301 	and.w	r3, r3, #1
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d004      	beq.n	80107ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2201      	movs	r2, #1
 80107e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107e6:	2301      	movs	r3, #1
 80107e8:	e02f      	b.n	801084a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	f7ff fb7c 	bl	800fee8 <SDMMC_GetCommandResponse>
 80107f0:	4603      	mov	r3, r0
 80107f2:	461a      	mov	r2, r3
 80107f4:	7afb      	ldrb	r3, [r7, #11]
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d001      	beq.n	80107fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107fa:	2301      	movs	r3, #1
 80107fc:	e025      	b.n	801084a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	4a16      	ldr	r2, [pc, #88]	@ (801085c <SDMMC_GetCmdResp6+0xec>)
 8010802:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010804:	2100      	movs	r1, #0
 8010806:	68f8      	ldr	r0, [r7, #12]
 8010808:	f7ff fb7b 	bl	800ff02 <SDMMC_GetResponse>
 801080c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010814:	2b00      	cmp	r3, #0
 8010816:	d106      	bne.n	8010826 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	0c1b      	lsrs	r3, r3, #16
 801081c:	b29a      	uxth	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010822:	2300      	movs	r3, #0
 8010824:	e011      	b.n	801084a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010834:	e009      	b.n	801084a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010844:	e001      	b.n	801084a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010846:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801084a:	4618      	mov	r0, r3
 801084c:	3720      	adds	r7, #32
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	24000010 	.word	0x24000010
 8010858:	10624dd3 	.word	0x10624dd3
 801085c:	002000c5 	.word	0x002000c5

08010860 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010860:	b480      	push	{r7}
 8010862:	b085      	sub	sp, #20
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010868:	4b22      	ldr	r3, [pc, #136]	@ (80108f4 <SDMMC_GetCmdResp7+0x94>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	4a22      	ldr	r2, [pc, #136]	@ (80108f8 <SDMMC_GetCmdResp7+0x98>)
 801086e:	fba2 2303 	umull	r2, r3, r2, r3
 8010872:	0a5b      	lsrs	r3, r3, #9
 8010874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010878:	fb02 f303 	mul.w	r3, r2, r3
 801087c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	1e5a      	subs	r2, r3, #1
 8010882:	60fa      	str	r2, [r7, #12]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d102      	bne.n	801088e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010888:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801088c:	e02c      	b.n	80108e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010892:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801089a:	2b00      	cmp	r3, #0
 801089c:	d0ef      	beq.n	801087e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1ea      	bne.n	801087e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108ac:	f003 0304 	and.w	r3, r3, #4
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d004      	beq.n	80108be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2204      	movs	r2, #4
 80108b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108ba:	2304      	movs	r3, #4
 80108bc:	e014      	b.n	80108e8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108c2:	f003 0301 	and.w	r3, r3, #1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d004      	beq.n	80108d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2201      	movs	r2, #1
 80108ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108d0:	2301      	movs	r3, #1
 80108d2:	e009      	b.n	80108e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2240      	movs	r2, #64	@ 0x40
 80108e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80108e6:	2300      	movs	r3, #0

}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3714      	adds	r7, #20
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr
 80108f4:	24000010 	.word	0x24000010
 80108f8:	10624dd3 	.word	0x10624dd3

080108fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b085      	sub	sp, #20
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010904:	4b11      	ldr	r3, [pc, #68]	@ (801094c <SDMMC_GetCmdError+0x50>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	4a11      	ldr	r2, [pc, #68]	@ (8010950 <SDMMC_GetCmdError+0x54>)
 801090a:	fba2 2303 	umull	r2, r3, r2, r3
 801090e:	0a5b      	lsrs	r3, r3, #9
 8010910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010914:	fb02 f303 	mul.w	r3, r2, r3
 8010918:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	1e5a      	subs	r2, r3, #1
 801091e:	60fa      	str	r2, [r7, #12]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d102      	bne.n	801092a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010924:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010928:	e009      	b.n	801093e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801092e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010932:	2b00      	cmp	r3, #0
 8010934:	d0f1      	beq.n	801091a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4a06      	ldr	r2, [pc, #24]	@ (8010954 <SDMMC_GetCmdError+0x58>)
 801093a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801093c:	2300      	movs	r3, #0
}
 801093e:	4618      	mov	r0, r3
 8010940:	3714      	adds	r7, #20
 8010942:	46bd      	mov	sp, r7
 8010944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop
 801094c:	24000010 	.word	0x24000010
 8010950:	10624dd3 	.word	0x10624dd3
 8010954:	002000c5 	.word	0x002000c5

08010958 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801095c:	4904      	ldr	r1, [pc, #16]	@ (8010970 <MX_FATFS_Init+0x18>)
 801095e:	4805      	ldr	r0, [pc, #20]	@ (8010974 <MX_FATFS_Init+0x1c>)
 8010960:	f001 f908 	bl	8011b74 <FATFS_LinkDriver>
 8010964:	4603      	mov	r3, r0
 8010966:	461a      	mov	r2, r3
 8010968:	4b03      	ldr	r3, [pc, #12]	@ (8010978 <MX_FATFS_Init+0x20>)
 801096a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801096c:	bf00      	nop
 801096e:	bd80      	pop	{r7, pc}
 8010970:	24001824 	.word	0x24001824
 8010974:	08012974 	.word	0x08012974
 8010978:	24001820 	.word	0x24001820

0801097c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010986:	f000 f885 	bl	8010a94 <BSP_SD_IsDetected>
 801098a:	4603      	mov	r3, r0
 801098c:	2b01      	cmp	r3, #1
 801098e:	d001      	beq.n	8010994 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010990:	2302      	movs	r3, #2
 8010992:	e012      	b.n	80109ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010994:	480b      	ldr	r0, [pc, #44]	@ (80109c4 <BSP_SD_Init+0x48>)
 8010996:	f7fb f95d 	bl	800bc54 <HAL_SD_Init>
 801099a:	4603      	mov	r3, r0
 801099c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801099e:	79fb      	ldrb	r3, [r7, #7]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d109      	bne.n	80109b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80109a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80109a8:	4806      	ldr	r0, [pc, #24]	@ (80109c4 <BSP_SD_Init+0x48>)
 80109aa:	f7fc f813 	bl	800c9d4 <HAL_SD_ConfigWideBusOperation>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d001      	beq.n	80109b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80109b4:	2301      	movs	r3, #1
 80109b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80109b8:	79fb      	ldrb	r3, [r7, #7]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3708      	adds	r7, #8
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	2400032c 	.word	0x2400032c

080109c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80109d4:	2300      	movs	r3, #0
 80109d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	68ba      	ldr	r2, [r7, #8]
 80109dc:	68f9      	ldr	r1, [r7, #12]
 80109de:	4806      	ldr	r0, [pc, #24]	@ (80109f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80109e0:	f7fb fa58 	bl	800be94 <HAL_SD_ReadBlocks_DMA>
 80109e4:	4603      	mov	r3, r0
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80109ea:	2301      	movs	r3, #1
 80109ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80109ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3718      	adds	r7, #24
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	2400032c 	.word	0x2400032c

080109fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b086      	sub	sp, #24
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	68ba      	ldr	r2, [r7, #8]
 8010a10:	68f9      	ldr	r1, [r7, #12]
 8010a12:	4806      	ldr	r0, [pc, #24]	@ (8010a2c <BSP_SD_WriteBlocks_DMA+0x30>)
 8010a14:	f7fb fae6 	bl	800bfe4 <HAL_SD_WriteBlocks_DMA>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d001      	beq.n	8010a22 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a1e:	2301      	movs	r3, #1
 8010a20:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3718      	adds	r7, #24
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	2400032c 	.word	0x2400032c

08010a30 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010a34:	4805      	ldr	r0, [pc, #20]	@ (8010a4c <BSP_SD_GetCardState+0x1c>)
 8010a36:	f7fc f8df 	bl	800cbf8 <HAL_SD_GetCardState>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b04      	cmp	r3, #4
 8010a3e:	bf14      	ite	ne
 8010a40:	2301      	movne	r3, #1
 8010a42:	2300      	moveq	r3, #0
 8010a44:	b2db      	uxtb	r3, r3
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	2400032c 	.word	0x2400032c

08010a50 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010a58:	6879      	ldr	r1, [r7, #4]
 8010a5a:	4803      	ldr	r0, [pc, #12]	@ (8010a68 <BSP_SD_GetCardInfo+0x18>)
 8010a5c:	f7fb ff8e 	bl	800c97c <HAL_SD_GetCardInfo>
}
 8010a60:	bf00      	nop
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	2400032c 	.word	0x2400032c

08010a6c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010a74:	f000 f9a0 	bl	8010db8 <BSP_SD_WriteCpltCallback>
}
 8010a78:	bf00      	nop
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010a88:	f000 f9a2 	bl	8010dd0 <BSP_SD_ReadCpltCallback>
}
 8010a8c:	bf00      	nop
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010a9e:	f000 f80b 	bl	8010ab8 <BSP_PlatformIsDetected>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d101      	bne.n	8010aac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010aac:	79fb      	ldrb	r3, [r7, #7]
 8010aae:	b2db      	uxtb	r3, r3
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010ac6:	4806      	ldr	r0, [pc, #24]	@ (8010ae0 <BSP_PlatformIsDetected+0x28>)
 8010ac8:	f7f7 fd0c 	bl	80084e4 <HAL_GPIO_ReadPin>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d001      	beq.n	8010ad6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010ad6:	79fb      	ldrb	r3, [r7, #7]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	58021400 	.word	0x58021400

08010ae4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010aec:	f7f1 fee4 	bl	80028b8 <HAL_GetTick>
 8010af0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010af2:	e006      	b.n	8010b02 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010af4:	f7ff ff9c 	bl	8010a30 <BSP_SD_GetCardState>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d101      	bne.n	8010b02 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010afe:	2300      	movs	r3, #0
 8010b00:	e009      	b.n	8010b16 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010b02:	f7f1 fed9 	bl	80028b8 <HAL_GetTick>
 8010b06:	4602      	mov	r2, r0
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	687a      	ldr	r2, [r7, #4]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d8f0      	bhi.n	8010af4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3710      	adds	r7, #16
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
	...

08010b20 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	4603      	mov	r3, r0
 8010b28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8010b58 <SD_CheckStatus+0x38>)
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010b30:	f7ff ff7e 	bl	8010a30 <BSP_SD_GetCardState>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d107      	bne.n	8010b4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010b3a:	4b07      	ldr	r3, [pc, #28]	@ (8010b58 <SD_CheckStatus+0x38>)
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	f023 0301 	bic.w	r3, r3, #1
 8010b44:	b2da      	uxtb	r2, r3
 8010b46:	4b04      	ldr	r3, [pc, #16]	@ (8010b58 <SD_CheckStatus+0x38>)
 8010b48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010b4a:	4b03      	ldr	r3, [pc, #12]	@ (8010b58 <SD_CheckStatus+0x38>)
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	b2db      	uxtb	r3, r3
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	2400001d 	.word	0x2400001d

08010b5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	4603      	mov	r3, r0
 8010b64:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010b66:	f7ff ff09 	bl	801097c <BSP_SD_Init>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d107      	bne.n	8010b80 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010b70:	79fb      	ldrb	r3, [r7, #7]
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7ff ffd4 	bl	8010b20 <SD_CheckStatus>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	4b04      	ldr	r3, [pc, #16]	@ (8010b90 <SD_initialize+0x34>)
 8010b7e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010b80:	4b03      	ldr	r3, [pc, #12]	@ (8010b90 <SD_initialize+0x34>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	b2db      	uxtb	r3, r3
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	2400001d 	.word	0x2400001d

08010b94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010b9e:	79fb      	ldrb	r3, [r7, #7]
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7ff ffbd 	bl	8010b20 <SD_CheckStatus>
 8010ba6:	4603      	mov	r3, r0
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3708      	adds	r7, #8
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60b9      	str	r1, [r7, #8]
 8010bb8:	607a      	str	r2, [r7, #4]
 8010bba:	603b      	str	r3, [r7, #0]
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010bc4:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010bc8:	f7ff ff8c 	bl	8010ae4 <SD_CheckStatusWithTimeout>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	da01      	bge.n	8010bd6 <SD_read+0x26>
  {
    return res;
 8010bd2:	7dfb      	ldrb	r3, [r7, #23]
 8010bd4:	e03b      	b.n	8010c4e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010bd6:	683a      	ldr	r2, [r7, #0]
 8010bd8:	6879      	ldr	r1, [r7, #4]
 8010bda:	68b8      	ldr	r0, [r7, #8]
 8010bdc:	f7ff fef4 	bl	80109c8 <BSP_SD_ReadBlocks_DMA>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d132      	bne.n	8010c4c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010be6:	4b1c      	ldr	r3, [pc, #112]	@ (8010c58 <SD_read+0xa8>)
 8010be8:	2200      	movs	r2, #0
 8010bea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010bec:	f7f1 fe64 	bl	80028b8 <HAL_GetTick>
 8010bf0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010bf2:	bf00      	nop
 8010bf4:	4b18      	ldr	r3, [pc, #96]	@ (8010c58 <SD_read+0xa8>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d108      	bne.n	8010c0e <SD_read+0x5e>
 8010bfc:	f7f1 fe5c 	bl	80028b8 <HAL_GetTick>
 8010c00:	4602      	mov	r2, r0
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d9f2      	bls.n	8010bf4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010c0e:	4b12      	ldr	r3, [pc, #72]	@ (8010c58 <SD_read+0xa8>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d102      	bne.n	8010c1c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010c16:	2301      	movs	r3, #1
 8010c18:	75fb      	strb	r3, [r7, #23]
 8010c1a:	e017      	b.n	8010c4c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8010c58 <SD_read+0xa8>)
 8010c1e:	2200      	movs	r2, #0
 8010c20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010c22:	f7f1 fe49 	bl	80028b8 <HAL_GetTick>
 8010c26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c28:	e007      	b.n	8010c3a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c2a:	f7ff ff01 	bl	8010a30 <BSP_SD_GetCardState>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d102      	bne.n	8010c3a <SD_read+0x8a>
          {
            res = RES_OK;
 8010c34:	2300      	movs	r3, #0
 8010c36:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010c38:	e008      	b.n	8010c4c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c3a:	f7f1 fe3d 	bl	80028b8 <HAL_GetTick>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	1ad3      	subs	r3, r2, r3
 8010c44:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d9ee      	bls.n	8010c2a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3718      	adds	r7, #24
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	24001830 	.word	0x24001830

08010c5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b086      	sub	sp, #24
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60b9      	str	r1, [r7, #8]
 8010c64:	607a      	str	r2, [r7, #4]
 8010c66:	603b      	str	r3, [r7, #0]
 8010c68:	4603      	mov	r3, r0
 8010c6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010c70:	4b24      	ldr	r3, [pc, #144]	@ (8010d04 <SD_write+0xa8>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010c76:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010c7a:	f7ff ff33 	bl	8010ae4 <SD_CheckStatusWithTimeout>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	da01      	bge.n	8010c88 <SD_write+0x2c>
  {
    return res;
 8010c84:	7dfb      	ldrb	r3, [r7, #23]
 8010c86:	e038      	b.n	8010cfa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010c88:	683a      	ldr	r2, [r7, #0]
 8010c8a:	6879      	ldr	r1, [r7, #4]
 8010c8c:	68b8      	ldr	r0, [r7, #8]
 8010c8e:	f7ff feb5 	bl	80109fc <BSP_SD_WriteBlocks_DMA>
 8010c92:	4603      	mov	r3, r0
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d12f      	bne.n	8010cf8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010c98:	f7f1 fe0e 	bl	80028b8 <HAL_GetTick>
 8010c9c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010c9e:	bf00      	nop
 8010ca0:	4b18      	ldr	r3, [pc, #96]	@ (8010d04 <SD_write+0xa8>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d108      	bne.n	8010cba <SD_write+0x5e>
 8010ca8:	f7f1 fe06 	bl	80028b8 <HAL_GetTick>
 8010cac:	4602      	mov	r2, r0
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d9f2      	bls.n	8010ca0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010cba:	4b12      	ldr	r3, [pc, #72]	@ (8010d04 <SD_write+0xa8>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d102      	bne.n	8010cc8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	75fb      	strb	r3, [r7, #23]
 8010cc6:	e017      	b.n	8010cf8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8010d04 <SD_write+0xa8>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010cce:	f7f1 fdf3 	bl	80028b8 <HAL_GetTick>
 8010cd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010cd4:	e007      	b.n	8010ce6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010cd6:	f7ff feab 	bl	8010a30 <BSP_SD_GetCardState>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d102      	bne.n	8010ce6 <SD_write+0x8a>
          {
            res = RES_OK;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	75fb      	strb	r3, [r7, #23]
            break;
 8010ce4:	e008      	b.n	8010cf8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ce6:	f7f1 fde7 	bl	80028b8 <HAL_GetTick>
 8010cea:	4602      	mov	r2, r0
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	1ad3      	subs	r3, r2, r3
 8010cf0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d9ee      	bls.n	8010cd6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3718      	adds	r7, #24
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	2400182c 	.word	0x2400182c

08010d08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b08c      	sub	sp, #48	@ 0x30
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	4603      	mov	r3, r0
 8010d10:	603a      	str	r2, [r7, #0]
 8010d12:	71fb      	strb	r3, [r7, #7]
 8010d14:	460b      	mov	r3, r1
 8010d16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010d1e:	4b25      	ldr	r3, [pc, #148]	@ (8010db4 <SD_ioctl+0xac>)
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	f003 0301 	and.w	r3, r3, #1
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d001      	beq.n	8010d30 <SD_ioctl+0x28>
 8010d2c:	2303      	movs	r3, #3
 8010d2e:	e03c      	b.n	8010daa <SD_ioctl+0xa2>

  switch (cmd)
 8010d30:	79bb      	ldrb	r3, [r7, #6]
 8010d32:	2b03      	cmp	r3, #3
 8010d34:	d834      	bhi.n	8010da0 <SD_ioctl+0x98>
 8010d36:	a201      	add	r2, pc, #4	@ (adr r2, 8010d3c <SD_ioctl+0x34>)
 8010d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3c:	08010d4d 	.word	0x08010d4d
 8010d40:	08010d55 	.word	0x08010d55
 8010d44:	08010d6d 	.word	0x08010d6d
 8010d48:	08010d87 	.word	0x08010d87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010d52:	e028      	b.n	8010da6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d54:	f107 0308 	add.w	r3, r7, #8
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7ff fe79 	bl	8010a50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010d5e:	6a3a      	ldr	r2, [r7, #32]
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010d64:	2300      	movs	r3, #0
 8010d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010d6a:	e01c      	b.n	8010da6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d6c:	f107 0308 	add.w	r3, r7, #8
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7ff fe6d 	bl	8010a50 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d78:	b29a      	uxth	r2, r3
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010d84:	e00f      	b.n	8010da6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d86:	f107 0308 	add.w	r3, r7, #8
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7ff fe60 	bl	8010a50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d92:	0a5a      	lsrs	r2, r3, #9
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010d9e:	e002      	b.n	8010da6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010da0:	2304      	movs	r3, #4
 8010da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3730      	adds	r7, #48	@ 0x30
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	2400001d 	.word	0x2400001d

08010db8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010db8:	b480      	push	{r7}
 8010dba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010dbc:	4b03      	ldr	r3, [pc, #12]	@ (8010dcc <BSP_SD_WriteCpltCallback+0x14>)
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	601a      	str	r2, [r3, #0]
}
 8010dc2:	bf00      	nop
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr
 8010dcc:	2400182c 	.word	0x2400182c

08010dd0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010dd4:	4b03      	ldr	r3, [pc, #12]	@ (8010de4 <BSP_SD_ReadCpltCallback+0x14>)
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	601a      	str	r2, [r3, #0]
}
 8010dda:	bf00      	nop
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr
 8010de4:	24001830 	.word	0x24001830

08010de8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b084      	sub	sp, #16
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	4603      	mov	r3, r0
 8010df0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010df2:	79fb      	ldrb	r3, [r7, #7]
 8010df4:	4a08      	ldr	r2, [pc, #32]	@ (8010e18 <disk_status+0x30>)
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	4413      	add	r3, r2
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	79fa      	ldrb	r2, [r7, #7]
 8010e00:	4905      	ldr	r1, [pc, #20]	@ (8010e18 <disk_status+0x30>)
 8010e02:	440a      	add	r2, r1
 8010e04:	7a12      	ldrb	r2, [r2, #8]
 8010e06:	4610      	mov	r0, r2
 8010e08:	4798      	blx	r3
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3710      	adds	r7, #16
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	24001a5c 	.word	0x24001a5c

08010e1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	4603      	mov	r3, r0
 8010e24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010e2a:	79fb      	ldrb	r3, [r7, #7]
 8010e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8010e68 <disk_initialize+0x4c>)
 8010e2e:	5cd3      	ldrb	r3, [r2, r3]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d114      	bne.n	8010e5e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010e34:	79fb      	ldrb	r3, [r7, #7]
 8010e36:	4a0c      	ldr	r2, [pc, #48]	@ (8010e68 <disk_initialize+0x4c>)
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	4413      	add	r3, r2
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	79fa      	ldrb	r2, [r7, #7]
 8010e42:	4909      	ldr	r1, [pc, #36]	@ (8010e68 <disk_initialize+0x4c>)
 8010e44:	440a      	add	r2, r1
 8010e46:	7a12      	ldrb	r2, [r2, #8]
 8010e48:	4610      	mov	r0, r2
 8010e4a:	4798      	blx	r3
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010e50:	7bfb      	ldrb	r3, [r7, #15]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d103      	bne.n	8010e5e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010e56:	79fb      	ldrb	r3, [r7, #7]
 8010e58:	4a03      	ldr	r2, [pc, #12]	@ (8010e68 <disk_initialize+0x4c>)
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	24001a5c 	.word	0x24001a5c

08010e6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010e6c:	b590      	push	{r4, r7, lr}
 8010e6e:	b087      	sub	sp, #28
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60b9      	str	r1, [r7, #8]
 8010e74:	607a      	str	r2, [r7, #4]
 8010e76:	603b      	str	r3, [r7, #0]
 8010e78:	4603      	mov	r3, r0
 8010e7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010e7c:	7bfb      	ldrb	r3, [r7, #15]
 8010e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8010ea8 <disk_read+0x3c>)
 8010e80:	009b      	lsls	r3, r3, #2
 8010e82:	4413      	add	r3, r2
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	689c      	ldr	r4, [r3, #8]
 8010e88:	7bfb      	ldrb	r3, [r7, #15]
 8010e8a:	4a07      	ldr	r2, [pc, #28]	@ (8010ea8 <disk_read+0x3c>)
 8010e8c:	4413      	add	r3, r2
 8010e8e:	7a18      	ldrb	r0, [r3, #8]
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	68b9      	ldr	r1, [r7, #8]
 8010e96:	47a0      	blx	r4
 8010e98:	4603      	mov	r3, r0
 8010e9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	371c      	adds	r7, #28
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd90      	pop	{r4, r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	24001a5c 	.word	0x24001a5c

08010eac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010eac:	b590      	push	{r4, r7, lr}
 8010eae:	b087      	sub	sp, #28
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60b9      	str	r1, [r7, #8]
 8010eb4:	607a      	str	r2, [r7, #4]
 8010eb6:	603b      	str	r3, [r7, #0]
 8010eb8:	4603      	mov	r3, r0
 8010eba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010ebc:	7bfb      	ldrb	r3, [r7, #15]
 8010ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8010ee8 <disk_write+0x3c>)
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4413      	add	r3, r2
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	68dc      	ldr	r4, [r3, #12]
 8010ec8:	7bfb      	ldrb	r3, [r7, #15]
 8010eca:	4a07      	ldr	r2, [pc, #28]	@ (8010ee8 <disk_write+0x3c>)
 8010ecc:	4413      	add	r3, r2
 8010ece:	7a18      	ldrb	r0, [r3, #8]
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	68b9      	ldr	r1, [r7, #8]
 8010ed6:	47a0      	blx	r4
 8010ed8:	4603      	mov	r3, r0
 8010eda:	75fb      	strb	r3, [r7, #23]
  return res;
 8010edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	371c      	adds	r7, #28
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd90      	pop	{r4, r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	24001a5c 	.word	0x24001a5c

08010eec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	603a      	str	r2, [r7, #0]
 8010ef6:	71fb      	strb	r3, [r7, #7]
 8010ef8:	460b      	mov	r3, r1
 8010efa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010efc:	79fb      	ldrb	r3, [r7, #7]
 8010efe:	4a09      	ldr	r2, [pc, #36]	@ (8010f24 <disk_ioctl+0x38>)
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	79fa      	ldrb	r2, [r7, #7]
 8010f0a:	4906      	ldr	r1, [pc, #24]	@ (8010f24 <disk_ioctl+0x38>)
 8010f0c:	440a      	add	r2, r1
 8010f0e:	7a10      	ldrb	r0, [r2, #8]
 8010f10:	79b9      	ldrb	r1, [r7, #6]
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	4798      	blx	r3
 8010f16:	4603      	mov	r3, r0
 8010f18:	73fb      	strb	r3, [r7, #15]
  return res;
 8010f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	24001a5c 	.word	0x24001a5c

08010f28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	3301      	adds	r3, #1
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010f38:	89fb      	ldrh	r3, [r7, #14]
 8010f3a:	021b      	lsls	r3, r3, #8
 8010f3c:	b21a      	sxth	r2, r3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	b21b      	sxth	r3, r3
 8010f44:	4313      	orrs	r3, r2
 8010f46:	b21b      	sxth	r3, r3
 8010f48:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010f4a:	89fb      	ldrh	r3, [r7, #14]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3714      	adds	r7, #20
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b085      	sub	sp, #20
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	3303      	adds	r3, #3
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	021b      	lsls	r3, r3, #8
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	3202      	adds	r2, #2
 8010f70:	7812      	ldrb	r2, [r2, #0]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	021b      	lsls	r3, r3, #8
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	3201      	adds	r2, #1
 8010f7e:	7812      	ldrb	r2, [r2, #0]
 8010f80:	4313      	orrs	r3, r2
 8010f82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	021b      	lsls	r3, r3, #8
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	7812      	ldrb	r2, [r2, #0]
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010f90:	68fb      	ldr	r3, [r7, #12]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3714      	adds	r7, #20
 8010f96:	46bd      	mov	sp, r7
 8010f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9c:	4770      	bx	lr
	...

08010fa0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010fa8:	2300      	movs	r3, #0
 8010faa:	60fb      	str	r3, [r7, #12]
 8010fac:	e010      	b.n	8010fd0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010fae:	4a0d      	ldr	r2, [pc, #52]	@ (8010fe4 <clear_lock+0x44>)
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	011b      	lsls	r3, r3, #4
 8010fb4:	4413      	add	r3, r2
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d105      	bne.n	8010fca <clear_lock+0x2a>
 8010fbe:	4a09      	ldr	r2, [pc, #36]	@ (8010fe4 <clear_lock+0x44>)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	011b      	lsls	r3, r3, #4
 8010fc4:	4413      	add	r3, r2
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	3301      	adds	r3, #1
 8010fce:	60fb      	str	r3, [r7, #12]
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	d9eb      	bls.n	8010fae <clear_lock+0xe>
	}
}
 8010fd6:	bf00      	nop
 8010fd8:	bf00      	nop
 8010fda:	3714      	adds	r7, #20
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr
 8010fe4:	2400183c 	.word	0x2400183c

08010fe8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b086      	sub	sp, #24
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	78db      	ldrb	r3, [r3, #3]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d034      	beq.n	8011066 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011000:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	7858      	ldrb	r0, [r3, #1]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801100c:	2301      	movs	r3, #1
 801100e:	697a      	ldr	r2, [r7, #20]
 8011010:	f7ff ff4c 	bl	8010eac <disk_write>
 8011014:	4603      	mov	r3, r0
 8011016:	2b00      	cmp	r3, #0
 8011018:	d002      	beq.n	8011020 <sync_window+0x38>
			res = FR_DISK_ERR;
 801101a:	2301      	movs	r3, #1
 801101c:	73fb      	strb	r3, [r7, #15]
 801101e:	e022      	b.n	8011066 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2200      	movs	r2, #0
 8011024:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801102a:	697a      	ldr	r2, [r7, #20]
 801102c:	1ad2      	subs	r2, r2, r3
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6a1b      	ldr	r3, [r3, #32]
 8011032:	429a      	cmp	r2, r3
 8011034:	d217      	bcs.n	8011066 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	789b      	ldrb	r3, [r3, #2]
 801103a:	613b      	str	r3, [r7, #16]
 801103c:	e010      	b.n	8011060 <sync_window+0x78>
					wsect += fs->fsize;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a1b      	ldr	r3, [r3, #32]
 8011042:	697a      	ldr	r2, [r7, #20]
 8011044:	4413      	add	r3, r2
 8011046:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	7858      	ldrb	r0, [r3, #1]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011052:	2301      	movs	r3, #1
 8011054:	697a      	ldr	r2, [r7, #20]
 8011056:	f7ff ff29 	bl	8010eac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	3b01      	subs	r3, #1
 801105e:	613b      	str	r3, [r7, #16]
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	2b01      	cmp	r3, #1
 8011064:	d8eb      	bhi.n	801103e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011066:	7bfb      	ldrb	r3, [r7, #15]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3718      	adds	r7, #24
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801107a:	2300      	movs	r3, #0
 801107c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011082:	683a      	ldr	r2, [r7, #0]
 8011084:	429a      	cmp	r2, r3
 8011086:	d01b      	beq.n	80110c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f7ff ffad 	bl	8010fe8 <sync_window>
 801108e:	4603      	mov	r3, r0
 8011090:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011092:	7bfb      	ldrb	r3, [r7, #15]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d113      	bne.n	80110c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	7858      	ldrb	r0, [r3, #1]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80110a2:	2301      	movs	r3, #1
 80110a4:	683a      	ldr	r2, [r7, #0]
 80110a6:	f7ff fee1 	bl	8010e6c <disk_read>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d004      	beq.n	80110ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80110b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80110b6:	2301      	movs	r3, #1
 80110b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80110c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3710      	adds	r7, #16
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}

080110ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b086      	sub	sp, #24
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
 80110d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d904      	bls.n	80110ea <get_fat+0x20>
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	69db      	ldr	r3, [r3, #28]
 80110e4:	683a      	ldr	r2, [r7, #0]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d302      	bcc.n	80110f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80110ea:	2301      	movs	r3, #1
 80110ec:	617b      	str	r3, [r7, #20]
 80110ee:	e0ba      	b.n	8011266 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80110f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	2b03      	cmp	r3, #3
 80110fc:	f000 8082 	beq.w	8011204 <get_fat+0x13a>
 8011100:	2b03      	cmp	r3, #3
 8011102:	f300 80a6 	bgt.w	8011252 <get_fat+0x188>
 8011106:	2b01      	cmp	r3, #1
 8011108:	d002      	beq.n	8011110 <get_fat+0x46>
 801110a:	2b02      	cmp	r3, #2
 801110c:	d055      	beq.n	80111ba <get_fat+0xf0>
 801110e:	e0a0      	b.n	8011252 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	60fb      	str	r3, [r7, #12]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	085b      	lsrs	r3, r3, #1
 8011118:	68fa      	ldr	r2, [r7, #12]
 801111a:	4413      	add	r3, r2
 801111c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	899b      	ldrh	r3, [r3, #12]
 8011126:	4619      	mov	r1, r3
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	fbb3 f3f1 	udiv	r3, r3, r1
 801112e:	4413      	add	r3, r2
 8011130:	4619      	mov	r1, r3
 8011132:	6938      	ldr	r0, [r7, #16]
 8011134:	f7ff ff9c 	bl	8011070 <move_window>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	f040 808c 	bne.w	8011258 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	1c5a      	adds	r2, r3, #1
 8011144:	60fa      	str	r2, [r7, #12]
 8011146:	693a      	ldr	r2, [r7, #16]
 8011148:	8992      	ldrh	r2, [r2, #12]
 801114a:	fbb3 f1f2 	udiv	r1, r3, r2
 801114e:	fb01 f202 	mul.w	r2, r1, r2
 8011152:	1a9b      	subs	r3, r3, r2
 8011154:	693a      	ldr	r2, [r7, #16]
 8011156:	4413      	add	r3, r2
 8011158:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801115c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	899b      	ldrh	r3, [r3, #12]
 8011166:	4619      	mov	r1, r3
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	fbb3 f3f1 	udiv	r3, r3, r1
 801116e:	4413      	add	r3, r2
 8011170:	4619      	mov	r1, r3
 8011172:	6938      	ldr	r0, [r7, #16]
 8011174:	f7ff ff7c 	bl	8011070 <move_window>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	d16e      	bne.n	801125c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	899b      	ldrh	r3, [r3, #12]
 8011182:	461a      	mov	r2, r3
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	fbb3 f1f2 	udiv	r1, r3, r2
 801118a:	fb01 f202 	mul.w	r2, r1, r2
 801118e:	1a9b      	subs	r3, r3, r2
 8011190:	693a      	ldr	r2, [r7, #16]
 8011192:	4413      	add	r3, r2
 8011194:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011198:	021b      	lsls	r3, r3, #8
 801119a:	68ba      	ldr	r2, [r7, #8]
 801119c:	4313      	orrs	r3, r2
 801119e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	f003 0301 	and.w	r3, r3, #1
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d002      	beq.n	80111b0 <get_fat+0xe6>
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	091b      	lsrs	r3, r3, #4
 80111ae:	e002      	b.n	80111b6 <get_fat+0xec>
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80111b6:	617b      	str	r3, [r7, #20]
			break;
 80111b8:	e055      	b.n	8011266 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	899b      	ldrh	r3, [r3, #12]
 80111c2:	085b      	lsrs	r3, r3, #1
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	4619      	mov	r1, r3
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80111ce:	4413      	add	r3, r2
 80111d0:	4619      	mov	r1, r3
 80111d2:	6938      	ldr	r0, [r7, #16]
 80111d4:	f7ff ff4c 	bl	8011070 <move_window>
 80111d8:	4603      	mov	r3, r0
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d140      	bne.n	8011260 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	005b      	lsls	r3, r3, #1
 80111e8:	693a      	ldr	r2, [r7, #16]
 80111ea:	8992      	ldrh	r2, [r2, #12]
 80111ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80111f0:	fb00 f202 	mul.w	r2, r0, r2
 80111f4:	1a9b      	subs	r3, r3, r2
 80111f6:	440b      	add	r3, r1
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7ff fe95 	bl	8010f28 <ld_word>
 80111fe:	4603      	mov	r3, r0
 8011200:	617b      	str	r3, [r7, #20]
			break;
 8011202:	e030      	b.n	8011266 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	899b      	ldrh	r3, [r3, #12]
 801120c:	089b      	lsrs	r3, r3, #2
 801120e:	b29b      	uxth	r3, r3
 8011210:	4619      	mov	r1, r3
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	fbb3 f3f1 	udiv	r3, r3, r1
 8011218:	4413      	add	r3, r2
 801121a:	4619      	mov	r1, r3
 801121c:	6938      	ldr	r0, [r7, #16]
 801121e:	f7ff ff27 	bl	8011070 <move_window>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d11d      	bne.n	8011264 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	693a      	ldr	r2, [r7, #16]
 8011234:	8992      	ldrh	r2, [r2, #12]
 8011236:	fbb3 f0f2 	udiv	r0, r3, r2
 801123a:	fb00 f202 	mul.w	r2, r0, r2
 801123e:	1a9b      	subs	r3, r3, r2
 8011240:	440b      	add	r3, r1
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff fe88 	bl	8010f58 <ld_dword>
 8011248:	4603      	mov	r3, r0
 801124a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801124e:	617b      	str	r3, [r7, #20]
			break;
 8011250:	e009      	b.n	8011266 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011252:	2301      	movs	r3, #1
 8011254:	617b      	str	r3, [r7, #20]
 8011256:	e006      	b.n	8011266 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011258:	bf00      	nop
 801125a:	e004      	b.n	8011266 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801125c:	bf00      	nop
 801125e:	e002      	b.n	8011266 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011260:	bf00      	nop
 8011262:	e000      	b.n	8011266 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011264:	bf00      	nop
		}
	}

	return val;
 8011266:	697b      	ldr	r3, [r7, #20]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011270:	b480      	push	{r7}
 8011272:	b087      	sub	sp, #28
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011278:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801127c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d031      	beq.n	80112ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	617b      	str	r3, [r7, #20]
 801128c:	e002      	b.n	8011294 <get_ldnumber+0x24>
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	3301      	adds	r3, #1
 8011292:	617b      	str	r3, [r7, #20]
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	2b1f      	cmp	r3, #31
 801129a:	d903      	bls.n	80112a4 <get_ldnumber+0x34>
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80112a2:	d1f4      	bne.n	801128e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80112aa:	d11c      	bne.n	80112e6 <get_ldnumber+0x76>
			tp = *path;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	1c5a      	adds	r2, r3, #1
 80112b6:	60fa      	str	r2, [r7, #12]
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	3b30      	subs	r3, #48	@ 0x30
 80112bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	2b09      	cmp	r3, #9
 80112c2:	d80e      	bhi.n	80112e2 <get_ldnumber+0x72>
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d10a      	bne.n	80112e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d107      	bne.n	80112e2 <get_ldnumber+0x72>
					vol = (int)i;
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	3301      	adds	r3, #1
 80112da:	617b      	str	r3, [r7, #20]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	697a      	ldr	r2, [r7, #20]
 80112e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	e002      	b.n	80112ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80112e6:	2300      	movs	r3, #0
 80112e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80112ea:	693b      	ldr	r3, [r7, #16]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	371c      	adds	r7, #28
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2200      	movs	r2, #0
 8011306:	70da      	strb	r2, [r3, #3]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801130e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011310:	6839      	ldr	r1, [r7, #0]
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f7ff feac 	bl	8011070 <move_window>
 8011318:	4603      	mov	r3, r0
 801131a:	2b00      	cmp	r3, #0
 801131c:	d001      	beq.n	8011322 <check_fs+0x2a>
 801131e:	2304      	movs	r3, #4
 8011320:	e038      	b.n	8011394 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	3338      	adds	r3, #56	@ 0x38
 8011326:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801132a:	4618      	mov	r0, r3
 801132c:	f7ff fdfc 	bl	8010f28 <ld_word>
 8011330:	4603      	mov	r3, r0
 8011332:	461a      	mov	r2, r3
 8011334:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011338:	429a      	cmp	r2, r3
 801133a:	d001      	beq.n	8011340 <check_fs+0x48>
 801133c:	2303      	movs	r3, #3
 801133e:	e029      	b.n	8011394 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011346:	2be9      	cmp	r3, #233	@ 0xe9
 8011348:	d009      	beq.n	801135e <check_fs+0x66>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011350:	2beb      	cmp	r3, #235	@ 0xeb
 8011352:	d11e      	bne.n	8011392 <check_fs+0x9a>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801135a:	2b90      	cmp	r3, #144	@ 0x90
 801135c:	d119      	bne.n	8011392 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	3338      	adds	r3, #56	@ 0x38
 8011362:	3336      	adds	r3, #54	@ 0x36
 8011364:	4618      	mov	r0, r3
 8011366:	f7ff fdf7 	bl	8010f58 <ld_dword>
 801136a:	4603      	mov	r3, r0
 801136c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011370:	4a0a      	ldr	r2, [pc, #40]	@ (801139c <check_fs+0xa4>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d101      	bne.n	801137a <check_fs+0x82>
 8011376:	2300      	movs	r3, #0
 8011378:	e00c      	b.n	8011394 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	3338      	adds	r3, #56	@ 0x38
 801137e:	3352      	adds	r3, #82	@ 0x52
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fde9 	bl	8010f58 <ld_dword>
 8011386:	4603      	mov	r3, r0
 8011388:	4a05      	ldr	r2, [pc, #20]	@ (80113a0 <check_fs+0xa8>)
 801138a:	4293      	cmp	r3, r2
 801138c:	d101      	bne.n	8011392 <check_fs+0x9a>
 801138e:	2300      	movs	r3, #0
 8011390:	e000      	b.n	8011394 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011392:	2302      	movs	r3, #2
}
 8011394:	4618      	mov	r0, r3
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	00544146 	.word	0x00544146
 80113a0:	33544146 	.word	0x33544146

080113a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b096      	sub	sp, #88	@ 0x58
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	4613      	mov	r3, r2
 80113b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	2200      	movs	r2, #0
 80113b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80113b8:	68f8      	ldr	r0, [r7, #12]
 80113ba:	f7ff ff59 	bl	8011270 <get_ldnumber>
 80113be:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80113c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	da01      	bge.n	80113ca <find_volume+0x26>
 80113c6:	230b      	movs	r3, #11
 80113c8:	e27f      	b.n	80118ca <find_volume+0x526>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80113ca:	4a9e      	ldr	r2, [pc, #632]	@ (8011644 <find_volume+0x2a0>)
 80113cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80113d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d101      	bne.n	80113de <find_volume+0x3a>
 80113da:	230c      	movs	r3, #12
 80113dc:	e275      	b.n	80118ca <find_volume+0x526>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80113e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80113e4:	79fb      	ldrb	r3, [r7, #7]
 80113e6:	f023 0301 	bic.w	r3, r3, #1
 80113ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80113ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d01a      	beq.n	801142a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80113f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f6:	785b      	ldrb	r3, [r3, #1]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff fcf5 	bl	8010de8 <disk_status>
 80113fe:	4603      	mov	r3, r0
 8011400:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011404:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011408:	f003 0301 	and.w	r3, r3, #1
 801140c:	2b00      	cmp	r3, #0
 801140e:	d10c      	bne.n	801142a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d007      	beq.n	8011426 <find_volume+0x82>
 8011416:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801141a:	f003 0304 	and.w	r3, r3, #4
 801141e:	2b00      	cmp	r3, #0
 8011420:	d001      	beq.n	8011426 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011422:	230a      	movs	r3, #10
 8011424:	e251      	b.n	80118ca <find_volume+0x526>
			}
			return FR_OK;				/* The file system object is valid */
 8011426:	2300      	movs	r3, #0
 8011428:	e24f      	b.n	80118ca <find_volume+0x526>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801142a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801142c:	2200      	movs	r2, #0
 801142e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011430:	4a85      	ldr	r2, [pc, #532]	@ (8011648 <find_volume+0x2a4>)
 8011432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011434:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801143a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801143c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801143e:	785b      	ldrb	r3, [r3, #1]
 8011440:	4618      	mov	r0, r3
 8011442:	f7ff fceb 	bl	8010e1c <disk_initialize>
 8011446:	4603      	mov	r3, r0
 8011448:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801144c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011450:	f003 0301 	and.w	r3, r3, #1
 8011454:	2b00      	cmp	r3, #0
 8011456:	d001      	beq.n	801145c <find_volume+0xb8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011458:	2303      	movs	r3, #3
 801145a:	e236      	b.n	80118ca <find_volume+0x526>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801145c:	79fb      	ldrb	r3, [r7, #7]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d007      	beq.n	8011472 <find_volume+0xce>
 8011462:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011466:	f003 0304 	and.w	r3, r3, #4
 801146a:	2b00      	cmp	r3, #0
 801146c:	d001      	beq.n	8011472 <find_volume+0xce>
		return FR_WRITE_PROTECTED;
 801146e:	230a      	movs	r3, #10
 8011470:	e22b      	b.n	80118ca <find_volume+0x526>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011474:	7858      	ldrb	r0, [r3, #1]
 8011476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011478:	330c      	adds	r3, #12
 801147a:	461a      	mov	r2, r3
 801147c:	2102      	movs	r1, #2
 801147e:	f7ff fd35 	bl	8010eec <disk_ioctl>
 8011482:	4603      	mov	r3, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d001      	beq.n	801148c <find_volume+0xe8>
 8011488:	2301      	movs	r3, #1
 801148a:	e21e      	b.n	80118ca <find_volume+0x526>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801148c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801148e:	899b      	ldrh	r3, [r3, #12]
 8011490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011494:	d80d      	bhi.n	80114b2 <find_volume+0x10e>
 8011496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011498:	899b      	ldrh	r3, [r3, #12]
 801149a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801149e:	d308      	bcc.n	80114b2 <find_volume+0x10e>
 80114a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114a2:	899b      	ldrh	r3, [r3, #12]
 80114a4:	461a      	mov	r2, r3
 80114a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114a8:	899b      	ldrh	r3, [r3, #12]
 80114aa:	3b01      	subs	r3, #1
 80114ac:	4013      	ands	r3, r2
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d001      	beq.n	80114b6 <find_volume+0x112>
 80114b2:	2301      	movs	r3, #1
 80114b4:	e209      	b.n	80118ca <find_volume+0x526>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80114b6:	2300      	movs	r3, #0
 80114b8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80114ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80114bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80114be:	f7ff ff1b 	bl	80112f8 <check_fs>
 80114c2:	4603      	mov	r3, r0
 80114c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80114c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	d00a      	beq.n	80114e6 <find_volume+0x142>
 80114d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d85b      	bhi.n	8011590 <find_volume+0x1ec>
 80114d8:	4a5b      	ldr	r2, [pc, #364]	@ (8011648 <find_volume+0x2a4>)
 80114da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114dc:	005b      	lsls	r3, r3, #1
 80114de:	4413      	add	r3, r2
 80114e0:	785b      	ldrb	r3, [r3, #1]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d054      	beq.n	8011590 <find_volume+0x1ec>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80114e6:	2300      	movs	r3, #0
 80114e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80114ea:	e01e      	b.n	801152a <find_volume+0x186>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80114ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80114f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114f4:	011b      	lsls	r3, r3, #4
 80114f6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80114fa:	4413      	add	r3, r2
 80114fc:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80114fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011500:	3304      	adds	r3, #4
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d006      	beq.n	8011516 <find_volume+0x172>
 8011508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801150a:	3308      	adds	r3, #8
 801150c:	4618      	mov	r0, r3
 801150e:	f7ff fd23 	bl	8010f58 <ld_dword>
 8011512:	4602      	mov	r2, r0
 8011514:	e000      	b.n	8011518 <find_volume+0x174>
 8011516:	2200      	movs	r2, #0
 8011518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	3358      	adds	r3, #88	@ 0x58
 801151e:	443b      	add	r3, r7
 8011520:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011526:	3301      	adds	r3, #1
 8011528:	643b      	str	r3, [r7, #64]	@ 0x40
 801152a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801152c:	2b03      	cmp	r3, #3
 801152e:	d9dd      	bls.n	80114ec <find_volume+0x148>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011530:	4a45      	ldr	r2, [pc, #276]	@ (8011648 <find_volume+0x2a4>)
 8011532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011534:	005b      	lsls	r3, r3, #1
 8011536:	4413      	add	r3, r2
 8011538:	785b      	ldrb	r3, [r3, #1]
 801153a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801153c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801153e:	2b00      	cmp	r3, #0
 8011540:	d002      	beq.n	8011548 <find_volume+0x1a4>
 8011542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011544:	3b01      	subs	r3, #1
 8011546:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	3358      	adds	r3, #88	@ 0x58
 801154e:	443b      	add	r3, r7
 8011550:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011554:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011558:	2b00      	cmp	r3, #0
 801155a:	d005      	beq.n	8011568 <find_volume+0x1c4>
 801155c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801155e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011560:	f7ff feca 	bl	80112f8 <check_fs>
 8011564:	4603      	mov	r3, r0
 8011566:	e000      	b.n	801156a <find_volume+0x1c6>
 8011568:	2303      	movs	r3, #3
 801156a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801156e:	4a36      	ldr	r2, [pc, #216]	@ (8011648 <find_volume+0x2a4>)
 8011570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011572:	005b      	lsls	r3, r3, #1
 8011574:	4413      	add	r3, r2
 8011576:	785b      	ldrb	r3, [r3, #1]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d109      	bne.n	8011590 <find_volume+0x1ec>
 801157c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011580:	2b01      	cmp	r3, #1
 8011582:	d905      	bls.n	8011590 <find_volume+0x1ec>
 8011584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011586:	3301      	adds	r3, #1
 8011588:	643b      	str	r3, [r7, #64]	@ 0x40
 801158a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801158c:	2b03      	cmp	r3, #3
 801158e:	d9db      	bls.n	8011548 <find_volume+0x1a4>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011590:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011594:	2b04      	cmp	r3, #4
 8011596:	d101      	bne.n	801159c <find_volume+0x1f8>
 8011598:	2301      	movs	r3, #1
 801159a:	e196      	b.n	80118ca <find_volume+0x526>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801159c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d901      	bls.n	80115a8 <find_volume+0x204>
 80115a4:	230d      	movs	r3, #13
 80115a6:	e190      	b.n	80118ca <find_volume+0x526>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80115a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115aa:	3338      	adds	r3, #56	@ 0x38
 80115ac:	330b      	adds	r3, #11
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7ff fcba 	bl	8010f28 <ld_word>
 80115b4:	4603      	mov	r3, r0
 80115b6:	461a      	mov	r2, r3
 80115b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ba:	899b      	ldrh	r3, [r3, #12]
 80115bc:	429a      	cmp	r2, r3
 80115be:	d001      	beq.n	80115c4 <find_volume+0x220>
 80115c0:	230d      	movs	r3, #13
 80115c2:	e182      	b.n	80118ca <find_volume+0x526>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80115c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c6:	3338      	adds	r3, #56	@ 0x38
 80115c8:	3316      	adds	r3, #22
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff fcac 	bl	8010f28 <ld_word>
 80115d0:	4603      	mov	r3, r0
 80115d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80115d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d106      	bne.n	80115e8 <find_volume+0x244>
 80115da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115dc:	3338      	adds	r3, #56	@ 0x38
 80115de:	3324      	adds	r3, #36	@ 0x24
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff fcb9 	bl	8010f58 <ld_dword>
 80115e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80115e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80115ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115f0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80115f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80115f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115fa:	789b      	ldrb	r3, [r3, #2]
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d005      	beq.n	801160c <find_volume+0x268>
 8011600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011602:	789b      	ldrb	r3, [r3, #2]
 8011604:	2b02      	cmp	r3, #2
 8011606:	d001      	beq.n	801160c <find_volume+0x268>
 8011608:	230d      	movs	r3, #13
 801160a:	e15e      	b.n	80118ca <find_volume+0x526>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801160c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160e:	789b      	ldrb	r3, [r3, #2]
 8011610:	461a      	mov	r2, r3
 8011612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011614:	fb02 f303 	mul.w	r3, r2, r3
 8011618:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801161a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011620:	461a      	mov	r2, r3
 8011622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011624:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011628:	895b      	ldrh	r3, [r3, #10]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d008      	beq.n	8011640 <find_volume+0x29c>
 801162e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011630:	895b      	ldrh	r3, [r3, #10]
 8011632:	461a      	mov	r2, r3
 8011634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011636:	895b      	ldrh	r3, [r3, #10]
 8011638:	3b01      	subs	r3, #1
 801163a:	4013      	ands	r3, r2
 801163c:	2b00      	cmp	r3, #0
 801163e:	d005      	beq.n	801164c <find_volume+0x2a8>
 8011640:	230d      	movs	r3, #13
 8011642:	e142      	b.n	80118ca <find_volume+0x526>
 8011644:	24001834 	.word	0x24001834
 8011648:	24001828 	.word	0x24001828

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801164c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164e:	3338      	adds	r3, #56	@ 0x38
 8011650:	3311      	adds	r3, #17
 8011652:	4618      	mov	r0, r3
 8011654:	f7ff fc68 	bl	8010f28 <ld_word>
 8011658:	4603      	mov	r3, r0
 801165a:	461a      	mov	r2, r3
 801165c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011662:	891b      	ldrh	r3, [r3, #8]
 8011664:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011666:	8992      	ldrh	r2, [r2, #12]
 8011668:	0952      	lsrs	r2, r2, #5
 801166a:	b292      	uxth	r2, r2
 801166c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011670:	fb01 f202 	mul.w	r2, r1, r2
 8011674:	1a9b      	subs	r3, r3, r2
 8011676:	b29b      	uxth	r3, r3
 8011678:	2b00      	cmp	r3, #0
 801167a:	d001      	beq.n	8011680 <find_volume+0x2dc>
 801167c:	230d      	movs	r3, #13
 801167e:	e124      	b.n	80118ca <find_volume+0x526>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011682:	3338      	adds	r3, #56	@ 0x38
 8011684:	3313      	adds	r3, #19
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff fc4e 	bl	8010f28 <ld_word>
 801168c:	4603      	mov	r3, r0
 801168e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011690:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011692:	2b00      	cmp	r3, #0
 8011694:	d106      	bne.n	80116a4 <find_volume+0x300>
 8011696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011698:	3338      	adds	r3, #56	@ 0x38
 801169a:	3320      	adds	r3, #32
 801169c:	4618      	mov	r0, r3
 801169e:	f7ff fc5b 	bl	8010f58 <ld_dword>
 80116a2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80116a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a6:	3338      	adds	r3, #56	@ 0x38
 80116a8:	330e      	adds	r3, #14
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7ff fc3c 	bl	8010f28 <ld_word>
 80116b0:	4603      	mov	r3, r0
 80116b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80116b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d101      	bne.n	80116be <find_volume+0x31a>
 80116ba:	230d      	movs	r3, #13
 80116bc:	e105      	b.n	80118ca <find_volume+0x526>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80116be:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80116c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116c2:	4413      	add	r3, r2
 80116c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116c6:	8911      	ldrh	r1, [r2, #8]
 80116c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116ca:	8992      	ldrh	r2, [r2, #12]
 80116cc:	0952      	lsrs	r2, r2, #5
 80116ce:	b292      	uxth	r2, r2
 80116d0:	fbb1 f2f2 	udiv	r2, r1, r2
 80116d4:	b292      	uxth	r2, r2
 80116d6:	4413      	add	r3, r2
 80116d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80116da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116de:	429a      	cmp	r2, r3
 80116e0:	d201      	bcs.n	80116e6 <find_volume+0x342>
 80116e2:	230d      	movs	r3, #13
 80116e4:	e0f1      	b.n	80118ca <find_volume+0x526>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80116e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ea:	1ad3      	subs	r3, r2, r3
 80116ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116ee:	8952      	ldrh	r2, [r2, #10]
 80116f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80116f4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80116f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d101      	bne.n	8011700 <find_volume+0x35c>
 80116fc:	230d      	movs	r3, #13
 80116fe:	e0e4      	b.n	80118ca <find_volume+0x526>
		fmt = FS_FAT32;
 8011700:	2303      	movs	r3, #3
 8011702:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011708:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801170c:	4293      	cmp	r3, r2
 801170e:	d802      	bhi.n	8011716 <find_volume+0x372>
 8011710:	2302      	movs	r3, #2
 8011712:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011718:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801171c:	4293      	cmp	r3, r2
 801171e:	d802      	bhi.n	8011726 <find_volume+0x382>
 8011720:	2301      	movs	r3, #1
 8011722:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011728:	1c9a      	adds	r2, r3, #2
 801172a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801172c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801172e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011730:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011732:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011734:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011738:	441a      	add	r2, r3
 801173a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801173c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801173e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011742:	441a      	add	r2, r3
 8011744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011746:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8011748:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801174c:	2b03      	cmp	r3, #3
 801174e:	d11e      	bne.n	801178e <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011752:	3338      	adds	r3, #56	@ 0x38
 8011754:	332a      	adds	r3, #42	@ 0x2a
 8011756:	4618      	mov	r0, r3
 8011758:	f7ff fbe6 	bl	8010f28 <ld_word>
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d001      	beq.n	8011766 <find_volume+0x3c2>
 8011762:	230d      	movs	r3, #13
 8011764:	e0b1      	b.n	80118ca <find_volume+0x526>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011768:	891b      	ldrh	r3, [r3, #8]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d001      	beq.n	8011772 <find_volume+0x3ce>
 801176e:	230d      	movs	r3, #13
 8011770:	e0ab      	b.n	80118ca <find_volume+0x526>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011774:	3338      	adds	r3, #56	@ 0x38
 8011776:	332c      	adds	r3, #44	@ 0x2c
 8011778:	4618      	mov	r0, r3
 801177a:	f7ff fbed 	bl	8010f58 <ld_dword>
 801177e:	4602      	mov	r2, r0
 8011780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011782:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011786:	69db      	ldr	r3, [r3, #28]
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	647b      	str	r3, [r7, #68]	@ 0x44
 801178c:	e01f      	b.n	80117ce <find_volume+0x42a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801178e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011790:	891b      	ldrh	r3, [r3, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d101      	bne.n	801179a <find_volume+0x3f6>
 8011796:	230d      	movs	r3, #13
 8011798:	e097      	b.n	80118ca <find_volume+0x526>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801179a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801179c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801179e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117a0:	441a      	add	r2, r3
 80117a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80117a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80117aa:	2b02      	cmp	r3, #2
 80117ac:	d103      	bne.n	80117b6 <find_volume+0x412>
 80117ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b0:	69db      	ldr	r3, [r3, #28]
 80117b2:	005b      	lsls	r3, r3, #1
 80117b4:	e00a      	b.n	80117cc <find_volume+0x428>
 80117b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b8:	69da      	ldr	r2, [r3, #28]
 80117ba:	4613      	mov	r3, r2
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	4413      	add	r3, r2
 80117c0:	085a      	lsrs	r2, r3, #1
 80117c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c4:	69db      	ldr	r3, [r3, #28]
 80117c6:	f003 0301 	and.w	r3, r3, #1
 80117ca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80117cc:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80117ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d0:	6a1a      	ldr	r2, [r3, #32]
 80117d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	4619      	mov	r1, r3
 80117d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117da:	440b      	add	r3, r1
 80117dc:	3b01      	subs	r3, #1
 80117de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80117e0:	8989      	ldrh	r1, [r1, #12]
 80117e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d201      	bcs.n	80117ee <find_volume+0x44a>
 80117ea:	230d      	movs	r3, #13
 80117ec:	e06d      	b.n	80118ca <find_volume+0x526>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80117ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80117f4:	619a      	str	r2, [r3, #24]
 80117f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f8:	699a      	ldr	r2, [r3, #24]
 80117fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80117fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011800:	2280      	movs	r2, #128	@ 0x80
 8011802:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011804:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011808:	2b03      	cmp	r3, #3
 801180a:	d149      	bne.n	80118a0 <find_volume+0x4fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801180c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801180e:	3338      	adds	r3, #56	@ 0x38
 8011810:	3330      	adds	r3, #48	@ 0x30
 8011812:	4618      	mov	r0, r3
 8011814:	f7ff fb88 	bl	8010f28 <ld_word>
 8011818:	4603      	mov	r3, r0
 801181a:	2b01      	cmp	r3, #1
 801181c:	d140      	bne.n	80118a0 <find_volume+0x4fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 801181e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011820:	3301      	adds	r3, #1
 8011822:	4619      	mov	r1, r3
 8011824:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011826:	f7ff fc23 	bl	8011070 <move_window>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	d137      	bne.n	80118a0 <find_volume+0x4fc>
		{
			fs->fsi_flag = 0;
 8011830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011832:	2200      	movs	r2, #0
 8011834:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011838:	3338      	adds	r3, #56	@ 0x38
 801183a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801183e:	4618      	mov	r0, r3
 8011840:	f7ff fb72 	bl	8010f28 <ld_word>
 8011844:	4603      	mov	r3, r0
 8011846:	461a      	mov	r2, r3
 8011848:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801184c:	429a      	cmp	r2, r3
 801184e:	d127      	bne.n	80118a0 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011852:	3338      	adds	r3, #56	@ 0x38
 8011854:	4618      	mov	r0, r3
 8011856:	f7ff fb7f 	bl	8010f58 <ld_dword>
 801185a:	4603      	mov	r3, r0
 801185c:	4a1d      	ldr	r2, [pc, #116]	@ (80118d4 <find_volume+0x530>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d11e      	bne.n	80118a0 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011864:	3338      	adds	r3, #56	@ 0x38
 8011866:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801186a:	4618      	mov	r0, r3
 801186c:	f7ff fb74 	bl	8010f58 <ld_dword>
 8011870:	4603      	mov	r3, r0
 8011872:	4a19      	ldr	r2, [pc, #100]	@ (80118d8 <find_volume+0x534>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d113      	bne.n	80118a0 <find_volume+0x4fc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187a:	3338      	adds	r3, #56	@ 0x38
 801187c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff fb69 	bl	8010f58 <ld_dword>
 8011886:	4602      	mov	r2, r0
 8011888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801188c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188e:	3338      	adds	r3, #56	@ 0x38
 8011890:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011894:	4618      	mov	r0, r3
 8011896:	f7ff fb5f 	bl	8010f58 <ld_dword>
 801189a:	4602      	mov	r2, r0
 801189c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801189e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80118a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80118a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80118a8:	4b0c      	ldr	r3, [pc, #48]	@ (80118dc <find_volume+0x538>)
 80118aa:	881b      	ldrh	r3, [r3, #0]
 80118ac:	3301      	adds	r3, #1
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	4b0a      	ldr	r3, [pc, #40]	@ (80118dc <find_volume+0x538>)
 80118b2:	801a      	strh	r2, [r3, #0]
 80118b4:	4b09      	ldr	r3, [pc, #36]	@ (80118dc <find_volume+0x538>)
 80118b6:	881a      	ldrh	r2, [r3, #0]
 80118b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ba:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80118bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118be:	4a08      	ldr	r2, [pc, #32]	@ (80118e0 <find_volume+0x53c>)
 80118c0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80118c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80118c4:	f7ff fb6c 	bl	8010fa0 <clear_lock>
#endif
	return FR_OK;
 80118c8:	2300      	movs	r3, #0
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3758      	adds	r7, #88	@ 0x58
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	41615252 	.word	0x41615252
 80118d8:	61417272 	.word	0x61417272
 80118dc:	24001838 	.word	0x24001838
 80118e0:	2400185c 	.word	0x2400185c

080118e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b088      	sub	sp, #32
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	4613      	mov	r3, r2
 80118f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80118f6:	f107 0310 	add.w	r3, r7, #16
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7ff fcb8 	bl	8011270 <get_ldnumber>
 8011900:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011902:	69fb      	ldr	r3, [r7, #28]
 8011904:	2b00      	cmp	r3, #0
 8011906:	da01      	bge.n	801190c <f_mount+0x28>
 8011908:	230b      	movs	r3, #11
 801190a:	e02b      	b.n	8011964 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801190c:	4a17      	ldr	r2, [pc, #92]	@ (801196c <f_mount+0x88>)
 801190e:	69fb      	ldr	r3, [r7, #28]
 8011910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011914:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d005      	beq.n	8011928 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801191c:	69b8      	ldr	r0, [r7, #24]
 801191e:	f7ff fb3f 	bl	8010fa0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	2200      	movs	r2, #0
 8011926:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d002      	beq.n	8011934 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2200      	movs	r2, #0
 8011932:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011934:	68fa      	ldr	r2, [r7, #12]
 8011936:	490d      	ldr	r1, [pc, #52]	@ (801196c <f_mount+0x88>)
 8011938:	69fb      	ldr	r3, [r7, #28]
 801193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d002      	beq.n	801194a <f_mount+0x66>
 8011944:	79fb      	ldrb	r3, [r7, #7]
 8011946:	2b01      	cmp	r3, #1
 8011948:	d001      	beq.n	801194e <f_mount+0x6a>
 801194a:	2300      	movs	r3, #0
 801194c:	e00a      	b.n	8011964 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801194e:	f107 010c 	add.w	r1, r7, #12
 8011952:	f107 0308 	add.w	r3, r7, #8
 8011956:	2200      	movs	r2, #0
 8011958:	4618      	mov	r0, r3
 801195a:	f7ff fd23 	bl	80113a4 <find_volume>
 801195e:	4603      	mov	r3, r0
 8011960:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011962:	7dfb      	ldrb	r3, [r7, #23]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3720      	adds	r7, #32
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	24001834 	.word	0x24001834

08011970 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b092      	sub	sp, #72	@ 0x48
 8011974:	af00      	add	r7, sp, #0
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801197c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011980:	f107 030c 	add.w	r3, r7, #12
 8011984:	2200      	movs	r2, #0
 8011986:	4618      	mov	r0, r3
 8011988:	f7ff fd0c 	bl	80113a4 <find_volume>
 801198c:	4603      	mov	r3, r0
 801198e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8011992:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011996:	2b00      	cmp	r3, #0
 8011998:	f040 8099 	bne.w	8011ace <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801199c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80119a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119a4:	699a      	ldr	r2, [r3, #24]
 80119a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119a8:	69db      	ldr	r3, [r3, #28]
 80119aa:	3b02      	subs	r3, #2
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d804      	bhi.n	80119ba <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80119b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119b2:	699a      	ldr	r2, [r3, #24]
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	601a      	str	r2, [r3, #0]
 80119b8:	e089      	b.n	8011ace <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80119ba:	2300      	movs	r3, #0
 80119bc:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80119be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d128      	bne.n	8011a18 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80119c6:	2302      	movs	r3, #2
 80119c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80119ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119cc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80119ce:	f107 0314 	add.w	r3, r7, #20
 80119d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7ff fb78 	bl	80110ca <get_fat>
 80119da:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80119dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80119e2:	d103      	bne.n	80119ec <f_getfree+0x7c>
 80119e4:	2301      	movs	r3, #1
 80119e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80119ea:	e063      	b.n	8011ab4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80119ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d103      	bne.n	80119fa <f_getfree+0x8a>
 80119f2:	2302      	movs	r3, #2
 80119f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80119f8:	e05c      	b.n	8011ab4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80119fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d102      	bne.n	8011a06 <f_getfree+0x96>
 8011a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a02:	3301      	adds	r3, #1
 8011a04:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8011a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a08:	3301      	adds	r3, #1
 8011a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a0e:	69db      	ldr	r3, [r3, #28]
 8011a10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d3db      	bcc.n	80119ce <f_getfree+0x5e>
 8011a16:	e04d      	b.n	8011ab4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a1a:	69db      	ldr	r3, [r3, #28]
 8011a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a22:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8011a24:	2300      	movs	r3, #0
 8011a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a28:	2300      	movs	r3, #0
 8011a2a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8011a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d113      	bne.n	8011a5a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8011a32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a36:	1c5a      	adds	r2, r3, #1
 8011a38:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	f7ff fb18 	bl	8011070 <move_window>
 8011a40:	4603      	mov	r3, r0
 8011a42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8011a46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d131      	bne.n	8011ab2 <f_getfree+0x142>
							p = fs->win;
 8011a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a50:	3338      	adds	r3, #56	@ 0x38
 8011a52:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8011a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a56:	899b      	ldrh	r3, [r3, #12]
 8011a58:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8011a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	d10f      	bne.n	8011a82 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8011a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a64:	f7ff fa60 	bl	8010f28 <ld_word>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d102      	bne.n	8011a74 <f_getfree+0x104>
 8011a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a70:	3301      	adds	r3, #1
 8011a72:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8011a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a76:	3302      	adds	r3, #2
 8011a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a7c:	3b02      	subs	r3, #2
 8011a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a80:	e010      	b.n	8011aa4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011a82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a84:	f7ff fa68 	bl	8010f58 <ld_dword>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d102      	bne.n	8011a98 <f_getfree+0x128>
 8011a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a94:	3301      	adds	r3, #1
 8011a96:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8011a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aa0:	3b04      	subs	r3, #4
 8011aa2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8011aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d1bd      	bne.n	8011a2c <f_getfree+0xbc>
 8011ab0:	e000      	b.n	8011ab4 <f_getfree+0x144>
							if (res != FR_OK) break;
 8011ab2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011ab8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8011aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011abc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011abe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac2:	791a      	ldrb	r2, [r3, #4]
 8011ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac6:	f042 0201 	orr.w	r2, r2, #1
 8011aca:	b2d2      	uxtb	r2, r2
 8011acc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011ace:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3748      	adds	r7, #72	@ 0x48
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
	...

08011adc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b087      	sub	sp, #28
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011aea:	2301      	movs	r3, #1
 8011aec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011aee:	2300      	movs	r3, #0
 8011af0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011af2:	4b1f      	ldr	r3, [pc, #124]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011af4:	7a5b      	ldrb	r3, [r3, #9]
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d131      	bne.n	8011b60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011afc:	4b1c      	ldr	r3, [pc, #112]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011afe:	7a5b      	ldrb	r3, [r3, #9]
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	461a      	mov	r2, r3
 8011b04:	4b1a      	ldr	r3, [pc, #104]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011b06:	2100      	movs	r1, #0
 8011b08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011b0a:	4b19      	ldr	r3, [pc, #100]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011b0c:	7a5b      	ldrb	r3, [r3, #9]
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	4a17      	ldr	r2, [pc, #92]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	4413      	add	r3, r2
 8011b16:	68fa      	ldr	r2, [r7, #12]
 8011b18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011b1a:	4b15      	ldr	r3, [pc, #84]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011b1c:	7a5b      	ldrb	r3, [r3, #9]
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	461a      	mov	r2, r3
 8011b22:	4b13      	ldr	r3, [pc, #76]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011b24:	4413      	add	r3, r2
 8011b26:	79fa      	ldrb	r2, [r7, #7]
 8011b28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011b2a:	4b11      	ldr	r3, [pc, #68]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011b2c:	7a5b      	ldrb	r3, [r3, #9]
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	1c5a      	adds	r2, r3, #1
 8011b32:	b2d1      	uxtb	r1, r2
 8011b34:	4a0e      	ldr	r2, [pc, #56]	@ (8011b70 <FATFS_LinkDriverEx+0x94>)
 8011b36:	7251      	strb	r1, [r2, #9]
 8011b38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011b3a:	7dbb      	ldrb	r3, [r7, #22]
 8011b3c:	3330      	adds	r3, #48	@ 0x30
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	3301      	adds	r3, #1
 8011b48:	223a      	movs	r2, #58	@ 0x3a
 8011b4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	3302      	adds	r3, #2
 8011b50:	222f      	movs	r2, #47	@ 0x2f
 8011b52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	3303      	adds	r3, #3
 8011b58:	2200      	movs	r2, #0
 8011b5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	371c      	adds	r7, #28
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop
 8011b70:	24001a5c 	.word	0x24001a5c

08011b74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b082      	sub	sp, #8
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011b7e:	2200      	movs	r2, #0
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7ff ffaa 	bl	8011adc <FATFS_LinkDriverEx>
 8011b88:	4603      	mov	r3, r0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3708      	adds	r7, #8
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}
	...

08011b94 <siprintf>:
 8011b94:	b40e      	push	{r1, r2, r3}
 8011b96:	b500      	push	{lr}
 8011b98:	b09c      	sub	sp, #112	@ 0x70
 8011b9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8011b9c:	9002      	str	r0, [sp, #8]
 8011b9e:	9006      	str	r0, [sp, #24]
 8011ba0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011ba4:	4809      	ldr	r0, [pc, #36]	@ (8011bcc <siprintf+0x38>)
 8011ba6:	9107      	str	r1, [sp, #28]
 8011ba8:	9104      	str	r1, [sp, #16]
 8011baa:	4909      	ldr	r1, [pc, #36]	@ (8011bd0 <siprintf+0x3c>)
 8011bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bb0:	9105      	str	r1, [sp, #20]
 8011bb2:	6800      	ldr	r0, [r0, #0]
 8011bb4:	9301      	str	r3, [sp, #4]
 8011bb6:	a902      	add	r1, sp, #8
 8011bb8:	f000 f8aa 	bl	8011d10 <_svfiprintf_r>
 8011bbc:	9b02      	ldr	r3, [sp, #8]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	701a      	strb	r2, [r3, #0]
 8011bc2:	b01c      	add	sp, #112	@ 0x70
 8011bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bc8:	b003      	add	sp, #12
 8011bca:	4770      	bx	lr
 8011bcc:	24000020 	.word	0x24000020
 8011bd0:	ffff0208 	.word	0xffff0208

08011bd4 <memset>:
 8011bd4:	4402      	add	r2, r0
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d100      	bne.n	8011bde <memset+0xa>
 8011bdc:	4770      	bx	lr
 8011bde:	f803 1b01 	strb.w	r1, [r3], #1
 8011be2:	e7f9      	b.n	8011bd8 <memset+0x4>

08011be4 <__errno>:
 8011be4:	4b01      	ldr	r3, [pc, #4]	@ (8011bec <__errno+0x8>)
 8011be6:	6818      	ldr	r0, [r3, #0]
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop
 8011bec:	24000020 	.word	0x24000020

08011bf0 <__libc_init_array>:
 8011bf0:	b570      	push	{r4, r5, r6, lr}
 8011bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8011c28 <__libc_init_array+0x38>)
 8011bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8011c2c <__libc_init_array+0x3c>)
 8011bf6:	1b64      	subs	r4, r4, r5
 8011bf8:	10a4      	asrs	r4, r4, #2
 8011bfa:	2600      	movs	r6, #0
 8011bfc:	42a6      	cmp	r6, r4
 8011bfe:	d109      	bne.n	8011c14 <__libc_init_array+0x24>
 8011c00:	4d0b      	ldr	r5, [pc, #44]	@ (8011c30 <__libc_init_array+0x40>)
 8011c02:	4c0c      	ldr	r4, [pc, #48]	@ (8011c34 <__libc_init_array+0x44>)
 8011c04:	f000 fc66 	bl	80124d4 <_init>
 8011c08:	1b64      	subs	r4, r4, r5
 8011c0a:	10a4      	asrs	r4, r4, #2
 8011c0c:	2600      	movs	r6, #0
 8011c0e:	42a6      	cmp	r6, r4
 8011c10:	d105      	bne.n	8011c1e <__libc_init_array+0x2e>
 8011c12:	bd70      	pop	{r4, r5, r6, pc}
 8011c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c18:	4798      	blx	r3
 8011c1a:	3601      	adds	r6, #1
 8011c1c:	e7ee      	b.n	8011bfc <__libc_init_array+0xc>
 8011c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c22:	4798      	blx	r3
 8011c24:	3601      	adds	r6, #1
 8011c26:	e7f2      	b.n	8011c0e <__libc_init_array+0x1e>
 8011c28:	080129c4 	.word	0x080129c4
 8011c2c:	080129c4 	.word	0x080129c4
 8011c30:	080129c4 	.word	0x080129c4
 8011c34:	080129c8 	.word	0x080129c8

08011c38 <__retarget_lock_acquire_recursive>:
 8011c38:	4770      	bx	lr

08011c3a <__retarget_lock_release_recursive>:
 8011c3a:	4770      	bx	lr

08011c3c <memcpy>:
 8011c3c:	440a      	add	r2, r1
 8011c3e:	4291      	cmp	r1, r2
 8011c40:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011c44:	d100      	bne.n	8011c48 <memcpy+0xc>
 8011c46:	4770      	bx	lr
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c52:	4291      	cmp	r1, r2
 8011c54:	d1f9      	bne.n	8011c4a <memcpy+0xe>
 8011c56:	bd10      	pop	{r4, pc}

08011c58 <__ssputs_r>:
 8011c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c5c:	688e      	ldr	r6, [r1, #8]
 8011c5e:	461f      	mov	r7, r3
 8011c60:	42be      	cmp	r6, r7
 8011c62:	680b      	ldr	r3, [r1, #0]
 8011c64:	4682      	mov	sl, r0
 8011c66:	460c      	mov	r4, r1
 8011c68:	4690      	mov	r8, r2
 8011c6a:	d82d      	bhi.n	8011cc8 <__ssputs_r+0x70>
 8011c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c74:	d026      	beq.n	8011cc4 <__ssputs_r+0x6c>
 8011c76:	6965      	ldr	r5, [r4, #20]
 8011c78:	6909      	ldr	r1, [r1, #16]
 8011c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c7e:	eba3 0901 	sub.w	r9, r3, r1
 8011c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c86:	1c7b      	adds	r3, r7, #1
 8011c88:	444b      	add	r3, r9
 8011c8a:	106d      	asrs	r5, r5, #1
 8011c8c:	429d      	cmp	r5, r3
 8011c8e:	bf38      	it	cc
 8011c90:	461d      	movcc	r5, r3
 8011c92:	0553      	lsls	r3, r2, #21
 8011c94:	d527      	bpl.n	8011ce6 <__ssputs_r+0x8e>
 8011c96:	4629      	mov	r1, r5
 8011c98:	f000 f958 	bl	8011f4c <_malloc_r>
 8011c9c:	4606      	mov	r6, r0
 8011c9e:	b360      	cbz	r0, 8011cfa <__ssputs_r+0xa2>
 8011ca0:	6921      	ldr	r1, [r4, #16]
 8011ca2:	464a      	mov	r2, r9
 8011ca4:	f7ff ffca 	bl	8011c3c <memcpy>
 8011ca8:	89a3      	ldrh	r3, [r4, #12]
 8011caa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cb2:	81a3      	strh	r3, [r4, #12]
 8011cb4:	6126      	str	r6, [r4, #16]
 8011cb6:	6165      	str	r5, [r4, #20]
 8011cb8:	444e      	add	r6, r9
 8011cba:	eba5 0509 	sub.w	r5, r5, r9
 8011cbe:	6026      	str	r6, [r4, #0]
 8011cc0:	60a5      	str	r5, [r4, #8]
 8011cc2:	463e      	mov	r6, r7
 8011cc4:	42be      	cmp	r6, r7
 8011cc6:	d900      	bls.n	8011cca <__ssputs_r+0x72>
 8011cc8:	463e      	mov	r6, r7
 8011cca:	6820      	ldr	r0, [r4, #0]
 8011ccc:	4632      	mov	r2, r6
 8011cce:	4641      	mov	r1, r8
 8011cd0:	f000 fb84 	bl	80123dc <memmove>
 8011cd4:	68a3      	ldr	r3, [r4, #8]
 8011cd6:	1b9b      	subs	r3, r3, r6
 8011cd8:	60a3      	str	r3, [r4, #8]
 8011cda:	6823      	ldr	r3, [r4, #0]
 8011cdc:	4433      	add	r3, r6
 8011cde:	6023      	str	r3, [r4, #0]
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce6:	462a      	mov	r2, r5
 8011ce8:	f000 fb4a 	bl	8012380 <_realloc_r>
 8011cec:	4606      	mov	r6, r0
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	d1e0      	bne.n	8011cb4 <__ssputs_r+0x5c>
 8011cf2:	6921      	ldr	r1, [r4, #16]
 8011cf4:	4650      	mov	r0, sl
 8011cf6:	f000 fb9b 	bl	8012430 <_free_r>
 8011cfa:	230c      	movs	r3, #12
 8011cfc:	f8ca 3000 	str.w	r3, [sl]
 8011d00:	89a3      	ldrh	r3, [r4, #12]
 8011d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d06:	81a3      	strh	r3, [r4, #12]
 8011d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d0c:	e7e9      	b.n	8011ce2 <__ssputs_r+0x8a>
	...

08011d10 <_svfiprintf_r>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	4698      	mov	r8, r3
 8011d16:	898b      	ldrh	r3, [r1, #12]
 8011d18:	061b      	lsls	r3, r3, #24
 8011d1a:	b09d      	sub	sp, #116	@ 0x74
 8011d1c:	4607      	mov	r7, r0
 8011d1e:	460d      	mov	r5, r1
 8011d20:	4614      	mov	r4, r2
 8011d22:	d510      	bpl.n	8011d46 <_svfiprintf_r+0x36>
 8011d24:	690b      	ldr	r3, [r1, #16]
 8011d26:	b973      	cbnz	r3, 8011d46 <_svfiprintf_r+0x36>
 8011d28:	2140      	movs	r1, #64	@ 0x40
 8011d2a:	f000 f90f 	bl	8011f4c <_malloc_r>
 8011d2e:	6028      	str	r0, [r5, #0]
 8011d30:	6128      	str	r0, [r5, #16]
 8011d32:	b930      	cbnz	r0, 8011d42 <_svfiprintf_r+0x32>
 8011d34:	230c      	movs	r3, #12
 8011d36:	603b      	str	r3, [r7, #0]
 8011d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d3c:	b01d      	add	sp, #116	@ 0x74
 8011d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d42:	2340      	movs	r3, #64	@ 0x40
 8011d44:	616b      	str	r3, [r5, #20]
 8011d46:	2300      	movs	r3, #0
 8011d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d4a:	2320      	movs	r3, #32
 8011d4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d54:	2330      	movs	r3, #48	@ 0x30
 8011d56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011ef4 <_svfiprintf_r+0x1e4>
 8011d5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d5e:	f04f 0901 	mov.w	r9, #1
 8011d62:	4623      	mov	r3, r4
 8011d64:	469a      	mov	sl, r3
 8011d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d6a:	b10a      	cbz	r2, 8011d70 <_svfiprintf_r+0x60>
 8011d6c:	2a25      	cmp	r2, #37	@ 0x25
 8011d6e:	d1f9      	bne.n	8011d64 <_svfiprintf_r+0x54>
 8011d70:	ebba 0b04 	subs.w	fp, sl, r4
 8011d74:	d00b      	beq.n	8011d8e <_svfiprintf_r+0x7e>
 8011d76:	465b      	mov	r3, fp
 8011d78:	4622      	mov	r2, r4
 8011d7a:	4629      	mov	r1, r5
 8011d7c:	4638      	mov	r0, r7
 8011d7e:	f7ff ff6b 	bl	8011c58 <__ssputs_r>
 8011d82:	3001      	adds	r0, #1
 8011d84:	f000 80a7 	beq.w	8011ed6 <_svfiprintf_r+0x1c6>
 8011d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d8a:	445a      	add	r2, fp
 8011d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	f000 809f 	beq.w	8011ed6 <_svfiprintf_r+0x1c6>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011da2:	f10a 0a01 	add.w	sl, sl, #1
 8011da6:	9304      	str	r3, [sp, #16]
 8011da8:	9307      	str	r3, [sp, #28]
 8011daa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8011db0:	4654      	mov	r4, sl
 8011db2:	2205      	movs	r2, #5
 8011db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011db8:	484e      	ldr	r0, [pc, #312]	@ (8011ef4 <_svfiprintf_r+0x1e4>)
 8011dba:	f7ee fab1 	bl	8000320 <memchr>
 8011dbe:	9a04      	ldr	r2, [sp, #16]
 8011dc0:	b9d8      	cbnz	r0, 8011dfa <_svfiprintf_r+0xea>
 8011dc2:	06d0      	lsls	r0, r2, #27
 8011dc4:	bf44      	itt	mi
 8011dc6:	2320      	movmi	r3, #32
 8011dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dcc:	0711      	lsls	r1, r2, #28
 8011dce:	bf44      	itt	mi
 8011dd0:	232b      	movmi	r3, #43	@ 0x2b
 8011dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8011dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ddc:	d015      	beq.n	8011e0a <_svfiprintf_r+0xfa>
 8011dde:	9a07      	ldr	r2, [sp, #28]
 8011de0:	4654      	mov	r4, sl
 8011de2:	2000      	movs	r0, #0
 8011de4:	f04f 0c0a 	mov.w	ip, #10
 8011de8:	4621      	mov	r1, r4
 8011dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dee:	3b30      	subs	r3, #48	@ 0x30
 8011df0:	2b09      	cmp	r3, #9
 8011df2:	d94b      	bls.n	8011e8c <_svfiprintf_r+0x17c>
 8011df4:	b1b0      	cbz	r0, 8011e24 <_svfiprintf_r+0x114>
 8011df6:	9207      	str	r2, [sp, #28]
 8011df8:	e014      	b.n	8011e24 <_svfiprintf_r+0x114>
 8011dfa:	eba0 0308 	sub.w	r3, r0, r8
 8011dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8011e02:	4313      	orrs	r3, r2
 8011e04:	9304      	str	r3, [sp, #16]
 8011e06:	46a2      	mov	sl, r4
 8011e08:	e7d2      	b.n	8011db0 <_svfiprintf_r+0xa0>
 8011e0a:	9b03      	ldr	r3, [sp, #12]
 8011e0c:	1d19      	adds	r1, r3, #4
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	9103      	str	r1, [sp, #12]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	bfbb      	ittet	lt
 8011e16:	425b      	neglt	r3, r3
 8011e18:	f042 0202 	orrlt.w	r2, r2, #2
 8011e1c:	9307      	strge	r3, [sp, #28]
 8011e1e:	9307      	strlt	r3, [sp, #28]
 8011e20:	bfb8      	it	lt
 8011e22:	9204      	strlt	r2, [sp, #16]
 8011e24:	7823      	ldrb	r3, [r4, #0]
 8011e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e28:	d10a      	bne.n	8011e40 <_svfiprintf_r+0x130>
 8011e2a:	7863      	ldrb	r3, [r4, #1]
 8011e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e2e:	d132      	bne.n	8011e96 <_svfiprintf_r+0x186>
 8011e30:	9b03      	ldr	r3, [sp, #12]
 8011e32:	1d1a      	adds	r2, r3, #4
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	9203      	str	r2, [sp, #12]
 8011e38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e3c:	3402      	adds	r4, #2
 8011e3e:	9305      	str	r3, [sp, #20]
 8011e40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011f04 <_svfiprintf_r+0x1f4>
 8011e44:	7821      	ldrb	r1, [r4, #0]
 8011e46:	2203      	movs	r2, #3
 8011e48:	4650      	mov	r0, sl
 8011e4a:	f7ee fa69 	bl	8000320 <memchr>
 8011e4e:	b138      	cbz	r0, 8011e60 <_svfiprintf_r+0x150>
 8011e50:	9b04      	ldr	r3, [sp, #16]
 8011e52:	eba0 000a 	sub.w	r0, r0, sl
 8011e56:	2240      	movs	r2, #64	@ 0x40
 8011e58:	4082      	lsls	r2, r0
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	3401      	adds	r4, #1
 8011e5e:	9304      	str	r3, [sp, #16]
 8011e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e64:	4824      	ldr	r0, [pc, #144]	@ (8011ef8 <_svfiprintf_r+0x1e8>)
 8011e66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e6a:	2206      	movs	r2, #6
 8011e6c:	f7ee fa58 	bl	8000320 <memchr>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	d036      	beq.n	8011ee2 <_svfiprintf_r+0x1d2>
 8011e74:	4b21      	ldr	r3, [pc, #132]	@ (8011efc <_svfiprintf_r+0x1ec>)
 8011e76:	bb1b      	cbnz	r3, 8011ec0 <_svfiprintf_r+0x1b0>
 8011e78:	9b03      	ldr	r3, [sp, #12]
 8011e7a:	3307      	adds	r3, #7
 8011e7c:	f023 0307 	bic.w	r3, r3, #7
 8011e80:	3308      	adds	r3, #8
 8011e82:	9303      	str	r3, [sp, #12]
 8011e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e86:	4433      	add	r3, r6
 8011e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e8a:	e76a      	b.n	8011d62 <_svfiprintf_r+0x52>
 8011e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e90:	460c      	mov	r4, r1
 8011e92:	2001      	movs	r0, #1
 8011e94:	e7a8      	b.n	8011de8 <_svfiprintf_r+0xd8>
 8011e96:	2300      	movs	r3, #0
 8011e98:	3401      	adds	r4, #1
 8011e9a:	9305      	str	r3, [sp, #20]
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	f04f 0c0a 	mov.w	ip, #10
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ea8:	3a30      	subs	r2, #48	@ 0x30
 8011eaa:	2a09      	cmp	r2, #9
 8011eac:	d903      	bls.n	8011eb6 <_svfiprintf_r+0x1a6>
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d0c6      	beq.n	8011e40 <_svfiprintf_r+0x130>
 8011eb2:	9105      	str	r1, [sp, #20]
 8011eb4:	e7c4      	b.n	8011e40 <_svfiprintf_r+0x130>
 8011eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011eba:	4604      	mov	r4, r0
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	e7f0      	b.n	8011ea2 <_svfiprintf_r+0x192>
 8011ec0:	ab03      	add	r3, sp, #12
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	462a      	mov	r2, r5
 8011ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8011f00 <_svfiprintf_r+0x1f0>)
 8011ec8:	a904      	add	r1, sp, #16
 8011eca:	4638      	mov	r0, r7
 8011ecc:	f3af 8000 	nop.w
 8011ed0:	1c42      	adds	r2, r0, #1
 8011ed2:	4606      	mov	r6, r0
 8011ed4:	d1d6      	bne.n	8011e84 <_svfiprintf_r+0x174>
 8011ed6:	89ab      	ldrh	r3, [r5, #12]
 8011ed8:	065b      	lsls	r3, r3, #25
 8011eda:	f53f af2d 	bmi.w	8011d38 <_svfiprintf_r+0x28>
 8011ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ee0:	e72c      	b.n	8011d3c <_svfiprintf_r+0x2c>
 8011ee2:	ab03      	add	r3, sp, #12
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	462a      	mov	r2, r5
 8011ee8:	4b05      	ldr	r3, [pc, #20]	@ (8011f00 <_svfiprintf_r+0x1f0>)
 8011eea:	a904      	add	r1, sp, #16
 8011eec:	4638      	mov	r0, r7
 8011eee:	f000 f91b 	bl	8012128 <_printf_i>
 8011ef2:	e7ed      	b.n	8011ed0 <_svfiprintf_r+0x1c0>
 8011ef4:	08012988 	.word	0x08012988
 8011ef8:	08012992 	.word	0x08012992
 8011efc:	00000000 	.word	0x00000000
 8011f00:	08011c59 	.word	0x08011c59
 8011f04:	0801298e 	.word	0x0801298e

08011f08 <sbrk_aligned>:
 8011f08:	b570      	push	{r4, r5, r6, lr}
 8011f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8011f48 <sbrk_aligned+0x40>)
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	6831      	ldr	r1, [r6, #0]
 8011f10:	4605      	mov	r5, r0
 8011f12:	b911      	cbnz	r1, 8011f1a <sbrk_aligned+0x12>
 8011f14:	f000 fa7c 	bl	8012410 <_sbrk_r>
 8011f18:	6030      	str	r0, [r6, #0]
 8011f1a:	4621      	mov	r1, r4
 8011f1c:	4628      	mov	r0, r5
 8011f1e:	f000 fa77 	bl	8012410 <_sbrk_r>
 8011f22:	1c43      	adds	r3, r0, #1
 8011f24:	d103      	bne.n	8011f2e <sbrk_aligned+0x26>
 8011f26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	bd70      	pop	{r4, r5, r6, pc}
 8011f2e:	1cc4      	adds	r4, r0, #3
 8011f30:	f024 0403 	bic.w	r4, r4, #3
 8011f34:	42a0      	cmp	r0, r4
 8011f36:	d0f8      	beq.n	8011f2a <sbrk_aligned+0x22>
 8011f38:	1a21      	subs	r1, r4, r0
 8011f3a:	4628      	mov	r0, r5
 8011f3c:	f000 fa68 	bl	8012410 <_sbrk_r>
 8011f40:	3001      	adds	r0, #1
 8011f42:	d1f2      	bne.n	8011f2a <sbrk_aligned+0x22>
 8011f44:	e7ef      	b.n	8011f26 <sbrk_aligned+0x1e>
 8011f46:	bf00      	nop
 8011f48:	24001ba4 	.word	0x24001ba4

08011f4c <_malloc_r>:
 8011f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f50:	1ccd      	adds	r5, r1, #3
 8011f52:	f025 0503 	bic.w	r5, r5, #3
 8011f56:	3508      	adds	r5, #8
 8011f58:	2d0c      	cmp	r5, #12
 8011f5a:	bf38      	it	cc
 8011f5c:	250c      	movcc	r5, #12
 8011f5e:	2d00      	cmp	r5, #0
 8011f60:	4606      	mov	r6, r0
 8011f62:	db01      	blt.n	8011f68 <_malloc_r+0x1c>
 8011f64:	42a9      	cmp	r1, r5
 8011f66:	d904      	bls.n	8011f72 <_malloc_r+0x26>
 8011f68:	230c      	movs	r3, #12
 8011f6a:	6033      	str	r3, [r6, #0]
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012048 <_malloc_r+0xfc>
 8011f76:	f000 f9f7 	bl	8012368 <__malloc_lock>
 8011f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8011f7e:	461c      	mov	r4, r3
 8011f80:	bb44      	cbnz	r4, 8011fd4 <_malloc_r+0x88>
 8011f82:	4629      	mov	r1, r5
 8011f84:	4630      	mov	r0, r6
 8011f86:	f7ff ffbf 	bl	8011f08 <sbrk_aligned>
 8011f8a:	1c43      	adds	r3, r0, #1
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	d158      	bne.n	8012042 <_malloc_r+0xf6>
 8011f90:	f8d8 4000 	ldr.w	r4, [r8]
 8011f94:	4627      	mov	r7, r4
 8011f96:	2f00      	cmp	r7, #0
 8011f98:	d143      	bne.n	8012022 <_malloc_r+0xd6>
 8011f9a:	2c00      	cmp	r4, #0
 8011f9c:	d04b      	beq.n	8012036 <_malloc_r+0xea>
 8011f9e:	6823      	ldr	r3, [r4, #0]
 8011fa0:	4639      	mov	r1, r7
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	eb04 0903 	add.w	r9, r4, r3
 8011fa8:	f000 fa32 	bl	8012410 <_sbrk_r>
 8011fac:	4581      	cmp	r9, r0
 8011fae:	d142      	bne.n	8012036 <_malloc_r+0xea>
 8011fb0:	6821      	ldr	r1, [r4, #0]
 8011fb2:	1a6d      	subs	r5, r5, r1
 8011fb4:	4629      	mov	r1, r5
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f7ff ffa6 	bl	8011f08 <sbrk_aligned>
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	d03a      	beq.n	8012036 <_malloc_r+0xea>
 8011fc0:	6823      	ldr	r3, [r4, #0]
 8011fc2:	442b      	add	r3, r5
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8011fca:	685a      	ldr	r2, [r3, #4]
 8011fcc:	bb62      	cbnz	r2, 8012028 <_malloc_r+0xdc>
 8011fce:	f8c8 7000 	str.w	r7, [r8]
 8011fd2:	e00f      	b.n	8011ff4 <_malloc_r+0xa8>
 8011fd4:	6822      	ldr	r2, [r4, #0]
 8011fd6:	1b52      	subs	r2, r2, r5
 8011fd8:	d420      	bmi.n	801201c <_malloc_r+0xd0>
 8011fda:	2a0b      	cmp	r2, #11
 8011fdc:	d917      	bls.n	801200e <_malloc_r+0xc2>
 8011fde:	1961      	adds	r1, r4, r5
 8011fe0:	42a3      	cmp	r3, r4
 8011fe2:	6025      	str	r5, [r4, #0]
 8011fe4:	bf18      	it	ne
 8011fe6:	6059      	strne	r1, [r3, #4]
 8011fe8:	6863      	ldr	r3, [r4, #4]
 8011fea:	bf08      	it	eq
 8011fec:	f8c8 1000 	streq.w	r1, [r8]
 8011ff0:	5162      	str	r2, [r4, r5]
 8011ff2:	604b      	str	r3, [r1, #4]
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	f000 f9bd 	bl	8012374 <__malloc_unlock>
 8011ffa:	f104 000b 	add.w	r0, r4, #11
 8011ffe:	1d23      	adds	r3, r4, #4
 8012000:	f020 0007 	bic.w	r0, r0, #7
 8012004:	1ac2      	subs	r2, r0, r3
 8012006:	bf1c      	itt	ne
 8012008:	1a1b      	subne	r3, r3, r0
 801200a:	50a3      	strne	r3, [r4, r2]
 801200c:	e7af      	b.n	8011f6e <_malloc_r+0x22>
 801200e:	6862      	ldr	r2, [r4, #4]
 8012010:	42a3      	cmp	r3, r4
 8012012:	bf0c      	ite	eq
 8012014:	f8c8 2000 	streq.w	r2, [r8]
 8012018:	605a      	strne	r2, [r3, #4]
 801201a:	e7eb      	b.n	8011ff4 <_malloc_r+0xa8>
 801201c:	4623      	mov	r3, r4
 801201e:	6864      	ldr	r4, [r4, #4]
 8012020:	e7ae      	b.n	8011f80 <_malloc_r+0x34>
 8012022:	463c      	mov	r4, r7
 8012024:	687f      	ldr	r7, [r7, #4]
 8012026:	e7b6      	b.n	8011f96 <_malloc_r+0x4a>
 8012028:	461a      	mov	r2, r3
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	42a3      	cmp	r3, r4
 801202e:	d1fb      	bne.n	8012028 <_malloc_r+0xdc>
 8012030:	2300      	movs	r3, #0
 8012032:	6053      	str	r3, [r2, #4]
 8012034:	e7de      	b.n	8011ff4 <_malloc_r+0xa8>
 8012036:	230c      	movs	r3, #12
 8012038:	6033      	str	r3, [r6, #0]
 801203a:	4630      	mov	r0, r6
 801203c:	f000 f99a 	bl	8012374 <__malloc_unlock>
 8012040:	e794      	b.n	8011f6c <_malloc_r+0x20>
 8012042:	6005      	str	r5, [r0, #0]
 8012044:	e7d6      	b.n	8011ff4 <_malloc_r+0xa8>
 8012046:	bf00      	nop
 8012048:	24001ba8 	.word	0x24001ba8

0801204c <_printf_common>:
 801204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012050:	4616      	mov	r6, r2
 8012052:	4698      	mov	r8, r3
 8012054:	688a      	ldr	r2, [r1, #8]
 8012056:	690b      	ldr	r3, [r1, #16]
 8012058:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801205c:	4293      	cmp	r3, r2
 801205e:	bfb8      	it	lt
 8012060:	4613      	movlt	r3, r2
 8012062:	6033      	str	r3, [r6, #0]
 8012064:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012068:	4607      	mov	r7, r0
 801206a:	460c      	mov	r4, r1
 801206c:	b10a      	cbz	r2, 8012072 <_printf_common+0x26>
 801206e:	3301      	adds	r3, #1
 8012070:	6033      	str	r3, [r6, #0]
 8012072:	6823      	ldr	r3, [r4, #0]
 8012074:	0699      	lsls	r1, r3, #26
 8012076:	bf42      	ittt	mi
 8012078:	6833      	ldrmi	r3, [r6, #0]
 801207a:	3302      	addmi	r3, #2
 801207c:	6033      	strmi	r3, [r6, #0]
 801207e:	6825      	ldr	r5, [r4, #0]
 8012080:	f015 0506 	ands.w	r5, r5, #6
 8012084:	d106      	bne.n	8012094 <_printf_common+0x48>
 8012086:	f104 0a19 	add.w	sl, r4, #25
 801208a:	68e3      	ldr	r3, [r4, #12]
 801208c:	6832      	ldr	r2, [r6, #0]
 801208e:	1a9b      	subs	r3, r3, r2
 8012090:	42ab      	cmp	r3, r5
 8012092:	dc26      	bgt.n	80120e2 <_printf_common+0x96>
 8012094:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012098:	6822      	ldr	r2, [r4, #0]
 801209a:	3b00      	subs	r3, #0
 801209c:	bf18      	it	ne
 801209e:	2301      	movne	r3, #1
 80120a0:	0692      	lsls	r2, r2, #26
 80120a2:	d42b      	bmi.n	80120fc <_printf_common+0xb0>
 80120a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80120a8:	4641      	mov	r1, r8
 80120aa:	4638      	mov	r0, r7
 80120ac:	47c8      	blx	r9
 80120ae:	3001      	adds	r0, #1
 80120b0:	d01e      	beq.n	80120f0 <_printf_common+0xa4>
 80120b2:	6823      	ldr	r3, [r4, #0]
 80120b4:	6922      	ldr	r2, [r4, #16]
 80120b6:	f003 0306 	and.w	r3, r3, #6
 80120ba:	2b04      	cmp	r3, #4
 80120bc:	bf02      	ittt	eq
 80120be:	68e5      	ldreq	r5, [r4, #12]
 80120c0:	6833      	ldreq	r3, [r6, #0]
 80120c2:	1aed      	subeq	r5, r5, r3
 80120c4:	68a3      	ldr	r3, [r4, #8]
 80120c6:	bf0c      	ite	eq
 80120c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120cc:	2500      	movne	r5, #0
 80120ce:	4293      	cmp	r3, r2
 80120d0:	bfc4      	itt	gt
 80120d2:	1a9b      	subgt	r3, r3, r2
 80120d4:	18ed      	addgt	r5, r5, r3
 80120d6:	2600      	movs	r6, #0
 80120d8:	341a      	adds	r4, #26
 80120da:	42b5      	cmp	r5, r6
 80120dc:	d11a      	bne.n	8012114 <_printf_common+0xc8>
 80120de:	2000      	movs	r0, #0
 80120e0:	e008      	b.n	80120f4 <_printf_common+0xa8>
 80120e2:	2301      	movs	r3, #1
 80120e4:	4652      	mov	r2, sl
 80120e6:	4641      	mov	r1, r8
 80120e8:	4638      	mov	r0, r7
 80120ea:	47c8      	blx	r9
 80120ec:	3001      	adds	r0, #1
 80120ee:	d103      	bne.n	80120f8 <_printf_common+0xac>
 80120f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120f8:	3501      	adds	r5, #1
 80120fa:	e7c6      	b.n	801208a <_printf_common+0x3e>
 80120fc:	18e1      	adds	r1, r4, r3
 80120fe:	1c5a      	adds	r2, r3, #1
 8012100:	2030      	movs	r0, #48	@ 0x30
 8012102:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012106:	4422      	add	r2, r4
 8012108:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801210c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012110:	3302      	adds	r3, #2
 8012112:	e7c7      	b.n	80120a4 <_printf_common+0x58>
 8012114:	2301      	movs	r3, #1
 8012116:	4622      	mov	r2, r4
 8012118:	4641      	mov	r1, r8
 801211a:	4638      	mov	r0, r7
 801211c:	47c8      	blx	r9
 801211e:	3001      	adds	r0, #1
 8012120:	d0e6      	beq.n	80120f0 <_printf_common+0xa4>
 8012122:	3601      	adds	r6, #1
 8012124:	e7d9      	b.n	80120da <_printf_common+0x8e>
	...

08012128 <_printf_i>:
 8012128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801212c:	7e0f      	ldrb	r7, [r1, #24]
 801212e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012130:	2f78      	cmp	r7, #120	@ 0x78
 8012132:	4691      	mov	r9, r2
 8012134:	4680      	mov	r8, r0
 8012136:	460c      	mov	r4, r1
 8012138:	469a      	mov	sl, r3
 801213a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801213e:	d807      	bhi.n	8012150 <_printf_i+0x28>
 8012140:	2f62      	cmp	r7, #98	@ 0x62
 8012142:	d80a      	bhi.n	801215a <_printf_i+0x32>
 8012144:	2f00      	cmp	r7, #0
 8012146:	f000 80d2 	beq.w	80122ee <_printf_i+0x1c6>
 801214a:	2f58      	cmp	r7, #88	@ 0x58
 801214c:	f000 80b9 	beq.w	80122c2 <_printf_i+0x19a>
 8012150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012154:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012158:	e03a      	b.n	80121d0 <_printf_i+0xa8>
 801215a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801215e:	2b15      	cmp	r3, #21
 8012160:	d8f6      	bhi.n	8012150 <_printf_i+0x28>
 8012162:	a101      	add	r1, pc, #4	@ (adr r1, 8012168 <_printf_i+0x40>)
 8012164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012168:	080121c1 	.word	0x080121c1
 801216c:	080121d5 	.word	0x080121d5
 8012170:	08012151 	.word	0x08012151
 8012174:	08012151 	.word	0x08012151
 8012178:	08012151 	.word	0x08012151
 801217c:	08012151 	.word	0x08012151
 8012180:	080121d5 	.word	0x080121d5
 8012184:	08012151 	.word	0x08012151
 8012188:	08012151 	.word	0x08012151
 801218c:	08012151 	.word	0x08012151
 8012190:	08012151 	.word	0x08012151
 8012194:	080122d5 	.word	0x080122d5
 8012198:	080121ff 	.word	0x080121ff
 801219c:	0801228f 	.word	0x0801228f
 80121a0:	08012151 	.word	0x08012151
 80121a4:	08012151 	.word	0x08012151
 80121a8:	080122f7 	.word	0x080122f7
 80121ac:	08012151 	.word	0x08012151
 80121b0:	080121ff 	.word	0x080121ff
 80121b4:	08012151 	.word	0x08012151
 80121b8:	08012151 	.word	0x08012151
 80121bc:	08012297 	.word	0x08012297
 80121c0:	6833      	ldr	r3, [r6, #0]
 80121c2:	1d1a      	adds	r2, r3, #4
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	6032      	str	r2, [r6, #0]
 80121c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80121cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80121d0:	2301      	movs	r3, #1
 80121d2:	e09d      	b.n	8012310 <_printf_i+0x1e8>
 80121d4:	6833      	ldr	r3, [r6, #0]
 80121d6:	6820      	ldr	r0, [r4, #0]
 80121d8:	1d19      	adds	r1, r3, #4
 80121da:	6031      	str	r1, [r6, #0]
 80121dc:	0606      	lsls	r6, r0, #24
 80121de:	d501      	bpl.n	80121e4 <_printf_i+0xbc>
 80121e0:	681d      	ldr	r5, [r3, #0]
 80121e2:	e003      	b.n	80121ec <_printf_i+0xc4>
 80121e4:	0645      	lsls	r5, r0, #25
 80121e6:	d5fb      	bpl.n	80121e0 <_printf_i+0xb8>
 80121e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80121ec:	2d00      	cmp	r5, #0
 80121ee:	da03      	bge.n	80121f8 <_printf_i+0xd0>
 80121f0:	232d      	movs	r3, #45	@ 0x2d
 80121f2:	426d      	negs	r5, r5
 80121f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121f8:	4859      	ldr	r0, [pc, #356]	@ (8012360 <_printf_i+0x238>)
 80121fa:	230a      	movs	r3, #10
 80121fc:	e011      	b.n	8012222 <_printf_i+0xfa>
 80121fe:	6821      	ldr	r1, [r4, #0]
 8012200:	6833      	ldr	r3, [r6, #0]
 8012202:	0608      	lsls	r0, r1, #24
 8012204:	f853 5b04 	ldr.w	r5, [r3], #4
 8012208:	d402      	bmi.n	8012210 <_printf_i+0xe8>
 801220a:	0649      	lsls	r1, r1, #25
 801220c:	bf48      	it	mi
 801220e:	b2ad      	uxthmi	r5, r5
 8012210:	2f6f      	cmp	r7, #111	@ 0x6f
 8012212:	4853      	ldr	r0, [pc, #332]	@ (8012360 <_printf_i+0x238>)
 8012214:	6033      	str	r3, [r6, #0]
 8012216:	bf14      	ite	ne
 8012218:	230a      	movne	r3, #10
 801221a:	2308      	moveq	r3, #8
 801221c:	2100      	movs	r1, #0
 801221e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012222:	6866      	ldr	r6, [r4, #4]
 8012224:	60a6      	str	r6, [r4, #8]
 8012226:	2e00      	cmp	r6, #0
 8012228:	bfa2      	ittt	ge
 801222a:	6821      	ldrge	r1, [r4, #0]
 801222c:	f021 0104 	bicge.w	r1, r1, #4
 8012230:	6021      	strge	r1, [r4, #0]
 8012232:	b90d      	cbnz	r5, 8012238 <_printf_i+0x110>
 8012234:	2e00      	cmp	r6, #0
 8012236:	d04b      	beq.n	80122d0 <_printf_i+0x1a8>
 8012238:	4616      	mov	r6, r2
 801223a:	fbb5 f1f3 	udiv	r1, r5, r3
 801223e:	fb03 5711 	mls	r7, r3, r1, r5
 8012242:	5dc7      	ldrb	r7, [r0, r7]
 8012244:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012248:	462f      	mov	r7, r5
 801224a:	42bb      	cmp	r3, r7
 801224c:	460d      	mov	r5, r1
 801224e:	d9f4      	bls.n	801223a <_printf_i+0x112>
 8012250:	2b08      	cmp	r3, #8
 8012252:	d10b      	bne.n	801226c <_printf_i+0x144>
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	07df      	lsls	r7, r3, #31
 8012258:	d508      	bpl.n	801226c <_printf_i+0x144>
 801225a:	6923      	ldr	r3, [r4, #16]
 801225c:	6861      	ldr	r1, [r4, #4]
 801225e:	4299      	cmp	r1, r3
 8012260:	bfde      	ittt	le
 8012262:	2330      	movle	r3, #48	@ 0x30
 8012264:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012268:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801226c:	1b92      	subs	r2, r2, r6
 801226e:	6122      	str	r2, [r4, #16]
 8012270:	f8cd a000 	str.w	sl, [sp]
 8012274:	464b      	mov	r3, r9
 8012276:	aa03      	add	r2, sp, #12
 8012278:	4621      	mov	r1, r4
 801227a:	4640      	mov	r0, r8
 801227c:	f7ff fee6 	bl	801204c <_printf_common>
 8012280:	3001      	adds	r0, #1
 8012282:	d14a      	bne.n	801231a <_printf_i+0x1f2>
 8012284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012288:	b004      	add	sp, #16
 801228a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801228e:	6823      	ldr	r3, [r4, #0]
 8012290:	f043 0320 	orr.w	r3, r3, #32
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	4833      	ldr	r0, [pc, #204]	@ (8012364 <_printf_i+0x23c>)
 8012298:	2778      	movs	r7, #120	@ 0x78
 801229a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	6831      	ldr	r1, [r6, #0]
 80122a2:	061f      	lsls	r7, r3, #24
 80122a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80122a8:	d402      	bmi.n	80122b0 <_printf_i+0x188>
 80122aa:	065f      	lsls	r7, r3, #25
 80122ac:	bf48      	it	mi
 80122ae:	b2ad      	uxthmi	r5, r5
 80122b0:	6031      	str	r1, [r6, #0]
 80122b2:	07d9      	lsls	r1, r3, #31
 80122b4:	bf44      	itt	mi
 80122b6:	f043 0320 	orrmi.w	r3, r3, #32
 80122ba:	6023      	strmi	r3, [r4, #0]
 80122bc:	b11d      	cbz	r5, 80122c6 <_printf_i+0x19e>
 80122be:	2310      	movs	r3, #16
 80122c0:	e7ac      	b.n	801221c <_printf_i+0xf4>
 80122c2:	4827      	ldr	r0, [pc, #156]	@ (8012360 <_printf_i+0x238>)
 80122c4:	e7e9      	b.n	801229a <_printf_i+0x172>
 80122c6:	6823      	ldr	r3, [r4, #0]
 80122c8:	f023 0320 	bic.w	r3, r3, #32
 80122cc:	6023      	str	r3, [r4, #0]
 80122ce:	e7f6      	b.n	80122be <_printf_i+0x196>
 80122d0:	4616      	mov	r6, r2
 80122d2:	e7bd      	b.n	8012250 <_printf_i+0x128>
 80122d4:	6833      	ldr	r3, [r6, #0]
 80122d6:	6825      	ldr	r5, [r4, #0]
 80122d8:	6961      	ldr	r1, [r4, #20]
 80122da:	1d18      	adds	r0, r3, #4
 80122dc:	6030      	str	r0, [r6, #0]
 80122de:	062e      	lsls	r6, r5, #24
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	d501      	bpl.n	80122e8 <_printf_i+0x1c0>
 80122e4:	6019      	str	r1, [r3, #0]
 80122e6:	e002      	b.n	80122ee <_printf_i+0x1c6>
 80122e8:	0668      	lsls	r0, r5, #25
 80122ea:	d5fb      	bpl.n	80122e4 <_printf_i+0x1bc>
 80122ec:	8019      	strh	r1, [r3, #0]
 80122ee:	2300      	movs	r3, #0
 80122f0:	6123      	str	r3, [r4, #16]
 80122f2:	4616      	mov	r6, r2
 80122f4:	e7bc      	b.n	8012270 <_printf_i+0x148>
 80122f6:	6833      	ldr	r3, [r6, #0]
 80122f8:	1d1a      	adds	r2, r3, #4
 80122fa:	6032      	str	r2, [r6, #0]
 80122fc:	681e      	ldr	r6, [r3, #0]
 80122fe:	6862      	ldr	r2, [r4, #4]
 8012300:	2100      	movs	r1, #0
 8012302:	4630      	mov	r0, r6
 8012304:	f7ee f80c 	bl	8000320 <memchr>
 8012308:	b108      	cbz	r0, 801230e <_printf_i+0x1e6>
 801230a:	1b80      	subs	r0, r0, r6
 801230c:	6060      	str	r0, [r4, #4]
 801230e:	6863      	ldr	r3, [r4, #4]
 8012310:	6123      	str	r3, [r4, #16]
 8012312:	2300      	movs	r3, #0
 8012314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012318:	e7aa      	b.n	8012270 <_printf_i+0x148>
 801231a:	6923      	ldr	r3, [r4, #16]
 801231c:	4632      	mov	r2, r6
 801231e:	4649      	mov	r1, r9
 8012320:	4640      	mov	r0, r8
 8012322:	47d0      	blx	sl
 8012324:	3001      	adds	r0, #1
 8012326:	d0ad      	beq.n	8012284 <_printf_i+0x15c>
 8012328:	6823      	ldr	r3, [r4, #0]
 801232a:	079b      	lsls	r3, r3, #30
 801232c:	d413      	bmi.n	8012356 <_printf_i+0x22e>
 801232e:	68e0      	ldr	r0, [r4, #12]
 8012330:	9b03      	ldr	r3, [sp, #12]
 8012332:	4298      	cmp	r0, r3
 8012334:	bfb8      	it	lt
 8012336:	4618      	movlt	r0, r3
 8012338:	e7a6      	b.n	8012288 <_printf_i+0x160>
 801233a:	2301      	movs	r3, #1
 801233c:	4632      	mov	r2, r6
 801233e:	4649      	mov	r1, r9
 8012340:	4640      	mov	r0, r8
 8012342:	47d0      	blx	sl
 8012344:	3001      	adds	r0, #1
 8012346:	d09d      	beq.n	8012284 <_printf_i+0x15c>
 8012348:	3501      	adds	r5, #1
 801234a:	68e3      	ldr	r3, [r4, #12]
 801234c:	9903      	ldr	r1, [sp, #12]
 801234e:	1a5b      	subs	r3, r3, r1
 8012350:	42ab      	cmp	r3, r5
 8012352:	dcf2      	bgt.n	801233a <_printf_i+0x212>
 8012354:	e7eb      	b.n	801232e <_printf_i+0x206>
 8012356:	2500      	movs	r5, #0
 8012358:	f104 0619 	add.w	r6, r4, #25
 801235c:	e7f5      	b.n	801234a <_printf_i+0x222>
 801235e:	bf00      	nop
 8012360:	08012999 	.word	0x08012999
 8012364:	080129aa 	.word	0x080129aa

08012368 <__malloc_lock>:
 8012368:	4801      	ldr	r0, [pc, #4]	@ (8012370 <__malloc_lock+0x8>)
 801236a:	f7ff bc65 	b.w	8011c38 <__retarget_lock_acquire_recursive>
 801236e:	bf00      	nop
 8012370:	24001ba0 	.word	0x24001ba0

08012374 <__malloc_unlock>:
 8012374:	4801      	ldr	r0, [pc, #4]	@ (801237c <__malloc_unlock+0x8>)
 8012376:	f7ff bc60 	b.w	8011c3a <__retarget_lock_release_recursive>
 801237a:	bf00      	nop
 801237c:	24001ba0 	.word	0x24001ba0

08012380 <_realloc_r>:
 8012380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012384:	4680      	mov	r8, r0
 8012386:	4615      	mov	r5, r2
 8012388:	460c      	mov	r4, r1
 801238a:	b921      	cbnz	r1, 8012396 <_realloc_r+0x16>
 801238c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012390:	4611      	mov	r1, r2
 8012392:	f7ff bddb 	b.w	8011f4c <_malloc_r>
 8012396:	b92a      	cbnz	r2, 80123a4 <_realloc_r+0x24>
 8012398:	f000 f84a 	bl	8012430 <_free_r>
 801239c:	2400      	movs	r4, #0
 801239e:	4620      	mov	r0, r4
 80123a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123a4:	f000 f88e 	bl	80124c4 <_malloc_usable_size_r>
 80123a8:	4285      	cmp	r5, r0
 80123aa:	4606      	mov	r6, r0
 80123ac:	d802      	bhi.n	80123b4 <_realloc_r+0x34>
 80123ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80123b2:	d8f4      	bhi.n	801239e <_realloc_r+0x1e>
 80123b4:	4629      	mov	r1, r5
 80123b6:	4640      	mov	r0, r8
 80123b8:	f7ff fdc8 	bl	8011f4c <_malloc_r>
 80123bc:	4607      	mov	r7, r0
 80123be:	2800      	cmp	r0, #0
 80123c0:	d0ec      	beq.n	801239c <_realloc_r+0x1c>
 80123c2:	42b5      	cmp	r5, r6
 80123c4:	462a      	mov	r2, r5
 80123c6:	4621      	mov	r1, r4
 80123c8:	bf28      	it	cs
 80123ca:	4632      	movcs	r2, r6
 80123cc:	f7ff fc36 	bl	8011c3c <memcpy>
 80123d0:	4621      	mov	r1, r4
 80123d2:	4640      	mov	r0, r8
 80123d4:	f000 f82c 	bl	8012430 <_free_r>
 80123d8:	463c      	mov	r4, r7
 80123da:	e7e0      	b.n	801239e <_realloc_r+0x1e>

080123dc <memmove>:
 80123dc:	4288      	cmp	r0, r1
 80123de:	b510      	push	{r4, lr}
 80123e0:	eb01 0402 	add.w	r4, r1, r2
 80123e4:	d902      	bls.n	80123ec <memmove+0x10>
 80123e6:	4284      	cmp	r4, r0
 80123e8:	4623      	mov	r3, r4
 80123ea:	d807      	bhi.n	80123fc <memmove+0x20>
 80123ec:	1e43      	subs	r3, r0, #1
 80123ee:	42a1      	cmp	r1, r4
 80123f0:	d008      	beq.n	8012404 <memmove+0x28>
 80123f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123fa:	e7f8      	b.n	80123ee <memmove+0x12>
 80123fc:	4402      	add	r2, r0
 80123fe:	4601      	mov	r1, r0
 8012400:	428a      	cmp	r2, r1
 8012402:	d100      	bne.n	8012406 <memmove+0x2a>
 8012404:	bd10      	pop	{r4, pc}
 8012406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801240a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801240e:	e7f7      	b.n	8012400 <memmove+0x24>

08012410 <_sbrk_r>:
 8012410:	b538      	push	{r3, r4, r5, lr}
 8012412:	4d06      	ldr	r5, [pc, #24]	@ (801242c <_sbrk_r+0x1c>)
 8012414:	2300      	movs	r3, #0
 8012416:	4604      	mov	r4, r0
 8012418:	4608      	mov	r0, r1
 801241a:	602b      	str	r3, [r5, #0]
 801241c:	f7f0 f8ee 	bl	80025fc <_sbrk>
 8012420:	1c43      	adds	r3, r0, #1
 8012422:	d102      	bne.n	801242a <_sbrk_r+0x1a>
 8012424:	682b      	ldr	r3, [r5, #0]
 8012426:	b103      	cbz	r3, 801242a <_sbrk_r+0x1a>
 8012428:	6023      	str	r3, [r4, #0]
 801242a:	bd38      	pop	{r3, r4, r5, pc}
 801242c:	24001bac 	.word	0x24001bac

08012430 <_free_r>:
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	4605      	mov	r5, r0
 8012434:	2900      	cmp	r1, #0
 8012436:	d041      	beq.n	80124bc <_free_r+0x8c>
 8012438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801243c:	1f0c      	subs	r4, r1, #4
 801243e:	2b00      	cmp	r3, #0
 8012440:	bfb8      	it	lt
 8012442:	18e4      	addlt	r4, r4, r3
 8012444:	f7ff ff90 	bl	8012368 <__malloc_lock>
 8012448:	4a1d      	ldr	r2, [pc, #116]	@ (80124c0 <_free_r+0x90>)
 801244a:	6813      	ldr	r3, [r2, #0]
 801244c:	b933      	cbnz	r3, 801245c <_free_r+0x2c>
 801244e:	6063      	str	r3, [r4, #4]
 8012450:	6014      	str	r4, [r2, #0]
 8012452:	4628      	mov	r0, r5
 8012454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012458:	f7ff bf8c 	b.w	8012374 <__malloc_unlock>
 801245c:	42a3      	cmp	r3, r4
 801245e:	d908      	bls.n	8012472 <_free_r+0x42>
 8012460:	6820      	ldr	r0, [r4, #0]
 8012462:	1821      	adds	r1, r4, r0
 8012464:	428b      	cmp	r3, r1
 8012466:	bf01      	itttt	eq
 8012468:	6819      	ldreq	r1, [r3, #0]
 801246a:	685b      	ldreq	r3, [r3, #4]
 801246c:	1809      	addeq	r1, r1, r0
 801246e:	6021      	streq	r1, [r4, #0]
 8012470:	e7ed      	b.n	801244e <_free_r+0x1e>
 8012472:	461a      	mov	r2, r3
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	b10b      	cbz	r3, 801247c <_free_r+0x4c>
 8012478:	42a3      	cmp	r3, r4
 801247a:	d9fa      	bls.n	8012472 <_free_r+0x42>
 801247c:	6811      	ldr	r1, [r2, #0]
 801247e:	1850      	adds	r0, r2, r1
 8012480:	42a0      	cmp	r0, r4
 8012482:	d10b      	bne.n	801249c <_free_r+0x6c>
 8012484:	6820      	ldr	r0, [r4, #0]
 8012486:	4401      	add	r1, r0
 8012488:	1850      	adds	r0, r2, r1
 801248a:	4283      	cmp	r3, r0
 801248c:	6011      	str	r1, [r2, #0]
 801248e:	d1e0      	bne.n	8012452 <_free_r+0x22>
 8012490:	6818      	ldr	r0, [r3, #0]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	6053      	str	r3, [r2, #4]
 8012496:	4408      	add	r0, r1
 8012498:	6010      	str	r0, [r2, #0]
 801249a:	e7da      	b.n	8012452 <_free_r+0x22>
 801249c:	d902      	bls.n	80124a4 <_free_r+0x74>
 801249e:	230c      	movs	r3, #12
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	e7d6      	b.n	8012452 <_free_r+0x22>
 80124a4:	6820      	ldr	r0, [r4, #0]
 80124a6:	1821      	adds	r1, r4, r0
 80124a8:	428b      	cmp	r3, r1
 80124aa:	bf04      	itt	eq
 80124ac:	6819      	ldreq	r1, [r3, #0]
 80124ae:	685b      	ldreq	r3, [r3, #4]
 80124b0:	6063      	str	r3, [r4, #4]
 80124b2:	bf04      	itt	eq
 80124b4:	1809      	addeq	r1, r1, r0
 80124b6:	6021      	streq	r1, [r4, #0]
 80124b8:	6054      	str	r4, [r2, #4]
 80124ba:	e7ca      	b.n	8012452 <_free_r+0x22>
 80124bc:	bd38      	pop	{r3, r4, r5, pc}
 80124be:	bf00      	nop
 80124c0:	24001ba8 	.word	0x24001ba8

080124c4 <_malloc_usable_size_r>:
 80124c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124c8:	1f18      	subs	r0, r3, #4
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	bfbc      	itt	lt
 80124ce:	580b      	ldrlt	r3, [r1, r0]
 80124d0:	18c0      	addlt	r0, r0, r3
 80124d2:	4770      	bx	lr

080124d4 <_init>:
 80124d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124d6:	bf00      	nop
 80124d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124da:	bc08      	pop	{r3}
 80124dc:	469e      	mov	lr, r3
 80124de:	4770      	bx	lr

080124e0 <_fini>:
 80124e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e2:	bf00      	nop
 80124e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124e6:	bc08      	pop	{r3}
 80124e8:	469e      	mov	lr, r3
 80124ea:	4770      	bx	lr
