
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b65c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  0800b92c  0800b92c  0001b92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc70  0800bc70  0001bc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800bc80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000684  2400009c  0800bd1c  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000720  0800bd1c  00020720  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d6c7  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b2e  00000000  00000000  0003d7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001800  00000000  00000000  00040308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000012ce  00000000  00000000  00041b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036df6  00000000  00000000  00042dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001cae5  00000000  00000000  00079bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170efe  00000000  00000000  000966b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006f4c  00000000  00000000  002075b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  0020e4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400009c 	.word	0x2400009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b914 	.word	0x0800b914

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a0 	.word	0x240000a0
 800030c:	0800b914 	.word	0x0800b914

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	0000      	movs	r0, r0
	...

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 ff69 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 fe75 	bl	80013b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 fee3 	bl	8001498 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f001 fa01 	bl	8001ad8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006d6:	f000 ff0f 	bl	80014f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006da:	f000 ff85 	bl	80015e8 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 80006de:	f000 ffe7 	bl	80016b0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006e2:	f001 f849 	bl	8001778 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 80006e6:	f001 f8ab 	bl	8001840 <MX_FDCAN3_Init>
  MX_TIM1_Init();
 80006ea:	f001 f90d 	bl	8001908 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006ee:	f001 f9a7 	bl	8001a40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Inicialización de buses CAN
  HAL_FDCAN_Start(&hfdcan1); //Inversor
 80006f2:	487f      	ldr	r0, [pc, #508]	; (80008f0 <main+0x230>)
 80006f4:	f004 fa8a 	bl	8004c0c <HAL_FDCAN_Start>
  HAL_FDCAN_Start(&hfdcan2); //Acumulador
 80006f8:	487e      	ldr	r0, [pc, #504]	; (80008f4 <main+0x234>)
 80006fa:	f004 fa87 	bl	8004c0c <HAL_FDCAN_Start>
  HAL_FDCAN_Start(&hfdcan3); //Sensores
 80006fe:	487e      	ldr	r0, [pc, #504]	; (80008f8 <main+0x238>)
 8000700:	f004 fa84 	bl	8004c0c <HAL_FDCAN_Start>

  // ---------- SECUENCIA DE ARRANQUE ----------

  // Configuración para recibir el registro DC_BUS_VOLTAGE del inversor cada 100ms
  //Revisar por nuevo inversor
  while (config_inv_lectura_v == 0){
 8000704:	e03a      	b.n	800077c <main+0xbc>

	  TxHeader_Inv.Identifier = rxID_inversor;
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <main+0x23c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a7d      	ldr	r2, [pc, #500]	; (8000900 <main+0x240>)
 800070c:	6013      	str	r3, [r2, #0]
	  TxHeader_Inv.DataLength = 3;
 800070e:	4b7c      	ldr	r3, [pc, #496]	; (8000900 <main+0x240>)
 8000710:	2203      	movs	r2, #3
 8000712:	60da      	str	r2, [r3, #12]
	  TxData_Inv[0] = READ;
 8000714:	4b7b      	ldr	r3, [pc, #492]	; (8000904 <main+0x244>)
 8000716:	223d      	movs	r2, #61	; 0x3d
 8000718:	701a      	strb	r2, [r3, #0]
	  TxData_Inv[1] = DC_BUS_VOLTAGE;
 800071a:	4b7a      	ldr	r3, [pc, #488]	; (8000904 <main+0x244>)
 800071c:	22eb      	movs	r2, #235	; 0xeb
 800071e:	705a      	strb	r2, [r3, #1]
	  TxData_Inv[2] = INV_DATA_PERIOD;
 8000720:	4b78      	ldr	r3, [pc, #480]	; (8000904 <main+0x244>)
 8000722:	2219      	movs	r2, #25
 8000724:	709a      	strb	r2, [r3, #2]
	  if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv) == HAL_OK){
 8000726:	4a77      	ldr	r2, [pc, #476]	; (8000904 <main+0x244>)
 8000728:	4975      	ldr	r1, [pc, #468]	; (8000900 <main+0x240>)
 800072a:	4871      	ldr	r0, [pc, #452]	; (80008f0 <main+0x230>)
 800072c:	f004 fa99 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <main+0x7c>
#if DEBUG
	print("Solicitar tensión");
 8000736:	4874      	ldr	r0, [pc, #464]	; (8000908 <main+0x248>)
 8000738:	f001 fa6c 	bl	8001c14 <print>
#endif
	  }
	  HAL_Delay(DELAY_CONFIG);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f001 ffbf 	bl	80026c0 <HAL_Delay>

	  //Espera ACK inversor
	  if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv) == HAL_OK){
 8000742:	4b72      	ldr	r3, [pc, #456]	; (800090c <main+0x24c>)
 8000744:	4a72      	ldr	r2, [pc, #456]	; (8000910 <main+0x250>)
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	4869      	ldr	r0, [pc, #420]	; (80008f0 <main+0x230>)
 800074a:	f004 fae5 	bl	8004d18 <HAL_FDCAN_GetRxMessage>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d113      	bne.n	800077c <main+0xbc>
		  if(RxHeader_Inv.Identifier == txID_inversor && RxHeader_Inv.DataLength == 4 && RxData_Inv[0] == DC_BUS_VOLTAGE){
 8000754:	4b6e      	ldr	r3, [pc, #440]	; (8000910 <main+0x250>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b6e      	ldr	r3, [pc, #440]	; (8000914 <main+0x254>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	429a      	cmp	r2, r3
 800075e:	d10d      	bne.n	800077c <main+0xbc>
 8000760:	4b6b      	ldr	r3, [pc, #428]	; (8000910 <main+0x250>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	2b04      	cmp	r3, #4
 8000766:	d109      	bne.n	800077c <main+0xbc>
 8000768:	4b68      	ldr	r3, [pc, #416]	; (800090c <main+0x24c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2beb      	cmp	r3, #235	; 0xeb
 800076e:	d105      	bne.n	800077c <main+0xbc>
#if DEBUG
	print("CAN_INV: Configurado lectura de DC_BUS_VOLTAGE correctamente");
 8000770:	4869      	ldr	r0, [pc, #420]	; (8000918 <main+0x258>)
 8000772:	f001 fa4f 	bl	8001c14 <print>
#endif
			  config_inv_lectura_v = 1; //Sale del bucle
 8000776:	4b69      	ldr	r3, [pc, #420]	; (800091c <main+0x25c>)
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
  while (config_inv_lectura_v == 0){
 800077c:	4b67      	ldr	r3, [pc, #412]	; (800091c <main+0x25c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0c0      	beq.n	8000706 <main+0x46>
		  }
	  }
  }

#if DEBUG
  	print("Pre-carga");
 8000784:	4866      	ldr	r0, [pc, #408]	; (8000920 <main+0x260>)
 8000786:	f001 fa45 	bl	8001c14 <print>
#endif

  while(precarga_inv == 0){
 800078a:	e066      	b.n	800085a <main+0x19a>

	  //Lectura DC_BUS_VOLTAGE del CAN_INV
	  if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv) == HAL_OK){
 800078c:	4b5f      	ldr	r3, [pc, #380]	; (800090c <main+0x24c>)
 800078e:	4a60      	ldr	r2, [pc, #384]	; (8000910 <main+0x250>)
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4857      	ldr	r0, [pc, #348]	; (80008f0 <main+0x230>)
 8000794:	f004 fac0 	bl	8004d18 <HAL_FDCAN_GetRxMessage>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d140      	bne.n	8000820 <main+0x160>
		  if(RxHeader_Inv.Identifier == txID_inversor && RxHeader_Inv.DataLength == 4 && RxData_Inv[0] == DC_BUS_VOLTAGE){
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <main+0x250>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <main+0x254>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d115      	bne.n	80007d6 <main+0x116>
 80007aa:	4b59      	ldr	r3, [pc, #356]	; (8000910 <main+0x250>)
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d111      	bne.n	80007d6 <main+0x116>
 80007b2:	4b56      	ldr	r3, [pc, #344]	; (800090c <main+0x24c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2beb      	cmp	r3, #235	; 0xeb
 80007b8:	d10d      	bne.n	80007d6 <main+0x116>
			  inv_dc_bus_voltage = ((int)RxData_Inv[2] << 8 | (int)RxData_Inv[1]) / CONV_DC_BUS_VOLTAGE;
 80007ba:	4b54      	ldr	r3, [pc, #336]	; (800090c <main+0x24c>)
 80007bc:	789b      	ldrb	r3, [r3, #2]
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	4a52      	ldr	r2, [pc, #328]	; (800090c <main+0x24c>)
 80007c2:	7852      	ldrb	r2, [r2, #1]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	4a57      	ldr	r2, [pc, #348]	; (8000924 <main+0x264>)
 80007c8:	fb82 1203 	smull	r1, r2, r2, r3
 80007cc:	1052      	asrs	r2, r2, #1
 80007ce:	17db      	asrs	r3, r3, #31
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	4a55      	ldr	r2, [pc, #340]	; (8000928 <main+0x268>)
 80007d4:	6013      	str	r3, [r2, #0]
		  }
#if DEBUG
	print("DC_BUS_VOLTAGE (V):");
 80007d6:	4855      	ldr	r0, [pc, #340]	; (800092c <main+0x26c>)
 80007d8:	f001 fa1c 	bl	8001c14 <print>
	printValue(inv_dc_bus_voltage);
 80007dc:	4b52      	ldr	r3, [pc, #328]	; (8000928 <main+0x268>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fa35 	bl	8001c50 <printValue>
#endif

		//Reenvío DC_BUS_VOLTAGE al AMS por CAN acumulador
	  	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80007e6:	4b52      	ldr	r3, [pc, #328]	; (8000930 <main+0x270>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a52      	ldr	r2, [pc, #328]	; (8000934 <main+0x274>)
 80007ec:	6013      	str	r3, [r2, #0]
	  	TxHeader_Acu.DataLength = 2;
 80007ee:	4b51      	ldr	r3, [pc, #324]	; (8000934 <main+0x274>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	60da      	str	r2, [r3, #12]
	    TxData_Acu[0] = inv_dc_bus_voltage >> 8 & 0xFF;
 80007f4:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <main+0x268>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	121b      	asrs	r3, r3, #8
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b4e      	ldr	r3, [pc, #312]	; (8000938 <main+0x278>)
 80007fe:	701a      	strb	r2, [r3, #0]
	    TxData_Acu[1] = inv_dc_bus_voltage & 0xFF;
 8000800:	4b49      	ldr	r3, [pc, #292]	; (8000928 <main+0x268>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <main+0x278>)
 8000808:	705a      	strb	r2, [r3, #1]
	    if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK){
 800080a:	4a4b      	ldr	r2, [pc, #300]	; (8000938 <main+0x278>)
 800080c:	4949      	ldr	r1, [pc, #292]	; (8000934 <main+0x274>)
 800080e:	4839      	ldr	r0, [pc, #228]	; (80008f4 <main+0x234>)
 8000810:	f004 fa27 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d102      	bne.n	8000820 <main+0x160>
#if DEBUG
	print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 800081a:	4848      	ldr	r0, [pc, #288]	; (800093c <main+0x27c>)
 800081c:	f001 f9fa 	bl	8001c14 <print>
#endif
	    }
	  }

	  //Espera a recibir el Ok Pre-Carga del AMS
	  if(HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_Acu, RxData_Acu) == HAL_OK){
 8000820:	4b47      	ldr	r3, [pc, #284]	; (8000940 <main+0x280>)
 8000822:	4a48      	ldr	r2, [pc, #288]	; (8000944 <main+0x284>)
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	4833      	ldr	r0, [pc, #204]	; (80008f4 <main+0x234>)
 8000828:	f004 fa76 	bl	8004d18 <HAL_FDCAN_GetRxMessage>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d113      	bne.n	800085a <main+0x19a>
		  if(RxHeader_Acu.Identifier == ID_ack_precarga && RxHeader_Acu.DataLength == 1 && RxData_Acu[0] == 0){
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <main+0x284>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b44      	ldr	r3, [pc, #272]	; (8000948 <main+0x288>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	429a      	cmp	r2, r3
 800083c:	d10d      	bne.n	800085a <main+0x19a>
 800083e:	4b41      	ldr	r3, [pc, #260]	; (8000944 <main+0x284>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d109      	bne.n	800085a <main+0x19a>
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <main+0x280>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <main+0x19a>
			  precarga_inv = 1; //Precarga ready
 800084e:	4b3f      	ldr	r3, [pc, #252]	; (800094c <main+0x28c>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
#if DEBUG
	print("CAN_ACU: Precarga correcta");
 8000854:	483e      	ldr	r0, [pc, #248]	; (8000950 <main+0x290>)
 8000856:	f001 f9dd 	bl	8001c14 <print>
  while(precarga_inv == 0){
 800085a:	4b3c      	ldr	r3, [pc, #240]	; (800094c <main+0x28c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d094      	beq.n	800078c <main+0xcc>
  }

  // Comprobación ECU Telemería ON (*%*)

  // Comprobación si el inversor está READY-TO-START (RTS) (RFE y RUN pulsados)
  while(RTS_inv == 0){
 8000862:	e03a      	b.n	80008da <main+0x21a>
	  //Se pide el registro de RFE y RUN para comprobar estado
	  TxHeader_Inv.Identifier = rxID_inversor;
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <main+0x23c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a25      	ldr	r2, [pc, #148]	; (8000900 <main+0x240>)
 800086a:	6013      	str	r3, [r2, #0]
	  TxHeader_Inv.DataLength = 3;
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <main+0x240>)
 800086e:	2203      	movs	r2, #3
 8000870:	60da      	str	r2, [r3, #12]
	  TxData_Inv[0] = READ;
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <main+0x244>)
 8000874:	223d      	movs	r2, #61	; 0x3d
 8000876:	701a      	strb	r2, [r3, #0]
	  TxData_Inv[1] = RFE_RUN;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <main+0x244>)
 800087a:	22d8      	movs	r2, #216	; 0xd8
 800087c:	705a      	strb	r2, [r3, #1]
	  TxData_Inv[2] = 0x00; //Time interval (transmitting once)
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <main+0x244>)
 8000880:	2200      	movs	r2, #0
 8000882:	709a      	strb	r2, [r3, #2]
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000884:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <main+0x244>)
 8000886:	491e      	ldr	r1, [pc, #120]	; (8000900 <main+0x240>)
 8000888:	4819      	ldr	r0, [pc, #100]	; (80008f0 <main+0x230>)
 800088a:	f004 f9ea 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>

	  if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv)){
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <main+0x24c>)
 8000890:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <main+0x250>)
 8000892:	2140      	movs	r1, #64	; 0x40
 8000894:	4816      	ldr	r0, [pc, #88]	; (80008f0 <main+0x230>)
 8000896:	f004 fa3f 	bl	8004d18 <HAL_FDCAN_GetRxMessage>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d019      	beq.n	80008d4 <main+0x214>
		  if(RxHeader_Inv.Identifier == txID_inversor && RxHeader_Inv.DataLength == 4 /*COMPROBAR*/ && RxData_Inv[0] == RFE_RUN && (RxData_Inv[1]&RFE_RUN_EN) == RFE_RUN_EN){
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <main+0x250>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <main+0x254>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d113      	bne.n	80008d4 <main+0x214>
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <main+0x250>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d10f      	bne.n	80008d4 <main+0x214>
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <main+0x24c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2bd8      	cmp	r3, #216	; 0xd8
 80008ba:	d10b      	bne.n	80008d4 <main+0x214>
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <main+0x24c>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80008c4:	2b30      	cmp	r3, #48	; 0x30
 80008c6:	d105      	bne.n	80008d4 <main+0x214>
			  RTS_inv = 1;
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <main+0x294>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
#if DEBUG
	print("CAN_INV: Inversor RTS");
 80008ce:	4822      	ldr	r0, [pc, #136]	; (8000958 <main+0x298>)
 80008d0:	f001 f9a0 	bl	8001c14 <print>
#endif
		  }
	  }
	  HAL_Delay(DELAY_CONFIG);
 80008d4:	2064      	movs	r0, #100	; 0x64
 80008d6:	f001 fef3 	bl	80026c0 <HAL_Delay>
  while(RTS_inv == 0){
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <main+0x294>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0c0      	beq.n	8000864 <main+0x1a4>
  }


  //Comprobar BTB Inversor (preparar para controlar por torque)
  if(BTB_todo == 0){
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <main+0x29c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 80dd 	bne.w	8000aa6 <main+0x3e6>
	  while(BTB_inv_1 == 0){
 80008ec:	e07f      	b.n	80009ee <main+0x32e>
 80008ee:	bf00      	nop
 80008f0:	240001b4 	.word	0x240001b4
 80008f4:	24000254 	.word	0x24000254
 80008f8:	240002f4 	.word	0x240002f4
 80008fc:	24000004 	.word	0x24000004
 8000900:	24000474 	.word	0x24000474
 8000904:	2400050c 	.word	0x2400050c
 8000908:	0800b92c 	.word	0x0800b92c
 800090c:	24000514 	.word	0x24000514
 8000910:	24000498 	.word	0x24000498
 8000914:	24000008 	.word	0x24000008
 8000918:	0800b940 	.word	0x0800b940
 800091c:	240000bc 	.word	0x240000bc
 8000920:	0800b980 	.word	0x0800b980
 8000924:	094f2095 	.word	0x094f2095
 8000928:	24000534 	.word	0x24000534
 800092c:	0800b98c 	.word	0x0800b98c
 8000930:	24000010 	.word	0x24000010
 8000934:	240004c0 	.word	0x240004c0
 8000938:	2400051c 	.word	0x2400051c
 800093c:	0800b9a0 	.word	0x0800b9a0
 8000940:	24000524 	.word	0x24000524
 8000944:	240004e4 	.word	0x240004e4
 8000948:	24000014 	.word	0x24000014
 800094c:	240000b8 	.word	0x240000b8
 8000950:	0800b9c8 	.word	0x0800b9c8
 8000954:	240000c0 	.word	0x240000c0
 8000958:	0800b9e4 	.word	0x0800b9e4
 800095c:	240000c4 	.word	0x240000c4
		  //Transmitting transmission request BTB
		  TxHeader_Inv.Identifier = rxID_inversor;
 8000960:	4b7d      	ldr	r3, [pc, #500]	; (8000b58 <main+0x498>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a7d      	ldr	r2, [pc, #500]	; (8000b5c <main+0x49c>)
 8000966:	6013      	str	r3, [r2, #0]
		  TxHeader_Inv.DataLength = 3;
 8000968:	4b7c      	ldr	r3, [pc, #496]	; (8000b5c <main+0x49c>)
 800096a:	2203      	movs	r2, #3
 800096c:	60da      	str	r2, [r3, #12]
		  TxData_Inv[0] = READ;
 800096e:	4b7c      	ldr	r3, [pc, #496]	; (8000b60 <main+0x4a0>)
 8000970:	223d      	movs	r2, #61	; 0x3d
 8000972:	701a      	strb	r2, [r3, #0]
		  TxData_Inv[1] = BTB;
 8000974:	4b7a      	ldr	r3, [pc, #488]	; (8000b60 <main+0x4a0>)
 8000976:	22e2      	movs	r2, #226	; 0xe2
 8000978:	705a      	strb	r2, [r3, #1]
		  TxData_Inv[2] = 0x00;
 800097a:	4b79      	ldr	r3, [pc, #484]	; (8000b60 <main+0x4a0>)
 800097c:	2200      	movs	r2, #0
 800097e:	709a      	strb	r2, [r3, #2]
		  if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv)){
 8000980:	4a77      	ldr	r2, [pc, #476]	; (8000b60 <main+0x4a0>)
 8000982:	4976      	ldr	r1, [pc, #472]	; (8000b5c <main+0x49c>)
 8000984:	4877      	ldr	r0, [pc, #476]	; (8000b64 <main+0x4a4>)
 8000986:	f004 f96c 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <main+0x2d6>
#if DEBUG
	print("Transmitting transmission request BTB");
 8000990:	4875      	ldr	r0, [pc, #468]	; (8000b68 <main+0x4a8>)
 8000992:	f001 f93f 	bl	8001c14 <print>
#endif
		  }

		  // Receiving BTB 0xE2
		  if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv)){
 8000996:	4b75      	ldr	r3, [pc, #468]	; (8000b6c <main+0x4ac>)
 8000998:	4a75      	ldr	r2, [pc, #468]	; (8000b70 <main+0x4b0>)
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4871      	ldr	r0, [pc, #452]	; (8000b64 <main+0x4a4>)
 800099e:	f004 f9bb 	bl	8004d18 <HAL_FDCAN_GetRxMessage>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d01f      	beq.n	80009e8 <main+0x328>
			  if(RxHeader_Inv.Identifier == txID_inversor && RxHeader_Inv.DataLength == 4 && RxData_Inv[0] == BTB && RxData_Inv[2] == 0x00 && RxData_Inv[3] == 0x00){
 80009a8:	4b71      	ldr	r3, [pc, #452]	; (8000b70 <main+0x4b0>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b71      	ldr	r3, [pc, #452]	; (8000b74 <main+0x4b4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d119      	bne.n	80009e8 <main+0x328>
 80009b4:	4b6e      	ldr	r3, [pc, #440]	; (8000b70 <main+0x4b0>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d115      	bne.n	80009e8 <main+0x328>
 80009bc:	4b6b      	ldr	r3, [pc, #428]	; (8000b6c <main+0x4ac>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2be2      	cmp	r3, #226	; 0xe2
 80009c2:	d111      	bne.n	80009e8 <main+0x328>
 80009c4:	4b69      	ldr	r3, [pc, #420]	; (8000b6c <main+0x4ac>)
 80009c6:	789b      	ldrb	r3, [r3, #2]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10d      	bne.n	80009e8 <main+0x328>
 80009cc:	4b67      	ldr	r3, [pc, #412]	; (8000b6c <main+0x4ac>)
 80009ce:	78db      	ldrb	r3, [r3, #3]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d109      	bne.n	80009e8 <main+0x328>
				  if(RxData_Inv[1] == 0x01){
 80009d4:	4b65      	ldr	r3, [pc, #404]	; (8000b6c <main+0x4ac>)
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d105      	bne.n	80009e8 <main+0x328>
					  BTB_inv_1 = 1;
 80009dc:	4b66      	ldr	r3, [pc, #408]	; (8000b78 <main+0x4b8>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
#if DEBUG
	print("CAN_INV: BTB correcto, listo para arrancar");
 80009e2:	4866      	ldr	r0, [pc, #408]	; (8000b7c <main+0x4bc>)
 80009e4:	f001 f916 	bl	8001c14 <print>
	print("CAN_INV: BTB erróneo. No se puede arrancar");
#endif
				  }
			  }
		  }
		  HAL_Delay(DELAY_CONFIG);
 80009e8:	2064      	movs	r0, #100	; 0x64
 80009ea:	f001 fe69 	bl	80026c0 <HAL_Delay>
	  while(BTB_inv_1 == 0){
 80009ee:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <main+0x4b8>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0b4      	beq.n	8000960 <main+0x2a0>
	  }

	  //Transmiting disable
	  TxHeader_Inv.Identifier = rxID_inversor;
 80009f6:	4b58      	ldr	r3, [pc, #352]	; (8000b58 <main+0x498>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a58      	ldr	r2, [pc, #352]	; (8000b5c <main+0x49c>)
 80009fc:	6013      	str	r3, [r2, #0]
	  TxHeader_Inv.DataLength = 3;
 80009fe:	4b57      	ldr	r3, [pc, #348]	; (8000b5c <main+0x49c>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	60da      	str	r2, [r3, #12]
	  TxData_Inv[0] = MODE;
 8000a04:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <main+0x4a0>)
 8000a06:	2251      	movs	r2, #81	; 0x51
 8000a08:	701a      	strb	r2, [r3, #0]
	  TxData_Inv[1] = 0x04;
 8000a0a:	4b55      	ldr	r3, [pc, #340]	; (8000b60 <main+0x4a0>)
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	705a      	strb	r2, [r3, #1]
	  TxData_Inv[2] = 0x00;
 8000a10:	4b53      	ldr	r3, [pc, #332]	; (8000b60 <main+0x4a0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	709a      	strb	r2, [r3, #2]
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a16:	4a52      	ldr	r2, [pc, #328]	; (8000b60 <main+0x4a0>)
 8000a18:	4950      	ldr	r1, [pc, #320]	; (8000b5c <main+0x49c>)
 8000a1a:	4852      	ldr	r0, [pc, #328]	; (8000b64 <main+0x4a4>)
 8000a1c:	f004 f921 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>

	  //Transmitting transmission request enable (hardware)
	  TxHeader_Inv.Identifier = rxID_inversor;
 8000a20:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <main+0x498>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a4d      	ldr	r2, [pc, #308]	; (8000b5c <main+0x49c>)
 8000a26:	6013      	str	r3, [r2, #0]
	  TxHeader_Inv.DataLength = 3;
 8000a28:	4b4c      	ldr	r3, [pc, #304]	; (8000b5c <main+0x49c>)
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	60da      	str	r2, [r3, #12]
	  TxData_Inv[0] = READ;
 8000a2e:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <main+0x4a0>)
 8000a30:	223d      	movs	r2, #61	; 0x3d
 8000a32:	701a      	strb	r2, [r3, #0]
	  TxData_Inv[1] = I_FRG;
 8000a34:	4b4a      	ldr	r3, [pc, #296]	; (8000b60 <main+0x4a0>)
 8000a36:	22e8      	movs	r2, #232	; 0xe8
 8000a38:	705a      	strb	r2, [r3, #1]
	  TxData_Inv[2] = 0x00;
 8000a3a:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <main+0x4a0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	709a      	strb	r2, [r3, #2]
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a40:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <main+0x4a0>)
 8000a42:	4946      	ldr	r1, [pc, #280]	; (8000b5c <main+0x49c>)
 8000a44:	4847      	ldr	r0, [pc, #284]	; (8000b64 <main+0x4a4>)
 8000a46:	f004 f90c 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>

	  while(BTB_inv_2 == 0){
 8000a4a:	e028      	b.n	8000a9e <main+0x3de>
		  //Receiving enable 0xE8
		  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 8000a4c:	4b47      	ldr	r3, [pc, #284]	; (8000b6c <main+0x4ac>)
 8000a4e:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <main+0x4b0>)
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	4844      	ldr	r0, [pc, #272]	; (8000b64 <main+0x4a4>)
 8000a54:	f004 f960 	bl	8004d18 <HAL_FDCAN_GetRxMessage>
		  if(RxHeader_Inv.Identifier == txID_inversor && RxHeader_Inv.DataLength == 4 && RxData_Inv[0] == I_FRG  && RxData_Inv[1] == 0x01 && RxData_Inv[2] == 0x00 && RxData_Inv[3] == 0x00){
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <main+0x4b0>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <main+0x4b4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d119      	bne.n	8000a98 <main+0x3d8>
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <main+0x4b0>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d115      	bne.n	8000a98 <main+0x3d8>
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <main+0x4ac>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2be8      	cmp	r3, #232	; 0xe8
 8000a72:	d111      	bne.n	8000a98 <main+0x3d8>
 8000a74:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <main+0x4ac>)
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d10d      	bne.n	8000a98 <main+0x3d8>
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	; (8000b6c <main+0x4ac>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d109      	bne.n	8000a98 <main+0x3d8>
 8000a84:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <main+0x4ac>)
 8000a86:	78db      	ldrb	r3, [r3, #3]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d105      	bne.n	8000a98 <main+0x3d8>
			  BTB_inv_2 = 1;
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <main+0x4c0>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
#if DEBUG
			  print("CAN_INV: enable 0xE8 recibido correctamente");
 8000a92:	483c      	ldr	r0, [pc, #240]	; (8000b84 <main+0x4c4>)
 8000a94:	f001 f8be 	bl	8001c14 <print>
#endif
		  }
		  HAL_Delay(DELAY_CONFIG);
 8000a98:	2064      	movs	r0, #100	; 0x64
 8000a9a:	f001 fe11 	bl	80026c0 <HAL_Delay>
	  while(BTB_inv_2 == 0){
 8000a9e:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <main+0x4c0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0d2      	beq.n	8000a4c <main+0x38c>
	  }
  }

  //Transmitting no disable (enable)
  TxHeader_Inv.Identifier = rxID_inversor;
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <main+0x498>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a2c      	ldr	r2, [pc, #176]	; (8000b5c <main+0x49c>)
 8000aac:	6013      	str	r3, [r2, #0]
  TxHeader_Inv.DataLength = 3;
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <main+0x49c>)
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	60da      	str	r2, [r3, #12]
  TxData_Inv[0] = MODE;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <main+0x4a0>)
 8000ab6:	2251      	movs	r2, #81	; 0x51
 8000ab8:	701a      	strb	r2, [r3, #0]
  TxData_Inv[1] = 0x00;
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <main+0x4a0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	705a      	strb	r2, [r3, #1]
  TxData_Inv[2] = 0x00;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <main+0x4a0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	709a      	strb	r2, [r3, #2]
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000ac6:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <main+0x4a0>)
 8000ac8:	4924      	ldr	r1, [pc, #144]	; (8000b5c <main+0x49c>)
 8000aca:	4826      	ldr	r0, [pc, #152]	; (8000b64 <main+0x4a4>)
 8000acc:	f004 f8c9 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>

  //Peticiones de envío de datos de telemetría a inversor (*%*)
#if DEBUG
  print("Peticiones inversor");
 8000ad0:	482d      	ldr	r0, [pc, #180]	; (8000b88 <main+0x4c8>)
 8000ad2:	f001 f89f 	bl	8001c14 <print>
#endif

  //Ready To Start
#if DEBUG
  print("RTS");
 8000ad6:	482d      	ldr	r0, [pc, #180]	; (8000b8c <main+0x4cc>)
 8000ad8:	f001 f89c 	bl	8001c14 <print>
#endif

  //Espera a que se pulse el botón de arranque mientras se pisa el freno
  while(boton_arranque == 0){
 8000adc:	e06d      	b.n	8000bba <main+0x4fa>
	  //Enciende el LED del boton para avisar al piloto
	  HAL_GPIO_WritePin(START_BUTTON_LED_GPIO_Port, START_BUTTON_LED_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	482b      	ldr	r0, [pc, #172]	; (8000b90 <main+0x4d0>)
 8000ae4:	f004 fe48 	bl	8005778 <HAL_GPIO_WritePin>

	  start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	482a      	ldr	r0, [pc, #168]	; (8000b94 <main+0x4d4>)
 8000aec:	f004 fe2c 	bl	8005748 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <main+0x4d8>)
 8000af6:	601a      	str	r2, [r3, #0]
	  if(start_button_act == 1 && start_button_ant == 0){
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <main+0x4d8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d15c      	bne.n	8000bba <main+0x4fa>
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <main+0x4dc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d158      	bne.n	8000bba <main+0x4fa>
		  ADC1_Select_SF();
 8000b08:	f001 f910 	bl	8001d2c <ADC1_Select_SF>
		  HAL_ADC_Start(&hadc1);
 8000b0c:	4824      	ldr	r0, [pc, #144]	; (8000ba0 <main+0x4e0>)
 8000b0e:	f002 faef 	bl	80030f0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b12:	f04f 31ff 	mov.w	r1, #4294967295
 8000b16:	4822      	ldr	r0, [pc, #136]	; (8000ba0 <main+0x4e0>)
 8000b18:	f002 fbe8 	bl	80032ec <HAL_ADC_PollForConversion>
		  s_freno= HAL_ADC_GetValue(&hadc1);
 8000b1c:	4820      	ldr	r0, [pc, #128]	; (8000ba0 <main+0x4e0>)
 8000b1e:	f002 fcd9 	bl	80034d4 <HAL_ADC_GetValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <main+0x4e4>)
 8000b28:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8000b2a:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <main+0x4e0>)
 8000b2c:	f002 fbaa 	bl	8003284 <HAL_ADC_Stop>

#if DEBUG
	print("Freno:");
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <main+0x4e8>)
 8000b32:	f001 f86f 	bl	8001c14 <print>
	printValue(s_freno);
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <main+0x4e4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 f888 	bl	8001c50 <printValue>
#endif

		if(s_freno>UMBRAL_FRENO){
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <main+0x4e4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2bd2      	cmp	r3, #210	; 0xd2
 8000b46:	dd35      	ble.n	8000bb4 <main+0x4f4>
			boton_arranque = 1;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <main+0x4ec>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]

#if DEBUG
	print("Coche arrancado correctamente");
 8000b4e:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <main+0x4f0>)
 8000b50:	f001 f860 	bl	8001c14 <print>
 8000b54:	e031      	b.n	8000bba <main+0x4fa>
 8000b56:	bf00      	nop
 8000b58:	24000004 	.word	0x24000004
 8000b5c:	24000474 	.word	0x24000474
 8000b60:	2400050c 	.word	0x2400050c
 8000b64:	240001b4 	.word	0x240001b4
 8000b68:	0800b9fc 	.word	0x0800b9fc
 8000b6c:	24000514 	.word	0x24000514
 8000b70:	24000498 	.word	0x24000498
 8000b74:	24000008 	.word	0x24000008
 8000b78:	240000c8 	.word	0x240000c8
 8000b7c:	0800ba24 	.word	0x0800ba24
 8000b80:	240000cc 	.word	0x240000cc
 8000b84:	0800ba50 	.word	0x0800ba50
 8000b88:	0800ba7c 	.word	0x0800ba7c
 8000b8c:	0800ba90 	.word	0x0800ba90
 8000b90:	58020800 	.word	0x58020800
 8000b94:	58021800 	.word	0x58021800
 8000b98:	2400052c 	.word	0x2400052c
 8000b9c:	24000530 	.word	0x24000530
 8000ba0:	240000d4 	.word	0x240000d4
 8000ba4:	24000548 	.word	0x24000548
 8000ba8:	0800ba94 	.word	0x0800ba94
 8000bac:	240000d0 	.word	0x240000d0
 8000bb0:	0800ba9c 	.word	0x0800ba9c

		}
		else{

#if DEBUG
	print("Pulsar freno para arrancar");
 8000bb4:	48a2      	ldr	r0, [pc, #648]	; (8000e40 <main+0x780>)
 8000bb6:	f001 f82d 	bl	8001c14 <print>
  while(boton_arranque == 0){
 8000bba:	4ba2      	ldr	r3, [pc, #648]	; (8000e44 <main+0x784>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d08d      	beq.n	8000ade <main+0x41e>
	  }
  }

  // Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
  print("RTDS sonando");
 8000bc2:	48a1      	ldr	r0, [pc, #644]	; (8000e48 <main+0x788>)
 8000bc4:	f001 f826 	bl	8001c14 <print>
#endif

  HAL_GPIO_WritePin(START_BUTTON_LED_GPIO_Port, START_BUTTON_LED_Pin, GPIO_PIN_SET); //Apaga LED botón
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	489f      	ldr	r0, [pc, #636]	; (8000e4c <main+0x78c>)
 8000bce:	f004 fdd3 	bl	8005778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); //Enciende RTDS
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	489d      	ldr	r0, [pc, #628]	; (8000e4c <main+0x78c>)
 8000bd8:	f004 fdce 	bl	8005778 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000bdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000be0:	f001 fd6e 	bl	80026c0 <HAL_Delay>
  HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); //Apaga RTDS
 8000be4:	2200      	movs	r2, #0
 8000be6:	2102      	movs	r1, #2
 8000be8:	4898      	ldr	r0, [pc, #608]	; (8000e4c <main+0x78c>)
 8000bea:	f004 fdc5 	bl	8005778 <HAL_GPIO_WritePin>

#if DEBUG
  print("RTDS apagado");
 8000bee:	4898      	ldr	r0, [pc, #608]	; (8000e50 <main+0x790>)
 8000bf0:	f001 f810 	bl	8001c14 <print>
#endif

  // Avisar a resto de ECUs de que pueden comenzar ya a mandar datos al CAN (RTD_all)
  // Inicia telemetria y activa los ventiladores
  TxHeader_Acu.Identifier = ID_RTD_all;
 8000bf4:	4b97      	ldr	r3, [pc, #604]	; (8000e54 <main+0x794>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a97      	ldr	r2, [pc, #604]	; (8000e58 <main+0x798>)
 8000bfa:	6013      	str	r3, [r2, #0]
  TxHeader_Acu.DataLength = 1;
 8000bfc:	4b96      	ldr	r3, [pc, #600]	; (8000e58 <main+0x798>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	60da      	str	r2, [r3, #12]
  TxData_Acu[0] = 1;
 8000c02:	4b96      	ldr	r3, [pc, #600]	; (8000e5c <main+0x79c>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8000c08:	4a94      	ldr	r2, [pc, #592]	; (8000e5c <main+0x79c>)
 8000c0a:	4993      	ldr	r1, [pc, #588]	; (8000e58 <main+0x798>)
 8000c0c:	4894      	ldr	r0, [pc, #592]	; (8000e60 <main+0x7a0>)
 8000c0e:	f004 f828 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
	  // ---------- CONTROL DEL INVERSOR ----------

	  	  // Envío datos inversor
	  	  if(DEBUG /*timer_send_torque_inverter.check**********************/){
	  		  // Leemos sensores de posición del pedal de acelaración
	  		  ADC1_Select_SA1();
 8000c12:	f001 f83b 	bl	8001c8c <ADC1_Select_SA1>
	  		  HAL_ADC_Start(&hadc1);
 8000c16:	4893      	ldr	r0, [pc, #588]	; (8000e64 <main+0x7a4>)
 8000c18:	f002 fa6a 	bl	80030f0 <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	4890      	ldr	r0, [pc, #576]	; (8000e64 <main+0x7a4>)
 8000c22:	f002 fb63 	bl	80032ec <HAL_ADC_PollForConversion>
	  		  s1_aceleracion = HAL_ADC_GetValue(&hadc1);
 8000c26:	488f      	ldr	r0, [pc, #572]	; (8000e64 <main+0x7a4>)
 8000c28:	f002 fc54 	bl	80034d4 <HAL_ADC_GetValue>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b8d      	ldr	r3, [pc, #564]	; (8000e68 <main+0x7a8>)
 8000c32:	601a      	str	r2, [r3, #0]
	  		  HAL_ADC_Stop(&hadc1);
 8000c34:	488b      	ldr	r0, [pc, #556]	; (8000e64 <main+0x7a4>)
 8000c36:	f002 fb25 	bl	8003284 <HAL_ADC_Stop>

	  		  ADC1_Select_SA2();
 8000c3a:	f001 f84f 	bl	8001cdc <ADC1_Select_SA2>
	  		  HAL_ADC_Start(&hadc1);
 8000c3e:	4889      	ldr	r0, [pc, #548]	; (8000e64 <main+0x7a4>)
 8000c40:	f002 fa56 	bl	80030f0 <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	4886      	ldr	r0, [pc, #536]	; (8000e64 <main+0x7a4>)
 8000c4a:	f002 fb4f 	bl	80032ec <HAL_ADC_PollForConversion>
	  		  s2_aceleracion = HAL_ADC_GetValue(&hadc1);
 8000c4e:	4885      	ldr	r0, [pc, #532]	; (8000e64 <main+0x7a4>)
 8000c50:	f002 fc40 	bl	80034d4 <HAL_ADC_GetValue>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b84      	ldr	r3, [pc, #528]	; (8000e6c <main+0x7ac>)
 8000c5a:	601a      	str	r2, [r3, #0]
	  		  HAL_ADC_Stop(&hadc1);
 8000c5c:	4881      	ldr	r0, [pc, #516]	; (8000e64 <main+0x7a4>)
 8000c5e:	f002 fb11 	bl	8003284 <HAL_ADC_Stop>

	  #if DEBUG
	      print("Sensor 1: ");
 8000c62:	4883      	ldr	r0, [pc, #524]	; (8000e70 <main+0x7b0>)
 8000c64:	f000 ffd6 	bl	8001c14 <print>
	      printValue(s1_aceleracion);
 8000c68:	4b7f      	ldr	r3, [pc, #508]	; (8000e68 <main+0x7a8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 ffef 	bl	8001c50 <printValue>
	      print("");
 8000c72:	4880      	ldr	r0, [pc, #512]	; (8000e74 <main+0x7b4>)
 8000c74:	f000 ffce 	bl	8001c14 <print>
	      print("Sensor 2: ");
 8000c78:	487f      	ldr	r0, [pc, #508]	; (8000e78 <main+0x7b8>)
 8000c7a:	f000 ffcb 	bl	8001c14 <print>
	      printValue(s2_aceleracion);
 8000c7e:	4b7b      	ldr	r3, [pc, #492]	; (8000e6c <main+0x7ac>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 ffe4 	bl	8001c50 <printValue>
	      print("");
 8000c88:	487a      	ldr	r0, [pc, #488]	; (8000e74 <main+0x7b4>)
 8000c8a:	f000 ffc3 	bl	8001c14 <print>
	  #endif

	      	// Leemos sensor de freno
	  		  ADC1_Select_SF();
 8000c8e:	f001 f84d 	bl	8001d2c <ADC1_Select_SF>
	  		  HAL_ADC_Start(&hadc1);
 8000c92:	4874      	ldr	r0, [pc, #464]	; (8000e64 <main+0x7a4>)
 8000c94:	f002 fa2c 	bl	80030f0 <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	4871      	ldr	r0, [pc, #452]	; (8000e64 <main+0x7a4>)
 8000c9e:	f002 fb25 	bl	80032ec <HAL_ADC_PollForConversion>
	  		  s_freno = HAL_ADC_GetValue(&hadc1);
 8000ca2:	4870      	ldr	r0, [pc, #448]	; (8000e64 <main+0x7a4>)
 8000ca4:	f002 fc16 	bl	80034d4 <HAL_ADC_GetValue>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b73      	ldr	r3, [pc, #460]	; (8000e7c <main+0x7bc>)
 8000cae:	601a      	str	r2, [r3, #0]
	  		  HAL_ADC_Stop(&hadc1);
 8000cb0:	486c      	ldr	r0, [pc, #432]	; (8000e64 <main+0x7a4>)
 8000cb2:	f002 fae7 	bl	8003284 <HAL_ADC_Stop>
	  #if DEBUG
	      print("Sensor freno: ");
 8000cb6:	4872      	ldr	r0, [pc, #456]	; (8000e80 <main+0x7c0>)
 8000cb8:	f000 ffac 	bl	8001c14 <print>
	      printValue(s_freno);
 8000cbc:	4b6f      	ldr	r3, [pc, #444]	; (8000e7c <main+0x7bc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 ffc5 	bl	8001c50 <printValue>
	  #endif

	  		// Calculamos % torque  en función de la posición de los sensores
	  		s1_aceleracion_aux = (s1_aceleracion - 68) / (6.41 - 0.68);
 8000cc6:	4b68      	ldr	r3, [pc, #416]	; (8000e68 <main+0x7a8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3b44      	subs	r3, #68	; 0x44
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cd4:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8000e30 <main+0x770>
 8000cd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce0:	4b68      	ldr	r3, [pc, #416]	; (8000e84 <main+0x7c4>)
 8000ce2:	edc3 7a00 	vstr	s15, [r3]
	  		if(s1_aceleracion_aux < 0) s1_aceleracion_aux = 0;
 8000ce6:	4b67      	ldr	r3, [pc, #412]	; (8000e84 <main+0x7c4>)
 8000ce8:	edd3 7a00 	vldr	s15, [r3]
 8000cec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	d503      	bpl.n	8000cfe <main+0x63e>
 8000cf6:	4b63      	ldr	r3, [pc, #396]	; (8000e84 <main+0x7c4>)
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
	  		s2_aceleracion_aux = (s2_aceleracion - 18) / (6.56 - 0.18);
 8000cfe:	4b5b      	ldr	r3, [pc, #364]	; (8000e6c <main+0x7ac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3b12      	subs	r3, #18
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d0c:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000e38 <main+0x778>
 8000d10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d18:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <main+0x7c8>)
 8000d1a:	edc3 7a00 	vstr	s15, [r3]
	  		if(s2_aceleracion_aux < 0) s2_aceleracion_aux = 0;
 8000d1e:	4b5a      	ldr	r3, [pc, #360]	; (8000e88 <main+0x7c8>)
 8000d20:	edd3 7a00 	vldr	s15, [r3]
 8000d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	d503      	bpl.n	8000d36 <main+0x676>
 8000d2e:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <main+0x7c8>)
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

	  #if DEBUG
	  	print("Sensor % 1: ");
 8000d36:	4855      	ldr	r0, [pc, #340]	; (8000e8c <main+0x7cc>)
 8000d38:	f000 ff6c 	bl	8001c14 <print>
	      printValue(s1_aceleracion_aux);
 8000d3c:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <main+0x7c4>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d46:	ee17 0a90 	vmov	r0, s15
 8000d4a:	f000 ff81 	bl	8001c50 <printValue>
	      print("");
 8000d4e:	4849      	ldr	r0, [pc, #292]	; (8000e74 <main+0x7b4>)
 8000d50:	f000 ff60 	bl	8001c14 <print>
	      print("Sensor % 2: ");
 8000d54:	484e      	ldr	r0, [pc, #312]	; (8000e90 <main+0x7d0>)
 8000d56:	f000 ff5d 	bl	8001c14 <print>
	      printValue(s2_aceleracion_aux);
 8000d5a:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <main+0x7c8>)
 8000d5c:	edd3 7a00 	vldr	s15, [r3]
 8000d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d64:	ee17 0a90 	vmov	r0, s15
 8000d68:	f000 ff72 	bl	8001c50 <printValue>
	      print("");
 8000d6c:	4841      	ldr	r0, [pc, #260]	; (8000e74 <main+0x7b4>)
 8000d6e:	f000 ff51 	bl	8001c14 <print>
	  #endif

	  		// Torque enviado es la media de los dos sensores
	  		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <main+0x7c4>)
 8000d74:	ed93 7a00 	vldr	s14, [r3]
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <main+0x7c8>)
 8000d7a:	edd3 7a00 	vldr	s15, [r3]
 8000d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8e:	ee17 2a90 	vmov	r2, s15
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <main+0x7d4>)
 8000d94:	601a      	str	r2, [r3, #0]

	  		// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	  		if (torque_total < 5)
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <main+0x7d4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	dc03      	bgt.n	8000da6 <main+0x6e6>
	  		{
	  		  torque_total = 0;
 8000d9e:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <main+0x7d4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e006      	b.n	8000db4 <main+0x6f4>
	  		}
	  		else if (torque_total > 90)
 8000da6:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <main+0x7d4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b5a      	cmp	r3, #90	; 0x5a
 8000dac:	dd02      	ble.n	8000db4 <main+0x6f4>
	  		{
	  		  torque_total = 100;
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <main+0x7d4>)
 8000db0:	2264      	movs	r2, #100	; 0x64
 8000db2:	601a      	str	r2, [r3, #0]
	  		}

	  	    // Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	  	    // En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	  	    // solo si el acelerador vuelve por debajo del 5%
	  	    if (s_freno > UMBRAL_FRENO_APPS && torque_total > 70)
 8000db4:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <main+0x7bc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000dbc:	dd07      	ble.n	8000dce <main+0x70e>
 8000dbe:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <main+0x7d4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b46      	cmp	r3, #70	; 0x46
 8000dc4:	dd03      	ble.n	8000dce <main+0x70e>
	  	    {
	  	      flag_EV_2_3 = 1;
 8000dc6:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <main+0x7d8>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e00b      	b.n	8000de6 <main+0x726>
	  	    }
	  	    else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8000dce:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <main+0x7bc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000dd6:	da06      	bge.n	8000de6 <main+0x726>
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <main+0x7d4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	dc02      	bgt.n	8000de6 <main+0x726>
	  	    {
	  	      flag_EV_2_3 = 0;
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <main+0x7d8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
	  	    }

	  	    // T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	  	    // pedal travel between any of the used APPSs
	  	    if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8000de6:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <main+0x7c4>)
 8000de8:	ed93 7a00 	vldr	s14, [r3]
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <main+0x7c8>)
 8000dee:	edd3 7a00 	vldr	s15, [r3]
 8000df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfa:	ee17 3a90 	vmov	r3, s15
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bfb8      	it	lt
 8000e02:	425b      	neglt	r3, r3
 8000e04:	2b0a      	cmp	r3, #10
 8000e06:	dd4f      	ble.n	8000ea8 <main+0x7e8>
	  	    {
	  	      count_T11_8_9 = count_T11_8_9 + 1;
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <main+0x7dc>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <main+0x7dc>)
 8000e10:	6013      	str	r3, [r2, #0]
	  	      if (count_T11_8_9 * periodo_inv > 100)
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <main+0x7dc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <main+0x7e0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	2b64      	cmp	r3, #100	; 0x64
 8000e22:	d947      	bls.n	8000eb4 <main+0x7f4>
	  	      {
	  	        flag_T11_8_9 = 1;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <main+0x7e4>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e043      	b.n	8000eb4 <main+0x7f4>
 8000e2c:	f3af 8000 	nop.w
 8000e30:	1eb851ec 	.word	0x1eb851ec
 8000e34:	4016eb85 	.word	0x4016eb85
 8000e38:	b851eb85 	.word	0xb851eb85
 8000e3c:	4019851e 	.word	0x4019851e
 8000e40:	0800babc 	.word	0x0800babc
 8000e44:	240000d0 	.word	0x240000d0
 8000e48:	0800bad8 	.word	0x0800bad8
 8000e4c:	58020800 	.word	0x58020800
 8000e50:	0800bae8 	.word	0x0800bae8
 8000e54:	2400000c 	.word	0x2400000c
 8000e58:	240004c0 	.word	0x240004c0
 8000e5c:	2400051c 	.word	0x2400051c
 8000e60:	24000254 	.word	0x24000254
 8000e64:	240000d4 	.word	0x240000d4
 8000e68:	24000538 	.word	0x24000538
 8000e6c:	2400053c 	.word	0x2400053c
 8000e70:	0800baf8 	.word	0x0800baf8
 8000e74:	0800bb04 	.word	0x0800bb04
 8000e78:	0800bb08 	.word	0x0800bb08
 8000e7c:	24000548 	.word	0x24000548
 8000e80:	0800bb14 	.word	0x0800bb14
 8000e84:	24000540 	.word	0x24000540
 8000e88:	24000544 	.word	0x24000544
 8000e8c:	0800bb24 	.word	0x0800bb24
 8000e90:	0800bb34 	.word	0x0800bb34
 8000e94:	24000550 	.word	0x24000550
 8000e98:	24000558 	.word	0x24000558
 8000e9c:	24000560 	.word	0x24000560
 8000ea0:	24000000 	.word	0x24000000
 8000ea4:	2400055c 	.word	0x2400055c
	  	      }
	  	    }
	  	    else
	  	    {
	  	      count_T11_8_9 = 0;
 8000ea8:	4bb3      	ldr	r3, [pc, #716]	; (8001178 <main+0xab8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
	  	      flag_T11_8_9 = 0;
 8000eae:	4bb3      	ldr	r3, [pc, #716]	; (800117c <main+0xabc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
	  	    }

	  	    if (flag_EV_2_3 || flag_T11_8_9)
 8000eb4:	4bb2      	ldr	r3, [pc, #712]	; (8001180 <main+0xac0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <main+0x804>
 8000ebc:	4baf      	ldr	r3, [pc, #700]	; (800117c <main+0xabc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <main+0x80a>
	  	    {
	  	      torque_total = 0;
 8000ec4:	4baf      	ldr	r3, [pc, #700]	; (8001184 <main+0xac4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
	  	    }

	  #if DEBUG
	  	    print("Torque total solicitado: ");
 8000eca:	48af      	ldr	r0, [pc, #700]	; (8001188 <main+0xac8>)
 8000ecc:	f000 fea2 	bl	8001c14 <print>
	  	    printValue(torque_total);
 8000ed0:	4bac      	ldr	r3, [pc, #688]	; (8001184 <main+0xac4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 febb 	bl	8001c50 <printValue>
	  #endif

	  	    // Limitación del torque en función de la carga
	  	    if (v_celda_min < 3500)
 8000eda:	4bac      	ldr	r3, [pc, #688]	; (800118c <main+0xacc>)
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001190 <main+0xad0>
 8000ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	d53a      	bpl.n	8000f64 <main+0x8a4>
	  	    {
	  	      if (v_celda_min > 2800)
 8000eee:	4ba7      	ldr	r3, [pc, #668]	; (800118c <main+0xacc>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001194 <main+0xad4>
 8000ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f00:	dd1f      	ble.n	8000f42 <main+0x882>
	  	      {
	  	        torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8000f02:	4ba0      	ldr	r3, [pc, #640]	; (8001184 <main+0xac4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f0e:	4b9f      	ldr	r3, [pc, #636]	; (800118c <main+0xacc>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f18:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001140 <main+0xa80>
 8000f1c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f20:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001148 <main+0xa88>
 8000f24:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000f28:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f2c:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001150 <main+0xa90>
 8000f30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f38:	ee17 2a90 	vmov	r2, s15
 8000f3c:	4b96      	ldr	r3, [pc, #600]	; (8001198 <main+0xad8>)
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e014      	b.n	8000f6c <main+0x8ac>
	  	      }
	  	      else
	  	      {
	  	        torque_limitado = torque_total * 0.05;
 8000f42:	4b90      	ldr	r3, [pc, #576]	; (8001184 <main+0xac4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f4e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8001158 <main+0xa98>
 8000f52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f5a:	ee17 2a90 	vmov	r2, s15
 8000f5e:	4b8e      	ldr	r3, [pc, #568]	; (8001198 <main+0xad8>)
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e003      	b.n	8000f6c <main+0x8ac>
	  	      }
	  	    }
	  	    else
	  	    {
	  	      torque_limitado = torque_total;
 8000f64:	4b87      	ldr	r3, [pc, #540]	; (8001184 <main+0xac4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a8b      	ldr	r2, [pc, #556]	; (8001198 <main+0xad8>)
 8000f6a:	6013      	str	r3, [r2, #0]
	  	    }

	  #if DEBUG
	  	    print("Torque limitado en: ");
 8000f6c:	488b      	ldr	r0, [pc, #556]	; (800119c <main+0xadc>)
 8000f6e:	f000 fe51 	bl	8001c14 <print>
	  	    printValue(torque_limitado);
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <main+0xad8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fe6a 	bl	8001c50 <printValue>
	  #endif

	  	    //Envío de torque al inversor
	  	    TxHeader_Inv.Identifier = rxID_inversor;
 8000f7c:	4b88      	ldr	r3, [pc, #544]	; (80011a0 <main+0xae0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a88      	ldr	r2, [pc, #544]	; (80011a4 <main+0xae4>)
 8000f82:	6013      	str	r3, [r2, #0]
	  	    TxHeader_Inv.DataLength = 3;
 8000f84:	4b87      	ldr	r3, [pc, #540]	; (80011a4 <main+0xae4>)
 8000f86:	2203      	movs	r2, #3
 8000f88:	60da      	str	r2, [r3, #12]
	  	    TxData_Inv[0] = TORQUE;
 8000f8a:	4b87      	ldr	r3, [pc, #540]	; (80011a8 <main+0xae8>)
 8000f8c:	2290      	movs	r2, #144	; 0x90
 8000f8e:	701a      	strb	r2, [r3, #0]
	  	    TxData_Inv[1] = ((int)(torque_limitado * TORQUE_CONV_100 / 100.0)) & 0xFF; // bits del 0-7
 8000f90:	4b81      	ldr	r3, [pc, #516]	; (8001198 <main+0xad8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f245 5255 	movw	r2, #21845	; 0x5555
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fa4:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8001160 <main+0xaa0>
 8000fa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fb0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fb4:	793a      	ldrb	r2, [r7, #4]
 8000fb6:	4b7c      	ldr	r3, [pc, #496]	; (80011a8 <main+0xae8>)
 8000fb8:	705a      	strb	r2, [r3, #1]
	  	    TxData_Inv[2] = ((int)(torque_limitado * TORQUE_CONV_100 / 100.0)) >> 8;   // bits del 8-15
 8000fba:	4b77      	ldr	r3, [pc, #476]	; (8001198 <main+0xad8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f245 5255 	movw	r2, #21845	; 0x5555
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fce:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8001160 <main+0xaa0>
 8000fd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fd6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fda:	ee17 3a90 	vmov	r3, s15
 8000fde:	121b      	asrs	r3, r3, #8
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <main+0xae8>)
 8000fe4:	709a      	strb	r2, [r3, #2]
	  	    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000fe6:	4a70      	ldr	r2, [pc, #448]	; (80011a8 <main+0xae8>)
 8000fe8:	496e      	ldr	r1, [pc, #440]	; (80011a4 <main+0xae4>)
 8000fea:	4870      	ldr	r0, [pc, #448]	; (80011ac <main+0xaec>)
 8000fec:	f003 fe39 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>

	  	    // Envío telemetría aceleración y freno
	  	    TxHeader_Acu.Identifier = ID_torque_total;
 8000ff0:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <main+0xaf0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a6f      	ldr	r2, [pc, #444]	; (80011b4 <main+0xaf4>)
 8000ff6:	6013      	str	r3, [r2, #0]
	  	    TxHeader_Acu.DataLength = 2;
 8000ff8:	4b6e      	ldr	r3, [pc, #440]	; (80011b4 <main+0xaf4>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	60da      	str	r2, [r3, #12]
	  	    TxData_Acu[0] = ((int)torque_limitado) >> 8;
 8000ffe:	4b66      	ldr	r3, [pc, #408]	; (8001198 <main+0xad8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	121b      	asrs	r3, r3, #8
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b6c      	ldr	r3, [pc, #432]	; (80011b8 <main+0xaf8>)
 8001008:	701a      	strb	r2, [r3, #0]
	  	    TxData_Acu[1] = ((int)torque_limitado);
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <main+0xad8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <main+0xaf8>)
 8001012:	705a      	strb	r2, [r3, #1]
	  	    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8001014:	4a68      	ldr	r2, [pc, #416]	; (80011b8 <main+0xaf8>)
 8001016:	4967      	ldr	r1, [pc, #412]	; (80011b4 <main+0xaf4>)
 8001018:	4868      	ldr	r0, [pc, #416]	; (80011bc <main+0xafc>)
 800101a:	f003 fe22 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>

	  	    s_freno_aux = s_freno;
 800101e:	4b68      	ldr	r3, [pc, #416]	; (80011c0 <main+0xb00>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102a:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <main+0xb04>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
	  	    s_freno_aux=(s_freno_aux-121.0)/572.0*100.0;
 8001030:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <main+0xb04>)
 8001032:	edd3 7a00 	vldr	s15, [r3]
 8001036:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800103a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001168 <main+0xaa8>
 800103e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001042:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001170 <main+0xab0>
 8001046:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800104a:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001160 <main+0xaa0>
 800104e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001052:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001056:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <main+0xb04>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
	  	    TxHeader_Acu.Identifier = ID_s_freno;
 800105c:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <main+0xb08>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a54      	ldr	r2, [pc, #336]	; (80011b4 <main+0xaf4>)
 8001062:	6013      	str	r3, [r2, #0]
	  	   	TxHeader_Acu.DataLength = 2;
 8001064:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <main+0xaf4>)
 8001066:	2202      	movs	r2, #2
 8001068:	60da      	str	r2, [r3, #12]
	  	   	TxData_Acu[0] = ((int)s_freno_aux) >> 8;
 800106a:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <main+0xb04>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001074:	ee17 3a90 	vmov	r3, s15
 8001078:	121b      	asrs	r3, r3, #8
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b4e      	ldr	r3, [pc, #312]	; (80011b8 <main+0xaf8>)
 800107e:	701a      	strb	r2, [r3, #0]
	  	   	TxData_Acu[1] = ((int)s_freno_aux);
 8001080:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <main+0xb04>)
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108a:	edc7 7a01 	vstr	s15, [r7, #4]
 800108e:	793a      	ldrb	r2, [r7, #4]
 8001090:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <main+0xaf8>)
 8001092:	705a      	strb	r2, [r3, #1]
	  	   	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8001094:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <main+0xaf8>)
 8001096:	4947      	ldr	r1, [pc, #284]	; (80011b4 <main+0xaf4>)
 8001098:	4848      	ldr	r0, [pc, #288]	; (80011bc <main+0xafc>)
 800109a:	f003 fde2 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
	  	  }

	  	  // Envío datos telemetría
	  	  if(DEBUG){
	  		  while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv) == HAL_OK){
 800109e:	e12b      	b.n	80012f8 <main+0xc38>
	  			  if(RxHeader_Inv.Identifier == txID_inversor){
 80010a0:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <main+0xb0c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <main+0xb10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8125 	bne.w	80012f8 <main+0xc38>
	  				  switch(RxData_Inv[0]){
 80010ae:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <main+0xb14>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2beb      	cmp	r3, #235	; 0xeb
 80010b4:	f000 8090 	beq.w	80011d8 <main+0xb18>
 80010b8:	2beb      	cmp	r3, #235	; 0xeb
 80010ba:	f300 811c 	bgt.w	80012f6 <main+0xc36>
 80010be:	2b30      	cmp	r3, #48	; 0x30
 80010c0:	f000 80ef 	beq.w	80012a2 <main+0xbe2>
 80010c4:	2b30      	cmp	r3, #48	; 0x30
 80010c6:	f2c0 8116 	blt.w	80012f6 <main+0xc36>
 80010ca:	2b5f      	cmp	r3, #95	; 0x5f
 80010cc:	f300 8113 	bgt.w	80012f6 <main+0xc36>
 80010d0:	2b49      	cmp	r3, #73	; 0x49
 80010d2:	f2c0 8110 	blt.w	80012f6 <main+0xc36>
 80010d6:	3b49      	subs	r3, #73	; 0x49
 80010d8:	2b16      	cmp	r3, #22
 80010da:	f200 810c 	bhi.w	80012f6 <main+0xc36>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <main+0xa24>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	08001225 	.word	0x08001225
 80010e8:	0800124f 	.word	0x0800124f
 80010ec:	08001279 	.word	0x08001279
 80010f0:	080012f7 	.word	0x080012f7
 80010f4:	080012f7 	.word	0x080012f7
 80010f8:	080012f7 	.word	0x080012f7
 80010fc:	080012f7 	.word	0x080012f7
 8001100:	080012f7 	.word	0x080012f7
 8001104:	080012f7 	.word	0x080012f7
 8001108:	080012f7 	.word	0x080012f7
 800110c:	080012f7 	.word	0x080012f7
 8001110:	080012f7 	.word	0x080012f7
 8001114:	080012f7 	.word	0x080012f7
 8001118:	080012f7 	.word	0x080012f7
 800111c:	080012f7 	.word	0x080012f7
 8001120:	080012f7 	.word	0x080012f7
 8001124:	080012f7 	.word	0x080012f7
 8001128:	080012f7 	.word	0x080012f7
 800112c:	080012f7 	.word	0x080012f7
 8001130:	080012f7 	.word	0x080012f7
 8001134:	080012f7 	.word	0x080012f7
 8001138:	080012f7 	.word	0x080012f7
 800113c:	080012cd 	.word	0x080012cd
 8001140:	a1cac083 	.word	0xa1cac083
 8001144:	3ff5b645 	.word	0x3ff5b645
 8001148:	00000000 	.word	0x00000000
 800114c:	40ad4c00 	.word	0x40ad4c00
 8001150:	00000000 	.word	0x00000000
 8001154:	408f4000 	.word	0x408f4000
 8001158:	9999999a 	.word	0x9999999a
 800115c:	3fa99999 	.word	0x3fa99999
 8001160:	00000000 	.word	0x00000000
 8001164:	40590000 	.word	0x40590000
 8001168:	00000000 	.word	0x00000000
 800116c:	405e4000 	.word	0x405e4000
 8001170:	00000000 	.word	0x00000000
 8001174:	4081e000 	.word	0x4081e000
 8001178:	24000560 	.word	0x24000560
 800117c:	2400055c 	.word	0x2400055c
 8001180:	24000558 	.word	0x24000558
 8001184:	24000550 	.word	0x24000550
 8001188:	0800bb44 	.word	0x0800bb44
 800118c:	24000038 	.word	0x24000038
 8001190:	455ac000 	.word	0x455ac000
 8001194:	452f0000 	.word	0x452f0000
 8001198:	24000554 	.word	0x24000554
 800119c:	0800bb60 	.word	0x0800bb60
 80011a0:	24000004 	.word	0x24000004
 80011a4:	24000474 	.word	0x24000474
 80011a8:	2400050c 	.word	0x2400050c
 80011ac:	240001b4 	.word	0x240001b4
 80011b0:	24000020 	.word	0x24000020
 80011b4:	240004c0 	.word	0x240004c0
 80011b8:	2400051c 	.word	0x2400051c
 80011bc:	24000254 	.word	0x24000254
 80011c0:	24000548 	.word	0x24000548
 80011c4:	2400054c 	.word	0x2400054c
 80011c8:	2400001c 	.word	0x2400001c
 80011cc:	24000498 	.word	0x24000498
 80011d0:	24000008 	.word	0x24000008
 80011d4:	24000514 	.word	0x24000514
	  				  case DC_BUS_VOLTAGE:
	  					  TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80011d8:	4b64      	ldr	r3, [pc, #400]	; (800136c <main+0xcac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a64      	ldr	r2, [pc, #400]	; (8001370 <main+0xcb0>)
 80011de:	6013      	str	r3, [r2, #0]
	  					  TxHeader_Acu.DataLength = 2;
 80011e0:	4b63      	ldr	r3, [pc, #396]	; (8001370 <main+0xcb0>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	60da      	str	r2, [r3, #12]
	  					  inv_dc_bus_voltage = ((int)RxData_Inv[2] << 8 | (int)RxData_Inv[1]) / CONV_DC_BUS_VOLTAGE;
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <main+0xcb4>)
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	4a61      	ldr	r2, [pc, #388]	; (8001374 <main+0xcb4>)
 80011ee:	7852      	ldrb	r2, [r2, #1]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	4a61      	ldr	r2, [pc, #388]	; (8001378 <main+0xcb8>)
 80011f4:	fb82 1203 	smull	r1, r2, r2, r3
 80011f8:	1052      	asrs	r2, r2, #1
 80011fa:	17db      	asrs	r3, r3, #31
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4a5f      	ldr	r2, [pc, #380]	; (800137c <main+0xcbc>)
 8001200:	6013      	str	r3, [r2, #0]
	  					  TxData_Acu[0] = inv_dc_bus_voltage >> 8 & 0xFF;
 8001202:	4b5e      	ldr	r3, [pc, #376]	; (800137c <main+0xcbc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	121b      	asrs	r3, r3, #8
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <main+0xcc0>)
 800120c:	701a      	strb	r2, [r3, #0]
	  					  TxData_Acu[1] = inv_dc_bus_voltage & 0xFF;
 800120e:	4b5b      	ldr	r3, [pc, #364]	; (800137c <main+0xcbc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b5a      	ldr	r3, [pc, #360]	; (8001380 <main+0xcc0>)
 8001216:	705a      	strb	r2, [r3, #1]
	  					  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8001218:	4a59      	ldr	r2, [pc, #356]	; (8001380 <main+0xcc0>)
 800121a:	4955      	ldr	r1, [pc, #340]	; (8001370 <main+0xcb0>)
 800121c:	4859      	ldr	r0, [pc, #356]	; (8001384 <main+0xcc4>)
 800121e:	f003 fd20 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
	  					  break;
 8001222:	e069      	b.n	80012f8 <main+0xc38>

	  				  case T_MOTOR:
	  					  TxHeader_Acu.Identifier = ID_t_motor;
 8001224:	4b58      	ldr	r3, [pc, #352]	; (8001388 <main+0xcc8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a51      	ldr	r2, [pc, #324]	; (8001370 <main+0xcb0>)
 800122a:	6013      	str	r3, [r2, #0]
	  					  TxHeader_Acu.DataLength = 2;
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <main+0xcb0>)
 800122e:	2202      	movs	r2, #2
 8001230:	60da      	str	r2, [r3, #12]
	  					  TxData_Acu[0] = RxData_Inv[2];
 8001232:	4b50      	ldr	r3, [pc, #320]	; (8001374 <main+0xcb4>)
 8001234:	789a      	ldrb	r2, [r3, #2]
 8001236:	4b52      	ldr	r3, [pc, #328]	; (8001380 <main+0xcc0>)
 8001238:	701a      	strb	r2, [r3, #0]
	  					  TxData_Acu[1] = RxData_Inv[1];
 800123a:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <main+0xcb4>)
 800123c:	785a      	ldrb	r2, [r3, #1]
 800123e:	4b50      	ldr	r3, [pc, #320]	; (8001380 <main+0xcc0>)
 8001240:	705a      	strb	r2, [r3, #1]
	  					  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8001242:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <main+0xcc0>)
 8001244:	494a      	ldr	r1, [pc, #296]	; (8001370 <main+0xcb0>)
 8001246:	484f      	ldr	r0, [pc, #316]	; (8001384 <main+0xcc4>)
 8001248:	f003 fd0b 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
	  					  break;
 800124c:	e054      	b.n	80012f8 <main+0xc38>

	  				  case T_IGBT:
	  					  TxHeader_Acu.Identifier = ID_t_igbt;
 800124e:	4b4f      	ldr	r3, [pc, #316]	; (800138c <main+0xccc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a47      	ldr	r2, [pc, #284]	; (8001370 <main+0xcb0>)
 8001254:	6013      	str	r3, [r2, #0]
	  					  TxHeader_Acu.DataLength = 2;
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <main+0xcb0>)
 8001258:	2202      	movs	r2, #2
 800125a:	60da      	str	r2, [r3, #12]
	  					  TxData_Acu[0] = RxData_Inv[2];
 800125c:	4b45      	ldr	r3, [pc, #276]	; (8001374 <main+0xcb4>)
 800125e:	789a      	ldrb	r2, [r3, #2]
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <main+0xcc0>)
 8001262:	701a      	strb	r2, [r3, #0]
	  					  TxData_Acu[1] = RxData_Inv[1];
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <main+0xcb4>)
 8001266:	785a      	ldrb	r2, [r3, #1]
 8001268:	4b45      	ldr	r3, [pc, #276]	; (8001380 <main+0xcc0>)
 800126a:	705a      	strb	r2, [r3, #1]
	  					  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 800126c:	4a44      	ldr	r2, [pc, #272]	; (8001380 <main+0xcc0>)
 800126e:	4940      	ldr	r1, [pc, #256]	; (8001370 <main+0xcb0>)
 8001270:	4844      	ldr	r0, [pc, #272]	; (8001384 <main+0xcc4>)
 8001272:	f003 fcf6 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
	  					  break;
 8001276:	e03f      	b.n	80012f8 <main+0xc38>

	  				  case T_AIR:
	  					  TxHeader_Acu.Identifier = ID_t_air;
 8001278:	4b45      	ldr	r3, [pc, #276]	; (8001390 <main+0xcd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a3c      	ldr	r2, [pc, #240]	; (8001370 <main+0xcb0>)
 800127e:	6013      	str	r3, [r2, #0]
	  					  TxHeader_Acu.DataLength = 2;
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <main+0xcb0>)
 8001282:	2202      	movs	r2, #2
 8001284:	60da      	str	r2, [r3, #12]
	  					  TxData_Acu[0] = RxData_Inv[2];
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <main+0xcb4>)
 8001288:	789a      	ldrb	r2, [r3, #2]
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <main+0xcc0>)
 800128c:	701a      	strb	r2, [r3, #0]
	  					  TxData_Acu[1] = RxData_Inv[1];
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <main+0xcb4>)
 8001290:	785a      	ldrb	r2, [r3, #1]
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <main+0xcc0>)
 8001294:	705a      	strb	r2, [r3, #1]
	  					  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8001296:	4a3a      	ldr	r2, [pc, #232]	; (8001380 <main+0xcc0>)
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <main+0xcb0>)
 800129a:	483a      	ldr	r0, [pc, #232]	; (8001384 <main+0xcc4>)
 800129c:	f003 fce1 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
	  					  break;
 80012a0:	e02a      	b.n	80012f8 <main+0xc38>

	  				  case N_ACTUAL:
	  					  TxHeader_Acu.Identifier = ID_n_actual;
 80012a2:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <main+0xcd4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a32      	ldr	r2, [pc, #200]	; (8001370 <main+0xcb0>)
 80012a8:	6013      	str	r3, [r2, #0]
	  					  TxHeader_Acu.DataLength = 2;
 80012aa:	4b31      	ldr	r3, [pc, #196]	; (8001370 <main+0xcb0>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	60da      	str	r2, [r3, #12]
	  					  TxData_Acu[0] = RxData_Inv[2];
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <main+0xcb4>)
 80012b2:	789a      	ldrb	r2, [r3, #2]
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <main+0xcc0>)
 80012b6:	701a      	strb	r2, [r3, #0]
	  					  TxData_Acu[1] = RxData_Inv[1];
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <main+0xcb4>)
 80012ba:	785a      	ldrb	r2, [r3, #1]
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <main+0xcc0>)
 80012be:	705a      	strb	r2, [r3, #1]
	  					  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 80012c0:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <main+0xcc0>)
 80012c2:	492b      	ldr	r1, [pc, #172]	; (8001370 <main+0xcb0>)
 80012c4:	482f      	ldr	r0, [pc, #188]	; (8001384 <main+0xcc4>)
 80012c6:	f003 fccc 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
	  					  break;
 80012ca:	e015      	b.n	80012f8 <main+0xc38>

	  				  case I_ACTUAL:
	  					  TxHeader_Acu.Identifier = ID_i_actual;
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <main+0xcd8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <main+0xcb0>)
 80012d2:	6013      	str	r3, [r2, #0]
	  					  TxHeader_Acu.DataLength = 2;
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <main+0xcb0>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	60da      	str	r2, [r3, #12]
	  					  TxData_Acu[0] = RxData_Inv[2];
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <main+0xcb4>)
 80012dc:	789a      	ldrb	r2, [r3, #2]
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <main+0xcc0>)
 80012e0:	701a      	strb	r2, [r3, #0]
	  					  TxData_Acu[1] = RxData_Inv[1];
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <main+0xcb4>)
 80012e4:	785a      	ldrb	r2, [r3, #1]
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <main+0xcc0>)
 80012e8:	705a      	strb	r2, [r3, #1]
	  					  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 80012ea:	4a25      	ldr	r2, [pc, #148]	; (8001380 <main+0xcc0>)
 80012ec:	4920      	ldr	r1, [pc, #128]	; (8001370 <main+0xcb0>)
 80012ee:	4825      	ldr	r0, [pc, #148]	; (8001384 <main+0xcc4>)
 80012f0:	f003 fcb7 	bl	8004c62 <HAL_FDCAN_AddMessageToTxFifoQ>
	  					  break;
 80012f4:	e000      	b.n	80012f8 <main+0xc38>
	  				  default:
	  					  break;
 80012f6:	bf00      	nop
	  		  while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv) == HAL_OK){
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <main+0xcb4>)
 80012fa:	4a28      	ldr	r2, [pc, #160]	; (800139c <main+0xcdc>)
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	4828      	ldr	r0, [pc, #160]	; (80013a0 <main+0xce0>)
 8001300:	f003 fd0a 	bl	8004d18 <HAL_FDCAN_GetRxMessage>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	f43f aeca 	beq.w	80010a0 <main+0x9e0>
	  			  }
	  		  }
	  	  }

	  	  //Valor tensión celda mínima
	  	  if(HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_Acu, RxData_Acu)){
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <main+0xce4>)
 800130e:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <main+0xce8>)
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	481c      	ldr	r0, [pc, #112]	; (8001384 <main+0xcc4>)
 8001314:	f003 fd00 	bl	8004d18 <HAL_FDCAN_GetRxMessage>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	f43f ac79 	beq.w	8000c12 <main+0x552>
	  		  if(RxHeader_Acu.Identifier == ID_v_celda_min && RxHeader_Acu.DataLength == 2){
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <main+0xce8>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <main+0xcec>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	f47f ac72 	bne.w	8000c12 <main+0x552>
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <main+0xce8>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b02      	cmp	r3, #2
 8001334:	f47f ac6d 	bne.w	8000c12 <main+0x552>
	  			  v_celda_min = ((int)RxData_Acu[0]<<8 | (int)RxData_Acu[1]);
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <main+0xce4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <main+0xce4>)
 8001340:	7852      	ldrb	r2, [r2, #1]
 8001342:	4313      	orrs	r3, r2
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <main+0xcf0>)
 800134e:	edc3 7a00 	vstr	s15, [r3]
	  #if DEBUG
	  		print("Tensión minima de la celdas: ");
 8001352:	4818      	ldr	r0, [pc, #96]	; (80013b4 <main+0xcf4>)
 8001354:	f000 fc5e 	bl	8001c14 <print>
	  		printValue(v_celda_min);
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <main+0xcf0>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001362:	ee17 0a90 	vmov	r0, s15
 8001366:	f000 fc73 	bl	8001c50 <printValue>
	  	  if(DEBUG /*timer_send_torque_inverter.check**********************/){
 800136a:	e452      	b.n	8000c12 <main+0x552>
 800136c:	24000010 	.word	0x24000010
 8001370:	240004c0 	.word	0x240004c0
 8001374:	24000514 	.word	0x24000514
 8001378:	094f2095 	.word	0x094f2095
 800137c:	24000534 	.word	0x24000534
 8001380:	2400051c 	.word	0x2400051c
 8001384:	24000254 	.word	0x24000254
 8001388:	24000024 	.word	0x24000024
 800138c:	24000028 	.word	0x24000028
 8001390:	2400002c 	.word	0x2400002c
 8001394:	24000030 	.word	0x24000030
 8001398:	24000034 	.word	0x24000034
 800139c:	24000498 	.word	0x24000498
 80013a0:	240001b4 	.word	0x240001b4
 80013a4:	24000524 	.word	0x24000524
 80013a8:	240004e4 	.word	0x240004e4
 80013ac:	24000018 	.word	0x24000018
 80013b0:	24000038 	.word	0x24000038
 80013b4:	0800bb78 	.word	0x0800bb78

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09c      	sub	sp, #112	; 0x70
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	224c      	movs	r2, #76	; 0x4c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f009 fe20 	bl	800b00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f009 fe1a 	bl	800b00c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013d8:	2002      	movs	r0, #2
 80013da:	f004 f9e7 	bl	80057ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <SystemClock_Config+0xdc>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <SystemClock_Config+0xdc>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6193      	str	r3, [r2, #24]
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <SystemClock_Config+0xdc>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fe:	bf00      	nop
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <SystemClock_Config+0xdc>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140c:	d1f8      	bne.n	8001400 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140e:	2302      	movs	r3, #2
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001412:	2301      	movs	r3, #1
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001416:	2340      	movs	r3, #64	; 0x40
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141e:	2300      	movs	r3, #0
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001422:	2304      	movs	r3, #4
 8001424:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001426:	230c      	movs	r3, #12
 8001428:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800142e:	2304      	movs	r3, #4
 8001430:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001436:	230c      	movs	r3, #12
 8001438:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800143a:	2300      	movs	r3, #0
 800143c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4618      	mov	r0, r3
 8001448:	f004 f9ea 	bl	8005820 <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001452:	f000 fc93 	bl	8001d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	233f      	movs	r3, #63	; 0x3f
 8001458:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800146a:	2340      	movs	r3, #64	; 0x40
 800146c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f004 fdaa 	bl	8005fd4 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001486:	f000 fc79 	bl	8001d7c <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3770      	adds	r7, #112	; 0x70
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024800 	.word	0x58024800

08001498 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	; 0xb8
 800149c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	22b8      	movs	r2, #184	; 0xb8
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f009 fdb1 	bl	800b00c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014b6:	2304      	movs	r3, #4
 80014b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80014ba:	230c      	movs	r3, #12
 80014bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80014be:	2305      	movs	r3, #5
 80014c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ca:	23c0      	movs	r3, #192	; 0xc0
 80014cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 f904 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014ea:	f000 fc47 	bl	8001d7c <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	37b8      	adds	r7, #184	; 0xb8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2224      	movs	r2, #36	; 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f009 fd7b 	bl	800b00c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001518:	4a31      	ldr	r2, [pc, #196]	; (80015e0 <MX_ADC1_Init+0xe8>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <MX_ADC1_Init+0xe4>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <MX_ADC1_Init+0xe4>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001530:	2204      	movs	r2, #4
 8001532:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001536:	2200      	movs	r2, #0
 8001538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <MX_ADC1_Init+0xe4>)
 800153c:	2200      	movs	r2, #0
 800153e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001542:	2201      	movs	r2, #1
 8001544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001556:	2200      	movs	r2, #0
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_ADC1_Init+0xe4>)
 800155c:	2200      	movs	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001562:	2200      	movs	r2, #0
 8001564:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001568:	2200      	movs	r2, #0
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_ADC1_Init+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001574:	4819      	ldr	r0, [pc, #100]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001576:	f001 fbb3 	bl	8002ce0 <HAL_ADC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001580:	f000 fbfc 	bl	8001d7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_ADC1_Init+0xe4>)
 8001590:	f002 ff98 	bl	80044c4 <HAL_ADCEx_MultiModeConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800159a:	f000 fbef 	bl	8001d7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_ADC1_Init+0xec>)
 80015a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a2:	2306      	movs	r3, #6
 80015a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b0:	2304      	movs	r3, #4
 80015b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015be:	463b      	mov	r3, r7
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_ADC1_Init+0xe4>)
 80015c4:	f001 ff94 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80015ce:	f000 fbd5 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	240000d4 	.word	0x240000d4
 80015e0:	40022000 	.word	0x40022000
 80015e4:	10c00010 	.word	0x10c00010

080015e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2224      	movs	r2, #36	; 0x24
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f009 fd09 	bl	800b00c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <MX_ADC2_Init+0xbc>)
 80015fc:	4a2a      	ldr	r2, [pc, #168]	; (80016a8 <MX_ADC2_Init+0xc0>)
 80015fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <MX_ADC2_Init+0xbc>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001614:	2204      	movs	r2, #4
 8001616:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <MX_ADC2_Init+0xbc>)
 800161a:	2200      	movs	r2, #0
 800161c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001620:	2200      	movs	r2, #0
 8001622:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001626:	2201      	movs	r2, #1
 8001628:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_ADC2_Init+0xbc>)
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_ADC2_Init+0xbc>)
 800163a:	2200      	movs	r2, #0
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001640:	2200      	movs	r2, #0
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001646:	2200      	movs	r2, #0
 8001648:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_ADC2_Init+0xbc>)
 800164c:	2200      	movs	r2, #0
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_ADC2_Init+0xbc>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001658:	4812      	ldr	r0, [pc, #72]	; (80016a4 <MX_ADC2_Init+0xbc>)
 800165a:	f001 fb41 	bl	8002ce0 <HAL_ADC_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001664:	f000 fb8a 	bl	8001d7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_ADC2_Init+0xc4>)
 800166a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800166c:	2306      	movs	r3, #6
 800166e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001674:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001678:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800167a:	2304      	movs	r3, #4
 800167c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_ADC2_Init+0xbc>)
 800168e:	f001 ff2f 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001698:	f000 fb70 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	24000144 	.word	0x24000144
 80016a8:	40022100 	.word	0x40022100
 80016ac:	25b00200 	.word	0x25b00200

080016b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016b6:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <MX_FDCAN1_Init+0xc4>)
 80016b8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016da:	2208      	movs	r2, #8
 80016dc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016ec:	220d      	movs	r2, #13
 80016ee:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 80016fe:	2201      	movs	r2, #1
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001704:	2201      	movs	r2, #1
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001710:	2200      	movs	r2, #0
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001716:	2200      	movs	r2, #0
 8001718:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 800171c:	2200      	movs	r2, #0
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001722:	2204      	movs	r2, #4
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001728:	2200      	movs	r2, #0
 800172a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 800172e:	2204      	movs	r2, #4
 8001730:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001734:	2200      	movs	r2, #0
 8001736:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 800173a:	2204      	movs	r2, #4
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001740:	2200      	movs	r2, #0
 8001742:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001746:	2200      	movs	r2, #0
 8001748:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 800174c:	2200      	movs	r2, #0
 800174e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001752:	2200      	movs	r2, #0
 8001754:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 8001758:	2204      	movs	r2, #4
 800175a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_FDCAN1_Init+0xc0>)
 800175e:	f003 f877 	bl	8004850 <HAL_FDCAN_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001768:	f000 fb08 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	240001b4 	.word	0x240001b4
 8001774:	4000a000 	.word	0x4000a000

08001778 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 800177e:	4a2f      	ldr	r2, [pc, #188]	; (800183c <MX_FDCAN2_Init+0xc4>)
 8001780:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 8001790:	2200      	movs	r2, #0
 8001792:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 8001796:	2200      	movs	r2, #0
 8001798:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 800179c:	2200      	movs	r2, #0
 800179e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017a2:	2210      	movs	r2, #16
 80017a4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017ae:	2202      	movs	r2, #2
 80017b0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80017dc:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017f6:	2204      	movs	r2, #4
 80017f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 8001802:	2204      	movs	r2, #4
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 8001808:	2200      	movs	r2, #0
 800180a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 800180e:	2200      	movs	r2, #0
 8001810:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 8001814:	2200      	movs	r2, #0
 8001816:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 800181a:	2200      	movs	r2, #0
 800181c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 8001820:	2204      	movs	r2, #4
 8001822:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_FDCAN2_Init+0xc0>)
 8001826:	f003 f813 	bl	8004850 <HAL_FDCAN_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001830:	f000 faa4 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	24000254 	.word	0x24000254
 800183c:	4000a400 	.word	0x4000a400

08001840 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001846:	4a2f      	ldr	r2, [pc, #188]	; (8001904 <MX_FDCAN3_Init+0xc4>)
 8001848:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800184a:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001858:	2200      	movs	r2, #0
 800185a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 800185e:	2200      	movs	r2, #0
 8001860:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001864:	2200      	movs	r2, #0
 8001866:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 800186a:	2210      	movs	r2, #16
 800186c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001870:	2201      	movs	r2, #1
 8001872:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001876:	2202      	movs	r2, #2
 8001878:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 800187c:	2202      	movs	r2, #2
 800187e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001882:	2201      	movs	r2, #1
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001888:	2201      	movs	r2, #1
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 800188e:	2201      	movs	r2, #1
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 8001894:	2201      	movs	r2, #1
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 800189a:	2200      	movs	r2, #0
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018b2:	2204      	movs	r2, #4
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018be:	2204      	movs	r2, #4
 80018c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018ca:	2204      	movs	r2, #4
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018e8:	2204      	movs	r2, #4
 80018ea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_FDCAN3_Init+0xc0>)
 80018ee:	f002 ffaf 	bl	8004850 <HAL_FDCAN_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80018f8:	f000 fa40 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	240002f4 	.word	0x240002f4
 8001904:	4000d400 	.word	0x4000d400

08001908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b098      	sub	sp, #96	; 0x60
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2234      	movs	r2, #52	; 0x34
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f009 fb69 	bl	800b00c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_TIM1_Init+0x130>)
 800193c:	4a3f      	ldr	r2, [pc, #252]	; (8001a3c <MX_TIM1_Init+0x134>)
 800193e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <MX_TIM1_Init+0x130>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <MX_TIM1_Init+0x130>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_TIM1_Init+0x130>)
 800194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001952:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <MX_TIM1_Init+0x130>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <MX_TIM1_Init+0x130>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <MX_TIM1_Init+0x130>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001966:	4834      	ldr	r0, [pc, #208]	; (8001a38 <MX_TIM1_Init+0x130>)
 8001968:	f007 faa6 	bl	8008eb8 <HAL_TIM_PWM_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001972:	f000 fa03 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001982:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001986:	4619      	mov	r1, r3
 8001988:	482b      	ldr	r0, [pc, #172]	; (8001a38 <MX_TIM1_Init+0x130>)
 800198a:	f007 ff89 	bl	80098a0 <HAL_TIMEx_MasterConfigSynchronization>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001994:	f000 f9f2 	bl	8001d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001998:	2360      	movs	r3, #96	; 0x60
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a0:	2300      	movs	r3, #0
 80019a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a4:	2300      	movs	r3, #0
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	481e      	ldr	r0, [pc, #120]	; (8001a38 <MX_TIM1_Init+0x130>)
 80019be:	f007 fad3 	bl	8008f68 <HAL_TIM_PWM_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019c8:	f000 f9d8 	bl	8001d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019d0:	2204      	movs	r2, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM1_Init+0x130>)
 80019d6:	f007 fac7 	bl	8008f68 <HAL_TIM_PWM_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80019e0:	f000 f9cc 	bl	8001d7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM1_Init+0x130>)
 8001a1a:	f007 ffdd 	bl	80099d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001a24:	f000 f9aa 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM1_Init+0x130>)
 8001a2a:	f000 fc11 	bl	8002250 <HAL_TIM_MspPostInit>

}
 8001a2e:	bf00      	nop
 8001a30:	3760      	adds	r7, #96	; 0x60
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	24000394 	.word	0x24000394
 8001a3c:	40010000 	.word	0x40010000

08001a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <MX_USART2_UART_Init+0x94>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a88:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a8a:	f008 f831 	bl	8009af0 <HAL_UART_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a94:	f000 f972 	bl	8001d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a9c:	f009 f9cb 	bl	800ae36 <HAL_UARTEx_SetTxFifoThreshold>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001aa6:	f000 f969 	bl	8001d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001aae:	f009 fa00 	bl	800aeb2 <HAL_UARTEx_SetRxFifoThreshold>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ab8:	f000 f960 	bl	8001d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001abe:	f009 f981 	bl	800adc4 <HAL_UARTEx_DisableFifoMode>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ac8:	f000 f958 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	240003e0 	.word	0x240003e0
 8001ad4:	40004400 	.word	0x40004400

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	4a44      	ldr	r2, [pc, #272]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001afe:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	4a3d      	ldr	r2, [pc, #244]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	4a35      	ldr	r2, [pc, #212]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3a:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b50:	f043 0320 	orr.w	r3, r3, #32
 8001b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_GPIO_Init+0x130>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	4811      	ldr	r0, [pc, #68]	; (8001c0c <MX_GPIO_Init+0x134>)
 8001bc6:	f003 fdd7 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <MX_GPIO_Init+0x134>)
 8001be2:	f003 fc09 	bl	80053f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_GPIO_Init+0x138>)
 8001bfa:	f003 fbfd 	bl	80053f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bfe:	bf00      	nop
 8001c00:	3730      	adds	r7, #48	; 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	58020800 	.word	0x58020800
 8001c10:	58021800 	.word	0x58021800

08001c14 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4909      	ldr	r1, [pc, #36]	; (8001c44 <print+0x30>)
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <print+0x34>)
 8001c22:	f009 f9d3 	bl	800afcc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <print+0x34>)
 8001c28:	f7fe fb72 	bl	8000310 <strlen>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	4904      	ldr	r1, [pc, #16]	; (8001c48 <print+0x34>)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <print+0x38>)
 8001c38:	f007 ffaa 	bl	8009b90 <HAL_UART_Transmit>

}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0800bb98 	.word	0x0800bb98
 8001c48:	24000564 	.word	0x24000564
 8001c4c:	240003e0 	.word	0x240003e0

08001c50 <printValue>:

void printValue(int value){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4909      	ldr	r1, [pc, #36]	; (8001c80 <printValue+0x30>)
 8001c5c:	4809      	ldr	r0, [pc, #36]	; (8001c84 <printValue+0x34>)
 8001c5e:	f009 f9b5 	bl	800afcc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001c62:	4808      	ldr	r0, [pc, #32]	; (8001c84 <printValue+0x34>)
 8001c64:	f7fe fb54 	bl	8000310 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <printValue+0x34>)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <printValue+0x38>)
 8001c74:	f007 ff8c 	bl	8009b90 <HAL_UART_Transmit>

}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	0800bba0 	.word	0x0800bba0
 8001c84:	24000564 	.word	0x24000564
 8001c88:	240003e0 	.word	0x240003e0

08001c8c <ADC1_Select_SA1>:


void ADC1_Select_SA1 (void){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2224      	movs	r2, #36	; 0x24
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f009 f9b7 	bl	800b00c <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	sConfig.Channel = ADC_CHANNEL_4;
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <ADC1_Select_SA1+0x48>)
 8001ca0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5; //1 CYCLES??? (*%*)
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001caa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001cae:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <ADC1_Select_SA1+0x4c>)
 8001cbe:	f001 fc17 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <ADC1_Select_SA1+0x40>
	{
	  Error_Handler();
 8001cc8:	f000 f858 	bl	8001d7c <Error_Handler>
	}
}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	10c00010 	.word	0x10c00010
 8001cd8:	240000d4 	.word	0x240000d4

08001cdc <ADC1_Select_SA2>:

void ADC1_Select_SA2 (void){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2224      	movs	r2, #36	; 0x24
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f009 f98f 	bl	800b00c <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	sConfig.Channel = ADC_CHANNEL_5;
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <ADC1_Select_SA2+0x48>)
 8001cf0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cfa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001cfe:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d00:	2304      	movs	r3, #4
 8001d02:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4806      	ldr	r0, [pc, #24]	; (8001d28 <ADC1_Select_SA2+0x4c>)
 8001d0e:	f001 fbef 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <ADC1_Select_SA2+0x40>
	{
	  Error_Handler();
 8001d18:	f000 f830 	bl	8001d7c <Error_Handler>
	}
}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	; 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	14f00020 	.word	0x14f00020
 8001d28:	240000d4 	.word	0x240000d4

08001d2c <ADC1_Select_SF>:

void ADC1_Select_SF (void){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2224      	movs	r2, #36	; 0x24
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f009 f967 	bl	800b00c <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	sConfig.Channel = ADC_CHANNEL_2;
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <ADC1_Select_SF+0x48>)
 8001d40:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d42:	2306      	movs	r3, #6
 8001d44:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d46:	2301      	movs	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d4a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d4e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d50:	2304      	movs	r3, #4
 8001d52:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <ADC1_Select_SF+0x4c>)
 8001d5e:	f001 fbc7 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <ADC1_Select_SF+0x40>
	{
	  Error_Handler();
 8001d68:	f000 f808 	bl	8001d7c <Error_Handler>
	}
}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	08600004 	.word	0x08600004
 8001d78:	240000d4 	.word	0x240000d4

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <Error_Handler+0x8>
	...

08001d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_MspInit+0x30>)
 8001d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d94:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_MspInit+0x30>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_MspInit+0x30>)
 8001da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	58024400 	.word	0x58024400

08001dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b090      	sub	sp, #64	; 0x40
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a70      	ldr	r2, [pc, #448]	; (8001f9c <HAL_ADC_MspInit+0x1e0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d16a      	bne.n	8001eb4 <HAL_ADC_MspInit+0xf8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dde:	4b70      	ldr	r3, [pc, #448]	; (8001fa0 <HAL_ADC_MspInit+0x1e4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a6e      	ldr	r2, [pc, #440]	; (8001fa0 <HAL_ADC_MspInit+0x1e4>)
 8001de6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001de8:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <HAL_ADC_MspInit+0x1e4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d10e      	bne.n	8001e0e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001df0:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001df6:	4a6b      	ldr	r2, [pc, #428]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	4a63      	ldr	r2, [pc, #396]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e1e:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	4a5c      	ldr	r2, [pc, #368]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e4a:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	4a54      	ldr	r2, [pc, #336]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e52:	f043 0320 	orr.w	r3, r3, #32
 8001e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5a:	4b52      	ldr	r3, [pc, #328]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S1_ACELERADOR_Pin;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S1_ACELERADOR_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	484b      	ldr	r0, [pc, #300]	; (8001fa8 <HAL_ADC_MspInit+0x1ec>)
 8001e7c:	f003 fabc 	bl	80053f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S2_ACELERADOR_Pin;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e84:	2303      	movs	r3, #3
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S2_ACELERADOR_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e90:	4619      	mov	r1, r3
 8001e92:	4846      	ldr	r0, [pc, #280]	; (8001fac <HAL_ADC_MspInit+0x1f0>)
 8001e94:	f003 fab0 	bl	80053f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4840      	ldr	r0, [pc, #256]	; (8001fb0 <HAL_ADC_MspInit+0x1f4>)
 8001eae:	f003 faa3 	bl	80053f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001eb2:	e06e      	b.n	8001f92 <HAL_ADC_MspInit+0x1d6>
  else if(hadc->Instance==ADC2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a3e      	ldr	r2, [pc, #248]	; (8001fb4 <HAL_ADC_MspInit+0x1f8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d169      	bne.n	8001f92 <HAL_ADC_MspInit+0x1d6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_ADC_MspInit+0x1e4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4a36      	ldr	r2, [pc, #216]	; (8001fa0 <HAL_ADC_MspInit+0x1e4>)
 8001ec6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ec8:	4b35      	ldr	r3, [pc, #212]	; (8001fa0 <HAL_ADC_MspInit+0x1e4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d10e      	bne.n	8001eee <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ed0:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ed6:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001ed8:	f043 0320 	orr.w	r3, r3, #32
 8001edc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001ee2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efe:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f12:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_ADC_MspInit+0x1e8>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <HAL_ADC_MspInit+0x1ec>)
 8001f5c:	f003 fa4c 	bl	80053f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f64:	2303      	movs	r3, #3
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f70:	4619      	mov	r1, r3
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <HAL_ADC_MspInit+0x1f0>)
 8001f74:	f003 fa40 	bl	80053f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 8001f78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <HAL_ADC_MspInit+0x1f4>)
 8001f8e:	f003 fa33 	bl	80053f8 <HAL_GPIO_Init>
}
 8001f92:	bf00      	nop
 8001f94:	3740      	adds	r7, #64	; 0x40
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	240005c8 	.word	0x240005c8
 8001fa4:	58024400 	.word	0x58024400
 8001fa8:	58020800 	.word	0x58020800
 8001fac:	58020400 	.word	0x58020400
 8001fb0:	58021400 	.word	0x58021400
 8001fb4:	40022100 	.word	0x40022100

08001fb8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0bc      	sub	sp, #240	; 0xf0
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	22b8      	movs	r2, #184	; 0xb8
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f009 f817 	bl	800b00c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a82      	ldr	r2, [pc, #520]	; (80021ec <HAL_FDCAN_MspInit+0x234>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d150      	bne.n	800208a <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001fe8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffc:	f107 0320 	add.w	r3, r7, #32
 8002000:	4618      	mov	r0, r3
 8002002:	f004 fb73 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800200c:	f7ff feb6 	bl	8001d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002010:	4b77      	ldr	r3, [pc, #476]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	4a76      	ldr	r2, [pc, #472]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 8002018:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800201a:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10e      	bne.n	8002040 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002022:	4b74      	ldr	r3, [pc, #464]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 8002024:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002028:	4a72      	ldr	r2, [pc, #456]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 8002034:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002040:	4b6c      	ldr	r3, [pc, #432]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	4a6b      	ldr	r2, [pc, #428]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800205e:	2303      	movs	r3, #3
 8002060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002076:	2309      	movs	r3, #9
 8002078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800207c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002080:	4619      	mov	r1, r3
 8002082:	485d      	ldr	r0, [pc, #372]	; (80021f8 <HAL_FDCAN_MspInit+0x240>)
 8002084:	f003 f9b8 	bl	80053f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002088:	e0ac      	b.n	80021e4 <HAL_FDCAN_MspInit+0x22c>
  else if(hfdcan->Instance==FDCAN2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5b      	ldr	r2, [pc, #364]	; (80021fc <HAL_FDCAN_MspInit+0x244>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d151      	bne.n	8002138 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002094:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80020a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a8:	f107 0320 	add.w	r3, r7, #32
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 fb1d 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 80020b8:	f7ff fe60 	bl	8001d7c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a4b      	ldr	r2, [pc, #300]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 80020c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10e      	bne.n	80020ec <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 80020d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020d4:	4a47      	ldr	r2, [pc, #284]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020de:	4b45      	ldr	r3, [pc, #276]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 80020e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f2:	4a40      	ldr	r2, [pc, #256]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020fc:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 80020fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800210a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800210e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002124:	2309      	movs	r3, #9
 8002126:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800212e:	4619      	mov	r1, r3
 8002130:	4833      	ldr	r0, [pc, #204]	; (8002200 <HAL_FDCAN_MspInit+0x248>)
 8002132:	f003 f961 	bl	80053f8 <HAL_GPIO_Init>
}
 8002136:	e055      	b.n	80021e4 <HAL_FDCAN_MspInit+0x22c>
  else if(hfdcan->Instance==FDCAN3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a31      	ldr	r2, [pc, #196]	; (8002204 <HAL_FDCAN_MspInit+0x24c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d150      	bne.n	80021e4 <HAL_FDCAN_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002142:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800214e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002156:	f107 0320 	add.w	r3, r7, #32
 800215a:	4618      	mov	r0, r3
 800215c:	f004 fac6 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_FDCAN_MspInit+0x1b2>
      Error_Handler();
 8002166:	f7ff fe09 	bl	8001d7c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 8002172:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_FDCAN_MspInit+0x238>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d10e      	bne.n	800219a <HAL_FDCAN_MspInit+0x1e2>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 800217e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 800218e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 80021a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_FDCAN_MspInit+0x23c>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021dc:	4619      	mov	r1, r3
 80021de:	480a      	ldr	r0, [pc, #40]	; (8002208 <HAL_FDCAN_MspInit+0x250>)
 80021e0:	f003 f90a 	bl	80053f8 <HAL_GPIO_Init>
}
 80021e4:	bf00      	nop
 80021e6:	37f0      	adds	r7, #240	; 0xf0
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	4000a000 	.word	0x4000a000
 80021f0:	240005cc 	.word	0x240005cc
 80021f4:	58024400 	.word	0x58024400
 80021f8:	58020c00 	.word	0x58020c00
 80021fc:	4000a400 	.word	0x4000a400
 8002200:	58020400 	.word	0x58020400
 8002204:	4000d400 	.word	0x4000d400
 8002208:	58021800 	.word	0x58021800

0800220c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <HAL_TIM_PWM_MspInit+0x3c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10e      	bne.n	800223c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_TIM_PWM_MspInit+0x40>)
 8002220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002224:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_TIM_PWM_MspInit+0x40>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_TIM_PWM_MspInit+0x40>)
 8002230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40010000 	.word	0x40010000
 800224c:	58024400 	.word	0x58024400

08002250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a13      	ldr	r2, [pc, #76]	; (80022bc <HAL_TIM_MspPostInit+0x6c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11f      	bne.n	80022b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_TIM_MspPostInit+0x70>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_TIM_MspPostInit+0x70>)
 800227a:	f043 0310 	orr.w	r3, r3, #16
 800227e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_TIM_MspPostInit+0x70>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002290:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002294:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_TIM_MspPostInit+0x74>)
 80022ae:	f003 f8a3 	bl	80053f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58021000 	.word	0x58021000

080022c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0b8      	sub	sp, #224	; 0xe0
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	22b8      	movs	r2, #184	; 0xb8
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f008 fe8f 	bl	800b00c <memset>
  if(huart->Instance==USART2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_UART_MspInit+0xc4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d145      	bne.n	8002384 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022f8:	f04f 0202 	mov.w	r2, #2
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f9ec 	bl	80066ec <HAL_RCCEx_PeriphCLKConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800231a:	f7ff fd2f 	bl	8001d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_UART_MspInit+0xc8>)
 8002320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002324:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_UART_MspInit+0xc8>)
 8002326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_MspInit+0xc8>)
 8002330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_UART_MspInit+0xc8>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002342:	4a13      	ldr	r2, [pc, #76]	; (8002390 <HAL_UART_MspInit+0xc8>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_UART_MspInit+0xc8>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800235a:	230c      	movs	r3, #12
 800235c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002372:	2307      	movs	r3, #7
 8002374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002378:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800237c:	4619      	mov	r1, r3
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_UART_MspInit+0xcc>)
 8002380:	f003 f83a 	bl	80053f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	37e0      	adds	r7, #224	; 0xe0
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40004400 	.word	0x40004400
 8002390:	58024400 	.word	0x58024400
 8002394:	58020000 	.word	0x58020000

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800239c:	e7fe      	b.n	800239c <NMI_Handler+0x4>

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <MemManage_Handler+0x4>

080023aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e4:	f000 f94c 	bl	8002680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f008 fdfe 	bl	800b01c <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	24050000 	.word	0x24050000
 800244c:	00000400 	.word	0x00000400
 8002450:	240005d0 	.word	0x240005d0
 8002454:	24000720 	.word	0x24000720

08002458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <SystemInit+0xd0>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	4a31      	ldr	r2, [pc, #196]	; (8002528 <SystemInit+0xd0>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <SystemInit+0xd4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	2b06      	cmp	r3, #6
 8002476:	d807      	bhi.n	8002488 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <SystemInit+0xd4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 030f 	bic.w	r3, r3, #15
 8002480:	4a2a      	ldr	r2, [pc, #168]	; (800252c <SystemInit+0xd4>)
 8002482:	f043 0307 	orr.w	r3, r3, #7
 8002486:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <SystemInit+0xd8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a28      	ldr	r2, [pc, #160]	; (8002530 <SystemInit+0xd8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002494:	4b26      	ldr	r3, [pc, #152]	; (8002530 <SystemInit+0xd8>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <SystemInit+0xd8>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4924      	ldr	r1, [pc, #144]	; (8002530 <SystemInit+0xd8>)
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <SystemInit+0xdc>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <SystemInit+0xd4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <SystemInit+0xd4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 030f 	bic.w	r3, r3, #15
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <SystemInit+0xd4>)
 80024bc:	f043 0307 	orr.w	r3, r3, #7
 80024c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <SystemInit+0xd8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <SystemInit+0xd8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <SystemInit+0xd8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <SystemInit+0xd8>)
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <SystemInit+0xe0>)
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <SystemInit+0xd8>)
 80024dc:	4a17      	ldr	r2, [pc, #92]	; (800253c <SystemInit+0xe4>)
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <SystemInit+0xd8>)
 80024e2:	4a17      	ldr	r2, [pc, #92]	; (8002540 <SystemInit+0xe8>)
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <SystemInit+0xd8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <SystemInit+0xd8>)
 80024ee:	4a14      	ldr	r2, [pc, #80]	; (8002540 <SystemInit+0xe8>)
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <SystemInit+0xd8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <SystemInit+0xd8>)
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <SystemInit+0xe8>)
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <SystemInit+0xd8>)
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <SystemInit+0xd8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a09      	ldr	r2, [pc, #36]	; (8002530 <SystemInit+0xd8>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <SystemInit+0xd8>)
 8002512:	2200      	movs	r2, #0
 8002514:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <SystemInit+0xec>)
 8002518:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800251c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00
 800252c:	52002000 	.word	0x52002000
 8002530:	58024400 	.word	0x58024400
 8002534:	eaf6ed7f 	.word	0xeaf6ed7f
 8002538:	02020200 	.word	0x02020200
 800253c:	01ff0000 	.word	0x01ff0000
 8002540:	01010280 	.word	0x01010280
 8002544:	52004000 	.word	0x52004000

08002548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002580 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800254c:	f7ff ff84 	bl	8002458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002552:	490d      	ldr	r1, [pc, #52]	; (8002588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002558:	e002      	b.n	8002560 <LoopCopyDataInit>

0800255a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800255c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255e:	3304      	adds	r3, #4

08002560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002564:	d3f9      	bcc.n	800255a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002568:	4c0a      	ldr	r4, [pc, #40]	; (8002594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800256c:	e001      	b.n	8002572 <LoopFillZerobss>

0800256e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002570:	3204      	adds	r2, #4

08002572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002574:	d3fb      	bcc.n	800256e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002576:	f008 fd57 	bl	800b028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257a:	f7fe f8a1 	bl	80006c0 <main>
  bx  lr
 800257e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002580:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002584:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002588:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 800258c:	0800bc80 	.word	0x0800bc80
  ldr r2, =_sbss
 8002590:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 8002594:	24000720 	.word	0x24000720

08002598 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC3_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a2:	2003      	movs	r0, #3
 80025a4:	f002 f922 	bl	80047ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025a8:	f003 feca 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_Init+0x68>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	4913      	ldr	r1, [pc, #76]	; (8002608 <HAL_Init+0x6c>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_Init+0x68>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_Init+0x6c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <HAL_Init+0x70>)
 80025de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_Init+0x74>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025e6:	200f      	movs	r0, #15
 80025e8:	f000 f814 	bl	8002614 <HAL_InitTick>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e002      	b.n	80025fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025f6:	f7ff fbc7 	bl	8001d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	58024400 	.word	0x58024400
 8002608:	0800bbf4 	.word	0x0800bbf4
 800260c:	24000040 	.word	0x24000040
 8002610:	2400003c 	.word	0x2400003c

08002614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_InitTick+0x60>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e021      	b.n	800266c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_InitTick+0x64>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_InitTick+0x60>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002636:	fbb3 f3f1 	udiv	r3, r3, r1
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f002 f8f9 	bl	8004836 <HAL_SYSTICK_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00e      	b.n	800266c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b0f      	cmp	r3, #15
 8002652:	d80a      	bhi.n	800266a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002654:	2200      	movs	r2, #0
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f002 f8d1 	bl	8004802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <HAL_InitTick+0x68>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	24000048 	.word	0x24000048
 8002678:	2400003c 	.word	0x2400003c
 800267c:	24000044 	.word	0x24000044

08002680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x20>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x24>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4413      	add	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_IncTick+0x24>)
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	24000048 	.word	0x24000048
 80026a4:	240005d4 	.word	0x240005d4

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	240005d4 	.word	0x240005d4

080026c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff ffee 	bl	80026a8 <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d005      	beq.n	80026e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_Delay+0x44>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e6:	bf00      	nop
 80026e8:	f7ff ffde 	bl	80026a8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8f7      	bhi.n	80026e8 <HAL_Delay+0x28>
  {
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	24000048 	.word	0x24000048

08002708 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	609a      	str	r2, [r3, #8]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3360      	adds	r3, #96	; 0x60
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <LL_ADC_SetOffset+0x60>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10b      	bne.n	80027ac <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80027aa:	e00b      	b.n	80027c4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	430b      	orrs	r3, r1
 80027be:	431a      	orrs	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	601a      	str	r2, [r3, #0]
}
 80027c4:	bf00      	nop
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	58026000 	.word	0x58026000

080027d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3360      	adds	r3, #96	; 0x60
 80027e2:	461a      	mov	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	611a      	str	r2, [r3, #16]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00e      	beq.n	8002866 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3360      	adds	r3, #96	; 0x60
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	601a      	str	r2, [r3, #0]
  }
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	58026000 	.word	0x58026000

08002878 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <LL_ADC_SetOffsetSaturation+0x40>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d10e      	bne.n	80028aa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3360      	adds	r3, #96	; 0x60
 8002890:	461a      	mov	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	58026000 	.word	0x58026000

080028bc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <LL_ADC_SetOffsetSign+0x40>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d10e      	bne.n	80028ee <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3360      	adds	r3, #96	; 0x60
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	58026000 	.word	0x58026000

08002900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3360      	adds	r3, #96	; 0x60
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <LL_ADC_SetOffsetState+0x50>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002932:	e007      	b.n	8002944 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	431a      	orrs	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	601a      	str	r2, [r3, #0]
}
 8002944:	bf00      	nop
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	58026000 	.word	0x58026000

08002954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3330      	adds	r3, #48	; 0x30
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	4413      	add	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	211f      	movs	r1, #31
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	f003 011f 	and.w	r1, r3, #31
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	431a      	orrs	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b087      	sub	sp, #28
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3314      	adds	r3, #20
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0e5b      	lsrs	r3, r3, #25
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	0d1b      	lsrs	r3, r3, #20
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2107      	movs	r1, #7
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	0d1b      	lsrs	r3, r3, #20
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	431a      	orrs	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d115      	bne.n	8002a68 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0318 	and.w	r3, r3, #24
 8002a52:	4914      	ldr	r1, [pc, #80]	; (8002aa4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002a54:	40d9      	lsrs	r1, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	400b      	ands	r3, r1
 8002a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002a66:	e014      	b.n	8002a92 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0318 	and.w	r3, r3, #24
 8002a7e:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002a80:	40d9      	lsrs	r1, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	400b      	ands	r3, r1
 8002a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	58026000 	.word	0x58026000
 8002aa4:	000fffff 	.word	0x000fffff

08002aa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6093      	str	r3, [r2, #8]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	5fffffc0 	.word	0x5fffffc0

08002b04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b18:	d101      	bne.n	8002b1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	6fffffc0 	.word	0x6fffffc0

08002b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <LL_ADC_Enable+0x24>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	7fffffc0 	.word	0x7fffffc0

08002ba4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <LL_ADC_Disable+0x24>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	f043 0202 	orr.w	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	7fffffc0 	.word	0x7fffffc0

08002bcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <LL_ADC_IsEnabled+0x18>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <LL_ADC_IsEnabled+0x1a>
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_IsDisableOngoing+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_IsDisableOngoing+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <LL_ADC_REG_StartConversion+0x24>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	f043 0204 	orr.w	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	7fffffc0 	.word	0x7fffffc0

08002c40 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <LL_ADC_REG_StopConversion+0x24>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	f043 0210 	orr.w	r2, r3, #16
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	7fffffc0 	.word	0x7fffffc0

08002c68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d101      	bne.n	8002c80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <LL_ADC_INJ_StopConversion+0x24>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	7fffffc0 	.word	0x7fffffc0

08002cb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d101      	bne.n	8002cd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1ee      	b.n	80030d8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff f857 	bl	8001dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff feef 	bl	8002b04 <LL_ADC_IsDeepPowerDownEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fed5 	bl	8002ae0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff0a 	bl	8002b54 <LL_ADC_IsInternalRegulatorEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d114      	bne.n	8002d70 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff feee 	bl	8002b2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d50:	4b8e      	ldr	r3, [pc, #568]	; (8002f8c <HAL_ADC_Init+0x2ac>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	4a8e      	ldr	r2, [pc, #568]	; (8002f90 <HAL_ADC_Init+0x2b0>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d62:	e002      	b.n	8002d6a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f9      	bne.n	8002d64 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff feed 	bl	8002b54 <LL_ADC_IsInternalRegulatorEnabled>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10d      	bne.n	8002d9c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d84:	f043 0210 	orr.w	r2, r3, #16
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff61 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8002da6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 8188 	bne.w	80030c6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 8184 	bne.w	80030c6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dc6:	f043 0202 	orr.w	r2, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fefa 	bl	8002bcc <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d136      	bne.n	8002e4c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6c      	ldr	r2, [pc, #432]	; (8002f94 <HAL_ADC_Init+0x2b4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d004      	beq.n	8002df2 <HAL_ADC_Init+0x112>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_ADC_Init+0x2b8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10e      	bne.n	8002e10 <HAL_ADC_Init+0x130>
 8002df2:	4868      	ldr	r0, [pc, #416]	; (8002f94 <HAL_ADC_Init+0x2b4>)
 8002df4:	f7ff feea 	bl	8002bcc <LL_ADC_IsEnabled>
 8002df8:	4604      	mov	r4, r0
 8002dfa:	4867      	ldr	r0, [pc, #412]	; (8002f98 <HAL_ADC_Init+0x2b8>)
 8002dfc:	f7ff fee6 	bl	8002bcc <LL_ADC_IsEnabled>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4323      	orrs	r3, r4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e008      	b.n	8002e22 <HAL_ADC_Init+0x142>
 8002e10:	4862      	ldr	r0, [pc, #392]	; (8002f9c <HAL_ADC_Init+0x2bc>)
 8002e12:	f7ff fedb 	bl	8002bcc <LL_ADC_IsEnabled>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5a      	ldr	r2, [pc, #360]	; (8002f94 <HAL_ADC_Init+0x2b4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_Init+0x15a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a58      	ldr	r2, [pc, #352]	; (8002f98 <HAL_ADC_Init+0x2b8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_Init+0x15e>
 8002e3a:	4a59      	ldr	r2, [pc, #356]	; (8002fa0 <HAL_ADC_Init+0x2c0>)
 8002e3c:	e000      	b.n	8002e40 <HAL_ADC_Init+0x160>
 8002e3e:	4a59      	ldr	r2, [pc, #356]	; (8002fa4 <HAL_ADC_Init+0x2c4>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f7ff fc5e 	bl	8002708 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_ADC_Init+0x2bc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d129      	bne.n	8002eaa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7e5b      	ldrb	r3, [r3, #25]
 8002e5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e60:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002e66:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d013      	beq.n	8002e98 <HAL_ADC_Init+0x1b8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d00d      	beq.n	8002e94 <HAL_ADC_Init+0x1b4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b1c      	cmp	r3, #28
 8002e7e:	d007      	beq.n	8002e90 <HAL_ADC_Init+0x1b0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b18      	cmp	r3, #24
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_Init+0x1ac>
 8002e88:	2318      	movs	r3, #24
 8002e8a:	e006      	b.n	8002e9a <HAL_ADC_Init+0x1ba>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e004      	b.n	8002e9a <HAL_ADC_Init+0x1ba>
 8002e90:	2310      	movs	r3, #16
 8002e92:	e002      	b.n	8002e9a <HAL_ADC_Init+0x1ba>
 8002e94:	2308      	movs	r3, #8
 8002e96:	e000      	b.n	8002e9a <HAL_ADC_Init+0x1ba>
 8002e98:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002e9a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	e00e      	b.n	8002ec8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7e5b      	ldrb	r3, [r3, #25]
 8002eae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eb4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002eba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d106      	bne.n	8002ee0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	045b      	lsls	r3, r3, #17
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <HAL_ADC_Init+0x2bc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d115      	bne.n	8002f32 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_ADC_Init+0x2c8>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	69b9      	ldr	r1, [r7, #24]
 8002f16:	430b      	orrs	r3, r1
 8002f18:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	611a      	str	r2, [r3, #16]
 8002f30:	e009      	b.n	8002f46 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_ADC_Init+0x2cc>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	69b9      	ldr	r1, [r7, #24]
 8002f42:	430b      	orrs	r3, r1
 8002f44:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fe8c 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8002f50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff feae 	bl	8002cb8 <LL_ADC_INJ_IsConversionOngoing>
 8002f5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f040 808e 	bne.w	8003082 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 808a 	bne.w	8003082 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_ADC_Init+0x2bc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d11b      	bne.n	8002fb0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7e1b      	ldrb	r3, [r3, #24]
 8002f7c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f84:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	e018      	b.n	8002fbe <HAL_ADC_Init+0x2de>
 8002f8c:	2400003c 	.word	0x2400003c
 8002f90:	053e2d63 	.word	0x053e2d63
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40022100 	.word	0x40022100
 8002f9c:	58026000 	.word	0x58026000
 8002fa0:	40022300 	.word	0x40022300
 8002fa4:	58026300 	.word	0x58026300
 8002fa8:	fff04007 	.word	0xfff04007
 8002fac:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7e1b      	ldrb	r3, [r3, #24]
 8002fb4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_ADC_Init+0x400>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	69b9      	ldr	r1, [r7, #24]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d137      	bne.n	800304c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a3f      	ldr	r2, [pc, #252]	; (80030e4 <HAL_ADC_Init+0x404>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d116      	bne.n	800301a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_ADC_Init+0x408>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ffe:	4311      	orrs	r1, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003004:	4311      	orrs	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800300a:	430a      	orrs	r2, r1
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	611a      	str	r2, [r3, #16]
 8003018:	e020      	b.n	800305c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_ADC_Init+0x40c>)
 8003022:	4013      	ands	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003028:	3a01      	subs	r2, #1
 800302a:	0411      	lsls	r1, r2, #16
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003030:	4311      	orrs	r1, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003036:	4311      	orrs	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800303c:	430a      	orrs	r2, r1
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	611a      	str	r2, [r3, #16]
 800304a:	e007      	b.n	800305c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <HAL_ADC_Init+0x404>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d002      	beq.n	8003082 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f001 f90d 	bl	800429c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10c      	bne.n	80030a4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	f023 010f 	bic.w	r1, r3, #15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	1e5a      	subs	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
 80030a2:	e007      	b.n	80030b4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 020f 	bic.w	r2, r2, #15
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	f023 0303 	bic.w	r3, r3, #3
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60
 80030c4:	e007      	b.n	80030d6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ca:	f043 0210 	orr.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3724      	adds	r7, #36	; 0x24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	ffffbffc 	.word	0xffffbffc
 80030e4:	58026000 	.word	0x58026000
 80030e8:	fc00f81f 	.word	0xfc00f81f
 80030ec:	fc00f81e 	.word	0xfc00f81e

080030f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5c      	ldr	r2, [pc, #368]	; (8003270 <HAL_ADC_Start+0x180>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_ADC_Start+0x1c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_ADC_Start+0x184>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_ADC_Start+0x20>
 800310c:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <HAL_ADC_Start+0x188>)
 800310e:	e000      	b.n	8003112 <HAL_ADC_Start+0x22>
 8003110:	4b5a      	ldr	r3, [pc, #360]	; (800327c <HAL_ADC_Start+0x18c>)
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fcc8 	bl	8002aa8 <LL_ADC_GetMultimode>
 8003118:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fda2 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 809a 	bne.w	8003260 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_Start+0x4a>
 8003136:	2302      	movs	r3, #2
 8003138:	e095      	b.n	8003266 <HAL_ADC_Start+0x176>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 ffc0 	bl	80040c8 <ADC_Enable>
 8003148:	4603      	mov	r3, r0
 800314a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 8081 	bne.w	8003256 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003158:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_ADC_Start+0x190>)
 800315a:	4013      	ands	r3, r2
 800315c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a42      	ldr	r2, [pc, #264]	; (8003274 <HAL_ADC_Start+0x184>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d002      	beq.n	8003174 <HAL_ADC_Start+0x84>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e000      	b.n	8003176 <HAL_ADC_Start+0x86>
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <HAL_ADC_Start+0x180>)
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	4293      	cmp	r3, r2
 800317c:	d002      	beq.n	8003184 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319c:	d106      	bne.n	80031ac <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a2:	f023 0206 	bic.w	r2, r3, #6
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	665a      	str	r2, [r3, #100]	; 0x64
 80031aa:	e002      	b.n	80031b2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	221c      	movs	r2, #28
 80031b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <HAL_ADC_Start+0x184>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d002      	beq.n	80031d2 <HAL_ADC_Start+0xe2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	e000      	b.n	80031d4 <HAL_ADC_Start+0xe4>
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_ADC_Start+0x180>)
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	4293      	cmp	r3, r2
 80031da:	d008      	beq.n	80031ee <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d002      	beq.n	80031ee <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	d114      	bne.n	8003218 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003204:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fd01 	bl	8002c18 <LL_ADC_REG_StartConversion>
 8003216:	e025      	b.n	8003264 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <HAL_ADC_Start+0x184>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d002      	beq.n	8003234 <HAL_ADC_Start+0x144>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	e000      	b.n	8003236 <HAL_ADC_Start+0x146>
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_ADC_Start+0x180>)
 8003236:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00f      	beq.n	8003264 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800324c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	661a      	str	r2, [r3, #96]	; 0x60
 8003254:	e006      	b.n	8003264 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800325e:	e001      	b.n	8003264 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003260:	2302      	movs	r3, #2
 8003262:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003264:	7dfb      	ldrb	r3, [r7, #23]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40022000 	.word	0x40022000
 8003274:	40022100 	.word	0x40022100
 8003278:	40022300 	.word	0x40022300
 800327c:	58026300 	.word	0x58026300
 8003280:	fffff0fe 	.word	0xfffff0fe

08003284 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADC_Stop+0x16>
 8003296:	2302      	movs	r3, #2
 8003298:	e021      	b.n	80032de <HAL_ADC_Stop+0x5a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80032a2:	2103      	movs	r1, #3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fe53 	bl	8003f50 <ADC_ConversionStop>
 80032aa:	4603      	mov	r3, r0
 80032ac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10f      	bne.n	80032d4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 ff91 	bl	80041dc <ADC_Disable>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032c8:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_ADC_Stop+0x64>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	ffffeefe 	.word	0xffffeefe

080032ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a72      	ldr	r2, [pc, #456]	; (80034c4 <HAL_ADC_PollForConversion+0x1d8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_ADC_PollForConversion+0x1e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a70      	ldr	r2, [pc, #448]	; (80034c8 <HAL_ADC_PollForConversion+0x1dc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_ADC_PollForConversion+0x22>
 800330a:	4b70      	ldr	r3, [pc, #448]	; (80034cc <HAL_ADC_PollForConversion+0x1e0>)
 800330c:	e000      	b.n	8003310 <HAL_ADC_PollForConversion+0x24>
 800330e:	4b70      	ldr	r3, [pc, #448]	; (80034d0 <HAL_ADC_PollForConversion+0x1e4>)
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fbc9 	bl	8002aa8 <LL_ADC_GetMultimode>
 8003316:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d102      	bne.n	8003326 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003320:	2308      	movs	r3, #8
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	e037      	b.n	8003396 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d002      	beq.n	8003338 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b09      	cmp	r3, #9
 8003336:	d111      	bne.n	800335c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	f043 0220 	orr.w	r2, r3, #32
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0b1      	b.n	80034ba <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003356:	2304      	movs	r3, #4
 8003358:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800335a:	e01c      	b.n	8003396 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a58      	ldr	r2, [pc, #352]	; (80034c4 <HAL_ADC_PollForConversion+0x1d8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_ADC_PollForConversion+0x84>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_ADC_PollForConversion+0x1dc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_ADC_PollForConversion+0x88>
 8003370:	4b56      	ldr	r3, [pc, #344]	; (80034cc <HAL_ADC_PollForConversion+0x1e0>)
 8003372:	e000      	b.n	8003376 <HAL_ADC_PollForConversion+0x8a>
 8003374:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <HAL_ADC_PollForConversion+0x1e4>)
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fba4 	bl	8002ac4 <LL_ADC_GetMultiDMATransfer>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e093      	b.n	80034ba <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003392:	2304      	movs	r3, #4
 8003394:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003396:	f7ff f987 	bl	80026a8 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800339c:	e021      	b.n	80033e2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d01d      	beq.n	80033e2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033a6:	f7ff f97f 	bl	80026a8 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <HAL_ADC_PollForConversion+0xd0>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d112      	bne.n	80033e2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e06b      	b.n	80034ba <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0d6      	beq.n	800339e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff faa7 	bl	8002954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01c      	beq.n	8003446 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7e5b      	ldrb	r3, [r3, #25]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d118      	bne.n	8003446 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b08      	cmp	r3, #8
 8003420:	d111      	bne.n	8003446 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d105      	bne.n	8003446 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_ADC_PollForConversion+0x1dc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d002      	beq.n	8003456 <HAL_ADC_PollForConversion+0x16a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	e000      	b.n	8003458 <HAL_ADC_PollForConversion+0x16c>
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_ADC_PollForConversion+0x1d8>)
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	4293      	cmp	r3, r2
 800345e:	d008      	beq.n	8003472 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d002      	beq.n	8003472 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b09      	cmp	r3, #9
 8003470:	d104      	bne.n	800347c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e00c      	b.n	8003496 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <HAL_ADC_PollForConversion+0x1dc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d002      	beq.n	800348c <HAL_ADC_PollForConversion+0x1a0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e000      	b.n	800348e <HAL_ADC_PollForConversion+0x1a2>
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <HAL_ADC_PollForConversion+0x1d8>)
 800348e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d104      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2208      	movs	r2, #8
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e008      	b.n	80034b8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	220c      	movs	r2, #12
 80034b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40022100 	.word	0x40022100
 80034cc:	40022300 	.word	0x40022300
 80034d0:	58026300 	.word	0x58026300

080034d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b0b9      	sub	sp, #228	; 0xe4
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800350a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4aab      	ldr	r2, [pc, #684]	; (80037c0 <HAL_ADC_ConfigChannel+0x2d0>)
 8003512:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x34>
 800351e:	2302      	movs	r3, #2
 8003520:	f000 bcfe 	b.w	8003f20 <HAL_ADC_ConfigChannel+0xa30>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fb99 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 84e2 	bne.w	8003f02 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	db38      	blt.n	80035b8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a9e      	ldr	r2, [pc, #632]	; (80037c4 <HAL_ADC_ConfigChannel+0x2d4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d033      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_ADC_ConfigChannel+0x7e>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	2201      	movs	r2, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	e01d      	b.n	80035aa <HAL_ADC_ConfigChannel+0xba>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800358a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003592:	2320      	movs	r3, #32
 8003594:	e004      	b.n	80035a0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2201      	movs	r2, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	69d1      	ldr	r1, [r2, #28]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f7ff f9d8 	bl	800297a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fb4a 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 80035d4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fb6b 	bl	8002cb8 <LL_ADC_INJ_IsConversionOngoing>
 80035e2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8270 	bne.w	8003ad0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 826b 	bne.w	8003ad0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	461a      	mov	r2, r3
 8003608:	f7ff f9e3 	bl	80029d2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6c      	ldr	r2, [pc, #432]	; (80037c4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003630:	e032      	b.n	8003698 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003632:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800363e:	d10b      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x168>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	e01d      	b.n	8003694 <HAL_ADC_ConfigChannel+0x1a4>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_ADC_ConfigChannel+0x18e>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	e00a      	b.n	8003694 <HAL_ADC_ConfigChannel+0x1a4>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d048      	beq.n	8003732 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6919      	ldr	r1, [r3, #16]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036b0:	f7ff f85e 	bl	8002770 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <HAL_ADC_ConfigChannel+0x2d4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d119      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6919      	ldr	r1, [r3, #16]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f7ff f8f6 	bl	80028bc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6919      	ldr	r1, [r3, #16]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1f8>
 80036e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e6:	e000      	b.n	80036ea <HAL_ADC_ConfigChannel+0x1fa>
 80036e8:	2300      	movs	r3, #0
 80036ea:	461a      	mov	r2, r3
 80036ec:	f7ff f8c4 	bl	8002878 <LL_ADC_SetOffsetSaturation>
 80036f0:	e1ee      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6919      	ldr	r1, [r3, #16]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <HAL_ADC_ConfigChannel+0x21a>
 8003704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003708:	e000      	b.n	800370c <HAL_ADC_ConfigChannel+0x21c>
 800370a:	2300      	movs	r3, #0
 800370c:	461a      	mov	r2, r3
 800370e:	f7ff f891 	bl	8002834 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6919      	ldr	r1, [r3, #16]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	7e1b      	ldrb	r3, [r3, #24]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x238>
 8003722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003726:	e000      	b.n	800372a <HAL_ADC_ConfigChannel+0x23a>
 8003728:	2300      	movs	r3, #0
 800372a:	461a      	mov	r2, r3
 800372c:	f7ff f868 	bl	8002800 <LL_ADC_SetDataRightShift>
 8003730:	e1ce      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a23      	ldr	r2, [pc, #140]	; (80037c4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	f040 8181 	bne.w	8003a40 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff f845 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 800374a:	4603      	mov	r3, r0
 800374c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <HAL_ADC_ConfigChannel+0x27a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff f83a 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 8003760:	4603      	mov	r3, r0
 8003762:	0e9b      	lsrs	r3, r3, #26
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	e01e      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x2b8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff f82f 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 8003776:	4603      	mov	r3, r0
 8003778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800378c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003790:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003798:	2320      	movs	r3, #32
 800379a:	e004      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 800379c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x2dc>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0e9b      	lsrs	r3, r3, #26
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	e01e      	b.n	80037fe <HAL_ADC_ConfigChannel+0x30e>
 80037c0:	47ff0000 	.word	0x47ff0000
 80037c4:	58026000 	.word	0x58026000
 80037c8:	5c001000 	.word	0x5c001000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80037e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80037e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e004      	b.n	80037fe <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80037f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	429a      	cmp	r2, r3
 8003800:	d106      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff f878 	bl	8002900 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe ffdc 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 800381c:	4603      	mov	r3, r0
 800381e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <HAL_ADC_ConfigChannel+0x34c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe ffd1 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 8003832:	4603      	mov	r3, r0
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	f003 021f 	and.w	r2, r3, #31
 800383a:	e01e      	b.n	800387a <HAL_ADC_ConfigChannel+0x38a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe ffc6 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 8003848:	4603      	mov	r3, r0
 800384a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800385a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800385e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800386a:	2320      	movs	r3, #32
 800386c:	e004      	b.n	8003878 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800386e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003882:	2b00      	cmp	r3, #0
 8003884:	d105      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x3a2>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	0e9b      	lsrs	r3, r3, #26
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	e018      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x3d4>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80038a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80038ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80038b6:	2320      	movs	r3, #32
 80038b8:	e004      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80038ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d106      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2101      	movs	r1, #1
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff f815 	bl	8002900 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2102      	movs	r1, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe ff79 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x412>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2102      	movs	r1, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe ff6e 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 80038f8:	4603      	mov	r3, r0
 80038fa:	0e9b      	lsrs	r3, r3, #26
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	e01e      	b.n	8003940 <HAL_ADC_ConfigChannel+0x450>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe ff63 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003930:	2320      	movs	r3, #32
 8003932:	e004      	b.n	800393e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003938:	fab3 f383 	clz	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x468>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	e014      	b.n	8003982 <HAL_ADC_ConfigChannel+0x492>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800396c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003974:	2320      	movs	r3, #32
 8003976:	e004      	b.n	8003982 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	429a      	cmp	r2, r3
 8003984:	d106      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	2102      	movs	r1, #2
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe ffb6 	bl	8002900 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2103      	movs	r1, #3
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe ff1a 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x4d0>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2103      	movs	r1, #3
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe ff0f 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 80039b6:	4603      	mov	r3, r0
 80039b8:	0e9b      	lsrs	r3, r3, #26
 80039ba:	f003 021f 	and.w	r2, r3, #31
 80039be:	e017      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x500>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2103      	movs	r1, #3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe ff04 	bl	80027d4 <LL_ADC_GetOffsetChannel>
 80039cc:	4603      	mov	r3, r0
 80039ce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039da:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80039dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80039e2:	2320      	movs	r3, #32
 80039e4:	e003      	b.n	80039ee <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80039e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x518>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	e011      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x53c>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a18:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003a20:	2320      	movs	r3, #32
 8003a22:	e003      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d14f      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2200      	movs	r2, #0
 8003a36:	2103      	movs	r1, #3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe ff61 	bl	8002900 <LL_ADC_SetOffsetState>
 8003a3e:	e047      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	069b      	lsls	r3, r3, #26
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a62:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	069b      	lsls	r3, r3, #26
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d107      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a86:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	069b      	lsls	r3, r3, #26
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d107      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aaa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	069b      	lsls	r3, r3, #26
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d107      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ace:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f879 	bl	8002bcc <LL_ADC_IsEnabled>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 8219 	bne.w	8003f14 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6819      	ldr	r1, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f7fe ff9a 	bl	8002a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4aa1      	ldr	r2, [pc, #644]	; (8003d80 <HAL_ADC_ConfigChannel+0x890>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	f040 812e 	bne.w	8003d5c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x638>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	3301      	adds	r3, #1
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	bf94      	ite	ls
 8003b20:	2301      	movls	r3, #1
 8003b22:	2300      	movhi	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e019      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x66c>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	e003      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2b09      	cmp	r3, #9
 8003b54:	bf94      	ite	ls
 8003b56:	2301      	movls	r3, #1
 8003b58:	2300      	movhi	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d079      	beq.n	8003c54 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d107      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x68c>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	0e9b      	lsrs	r3, r3, #26
 8003b72:	3301      	adds	r3, #1
 8003b74:	069b      	lsls	r3, r3, #26
 8003b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b7a:	e015      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x6b8>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003b94:	2320      	movs	r3, #32
 8003b96:	e003      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	069b      	lsls	r3, r3, #26
 8003ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x6d8>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	e017      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x708>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003be0:	2320      	movs	r3, #32
 8003be2:	e003      	b.n	8003bec <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	ea42 0103 	orr.w	r1, r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x72e>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0e9b      	lsrs	r3, r3, #26
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	051b      	lsls	r3, r3, #20
 8003c1c:	e018      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x760>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003c36:	2320      	movs	r3, #32
 8003c38:	e003      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	fab3 f383 	clz	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	4613      	mov	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c50:	430b      	orrs	r3, r1
 8003c52:	e07e      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d107      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x780>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	069b      	lsls	r3, r3, #26
 8003c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c6e:	e015      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x7ac>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003c88:	2320      	movs	r3, #32
 8003c8a:	e003      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	3301      	adds	r3, #1
 8003c96:	069b      	lsls	r3, r3, #26
 8003c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x7cc>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	0e9b      	lsrs	r3, r3, #26
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	e017      	b.n	8003cec <HAL_ADC_ConfigChannel+0x7fc>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	61bb      	str	r3, [r7, #24]
  return result;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	e003      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	fab3 f383 	clz	r3, r3
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	ea42 0103 	orr.w	r1, r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10d      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x828>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	3301      	adds	r3, #1
 8003d04:	f003 021f 	and.w	r2, r3, #31
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3b1e      	subs	r3, #30
 8003d10:	051b      	lsls	r3, r3, #20
 8003d12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d16:	e01b      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x860>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	60fb      	str	r3, [r7, #12]
  return result;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003d30:	2320      	movs	r3, #32
 8003d32:	e003      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f003 021f 	and.w	r2, r3, #31
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	3b1e      	subs	r3, #30
 8003d4a:	051b      	lsls	r3, r3, #20
 8003d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d50:	430b      	orrs	r3, r1
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	6892      	ldr	r2, [r2, #8]
 8003d56:	4619      	mov	r1, r3
 8003d58:	f7fe fe3b 	bl	80029d2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f280 80d7 	bge.w	8003f14 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <HAL_ADC_ConfigChannel+0x894>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_ADC_ConfigChannel+0x88a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HAL_ADC_ConfigChannel+0x898>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10a      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x8a0>
 8003d7a:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_ADC_ConfigChannel+0x89c>)
 8003d7c:	e009      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x8a2>
 8003d7e:	bf00      	nop
 8003d80:	47ff0000 	.word	0x47ff0000
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40022100 	.word	0x40022100
 8003d8c:	40022300 	.word	0x40022300
 8003d90:	4b65      	ldr	r3, [pc, #404]	; (8003f28 <HAL_ADC_ConfigChannel+0xa38>)
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fcde 	bl	8002754 <LL_ADC_GetCommonPathInternalCh>
 8003d98:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a62      	ldr	r2, [pc, #392]	; (8003f2c <HAL_ADC_ConfigChannel+0xa3c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_ADC_ConfigChannel+0x8c0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a61      	ldr	r2, [pc, #388]	; (8003f30 <HAL_ADC_ConfigChannel+0xa40>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d10e      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x8de>
 8003db0:	485e      	ldr	r0, [pc, #376]	; (8003f2c <HAL_ADC_ConfigChannel+0xa3c>)
 8003db2:	f7fe ff0b 	bl	8002bcc <LL_ADC_IsEnabled>
 8003db6:	4604      	mov	r4, r0
 8003db8:	485d      	ldr	r0, [pc, #372]	; (8003f30 <HAL_ADC_ConfigChannel+0xa40>)
 8003dba:	f7fe ff07 	bl	8002bcc <LL_ADC_IsEnabled>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4323      	orrs	r3, r4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	e008      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x8f0>
 8003dce:	4859      	ldr	r0, [pc, #356]	; (8003f34 <HAL_ADC_ConfigChannel+0xa44>)
 8003dd0:	f7fe fefc 	bl	8002bcc <LL_ADC_IsEnabled>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8084 	beq.w	8003eee <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a53      	ldr	r2, [pc, #332]	; (8003f38 <HAL_ADC_ConfigChannel+0xa48>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d132      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x966>
 8003df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d12c      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a4c      	ldr	r2, [pc, #304]	; (8003f34 <HAL_ADC_ConfigChannel+0xa44>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	f040 8086 	bne.w	8003f14 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a47      	ldr	r2, [pc, #284]	; (8003f2c <HAL_ADC_ConfigChannel+0xa3c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_ADC_ConfigChannel+0x92c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a46      	ldr	r2, [pc, #280]	; (8003f30 <HAL_ADC_ConfigChannel+0xa40>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x930>
 8003e1c:	4a47      	ldr	r2, [pc, #284]	; (8003f3c <HAL_ADC_ConfigChannel+0xa4c>)
 8003e1e:	e000      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x932>
 8003e20:	4a41      	ldr	r2, [pc, #260]	; (8003f28 <HAL_ADC_ConfigChannel+0xa38>)
 8003e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe fc7e 	bl	800272e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e32:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <HAL_ADC_ConfigChannel+0xa50>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	4a42      	ldr	r2, [pc, #264]	; (8003f44 <HAL_ADC_ConfigChannel+0xa54>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	099b      	lsrs	r3, r3, #6
 8003e40:	3301      	adds	r3, #1
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e46:	e002      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f9      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e54:	e05e      	b.n	8003f14 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <HAL_ADC_ConfigChannel+0xa58>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d120      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x9b2>
 8003e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d11a      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <HAL_ADC_ConfigChannel+0xa44>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d14e      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <HAL_ADC_ConfigChannel+0xa3c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_ADC_ConfigChannel+0x99a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <HAL_ADC_ConfigChannel+0xa40>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x99e>
 8003e8a:	4a2c      	ldr	r2, [pc, #176]	; (8003f3c <HAL_ADC_ConfigChannel+0xa4c>)
 8003e8c:	e000      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x9a0>
 8003e8e:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <HAL_ADC_ConfigChannel+0xa38>)
 8003e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7fe fc47 	bl	800272e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ea0:	e038      	b.n	8003f14 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <HAL_ADC_ConfigChannel+0xa5c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d133      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0xa24>
 8003eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d12d      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_ADC_ConfigChannel+0xa44>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d128      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_ADC_ConfigChannel+0xa3c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x9e6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_ADC_ConfigChannel+0xa40>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x9ea>
 8003ed6:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <HAL_ADC_ConfigChannel+0xa4c>)
 8003ed8:	e000      	b.n	8003edc <HAL_ADC_ConfigChannel+0x9ec>
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <HAL_ADC_ConfigChannel+0xa38>)
 8003edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f7fe fc21 	bl	800272e <LL_ADC_SetCommonPathInternalCh>
 8003eec:	e012      	b.n	8003f14 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003f00:	e008      	b.n	8003f14 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003f1c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	37e4      	adds	r7, #228	; 0xe4
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd90      	pop	{r4, r7, pc}
 8003f28:	58026300 	.word	0x58026300
 8003f2c:	40022000 	.word	0x40022000
 8003f30:	40022100 	.word	0x40022100
 8003f34:	58026000 	.word	0x58026000
 8003f38:	c7520000 	.word	0xc7520000
 8003f3c:	40022300 	.word	0x40022300
 8003f40:	2400003c 	.word	0x2400003c
 8003f44:	053e2d63 	.word	0x053e2d63
 8003f48:	c3210000 	.word	0xc3210000
 8003f4c:	cb840000 	.word	0xcb840000

08003f50 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fe7e 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8003f6c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fea0 	bl	8002cb8 <LL_ADC_INJ_IsConversionOngoing>
 8003f78:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8098 	beq.w	80040b8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02a      	beq.n	8003fec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7e5b      	ldrb	r3, [r3, #25]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d126      	bne.n	8003fec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	7e1b      	ldrb	r3, [r3, #24]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d122      	bne.n	8003fec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003faa:	e014      	b.n	8003fd6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4a45      	ldr	r2, [pc, #276]	; (80040c4 <ADC_ConversionStop+0x174>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d90d      	bls.n	8003fd0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb8:	f043 0210 	orr.w	r2, r3, #16
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc4:	f043 0201 	orr.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e074      	b.n	80040ba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d1e3      	bne.n	8003fac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d014      	beq.n	800401c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fe36 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fdf3 	bl	8002bf2 <LL_ADC_IsDisableOngoing>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fe12 	bl	8002c40 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d014      	beq.n	800404c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fe46 	bl	8002cb8 <LL_ADC_INJ_IsConversionOngoing>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00c      	beq.n	800404c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fddb 	bl	8002bf2 <LL_ADC_IsDisableOngoing>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d104      	bne.n	800404c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fe22 	bl	8002c90 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d005      	beq.n	800405e <ADC_ConversionStop+0x10e>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d105      	bne.n	8004064 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004058:	230c      	movs	r3, #12
 800405a:	617b      	str	r3, [r7, #20]
        break;
 800405c:	e005      	b.n	800406a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800405e:	2308      	movs	r3, #8
 8004060:	617b      	str	r3, [r7, #20]
        break;
 8004062:	e002      	b.n	800406a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004064:	2304      	movs	r3, #4
 8004066:	617b      	str	r3, [r7, #20]
        break;
 8004068:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800406a:	f7fe fb1d 	bl	80026a8 <HAL_GetTick>
 800406e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004070:	e01b      	b.n	80040aa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004072:	f7fe fb19 	bl	80026a8 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b05      	cmp	r3, #5
 800407e:	d914      	bls.n	80040aa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004092:	f043 0210 	orr.w	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e007      	b.n	80040ba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1dc      	bne.n	8004072 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	000cdbff 	.word	0x000cdbff

080040c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fd79 	bl	8002bcc <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d16e      	bne.n	80041be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	4b38      	ldr	r3, [pc, #224]	; (80041c8 <ADC_Enable+0x100>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00d      	beq.n	800410a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	f043 0210 	orr.w	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e05a      	b.n	80041c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fd34 	bl	8002b7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004114:	f7fe fac8 	bl	80026a8 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2b      	ldr	r2, [pc, #172]	; (80041cc <ADC_Enable+0x104>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <ADC_Enable+0x66>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <ADC_Enable+0x108>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <ADC_Enable+0x6a>
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <ADC_Enable+0x10c>)
 8004130:	e000      	b.n	8004134 <ADC_Enable+0x6c>
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <ADC_Enable+0x110>)
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe fcb7 	bl	8002aa8 <LL_ADC_GetMultimode>
 800413a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <ADC_Enable+0x108>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d002      	beq.n	800414c <ADC_Enable+0x84>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	e000      	b.n	800414e <ADC_Enable+0x86>
 800414c:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <ADC_Enable+0x104>)
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	4293      	cmp	r3, r2
 8004154:	d02c      	beq.n	80041b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d130      	bne.n	80041be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800415c:	e028      	b.n	80041b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fd32 	bl	8002bcc <LL_ADC_IsEnabled>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fd02 	bl	8002b7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004178:	f7fe fa96 	bl	80026a8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d914      	bls.n	80041b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d00d      	beq.n	80041b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004198:	f043 0210 	orr.w	r2, r3, #16
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a4:	f043 0201 	orr.w	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e007      	b.n	80041c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d1cf      	bne.n	800415e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	8000003f 	.word	0x8000003f
 80041cc:	40022000 	.word	0x40022000
 80041d0:	40022100 	.word	0x40022100
 80041d4:	40022300 	.word	0x40022300
 80041d8:	58026300 	.word	0x58026300

080041dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe fd02 	bl	8002bf2 <LL_ADC_IsDisableOngoing>
 80041ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fce9 	bl	8002bcc <LL_ADC_IsEnabled>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d047      	beq.n	8004290 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d144      	bne.n	8004290 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030d 	and.w	r3, r3, #13
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10c      	bne.n	800422e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe fcc3 	bl	8002ba4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2203      	movs	r2, #3
 8004224:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004226:	f7fe fa3f 	bl	80026a8 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800422c:	e029      	b.n	8004282 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	f043 0210 	orr.w	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423e:	f043 0201 	orr.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e023      	b.n	8004292 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800424a:	f7fe fa2d 	bl	80026a8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d914      	bls.n	8004282 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e007      	b.n	8004292 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1dc      	bne.n	800424a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6c      	ldr	r2, [pc, #432]	; (800445c <ADC_ConfigureBoostMode+0x1c0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <ADC_ConfigureBoostMode+0x1c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6b      	ldr	r2, [pc, #428]	; (8004460 <ADC_ConfigureBoostMode+0x1c4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d109      	bne.n	80042cc <ADC_ConfigureBoostMode+0x30>
 80042b8:	4b6a      	ldr	r3, [pc, #424]	; (8004464 <ADC_ConfigureBoostMode+0x1c8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e008      	b.n	80042de <ADC_ConfigureBoostMode+0x42>
 80042cc:	4b66      	ldr	r3, [pc, #408]	; (8004468 <ADC_ConfigureBoostMode+0x1cc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01c      	beq.n	800431c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80042e2:	f002 f9a7 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 80042e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f0:	d010      	beq.n	8004314 <ADC_ConfigureBoostMode+0x78>
 80042f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f6:	d873      	bhi.n	80043e0 <ADC_ConfigureBoostMode+0x144>
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d002      	beq.n	8004304 <ADC_ConfigureBoostMode+0x68>
 80042fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004302:	d16d      	bne.n	80043e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	60fb      	str	r3, [r7, #12]
        break;
 8004312:	e068      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	60fb      	str	r3, [r7, #12]
        break;
 800431a:	e064      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800431c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	f003 fb82 	bl	8007a2c <HAL_RCCEx_GetPeriphCLKFreq>
 8004328:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004332:	d051      	beq.n	80043d8 <ADC_ConfigureBoostMode+0x13c>
 8004334:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004338:	d854      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 800433a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800433e:	d047      	beq.n	80043d0 <ADC_ConfigureBoostMode+0x134>
 8004340:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004344:	d84e      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 8004346:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800434a:	d03d      	beq.n	80043c8 <ADC_ConfigureBoostMode+0x12c>
 800434c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004350:	d848      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 8004352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004356:	d033      	beq.n	80043c0 <ADC_ConfigureBoostMode+0x124>
 8004358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800435c:	d842      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 800435e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004362:	d029      	beq.n	80043b8 <ADC_ConfigureBoostMode+0x11c>
 8004364:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004368:	d83c      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 800436a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800436e:	d01a      	beq.n	80043a6 <ADC_ConfigureBoostMode+0x10a>
 8004370:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004374:	d836      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 8004376:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800437a:	d014      	beq.n	80043a6 <ADC_ConfigureBoostMode+0x10a>
 800437c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004380:	d830      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004386:	d00e      	beq.n	80043a6 <ADC_ConfigureBoostMode+0x10a>
 8004388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438c:	d82a      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 800438e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004392:	d008      	beq.n	80043a6 <ADC_ConfigureBoostMode+0x10a>
 8004394:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004398:	d824      	bhi.n	80043e4 <ADC_ConfigureBoostMode+0x148>
 800439a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800439e:	d002      	beq.n	80043a6 <ADC_ConfigureBoostMode+0x10a>
 80043a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043a4:	d11e      	bne.n	80043e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	0c9b      	lsrs	r3, r3, #18
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	60fb      	str	r3, [r7, #12]
        break;
 80043b6:	e016      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]
        break;
 80043be:	e012      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	60fb      	str	r3, [r7, #12]
        break;
 80043c6:	e00e      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	60fb      	str	r3, [r7, #12]
        break;
 80043ce:	e00a      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	09db      	lsrs	r3, r3, #7
 80043d4:	60fb      	str	r3, [r7, #12]
        break;
 80043d6:	e006      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	60fb      	str	r3, [r7, #12]
        break;
 80043de:	e002      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80043e4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a1f      	ldr	r2, [pc, #124]	; (800446c <ADC_ConfigureBoostMode+0x1d0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d808      	bhi.n	8004406 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004402:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004404:	e025      	b.n	8004452 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a19      	ldr	r2, [pc, #100]	; (8004470 <ADC_ConfigureBoostMode+0x1d4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d80a      	bhi.n	8004424 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004420:	609a      	str	r2, [r3, #8]
}
 8004422:	e016      	b.n	8004452 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4a13      	ldr	r2, [pc, #76]	; (8004474 <ADC_ConfigureBoostMode+0x1d8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d80a      	bhi.n	8004442 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	e007      	b.n	8004452 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004450:	609a      	str	r2, [r3, #8]
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40022000 	.word	0x40022000
 8004460:	40022100 	.word	0x40022100
 8004464:	40022300 	.word	0x40022300
 8004468:	58026300 	.word	0x58026300
 800446c:	005f5e10 	.word	0x005f5e10
 8004470:	00bebc20 	.word	0x00bebc20
 8004474:	017d7840 	.word	0x017d7840

08004478 <LL_ADC_IsEnabled>:
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <LL_ADC_IsEnabled+0x18>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <LL_ADC_IsEnabled+0x1a>
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_ADC_REG_IsConversionOngoing>:
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d101      	bne.n	80044b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b0a3      	sub	sp, #140	; 0x8c
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044de:	2302      	movs	r3, #2
 80044e0:	e0c1      	b.n	8004666 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5e      	ldr	r2, [pc, #376]	; (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d102      	bne.n	8004502 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044fc:	4b5d      	ldr	r3, [pc, #372]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e001      	b.n	8004506 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0a0      	b.n	8004666 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ffb9 	bl	800449e <LL_ADC_REG_IsConversionOngoing>
 800452c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ffb2 	bl	800449e <LL_ADC_REG_IsConversionOngoing>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 8081 	bne.w	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d17c      	bne.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a48      	ldr	r2, [pc, #288]	; (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a46      	ldr	r2, [pc, #280]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800455e:	4b46      	ldr	r3, [pc, #280]	; (8004678 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004560:	e000      	b.n	8004564 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004562:	4b46      	ldr	r3, [pc, #280]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004564:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d039      	beq.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800456e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	431a      	orrs	r2, r3
 800457c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800457e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a3a      	ldr	r2, [pc, #232]	; (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a39      	ldr	r2, [pc, #228]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10e      	bne.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004594:	4836      	ldr	r0, [pc, #216]	; (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004596:	f7ff ff6f 	bl	8004478 <LL_ADC_IsEnabled>
 800459a:	4604      	mov	r4, r0
 800459c:	4835      	ldr	r0, [pc, #212]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800459e:	f7ff ff6b 	bl	8004478 <LL_ADC_IsEnabled>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4323      	orrs	r3, r4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e008      	b.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80045b2:	4833      	ldr	r0, [pc, #204]	; (8004680 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80045b4:	f7ff ff60 	bl	8004478 <LL_ADC_IsEnabled>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf0c      	ite	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	2300      	movne	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d047      	beq.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	6811      	ldr	r1, [r2, #0]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	6892      	ldr	r2, [r2, #8]
 80045d8:	430a      	orrs	r2, r1
 80045da:	431a      	orrs	r2, r3
 80045dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045e0:	e03a      	b.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80045e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10e      	bne.n	8004620 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004602:	481b      	ldr	r0, [pc, #108]	; (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004604:	f7ff ff38 	bl	8004478 <LL_ADC_IsEnabled>
 8004608:	4604      	mov	r4, r0
 800460a:	481a      	ldr	r0, [pc, #104]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800460c:	f7ff ff34 	bl	8004478 <LL_ADC_IsEnabled>
 8004610:	4603      	mov	r3, r0
 8004612:	4323      	orrs	r3, r4
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e008      	b.n	8004632 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004620:	4817      	ldr	r0, [pc, #92]	; (8004680 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004622:	f7ff ff29 	bl	8004478 <LL_ADC_IsEnabled>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d010      	beq.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800463c:	4013      	ands	r3, r2
 800463e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004640:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004642:	e009      	b.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004656:	e000      	b.n	800465a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004658:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004662:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004666:	4618      	mov	r0, r3
 8004668:	378c      	adds	r7, #140	; 0x8c
 800466a:	46bd      	mov	sp, r7
 800466c:	bd90      	pop	{r4, r7, pc}
 800466e:	bf00      	nop
 8004670:	40022000 	.word	0x40022000
 8004674:	40022100 	.word	0x40022100
 8004678:	40022300 	.word	0x40022300
 800467c:	58026300 	.word	0x58026300
 8004680:	58026000 	.word	0x58026000
 8004684:	fffff0e0 	.word	0xfffff0e0

08004688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <__NVIC_SetPriorityGrouping+0x40>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046a4:	4013      	ands	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <__NVIC_SetPriorityGrouping+0x44>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046b6:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <__NVIC_SetPriorityGrouping+0x40>)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	60d3      	str	r3, [r2, #12]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000ed00 	.word	0xe000ed00
 80046cc:	05fa0000 	.word	0x05fa0000

080046d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <__NVIC_GetPriorityGrouping+0x18>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	f003 0307 	and.w	r3, r3, #7
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	db0a      	blt.n	8004716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	b2da      	uxtb	r2, r3
 8004704:	490c      	ldr	r1, [pc, #48]	; (8004738 <__NVIC_SetPriority+0x4c>)
 8004706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	440b      	add	r3, r1
 8004710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004714:	e00a      	b.n	800472c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4908      	ldr	r1, [pc, #32]	; (800473c <__NVIC_SetPriority+0x50>)
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	3b04      	subs	r3, #4
 8004724:	0112      	lsls	r2, r2, #4
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	440b      	add	r3, r1
 800472a:	761a      	strb	r2, [r3, #24]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	e000e100 	.word	0xe000e100
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f1c3 0307 	rsb	r3, r3, #7
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf28      	it	cs
 800475e:	2304      	movcs	r3, #4
 8004760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3304      	adds	r3, #4
 8004766:	2b06      	cmp	r3, #6
 8004768:	d902      	bls.n	8004770 <NVIC_EncodePriority+0x30>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3b03      	subs	r3, #3
 800476e:	e000      	b.n	8004772 <NVIC_EncodePriority+0x32>
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43da      	mvns	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	401a      	ands	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004788:	f04f 31ff 	mov.w	r1, #4294967295
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	43d9      	mvns	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004798:	4313      	orrs	r3, r2
         );
}
 800479a:	4618      	mov	r0, r3
 800479c:	3724      	adds	r7, #36	; 0x24
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047b8:	d301      	bcc.n	80047be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00f      	b.n	80047de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <SysTick_Config+0x40>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047c6:	210f      	movs	r1, #15
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	f7ff ff8e 	bl	80046ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <SysTick_Config+0x40>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <SysTick_Config+0x40>)
 80047d8:	2207      	movs	r2, #7
 80047da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	e000e010 	.word	0xe000e010

080047ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff47 	bl	8004688 <__NVIC_SetPriorityGrouping>
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	4603      	mov	r3, r0
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004810:	f7ff ff5e 	bl	80046d0 <__NVIC_GetPriorityGrouping>
 8004814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	6978      	ldr	r0, [r7, #20]
 800481c:	f7ff ff90 	bl	8004740 <NVIC_EncodePriority>
 8004820:	4602      	mov	r2, r0
 8004822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff5f 	bl	80046ec <__NVIC_SetPriority>
}
 800482e:	bf00      	nop
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ffb2 	bl	80047a8 <SysTick_Config>
 8004844:	4603      	mov	r3, r0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b098      	sub	sp, #96	; 0x60
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004858:	4a84      	ldr	r2, [pc, #528]	; (8004a6c <HAL_FDCAN_Init+0x21c>)
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	4611      	mov	r1, r2
 8004860:	224c      	movs	r2, #76	; 0x4c
 8004862:	4618      	mov	r0, r3
 8004864:	f006 fc06 	bl	800b074 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e1c6      	b.n	8004c00 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7e      	ldr	r2, [pc, #504]	; (8004a70 <HAL_FDCAN_Init+0x220>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d106      	bne.n	800488a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004884:	461a      	mov	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd fb8a 	bl	8001fb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0210 	bic.w	r2, r2, #16
 80048b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048b4:	f7fd fef8 	bl	80026a8 <HAL_GetTick>
 80048b8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048ba:	e014      	b.n	80048e6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80048bc:	f7fd fef4 	bl	80026a8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b0a      	cmp	r3, #10
 80048c8:	d90d      	bls.n	80048e6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048d0:	f043 0201 	orr.w	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2203      	movs	r2, #3
 80048de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e18c      	b.n	8004c00 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d0e3      	beq.n	80048bc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004904:	f7fd fed0 	bl	80026a8 <HAL_GetTick>
 8004908:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800490a:	e014      	b.n	8004936 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800490c:	f7fd fecc 	bl	80026a8 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b0a      	cmp	r3, #10
 8004918:	d90d      	bls.n	8004936 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004920:	f043 0201 	orr.w	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2203      	movs	r2, #3
 800492e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e164      	b.n	8004c00 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0e3      	beq.n	800490c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0202 	orr.w	r2, r2, #2
 8004952:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	7c1b      	ldrb	r3, [r3, #16]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d108      	bne.n	800496e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	619a      	str	r2, [r3, #24]
 800496c:	e007      	b.n	800497e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800497c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7c5b      	ldrb	r3, [r3, #17]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d108      	bne.n	8004998 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004994:	619a      	str	r2, [r3, #24]
 8004996:	e007      	b.n	80049a8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	7c9b      	ldrb	r3, [r3, #18]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d108      	bne.n	80049c2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049be:	619a      	str	r2, [r3, #24]
 80049c0:	e007      	b.n	80049d2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699a      	ldr	r2, [r3, #24]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049d0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80049f6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0210 	bic.w	r2, r2, #16
 8004a06:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0204 	orr.w	r2, r2, #4
 8004a1e:	619a      	str	r2, [r3, #24]
 8004a20:	e030      	b.n	8004a84 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d02c      	beq.n	8004a84 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d020      	beq.n	8004a74 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a40:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0210 	orr.w	r2, r2, #16
 8004a50:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d114      	bne.n	8004a84 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0220 	orr.w	r2, r2, #32
 8004a68:	619a      	str	r2, [r3, #24]
 8004a6a:	e00b      	b.n	8004a84 <HAL_FDCAN_Init+0x234>
 8004a6c:	0800bba8 	.word	0x0800bba8
 8004a70:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0220 	orr.w	r2, r2, #32
 8004a82:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a94:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a9c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004aac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004aae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab8:	d115      	bne.n	8004ae6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ac8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ad2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	3b01      	subs	r3, #1
 8004adc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ae2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ae4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0c:	4413      	add	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d011      	beq.n	8004b36 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b1a:	f023 0107 	bic.w	r1, r3, #7
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3360      	adds	r3, #96	; 0x60
 8004b26:	443b      	add	r3, r7
 8004b28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b46:	f023 0107 	bic.w	r1, r3, #7
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	3360      	adds	r3, #96	; 0x60
 8004b52:	443b      	add	r3, r7
 8004b54:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d012      	beq.n	8004b90 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b72:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3360      	adds	r3, #96	; 0x60
 8004b7e:	443b      	add	r3, r7
 8004b80:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b84:	011a      	lsls	r2, r3, #4
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d012      	beq.n	8004bbe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ba0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	3360      	adds	r3, #96	; 0x60
 8004bac:	443b      	add	r3, r7
 8004bae:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <HAL_FDCAN_Init+0x3b8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d107      	bne.n	8004bd8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f022 0203 	bic.w	r2, r2, #3
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f9fd 	bl	8004ff0 <FDCAN_CalcultateRamBlockAddresses>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004bfc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3760      	adds	r7, #96	; 0x60
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	4000a000 	.word	0x4000a000

08004c0c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d111      	bne.n	8004c44 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e008      	b.n	8004c56 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c4a:	f043 0204 	orr.w	r2, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
  }
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d141      	bne.n	8004cfe <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c82:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e038      	b.n	8004d10 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e026      	b.n	8004d10 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fb0f 	bl	80052fc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004cee:	2201      	movs	r2, #1
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e008      	b.n	8004d10 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d04:	f043 0208 	orr.w	r2, r3, #8
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
  }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b08b      	sub	sp, #44	; 0x2c
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004d30:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004d32:	7efb      	ldrb	r3, [r7, #27]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	f040 8149 	bne.w	8004fcc <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d14c      	bne.n	8004dda <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e13c      	b.n	8004fde <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e12a      	b.n	8004fde <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d90:	0e1b      	lsrs	r3, r3, #24
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d10a      	bne.n	8004db0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004da2:	0fdb      	lsrs	r3, r3, #31
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004dac:	2301      	movs	r3, #1
 8004dae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	69f9      	ldr	r1, [r7, #28]
 8004dce:	fb01 f303 	mul.w	r3, r1, r3
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd8:	e068      	b.n	8004eac <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b41      	cmp	r3, #65	; 0x41
 8004dde:	d14c      	bne.n	8004e7a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004de8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0ec      	b.n	8004fde <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0da      	b.n	8004fde <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e30:	0e1b      	lsrs	r3, r3, #24
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d10a      	bne.n	8004e50 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e42:	0fdb      	lsrs	r3, r3, #31
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e58:	0a1b      	lsrs	r3, r3, #8
 8004e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	69f9      	ldr	r1, [r7, #28]
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
 8004e78:	e018      	b.n	8004eac <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d309      	bcc.n	8004e98 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0a2      	b.n	8004fde <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d107      	bne.n	8004ed0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	0c9b      	lsrs	r3, r3, #18
 8004ec6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e005      	b.n	8004edc <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	f003 020f 	and.w	r2, r3, #15
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	0e1b      	lsrs	r3, r3, #24
 8004f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	0fda      	lsrs	r2, r3, #31
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	3304      	adds	r3, #4
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	623b      	str	r3, [r7, #32]
 8004f50:	e00a      	b.n	8004f68 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	441a      	add	r2, r3
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	440b      	add	r3, r1
 8004f5e:	7812      	ldrb	r2, [r2, #0]
 8004f60:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	3301      	adds	r3, #1
 8004f66:	623b      	str	r3, [r7, #32]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004f6e:	5cd3      	ldrb	r3, [r2, r3]
 8004f70:	461a      	mov	r2, r3
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d3ec      	bcc.n	8004f52 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d105      	bne.n	8004f8a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004f88:	e01e      	b.n	8004fc8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b41      	cmp	r3, #65	; 0x41
 8004f8e:	d105      	bne.n	8004f9c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004f9a:	e015      	b.n	8004fc8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b1f      	cmp	r3, #31
 8004fa0:	d808      	bhi.n	8004fb4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	fa01 f202 	lsl.w	r2, r1, r2
 8004fae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004fb2:	e009      	b.n	8004fc8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 021f 	and.w	r2, r3, #31
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e008      	b.n	8004fde <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fd2:	f043 0208 	orr.w	r2, r3, #8
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
  }
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	372c      	adds	r7, #44	; 0x2c
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	0800bc04 	.word	0x0800bc04

08004ff0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005006:	4ba7      	ldr	r3, [pc, #668]	; (80052a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005008:	4013      	ands	r3, r2
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	0091      	lsls	r1, r2, #2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	430b      	orrs	r3, r1
 8005014:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005020:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	041a      	lsls	r2, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	4413      	add	r3, r2
 800503c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005046:	4b97      	ldr	r3, [pc, #604]	; (80052a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005048:	4013      	ands	r3, r2
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	0091      	lsls	r1, r2, #2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	430b      	orrs	r3, r1
 8005054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	041a      	lsls	r2, r3, #16
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005088:	4b86      	ldr	r3, [pc, #536]	; (80052a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800508a:	4013      	ands	r3, r2
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	0091      	lsls	r1, r2, #2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	430b      	orrs	r3, r1
 8005096:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	041a      	lsls	r2, r3, #16
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4413      	add	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80050d0:	4b74      	ldr	r3, [pc, #464]	; (80052a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	0091      	lsls	r1, r2, #2
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	430b      	orrs	r3, r1
 80050de:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f2:	041a      	lsls	r2, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	4413      	add	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005118:	4b62      	ldr	r3, [pc, #392]	; (80052a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800511a:	4013      	ands	r3, r2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	0091      	lsls	r1, r2, #2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	430b      	orrs	r3, r1
 8005126:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	4413      	add	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005144:	4b57      	ldr	r3, [pc, #348]	; (80052a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005146:	4013      	ands	r3, r2
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	0091      	lsls	r1, r2, #2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	430b      	orrs	r3, r1
 8005152:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800515e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	041a      	lsls	r2, r3, #16
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	4413      	add	r3, r2
 800517c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005186:	4b47      	ldr	r3, [pc, #284]	; (80052a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005188:	4013      	ands	r3, r2
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0091      	lsls	r1, r2, #2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	430b      	orrs	r3, r1
 8005194:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051a0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	041a      	lsls	r2, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051bc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c4:	061a      	lsls	r2, r3, #24
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d4:	4b34      	ldr	r3, [pc, #208]	; (80052a8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80051d6:	4413      	add	r3, r2
 80051d8:	009a      	lsls	r2, r3, #2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005228:	441a      	add	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	4a04      	ldr	r2, [pc, #16]	; (80052ac <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d915      	bls.n	80052cc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80052a0:	e006      	b.n	80052b0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80052a2:	bf00      	nop
 80052a4:	ffff0003 	.word	0xffff0003
 80052a8:	10002b00 	.word	0x10002b00
 80052ac:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2203      	movs	r2, #3
 80052c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e010      	b.n	80052ee <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e005      	b.n	80052e0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3304      	adds	r3, #4
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3f3      	bcc.n	80052d4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop

080052fc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800531a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005322:	4313      	orrs	r3, r2
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	e00a      	b.n	800533e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005330:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005336:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800533c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005348:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800534e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005354:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	fb01 f303 	mul.w	r3, r1, r3
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	3304      	adds	r3, #4
 8005380:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	3304      	adds	r3, #4
 800538c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	e020      	b.n	80053d6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3303      	adds	r3, #3
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	3302      	adds	r3, #2
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	440b      	add	r3, r1
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053ac:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	3301      	adds	r3, #1
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	440b      	add	r3, r1
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80053ba:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	440a      	add	r2, r1
 80053c2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80053c4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3304      	adds	r3, #4
 80053ce:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	3304      	adds	r3, #4
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4a06      	ldr	r2, [pc, #24]	; (80053f4 <FDCAN_CopyMessageToRAM+0xf8>)
 80053dc:	5cd3      	ldrb	r3, [r2, r3]
 80053de:	461a      	mov	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d3d6      	bcc.n	8005394 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	3724      	adds	r7, #36	; 0x24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	0800bc04 	.word	0x0800bc04

080053f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b089      	sub	sp, #36	; 0x24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005406:	4b86      	ldr	r3, [pc, #536]	; (8005620 <HAL_GPIO_Init+0x228>)
 8005408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800540a:	e18c      	b.n	8005726 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	2101      	movs	r1, #1
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	4013      	ands	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 817e 	beq.w	8005720 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d005      	beq.n	800543c <HAL_GPIO_Init+0x44>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d130      	bne.n	800549e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	2203      	movs	r2, #3
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	43db      	mvns	r3, r3
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4013      	ands	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005472:	2201      	movs	r2, #1
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 0201 	and.w	r2, r3, #1
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4313      	orrs	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d017      	beq.n	80054da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2203      	movs	r2, #3
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d123      	bne.n	800552e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	08da      	lsrs	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3208      	adds	r2, #8
 80054ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	220f      	movs	r2, #15
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4313      	orrs	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	08da      	lsrs	r2, r3, #3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3208      	adds	r2, #8
 8005528:	69b9      	ldr	r1, [r7, #24]
 800552a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	2203      	movs	r2, #3
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43db      	mvns	r3, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 0203 	and.w	r2, r3, #3
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80d8 	beq.w	8005720 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005570:	4b2c      	ldr	r3, [pc, #176]	; (8005624 <HAL_GPIO_Init+0x22c>)
 8005572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005576:	4a2b      	ldr	r2, [pc, #172]	; (8005624 <HAL_GPIO_Init+0x22c>)
 8005578:	f043 0302 	orr.w	r3, r3, #2
 800557c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005580:	4b28      	ldr	r3, [pc, #160]	; (8005624 <HAL_GPIO_Init+0x22c>)
 8005582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800558e:	4a26      	ldr	r2, [pc, #152]	; (8005628 <HAL_GPIO_Init+0x230>)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	3302      	adds	r3, #2
 8005596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	220f      	movs	r2, #15
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	43db      	mvns	r3, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4013      	ands	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1d      	ldr	r2, [pc, #116]	; (800562c <HAL_GPIO_Init+0x234>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d04a      	beq.n	8005650 <HAL_GPIO_Init+0x258>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a1c      	ldr	r2, [pc, #112]	; (8005630 <HAL_GPIO_Init+0x238>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02b      	beq.n	800561a <HAL_GPIO_Init+0x222>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a1b      	ldr	r2, [pc, #108]	; (8005634 <HAL_GPIO_Init+0x23c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d025      	beq.n	8005616 <HAL_GPIO_Init+0x21e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1a      	ldr	r2, [pc, #104]	; (8005638 <HAL_GPIO_Init+0x240>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01f      	beq.n	8005612 <HAL_GPIO_Init+0x21a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a19      	ldr	r2, [pc, #100]	; (800563c <HAL_GPIO_Init+0x244>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d019      	beq.n	800560e <HAL_GPIO_Init+0x216>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a18      	ldr	r2, [pc, #96]	; (8005640 <HAL_GPIO_Init+0x248>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_GPIO_Init+0x212>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a17      	ldr	r2, [pc, #92]	; (8005644 <HAL_GPIO_Init+0x24c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00d      	beq.n	8005606 <HAL_GPIO_Init+0x20e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_GPIO_Init+0x250>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <HAL_GPIO_Init+0x20a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <HAL_GPIO_Init+0x254>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <HAL_GPIO_Init+0x206>
 80055fa:	2309      	movs	r3, #9
 80055fc:	e029      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 80055fe:	230a      	movs	r3, #10
 8005600:	e027      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 8005602:	2307      	movs	r3, #7
 8005604:	e025      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 8005606:	2306      	movs	r3, #6
 8005608:	e023      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 800560a:	2305      	movs	r3, #5
 800560c:	e021      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 800560e:	2304      	movs	r3, #4
 8005610:	e01f      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 8005612:	2303      	movs	r3, #3
 8005614:	e01d      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 8005616:	2302      	movs	r3, #2
 8005618:	e01b      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 800561a:	2301      	movs	r3, #1
 800561c:	e019      	b.n	8005652 <HAL_GPIO_Init+0x25a>
 800561e:	bf00      	nop
 8005620:	58000080 	.word	0x58000080
 8005624:	58024400 	.word	0x58024400
 8005628:	58000400 	.word	0x58000400
 800562c:	58020000 	.word	0x58020000
 8005630:	58020400 	.word	0x58020400
 8005634:	58020800 	.word	0x58020800
 8005638:	58020c00 	.word	0x58020c00
 800563c:	58021000 	.word	0x58021000
 8005640:	58021400 	.word	0x58021400
 8005644:	58021800 	.word	0x58021800
 8005648:	58021c00 	.word	0x58021c00
 800564c:	58022400 	.word	0x58022400
 8005650:	2300      	movs	r3, #0
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	f002 0203 	and.w	r2, r2, #3
 8005658:	0092      	lsls	r2, r2, #2
 800565a:	4093      	lsls	r3, r2
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005662:	4938      	ldr	r1, [pc, #224]	; (8005744 <HAL_GPIO_Init+0x34c>)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	3302      	adds	r3, #2
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800569e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	43db      	mvns	r3, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4013      	ands	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80056c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	3301      	adds	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	f47f ae6b 	bne.w	800540c <HAL_GPIO_Init+0x14>
  }
}
 8005736:	bf00      	nop
 8005738:	bf00      	nop
 800573a:	3724      	adds	r7, #36	; 0x24
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	58000400 	.word	0x58000400

08005748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e001      	b.n	800576a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005788:	787b      	ldrb	r3, [r7, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005794:	e003      	b.n	800579e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	041a      	lsls	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80057b4:	4b19      	ldr	r3, [pc, #100]	; (800581c <HAL_PWREx_ConfigSupply+0x70>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d00a      	beq.n	80057d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80057c0:	4b16      	ldr	r3, [pc, #88]	; (800581c <HAL_PWREx_ConfigSupply+0x70>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d001      	beq.n	80057d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e01f      	b.n	8005812 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e01d      	b.n	8005812 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057d6:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_PWREx_ConfigSupply+0x70>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f023 0207 	bic.w	r2, r3, #7
 80057de:	490f      	ldr	r1, [pc, #60]	; (800581c <HAL_PWREx_ConfigSupply+0x70>)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80057e6:	f7fc ff5f 	bl	80026a8 <HAL_GetTick>
 80057ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057ec:	e009      	b.n	8005802 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80057ee:	f7fc ff5b 	bl	80026a8 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057fc:	d901      	bls.n	8005802 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e007      	b.n	8005812 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_PWREx_ConfigSupply+0x70>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800580a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580e:	d1ee      	bne.n	80057ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	58024800 	.word	0x58024800

08005820 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e3c8      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8087 	beq.w	800594e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005840:	4b88      	ldr	r3, [pc, #544]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005848:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800584a:	4b86      	ldr	r3, [pc, #536]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	2b10      	cmp	r3, #16
 8005854:	d007      	beq.n	8005866 <HAL_RCC_OscConfig+0x46>
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	2b18      	cmp	r3, #24
 800585a:	d110      	bne.n	800587e <HAL_RCC_OscConfig+0x5e>
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d10b      	bne.n	800587e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005866:	4b7f      	ldr	r3, [pc, #508]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d06c      	beq.n	800594c <HAL_RCC_OscConfig+0x12c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d168      	bne.n	800594c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e3a2      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005886:	d106      	bne.n	8005896 <HAL_RCC_OscConfig+0x76>
 8005888:	4b76      	ldr	r3, [pc, #472]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a75      	ldr	r2, [pc, #468]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 800588e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	e02e      	b.n	80058f4 <HAL_RCC_OscConfig+0xd4>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10c      	bne.n	80058b8 <HAL_RCC_OscConfig+0x98>
 800589e:	4b71      	ldr	r3, [pc, #452]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a70      	ldr	r2, [pc, #448]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a6d      	ldr	r2, [pc, #436]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e01d      	b.n	80058f4 <HAL_RCC_OscConfig+0xd4>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058c0:	d10c      	bne.n	80058dc <HAL_RCC_OscConfig+0xbc>
 80058c2:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a67      	ldr	r2, [pc, #412]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	4b65      	ldr	r3, [pc, #404]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a64      	ldr	r2, [pc, #400]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	e00b      	b.n	80058f4 <HAL_RCC_OscConfig+0xd4>
 80058dc:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a60      	ldr	r2, [pc, #384]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	4b5e      	ldr	r3, [pc, #376]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5d      	ldr	r2, [pc, #372]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80058ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d013      	beq.n	8005924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fc fed4 	bl	80026a8 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005904:	f7fc fed0 	bl	80026a8 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	; 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e356      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005916:	4b53      	ldr	r3, [pc, #332]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0xe4>
 8005922:	e014      	b.n	800594e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fc fec0 	bl	80026a8 <HAL_GetTick>
 8005928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800592c:	f7fc febc 	bl	80026a8 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	; 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e342      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800593e:	4b49      	ldr	r3, [pc, #292]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x10c>
 800594a:	e000      	b.n	800594e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 808c 	beq.w	8005a74 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800595c:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005964:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005966:	4b3f      	ldr	r3, [pc, #252]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <HAL_RCC_OscConfig+0x162>
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	2b18      	cmp	r3, #24
 8005976:	d137      	bne.n	80059e8 <HAL_RCC_OscConfig+0x1c8>
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d132      	bne.n	80059e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005982:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_RCC_OscConfig+0x17a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e314      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800599a:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 0219 	bic.w	r2, r3, #25
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	492f      	ldr	r1, [pc, #188]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fc fe7c 	bl	80026a8 <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b4:	f7fc fe78 	bl	80026a8 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e2fe      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059c6:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	4920      	ldr	r1, [pc, #128]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e6:	e045      	b.n	8005a74 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d026      	beq.n	8005a3e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059f0:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f023 0219 	bic.w	r2, r3, #25
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4919      	ldr	r1, [pc, #100]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a02:	f7fc fe51 	bl	80026a8 <HAL_GetTick>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0a:	f7fc fe4d 	bl	80026a8 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e2d3      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a1c:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a28:	4b0e      	ldr	r3, [pc, #56]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	061b      	lsls	r3, r3, #24
 8005a36:	490b      	ldr	r1, [pc, #44]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	604b      	str	r3, [r1, #4]
 8005a3c:	e01a      	b.n	8005a74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a3e:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <HAL_RCC_OscConfig+0x244>)
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4a:	f7fc fe2d 	bl	80026a8 <HAL_GetTick>
 8005a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a50:	e00a      	b.n	8005a68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a52:	f7fc fe29 	bl	80026a8 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d903      	bls.n	8005a68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e2af      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
 8005a64:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a68:	4b96      	ldr	r3, [pc, #600]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1ee      	bne.n	8005a52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d06a      	beq.n	8005b56 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a80:	4b90      	ldr	r3, [pc, #576]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a8a:	4b8e      	ldr	r3, [pc, #568]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d007      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x286>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b18      	cmp	r3, #24
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x2b4>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d116      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa6:	4b87      	ldr	r3, [pc, #540]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_RCC_OscConfig+0x29e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	2b80      	cmp	r3, #128	; 0x80
 8005ab8:	d001      	beq.n	8005abe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e282      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005abe:	4b81      	ldr	r3, [pc, #516]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	497d      	ldr	r1, [pc, #500]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ad2:	e040      	b.n	8005b56 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d023      	beq.n	8005b24 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005adc:	4b79      	ldr	r3, [pc, #484]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a78      	ldr	r2, [pc, #480]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fc fdde 	bl	80026a8 <HAL_GetTick>
 8005aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005af0:	f7fc fdda 	bl	80026a8 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e260      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b02:	4b70      	ldr	r3, [pc, #448]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b0e:	4b6d      	ldr	r3, [pc, #436]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	4969      	ldr	r1, [pc, #420]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60cb      	str	r3, [r1, #12]
 8005b22:	e018      	b.n	8005b56 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b24:	4b67      	ldr	r3, [pc, #412]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a66      	ldr	r2, [pc, #408]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fc fdba 	bl	80026a8 <HAL_GetTick>
 8005b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b38:	f7fc fdb6 	bl	80026a8 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e23c      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b4a:	4b5e      	ldr	r3, [pc, #376]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d036      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d019      	beq.n	8005b9e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b6a:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6e:	4a55      	ldr	r2, [pc, #340]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b76:	f7fc fd97 	bl	80026a8 <HAL_GetTick>
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b7e:	f7fc fd93 	bl	80026a8 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e219      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b90:	4b4c      	ldr	r3, [pc, #304]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x35e>
 8005b9c:	e018      	b.n	8005bd0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b9e:	4b49      	ldr	r3, [pc, #292]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba2:	4a48      	ldr	r2, [pc, #288]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005ba4:	f023 0301 	bic.w	r3, r3, #1
 8005ba8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fc fd7d 	bl	80026a8 <HAL_GetTick>
 8005bae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb2:	f7fc fd79 	bl	80026a8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e1ff      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bc4:	4b3f      	ldr	r3, [pc, #252]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f0      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d036      	beq.n	8005c4a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d019      	beq.n	8005c18 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005be4:	4b37      	ldr	r3, [pc, #220]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a36      	ldr	r2, [pc, #216]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bf0:	f7fc fd5a 	bl	80026a8 <HAL_GetTick>
 8005bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bf8:	f7fc fd56 	bl	80026a8 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e1dc      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c0a:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x3d8>
 8005c16:	e018      	b.n	8005c4a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c18:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a29      	ldr	r2, [pc, #164]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c24:	f7fc fd40 	bl	80026a8 <HAL_GetTick>
 8005c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c2c:	f7fc fd3c 	bl	80026a8 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e1c2      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c3e:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8086 	beq.w	8005d64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c58:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <HAL_RCC_OscConfig+0x4a8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <HAL_RCC_OscConfig+0x4a8>)
 8005c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c64:	f7fc fd20 	bl	80026a8 <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c6c:	f7fc fd1c 	bl	80026a8 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	; 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e1a2      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <HAL_RCC_OscConfig+0x4a8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d106      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x480>
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	4a0b      	ldr	r2, [pc, #44]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9e:	e032      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e6>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d111      	bne.n	8005ccc <HAL_RCC_OscConfig+0x4ac>
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	4a02      	ldr	r2, [pc, #8]	; (8005cc4 <HAL_RCC_OscConfig+0x4a4>)
 8005cba:	f023 0304 	bic.w	r3, r3, #4
 8005cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc0:	e021      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e6>
 8005cc2:	bf00      	nop
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	58024800 	.word	0x58024800
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b05      	cmp	r3, #5
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCC_OscConfig+0x4ce>
 8005cd4:	4b83      	ldr	r3, [pc, #524]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a82      	ldr	r2, [pc, #520]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005cda:	f043 0304 	orr.w	r3, r3, #4
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce0:	4b80      	ldr	r3, [pc, #512]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	4a7f      	ldr	r2, [pc, #508]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6713      	str	r3, [r2, #112]	; 0x70
 8005cec:	e00b      	b.n	8005d06 <HAL_RCC_OscConfig+0x4e6>
 8005cee:	4b7d      	ldr	r3, [pc, #500]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	4a7c      	ldr	r2, [pc, #496]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfa:	4b7a      	ldr	r3, [pc, #488]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	4a79      	ldr	r2, [pc, #484]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d015      	beq.n	8005d3a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0e:	f7fc fccb 	bl	80026a8 <HAL_GetTick>
 8005d12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d14:	e00a      	b.n	8005d2c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d16:	f7fc fcc7 	bl	80026a8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e14b      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0ee      	beq.n	8005d16 <HAL_RCC_OscConfig+0x4f6>
 8005d38:	e014      	b.n	8005d64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3a:	f7fc fcb5 	bl	80026a8 <HAL_GetTick>
 8005d3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d40:	e00a      	b.n	8005d58 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d42:	f7fc fcb1 	bl	80026a8 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e135      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d58:	4b62      	ldr	r3, [pc, #392]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ee      	bne.n	8005d42 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 812a 	beq.w	8005fc2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d6e:	4b5d      	ldr	r3, [pc, #372]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d76:	2b18      	cmp	r3, #24
 8005d78:	f000 80ba 	beq.w	8005ef0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	f040 8095 	bne.w	8005eb0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d86:	4b57      	ldr	r3, [pc, #348]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a56      	ldr	r2, [pc, #344]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d92:	f7fc fc89 	bl	80026a8 <HAL_GetTick>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9a:	f7fc fc85 	bl	80026a8 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e10b      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dac:	4b4d      	ldr	r3, [pc, #308]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f0      	bne.n	8005d9a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005db8:	4b4a      	ldr	r3, [pc, #296]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dbc:	4b4a      	ldr	r3, [pc, #296]	; (8005ee8 <HAL_RCC_OscConfig+0x6c8>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dc8:	0112      	lsls	r2, r2, #4
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	4945      	ldr	r1, [pc, #276]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	628b      	str	r3, [r1, #40]	; 0x28
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de0:	3b01      	subs	r3, #1
 8005de2:	025b      	lsls	r3, r3, #9
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	3b01      	subs	r3, #1
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e02:	4938      	ldr	r1, [pc, #224]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e08:	4b36      	ldr	r3, [pc, #216]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	4a35      	ldr	r2, [pc, #212]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e0e:	f023 0301 	bic.w	r3, r3, #1
 8005e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e14:	4b33      	ldr	r3, [pc, #204]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e18:	4b34      	ldr	r3, [pc, #208]	; (8005eec <HAL_RCC_OscConfig+0x6cc>)
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e20:	00d2      	lsls	r2, r2, #3
 8005e22:	4930      	ldr	r1, [pc, #192]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e28:	4b2e      	ldr	r3, [pc, #184]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	f023 020c 	bic.w	r2, r3, #12
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	492b      	ldr	r1, [pc, #172]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	f023 0202 	bic.w	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	4927      	ldr	r1, [pc, #156]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e4c:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	4a24      	ldr	r2, [pc, #144]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e58:	4b22      	ldr	r3, [pc, #136]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	4a21      	ldr	r2, [pc, #132]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e64:	4b1f      	ldr	r3, [pc, #124]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e70:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fc fc0e 	bl	80026a8 <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e90:	f7fc fc0a 	bl	80026a8 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e090      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x670>
 8005eae:	e088      	b.n	8005fc2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a0b      	ldr	r2, [pc, #44]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fbf4 	bl	80026a8 <HAL_GetTick>
 8005ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fc fbf0 	bl	80026a8 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e076      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ed6:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <HAL_RCC_OscConfig+0x6c4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x6a4>
 8005ee2:	e06e      	b.n	8005fc2 <HAL_RCC_OscConfig+0x7a2>
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	fffffc0c 	.word	0xfffffc0c
 8005eec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ef0:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ef6:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d031      	beq.n	8005f68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f003 0203 	and.w	r2, r3, #3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d12a      	bne.n	8005f68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	091b      	lsrs	r3, r3, #4
 8005f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d122      	bne.n	8005f68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d11a      	bne.n	8005f68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	0a5b      	lsrs	r3, r3, #9
 8005f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d111      	bne.n	8005f68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	0c1b      	lsrs	r3, r3, #16
 8005f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d108      	bne.n	8005f68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	0e1b      	lsrs	r3, r3, #24
 8005f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d001      	beq.n	8005f6c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e02b      	b.n	8005fc4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f6c:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f70:	08db      	lsrs	r3, r3, #3
 8005f72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d01f      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f82:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	4a11      	ldr	r2, [pc, #68]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f8e:	f7fc fb8b 	bl	80026a8 <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005f94:	bf00      	nop
 8005f96:	f7fc fb87 	bl	80026a8 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d0f9      	beq.n	8005f96 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <HAL_RCC_OscConfig+0x7b0>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fae:	00d2      	lsls	r2, r2, #3
 8005fb0:	4906      	ldr	r1, [pc, #24]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005fb6:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <HAL_RCC_OscConfig+0x7ac>)
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3730      	adds	r7, #48	; 0x30
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	ffff0007 	.word	0xffff0007

08005fd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e19c      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe8:	4b8a      	ldr	r3, [pc, #552]	; (8006214 <HAL_RCC_ClockConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d910      	bls.n	8006018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff6:	4b87      	ldr	r3, [pc, #540]	; (8006214 <HAL_RCC_ClockConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 020f 	bic.w	r2, r3, #15
 8005ffe:	4985      	ldr	r1, [pc, #532]	; (8006214 <HAL_RCC_ClockConfig+0x240>)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	4313      	orrs	r3, r2
 8006004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b83      	ldr	r3, [pc, #524]	; (8006214 <HAL_RCC_ClockConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e184      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d010      	beq.n	8006046 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	4b7b      	ldr	r3, [pc, #492]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006030:	429a      	cmp	r2, r3
 8006032:	d908      	bls.n	8006046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006034:	4b78      	ldr	r3, [pc, #480]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	4975      	ldr	r1, [pc, #468]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006042:	4313      	orrs	r3, r2
 8006044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d010      	beq.n	8006074 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	4b70      	ldr	r3, [pc, #448]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800605e:	429a      	cmp	r2, r3
 8006060:	d908      	bls.n	8006074 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006062:	4b6d      	ldr	r3, [pc, #436]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	496a      	ldr	r1, [pc, #424]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006070:	4313      	orrs	r3, r2
 8006072:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	4b64      	ldr	r3, [pc, #400]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800608c:	429a      	cmp	r2, r3
 800608e:	d908      	bls.n	80060a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006090:	4b61      	ldr	r3, [pc, #388]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	495e      	ldr	r1, [pc, #376]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	4b59      	ldr	r3, [pc, #356]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d908      	bls.n	80060d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060be:	4b56      	ldr	r3, [pc, #344]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	4953      	ldr	r1, [pc, #332]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	4b4d      	ldr	r3, [pc, #308]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d908      	bls.n	80060fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ec:	4b4a      	ldr	r3, [pc, #296]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f023 020f 	bic.w	r2, r3, #15
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4947      	ldr	r1, [pc, #284]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d055      	beq.n	80061b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800610a:	4b43      	ldr	r3, [pc, #268]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	4940      	ldr	r1, [pc, #256]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006118:	4313      	orrs	r3, r2
 800611a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d107      	bne.n	8006134 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006124:	4b3c      	ldr	r3, [pc, #240]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d121      	bne.n	8006174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0f6      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b03      	cmp	r3, #3
 800613a:	d107      	bne.n	800614c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800613c:	4b36      	ldr	r3, [pc, #216]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d115      	bne.n	8006174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0ea      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d107      	bne.n	8006164 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006154:	4b30      	ldr	r3, [pc, #192]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d109      	bne.n	8006174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0de      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006164:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0d6      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006174:	4b28      	ldr	r3, [pc, #160]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f023 0207 	bic.w	r2, r3, #7
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4925      	ldr	r1, [pc, #148]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 8006182:	4313      	orrs	r3, r2
 8006184:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006186:	f7fc fa8f 	bl	80026a8 <HAL_GetTick>
 800618a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618c:	e00a      	b.n	80061a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800618e:	f7fc fa8b 	bl	80026a8 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f241 3288 	movw	r2, #5000	; 0x1388
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e0be      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a4:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d1eb      	bne.n	800618e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d010      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	4b14      	ldr	r3, [pc, #80]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d208      	bcs.n	80061e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d2:	4b11      	ldr	r3, [pc, #68]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f023 020f 	bic.w	r2, r3, #15
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	490e      	ldr	r1, [pc, #56]	; (8006218 <HAL_RCC_ClockConfig+0x244>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCC_ClockConfig+0x240>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d214      	bcs.n	800621c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <HAL_RCC_ClockConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f023 020f 	bic.w	r2, r3, #15
 80061fa:	4906      	ldr	r1, [pc, #24]	; (8006214 <HAL_RCC_ClockConfig+0x240>)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	4313      	orrs	r3, r2
 8006200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006202:	4b04      	ldr	r3, [pc, #16]	; (8006214 <HAL_RCC_ClockConfig+0x240>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d005      	beq.n	800621c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e086      	b.n	8006322 <HAL_RCC_ClockConfig+0x34e>
 8006214:	52002000 	.word	0x52002000
 8006218:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	4b3f      	ldr	r3, [pc, #252]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006234:	429a      	cmp	r2, r3
 8006236:	d208      	bcs.n	800624a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006238:	4b3c      	ldr	r3, [pc, #240]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	4939      	ldr	r1, [pc, #228]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 8006246:	4313      	orrs	r3, r2
 8006248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d010      	beq.n	8006278 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695a      	ldr	r2, [r3, #20]
 800625a:	4b34      	ldr	r3, [pc, #208]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006262:	429a      	cmp	r2, r3
 8006264:	d208      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006266:	4b31      	ldr	r3, [pc, #196]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	492e      	ldr	r1, [pc, #184]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 8006274:	4313      	orrs	r3, r2
 8006276:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	4b28      	ldr	r3, [pc, #160]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006290:	429a      	cmp	r2, r3
 8006292:	d208      	bcs.n	80062a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006294:	4b25      	ldr	r3, [pc, #148]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	4922      	ldr	r1, [pc, #136]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	4b1d      	ldr	r3, [pc, #116]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062be:	429a      	cmp	r2, r3
 80062c0:	d208      	bcs.n	80062d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062c2:	4b1a      	ldr	r3, [pc, #104]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4917      	ldr	r1, [pc, #92]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062d4:	f000 f834 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 80062d8:	4602      	mov	r2, r0
 80062da:	4b14      	ldr	r3, [pc, #80]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	4912      	ldr	r1, [pc, #72]	; (8006330 <HAL_RCC_ClockConfig+0x35c>)
 80062e6:	5ccb      	ldrb	r3, [r1, r3]
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062f2:	4b0e      	ldr	r3, [pc, #56]	; (800632c <HAL_RCC_ClockConfig+0x358>)
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <HAL_RCC_ClockConfig+0x35c>)
 80062fc:	5cd3      	ldrb	r3, [r2, r3]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <HAL_RCC_ClockConfig+0x360>)
 800630a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800630c:	4a0a      	ldr	r2, [pc, #40]	; (8006338 <HAL_RCC_ClockConfig+0x364>)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006312:	4b0a      	ldr	r3, [pc, #40]	; (800633c <HAL_RCC_ClockConfig+0x368>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fc f97c 	bl	8002614 <HAL_InitTick>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	58024400 	.word	0x58024400
 8006330:	0800bbf4 	.word	0x0800bbf4
 8006334:	24000040 	.word	0x24000040
 8006338:	2400003c 	.word	0x2400003c
 800633c:	24000044 	.word	0x24000044

08006340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006340:	b480      	push	{r7}
 8006342:	b089      	sub	sp, #36	; 0x24
 8006344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006346:	4bb3      	ldr	r3, [pc, #716]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800634e:	2b18      	cmp	r3, #24
 8006350:	f200 8155 	bhi.w	80065fe <HAL_RCC_GetSysClockFreq+0x2be>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	080063c1 	.word	0x080063c1
 8006360:	080065ff 	.word	0x080065ff
 8006364:	080065ff 	.word	0x080065ff
 8006368:	080065ff 	.word	0x080065ff
 800636c:	080065ff 	.word	0x080065ff
 8006370:	080065ff 	.word	0x080065ff
 8006374:	080065ff 	.word	0x080065ff
 8006378:	080065ff 	.word	0x080065ff
 800637c:	080063e7 	.word	0x080063e7
 8006380:	080065ff 	.word	0x080065ff
 8006384:	080065ff 	.word	0x080065ff
 8006388:	080065ff 	.word	0x080065ff
 800638c:	080065ff 	.word	0x080065ff
 8006390:	080065ff 	.word	0x080065ff
 8006394:	080065ff 	.word	0x080065ff
 8006398:	080065ff 	.word	0x080065ff
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	080065ff 	.word	0x080065ff
 80063a4:	080065ff 	.word	0x080065ff
 80063a8:	080065ff 	.word	0x080065ff
 80063ac:	080065ff 	.word	0x080065ff
 80063b0:	080065ff 	.word	0x080065ff
 80063b4:	080065ff 	.word	0x080065ff
 80063b8:	080065ff 	.word	0x080065ff
 80063bc:	080063f3 	.word	0x080063f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c0:	4b94      	ldr	r3, [pc, #592]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063cc:	4b91      	ldr	r3, [pc, #580]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	08db      	lsrs	r3, r3, #3
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	4a90      	ldr	r2, [pc, #576]	; (8006618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063d8:	fa22 f303 	lsr.w	r3, r2, r3
 80063dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80063de:	e111      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063e0:	4b8d      	ldr	r3, [pc, #564]	; (8006618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063e2:	61bb      	str	r3, [r7, #24]
      break;
 80063e4:	e10e      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80063e6:	4b8d      	ldr	r3, [pc, #564]	; (800661c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063e8:	61bb      	str	r3, [r7, #24]
      break;
 80063ea:	e10b      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80063ec:	4b8c      	ldr	r3, [pc, #560]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063ee:	61bb      	str	r3, [r7, #24]
      break;
 80063f0:	e108      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063f2:	4b88      	ldr	r3, [pc, #544]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80063fc:	4b85      	ldr	r3, [pc, #532]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006406:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006408:	4b82      	ldr	r3, [pc, #520]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006412:	4b80      	ldr	r3, [pc, #512]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	08db      	lsrs	r3, r3, #3
 8006418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80e1 	beq.w	80065f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b02      	cmp	r3, #2
 800643a:	f000 8083 	beq.w	8006544 <HAL_RCC_GetSysClockFreq+0x204>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b02      	cmp	r3, #2
 8006442:	f200 80a1 	bhi.w	8006588 <HAL_RCC_GetSysClockFreq+0x248>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0x114>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d056      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006452:	e099      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006454:	4b6f      	ldr	r3, [pc, #444]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d02d      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006460:	4b6c      	ldr	r3, [pc, #432]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	08db      	lsrs	r3, r3, #3
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	4a6b      	ldr	r2, [pc, #428]	; (8006618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
 8006470:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800648a:	4b62      	ldr	r3, [pc, #392]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649a:	ed97 6a02 	vldr	s12, [r7, #8]
 800649e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064ba:	e087      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006628 <HAL_RCC_GetSysClockFreq+0x2e8>
 80064ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ce:	4b51      	ldr	r3, [pc, #324]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064de:	ed97 6a02 	vldr	s12, [r7, #8]
 80064e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064fe:	e065      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800662c <HAL_RCC_GetSysClockFreq+0x2ec>
 800650e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006512:	4b40      	ldr	r3, [pc, #256]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006522:	ed97 6a02 	vldr	s12, [r7, #8]
 8006526:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800652a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006542:	e043      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006630 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006556:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006566:	ed97 6a02 	vldr	s12, [r7, #8]
 800656a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800656e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800657a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006586:	e021      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006592:	eddf 6a26 	vldr	s13, [pc, #152]	; 800662c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659a:	4b1e      	ldr	r3, [pc, #120]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	0a5b      	lsrs	r3, r3, #9
 80065d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d6:	3301      	adds	r3, #1
 80065d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	ee07 3a90 	vmov	s15, r3
 80065e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f0:	ee17 3a90 	vmov	r3, s15
 80065f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80065f6:	e005      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61bb      	str	r3, [r7, #24]
      break;
 80065fc:	e002      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80065fe:	4b07      	ldr	r3, [pc, #28]	; (800661c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006600:	61bb      	str	r3, [r7, #24]
      break;
 8006602:	bf00      	nop
  }

  return sysclockfreq;
 8006604:	69bb      	ldr	r3, [r7, #24]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3724      	adds	r7, #36	; 0x24
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	58024400 	.word	0x58024400
 8006618:	03d09000 	.word	0x03d09000
 800661c:	003d0900 	.word	0x003d0900
 8006620:	017d7840 	.word	0x017d7840
 8006624:	46000000 	.word	0x46000000
 8006628:	4c742400 	.word	0x4c742400
 800662c:	4a742400 	.word	0x4a742400
 8006630:	4bbebc20 	.word	0x4bbebc20

08006634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800663a:	f7ff fe81 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 800663e:	4602      	mov	r2, r0
 8006640:	4b10      	ldr	r3, [pc, #64]	; (8006684 <HAL_RCC_GetHCLKFreq+0x50>)
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	0a1b      	lsrs	r3, r3, #8
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	490f      	ldr	r1, [pc, #60]	; (8006688 <HAL_RCC_GetHCLKFreq+0x54>)
 800664c:	5ccb      	ldrb	r3, [r1, r3]
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	fa22 f303 	lsr.w	r3, r2, r3
 8006656:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <HAL_RCC_GetHCLKFreq+0x50>)
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	4a09      	ldr	r2, [pc, #36]	; (8006688 <HAL_RCC_GetHCLKFreq+0x54>)
 8006662:	5cd3      	ldrb	r3, [r2, r3]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	4a07      	ldr	r2, [pc, #28]	; (800668c <HAL_RCC_GetHCLKFreq+0x58>)
 8006670:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006672:	4a07      	ldr	r2, [pc, #28]	; (8006690 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <HAL_RCC_GetHCLKFreq+0x58>)
 800667a:	681b      	ldr	r3, [r3, #0]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	58024400 	.word	0x58024400
 8006688:	0800bbf4 	.word	0x0800bbf4
 800668c:	24000040 	.word	0x24000040
 8006690:	2400003c 	.word	0x2400003c

08006694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006698:	f7ff ffcc 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 800669c:	4602      	mov	r2, r0
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	4904      	ldr	r1, [pc, #16]	; (80066bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80066aa:	5ccb      	ldrb	r3, [r1, r3]
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	58024400 	.word	0x58024400
 80066bc:	0800bbf4 	.word	0x0800bbf4

080066c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066c4:	f7ff ffb6 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4904      	ldr	r1, [pc, #16]	; (80066e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	58024400 	.word	0x58024400
 80066e8:	0800bbf4 	.word	0x0800bbf4

080066ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f0:	b0c6      	sub	sp, #280	; 0x118
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066fe:	2300      	movs	r3, #0
 8006700:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006710:	2500      	movs	r5, #0
 8006712:	ea54 0305 	orrs.w	r3, r4, r5
 8006716:	d049      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006722:	d02f      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006728:	d828      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800672a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800672e:	d01a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006734:	d822      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800673a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800673e:	d007      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006740:	e01c      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006742:	4bab      	ldr	r3, [pc, #684]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	4aaa      	ldr	r2, [pc, #680]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800674e:	e01a      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	3308      	adds	r3, #8
 8006756:	2102      	movs	r1, #2
 8006758:	4618      	mov	r0, r3
 800675a:	f002 fa49 	bl	8008bf0 <RCCEx_PLL2_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006764:	e00f      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676a:	3328      	adds	r3, #40	; 0x28
 800676c:	2102      	movs	r1, #2
 800676e:	4618      	mov	r0, r3
 8006770:	f002 faf0 	bl	8008d54 <RCCEx_PLL3_Config>
 8006774:	4603      	mov	r3, r0
 8006776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800677a:	e004      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006782:	e000      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006786:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800678e:	4b98      	ldr	r3, [pc, #608]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006792:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679c:	4a94      	ldr	r2, [pc, #592]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800679e:	430b      	orrs	r3, r1
 80067a0:	6513      	str	r3, [r2, #80]	; 0x50
 80067a2:	e003      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80067b8:	f04f 0900 	mov.w	r9, #0
 80067bc:	ea58 0309 	orrs.w	r3, r8, r9
 80067c0:	d047      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d82a      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80067cc:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	080067e9 	.word	0x080067e9
 80067d8:	080067f7 	.word	0x080067f7
 80067dc:	0800680d 	.word	0x0800680d
 80067e0:	0800682b 	.word	0x0800682b
 80067e4:	0800682b 	.word	0x0800682b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e8:	4b81      	ldr	r3, [pc, #516]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	4a80      	ldr	r2, [pc, #512]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067f4:	e01a      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fa:	3308      	adds	r3, #8
 80067fc:	2100      	movs	r1, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	f002 f9f6 	bl	8008bf0 <RCCEx_PLL2_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800680a:	e00f      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	3328      	adds	r3, #40	; 0x28
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f002 fa9d 	bl	8008d54 <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006820:	e004      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006828:	e000      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800682a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006834:	4b6e      	ldr	r3, [pc, #440]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006838:	f023 0107 	bic.w	r1, r3, #7
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006842:	4a6b      	ldr	r2, [pc, #428]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006844:	430b      	orrs	r3, r1
 8006846:	6513      	str	r3, [r2, #80]	; 0x50
 8006848:	e003      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800684e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800685e:	f04f 0b00 	mov.w	fp, #0
 8006862:	ea5a 030b 	orrs.w	r3, sl, fp
 8006866:	d05b      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006870:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006874:	d03b      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006876:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800687a:	d834      	bhi.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800687c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006880:	d037      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006882:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006886:	d82e      	bhi.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006888:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800688c:	d033      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800688e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006892:	d828      	bhi.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006898:	d01a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800689a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800689e:	d822      	bhi.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80068a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068a8:	d007      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80068aa:	e01c      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ac:	4b50      	ldr	r3, [pc, #320]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a4f      	ldr	r2, [pc, #316]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068b8:	e01e      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	3308      	adds	r3, #8
 80068c0:	2100      	movs	r1, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f002 f994 	bl	8008bf0 <RCCEx_PLL2_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80068ce:	e013      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d4:	3328      	adds	r3, #40	; 0x28
 80068d6:	2100      	movs	r1, #0
 80068d8:	4618      	mov	r0, r3
 80068da:	f002 fa3b 	bl	8008d54 <RCCEx_PLL3_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068e4:	e008      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068ec:	e004      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80068f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10b      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006900:	4b3b      	ldr	r3, [pc, #236]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006904:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006910:	4a37      	ldr	r2, [pc, #220]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006912:	430b      	orrs	r3, r1
 8006914:	6593      	str	r3, [r2, #88]	; 0x58
 8006916:	e003      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006918:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800691c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800692c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006930:	2300      	movs	r3, #0
 8006932:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006936:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800693a:	460b      	mov	r3, r1
 800693c:	4313      	orrs	r3, r2
 800693e:	d05d      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006944:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006948:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800694c:	d03b      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800694e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006952:	d834      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006958:	d037      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800695a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800695e:	d82e      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006960:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006964:	d033      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800696a:	d828      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800696c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006970:	d01a      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006976:	d822      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800697c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006980:	d007      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006982:	e01c      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006984:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800698a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800698e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006990:	e01e      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006996:	3308      	adds	r3, #8
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f002 f928 	bl	8008bf0 <RCCEx_PLL2_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069a6:	e013      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ac:	3328      	adds	r3, #40	; 0x28
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f002 f9cf 	bl	8008d54 <RCCEx_PLL3_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069bc:	e008      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069c4:	e004      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80069c6:	bf00      	nop
 80069c8:	e002      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80069ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10d      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069e8:	4a01      	ldr	r2, [pc, #4]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069ea:	430b      	orrs	r3, r1
 80069ec:	6593      	str	r3, [r2, #88]	; 0x58
 80069ee:	e005      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80069f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006a08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a12:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	d03a      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a22:	2b30      	cmp	r3, #48	; 0x30
 8006a24:	d01f      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006a26:	2b30      	cmp	r3, #48	; 0x30
 8006a28:	d819      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d00c      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d815      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d019      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a36:	2b10      	cmp	r3, #16
 8006a38:	d111      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a3a:	4baa      	ldr	r3, [pc, #680]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	4aa9      	ldr	r2, [pc, #676]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006a46:	e011      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	2102      	movs	r1, #2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f002 f8cd 	bl	8008bf0 <RCCEx_PLL2_Config>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006a5c:	e006      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a64:	e002      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006a66:	bf00      	nop
 8006a68:	e000      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a74:	4b9b      	ldr	r3, [pc, #620]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a78:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a82:	4a98      	ldr	r2, [pc, #608]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a84:	430b      	orrs	r3, r1
 8006a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a88:	e003      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006aa8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006aac:	460b      	mov	r3, r1
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	d051      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006abc:	d035      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ac2:	d82e      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ac4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ac8:	d031      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006aca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ace:	d828      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad4:	d01a      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ada:	d822      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d007      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006ae6:	e01c      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae8:	4b7e      	ldr	r3, [pc, #504]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a7d      	ldr	r2, [pc, #500]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006af4:	e01c      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006afa:	3308      	adds	r3, #8
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f002 f876 	bl	8008bf0 <RCCEx_PLL2_Config>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b0a:	e011      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	3328      	adds	r3, #40	; 0x28
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f002 f91d 	bl	8008d54 <RCCEx_PLL3_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b20:	e006      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b28:	e002      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006b2a:	bf00      	nop
 8006b2c:	e000      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b38:	4b6a      	ldr	r3, [pc, #424]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b46:	4a67      	ldr	r2, [pc, #412]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6513      	str	r3, [r2, #80]	; 0x50
 8006b4c:	e003      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006b62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b66:	2300      	movs	r3, #0
 8006b68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b6c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4313      	orrs	r3, r2
 8006b74:	d053      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b80:	d033      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b86:	d82c      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006b88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b8c:	d02f      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006b8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b92:	d826      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006b94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b98:	d02b      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006b9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b9e:	d820      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ba4:	d012      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006baa:	d81a      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d022      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb4:	d115      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bba:	3308      	adds	r3, #8
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f002 f816 	bl	8008bf0 <RCCEx_PLL2_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006bca:	e015      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd0:	3328      	adds	r3, #40	; 0x28
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f002 f8bd 	bl	8008d54 <RCCEx_PLL3_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006be0:	e00a      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006be8:	e006      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006bea:	bf00      	nop
 8006bec:	e004      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006bee:	bf00      	nop
 8006bf0:	e002      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006bf2:	bf00      	nop
 8006bf4:	e000      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c00:	4b38      	ldr	r3, [pc, #224]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0e:	4a35      	ldr	r2, [pc, #212]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6513      	str	r3, [r2, #80]	; 0x50
 8006c14:	e003      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c34:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	d058      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c4a:	d033      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c50:	d82c      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c56:	d02f      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d826      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006c5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c62:	d02b      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006c64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c68:	d820      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c6e:	d012      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c74:	d81a      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d022      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c7e:	d115      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c84:	3308      	adds	r3, #8
 8006c86:	2101      	movs	r1, #1
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 ffb1 	bl	8008bf0 <RCCEx_PLL2_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c94:	e015      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9a:	3328      	adds	r3, #40	; 0x28
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f002 f858 	bl	8008d54 <RCCEx_PLL3_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006caa:	e00a      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006cb2:	e006      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cb4:	bf00      	nop
 8006cb6:	e004      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cb8:	bf00      	nop
 8006cba:	e002      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10e      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cda:	4a02      	ldr	r2, [pc, #8]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6593      	str	r3, [r2, #88]	; 0x58
 8006ce0:	e006      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006ce2:	bf00      	nop
 8006ce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d037      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1a:	d00e      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d20:	d816      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d018      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d2a:	d111      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d2c:	4bc4      	ldr	r3, [pc, #784]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	4ac3      	ldr	r2, [pc, #780]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d38:	e00f      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3e:	3308      	adds	r3, #8
 8006d40:	2101      	movs	r1, #1
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 ff54 	bl	8008bf0 <RCCEx_PLL2_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d4e:	e004      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d56:	e000      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d62:	4bb7      	ldr	r3, [pc, #732]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d66:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d70:	4ab3      	ldr	r2, [pc, #716]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d72:	430b      	orrs	r3, r1
 8006d74:	6513      	str	r3, [r2, #80]	; 0x50
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d90:	2300      	movs	r3, #0
 8006d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	d039      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d81c      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006ded 	.word	0x08006ded
 8006db4:	08006dc1 	.word	0x08006dc1
 8006db8:	08006dcf 	.word	0x08006dcf
 8006dbc:	08006ded 	.word	0x08006ded
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc0:	4b9f      	ldr	r3, [pc, #636]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	4a9e      	ldr	r2, [pc, #632]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006dcc:	e00f      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 ff0a 	bl	8008bf0 <RCCEx_PLL2_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006de2:	e004      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006dea:	e000      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006df6:	4b92      	ldr	r3, [pc, #584]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfa:	f023 0103 	bic.w	r1, r3, #3
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e04:	4a8e      	ldr	r2, [pc, #568]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e06:	430b      	orrs	r3, r1
 8006e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e0a:	e003      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006e20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e24:	2300      	movs	r3, #0
 8006e26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f000 8099 	beq.w	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e36:	4b83      	ldr	r3, [pc, #524]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a82      	ldr	r2, [pc, #520]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e42:	f7fb fc31 	bl	80026a8 <HAL_GetTick>
 8006e46:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e4a:	e00b      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4c:	f7fb fc2c 	bl	80026a8 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b64      	cmp	r3, #100	; 0x64
 8006e5a:	d903      	bls.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e62:	e005      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e64:	4b77      	ldr	r3, [pc, #476]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0ed      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006e70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d173      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e78:	4b71      	ldr	r3, [pc, #452]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e84:	4053      	eors	r3, r2
 8006e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d015      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e8e:	4b6c      	ldr	r3, [pc, #432]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e9a:	4b69      	ldr	r3, [pc, #420]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	4a68      	ldr	r2, [pc, #416]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ea6:	4b66      	ldr	r3, [pc, #408]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eaa:	4a65      	ldr	r2, [pc, #404]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006eb2:	4a63      	ldr	r2, [pc, #396]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec6:	d118      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec8:	f7fb fbee 	bl	80026a8 <HAL_GetTick>
 8006ecc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ed0:	e00d      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed2:	f7fb fbe9 	bl	80026a8 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006edc:	1ad2      	subs	r2, r2, r3
 8006ede:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d903      	bls.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006eec:	e005      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eee:	4b54      	ldr	r3, [pc, #336]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0eb      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006efa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d129      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f12:	d10e      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006f14:	4b4a      	ldr	r3, [pc, #296]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f24:	091a      	lsrs	r2, r3, #4
 8006f26:	4b48      	ldr	r3, [pc, #288]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	4a45      	ldr	r2, [pc, #276]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6113      	str	r3, [r2, #16]
 8006f30:	e005      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006f32:	4b43      	ldr	r3, [pc, #268]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	4a42      	ldr	r2, [pc, #264]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f3c:	6113      	str	r3, [r2, #16]
 8006f3e:	4b40      	ldr	r3, [pc, #256]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f4e:	4a3c      	ldr	r2, [pc, #240]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f50:	430b      	orrs	r3, r1
 8006f52:	6713      	str	r3, [r2, #112]	; 0x70
 8006f54:	e008      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006f5e:	e003      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f002 0301 	and.w	r3, r2, #1
 8006f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f7e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006f82:	460b      	mov	r3, r1
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f000 808f 	beq.w	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f90:	2b28      	cmp	r3, #40	; 0x28
 8006f92:	d871      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08007081 	.word	0x08007081
 8006fa0:	08007079 	.word	0x08007079
 8006fa4:	08007079 	.word	0x08007079
 8006fa8:	08007079 	.word	0x08007079
 8006fac:	08007079 	.word	0x08007079
 8006fb0:	08007079 	.word	0x08007079
 8006fb4:	08007079 	.word	0x08007079
 8006fb8:	08007079 	.word	0x08007079
 8006fbc:	0800704d 	.word	0x0800704d
 8006fc0:	08007079 	.word	0x08007079
 8006fc4:	08007079 	.word	0x08007079
 8006fc8:	08007079 	.word	0x08007079
 8006fcc:	08007079 	.word	0x08007079
 8006fd0:	08007079 	.word	0x08007079
 8006fd4:	08007079 	.word	0x08007079
 8006fd8:	08007079 	.word	0x08007079
 8006fdc:	08007063 	.word	0x08007063
 8006fe0:	08007079 	.word	0x08007079
 8006fe4:	08007079 	.word	0x08007079
 8006fe8:	08007079 	.word	0x08007079
 8006fec:	08007079 	.word	0x08007079
 8006ff0:	08007079 	.word	0x08007079
 8006ff4:	08007079 	.word	0x08007079
 8006ff8:	08007079 	.word	0x08007079
 8006ffc:	08007081 	.word	0x08007081
 8007000:	08007079 	.word	0x08007079
 8007004:	08007079 	.word	0x08007079
 8007008:	08007079 	.word	0x08007079
 800700c:	08007079 	.word	0x08007079
 8007010:	08007079 	.word	0x08007079
 8007014:	08007079 	.word	0x08007079
 8007018:	08007079 	.word	0x08007079
 800701c:	08007081 	.word	0x08007081
 8007020:	08007079 	.word	0x08007079
 8007024:	08007079 	.word	0x08007079
 8007028:	08007079 	.word	0x08007079
 800702c:	08007079 	.word	0x08007079
 8007030:	08007079 	.word	0x08007079
 8007034:	08007079 	.word	0x08007079
 8007038:	08007079 	.word	0x08007079
 800703c:	08007081 	.word	0x08007081
 8007040:	58024400 	.word	0x58024400
 8007044:	58024800 	.word	0x58024800
 8007048:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007050:	3308      	adds	r3, #8
 8007052:	2101      	movs	r1, #1
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fdcb 	bl	8008bf0 <RCCEx_PLL2_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007060:	e00f      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007066:	3328      	adds	r3, #40	; 0x28
 8007068:	2101      	movs	r1, #1
 800706a:	4618      	mov	r0, r3
 800706c:	f001 fe72 	bl	8008d54 <RCCEx_PLL3_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007076:	e004      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800707e:	e000      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800708a:	4bbf      	ldr	r3, [pc, #764]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007098:	4abb      	ldr	r2, [pc, #748]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800709a:	430b      	orrs	r3, r1
 800709c:	6553      	str	r3, [r2, #84]	; 0x54
 800709e:	e003      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f002 0302 	and.w	r3, r2, #2
 80070b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070b8:	2300      	movs	r3, #0
 80070ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d041      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80070c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ce:	2b05      	cmp	r3, #5
 80070d0:	d824      	bhi.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	08007125 	.word	0x08007125
 80070dc:	080070f1 	.word	0x080070f1
 80070e0:	08007107 	.word	0x08007107
 80070e4:	08007125 	.word	0x08007125
 80070e8:	08007125 	.word	0x08007125
 80070ec:	08007125 	.word	0x08007125
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f4:	3308      	adds	r3, #8
 80070f6:	2101      	movs	r1, #1
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 fd79 	bl	8008bf0 <RCCEx_PLL2_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007104:	e00f      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710a:	3328      	adds	r3, #40	; 0x28
 800710c:	2101      	movs	r1, #1
 800710e:	4618      	mov	r0, r3
 8007110:	f001 fe20 	bl	8008d54 <RCCEx_PLL3_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800711a:	e004      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007122:	e000      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800712e:	4b96      	ldr	r3, [pc, #600]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007132:	f023 0107 	bic.w	r1, r3, #7
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800713c:	4a92      	ldr	r2, [pc, #584]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800713e:	430b      	orrs	r3, r1
 8007140:	6553      	str	r3, [r2, #84]	; 0x54
 8007142:	e003      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007148:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f002 0304 	and.w	r3, r2, #4
 8007158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800715c:	2300      	movs	r3, #0
 800715e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007162:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007166:	460b      	mov	r3, r1
 8007168:	4313      	orrs	r3, r2
 800716a:	d044      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007174:	2b05      	cmp	r3, #5
 8007176:	d825      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	080071cd 	.word	0x080071cd
 8007184:	08007199 	.word	0x08007199
 8007188:	080071af 	.word	0x080071af
 800718c:	080071cd 	.word	0x080071cd
 8007190:	080071cd 	.word	0x080071cd
 8007194:	080071cd 	.word	0x080071cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719c:	3308      	adds	r3, #8
 800719e:	2101      	movs	r1, #1
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 fd25 	bl	8008bf0 <RCCEx_PLL2_Config>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80071ac:	e00f      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b2:	3328      	adds	r3, #40	; 0x28
 80071b4:	2101      	movs	r1, #1
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fdcc 	bl	8008d54 <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80071c2:	e004      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80071ca:	e000      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80071cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10b      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071d6:	4b6c      	ldr	r3, [pc, #432]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	f023 0107 	bic.w	r1, r3, #7
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	4a68      	ldr	r2, [pc, #416]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6593      	str	r3, [r2, #88]	; 0x58
 80071ec:	e003      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	f002 0320 	and.w	r3, r2, #32
 8007202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007206:	2300      	movs	r3, #0
 8007208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800720c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007210:	460b      	mov	r3, r1
 8007212:	4313      	orrs	r3, r2
 8007214:	d055      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800721e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007222:	d033      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007228:	d82c      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800722a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800722e:	d02f      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007234:	d826      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007236:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800723a:	d02b      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800723c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007240:	d820      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007246:	d012      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724c:	d81a      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d022      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007256:	d115      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725c:	3308      	adds	r3, #8
 800725e:	2100      	movs	r1, #0
 8007260:	4618      	mov	r0, r3
 8007262:	f001 fcc5 	bl	8008bf0 <RCCEx_PLL2_Config>
 8007266:	4603      	mov	r3, r0
 8007268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800726c:	e015      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007272:	3328      	adds	r3, #40	; 0x28
 8007274:	2102      	movs	r1, #2
 8007276:	4618      	mov	r0, r3
 8007278:	f001 fd6c 	bl	8008d54 <RCCEx_PLL3_Config>
 800727c:	4603      	mov	r3, r0
 800727e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007282:	e00a      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800728a:	e006      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800728c:	bf00      	nop
 800728e:	e004      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007290:	bf00      	nop
 8007292:	e002      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007294:	bf00      	nop
 8007296:	e000      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10b      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072a2:	4b39      	ldr	r3, [pc, #228]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b2:	4a35      	ldr	r2, [pc, #212]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6553      	str	r3, [r2, #84]	; 0x54
 80072b8:	e003      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80072ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072d2:	2300      	movs	r3, #0
 80072d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80072dc:	460b      	mov	r3, r1
 80072de:	4313      	orrs	r3, r2
 80072e0:	d058      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80072ee:	d033      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80072f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80072f4:	d82c      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fa:	d02f      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d826      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007302:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007306:	d02b      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007308:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800730c:	d820      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800730e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007312:	d012      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007318:	d81a      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d022      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007322:	d115      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007328:	3308      	adds	r3, #8
 800732a:	2100      	movs	r1, #0
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fc5f 	bl	8008bf0 <RCCEx_PLL2_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007338:	e015      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800733a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733e:	3328      	adds	r3, #40	; 0x28
 8007340:	2102      	movs	r1, #2
 8007342:	4618      	mov	r0, r3
 8007344:	f001 fd06 	bl	8008d54 <RCCEx_PLL3_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800734e:	e00a      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007356:	e006      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007358:	bf00      	nop
 800735a:	e004      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800735c:	bf00      	nop
 800735e:	e002      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007360:	bf00      	nop
 8007362:	e000      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007366:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10e      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800737e:	4a02      	ldr	r2, [pc, #8]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007380:	430b      	orrs	r3, r1
 8007382:	6593      	str	r3, [r2, #88]	; 0x58
 8007384:	e006      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007386:	bf00      	nop
 8007388:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007390:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80073a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073a4:	2300      	movs	r3, #0
 80073a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80073ae:	460b      	mov	r3, r1
 80073b0:	4313      	orrs	r3, r2
 80073b2:	d055      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80073b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073c0:	d033      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80073c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073c6:	d82c      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80073c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073cc:	d02f      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80073ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d2:	d826      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80073d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80073d8:	d02b      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80073da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80073de:	d820      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80073e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e4:	d012      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80073e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ea:	d81a      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d022      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80073f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f4:	d115      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073fa:	3308      	adds	r3, #8
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 fbf6 	bl	8008bf0 <RCCEx_PLL2_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800740a:	e015      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800740c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007410:	3328      	adds	r3, #40	; 0x28
 8007412:	2102      	movs	r1, #2
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fc9d 	bl	8008d54 <RCCEx_PLL3_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007420:	e00a      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007428:	e006      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800742a:	bf00      	nop
 800742c:	e004      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800742e:	bf00      	nop
 8007430:	e002      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007438:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007440:	4ba0      	ldr	r3, [pc, #640]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007444:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007450:	4a9c      	ldr	r2, [pc, #624]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007452:	430b      	orrs	r3, r1
 8007454:	6593      	str	r3, [r2, #88]	; 0x58
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800745c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f002 0308 	and.w	r3, r2, #8
 800746c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007470:	2300      	movs	r3, #0
 8007472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007476:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800747a:	460b      	mov	r3, r1
 800747c:	4313      	orrs	r3, r2
 800747e:	d01e      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748c:	d10c      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007492:	3328      	adds	r3, #40	; 0x28
 8007494:	2102      	movs	r1, #2
 8007496:	4618      	mov	r0, r3
 8007498:	f001 fc5c 	bl	8008d54 <RCCEx_PLL3_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80074a8:	4b86      	ldr	r3, [pc, #536]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074b8:	4a82      	ldr	r2, [pc, #520]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074ba:	430b      	orrs	r3, r1
 80074bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f002 0310 	and.w	r3, r2, #16
 80074ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074ce:	2300      	movs	r3, #0
 80074d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80074d8:	460b      	mov	r3, r1
 80074da:	4313      	orrs	r3, r2
 80074dc:	d01e      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80074de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ea:	d10c      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f0:	3328      	adds	r3, #40	; 0x28
 80074f2:	2102      	movs	r1, #2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fc2d 	bl	8008d54 <RCCEx_PLL3_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007506:	4b6f      	ldr	r3, [pc, #444]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007516:	4a6b      	ldr	r2, [pc, #428]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007518:	430b      	orrs	r3, r1
 800751a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800751c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007528:	67bb      	str	r3, [r7, #120]	; 0x78
 800752a:	2300      	movs	r3, #0
 800752c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800752e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007532:	460b      	mov	r3, r1
 8007534:	4313      	orrs	r3, r2
 8007536:	d03e      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007544:	d022      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800754a:	d81b      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007554:	d00b      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007556:	e015      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755c:	3308      	adds	r3, #8
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f001 fb45 	bl	8008bf0 <RCCEx_PLL2_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800756c:	e00f      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007572:	3328      	adds	r3, #40	; 0x28
 8007574:	2102      	movs	r1, #2
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fbec 	bl	8008d54 <RCCEx_PLL3_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007582:	e004      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800758a:	e000      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800758c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007596:	4b4b      	ldr	r3, [pc, #300]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075a6:	4a47      	ldr	r2, [pc, #284]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075a8:	430b      	orrs	r3, r1
 80075aa:	6593      	str	r3, [r2, #88]	; 0x58
 80075ac:	e003      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80075c2:	673b      	str	r3, [r7, #112]	; 0x70
 80075c4:	2300      	movs	r3, #0
 80075c6:	677b      	str	r3, [r7, #116]	; 0x74
 80075c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80075cc:	460b      	mov	r3, r1
 80075ce:	4313      	orrs	r3, r2
 80075d0:	d03b      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075de:	d01f      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80075e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075e4:	d818      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80075e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ea:	d003      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80075ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075f0:	d007      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80075f2:	e011      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f4:	4b33      	ldr	r3, [pc, #204]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	4a32      	ldr	r2, [pc, #200]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007600:	e00f      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007606:	3328      	adds	r3, #40	; 0x28
 8007608:	2101      	movs	r1, #1
 800760a:	4618      	mov	r0, r3
 800760c:	f001 fba2 	bl	8008d54 <RCCEx_PLL3_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007616:	e004      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800761e:	e000      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007622:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10b      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800762a:	4b26      	ldr	r3, [pc, #152]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763a:	4a22      	ldr	r2, [pc, #136]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800763c:	430b      	orrs	r3, r1
 800763e:	6553      	str	r3, [r2, #84]	; 0x54
 8007640:	e003      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007642:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007646:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007656:	66bb      	str	r3, [r7, #104]	; 0x68
 8007658:	2300      	movs	r3, #0
 800765a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800765c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007660:	460b      	mov	r3, r1
 8007662:	4313      	orrs	r3, r2
 8007664:	d034      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007674:	d007      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007676:	e011      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007678:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4a11      	ldr	r2, [pc, #68]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800767e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007684:	e00e      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768a:	3308      	adds	r3, #8
 800768c:	2102      	movs	r1, #2
 800768e:	4618      	mov	r0, r3
 8007690:	f001 faae 	bl	8008bf0 <RCCEx_PLL2_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800769a:	e003      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80076a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10d      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ba:	4a02      	ldr	r2, [pc, #8]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076bc:	430b      	orrs	r3, r1
 80076be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076c0:	e006      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80076c2:	bf00      	nop
 80076c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80076dc:	663b      	str	r3, [r7, #96]	; 0x60
 80076de:	2300      	movs	r3, #0
 80076e0:	667b      	str	r3, [r7, #100]	; 0x64
 80076e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80076e6:	460b      	mov	r3, r1
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d00c      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f0:	3328      	adds	r3, #40	; 0x28
 80076f2:	2102      	movs	r1, #2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 fb2d 	bl	8008d54 <RCCEx_PLL3_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007712:	65bb      	str	r3, [r7, #88]	; 0x58
 8007714:	2300      	movs	r3, #0
 8007716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007718:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800771c:	460b      	mov	r3, r1
 800771e:	4313      	orrs	r3, r2
 8007720:	d036      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800772c:	d018      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800772e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007732:	d811      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007738:	d014      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800773a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800773e:	d80b      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d011      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007748:	d106      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800774a:	4bb7      	ldr	r3, [pc, #732]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	4ab6      	ldr	r2, [pc, #728]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007756:	e008      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800775e:	e004      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007760:	bf00      	nop
 8007762:	e002      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007764:	bf00      	nop
 8007766:	e000      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800776a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10a      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007772:	4bad      	ldr	r3, [pc, #692]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007780:	4aa9      	ldr	r2, [pc, #676]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007782:	430b      	orrs	r3, r1
 8007784:	6553      	str	r3, [r2, #84]	; 0x54
 8007786:	e003      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800778c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800779c:	653b      	str	r3, [r7, #80]	; 0x50
 800779e:	2300      	movs	r3, #0
 80077a0:	657b      	str	r3, [r7, #84]	; 0x54
 80077a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80077a6:	460b      	mov	r3, r1
 80077a8:	4313      	orrs	r3, r2
 80077aa:	d009      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80077ac:	4b9e      	ldr	r3, [pc, #632]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	4a9b      	ldr	r2, [pc, #620]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077bc:	430b      	orrs	r3, r1
 80077be:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80077cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ce:	2300      	movs	r3, #0
 80077d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80077d6:	460b      	mov	r3, r1
 80077d8:	4313      	orrs	r3, r2
 80077da:	d009      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077dc:	4b92      	ldr	r3, [pc, #584]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ea:	4a8f      	ldr	r2, [pc, #572]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077ec:	430b      	orrs	r3, r1
 80077ee:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80077fc:	643b      	str	r3, [r7, #64]	; 0x40
 80077fe:	2300      	movs	r3, #0
 8007800:	647b      	str	r3, [r7, #68]	; 0x44
 8007802:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007806:	460b      	mov	r3, r1
 8007808:	4313      	orrs	r3, r2
 800780a:	d00e      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800780c:	4b86      	ldr	r3, [pc, #536]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	4a85      	ldr	r2, [pc, #532]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007812:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007816:	6113      	str	r3, [r2, #16]
 8007818:	4b83      	ldr	r3, [pc, #524]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800781a:	6919      	ldr	r1, [r3, #16]
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007820:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007824:	4a80      	ldr	r2, [pc, #512]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007826:	430b      	orrs	r3, r1
 8007828:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007836:	63bb      	str	r3, [r7, #56]	; 0x38
 8007838:	2300      	movs	r3, #0
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800783c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007840:	460b      	mov	r3, r1
 8007842:	4313      	orrs	r3, r2
 8007844:	d009      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007846:	4b78      	ldr	r3, [pc, #480]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800784e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007854:	4a74      	ldr	r2, [pc, #464]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007856:	430b      	orrs	r3, r1
 8007858:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007866:	633b      	str	r3, [r7, #48]	; 0x30
 8007868:	2300      	movs	r3, #0
 800786a:	637b      	str	r3, [r7, #52]	; 0x34
 800786c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007870:	460b      	mov	r3, r1
 8007872:	4313      	orrs	r3, r2
 8007874:	d00a      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007876:	4b6c      	ldr	r3, [pc, #432]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007886:	4a68      	ldr	r2, [pc, #416]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007888:	430b      	orrs	r3, r1
 800788a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	2100      	movs	r1, #0
 8007896:	62b9      	str	r1, [r7, #40]	; 0x28
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80078a2:	460b      	mov	r3, r1
 80078a4:	4313      	orrs	r3, r2
 80078a6:	d011      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ac:	3308      	adds	r3, #8
 80078ae:	2100      	movs	r1, #0
 80078b0:	4618      	mov	r0, r3
 80078b2:	f001 f99d 	bl	8008bf0 <RCCEx_PLL2_Config>
 80078b6:	4603      	mov	r3, r0
 80078b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80078bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	2100      	movs	r1, #0
 80078d6:	6239      	str	r1, [r7, #32]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
 80078de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d011      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ec:	3308      	adds	r3, #8
 80078ee:	2101      	movs	r1, #1
 80078f0:	4618      	mov	r0, r3
 80078f2:	f001 f97d 	bl	8008bf0 <RCCEx_PLL2_Config>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80078fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007908:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	2100      	movs	r1, #0
 8007916:	61b9      	str	r1, [r7, #24]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007922:	460b      	mov	r3, r1
 8007924:	4313      	orrs	r3, r2
 8007926:	d011      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792c:	3308      	adds	r3, #8
 800792e:	2102      	movs	r1, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f001 f95d 	bl	8008bf0 <RCCEx_PLL2_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800793c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007948:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	2100      	movs	r1, #0
 8007956:	6139      	str	r1, [r7, #16]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007962:	460b      	mov	r3, r1
 8007964:	4313      	orrs	r3, r2
 8007966:	d011      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796c:	3328      	adds	r3, #40	; 0x28
 800796e:	2100      	movs	r1, #0
 8007970:	4618      	mov	r0, r3
 8007972:	f001 f9ef 	bl	8008d54 <RCCEx_PLL3_Config>
 8007976:	4603      	mov	r3, r0
 8007978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800797c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007984:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007988:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	2100      	movs	r1, #0
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80079a2:	460b      	mov	r3, r1
 80079a4:	4313      	orrs	r3, r2
 80079a6:	d011      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ac:	3328      	adds	r3, #40	; 0x28
 80079ae:	2101      	movs	r1, #1
 80079b0:	4618      	mov	r0, r3
 80079b2:	f001 f9cf 	bl	8008d54 <RCCEx_PLL3_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80079bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	2100      	movs	r1, #0
 80079d6:	6039      	str	r1, [r7, #0]
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	607b      	str	r3, [r7, #4]
 80079de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80079e2:	460b      	mov	r3, r1
 80079e4:	4313      	orrs	r3, r2
 80079e6:	d011      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ec:	3328      	adds	r3, #40	; 0x28
 80079ee:	2102      	movs	r1, #2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 f9af 	bl	8008d54 <RCCEx_PLL3_Config>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80079fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007a0c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e000      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007a20:	46bd      	mov	sp, r7
 8007a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400

08007a2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b090      	sub	sp, #64	; 0x40
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	f040 8094 	bne.w	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007a44:	4b9b      	ldr	r3, [pc, #620]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	f003 0307 	and.w	r3, r3, #7
 8007a4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	f200 8087 	bhi.w	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a71 	.word	0x08007a71
 8007a60:	08007a99 	.word	0x08007a99
 8007a64:	08007ac1 	.word	0x08007ac1
 8007a68:	08007b5d 	.word	0x08007b5d
 8007a6c:	08007ae9 	.word	0x08007ae9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a70:	4b90      	ldr	r3, [pc, #576]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a7c:	d108      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 ff62 	bl	800894c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8c:	f000 bc93 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a94:	f000 bc8f 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a98:	4b86      	ldr	r3, [pc, #536]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa4:	d108      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa6:	f107 0318 	add.w	r3, r7, #24
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fca6 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab4:	f000 bc7f 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007abc:	f000 bc7b 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ac0:	4b7c      	ldr	r3, [pc, #496]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007acc:	d108      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ace:	f107 030c 	add.w	r3, r7, #12
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fde6 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007adc:	f000 bc6b 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae4:	f000 bc67 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ae8:	4b72      	ldr	r3, [pc, #456]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007af2:	4b70      	ldr	r3, [pc, #448]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d10c      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d109      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b04:	4b6b      	ldr	r3, [pc, #428]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	08db      	lsrs	r3, r3, #3
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	4a6a      	ldr	r2, [pc, #424]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007b10:	fa22 f303 	lsr.w	r3, r2, r3
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b16:	e01f      	b.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b18:	4b66      	ldr	r3, [pc, #408]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b24:	d106      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b2c:	d102      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b2e:	4b63      	ldr	r3, [pc, #396]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b32:	e011      	b.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b34:	4b5f      	ldr	r3, [pc, #380]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b40:	d106      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b48:	d102      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b4a:	4b5d      	ldr	r3, [pc, #372]	; (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4e:	e003      	b.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b54:	f000 bc2f 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b58:	f000 bc2d 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b5c:	4b59      	ldr	r3, [pc, #356]	; (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b60:	f000 bc29 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b68:	f000 bc25 	b.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b70:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007b74:	430b      	orrs	r3, r1
 8007b76:	f040 80a7 	bne.w	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007b7a:	4b4e      	ldr	r3, [pc, #312]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007b82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b8a:	d054      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b92:	f200 808b 	bhi.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b9c:	f000 8083 	beq.w	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ba6:	f200 8081 	bhi.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb0:	d02f      	beq.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb8:	d878      	bhi.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bc6:	d012      	beq.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007bc8:	e070      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bca:	4b3a      	ldr	r3, [pc, #232]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bd6:	d107      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 feb5 	bl	800894c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be6:	e3e6      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bec:	e3e3      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bee:	4b31      	ldr	r3, [pc, #196]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bfc:	f107 0318 	add.w	r3, r7, #24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fbfb 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c0a:	e3d4      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c10:	e3d1      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c12:	4b28      	ldr	r3, [pc, #160]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c20:	f107 030c 	add.w	r3, r7, #12
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fd3d 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c2e:	e3c2      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c34:	e3bf      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c36:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c40:	4b1c      	ldr	r3, [pc, #112]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d10c      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c52:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	08db      	lsrs	r3, r3, #3
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	4a16      	ldr	r2, [pc, #88]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c64:	e01e      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c66:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d106      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7a:	d102      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c7c:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c80:	e010      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c82:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c8e:	d106      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c98:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9c:	e002      	b.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ca2:	e388      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ca4:	e387      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ca6:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007caa:	e384      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cb0:	e381      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007cb2:	bf00      	nop
 8007cb4:	58024400 	.word	0x58024400
 8007cb8:	03d09000 	.word	0x03d09000
 8007cbc:	003d0900 	.word	0x003d0900
 8007cc0:	017d7840 	.word	0x017d7840
 8007cc4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ccc:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	f040 809c 	bne.w	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007cd6:	4b9e      	ldr	r3, [pc, #632]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007cde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ce6:	d054      	beq.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cee:	f200 808b 	bhi.w	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cf8:	f000 8083 	beq.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d02:	f200 8081 	bhi.w	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d0c:	d02f      	beq.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d14:	d878      	bhi.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d22:	d012      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007d24:	e070      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d26:	4b8a      	ldr	r3, [pc, #552]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d32:	d107      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fe07 	bl	800894c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d42:	e338      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d48:	e335      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d4a:	4b81      	ldr	r3, [pc, #516]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d56:	d107      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d58:	f107 0318 	add.w	r3, r7, #24
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fb4d 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d66:	e326      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d6c:	e323      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d6e:	4b78      	ldr	r3, [pc, #480]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7a:	d107      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d7c:	f107 030c 	add.w	r3, r7, #12
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fc8f 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d8a:	e314      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d90:	e311      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d92:	4b6f      	ldr	r3, [pc, #444]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d9c:	4b6c      	ldr	r3, [pc, #432]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d10c      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dae:	4b68      	ldr	r3, [pc, #416]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	08db      	lsrs	r3, r3, #3
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	4a66      	ldr	r2, [pc, #408]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007dba:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc0:	e01e      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dc2:	4b63      	ldr	r3, [pc, #396]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dce:	d106      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dd6:	d102      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007dd8:	4b5f      	ldr	r3, [pc, #380]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ddc:	e010      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dde:	4b5c      	ldr	r3, [pc, #368]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dea:	d106      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007df4:	4b59      	ldr	r3, [pc, #356]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df8:	e002      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dfe:	e2da      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e00:	e2d9      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e02:	4b57      	ldr	r3, [pc, #348]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e06:	e2d6      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0c:	e2d3      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e12:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007e16:	430b      	orrs	r3, r1
 8007e18:	f040 80a7 	bne.w	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007e1c:	4b4c      	ldr	r3, [pc, #304]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e20:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007e24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e2c:	d055      	beq.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e34:	f200 8096 	bhi.w	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e3e:	f000 8084 	beq.w	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e48:	f200 808c 	bhi.w	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e52:	d030      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e5a:	f200 8083 	bhi.w	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6a:	d012      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007e6c:	e07a      	b.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e6e:	4b38      	ldr	r3, [pc, #224]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fd63 	bl	800894c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8a:	e294      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e90:	e291      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e92:	4b2f      	ldr	r3, [pc, #188]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e9e:	d107      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea0:	f107 0318 	add.w	r3, r7, #24
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 faa9 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eae:	e282      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb4:	e27f      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eb6:	4b26      	ldr	r3, [pc, #152]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec2:	d107      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec4:	f107 030c 	add.w	r3, r7, #12
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fbeb 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed2:	e270      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed8:	e26d      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eda:	4b1d      	ldr	r3, [pc, #116]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ee2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ee4:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d10c      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ef6:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	08db      	lsrs	r3, r3, #3
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	4a14      	ldr	r2, [pc, #80]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007f02:	fa22 f303 	lsr.w	r3, r2, r3
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f08:	e01e      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f0a:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f16:	d106      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f1e:	d102      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f20:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f24:	e010      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f26:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f32:	d106      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f3a:	d102      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f3c:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f40:	e002      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f46:	e236      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f48:	e235      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f4a:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f4e:	e232      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f50:	58024400 	.word	0x58024400
 8007f54:	03d09000 	.word	0x03d09000
 8007f58:	003d0900 	.word	0x003d0900
 8007f5c:	017d7840 	.word	0x017d7840
 8007f60:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f68:	e225      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f6e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007f72:	430b      	orrs	r3, r1
 8007f74:	f040 8085 	bne.w	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007f78:	4b9c      	ldr	r3, [pc, #624]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007f80:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f88:	d06b      	beq.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f90:	d874      	bhi.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f98:	d056      	beq.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fa0:	d86c      	bhi.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fa8:	d03b      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fb0:	d864      	bhi.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb8:	d021      	beq.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fc0:	d85c      	bhi.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fce:	d004      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007fd0:	e054      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007fd2:	f7fe fb5f 	bl	8006694 <HAL_RCC_GetPCLK1Freq>
 8007fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007fd8:	e1ed      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fda:	4b84      	ldr	r3, [pc, #528]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe8:	f107 0318 	add.w	r3, r7, #24
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fa05 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff6:	e1de      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ffc:	e1db      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ffe:	4b7b      	ldr	r3, [pc, #492]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800800a:	d107      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800c:	f107 030c 	add.w	r3, r7, #12
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fb47 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800801a:	e1cc      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008020:	e1c9      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008022:	4b72      	ldr	r3, [pc, #456]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b04      	cmp	r3, #4
 800802c:	d109      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800802e:	4b6f      	ldr	r3, [pc, #444]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	08db      	lsrs	r3, r3, #3
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	4a6d      	ldr	r2, [pc, #436]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800803a:	fa22 f303 	lsr.w	r3, r2, r3
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008040:	e1b9      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008046:	e1b6      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008048:	4b68      	ldr	r3, [pc, #416]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008054:	d102      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008056:	4b67      	ldr	r3, [pc, #412]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800805a:	e1ac      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008060:	e1a9      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008062:	4b62      	ldr	r3, [pc, #392]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800806e:	d102      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008070:	4b61      	ldr	r3, [pc, #388]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008074:	e19f      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800807a:	e19c      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008080:	e199      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008086:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800808a:	430b      	orrs	r3, r1
 800808c:	d173      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800808e:	4b57      	ldr	r3, [pc, #348]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008096:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800809e:	d02f      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080a6:	d863      	bhi.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b4:	d012      	beq.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80080b6:	e05b      	b.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080b8:	4b4c      	ldr	r3, [pc, #304]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080c4:	d107      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c6:	f107 0318 	add.w	r3, r7, #24
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f996 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d4:	e16f      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080da:	e16c      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080dc:	4b43      	ldr	r3, [pc, #268]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e8:	d107      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fad8 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f8:	e15d      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080fe:	e15a      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008100:	4b3a      	ldr	r3, [pc, #232]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008108:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800810a:	4b38      	ldr	r3, [pc, #224]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	2b04      	cmp	r3, #4
 8008114:	d10c      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800811c:	4b33      	ldr	r3, [pc, #204]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	08db      	lsrs	r3, r3, #3
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	4a32      	ldr	r2, [pc, #200]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008128:	fa22 f303 	lsr.w	r3, r2, r3
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800812e:	e01e      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008130:	4b2e      	ldr	r3, [pc, #184]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813c:	d106      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008144:	d102      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008146:	4b2b      	ldr	r3, [pc, #172]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800814a:	e010      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800814c:	4b27      	ldr	r3, [pc, #156]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008158:	d106      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008160:	d102      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008162:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008166:	e002      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800816c:	e123      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800816e:	e122      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008174:	e11f      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800817e:	430b      	orrs	r3, r1
 8008180:	d13c      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008182:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800818a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008198:	d012      	beq.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800819a:	e023      	b.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800819c:	4b13      	ldr	r3, [pc, #76]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081a8:	d107      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fbcc 	bl	800894c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b8:	e0fd      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081be:	e0fa      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081c0:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081cc:	d107      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ce:	f107 0318 	add.w	r3, r7, #24
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f912 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081dc:	e0eb      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e2:	e0e8      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e8:	e0e5      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081ea:	bf00      	nop
 80081ec:	58024400 	.word	0x58024400
 80081f0:	03d09000 	.word	0x03d09000
 80081f4:	003d0900 	.word	0x003d0900
 80081f8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80081fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008200:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008204:	430b      	orrs	r3, r1
 8008206:	f040 8085 	bne.w	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800820a:	4b6d      	ldr	r3, [pc, #436]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800820c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008212:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800821a:	d06b      	beq.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008222:	d874      	bhi.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822a:	d056      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008232:	d86c      	bhi.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800823a:	d03b      	beq.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008242:	d864      	bhi.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800824a:	d021      	beq.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008252:	d85c      	bhi.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008260:	d004      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008262:	e054      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008264:	f000 f8b4 	bl	80083d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008268:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800826a:	e0a4      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800826c:	4b54      	ldr	r3, [pc, #336]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008278:	d107      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800827a:	f107 0318 	add.w	r3, r7, #24
 800827e:	4618      	mov	r0, r3
 8008280:	f000 f8bc 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008288:	e095      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828e:	e092      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008290:	4b4b      	ldr	r3, [pc, #300]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800829c:	d107      	bne.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800829e:	f107 030c 	add.w	r3, r7, #12
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f9fe 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ac:	e083      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082b2:	e080      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082b4:	4b42      	ldr	r3, [pc, #264]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d109      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082c0:	4b3f      	ldr	r3, [pc, #252]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	08db      	lsrs	r3, r3, #3
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	4a3e      	ldr	r2, [pc, #248]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80082cc:	fa22 f303 	lsr.w	r3, r2, r3
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d2:	e070      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d8:	e06d      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80082da:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e6:	d102      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80082e8:	4b37      	ldr	r3, [pc, #220]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ec:	e063      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f2:	e060      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082f4:	4b32      	ldr	r3, [pc, #200]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008300:	d102      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008302:	4b32      	ldr	r3, [pc, #200]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008306:	e056      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800830c:	e053      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008312:	e050      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008318:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800831c:	430b      	orrs	r3, r1
 800831e:	d148      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008320:	4b27      	ldr	r3, [pc, #156]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008328:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008330:	d02a      	beq.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008338:	d838      	bhi.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008346:	d00d      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008348:	e030      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800834a:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008356:	d102      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008358:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835c:	e02b      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008362:	e028      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008364:	4b16      	ldr	r3, [pc, #88]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008370:	d107      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fae8 	bl	800894c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008380:	e019      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008386:	e016      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008388:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008394:	d107      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008396:	f107 0318 	add.w	r3, r7, #24
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f82e 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a4:	e007      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083aa:	e004      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083b0:	e001      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80083b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3740      	adds	r7, #64	; 0x40
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	58024400 	.word	0x58024400
 80083c4:	03d09000 	.word	0x03d09000
 80083c8:	003d0900 	.word	0x003d0900
 80083cc:	017d7840 	.word	0x017d7840

080083d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80083d4:	f7fe f92e 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 80083d8:	4602      	mov	r2, r0
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	091b      	lsrs	r3, r3, #4
 80083e0:	f003 0307 	and.w	r3, r3, #7
 80083e4:	4904      	ldr	r1, [pc, #16]	; (80083f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80083e6:	5ccb      	ldrb	r3, [r1, r3]
 80083e8:	f003 031f 	and.w	r3, r3, #31
 80083ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	58024400 	.word	0x58024400
 80083f8:	0800bbf4 	.word	0x0800bbf4

080083fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b089      	sub	sp, #36	; 0x24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008404:	4ba1      	ldr	r3, [pc, #644]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800840e:	4b9f      	ldr	r3, [pc, #636]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008412:	0b1b      	lsrs	r3, r3, #12
 8008414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008418:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800841a:	4b9c      	ldr	r3, [pc, #624]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	091b      	lsrs	r3, r3, #4
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008426:	4b99      	ldr	r3, [pc, #612]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	08db      	lsrs	r3, r3, #3
 800842c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	fb02 f303 	mul.w	r3, r2, r3
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8111 	beq.w	800866c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b02      	cmp	r3, #2
 800844e:	f000 8083 	beq.w	8008558 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	2b02      	cmp	r3, #2
 8008456:	f200 80a1 	bhi.w	800859c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d056      	beq.n	8008514 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008466:	e099      	b.n	800859c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008468:	4b88      	ldr	r3, [pc, #544]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	d02d      	beq.n	80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008474:	4b85      	ldr	r3, [pc, #532]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	08db      	lsrs	r3, r3, #3
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	4a84      	ldr	r2, [pc, #528]	; (8008690 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008480:	fa22 f303 	lsr.w	r3, r2, r3
 8008484:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800849e:	4b7b      	ldr	r3, [pc, #492]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80084b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084ce:	e087      	b.n	80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80084de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e2:	4b6a      	ldr	r3, [pc, #424]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008512:	e065      	b.n	80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800869c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008526:	4b59      	ldr	r3, [pc, #356]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008536:	ed97 6a03 	vldr	s12, [r7, #12]
 800853a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800853e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800854a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008556:	e043      	b.n	80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008562:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856a:	4b48      	ldr	r3, [pc, #288]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800856c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857a:	ed97 6a03 	vldr	s12, [r7, #12]
 800857e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800858e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800859a:	e021      	b.n	80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800869c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80085aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ae:	4b37      	ldr	r3, [pc, #220]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085be:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80085e0:	4b2a      	ldr	r3, [pc, #168]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	0a5b      	lsrs	r3, r3, #9
 80085e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80085fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008606:	ee17 2a90 	vmov	r2, s15
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800860e:	4b1f      	ldr	r3, [pc, #124]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	0c1b      	lsrs	r3, r3, #16
 8008614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008624:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008628:	edd7 6a07 	vldr	s13, [r7, #28]
 800862c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008634:	ee17 2a90 	vmov	r2, s15
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800863c:	4b13      	ldr	r3, [pc, #76]	; (800868c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	0e1b      	lsrs	r3, r3, #24
 8008642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008656:	edd7 6a07 	vldr	s13, [r7, #28]
 800865a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008662:	ee17 2a90 	vmov	r2, s15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800866a:	e008      	b.n	800867e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	609a      	str	r2, [r3, #8]
}
 800867e:	bf00      	nop
 8008680:	3724      	adds	r7, #36	; 0x24
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	58024400 	.word	0x58024400
 8008690:	03d09000 	.word	0x03d09000
 8008694:	46000000 	.word	0x46000000
 8008698:	4c742400 	.word	0x4c742400
 800869c:	4a742400 	.word	0x4a742400
 80086a0:	4bbebc20 	.word	0x4bbebc20

080086a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b089      	sub	sp, #36	; 0x24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086ac:	4ba1      	ldr	r3, [pc, #644]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	f003 0303 	and.w	r3, r3, #3
 80086b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80086b6:	4b9f      	ldr	r3, [pc, #636]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	0d1b      	lsrs	r3, r3, #20
 80086bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80086c2:	4b9c      	ldr	r3, [pc, #624]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	0a1b      	lsrs	r3, r3, #8
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80086ce:	4b99      	ldr	r3, [pc, #612]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d2:	08db      	lsrs	r3, r3, #3
 80086d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	fb02 f303 	mul.w	r3, r2, r3
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8111 	beq.w	8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	f000 8083 	beq.w	8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	f200 80a1 	bhi.w	8008844 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d056      	beq.n	80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800870e:	e099      	b.n	8008844 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008710:	4b88      	ldr	r3, [pc, #544]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	2b00      	cmp	r3, #0
 800871a:	d02d      	beq.n	8008778 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800871c:	4b85      	ldr	r3, [pc, #532]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	08db      	lsrs	r3, r3, #3
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	4a84      	ldr	r2, [pc, #528]	; (8008938 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008728:	fa22 f303 	lsr.w	r3, r2, r3
 800872c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008746:	4b7b      	ldr	r3, [pc, #492]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008756:	ed97 6a03 	vldr	s12, [r7, #12]
 800875a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800893c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800875e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800876a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800876e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008772:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008776:	e087      	b.n	8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008782:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008940 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800878a:	4b6a      	ldr	r3, [pc, #424]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800879a:	ed97 6a03 	vldr	s12, [r7, #12]
 800879e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800893c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ba:	e065      	b.n	8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ce:	4b59      	ldr	r3, [pc, #356]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087de:	ed97 6a03 	vldr	s12, [r7, #12]
 80087e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800893c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087fe:	e043      	b.n	8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008948 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800880e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008812:	4b48      	ldr	r3, [pc, #288]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008822:	ed97 6a03 	vldr	s12, [r7, #12]
 8008826:	eddf 5a45 	vldr	s11, [pc, #276]	; 800893c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800882a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800883a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008842:	e021      	b.n	8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008856:	4b37      	ldr	r3, [pc, #220]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008866:	ed97 6a03 	vldr	s12, [r7, #12]
 800886a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800893c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800886e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800887a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008886:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008888:	4b2a      	ldr	r3, [pc, #168]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	0a5b      	lsrs	r3, r3, #9
 800888e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800889e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ae:	ee17 2a90 	vmov	r2, s15
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80088b6:	4b1f      	ldr	r3, [pc, #124]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	0c1b      	lsrs	r3, r3, #16
 80088bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c0:	ee07 3a90 	vmov	s15, r3
 80088c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80088d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088dc:	ee17 2a90 	vmov	r2, s15
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80088e4:	4b13      	ldr	r3, [pc, #76]	; (8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	0e1b      	lsrs	r3, r3, #24
 80088ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800890a:	ee17 2a90 	vmov	r2, s15
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008912:	e008      	b.n	8008926 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	609a      	str	r2, [r3, #8]
}
 8008926:	bf00      	nop
 8008928:	3724      	adds	r7, #36	; 0x24
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	58024400 	.word	0x58024400
 8008938:	03d09000 	.word	0x03d09000
 800893c:	46000000 	.word	0x46000000
 8008940:	4c742400 	.word	0x4c742400
 8008944:	4a742400 	.word	0x4a742400
 8008948:	4bbebc20 	.word	0x4bbebc20

0800894c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800894c:	b480      	push	{r7}
 800894e:	b089      	sub	sp, #36	; 0x24
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008954:	4ba0      	ldr	r3, [pc, #640]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f003 0303 	and.w	r3, r3, #3
 800895c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800895e:	4b9e      	ldr	r3, [pc, #632]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	091b      	lsrs	r3, r3, #4
 8008964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008968:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800896a:	4b9b      	ldr	r3, [pc, #620]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008974:	4b98      	ldr	r3, [pc, #608]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008978:	08db      	lsrs	r3, r3, #3
 800897a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	fb02 f303 	mul.w	r3, r2, r3
 8008984:	ee07 3a90 	vmov	s15, r3
 8008988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 8111 	beq.w	8008bba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2b02      	cmp	r3, #2
 800899c:	f000 8083 	beq.w	8008aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	f200 80a1 	bhi.w	8008aea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d056      	beq.n	8008a62 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80089b4:	e099      	b.n	8008aea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b6:	4b88      	ldr	r3, [pc, #544]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d02d      	beq.n	8008a1e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089c2:	4b85      	ldr	r3, [pc, #532]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	08db      	lsrs	r3, r3, #3
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	4a83      	ldr	r2, [pc, #524]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80089ce:	fa22 f303 	lsr.w	r3, r2, r3
 80089d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	ee07 3a90 	vmov	s15, r3
 80089e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ec:	4b7a      	ldr	r3, [pc, #488]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a00:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a18:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a1c:	e087      	b.n	8008b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	ee07 3a90 	vmov	s15, r3
 8008a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008be4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a30:	4b69      	ldr	r3, [pc, #420]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a40:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a44:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a60:	e065      	b.n	8008b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	ee07 3a90 	vmov	s15, r3
 8008a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008be8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a74:	4b58      	ldr	r3, [pc, #352]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a84:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a88:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa4:	e043      	b.n	8008b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	ee07 3a90 	vmov	s15, r3
 8008aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab8:	4b47      	ldr	r3, [pc, #284]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac0:	ee07 3a90 	vmov	s15, r3
 8008ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008acc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ae8:	e021      	b.n	8008b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008be4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afc:	4b36      	ldr	r3, [pc, #216]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b04:	ee07 3a90 	vmov	s15, r3
 8008b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008be0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008b2e:	4b2a      	ldr	r3, [pc, #168]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	0a5b      	lsrs	r3, r3, #9
 8008b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b38:	ee07 3a90 	vmov	s15, r3
 8008b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b54:	ee17 2a90 	vmov	r2, s15
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008b5c:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b60:	0c1b      	lsrs	r3, r3, #16
 8008b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b82:	ee17 2a90 	vmov	r2, s15
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008b8a:	4b13      	ldr	r3, [pc, #76]	; (8008bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	0e1b      	lsrs	r3, r3, #24
 8008b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb0:	ee17 2a90 	vmov	r2, s15
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008bb8:	e008      	b.n	8008bcc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	609a      	str	r2, [r3, #8]
}
 8008bcc:	bf00      	nop
 8008bce:	3724      	adds	r7, #36	; 0x24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	03d09000 	.word	0x03d09000
 8008be0:	46000000 	.word	0x46000000
 8008be4:	4c742400 	.word	0x4c742400
 8008be8:	4a742400 	.word	0x4a742400
 8008bec:	4bbebc20 	.word	0x4bbebc20

08008bf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bfe:	4b53      	ldr	r3, [pc, #332]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d101      	bne.n	8008c0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e099      	b.n	8008d42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c0e:	4b4f      	ldr	r3, [pc, #316]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a4e      	ldr	r2, [pc, #312]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c1a:	f7f9 fd45 	bl	80026a8 <HAL_GetTick>
 8008c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c20:	e008      	b.n	8008c34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c22:	f7f9 fd41 	bl	80026a8 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e086      	b.n	8008d42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c34:	4b45      	ldr	r3, [pc, #276]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f0      	bne.n	8008c22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c40:	4b42      	ldr	r3, [pc, #264]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	031b      	lsls	r3, r3, #12
 8008c4e:	493f      	ldr	r1, [pc, #252]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	628b      	str	r3, [r1, #40]	; 0x28
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	025b      	lsls	r3, r3, #9
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c76:	431a      	orrs	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	061b      	lsls	r3, r3, #24
 8008c80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c84:	4931      	ldr	r1, [pc, #196]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c8a:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	492d      	ldr	r1, [pc, #180]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c9c:	4b2b      	ldr	r3, [pc, #172]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	f023 0220 	bic.w	r2, r3, #32
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	4928      	ldr	r1, [pc, #160]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cae:	4b27      	ldr	r3, [pc, #156]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	4a26      	ldr	r2, [pc, #152]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008cb4:	f023 0310 	bic.w	r3, r3, #16
 8008cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cba:	4b24      	ldr	r3, [pc, #144]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cbe:	4b24      	ldr	r3, [pc, #144]	; (8008d50 <RCCEx_PLL2_Config+0x160>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	69d2      	ldr	r2, [r2, #28]
 8008cc6:	00d2      	lsls	r2, r2, #3
 8008cc8:	4920      	ldr	r1, [pc, #128]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008cce:	4b1f      	ldr	r3, [pc, #124]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4a1e      	ldr	r2, [pc, #120]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008cd4:	f043 0310 	orr.w	r3, r3, #16
 8008cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	4a19      	ldr	r2, [pc, #100]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cec:	e00f      	b.n	8008d0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d106      	bne.n	8008d02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008cf4:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4a14      	ldr	r2, [pc, #80]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d00:	e005      	b.n	8008d0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a0e      	ldr	r2, [pc, #56]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1a:	f7f9 fcc5 	bl	80026a8 <HAL_GetTick>
 8008d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d20:	e008      	b.n	8008d34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d22:	f7f9 fcc1 	bl	80026a8 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e006      	b.n	8008d42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <RCCEx_PLL2_Config+0x15c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f0      	beq.n	8008d22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	ffff0007 	.word	0xffff0007

08008d54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d62:	4b53      	ldr	r3, [pc, #332]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d101      	bne.n	8008d72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e099      	b.n	8008ea6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d72:	4b4f      	ldr	r3, [pc, #316]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a4e      	ldr	r2, [pc, #312]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d7e:	f7f9 fc93 	bl	80026a8 <HAL_GetTick>
 8008d82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d84:	e008      	b.n	8008d98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d86:	f7f9 fc8f 	bl	80026a8 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d901      	bls.n	8008d98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e086      	b.n	8008ea6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d98:	4b45      	ldr	r3, [pc, #276]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1f0      	bne.n	8008d86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008da4:	4b42      	ldr	r3, [pc, #264]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	051b      	lsls	r3, r3, #20
 8008db2:	493f      	ldr	r1, [pc, #252]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	628b      	str	r3, [r1, #40]	; 0x28
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	025b      	lsls	r3, r3, #9
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	061b      	lsls	r3, r3, #24
 8008de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008de8:	4931      	ldr	r1, [pc, #196]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008dee:	4b30      	ldr	r3, [pc, #192]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	492d      	ldr	r1, [pc, #180]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e00:	4b2b      	ldr	r3, [pc, #172]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	4928      	ldr	r1, [pc, #160]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e12:	4b27      	ldr	r3, [pc, #156]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	4a26      	ldr	r2, [pc, #152]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e1e:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e22:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <RCCEx_PLL3_Config+0x160>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	69d2      	ldr	r2, [r2, #28]
 8008e2a:	00d2      	lsls	r2, r2, #3
 8008e2c:	4920      	ldr	r1, [pc, #128]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e32:	4b1f      	ldr	r3, [pc, #124]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	4a1e      	ldr	r2, [pc, #120]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d106      	bne.n	8008e52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e44:	4b1a      	ldr	r3, [pc, #104]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	4a19      	ldr	r2, [pc, #100]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e50:	e00f      	b.n	8008e72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d106      	bne.n	8008e66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	4a14      	ldr	r2, [pc, #80]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e64:	e005      	b.n	8008e72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	4a11      	ldr	r2, [pc, #68]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e72:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a0e      	ldr	r2, [pc, #56]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e7e:	f7f9 fc13 	bl	80026a8 <HAL_GetTick>
 8008e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e84:	e008      	b.n	8008e98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e86:	f7f9 fc0f 	bl	80026a8 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e006      	b.n	8008ea6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <RCCEx_PLL3_Config+0x15c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0f0      	beq.n	8008e86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	ffff0007 	.word	0xffff0007

08008eb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e049      	b.n	8008f5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7f9 f994 	bl	800220c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f000 f94a 	bl	8009190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d101      	bne.n	8008f86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e0ff      	b.n	8009186 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b14      	cmp	r3, #20
 8008f92:	f200 80f0 	bhi.w	8009176 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f96:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008ff1 	.word	0x08008ff1
 8008fa0:	08009177 	.word	0x08009177
 8008fa4:	08009177 	.word	0x08009177
 8008fa8:	08009177 	.word	0x08009177
 8008fac:	08009031 	.word	0x08009031
 8008fb0:	08009177 	.word	0x08009177
 8008fb4:	08009177 	.word	0x08009177
 8008fb8:	08009177 	.word	0x08009177
 8008fbc:	08009073 	.word	0x08009073
 8008fc0:	08009177 	.word	0x08009177
 8008fc4:	08009177 	.word	0x08009177
 8008fc8:	08009177 	.word	0x08009177
 8008fcc:	080090b3 	.word	0x080090b3
 8008fd0:	08009177 	.word	0x08009177
 8008fd4:	08009177 	.word	0x08009177
 8008fd8:	08009177 	.word	0x08009177
 8008fdc:	080090f5 	.word	0x080090f5
 8008fe0:	08009177 	.word	0x08009177
 8008fe4:	08009177 	.word	0x08009177
 8008fe8:	08009177 	.word	0x08009177
 8008fec:	08009135 	.word	0x08009135
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f97c 	bl	80092f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699a      	ldr	r2, [r3, #24]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f042 0208 	orr.w	r2, r2, #8
 800900a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0204 	bic.w	r2, r2, #4
 800901a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6999      	ldr	r1, [r3, #24]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	691a      	ldr	r2, [r3, #16]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	619a      	str	r2, [r3, #24]
      break;
 800902e:	e0a5      	b.n	800917c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68b9      	ldr	r1, [r7, #8]
 8009036:	4618      	mov	r0, r3
 8009038:	f000 f9ec 	bl	8009414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800904a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699a      	ldr	r2, [r3, #24]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800905a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6999      	ldr	r1, [r3, #24]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	021a      	lsls	r2, r3, #8
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	619a      	str	r2, [r3, #24]
      break;
 8009070:	e084      	b.n	800917c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fa55 	bl	8009528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	69da      	ldr	r2, [r3, #28]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0208 	orr.w	r2, r2, #8
 800908c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69da      	ldr	r2, [r3, #28]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0204 	bic.w	r2, r2, #4
 800909c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69d9      	ldr	r1, [r3, #28]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	61da      	str	r2, [r3, #28]
      break;
 80090b0:	e064      	b.n	800917c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68b9      	ldr	r1, [r7, #8]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fabd 	bl	8009638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69da      	ldr	r2, [r3, #28]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69d9      	ldr	r1, [r3, #28]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	021a      	lsls	r2, r3, #8
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	61da      	str	r2, [r3, #28]
      break;
 80090f2:	e043      	b.n	800917c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68b9      	ldr	r1, [r7, #8]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fb06 	bl	800970c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0208 	orr.w	r2, r2, #8
 800910e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0204 	bic.w	r2, r2, #4
 800911e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	691a      	ldr	r2, [r3, #16]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009132:	e023      	b.n	800917c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fb4a 	bl	80097d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800914e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800915e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	021a      	lsls	r2, r3, #8
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009174:	e002      	b.n	800917c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	75fb      	strb	r3, [r7, #23]
      break;
 800917a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009184:	7dfb      	ldrb	r3, [r7, #23]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop

08009190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a4a      	ldr	r2, [pc, #296]	; (80092cc <TIM_Base_SetConfig+0x13c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d013      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ae:	d00f      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a47      	ldr	r2, [pc, #284]	; (80092d0 <TIM_Base_SetConfig+0x140>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d00b      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a46      	ldr	r2, [pc, #280]	; (80092d4 <TIM_Base_SetConfig+0x144>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d007      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a45      	ldr	r2, [pc, #276]	; (80092d8 <TIM_Base_SetConfig+0x148>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d003      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a44      	ldr	r2, [pc, #272]	; (80092dc <TIM_Base_SetConfig+0x14c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d108      	bne.n	80091e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a39      	ldr	r2, [pc, #228]	; (80092cc <TIM_Base_SetConfig+0x13c>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d027      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f0:	d023      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a36      	ldr	r2, [pc, #216]	; (80092d0 <TIM_Base_SetConfig+0x140>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d01f      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a35      	ldr	r2, [pc, #212]	; (80092d4 <TIM_Base_SetConfig+0x144>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d01b      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a34      	ldr	r2, [pc, #208]	; (80092d8 <TIM_Base_SetConfig+0x148>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d017      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a33      	ldr	r2, [pc, #204]	; (80092dc <TIM_Base_SetConfig+0x14c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d013      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a32      	ldr	r2, [pc, #200]	; (80092e0 <TIM_Base_SetConfig+0x150>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00f      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a31      	ldr	r2, [pc, #196]	; (80092e4 <TIM_Base_SetConfig+0x154>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00b      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a30      	ldr	r2, [pc, #192]	; (80092e8 <TIM_Base_SetConfig+0x158>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d007      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2f      	ldr	r2, [pc, #188]	; (80092ec <TIM_Base_SetConfig+0x15c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d003      	beq.n	800923a <TIM_Base_SetConfig+0xaa>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2e      	ldr	r2, [pc, #184]	; (80092f0 <TIM_Base_SetConfig+0x160>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d108      	bne.n	800924c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	4313      	orrs	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a16      	ldr	r2, [pc, #88]	; (80092cc <TIM_Base_SetConfig+0x13c>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00f      	beq.n	8009298 <TIM_Base_SetConfig+0x108>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a18      	ldr	r2, [pc, #96]	; (80092dc <TIM_Base_SetConfig+0x14c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00b      	beq.n	8009298 <TIM_Base_SetConfig+0x108>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a17      	ldr	r2, [pc, #92]	; (80092e0 <TIM_Base_SetConfig+0x150>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d007      	beq.n	8009298 <TIM_Base_SetConfig+0x108>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a16      	ldr	r2, [pc, #88]	; (80092e4 <TIM_Base_SetConfig+0x154>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d003      	beq.n	8009298 <TIM_Base_SetConfig+0x108>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <TIM_Base_SetConfig+0x158>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d103      	bne.n	80092a0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	691a      	ldr	r2, [r3, #16]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d105      	bne.n	80092be <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f023 0201 	bic.w	r2, r3, #1
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	611a      	str	r2, [r3, #16]
  }
}
 80092be:	bf00      	nop
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40010000 	.word	0x40010000
 80092d0:	40000400 	.word	0x40000400
 80092d4:	40000800 	.word	0x40000800
 80092d8:	40000c00 	.word	0x40000c00
 80092dc:	40010400 	.word	0x40010400
 80092e0:	40014000 	.word	0x40014000
 80092e4:	40014400 	.word	0x40014400
 80092e8:	40014800 	.word	0x40014800
 80092ec:	4000e000 	.word	0x4000e000
 80092f0:	4000e400 	.word	0x4000e400

080092f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	f023 0201 	bic.w	r2, r3, #1
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4b37      	ldr	r3, [pc, #220]	; (80093fc <TIM_OC1_SetConfig+0x108>)
 8009320:	4013      	ands	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0303 	bic.w	r3, r3, #3
 800932a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f023 0302 	bic.w	r3, r3, #2
 800933c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	4313      	orrs	r3, r2
 8009346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a2d      	ldr	r2, [pc, #180]	; (8009400 <TIM_OC1_SetConfig+0x10c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00f      	beq.n	8009370 <TIM_OC1_SetConfig+0x7c>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a2c      	ldr	r2, [pc, #176]	; (8009404 <TIM_OC1_SetConfig+0x110>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d00b      	beq.n	8009370 <TIM_OC1_SetConfig+0x7c>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a2b      	ldr	r2, [pc, #172]	; (8009408 <TIM_OC1_SetConfig+0x114>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d007      	beq.n	8009370 <TIM_OC1_SetConfig+0x7c>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a2a      	ldr	r2, [pc, #168]	; (800940c <TIM_OC1_SetConfig+0x118>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d003      	beq.n	8009370 <TIM_OC1_SetConfig+0x7c>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a29      	ldr	r2, [pc, #164]	; (8009410 <TIM_OC1_SetConfig+0x11c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d10c      	bne.n	800938a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f023 0308 	bic.w	r3, r3, #8
 8009376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f023 0304 	bic.w	r3, r3, #4
 8009388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <TIM_OC1_SetConfig+0x10c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d00f      	beq.n	80093b2 <TIM_OC1_SetConfig+0xbe>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a1b      	ldr	r2, [pc, #108]	; (8009404 <TIM_OC1_SetConfig+0x110>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00b      	beq.n	80093b2 <TIM_OC1_SetConfig+0xbe>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1a      	ldr	r2, [pc, #104]	; (8009408 <TIM_OC1_SetConfig+0x114>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d007      	beq.n	80093b2 <TIM_OC1_SetConfig+0xbe>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a19      	ldr	r2, [pc, #100]	; (800940c <TIM_OC1_SetConfig+0x118>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d003      	beq.n	80093b2 <TIM_OC1_SetConfig+0xbe>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a18      	ldr	r2, [pc, #96]	; (8009410 <TIM_OC1_SetConfig+0x11c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d111      	bne.n	80093d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	621a      	str	r2, [r3, #32]
}
 80093f0:	bf00      	nop
 80093f2:	371c      	adds	r7, #28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	fffeff8f 	.word	0xfffeff8f
 8009400:	40010000 	.word	0x40010000
 8009404:	40010400 	.word	0x40010400
 8009408:	40014000 	.word	0x40014000
 800940c:	40014400 	.word	0x40014400
 8009410:	40014800 	.word	0x40014800

08009414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	f023 0210 	bic.w	r2, r3, #16
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	4b34      	ldr	r3, [pc, #208]	; (8009510 <TIM_OC2_SetConfig+0xfc>)
 8009440:	4013      	ands	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800944a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	4313      	orrs	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f023 0320 	bic.w	r3, r3, #32
 800945e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a29      	ldr	r2, [pc, #164]	; (8009514 <TIM_OC2_SetConfig+0x100>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d003      	beq.n	800947c <TIM_OC2_SetConfig+0x68>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a28      	ldr	r2, [pc, #160]	; (8009518 <TIM_OC2_SetConfig+0x104>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d10d      	bne.n	8009498 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009496:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1e      	ldr	r2, [pc, #120]	; (8009514 <TIM_OC2_SetConfig+0x100>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00f      	beq.n	80094c0 <TIM_OC2_SetConfig+0xac>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a1d      	ldr	r2, [pc, #116]	; (8009518 <TIM_OC2_SetConfig+0x104>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00b      	beq.n	80094c0 <TIM_OC2_SetConfig+0xac>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a1c      	ldr	r2, [pc, #112]	; (800951c <TIM_OC2_SetConfig+0x108>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d007      	beq.n	80094c0 <TIM_OC2_SetConfig+0xac>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a1b      	ldr	r2, [pc, #108]	; (8009520 <TIM_OC2_SetConfig+0x10c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d003      	beq.n	80094c0 <TIM_OC2_SetConfig+0xac>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a1a      	ldr	r2, [pc, #104]	; (8009524 <TIM_OC2_SetConfig+0x110>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d113      	bne.n	80094e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	621a      	str	r2, [r3, #32]
}
 8009502:	bf00      	nop
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	feff8fff 	.word	0xfeff8fff
 8009514:	40010000 	.word	0x40010000
 8009518:	40010400 	.word	0x40010400
 800951c:	40014000 	.word	0x40014000
 8009520:	40014400 	.word	0x40014400
 8009524:	40014800 	.word	0x40014800

08009528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	4b33      	ldr	r3, [pc, #204]	; (8009620 <TIM_OC3_SetConfig+0xf8>)
 8009554:	4013      	ands	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a28      	ldr	r2, [pc, #160]	; (8009624 <TIM_OC3_SetConfig+0xfc>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d003      	beq.n	800958e <TIM_OC3_SetConfig+0x66>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a27      	ldr	r2, [pc, #156]	; (8009628 <TIM_OC3_SetConfig+0x100>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d10d      	bne.n	80095aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	4313      	orrs	r3, r2
 80095a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a1d      	ldr	r2, [pc, #116]	; (8009624 <TIM_OC3_SetConfig+0xfc>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00f      	beq.n	80095d2 <TIM_OC3_SetConfig+0xaa>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a1c      	ldr	r2, [pc, #112]	; (8009628 <TIM_OC3_SetConfig+0x100>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00b      	beq.n	80095d2 <TIM_OC3_SetConfig+0xaa>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a1b      	ldr	r2, [pc, #108]	; (800962c <TIM_OC3_SetConfig+0x104>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d007      	beq.n	80095d2 <TIM_OC3_SetConfig+0xaa>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a1a      	ldr	r2, [pc, #104]	; (8009630 <TIM_OC3_SetConfig+0x108>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d003      	beq.n	80095d2 <TIM_OC3_SetConfig+0xaa>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a19      	ldr	r2, [pc, #100]	; (8009634 <TIM_OC3_SetConfig+0x10c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d113      	bne.n	80095fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	011b      	lsls	r3, r3, #4
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	621a      	str	r2, [r3, #32]
}
 8009614:	bf00      	nop
 8009616:	371c      	adds	r7, #28
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	fffeff8f 	.word	0xfffeff8f
 8009624:	40010000 	.word	0x40010000
 8009628:	40010400 	.word	0x40010400
 800962c:	40014000 	.word	0x40014000
 8009630:	40014400 	.word	0x40014400
 8009634:	40014800 	.word	0x40014800

08009638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4b24      	ldr	r3, [pc, #144]	; (80096f4 <TIM_OC4_SetConfig+0xbc>)
 8009664:	4013      	ands	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800966e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4313      	orrs	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	031b      	lsls	r3, r3, #12
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	4313      	orrs	r3, r2
 800968e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a19      	ldr	r2, [pc, #100]	; (80096f8 <TIM_OC4_SetConfig+0xc0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00f      	beq.n	80096b8 <TIM_OC4_SetConfig+0x80>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a18      	ldr	r2, [pc, #96]	; (80096fc <TIM_OC4_SetConfig+0xc4>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00b      	beq.n	80096b8 <TIM_OC4_SetConfig+0x80>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a17      	ldr	r2, [pc, #92]	; (8009700 <TIM_OC4_SetConfig+0xc8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d007      	beq.n	80096b8 <TIM_OC4_SetConfig+0x80>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a16      	ldr	r2, [pc, #88]	; (8009704 <TIM_OC4_SetConfig+0xcc>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d003      	beq.n	80096b8 <TIM_OC4_SetConfig+0x80>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a15      	ldr	r2, [pc, #84]	; (8009708 <TIM_OC4_SetConfig+0xd0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d109      	bne.n	80096cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	019b      	lsls	r3, r3, #6
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	621a      	str	r2, [r3, #32]
}
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	feff8fff 	.word	0xfeff8fff
 80096f8:	40010000 	.word	0x40010000
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40014400 	.word	0x40014400
 8009708:	40014800 	.word	0x40014800

0800970c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4b21      	ldr	r3, [pc, #132]	; (80097bc <TIM_OC5_SetConfig+0xb0>)
 8009738:	4013      	ands	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800974c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	041b      	lsls	r3, r3, #16
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a18      	ldr	r2, [pc, #96]	; (80097c0 <TIM_OC5_SetConfig+0xb4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00f      	beq.n	8009782 <TIM_OC5_SetConfig+0x76>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a17      	ldr	r2, [pc, #92]	; (80097c4 <TIM_OC5_SetConfig+0xb8>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00b      	beq.n	8009782 <TIM_OC5_SetConfig+0x76>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a16      	ldr	r2, [pc, #88]	; (80097c8 <TIM_OC5_SetConfig+0xbc>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d007      	beq.n	8009782 <TIM_OC5_SetConfig+0x76>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a15      	ldr	r2, [pc, #84]	; (80097cc <TIM_OC5_SetConfig+0xc0>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d003      	beq.n	8009782 <TIM_OC5_SetConfig+0x76>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a14      	ldr	r2, [pc, #80]	; (80097d0 <TIM_OC5_SetConfig+0xc4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d109      	bne.n	8009796 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009788:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	021b      	lsls	r3, r3, #8
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	621a      	str	r2, [r3, #32]
}
 80097b0:	bf00      	nop
 80097b2:	371c      	adds	r7, #28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	fffeff8f 	.word	0xfffeff8f
 80097c0:	40010000 	.word	0x40010000
 80097c4:	40010400 	.word	0x40010400
 80097c8:	40014000 	.word	0x40014000
 80097cc:	40014400 	.word	0x40014400
 80097d0:	40014800 	.word	0x40014800

080097d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4b22      	ldr	r3, [pc, #136]	; (8009888 <TIM_OC6_SetConfig+0xb4>)
 8009800:	4013      	ands	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	4313      	orrs	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	051b      	lsls	r3, r3, #20
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	4313      	orrs	r3, r2
 8009822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a19      	ldr	r2, [pc, #100]	; (800988c <TIM_OC6_SetConfig+0xb8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d00f      	beq.n	800984c <TIM_OC6_SetConfig+0x78>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a18      	ldr	r2, [pc, #96]	; (8009890 <TIM_OC6_SetConfig+0xbc>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d00b      	beq.n	800984c <TIM_OC6_SetConfig+0x78>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a17      	ldr	r2, [pc, #92]	; (8009894 <TIM_OC6_SetConfig+0xc0>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d007      	beq.n	800984c <TIM_OC6_SetConfig+0x78>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a16      	ldr	r2, [pc, #88]	; (8009898 <TIM_OC6_SetConfig+0xc4>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d003      	beq.n	800984c <TIM_OC6_SetConfig+0x78>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a15      	ldr	r2, [pc, #84]	; (800989c <TIM_OC6_SetConfig+0xc8>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d109      	bne.n	8009860 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009852:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	029b      	lsls	r3, r3, #10
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	4313      	orrs	r3, r2
 800985e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	621a      	str	r2, [r3, #32]
}
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	feff8fff 	.word	0xfeff8fff
 800988c:	40010000 	.word	0x40010000
 8009890:	40010400 	.word	0x40010400
 8009894:	40014000 	.word	0x40014000
 8009898:	40014400 	.word	0x40014400
 800989c:	40014800 	.word	0x40014800

080098a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d101      	bne.n	80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098b4:	2302      	movs	r3, #2
 80098b6:	e077      	b.n	80099a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a35      	ldr	r2, [pc, #212]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d004      	beq.n	80098ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a34      	ldr	r2, [pc, #208]	; (80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d108      	bne.n	80098fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009904:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a25      	ldr	r2, [pc, #148]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d02c      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992a:	d027      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a22      	ldr	r2, [pc, #136]	; (80099bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d022      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a21      	ldr	r2, [pc, #132]	; (80099c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d01d      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a1f      	ldr	r2, [pc, #124]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d018      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a1a      	ldr	r2, [pc, #104]	; (80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d013      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a1b      	ldr	r2, [pc, #108]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00e      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a1a      	ldr	r2, [pc, #104]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d009      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a18      	ldr	r2, [pc, #96]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d004      	beq.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a17      	ldr	r2, [pc, #92]	; (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d10c      	bne.n	8009996 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009982:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	4313      	orrs	r3, r2
 800998c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	40010000 	.word	0x40010000
 80099b8:	40010400 	.word	0x40010400
 80099bc:	40000400 	.word	0x40000400
 80099c0:	40000800 	.word	0x40000800
 80099c4:	40000c00 	.word	0x40000c00
 80099c8:	40001800 	.word	0x40001800
 80099cc:	40014000 	.word	0x40014000
 80099d0:	4000e000 	.word	0x4000e000
 80099d4:	4000e400 	.word	0x4000e400

080099d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e073      	b.n	8009adc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	041b      	lsls	r3, r3, #16
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	69db      	ldr	r3, [r3, #28]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a19      	ldr	r2, [pc, #100]	; (8009ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a18      	ldr	r2, [pc, #96]	; (8009aec <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d11c      	bne.n	8009aca <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9a:	051b      	lsls	r3, r3, #20
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	40010000 	.word	0x40010000
 8009aec:	40010400 	.word	0x40010400

08009af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e042      	b.n	8009b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d106      	bne.n	8009b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7f8 fbd7 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2224      	movs	r2, #36	; 0x24
 8009b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f022 0201 	bic.w	r2, r2, #1
 8009b30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 ff22 	bl	800a984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f8b3 	bl	8009cac <UART_SetConfig>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e01b      	b.n	8009b88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0201 	orr.w	r2, r2, #1
 8009b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 ffa1 	bl	800aac8 <UART_CheckIdleState>
 8009b86:	4603      	mov	r3, r0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	; 0x28
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	603b      	str	r3, [r7, #0]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba6:	2b20      	cmp	r3, #32
 8009ba8:	d17b      	bne.n	8009ca2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <HAL_UART_Transmit+0x26>
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e074      	b.n	8009ca4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2221      	movs	r2, #33	; 0x21
 8009bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bca:	f7f8 fd6d 	bl	80026a8 <HAL_GetTick>
 8009bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	88fa      	ldrh	r2, [r7, #6]
 8009bd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	88fa      	ldrh	r2, [r7, #6]
 8009bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009be8:	d108      	bne.n	8009bfc <HAL_UART_Transmit+0x6c>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d104      	bne.n	8009bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	61bb      	str	r3, [r7, #24]
 8009bfa:	e003      	b.n	8009c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c00:	2300      	movs	r3, #0
 8009c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c04:	e030      	b.n	8009c68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2180      	movs	r1, #128	; 0x80
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f001 f803 	bl	800ac1c <UART_WaitOnFlagUntilTimeout>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d005      	beq.n	8009c28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e03d      	b.n	8009ca4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	3302      	adds	r3, #2
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	e007      	b.n	8009c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	3301      	adds	r3, #1
 8009c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1c8      	bne.n	8009c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2140      	movs	r1, #64	; 0x40
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 ffcc 	bl	800ac1c <UART_WaitOnFlagUntilTimeout>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e006      	b.n	8009ca4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e000      	b.n	8009ca4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009ca2:	2302      	movs	r3, #2
  }
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cb0:	b092      	sub	sp, #72	; 0x48
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	431a      	orrs	r2, r3
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4bbe      	ldr	r3, [pc, #760]	; (8009fd4 <UART_SetConfig+0x328>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	6812      	ldr	r2, [r2, #0]
 8009ce2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4ab3      	ldr	r2, [pc, #716]	; (8009fd8 <UART_SetConfig+0x32c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d14:	4313      	orrs	r3, r2
 8009d16:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	4baf      	ldr	r3, [pc, #700]	; (8009fdc <UART_SetConfig+0x330>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	6812      	ldr	r2, [r2, #0]
 8009d26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	f023 010f 	bic.w	r1, r3, #15
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4aa6      	ldr	r2, [pc, #664]	; (8009fe0 <UART_SetConfig+0x334>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d177      	bne.n	8009e3c <UART_SetConfig+0x190>
 8009d4c:	4ba5      	ldr	r3, [pc, #660]	; (8009fe4 <UART_SetConfig+0x338>)
 8009d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d54:	2b28      	cmp	r3, #40	; 0x28
 8009d56:	d86d      	bhi.n	8009e34 <UART_SetConfig+0x188>
 8009d58:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <UART_SetConfig+0xb4>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009e05 	.word	0x08009e05
 8009d64:	08009e35 	.word	0x08009e35
 8009d68:	08009e35 	.word	0x08009e35
 8009d6c:	08009e35 	.word	0x08009e35
 8009d70:	08009e35 	.word	0x08009e35
 8009d74:	08009e35 	.word	0x08009e35
 8009d78:	08009e35 	.word	0x08009e35
 8009d7c:	08009e35 	.word	0x08009e35
 8009d80:	08009e0d 	.word	0x08009e0d
 8009d84:	08009e35 	.word	0x08009e35
 8009d88:	08009e35 	.word	0x08009e35
 8009d8c:	08009e35 	.word	0x08009e35
 8009d90:	08009e35 	.word	0x08009e35
 8009d94:	08009e35 	.word	0x08009e35
 8009d98:	08009e35 	.word	0x08009e35
 8009d9c:	08009e35 	.word	0x08009e35
 8009da0:	08009e15 	.word	0x08009e15
 8009da4:	08009e35 	.word	0x08009e35
 8009da8:	08009e35 	.word	0x08009e35
 8009dac:	08009e35 	.word	0x08009e35
 8009db0:	08009e35 	.word	0x08009e35
 8009db4:	08009e35 	.word	0x08009e35
 8009db8:	08009e35 	.word	0x08009e35
 8009dbc:	08009e35 	.word	0x08009e35
 8009dc0:	08009e1d 	.word	0x08009e1d
 8009dc4:	08009e35 	.word	0x08009e35
 8009dc8:	08009e35 	.word	0x08009e35
 8009dcc:	08009e35 	.word	0x08009e35
 8009dd0:	08009e35 	.word	0x08009e35
 8009dd4:	08009e35 	.word	0x08009e35
 8009dd8:	08009e35 	.word	0x08009e35
 8009ddc:	08009e35 	.word	0x08009e35
 8009de0:	08009e25 	.word	0x08009e25
 8009de4:	08009e35 	.word	0x08009e35
 8009de8:	08009e35 	.word	0x08009e35
 8009dec:	08009e35 	.word	0x08009e35
 8009df0:	08009e35 	.word	0x08009e35
 8009df4:	08009e35 	.word	0x08009e35
 8009df8:	08009e35 	.word	0x08009e35
 8009dfc:	08009e35 	.word	0x08009e35
 8009e00:	08009e2d 	.word	0x08009e2d
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0a:	e326      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e12:	e322      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e14:	2308      	movs	r3, #8
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1a:	e31e      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e22:	e31a      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e24:	2320      	movs	r3, #32
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e316      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e2c:	2340      	movs	r3, #64	; 0x40
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e312      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e34:	2380      	movs	r3, #128	; 0x80
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e30e      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a69      	ldr	r2, [pc, #420]	; (8009fe8 <UART_SetConfig+0x33c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d130      	bne.n	8009ea8 <UART_SetConfig+0x1fc>
 8009e46:	4b67      	ldr	r3, [pc, #412]	; (8009fe4 <UART_SetConfig+0x338>)
 8009e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4a:	f003 0307 	and.w	r3, r3, #7
 8009e4e:	2b05      	cmp	r3, #5
 8009e50:	d826      	bhi.n	8009ea0 <UART_SetConfig+0x1f4>
 8009e52:	a201      	add	r2, pc, #4	; (adr r2, 8009e58 <UART_SetConfig+0x1ac>)
 8009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e58:	08009e71 	.word	0x08009e71
 8009e5c:	08009e79 	.word	0x08009e79
 8009e60:	08009e81 	.word	0x08009e81
 8009e64:	08009e89 	.word	0x08009e89
 8009e68:	08009e91 	.word	0x08009e91
 8009e6c:	08009e99 	.word	0x08009e99
 8009e70:	2300      	movs	r3, #0
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e76:	e2f0      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e78:	2304      	movs	r3, #4
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7e:	e2ec      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e80:	2308      	movs	r3, #8
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e86:	e2e8      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e88:	2310      	movs	r3, #16
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8e:	e2e4      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e90:	2320      	movs	r3, #32
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e2e0      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009e98:	2340      	movs	r3, #64	; 0x40
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e2dc      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009ea0:	2380      	movs	r3, #128	; 0x80
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e2d8      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a4f      	ldr	r2, [pc, #316]	; (8009fec <UART_SetConfig+0x340>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d130      	bne.n	8009f14 <UART_SetConfig+0x268>
 8009eb2:	4b4c      	ldr	r3, [pc, #304]	; (8009fe4 <UART_SetConfig+0x338>)
 8009eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b05      	cmp	r3, #5
 8009ebc:	d826      	bhi.n	8009f0c <UART_SetConfig+0x260>
 8009ebe:	a201      	add	r2, pc, #4	; (adr r2, 8009ec4 <UART_SetConfig+0x218>)
 8009ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec4:	08009edd 	.word	0x08009edd
 8009ec8:	08009ee5 	.word	0x08009ee5
 8009ecc:	08009eed 	.word	0x08009eed
 8009ed0:	08009ef5 	.word	0x08009ef5
 8009ed4:	08009efd 	.word	0x08009efd
 8009ed8:	08009f05 	.word	0x08009f05
 8009edc:	2300      	movs	r3, #0
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e2ba      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e2b6      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009eec:	2308      	movs	r3, #8
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef2:	e2b2      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e2ae      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009efc:	2320      	movs	r3, #32
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e2aa      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f04:	2340      	movs	r3, #64	; 0x40
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e2a6      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f0c:	2380      	movs	r3, #128	; 0x80
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e2a2      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a35      	ldr	r2, [pc, #212]	; (8009ff0 <UART_SetConfig+0x344>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d130      	bne.n	8009f80 <UART_SetConfig+0x2d4>
 8009f1e:	4b31      	ldr	r3, [pc, #196]	; (8009fe4 <UART_SetConfig+0x338>)
 8009f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	2b05      	cmp	r3, #5
 8009f28:	d826      	bhi.n	8009f78 <UART_SetConfig+0x2cc>
 8009f2a:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <UART_SetConfig+0x284>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f49 	.word	0x08009f49
 8009f34:	08009f51 	.word	0x08009f51
 8009f38:	08009f59 	.word	0x08009f59
 8009f3c:	08009f61 	.word	0x08009f61
 8009f40:	08009f69 	.word	0x08009f69
 8009f44:	08009f71 	.word	0x08009f71
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e284      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f50:	2304      	movs	r3, #4
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e280      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f58:	2308      	movs	r3, #8
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5e:	e27c      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f60:	2310      	movs	r3, #16
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f66:	e278      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f68:	2320      	movs	r3, #32
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6e:	e274      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f70:	2340      	movs	r3, #64	; 0x40
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f76:	e270      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f78:	2380      	movs	r3, #128	; 0x80
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7e:	e26c      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1b      	ldr	r2, [pc, #108]	; (8009ff4 <UART_SetConfig+0x348>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d142      	bne.n	800a010 <UART_SetConfig+0x364>
 8009f8a:	4b16      	ldr	r3, [pc, #88]	; (8009fe4 <UART_SetConfig+0x338>)
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8e:	f003 0307 	and.w	r3, r3, #7
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	d838      	bhi.n	800a008 <UART_SetConfig+0x35c>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <UART_SetConfig+0x2f0>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fb5 	.word	0x08009fb5
 8009fa0:	08009fbd 	.word	0x08009fbd
 8009fa4:	08009fc5 	.word	0x08009fc5
 8009fa8:	08009fcd 	.word	0x08009fcd
 8009fac:	08009ff9 	.word	0x08009ff9
 8009fb0:	0800a001 	.word	0x0800a001
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fba:	e24e      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009fbc:	2304      	movs	r3, #4
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc2:	e24a      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009fc4:	2308      	movs	r3, #8
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fca:	e246      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009fcc:	2310      	movs	r3, #16
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd2:	e242      	b.n	800a45a <UART_SetConfig+0x7ae>
 8009fd4:	cfff69f3 	.word	0xcfff69f3
 8009fd8:	58000c00 	.word	0x58000c00
 8009fdc:	11fff4ff 	.word	0x11fff4ff
 8009fe0:	40011000 	.word	0x40011000
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	40004400 	.word	0x40004400
 8009fec:	40004800 	.word	0x40004800
 8009ff0:	40004c00 	.word	0x40004c00
 8009ff4:	40005000 	.word	0x40005000
 8009ff8:	2320      	movs	r3, #32
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffe:	e22c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a000:	2340      	movs	r3, #64	; 0x40
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a006:	e228      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00e:	e224      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4ab1      	ldr	r2, [pc, #708]	; (800a2dc <UART_SetConfig+0x630>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d176      	bne.n	800a108 <UART_SetConfig+0x45c>
 800a01a:	4bb1      	ldr	r3, [pc, #708]	; (800a2e0 <UART_SetConfig+0x634>)
 800a01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a01e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a022:	2b28      	cmp	r3, #40	; 0x28
 800a024:	d86c      	bhi.n	800a100 <UART_SetConfig+0x454>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <UART_SetConfig+0x380>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a0d1 	.word	0x0800a0d1
 800a030:	0800a101 	.word	0x0800a101
 800a034:	0800a101 	.word	0x0800a101
 800a038:	0800a101 	.word	0x0800a101
 800a03c:	0800a101 	.word	0x0800a101
 800a040:	0800a101 	.word	0x0800a101
 800a044:	0800a101 	.word	0x0800a101
 800a048:	0800a101 	.word	0x0800a101
 800a04c:	0800a0d9 	.word	0x0800a0d9
 800a050:	0800a101 	.word	0x0800a101
 800a054:	0800a101 	.word	0x0800a101
 800a058:	0800a101 	.word	0x0800a101
 800a05c:	0800a101 	.word	0x0800a101
 800a060:	0800a101 	.word	0x0800a101
 800a064:	0800a101 	.word	0x0800a101
 800a068:	0800a101 	.word	0x0800a101
 800a06c:	0800a0e1 	.word	0x0800a0e1
 800a070:	0800a101 	.word	0x0800a101
 800a074:	0800a101 	.word	0x0800a101
 800a078:	0800a101 	.word	0x0800a101
 800a07c:	0800a101 	.word	0x0800a101
 800a080:	0800a101 	.word	0x0800a101
 800a084:	0800a101 	.word	0x0800a101
 800a088:	0800a101 	.word	0x0800a101
 800a08c:	0800a0e9 	.word	0x0800a0e9
 800a090:	0800a101 	.word	0x0800a101
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a101 	.word	0x0800a101
 800a09c:	0800a101 	.word	0x0800a101
 800a0a0:	0800a101 	.word	0x0800a101
 800a0a4:	0800a101 	.word	0x0800a101
 800a0a8:	0800a101 	.word	0x0800a101
 800a0ac:	0800a0f1 	.word	0x0800a0f1
 800a0b0:	0800a101 	.word	0x0800a101
 800a0b4:	0800a101 	.word	0x0800a101
 800a0b8:	0800a101 	.word	0x0800a101
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a101 	.word	0x0800a101
 800a0c4:	0800a101 	.word	0x0800a101
 800a0c8:	0800a101 	.word	0x0800a101
 800a0cc:	0800a0f9 	.word	0x0800a0f9
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0d6:	e1c0      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0d8:	2304      	movs	r3, #4
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0de:	e1bc      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0e6:	e1b8      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0e8:	2310      	movs	r3, #16
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ee:	e1b4      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0f0:	2320      	movs	r3, #32
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e1b0      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a0f8:	2340      	movs	r3, #64	; 0x40
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e1ac      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a100:	2380      	movs	r3, #128	; 0x80
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a106:	e1a8      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a75      	ldr	r2, [pc, #468]	; (800a2e4 <UART_SetConfig+0x638>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d130      	bne.n	800a174 <UART_SetConfig+0x4c8>
 800a112:	4b73      	ldr	r3, [pc, #460]	; (800a2e0 <UART_SetConfig+0x634>)
 800a114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	d826      	bhi.n	800a16c <UART_SetConfig+0x4c0>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <UART_SetConfig+0x478>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a13d 	.word	0x0800a13d
 800a128:	0800a145 	.word	0x0800a145
 800a12c:	0800a14d 	.word	0x0800a14d
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a15d 	.word	0x0800a15d
 800a138:	0800a165 	.word	0x0800a165
 800a13c:	2300      	movs	r3, #0
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a142:	e18a      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a144:	2304      	movs	r3, #4
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14a:	e186      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a14c:	2308      	movs	r3, #8
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a152:	e182      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a154:	2310      	movs	r3, #16
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a15a:	e17e      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a15c:	2320      	movs	r3, #32
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a162:	e17a      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a164:	2340      	movs	r3, #64	; 0x40
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16a:	e176      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a16c:	2380      	movs	r3, #128	; 0x80
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a172:	e172      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a5b      	ldr	r2, [pc, #364]	; (800a2e8 <UART_SetConfig+0x63c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d130      	bne.n	800a1e0 <UART_SetConfig+0x534>
 800a17e:	4b58      	ldr	r3, [pc, #352]	; (800a2e0 <UART_SetConfig+0x634>)
 800a180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	2b05      	cmp	r3, #5
 800a188:	d826      	bhi.n	800a1d8 <UART_SetConfig+0x52c>
 800a18a:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <UART_SetConfig+0x4e4>)
 800a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a190:	0800a1a9 	.word	0x0800a1a9
 800a194:	0800a1b1 	.word	0x0800a1b1
 800a198:	0800a1b9 	.word	0x0800a1b9
 800a19c:	0800a1c1 	.word	0x0800a1c1
 800a1a0:	0800a1c9 	.word	0x0800a1c9
 800a1a4:	0800a1d1 	.word	0x0800a1d1
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ae:	e154      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1b0:	2304      	movs	r3, #4
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b6:	e150      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1b8:	2308      	movs	r3, #8
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1be:	e14c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1c0:	2310      	movs	r3, #16
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c6:	e148      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ce:	e144      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1d0:	2340      	movs	r3, #64	; 0x40
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d6:	e140      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1d8:	2380      	movs	r3, #128	; 0x80
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1de:	e13c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a41      	ldr	r2, [pc, #260]	; (800a2ec <UART_SetConfig+0x640>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	f040 8082 	bne.w	800a2f0 <UART_SetConfig+0x644>
 800a1ec:	4b3c      	ldr	r3, [pc, #240]	; (800a2e0 <UART_SetConfig+0x634>)
 800a1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1f4:	2b28      	cmp	r3, #40	; 0x28
 800a1f6:	d86d      	bhi.n	800a2d4 <UART_SetConfig+0x628>
 800a1f8:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <UART_SetConfig+0x554>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a2a5 	.word	0x0800a2a5
 800a204:	0800a2d5 	.word	0x0800a2d5
 800a208:	0800a2d5 	.word	0x0800a2d5
 800a20c:	0800a2d5 	.word	0x0800a2d5
 800a210:	0800a2d5 	.word	0x0800a2d5
 800a214:	0800a2d5 	.word	0x0800a2d5
 800a218:	0800a2d5 	.word	0x0800a2d5
 800a21c:	0800a2d5 	.word	0x0800a2d5
 800a220:	0800a2ad 	.word	0x0800a2ad
 800a224:	0800a2d5 	.word	0x0800a2d5
 800a228:	0800a2d5 	.word	0x0800a2d5
 800a22c:	0800a2d5 	.word	0x0800a2d5
 800a230:	0800a2d5 	.word	0x0800a2d5
 800a234:	0800a2d5 	.word	0x0800a2d5
 800a238:	0800a2d5 	.word	0x0800a2d5
 800a23c:	0800a2d5 	.word	0x0800a2d5
 800a240:	0800a2b5 	.word	0x0800a2b5
 800a244:	0800a2d5 	.word	0x0800a2d5
 800a248:	0800a2d5 	.word	0x0800a2d5
 800a24c:	0800a2d5 	.word	0x0800a2d5
 800a250:	0800a2d5 	.word	0x0800a2d5
 800a254:	0800a2d5 	.word	0x0800a2d5
 800a258:	0800a2d5 	.word	0x0800a2d5
 800a25c:	0800a2d5 	.word	0x0800a2d5
 800a260:	0800a2bd 	.word	0x0800a2bd
 800a264:	0800a2d5 	.word	0x0800a2d5
 800a268:	0800a2d5 	.word	0x0800a2d5
 800a26c:	0800a2d5 	.word	0x0800a2d5
 800a270:	0800a2d5 	.word	0x0800a2d5
 800a274:	0800a2d5 	.word	0x0800a2d5
 800a278:	0800a2d5 	.word	0x0800a2d5
 800a27c:	0800a2d5 	.word	0x0800a2d5
 800a280:	0800a2c5 	.word	0x0800a2c5
 800a284:	0800a2d5 	.word	0x0800a2d5
 800a288:	0800a2d5 	.word	0x0800a2d5
 800a28c:	0800a2d5 	.word	0x0800a2d5
 800a290:	0800a2d5 	.word	0x0800a2d5
 800a294:	0800a2d5 	.word	0x0800a2d5
 800a298:	0800a2d5 	.word	0x0800a2d5
 800a29c:	0800a2d5 	.word	0x0800a2d5
 800a2a0:	0800a2cd 	.word	0x0800a2cd
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e0d6      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e0d2      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e0ce      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2bc:	2310      	movs	r3, #16
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c2:	e0ca      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ca:	e0c6      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2cc:	2340      	movs	r3, #64	; 0x40
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2d2:	e0c2      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2d4:	2380      	movs	r3, #128	; 0x80
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2da:	e0be      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a2dc:	40011400 	.word	0x40011400
 800a2e0:	58024400 	.word	0x58024400
 800a2e4:	40007800 	.word	0x40007800
 800a2e8:	40007c00 	.word	0x40007c00
 800a2ec:	40011800 	.word	0x40011800
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4aad      	ldr	r2, [pc, #692]	; (800a5ac <UART_SetConfig+0x900>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d176      	bne.n	800a3e8 <UART_SetConfig+0x73c>
 800a2fa:	4bad      	ldr	r3, [pc, #692]	; (800a5b0 <UART_SetConfig+0x904>)
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a302:	2b28      	cmp	r3, #40	; 0x28
 800a304:	d86c      	bhi.n	800a3e0 <UART_SetConfig+0x734>
 800a306:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <UART_SetConfig+0x660>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a3b1 	.word	0x0800a3b1
 800a310:	0800a3e1 	.word	0x0800a3e1
 800a314:	0800a3e1 	.word	0x0800a3e1
 800a318:	0800a3e1 	.word	0x0800a3e1
 800a31c:	0800a3e1 	.word	0x0800a3e1
 800a320:	0800a3e1 	.word	0x0800a3e1
 800a324:	0800a3e1 	.word	0x0800a3e1
 800a328:	0800a3e1 	.word	0x0800a3e1
 800a32c:	0800a3b9 	.word	0x0800a3b9
 800a330:	0800a3e1 	.word	0x0800a3e1
 800a334:	0800a3e1 	.word	0x0800a3e1
 800a338:	0800a3e1 	.word	0x0800a3e1
 800a33c:	0800a3e1 	.word	0x0800a3e1
 800a340:	0800a3e1 	.word	0x0800a3e1
 800a344:	0800a3e1 	.word	0x0800a3e1
 800a348:	0800a3e1 	.word	0x0800a3e1
 800a34c:	0800a3c1 	.word	0x0800a3c1
 800a350:	0800a3e1 	.word	0x0800a3e1
 800a354:	0800a3e1 	.word	0x0800a3e1
 800a358:	0800a3e1 	.word	0x0800a3e1
 800a35c:	0800a3e1 	.word	0x0800a3e1
 800a360:	0800a3e1 	.word	0x0800a3e1
 800a364:	0800a3e1 	.word	0x0800a3e1
 800a368:	0800a3e1 	.word	0x0800a3e1
 800a36c:	0800a3c9 	.word	0x0800a3c9
 800a370:	0800a3e1 	.word	0x0800a3e1
 800a374:	0800a3e1 	.word	0x0800a3e1
 800a378:	0800a3e1 	.word	0x0800a3e1
 800a37c:	0800a3e1 	.word	0x0800a3e1
 800a380:	0800a3e1 	.word	0x0800a3e1
 800a384:	0800a3e1 	.word	0x0800a3e1
 800a388:	0800a3e1 	.word	0x0800a3e1
 800a38c:	0800a3d1 	.word	0x0800a3d1
 800a390:	0800a3e1 	.word	0x0800a3e1
 800a394:	0800a3e1 	.word	0x0800a3e1
 800a398:	0800a3e1 	.word	0x0800a3e1
 800a39c:	0800a3e1 	.word	0x0800a3e1
 800a3a0:	0800a3e1 	.word	0x0800a3e1
 800a3a4:	0800a3e1 	.word	0x0800a3e1
 800a3a8:	0800a3e1 	.word	0x0800a3e1
 800a3ac:	0800a3d9 	.word	0x0800a3d9
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b6:	e050      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3be:	e04c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3c0:	2308      	movs	r3, #8
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3c6:	e048      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ce:	e044      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3d0:	2320      	movs	r3, #32
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d6:	e040      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3d8:	2340      	movs	r3, #64	; 0x40
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3de:	e03c      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3e0:	2380      	movs	r3, #128	; 0x80
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e6:	e038      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a71      	ldr	r2, [pc, #452]	; (800a5b4 <UART_SetConfig+0x908>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d130      	bne.n	800a454 <UART_SetConfig+0x7a8>
 800a3f2:	4b6f      	ldr	r3, [pc, #444]	; (800a5b0 <UART_SetConfig+0x904>)
 800a3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	d826      	bhi.n	800a44c <UART_SetConfig+0x7a0>
 800a3fe:	a201      	add	r2, pc, #4	; (adr r2, 800a404 <UART_SetConfig+0x758>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a41d 	.word	0x0800a41d
 800a408:	0800a425 	.word	0x0800a425
 800a40c:	0800a42d 	.word	0x0800a42d
 800a410:	0800a435 	.word	0x0800a435
 800a414:	0800a43d 	.word	0x0800a43d
 800a418:	0800a445 	.word	0x0800a445
 800a41c:	2302      	movs	r3, #2
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a422:	e01a      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a424:	2304      	movs	r3, #4
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a42a:	e016      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a42c:	2308      	movs	r3, #8
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a432:	e012      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a434:	2310      	movs	r3, #16
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a43a:	e00e      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a43c:	2320      	movs	r3, #32
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a442:	e00a      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a444:	2340      	movs	r3, #64	; 0x40
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44a:	e006      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a44c:	2380      	movs	r3, #128	; 0x80
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e002      	b.n	800a45a <UART_SetConfig+0x7ae>
 800a454:	2380      	movs	r3, #128	; 0x80
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a55      	ldr	r2, [pc, #340]	; (800a5b4 <UART_SetConfig+0x908>)
 800a460:	4293      	cmp	r3, r2
 800a462:	f040 80f8 	bne.w	800a656 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a466:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	dc46      	bgt.n	800a4fc <UART_SetConfig+0x850>
 800a46e:	2b02      	cmp	r3, #2
 800a470:	db75      	blt.n	800a55e <UART_SetConfig+0x8b2>
 800a472:	3b02      	subs	r3, #2
 800a474:	2b1e      	cmp	r3, #30
 800a476:	d872      	bhi.n	800a55e <UART_SetConfig+0x8b2>
 800a478:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <UART_SetConfig+0x7d4>)
 800a47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47e:	bf00      	nop
 800a480:	0800a503 	.word	0x0800a503
 800a484:	0800a55f 	.word	0x0800a55f
 800a488:	0800a50b 	.word	0x0800a50b
 800a48c:	0800a55f 	.word	0x0800a55f
 800a490:	0800a55f 	.word	0x0800a55f
 800a494:	0800a55f 	.word	0x0800a55f
 800a498:	0800a51b 	.word	0x0800a51b
 800a49c:	0800a55f 	.word	0x0800a55f
 800a4a0:	0800a55f 	.word	0x0800a55f
 800a4a4:	0800a55f 	.word	0x0800a55f
 800a4a8:	0800a55f 	.word	0x0800a55f
 800a4ac:	0800a55f 	.word	0x0800a55f
 800a4b0:	0800a55f 	.word	0x0800a55f
 800a4b4:	0800a55f 	.word	0x0800a55f
 800a4b8:	0800a52b 	.word	0x0800a52b
 800a4bc:	0800a55f 	.word	0x0800a55f
 800a4c0:	0800a55f 	.word	0x0800a55f
 800a4c4:	0800a55f 	.word	0x0800a55f
 800a4c8:	0800a55f 	.word	0x0800a55f
 800a4cc:	0800a55f 	.word	0x0800a55f
 800a4d0:	0800a55f 	.word	0x0800a55f
 800a4d4:	0800a55f 	.word	0x0800a55f
 800a4d8:	0800a55f 	.word	0x0800a55f
 800a4dc:	0800a55f 	.word	0x0800a55f
 800a4e0:	0800a55f 	.word	0x0800a55f
 800a4e4:	0800a55f 	.word	0x0800a55f
 800a4e8:	0800a55f 	.word	0x0800a55f
 800a4ec:	0800a55f 	.word	0x0800a55f
 800a4f0:	0800a55f 	.word	0x0800a55f
 800a4f4:	0800a55f 	.word	0x0800a55f
 800a4f8:	0800a551 	.word	0x0800a551
 800a4fc:	2b40      	cmp	r3, #64	; 0x40
 800a4fe:	d02a      	beq.n	800a556 <UART_SetConfig+0x8aa>
 800a500:	e02d      	b.n	800a55e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a502:	f7fd ff65 	bl	80083d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a508:	e02f      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fd ff74 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a518:	e027      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a51a:	f107 0318 	add.w	r3, r7, #24
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe f8c0 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a528:	e01f      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a52a:	4b21      	ldr	r3, [pc, #132]	; (800a5b0 <UART_SetConfig+0x904>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d009      	beq.n	800a54a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a536:	4b1e      	ldr	r3, [pc, #120]	; (800a5b0 <UART_SetConfig+0x904>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	08db      	lsrs	r3, r3, #3
 800a53c:	f003 0303 	and.w	r3, r3, #3
 800a540:	4a1d      	ldr	r2, [pc, #116]	; (800a5b8 <UART_SetConfig+0x90c>)
 800a542:	fa22 f303 	lsr.w	r3, r2, r3
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a548:	e00f      	b.n	800a56a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a54a:	4b1b      	ldr	r3, [pc, #108]	; (800a5b8 <UART_SetConfig+0x90c>)
 800a54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a54e:	e00c      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a550:	4b1a      	ldr	r3, [pc, #104]	; (800a5bc <UART_SetConfig+0x910>)
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a554:	e009      	b.n	800a56a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a55c:	e005      	b.n	800a56a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 81ee 	beq.w	800a94e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	4a12      	ldr	r2, [pc, #72]	; (800a5c0 <UART_SetConfig+0x914>)
 800a578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a580:	fbb3 f3f2 	udiv	r3, r3, r2
 800a584:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	4613      	mov	r3, r2
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	4413      	add	r3, r2
 800a590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a592:	429a      	cmp	r2, r3
 800a594:	d305      	bcc.n	800a5a2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d910      	bls.n	800a5c4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5a8:	e1d1      	b.n	800a94e <UART_SetConfig+0xca2>
 800a5aa:	bf00      	nop
 800a5ac:	40011c00 	.word	0x40011c00
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	58000c00 	.word	0x58000c00
 800a5b8:	03d09000 	.word	0x03d09000
 800a5bc:	003d0900 	.word	0x003d0900
 800a5c0:	0800bc14 	.word	0x0800bc14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
 800a5ca:	60fa      	str	r2, [r7, #12]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	4ac0      	ldr	r2, [pc, #768]	; (800a8d4 <UART_SetConfig+0xc28>)
 800a5d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2200      	movs	r2, #0
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5e6:	f7f5 feeb 	bl	80003c0 <__aeabi_uldivmod>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f04f 0200 	mov.w	r2, #0
 800a5f6:	f04f 0300 	mov.w	r3, #0
 800a5fa:	020b      	lsls	r3, r1, #8
 800a5fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a600:	0202      	lsls	r2, r0, #8
 800a602:	6979      	ldr	r1, [r7, #20]
 800a604:	6849      	ldr	r1, [r1, #4]
 800a606:	0849      	lsrs	r1, r1, #1
 800a608:	2000      	movs	r0, #0
 800a60a:	460c      	mov	r4, r1
 800a60c:	4605      	mov	r5, r0
 800a60e:	eb12 0804 	adds.w	r8, r2, r4
 800a612:	eb43 0905 	adc.w	r9, r3, r5
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	469a      	mov	sl, r3
 800a61e:	4693      	mov	fp, r2
 800a620:	4652      	mov	r2, sl
 800a622:	465b      	mov	r3, fp
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f5 feca 	bl	80003c0 <__aeabi_uldivmod>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4613      	mov	r3, r2
 800a632:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63a:	d308      	bcc.n	800a64e <UART_SetConfig+0x9a2>
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a642:	d204      	bcs.n	800a64e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a64a:	60da      	str	r2, [r3, #12]
 800a64c:	e17f      	b.n	800a94e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a654:	e17b      	b.n	800a94e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65e:	f040 80bd 	bne.w	800a7dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a662:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a666:	2b20      	cmp	r3, #32
 800a668:	dc48      	bgt.n	800a6fc <UART_SetConfig+0xa50>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	db7b      	blt.n	800a766 <UART_SetConfig+0xaba>
 800a66e:	2b20      	cmp	r3, #32
 800a670:	d879      	bhi.n	800a766 <UART_SetConfig+0xaba>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0x9cc>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a703 	.word	0x0800a703
 800a67c:	0800a70b 	.word	0x0800a70b
 800a680:	0800a767 	.word	0x0800a767
 800a684:	0800a767 	.word	0x0800a767
 800a688:	0800a713 	.word	0x0800a713
 800a68c:	0800a767 	.word	0x0800a767
 800a690:	0800a767 	.word	0x0800a767
 800a694:	0800a767 	.word	0x0800a767
 800a698:	0800a723 	.word	0x0800a723
 800a69c:	0800a767 	.word	0x0800a767
 800a6a0:	0800a767 	.word	0x0800a767
 800a6a4:	0800a767 	.word	0x0800a767
 800a6a8:	0800a767 	.word	0x0800a767
 800a6ac:	0800a767 	.word	0x0800a767
 800a6b0:	0800a767 	.word	0x0800a767
 800a6b4:	0800a767 	.word	0x0800a767
 800a6b8:	0800a733 	.word	0x0800a733
 800a6bc:	0800a767 	.word	0x0800a767
 800a6c0:	0800a767 	.word	0x0800a767
 800a6c4:	0800a767 	.word	0x0800a767
 800a6c8:	0800a767 	.word	0x0800a767
 800a6cc:	0800a767 	.word	0x0800a767
 800a6d0:	0800a767 	.word	0x0800a767
 800a6d4:	0800a767 	.word	0x0800a767
 800a6d8:	0800a767 	.word	0x0800a767
 800a6dc:	0800a767 	.word	0x0800a767
 800a6e0:	0800a767 	.word	0x0800a767
 800a6e4:	0800a767 	.word	0x0800a767
 800a6e8:	0800a767 	.word	0x0800a767
 800a6ec:	0800a767 	.word	0x0800a767
 800a6f0:	0800a767 	.word	0x0800a767
 800a6f4:	0800a767 	.word	0x0800a767
 800a6f8:	0800a759 	.word	0x0800a759
 800a6fc:	2b40      	cmp	r3, #64	; 0x40
 800a6fe:	d02e      	beq.n	800a75e <UART_SetConfig+0xab2>
 800a700:	e031      	b.n	800a766 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a702:	f7fb ffc7 	bl	8006694 <HAL_RCC_GetPCLK1Freq>
 800a706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a708:	e033      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a70a:	f7fb ffd9 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 800a70e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a710:	e02f      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a716:	4618      	mov	r0, r3
 800a718:	f7fd fe70 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a720:	e027      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a722:	f107 0318 	add.w	r3, r7, #24
 800a726:	4618      	mov	r0, r3
 800a728:	f7fd ffbc 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a730:	e01f      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a732:	4b69      	ldr	r3, [pc, #420]	; (800a8d8 <UART_SetConfig+0xc2c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0320 	and.w	r3, r3, #32
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d009      	beq.n	800a752 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a73e:	4b66      	ldr	r3, [pc, #408]	; (800a8d8 <UART_SetConfig+0xc2c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	08db      	lsrs	r3, r3, #3
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	4a64      	ldr	r2, [pc, #400]	; (800a8dc <UART_SetConfig+0xc30>)
 800a74a:	fa22 f303 	lsr.w	r3, r2, r3
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a750:	e00f      	b.n	800a772 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a752:	4b62      	ldr	r3, [pc, #392]	; (800a8dc <UART_SetConfig+0xc30>)
 800a754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a756:	e00c      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a758:	4b61      	ldr	r3, [pc, #388]	; (800a8e0 <UART_SetConfig+0xc34>)
 800a75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a75c:	e009      	b.n	800a772 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a75e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a764:	e005      	b.n	800a772 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 80ea 	beq.w	800a94e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	4a55      	ldr	r2, [pc, #340]	; (800a8d4 <UART_SetConfig+0xc28>)
 800a780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a784:	461a      	mov	r2, r3
 800a786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a788:	fbb3 f3f2 	udiv	r3, r3, r2
 800a78c:	005a      	lsls	r2, r3, #1
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	441a      	add	r2, r3
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	2b0f      	cmp	r3, #15
 800a7a4:	d916      	bls.n	800a7d4 <UART_SetConfig+0xb28>
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ac:	d212      	bcs.n	800a7d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	f023 030f 	bic.w	r3, r3, #15
 800a7b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	085b      	lsrs	r3, r3, #1
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f003 0307 	and.w	r3, r3, #7
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a7d0:	60da      	str	r2, [r3, #12]
 800a7d2:	e0bc      	b.n	800a94e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a7da:	e0b8      	b.n	800a94e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7e0:	2b20      	cmp	r3, #32
 800a7e2:	dc4b      	bgt.n	800a87c <UART_SetConfig+0xbd0>
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f2c0 8087 	blt.w	800a8f8 <UART_SetConfig+0xc4c>
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	f200 8084 	bhi.w	800a8f8 <UART_SetConfig+0xc4c>
 800a7f0:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <UART_SetConfig+0xb4c>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a883 	.word	0x0800a883
 800a7fc:	0800a88b 	.word	0x0800a88b
 800a800:	0800a8f9 	.word	0x0800a8f9
 800a804:	0800a8f9 	.word	0x0800a8f9
 800a808:	0800a893 	.word	0x0800a893
 800a80c:	0800a8f9 	.word	0x0800a8f9
 800a810:	0800a8f9 	.word	0x0800a8f9
 800a814:	0800a8f9 	.word	0x0800a8f9
 800a818:	0800a8a3 	.word	0x0800a8a3
 800a81c:	0800a8f9 	.word	0x0800a8f9
 800a820:	0800a8f9 	.word	0x0800a8f9
 800a824:	0800a8f9 	.word	0x0800a8f9
 800a828:	0800a8f9 	.word	0x0800a8f9
 800a82c:	0800a8f9 	.word	0x0800a8f9
 800a830:	0800a8f9 	.word	0x0800a8f9
 800a834:	0800a8f9 	.word	0x0800a8f9
 800a838:	0800a8b3 	.word	0x0800a8b3
 800a83c:	0800a8f9 	.word	0x0800a8f9
 800a840:	0800a8f9 	.word	0x0800a8f9
 800a844:	0800a8f9 	.word	0x0800a8f9
 800a848:	0800a8f9 	.word	0x0800a8f9
 800a84c:	0800a8f9 	.word	0x0800a8f9
 800a850:	0800a8f9 	.word	0x0800a8f9
 800a854:	0800a8f9 	.word	0x0800a8f9
 800a858:	0800a8f9 	.word	0x0800a8f9
 800a85c:	0800a8f9 	.word	0x0800a8f9
 800a860:	0800a8f9 	.word	0x0800a8f9
 800a864:	0800a8f9 	.word	0x0800a8f9
 800a868:	0800a8f9 	.word	0x0800a8f9
 800a86c:	0800a8f9 	.word	0x0800a8f9
 800a870:	0800a8f9 	.word	0x0800a8f9
 800a874:	0800a8f9 	.word	0x0800a8f9
 800a878:	0800a8eb 	.word	0x0800a8eb
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d037      	beq.n	800a8f0 <UART_SetConfig+0xc44>
 800a880:	e03a      	b.n	800a8f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a882:	f7fb ff07 	bl	8006694 <HAL_RCC_GetPCLK1Freq>
 800a886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a888:	e03c      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a88a:	f7fb ff19 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 800a88e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a890:	e038      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a896:	4618      	mov	r0, r3
 800a898:	f7fd fdb0 	bl	80083fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8a0:	e030      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8a2:	f107 0318 	add.w	r3, r7, #24
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fd fefc 	bl	80086a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8b0:	e028      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8b2:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <UART_SetConfig+0xc2c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d012      	beq.n	800a8e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8be:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <UART_SetConfig+0xc2c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	08db      	lsrs	r3, r3, #3
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <UART_SetConfig+0xc30>)
 800a8ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8d0:	e018      	b.n	800a904 <UART_SetConfig+0xc58>
 800a8d2:	bf00      	nop
 800a8d4:	0800bc14 	.word	0x0800bc14
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	03d09000 	.word	0x03d09000
 800a8e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a8e4:	4b24      	ldr	r3, [pc, #144]	; (800a978 <UART_SetConfig+0xccc>)
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e8:	e00c      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8ea:	4b24      	ldr	r3, [pc, #144]	; (800a97c <UART_SetConfig+0xcd0>)
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ee:	e009      	b.n	800a904 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f6:	e005      	b.n	800a904 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a902:	bf00      	nop
    }

    if (pclk != 0U)
 800a904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d021      	beq.n	800a94e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	4a1c      	ldr	r2, [pc, #112]	; (800a980 <UART_SetConfig+0xcd4>)
 800a910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a914:	461a      	mov	r2, r3
 800a916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a918:	fbb3 f2f2 	udiv	r2, r3, r2
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	085b      	lsrs	r3, r3, #1
 800a922:	441a      	add	r2, r3
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a930:	2b0f      	cmp	r3, #15
 800a932:	d909      	bls.n	800a948 <UART_SetConfig+0xc9c>
 800a934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a93a:	d205      	bcs.n	800a948 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	b29a      	uxth	r2, r3
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	60da      	str	r2, [r3, #12]
 800a946:	e002      	b.n	800a94e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2201      	movs	r2, #1
 800a952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2201      	movs	r2, #1
 800a95a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2200      	movs	r2, #0
 800a962:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2200      	movs	r2, #0
 800a968:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a96a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3748      	adds	r7, #72	; 0x48
 800a972:	46bd      	mov	sp, r7
 800a974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a978:	03d09000 	.word	0x03d09000
 800a97c:	003d0900 	.word	0x003d0900
 800a980:	0800bc14 	.word	0x0800bc14

0800a984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a990:	f003 0308 	and.w	r3, r3, #8
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00a      	beq.n	800a9ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f6:	f003 0304 	and.w	r3, r3, #4
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00a      	beq.n	800aa36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	430a      	orrs	r2, r1
 800aa34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3a:	f003 0320 	and.w	r3, r3, #32
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d01a      	beq.n	800aa9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa82:	d10a      	bne.n	800aa9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00a      	beq.n	800aabc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	605a      	str	r2, [r3, #4]
  }
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b098      	sub	sp, #96	; 0x60
 800aacc:	af02      	add	r7, sp, #8
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aad8:	f7f7 fde6 	bl	80026a8 <HAL_GetTick>
 800aadc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0308 	and.w	r3, r3, #8
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d12f      	bne.n	800ab4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f88e 	bl	800ac1c <UART_WaitOnFlagUntilTimeout>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d022      	beq.n	800ab4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab1a:	653b      	str	r3, [r7, #80]	; 0x50
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab24:	647b      	str	r3, [r7, #68]	; 0x44
 800ab26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e6      	bne.n	800ab06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2220      	movs	r2, #32
 800ab3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e063      	b.n	800ac14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0304 	and.w	r3, r3, #4
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d149      	bne.n	800abee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab62:	2200      	movs	r2, #0
 800ab64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f857 	bl	800ac1c <UART_WaitOnFlagUntilTimeout>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d03c      	beq.n	800abee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	623b      	str	r3, [r7, #32]
   return(result);
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab92:	633b      	str	r3, [r7, #48]	; 0x30
 800ab94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e6      	bne.n	800ab74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3308      	adds	r3, #8
 800abac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f023 0301 	bic.w	r3, r3, #1
 800abbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3308      	adds	r3, #8
 800abc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abc6:	61fa      	str	r2, [r7, #28]
 800abc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abca:	69b9      	ldr	r1, [r7, #24]
 800abcc:	69fa      	ldr	r2, [r7, #28]
 800abce:	e841 2300 	strex	r3, r2, [r1]
 800abd2:	617b      	str	r3, [r7, #20]
   return(result);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e5      	bne.n	800aba6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2220      	movs	r2, #32
 800abde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e012      	b.n	800ac14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2220      	movs	r2, #32
 800abf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3758      	adds	r7, #88	; 0x58
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	603b      	str	r3, [r7, #0]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac2c:	e04f      	b.n	800acce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d04b      	beq.n	800acce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac36:	f7f7 fd37 	bl	80026a8 <HAL_GetTick>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d302      	bcc.n	800ac4c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e04e      	b.n	800acee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d037      	beq.n	800acce <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b80      	cmp	r3, #128	; 0x80
 800ac62:	d034      	beq.n	800acce <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2b40      	cmp	r3, #64	; 0x40
 800ac68:	d031      	beq.n	800acce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	f003 0308 	and.w	r3, r3, #8
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d110      	bne.n	800ac9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2208      	movs	r2, #8
 800ac7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f839 	bl	800acf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2208      	movs	r2, #8
 800ac8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e029      	b.n	800acee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aca8:	d111      	bne.n	800acce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 f81f 	bl	800acf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2220      	movs	r2, #32
 800acbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e00f      	b.n	800acee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69da      	ldr	r2, [r3, #28]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	4013      	ands	r3, r2
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	429a      	cmp	r2, r3
 800acdc:	bf0c      	ite	eq
 800acde:	2301      	moveq	r3, #1
 800ace0:	2300      	movne	r3, #0
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	461a      	mov	r2, r3
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d0a0      	beq.n	800ac2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b095      	sub	sp, #84	; 0x54
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad08:	e853 3f00 	ldrex	r3, [r3]
 800ad0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad1e:	643b      	str	r3, [r7, #64]	; 0x40
 800ad20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e6      	bne.n	800ad00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3308      	adds	r3, #8
 800ad38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	4b1e      	ldr	r3, [pc, #120]	; (800adc0 <UART_EndRxTransfer+0xc8>)
 800ad46:	4013      	ands	r3, r2
 800ad48:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	3308      	adds	r3, #8
 800ad50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e5      	bne.n	800ad32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d118      	bne.n	800ada0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f023 0310 	bic.w	r3, r3, #16
 800ad82:	647b      	str	r3, [r7, #68]	; 0x44
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad8c:	61bb      	str	r3, [r7, #24]
 800ad8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	6979      	ldr	r1, [r7, #20]
 800ad92:	69ba      	ldr	r2, [r7, #24]
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	613b      	str	r3, [r7, #16]
   return(result);
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e6      	bne.n	800ad6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2220      	movs	r2, #32
 800ada4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800adb4:	bf00      	nop
 800adb6:	3754      	adds	r7, #84	; 0x54
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	effffffe 	.word	0xeffffffe

0800adc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800add2:	2b01      	cmp	r3, #1
 800add4:	d101      	bne.n	800adda <HAL_UARTEx_DisableFifoMode+0x16>
 800add6:	2302      	movs	r3, #2
 800add8:	e027      	b.n	800ae2a <HAL_UARTEx_DisableFifoMode+0x66>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2224      	movs	r2, #36	; 0x24
 800ade6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f022 0201 	bic.w	r2, r2, #1
 800ae00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d101      	bne.n	800ae4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e02d      	b.n	800aeaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2224      	movs	r2, #36	; 0x24
 800ae5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f022 0201 	bic.w	r2, r2, #1
 800ae74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	430a      	orrs	r2, r1
 800ae88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f850 	bl	800af30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e02d      	b.n	800af26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2224      	movs	r2, #36	; 0x24
 800aed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f022 0201 	bic.w	r2, r2, #1
 800aef0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f812 	bl	800af30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2220      	movs	r2, #32
 800af18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d108      	bne.n	800af52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af50:	e031      	b.n	800afb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af52:	2310      	movs	r3, #16
 800af54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af56:	2310      	movs	r3, #16
 800af58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	0e5b      	lsrs	r3, r3, #25
 800af62:	b2db      	uxtb	r3, r3
 800af64:	f003 0307 	and.w	r3, r3, #7
 800af68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	0f5b      	lsrs	r3, r3, #29
 800af72:	b2db      	uxtb	r3, r3
 800af74:	f003 0307 	and.w	r3, r3, #7
 800af78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	7b3a      	ldrb	r2, [r7, #12]
 800af7e:	4911      	ldr	r1, [pc, #68]	; (800afc4 <UARTEx_SetNbDataToProcess+0x94>)
 800af80:	5c8a      	ldrb	r2, [r1, r2]
 800af82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af86:	7b3a      	ldrb	r2, [r7, #12]
 800af88:	490f      	ldr	r1, [pc, #60]	; (800afc8 <UARTEx_SetNbDataToProcess+0x98>)
 800af8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af90:	b29a      	uxth	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	7b7a      	ldrb	r2, [r7, #13]
 800af9c:	4909      	ldr	r1, [pc, #36]	; (800afc4 <UARTEx_SetNbDataToProcess+0x94>)
 800af9e:	5c8a      	ldrb	r2, [r1, r2]
 800afa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800afa4:	7b7a      	ldrb	r2, [r7, #13]
 800afa6:	4908      	ldr	r1, [pc, #32]	; (800afc8 <UARTEx_SetNbDataToProcess+0x98>)
 800afa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	0800bc2c 	.word	0x0800bc2c
 800afc8:	0800bc34 	.word	0x0800bc34

0800afcc <siprintf>:
 800afcc:	b40e      	push	{r1, r2, r3}
 800afce:	b500      	push	{lr}
 800afd0:	b09c      	sub	sp, #112	; 0x70
 800afd2:	ab1d      	add	r3, sp, #116	; 0x74
 800afd4:	9002      	str	r0, [sp, #8]
 800afd6:	9006      	str	r0, [sp, #24]
 800afd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afdc:	4809      	ldr	r0, [pc, #36]	; (800b004 <siprintf+0x38>)
 800afde:	9107      	str	r1, [sp, #28]
 800afe0:	9104      	str	r1, [sp, #16]
 800afe2:	4909      	ldr	r1, [pc, #36]	; (800b008 <siprintf+0x3c>)
 800afe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe8:	9105      	str	r1, [sp, #20]
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	a902      	add	r1, sp, #8
 800aff0:	f000 f9a0 	bl	800b334 <_svfiprintf_r>
 800aff4:	9b02      	ldr	r3, [sp, #8]
 800aff6:	2200      	movs	r2, #0
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	b01c      	add	sp, #112	; 0x70
 800affc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b000:	b003      	add	sp, #12
 800b002:	4770      	bx	lr
 800b004:	24000098 	.word	0x24000098
 800b008:	ffff0208 	.word	0xffff0208

0800b00c <memset>:
 800b00c:	4402      	add	r2, r0
 800b00e:	4603      	mov	r3, r0
 800b010:	4293      	cmp	r3, r2
 800b012:	d100      	bne.n	800b016 <memset+0xa>
 800b014:	4770      	bx	lr
 800b016:	f803 1b01 	strb.w	r1, [r3], #1
 800b01a:	e7f9      	b.n	800b010 <memset+0x4>

0800b01c <__errno>:
 800b01c:	4b01      	ldr	r3, [pc, #4]	; (800b024 <__errno+0x8>)
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	24000098 	.word	0x24000098

0800b028 <__libc_init_array>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	4d0d      	ldr	r5, [pc, #52]	; (800b060 <__libc_init_array+0x38>)
 800b02c:	4c0d      	ldr	r4, [pc, #52]	; (800b064 <__libc_init_array+0x3c>)
 800b02e:	1b64      	subs	r4, r4, r5
 800b030:	10a4      	asrs	r4, r4, #2
 800b032:	2600      	movs	r6, #0
 800b034:	42a6      	cmp	r6, r4
 800b036:	d109      	bne.n	800b04c <__libc_init_array+0x24>
 800b038:	4d0b      	ldr	r5, [pc, #44]	; (800b068 <__libc_init_array+0x40>)
 800b03a:	4c0c      	ldr	r4, [pc, #48]	; (800b06c <__libc_init_array+0x44>)
 800b03c:	f000 fc6a 	bl	800b914 <_init>
 800b040:	1b64      	subs	r4, r4, r5
 800b042:	10a4      	asrs	r4, r4, #2
 800b044:	2600      	movs	r6, #0
 800b046:	42a6      	cmp	r6, r4
 800b048:	d105      	bne.n	800b056 <__libc_init_array+0x2e>
 800b04a:	bd70      	pop	{r4, r5, r6, pc}
 800b04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b050:	4798      	blx	r3
 800b052:	3601      	adds	r6, #1
 800b054:	e7ee      	b.n	800b034 <__libc_init_array+0xc>
 800b056:	f855 3b04 	ldr.w	r3, [r5], #4
 800b05a:	4798      	blx	r3
 800b05c:	3601      	adds	r6, #1
 800b05e:	e7f2      	b.n	800b046 <__libc_init_array+0x1e>
 800b060:	0800bc78 	.word	0x0800bc78
 800b064:	0800bc78 	.word	0x0800bc78
 800b068:	0800bc78 	.word	0x0800bc78
 800b06c:	0800bc7c 	.word	0x0800bc7c

0800b070 <__retarget_lock_acquire_recursive>:
 800b070:	4770      	bx	lr

0800b072 <__retarget_lock_release_recursive>:
 800b072:	4770      	bx	lr

0800b074 <memcpy>:
 800b074:	440a      	add	r2, r1
 800b076:	4291      	cmp	r1, r2
 800b078:	f100 33ff 	add.w	r3, r0, #4294967295
 800b07c:	d100      	bne.n	800b080 <memcpy+0xc>
 800b07e:	4770      	bx	lr
 800b080:	b510      	push	{r4, lr}
 800b082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b08a:	4291      	cmp	r1, r2
 800b08c:	d1f9      	bne.n	800b082 <memcpy+0xe>
 800b08e:	bd10      	pop	{r4, pc}

0800b090 <_free_r>:
 800b090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b092:	2900      	cmp	r1, #0
 800b094:	d044      	beq.n	800b120 <_free_r+0x90>
 800b096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09a:	9001      	str	r0, [sp, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f1a1 0404 	sub.w	r4, r1, #4
 800b0a2:	bfb8      	it	lt
 800b0a4:	18e4      	addlt	r4, r4, r3
 800b0a6:	f000 f8df 	bl	800b268 <__malloc_lock>
 800b0aa:	4a1e      	ldr	r2, [pc, #120]	; (800b124 <_free_r+0x94>)
 800b0ac:	9801      	ldr	r0, [sp, #4]
 800b0ae:	6813      	ldr	r3, [r2, #0]
 800b0b0:	b933      	cbnz	r3, 800b0c0 <_free_r+0x30>
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	6014      	str	r4, [r2, #0]
 800b0b6:	b003      	add	sp, #12
 800b0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0bc:	f000 b8da 	b.w	800b274 <__malloc_unlock>
 800b0c0:	42a3      	cmp	r3, r4
 800b0c2:	d908      	bls.n	800b0d6 <_free_r+0x46>
 800b0c4:	6825      	ldr	r5, [r4, #0]
 800b0c6:	1961      	adds	r1, r4, r5
 800b0c8:	428b      	cmp	r3, r1
 800b0ca:	bf01      	itttt	eq
 800b0cc:	6819      	ldreq	r1, [r3, #0]
 800b0ce:	685b      	ldreq	r3, [r3, #4]
 800b0d0:	1949      	addeq	r1, r1, r5
 800b0d2:	6021      	streq	r1, [r4, #0]
 800b0d4:	e7ed      	b.n	800b0b2 <_free_r+0x22>
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	b10b      	cbz	r3, 800b0e0 <_free_r+0x50>
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	d9fa      	bls.n	800b0d6 <_free_r+0x46>
 800b0e0:	6811      	ldr	r1, [r2, #0]
 800b0e2:	1855      	adds	r5, r2, r1
 800b0e4:	42a5      	cmp	r5, r4
 800b0e6:	d10b      	bne.n	800b100 <_free_r+0x70>
 800b0e8:	6824      	ldr	r4, [r4, #0]
 800b0ea:	4421      	add	r1, r4
 800b0ec:	1854      	adds	r4, r2, r1
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	6011      	str	r1, [r2, #0]
 800b0f2:	d1e0      	bne.n	800b0b6 <_free_r+0x26>
 800b0f4:	681c      	ldr	r4, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	6053      	str	r3, [r2, #4]
 800b0fa:	440c      	add	r4, r1
 800b0fc:	6014      	str	r4, [r2, #0]
 800b0fe:	e7da      	b.n	800b0b6 <_free_r+0x26>
 800b100:	d902      	bls.n	800b108 <_free_r+0x78>
 800b102:	230c      	movs	r3, #12
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	e7d6      	b.n	800b0b6 <_free_r+0x26>
 800b108:	6825      	ldr	r5, [r4, #0]
 800b10a:	1961      	adds	r1, r4, r5
 800b10c:	428b      	cmp	r3, r1
 800b10e:	bf04      	itt	eq
 800b110:	6819      	ldreq	r1, [r3, #0]
 800b112:	685b      	ldreq	r3, [r3, #4]
 800b114:	6063      	str	r3, [r4, #4]
 800b116:	bf04      	itt	eq
 800b118:	1949      	addeq	r1, r1, r5
 800b11a:	6021      	streq	r1, [r4, #0]
 800b11c:	6054      	str	r4, [r2, #4]
 800b11e:	e7ca      	b.n	800b0b6 <_free_r+0x26>
 800b120:	b003      	add	sp, #12
 800b122:	bd30      	pop	{r4, r5, pc}
 800b124:	24000718 	.word	0x24000718

0800b128 <sbrk_aligned>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	4e0e      	ldr	r6, [pc, #56]	; (800b164 <sbrk_aligned+0x3c>)
 800b12c:	460c      	mov	r4, r1
 800b12e:	6831      	ldr	r1, [r6, #0]
 800b130:	4605      	mov	r5, r0
 800b132:	b911      	cbnz	r1, 800b13a <sbrk_aligned+0x12>
 800b134:	f000 fba6 	bl	800b884 <_sbrk_r>
 800b138:	6030      	str	r0, [r6, #0]
 800b13a:	4621      	mov	r1, r4
 800b13c:	4628      	mov	r0, r5
 800b13e:	f000 fba1 	bl	800b884 <_sbrk_r>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	d00a      	beq.n	800b15c <sbrk_aligned+0x34>
 800b146:	1cc4      	adds	r4, r0, #3
 800b148:	f024 0403 	bic.w	r4, r4, #3
 800b14c:	42a0      	cmp	r0, r4
 800b14e:	d007      	beq.n	800b160 <sbrk_aligned+0x38>
 800b150:	1a21      	subs	r1, r4, r0
 800b152:	4628      	mov	r0, r5
 800b154:	f000 fb96 	bl	800b884 <_sbrk_r>
 800b158:	3001      	adds	r0, #1
 800b15a:	d101      	bne.n	800b160 <sbrk_aligned+0x38>
 800b15c:	f04f 34ff 	mov.w	r4, #4294967295
 800b160:	4620      	mov	r0, r4
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	2400071c 	.word	0x2400071c

0800b168 <_malloc_r>:
 800b168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b16c:	1ccd      	adds	r5, r1, #3
 800b16e:	f025 0503 	bic.w	r5, r5, #3
 800b172:	3508      	adds	r5, #8
 800b174:	2d0c      	cmp	r5, #12
 800b176:	bf38      	it	cc
 800b178:	250c      	movcc	r5, #12
 800b17a:	2d00      	cmp	r5, #0
 800b17c:	4607      	mov	r7, r0
 800b17e:	db01      	blt.n	800b184 <_malloc_r+0x1c>
 800b180:	42a9      	cmp	r1, r5
 800b182:	d905      	bls.n	800b190 <_malloc_r+0x28>
 800b184:	230c      	movs	r3, #12
 800b186:	603b      	str	r3, [r7, #0]
 800b188:	2600      	movs	r6, #0
 800b18a:	4630      	mov	r0, r6
 800b18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b190:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b264 <_malloc_r+0xfc>
 800b194:	f000 f868 	bl	800b268 <__malloc_lock>
 800b198:	f8d8 3000 	ldr.w	r3, [r8]
 800b19c:	461c      	mov	r4, r3
 800b19e:	bb5c      	cbnz	r4, 800b1f8 <_malloc_r+0x90>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	f7ff ffc0 	bl	800b128 <sbrk_aligned>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	d155      	bne.n	800b25a <_malloc_r+0xf2>
 800b1ae:	f8d8 4000 	ldr.w	r4, [r8]
 800b1b2:	4626      	mov	r6, r4
 800b1b4:	2e00      	cmp	r6, #0
 800b1b6:	d145      	bne.n	800b244 <_malloc_r+0xdc>
 800b1b8:	2c00      	cmp	r4, #0
 800b1ba:	d048      	beq.n	800b24e <_malloc_r+0xe6>
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4638      	mov	r0, r7
 800b1c2:	eb04 0903 	add.w	r9, r4, r3
 800b1c6:	f000 fb5d 	bl	800b884 <_sbrk_r>
 800b1ca:	4581      	cmp	r9, r0
 800b1cc:	d13f      	bne.n	800b24e <_malloc_r+0xe6>
 800b1ce:	6821      	ldr	r1, [r4, #0]
 800b1d0:	1a6d      	subs	r5, r5, r1
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	f7ff ffa7 	bl	800b128 <sbrk_aligned>
 800b1da:	3001      	adds	r0, #1
 800b1dc:	d037      	beq.n	800b24e <_malloc_r+0xe6>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	442b      	add	r3, r5
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d038      	beq.n	800b25e <_malloc_r+0xf6>
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	42a2      	cmp	r2, r4
 800b1f0:	d12b      	bne.n	800b24a <_malloc_r+0xe2>
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	605a      	str	r2, [r3, #4]
 800b1f6:	e00f      	b.n	800b218 <_malloc_r+0xb0>
 800b1f8:	6822      	ldr	r2, [r4, #0]
 800b1fa:	1b52      	subs	r2, r2, r5
 800b1fc:	d41f      	bmi.n	800b23e <_malloc_r+0xd6>
 800b1fe:	2a0b      	cmp	r2, #11
 800b200:	d917      	bls.n	800b232 <_malloc_r+0xca>
 800b202:	1961      	adds	r1, r4, r5
 800b204:	42a3      	cmp	r3, r4
 800b206:	6025      	str	r5, [r4, #0]
 800b208:	bf18      	it	ne
 800b20a:	6059      	strne	r1, [r3, #4]
 800b20c:	6863      	ldr	r3, [r4, #4]
 800b20e:	bf08      	it	eq
 800b210:	f8c8 1000 	streq.w	r1, [r8]
 800b214:	5162      	str	r2, [r4, r5]
 800b216:	604b      	str	r3, [r1, #4]
 800b218:	4638      	mov	r0, r7
 800b21a:	f104 060b 	add.w	r6, r4, #11
 800b21e:	f000 f829 	bl	800b274 <__malloc_unlock>
 800b222:	f026 0607 	bic.w	r6, r6, #7
 800b226:	1d23      	adds	r3, r4, #4
 800b228:	1af2      	subs	r2, r6, r3
 800b22a:	d0ae      	beq.n	800b18a <_malloc_r+0x22>
 800b22c:	1b9b      	subs	r3, r3, r6
 800b22e:	50a3      	str	r3, [r4, r2]
 800b230:	e7ab      	b.n	800b18a <_malloc_r+0x22>
 800b232:	42a3      	cmp	r3, r4
 800b234:	6862      	ldr	r2, [r4, #4]
 800b236:	d1dd      	bne.n	800b1f4 <_malloc_r+0x8c>
 800b238:	f8c8 2000 	str.w	r2, [r8]
 800b23c:	e7ec      	b.n	800b218 <_malloc_r+0xb0>
 800b23e:	4623      	mov	r3, r4
 800b240:	6864      	ldr	r4, [r4, #4]
 800b242:	e7ac      	b.n	800b19e <_malloc_r+0x36>
 800b244:	4634      	mov	r4, r6
 800b246:	6876      	ldr	r6, [r6, #4]
 800b248:	e7b4      	b.n	800b1b4 <_malloc_r+0x4c>
 800b24a:	4613      	mov	r3, r2
 800b24c:	e7cc      	b.n	800b1e8 <_malloc_r+0x80>
 800b24e:	230c      	movs	r3, #12
 800b250:	603b      	str	r3, [r7, #0]
 800b252:	4638      	mov	r0, r7
 800b254:	f000 f80e 	bl	800b274 <__malloc_unlock>
 800b258:	e797      	b.n	800b18a <_malloc_r+0x22>
 800b25a:	6025      	str	r5, [r4, #0]
 800b25c:	e7dc      	b.n	800b218 <_malloc_r+0xb0>
 800b25e:	605b      	str	r3, [r3, #4]
 800b260:	deff      	udf	#255	; 0xff
 800b262:	bf00      	nop
 800b264:	24000718 	.word	0x24000718

0800b268 <__malloc_lock>:
 800b268:	4801      	ldr	r0, [pc, #4]	; (800b270 <__malloc_lock+0x8>)
 800b26a:	f7ff bf01 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800b26e:	bf00      	nop
 800b270:	24000714 	.word	0x24000714

0800b274 <__malloc_unlock>:
 800b274:	4801      	ldr	r0, [pc, #4]	; (800b27c <__malloc_unlock+0x8>)
 800b276:	f7ff befc 	b.w	800b072 <__retarget_lock_release_recursive>
 800b27a:	bf00      	nop
 800b27c:	24000714 	.word	0x24000714

0800b280 <__ssputs_r>:
 800b280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b284:	688e      	ldr	r6, [r1, #8]
 800b286:	461f      	mov	r7, r3
 800b288:	42be      	cmp	r6, r7
 800b28a:	680b      	ldr	r3, [r1, #0]
 800b28c:	4682      	mov	sl, r0
 800b28e:	460c      	mov	r4, r1
 800b290:	4690      	mov	r8, r2
 800b292:	d82c      	bhi.n	800b2ee <__ssputs_r+0x6e>
 800b294:	898a      	ldrh	r2, [r1, #12]
 800b296:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b29a:	d026      	beq.n	800b2ea <__ssputs_r+0x6a>
 800b29c:	6965      	ldr	r5, [r4, #20]
 800b29e:	6909      	ldr	r1, [r1, #16]
 800b2a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2a4:	eba3 0901 	sub.w	r9, r3, r1
 800b2a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2ac:	1c7b      	adds	r3, r7, #1
 800b2ae:	444b      	add	r3, r9
 800b2b0:	106d      	asrs	r5, r5, #1
 800b2b2:	429d      	cmp	r5, r3
 800b2b4:	bf38      	it	cc
 800b2b6:	461d      	movcc	r5, r3
 800b2b8:	0553      	lsls	r3, r2, #21
 800b2ba:	d527      	bpl.n	800b30c <__ssputs_r+0x8c>
 800b2bc:	4629      	mov	r1, r5
 800b2be:	f7ff ff53 	bl	800b168 <_malloc_r>
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	b360      	cbz	r0, 800b320 <__ssputs_r+0xa0>
 800b2c6:	6921      	ldr	r1, [r4, #16]
 800b2c8:	464a      	mov	r2, r9
 800b2ca:	f7ff fed3 	bl	800b074 <memcpy>
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d8:	81a3      	strh	r3, [r4, #12]
 800b2da:	6126      	str	r6, [r4, #16]
 800b2dc:	6165      	str	r5, [r4, #20]
 800b2de:	444e      	add	r6, r9
 800b2e0:	eba5 0509 	sub.w	r5, r5, r9
 800b2e4:	6026      	str	r6, [r4, #0]
 800b2e6:	60a5      	str	r5, [r4, #8]
 800b2e8:	463e      	mov	r6, r7
 800b2ea:	42be      	cmp	r6, r7
 800b2ec:	d900      	bls.n	800b2f0 <__ssputs_r+0x70>
 800b2ee:	463e      	mov	r6, r7
 800b2f0:	6820      	ldr	r0, [r4, #0]
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	4641      	mov	r1, r8
 800b2f6:	f000 faab 	bl	800b850 <memmove>
 800b2fa:	68a3      	ldr	r3, [r4, #8]
 800b2fc:	1b9b      	subs	r3, r3, r6
 800b2fe:	60a3      	str	r3, [r4, #8]
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	4433      	add	r3, r6
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	2000      	movs	r0, #0
 800b308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30c:	462a      	mov	r2, r5
 800b30e:	f000 fac9 	bl	800b8a4 <_realloc_r>
 800b312:	4606      	mov	r6, r0
 800b314:	2800      	cmp	r0, #0
 800b316:	d1e0      	bne.n	800b2da <__ssputs_r+0x5a>
 800b318:	6921      	ldr	r1, [r4, #16]
 800b31a:	4650      	mov	r0, sl
 800b31c:	f7ff feb8 	bl	800b090 <_free_r>
 800b320:	230c      	movs	r3, #12
 800b322:	f8ca 3000 	str.w	r3, [sl]
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b32c:	81a3      	strh	r3, [r4, #12]
 800b32e:	f04f 30ff 	mov.w	r0, #4294967295
 800b332:	e7e9      	b.n	800b308 <__ssputs_r+0x88>

0800b334 <_svfiprintf_r>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	4698      	mov	r8, r3
 800b33a:	898b      	ldrh	r3, [r1, #12]
 800b33c:	061b      	lsls	r3, r3, #24
 800b33e:	b09d      	sub	sp, #116	; 0x74
 800b340:	4607      	mov	r7, r0
 800b342:	460d      	mov	r5, r1
 800b344:	4614      	mov	r4, r2
 800b346:	d50e      	bpl.n	800b366 <_svfiprintf_r+0x32>
 800b348:	690b      	ldr	r3, [r1, #16]
 800b34a:	b963      	cbnz	r3, 800b366 <_svfiprintf_r+0x32>
 800b34c:	2140      	movs	r1, #64	; 0x40
 800b34e:	f7ff ff0b 	bl	800b168 <_malloc_r>
 800b352:	6028      	str	r0, [r5, #0]
 800b354:	6128      	str	r0, [r5, #16]
 800b356:	b920      	cbnz	r0, 800b362 <_svfiprintf_r+0x2e>
 800b358:	230c      	movs	r3, #12
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	f04f 30ff 	mov.w	r0, #4294967295
 800b360:	e0d0      	b.n	800b504 <_svfiprintf_r+0x1d0>
 800b362:	2340      	movs	r3, #64	; 0x40
 800b364:	616b      	str	r3, [r5, #20]
 800b366:	2300      	movs	r3, #0
 800b368:	9309      	str	r3, [sp, #36]	; 0x24
 800b36a:	2320      	movs	r3, #32
 800b36c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b370:	f8cd 800c 	str.w	r8, [sp, #12]
 800b374:	2330      	movs	r3, #48	; 0x30
 800b376:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b51c <_svfiprintf_r+0x1e8>
 800b37a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b37e:	f04f 0901 	mov.w	r9, #1
 800b382:	4623      	mov	r3, r4
 800b384:	469a      	mov	sl, r3
 800b386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b38a:	b10a      	cbz	r2, 800b390 <_svfiprintf_r+0x5c>
 800b38c:	2a25      	cmp	r2, #37	; 0x25
 800b38e:	d1f9      	bne.n	800b384 <_svfiprintf_r+0x50>
 800b390:	ebba 0b04 	subs.w	fp, sl, r4
 800b394:	d00b      	beq.n	800b3ae <_svfiprintf_r+0x7a>
 800b396:	465b      	mov	r3, fp
 800b398:	4622      	mov	r2, r4
 800b39a:	4629      	mov	r1, r5
 800b39c:	4638      	mov	r0, r7
 800b39e:	f7ff ff6f 	bl	800b280 <__ssputs_r>
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	f000 80a9 	beq.w	800b4fa <_svfiprintf_r+0x1c6>
 800b3a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3aa:	445a      	add	r2, fp
 800b3ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 80a1 	beq.w	800b4fa <_svfiprintf_r+0x1c6>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b3be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3c2:	f10a 0a01 	add.w	sl, sl, #1
 800b3c6:	9304      	str	r3, [sp, #16]
 800b3c8:	9307      	str	r3, [sp, #28]
 800b3ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b3d0:	4654      	mov	r4, sl
 800b3d2:	2205      	movs	r2, #5
 800b3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d8:	4850      	ldr	r0, [pc, #320]	; (800b51c <_svfiprintf_r+0x1e8>)
 800b3da:	f7f4 ffa1 	bl	8000320 <memchr>
 800b3de:	9a04      	ldr	r2, [sp, #16]
 800b3e0:	b9d8      	cbnz	r0, 800b41a <_svfiprintf_r+0xe6>
 800b3e2:	06d0      	lsls	r0, r2, #27
 800b3e4:	bf44      	itt	mi
 800b3e6:	2320      	movmi	r3, #32
 800b3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ec:	0711      	lsls	r1, r2, #28
 800b3ee:	bf44      	itt	mi
 800b3f0:	232b      	movmi	r3, #43	; 0x2b
 800b3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b3fc:	d015      	beq.n	800b42a <_svfiprintf_r+0xf6>
 800b3fe:	9a07      	ldr	r2, [sp, #28]
 800b400:	4654      	mov	r4, sl
 800b402:	2000      	movs	r0, #0
 800b404:	f04f 0c0a 	mov.w	ip, #10
 800b408:	4621      	mov	r1, r4
 800b40a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b40e:	3b30      	subs	r3, #48	; 0x30
 800b410:	2b09      	cmp	r3, #9
 800b412:	d94d      	bls.n	800b4b0 <_svfiprintf_r+0x17c>
 800b414:	b1b0      	cbz	r0, 800b444 <_svfiprintf_r+0x110>
 800b416:	9207      	str	r2, [sp, #28]
 800b418:	e014      	b.n	800b444 <_svfiprintf_r+0x110>
 800b41a:	eba0 0308 	sub.w	r3, r0, r8
 800b41e:	fa09 f303 	lsl.w	r3, r9, r3
 800b422:	4313      	orrs	r3, r2
 800b424:	9304      	str	r3, [sp, #16]
 800b426:	46a2      	mov	sl, r4
 800b428:	e7d2      	b.n	800b3d0 <_svfiprintf_r+0x9c>
 800b42a:	9b03      	ldr	r3, [sp, #12]
 800b42c:	1d19      	adds	r1, r3, #4
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	9103      	str	r1, [sp, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	bfbb      	ittet	lt
 800b436:	425b      	neglt	r3, r3
 800b438:	f042 0202 	orrlt.w	r2, r2, #2
 800b43c:	9307      	strge	r3, [sp, #28]
 800b43e:	9307      	strlt	r3, [sp, #28]
 800b440:	bfb8      	it	lt
 800b442:	9204      	strlt	r2, [sp, #16]
 800b444:	7823      	ldrb	r3, [r4, #0]
 800b446:	2b2e      	cmp	r3, #46	; 0x2e
 800b448:	d10c      	bne.n	800b464 <_svfiprintf_r+0x130>
 800b44a:	7863      	ldrb	r3, [r4, #1]
 800b44c:	2b2a      	cmp	r3, #42	; 0x2a
 800b44e:	d134      	bne.n	800b4ba <_svfiprintf_r+0x186>
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	1d1a      	adds	r2, r3, #4
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	9203      	str	r2, [sp, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	bfb8      	it	lt
 800b45c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b460:	3402      	adds	r4, #2
 800b462:	9305      	str	r3, [sp, #20]
 800b464:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b52c <_svfiprintf_r+0x1f8>
 800b468:	7821      	ldrb	r1, [r4, #0]
 800b46a:	2203      	movs	r2, #3
 800b46c:	4650      	mov	r0, sl
 800b46e:	f7f4 ff57 	bl	8000320 <memchr>
 800b472:	b138      	cbz	r0, 800b484 <_svfiprintf_r+0x150>
 800b474:	9b04      	ldr	r3, [sp, #16]
 800b476:	eba0 000a 	sub.w	r0, r0, sl
 800b47a:	2240      	movs	r2, #64	; 0x40
 800b47c:	4082      	lsls	r2, r0
 800b47e:	4313      	orrs	r3, r2
 800b480:	3401      	adds	r4, #1
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b488:	4825      	ldr	r0, [pc, #148]	; (800b520 <_svfiprintf_r+0x1ec>)
 800b48a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b48e:	2206      	movs	r2, #6
 800b490:	f7f4 ff46 	bl	8000320 <memchr>
 800b494:	2800      	cmp	r0, #0
 800b496:	d038      	beq.n	800b50a <_svfiprintf_r+0x1d6>
 800b498:	4b22      	ldr	r3, [pc, #136]	; (800b524 <_svfiprintf_r+0x1f0>)
 800b49a:	bb1b      	cbnz	r3, 800b4e4 <_svfiprintf_r+0x1b0>
 800b49c:	9b03      	ldr	r3, [sp, #12]
 800b49e:	3307      	adds	r3, #7
 800b4a0:	f023 0307 	bic.w	r3, r3, #7
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	9303      	str	r3, [sp, #12]
 800b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4aa:	4433      	add	r3, r6
 800b4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ae:	e768      	b.n	800b382 <_svfiprintf_r+0x4e>
 800b4b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	e7a6      	b.n	800b408 <_svfiprintf_r+0xd4>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	3401      	adds	r4, #1
 800b4be:	9305      	str	r3, [sp, #20]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	f04f 0c0a 	mov.w	ip, #10
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4cc:	3a30      	subs	r2, #48	; 0x30
 800b4ce:	2a09      	cmp	r2, #9
 800b4d0:	d903      	bls.n	800b4da <_svfiprintf_r+0x1a6>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0c6      	beq.n	800b464 <_svfiprintf_r+0x130>
 800b4d6:	9105      	str	r1, [sp, #20]
 800b4d8:	e7c4      	b.n	800b464 <_svfiprintf_r+0x130>
 800b4da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4de:	4604      	mov	r4, r0
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e7f0      	b.n	800b4c6 <_svfiprintf_r+0x192>
 800b4e4:	ab03      	add	r3, sp, #12
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	462a      	mov	r2, r5
 800b4ea:	4b0f      	ldr	r3, [pc, #60]	; (800b528 <_svfiprintf_r+0x1f4>)
 800b4ec:	a904      	add	r1, sp, #16
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f3af 8000 	nop.w
 800b4f4:	1c42      	adds	r2, r0, #1
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	d1d6      	bne.n	800b4a8 <_svfiprintf_r+0x174>
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	065b      	lsls	r3, r3, #25
 800b4fe:	f53f af2d 	bmi.w	800b35c <_svfiprintf_r+0x28>
 800b502:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b504:	b01d      	add	sp, #116	; 0x74
 800b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b50a:	ab03      	add	r3, sp, #12
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	462a      	mov	r2, r5
 800b510:	4b05      	ldr	r3, [pc, #20]	; (800b528 <_svfiprintf_r+0x1f4>)
 800b512:	a904      	add	r1, sp, #16
 800b514:	4638      	mov	r0, r7
 800b516:	f000 f879 	bl	800b60c <_printf_i>
 800b51a:	e7eb      	b.n	800b4f4 <_svfiprintf_r+0x1c0>
 800b51c:	0800bc3c 	.word	0x0800bc3c
 800b520:	0800bc46 	.word	0x0800bc46
 800b524:	00000000 	.word	0x00000000
 800b528:	0800b281 	.word	0x0800b281
 800b52c:	0800bc42 	.word	0x0800bc42

0800b530 <_printf_common>:
 800b530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b534:	4616      	mov	r6, r2
 800b536:	4699      	mov	r9, r3
 800b538:	688a      	ldr	r2, [r1, #8]
 800b53a:	690b      	ldr	r3, [r1, #16]
 800b53c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b540:	4293      	cmp	r3, r2
 800b542:	bfb8      	it	lt
 800b544:	4613      	movlt	r3, r2
 800b546:	6033      	str	r3, [r6, #0]
 800b548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b54c:	4607      	mov	r7, r0
 800b54e:	460c      	mov	r4, r1
 800b550:	b10a      	cbz	r2, 800b556 <_printf_common+0x26>
 800b552:	3301      	adds	r3, #1
 800b554:	6033      	str	r3, [r6, #0]
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	0699      	lsls	r1, r3, #26
 800b55a:	bf42      	ittt	mi
 800b55c:	6833      	ldrmi	r3, [r6, #0]
 800b55e:	3302      	addmi	r3, #2
 800b560:	6033      	strmi	r3, [r6, #0]
 800b562:	6825      	ldr	r5, [r4, #0]
 800b564:	f015 0506 	ands.w	r5, r5, #6
 800b568:	d106      	bne.n	800b578 <_printf_common+0x48>
 800b56a:	f104 0a19 	add.w	sl, r4, #25
 800b56e:	68e3      	ldr	r3, [r4, #12]
 800b570:	6832      	ldr	r2, [r6, #0]
 800b572:	1a9b      	subs	r3, r3, r2
 800b574:	42ab      	cmp	r3, r5
 800b576:	dc26      	bgt.n	800b5c6 <_printf_common+0x96>
 800b578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b57c:	1e13      	subs	r3, r2, #0
 800b57e:	6822      	ldr	r2, [r4, #0]
 800b580:	bf18      	it	ne
 800b582:	2301      	movne	r3, #1
 800b584:	0692      	lsls	r2, r2, #26
 800b586:	d42b      	bmi.n	800b5e0 <_printf_common+0xb0>
 800b588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b58c:	4649      	mov	r1, r9
 800b58e:	4638      	mov	r0, r7
 800b590:	47c0      	blx	r8
 800b592:	3001      	adds	r0, #1
 800b594:	d01e      	beq.n	800b5d4 <_printf_common+0xa4>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	6922      	ldr	r2, [r4, #16]
 800b59a:	f003 0306 	and.w	r3, r3, #6
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	bf02      	ittt	eq
 800b5a2:	68e5      	ldreq	r5, [r4, #12]
 800b5a4:	6833      	ldreq	r3, [r6, #0]
 800b5a6:	1aed      	subeq	r5, r5, r3
 800b5a8:	68a3      	ldr	r3, [r4, #8]
 800b5aa:	bf0c      	ite	eq
 800b5ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5b0:	2500      	movne	r5, #0
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	bfc4      	itt	gt
 800b5b6:	1a9b      	subgt	r3, r3, r2
 800b5b8:	18ed      	addgt	r5, r5, r3
 800b5ba:	2600      	movs	r6, #0
 800b5bc:	341a      	adds	r4, #26
 800b5be:	42b5      	cmp	r5, r6
 800b5c0:	d11a      	bne.n	800b5f8 <_printf_common+0xc8>
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	e008      	b.n	800b5d8 <_printf_common+0xa8>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4652      	mov	r2, sl
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	47c0      	blx	r8
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	d103      	bne.n	800b5dc <_printf_common+0xac>
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5dc:	3501      	adds	r5, #1
 800b5de:	e7c6      	b.n	800b56e <_printf_common+0x3e>
 800b5e0:	18e1      	adds	r1, r4, r3
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	2030      	movs	r0, #48	; 0x30
 800b5e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5ea:	4422      	add	r2, r4
 800b5ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5f4:	3302      	adds	r3, #2
 800b5f6:	e7c7      	b.n	800b588 <_printf_common+0x58>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4638      	mov	r0, r7
 800b600:	47c0      	blx	r8
 800b602:	3001      	adds	r0, #1
 800b604:	d0e6      	beq.n	800b5d4 <_printf_common+0xa4>
 800b606:	3601      	adds	r6, #1
 800b608:	e7d9      	b.n	800b5be <_printf_common+0x8e>
	...

0800b60c <_printf_i>:
 800b60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b610:	7e0f      	ldrb	r7, [r1, #24]
 800b612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b614:	2f78      	cmp	r7, #120	; 0x78
 800b616:	4691      	mov	r9, r2
 800b618:	4680      	mov	r8, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	469a      	mov	sl, r3
 800b61e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b622:	d807      	bhi.n	800b634 <_printf_i+0x28>
 800b624:	2f62      	cmp	r7, #98	; 0x62
 800b626:	d80a      	bhi.n	800b63e <_printf_i+0x32>
 800b628:	2f00      	cmp	r7, #0
 800b62a:	f000 80d4 	beq.w	800b7d6 <_printf_i+0x1ca>
 800b62e:	2f58      	cmp	r7, #88	; 0x58
 800b630:	f000 80c0 	beq.w	800b7b4 <_printf_i+0x1a8>
 800b634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b63c:	e03a      	b.n	800b6b4 <_printf_i+0xa8>
 800b63e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b642:	2b15      	cmp	r3, #21
 800b644:	d8f6      	bhi.n	800b634 <_printf_i+0x28>
 800b646:	a101      	add	r1, pc, #4	; (adr r1, 800b64c <_printf_i+0x40>)
 800b648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b64c:	0800b6a5 	.word	0x0800b6a5
 800b650:	0800b6b9 	.word	0x0800b6b9
 800b654:	0800b635 	.word	0x0800b635
 800b658:	0800b635 	.word	0x0800b635
 800b65c:	0800b635 	.word	0x0800b635
 800b660:	0800b635 	.word	0x0800b635
 800b664:	0800b6b9 	.word	0x0800b6b9
 800b668:	0800b635 	.word	0x0800b635
 800b66c:	0800b635 	.word	0x0800b635
 800b670:	0800b635 	.word	0x0800b635
 800b674:	0800b635 	.word	0x0800b635
 800b678:	0800b7bd 	.word	0x0800b7bd
 800b67c:	0800b6e5 	.word	0x0800b6e5
 800b680:	0800b777 	.word	0x0800b777
 800b684:	0800b635 	.word	0x0800b635
 800b688:	0800b635 	.word	0x0800b635
 800b68c:	0800b7df 	.word	0x0800b7df
 800b690:	0800b635 	.word	0x0800b635
 800b694:	0800b6e5 	.word	0x0800b6e5
 800b698:	0800b635 	.word	0x0800b635
 800b69c:	0800b635 	.word	0x0800b635
 800b6a0:	0800b77f 	.word	0x0800b77f
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	1d1a      	adds	r2, r3, #4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	602a      	str	r2, [r5, #0]
 800b6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e09f      	b.n	800b7f8 <_printf_i+0x1ec>
 800b6b8:	6820      	ldr	r0, [r4, #0]
 800b6ba:	682b      	ldr	r3, [r5, #0]
 800b6bc:	0607      	lsls	r7, r0, #24
 800b6be:	f103 0104 	add.w	r1, r3, #4
 800b6c2:	6029      	str	r1, [r5, #0]
 800b6c4:	d501      	bpl.n	800b6ca <_printf_i+0xbe>
 800b6c6:	681e      	ldr	r6, [r3, #0]
 800b6c8:	e003      	b.n	800b6d2 <_printf_i+0xc6>
 800b6ca:	0646      	lsls	r6, r0, #25
 800b6cc:	d5fb      	bpl.n	800b6c6 <_printf_i+0xba>
 800b6ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b6d2:	2e00      	cmp	r6, #0
 800b6d4:	da03      	bge.n	800b6de <_printf_i+0xd2>
 800b6d6:	232d      	movs	r3, #45	; 0x2d
 800b6d8:	4276      	negs	r6, r6
 800b6da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6de:	485a      	ldr	r0, [pc, #360]	; (800b848 <_printf_i+0x23c>)
 800b6e0:	230a      	movs	r3, #10
 800b6e2:	e012      	b.n	800b70a <_printf_i+0xfe>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	6820      	ldr	r0, [r4, #0]
 800b6e8:	1d19      	adds	r1, r3, #4
 800b6ea:	6029      	str	r1, [r5, #0]
 800b6ec:	0605      	lsls	r5, r0, #24
 800b6ee:	d501      	bpl.n	800b6f4 <_printf_i+0xe8>
 800b6f0:	681e      	ldr	r6, [r3, #0]
 800b6f2:	e002      	b.n	800b6fa <_printf_i+0xee>
 800b6f4:	0641      	lsls	r1, r0, #25
 800b6f6:	d5fb      	bpl.n	800b6f0 <_printf_i+0xe4>
 800b6f8:	881e      	ldrh	r6, [r3, #0]
 800b6fa:	4853      	ldr	r0, [pc, #332]	; (800b848 <_printf_i+0x23c>)
 800b6fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b6fe:	bf0c      	ite	eq
 800b700:	2308      	moveq	r3, #8
 800b702:	230a      	movne	r3, #10
 800b704:	2100      	movs	r1, #0
 800b706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b70a:	6865      	ldr	r5, [r4, #4]
 800b70c:	60a5      	str	r5, [r4, #8]
 800b70e:	2d00      	cmp	r5, #0
 800b710:	bfa2      	ittt	ge
 800b712:	6821      	ldrge	r1, [r4, #0]
 800b714:	f021 0104 	bicge.w	r1, r1, #4
 800b718:	6021      	strge	r1, [r4, #0]
 800b71a:	b90e      	cbnz	r6, 800b720 <_printf_i+0x114>
 800b71c:	2d00      	cmp	r5, #0
 800b71e:	d04b      	beq.n	800b7b8 <_printf_i+0x1ac>
 800b720:	4615      	mov	r5, r2
 800b722:	fbb6 f1f3 	udiv	r1, r6, r3
 800b726:	fb03 6711 	mls	r7, r3, r1, r6
 800b72a:	5dc7      	ldrb	r7, [r0, r7]
 800b72c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b730:	4637      	mov	r7, r6
 800b732:	42bb      	cmp	r3, r7
 800b734:	460e      	mov	r6, r1
 800b736:	d9f4      	bls.n	800b722 <_printf_i+0x116>
 800b738:	2b08      	cmp	r3, #8
 800b73a:	d10b      	bne.n	800b754 <_printf_i+0x148>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	07de      	lsls	r6, r3, #31
 800b740:	d508      	bpl.n	800b754 <_printf_i+0x148>
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	6861      	ldr	r1, [r4, #4]
 800b746:	4299      	cmp	r1, r3
 800b748:	bfde      	ittt	le
 800b74a:	2330      	movle	r3, #48	; 0x30
 800b74c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b750:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b754:	1b52      	subs	r2, r2, r5
 800b756:	6122      	str	r2, [r4, #16]
 800b758:	f8cd a000 	str.w	sl, [sp]
 800b75c:	464b      	mov	r3, r9
 800b75e:	aa03      	add	r2, sp, #12
 800b760:	4621      	mov	r1, r4
 800b762:	4640      	mov	r0, r8
 800b764:	f7ff fee4 	bl	800b530 <_printf_common>
 800b768:	3001      	adds	r0, #1
 800b76a:	d14a      	bne.n	800b802 <_printf_i+0x1f6>
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	b004      	add	sp, #16
 800b772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	f043 0320 	orr.w	r3, r3, #32
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	4833      	ldr	r0, [pc, #204]	; (800b84c <_printf_i+0x240>)
 800b780:	2778      	movs	r7, #120	; 0x78
 800b782:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	6829      	ldr	r1, [r5, #0]
 800b78a:	061f      	lsls	r7, r3, #24
 800b78c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b790:	d402      	bmi.n	800b798 <_printf_i+0x18c>
 800b792:	065f      	lsls	r7, r3, #25
 800b794:	bf48      	it	mi
 800b796:	b2b6      	uxthmi	r6, r6
 800b798:	07df      	lsls	r7, r3, #31
 800b79a:	bf48      	it	mi
 800b79c:	f043 0320 	orrmi.w	r3, r3, #32
 800b7a0:	6029      	str	r1, [r5, #0]
 800b7a2:	bf48      	it	mi
 800b7a4:	6023      	strmi	r3, [r4, #0]
 800b7a6:	b91e      	cbnz	r6, 800b7b0 <_printf_i+0x1a4>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	f023 0320 	bic.w	r3, r3, #32
 800b7ae:	6023      	str	r3, [r4, #0]
 800b7b0:	2310      	movs	r3, #16
 800b7b2:	e7a7      	b.n	800b704 <_printf_i+0xf8>
 800b7b4:	4824      	ldr	r0, [pc, #144]	; (800b848 <_printf_i+0x23c>)
 800b7b6:	e7e4      	b.n	800b782 <_printf_i+0x176>
 800b7b8:	4615      	mov	r5, r2
 800b7ba:	e7bd      	b.n	800b738 <_printf_i+0x12c>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	6826      	ldr	r6, [r4, #0]
 800b7c0:	6961      	ldr	r1, [r4, #20]
 800b7c2:	1d18      	adds	r0, r3, #4
 800b7c4:	6028      	str	r0, [r5, #0]
 800b7c6:	0635      	lsls	r5, r6, #24
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	d501      	bpl.n	800b7d0 <_printf_i+0x1c4>
 800b7cc:	6019      	str	r1, [r3, #0]
 800b7ce:	e002      	b.n	800b7d6 <_printf_i+0x1ca>
 800b7d0:	0670      	lsls	r0, r6, #25
 800b7d2:	d5fb      	bpl.n	800b7cc <_printf_i+0x1c0>
 800b7d4:	8019      	strh	r1, [r3, #0]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	6123      	str	r3, [r4, #16]
 800b7da:	4615      	mov	r5, r2
 800b7dc:	e7bc      	b.n	800b758 <_printf_i+0x14c>
 800b7de:	682b      	ldr	r3, [r5, #0]
 800b7e0:	1d1a      	adds	r2, r3, #4
 800b7e2:	602a      	str	r2, [r5, #0]
 800b7e4:	681d      	ldr	r5, [r3, #0]
 800b7e6:	6862      	ldr	r2, [r4, #4]
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f7f4 fd98 	bl	8000320 <memchr>
 800b7f0:	b108      	cbz	r0, 800b7f6 <_printf_i+0x1ea>
 800b7f2:	1b40      	subs	r0, r0, r5
 800b7f4:	6060      	str	r0, [r4, #4]
 800b7f6:	6863      	ldr	r3, [r4, #4]
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b800:	e7aa      	b.n	800b758 <_printf_i+0x14c>
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	462a      	mov	r2, r5
 800b806:	4649      	mov	r1, r9
 800b808:	4640      	mov	r0, r8
 800b80a:	47d0      	blx	sl
 800b80c:	3001      	adds	r0, #1
 800b80e:	d0ad      	beq.n	800b76c <_printf_i+0x160>
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	079b      	lsls	r3, r3, #30
 800b814:	d413      	bmi.n	800b83e <_printf_i+0x232>
 800b816:	68e0      	ldr	r0, [r4, #12]
 800b818:	9b03      	ldr	r3, [sp, #12]
 800b81a:	4298      	cmp	r0, r3
 800b81c:	bfb8      	it	lt
 800b81e:	4618      	movlt	r0, r3
 800b820:	e7a6      	b.n	800b770 <_printf_i+0x164>
 800b822:	2301      	movs	r3, #1
 800b824:	4632      	mov	r2, r6
 800b826:	4649      	mov	r1, r9
 800b828:	4640      	mov	r0, r8
 800b82a:	47d0      	blx	sl
 800b82c:	3001      	adds	r0, #1
 800b82e:	d09d      	beq.n	800b76c <_printf_i+0x160>
 800b830:	3501      	adds	r5, #1
 800b832:	68e3      	ldr	r3, [r4, #12]
 800b834:	9903      	ldr	r1, [sp, #12]
 800b836:	1a5b      	subs	r3, r3, r1
 800b838:	42ab      	cmp	r3, r5
 800b83a:	dcf2      	bgt.n	800b822 <_printf_i+0x216>
 800b83c:	e7eb      	b.n	800b816 <_printf_i+0x20a>
 800b83e:	2500      	movs	r5, #0
 800b840:	f104 0619 	add.w	r6, r4, #25
 800b844:	e7f5      	b.n	800b832 <_printf_i+0x226>
 800b846:	bf00      	nop
 800b848:	0800bc4d 	.word	0x0800bc4d
 800b84c:	0800bc5e 	.word	0x0800bc5e

0800b850 <memmove>:
 800b850:	4288      	cmp	r0, r1
 800b852:	b510      	push	{r4, lr}
 800b854:	eb01 0402 	add.w	r4, r1, r2
 800b858:	d902      	bls.n	800b860 <memmove+0x10>
 800b85a:	4284      	cmp	r4, r0
 800b85c:	4623      	mov	r3, r4
 800b85e:	d807      	bhi.n	800b870 <memmove+0x20>
 800b860:	1e43      	subs	r3, r0, #1
 800b862:	42a1      	cmp	r1, r4
 800b864:	d008      	beq.n	800b878 <memmove+0x28>
 800b866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b86a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b86e:	e7f8      	b.n	800b862 <memmove+0x12>
 800b870:	4402      	add	r2, r0
 800b872:	4601      	mov	r1, r0
 800b874:	428a      	cmp	r2, r1
 800b876:	d100      	bne.n	800b87a <memmove+0x2a>
 800b878:	bd10      	pop	{r4, pc}
 800b87a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b87e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b882:	e7f7      	b.n	800b874 <memmove+0x24>

0800b884 <_sbrk_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d06      	ldr	r5, [pc, #24]	; (800b8a0 <_sbrk_r+0x1c>)
 800b888:	2300      	movs	r3, #0
 800b88a:	4604      	mov	r4, r0
 800b88c:	4608      	mov	r0, r1
 800b88e:	602b      	str	r3, [r5, #0]
 800b890:	f7f6 fdac 	bl	80023ec <_sbrk>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d102      	bne.n	800b89e <_sbrk_r+0x1a>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	b103      	cbz	r3, 800b89e <_sbrk_r+0x1a>
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	24000710 	.word	0x24000710

0800b8a4 <_realloc_r>:
 800b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a8:	4680      	mov	r8, r0
 800b8aa:	4614      	mov	r4, r2
 800b8ac:	460e      	mov	r6, r1
 800b8ae:	b921      	cbnz	r1, 800b8ba <_realloc_r+0x16>
 800b8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	f7ff bc57 	b.w	800b168 <_malloc_r>
 800b8ba:	b92a      	cbnz	r2, 800b8c8 <_realloc_r+0x24>
 800b8bc:	f7ff fbe8 	bl	800b090 <_free_r>
 800b8c0:	4625      	mov	r5, r4
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c8:	f000 f81b 	bl	800b902 <_malloc_usable_size_r>
 800b8cc:	4284      	cmp	r4, r0
 800b8ce:	4607      	mov	r7, r0
 800b8d0:	d802      	bhi.n	800b8d8 <_realloc_r+0x34>
 800b8d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8d6:	d812      	bhi.n	800b8fe <_realloc_r+0x5a>
 800b8d8:	4621      	mov	r1, r4
 800b8da:	4640      	mov	r0, r8
 800b8dc:	f7ff fc44 	bl	800b168 <_malloc_r>
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d0ed      	beq.n	800b8c2 <_realloc_r+0x1e>
 800b8e6:	42bc      	cmp	r4, r7
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	bf28      	it	cs
 800b8ee:	463a      	movcs	r2, r7
 800b8f0:	f7ff fbc0 	bl	800b074 <memcpy>
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	f7ff fbca 	bl	800b090 <_free_r>
 800b8fc:	e7e1      	b.n	800b8c2 <_realloc_r+0x1e>
 800b8fe:	4635      	mov	r5, r6
 800b900:	e7df      	b.n	800b8c2 <_realloc_r+0x1e>

0800b902 <_malloc_usable_size_r>:
 800b902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b906:	1f18      	subs	r0, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	bfbc      	itt	lt
 800b90c:	580b      	ldrlt	r3, [r1, r0]
 800b90e:	18c0      	addlt	r0, r0, r3
 800b910:	4770      	bx	lr
	...

0800b914 <_init>:
 800b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b916:	bf00      	nop
 800b918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b91a:	bc08      	pop	{r3}
 800b91c:	469e      	mov	lr, r3
 800b91e:	4770      	bx	lr

0800b920 <_fini>:
 800b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b922:	bf00      	nop
 800b924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b926:	bc08      	pop	{r3}
 800b928:	469e      	mov	lr, r3
 800b92a:	4770      	bx	lr
